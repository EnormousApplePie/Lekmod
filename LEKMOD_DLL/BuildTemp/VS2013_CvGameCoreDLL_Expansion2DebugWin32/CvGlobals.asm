; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvGlobals.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05OCFELOIJ@1?40?40?$AA@			; `string'
PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
CONST	SEGMENT
_guidICvDLLDatabaseUtility1 DD 0ae87f7bdH
	DW	08510H
	DW	0444fH
	DB	09dH
	DB	054H
	DB	098H
	DB	03dH
	DB	077H
	DB	064H
	DB	085H
	DB	0a6H
CONST	ENDS
_DATA	SEGMENT
_CIV5_XP2_DLL_VERSION DD FLAT:??_C@_05OCFELOIJ@1?40?40?$AA@
_DATA	ENDS
;	COMDAT ??_C@_05OCFELOIJ@1?40?40?$AA@
CONST	SEGMENT
??_C@_05OCFELOIJ@1?40?40?$AA@ DB '1.0.0', 00H		; `string'
CONST	ENDS
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
PUBLIC	??1?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::~vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >
PUBLIC	??1?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::~vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >
PUBLIC	??1?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::~vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >
PUBLIC	??1?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::~vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >
PUBLIC	??1?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::~vector<CvEraInfo *,std::allocator<CvEraInfo *> >
PUBLIC	??1?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::~vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >
PUBLIC	??1?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::~vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >
PUBLIC	??1?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::~vector<CvControlInfo *,std::allocator<CvControlInfo *> >
PUBLIC	??1?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::~vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >
PUBLIC	??1?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::~vector<CvActionInfo *,std::allocator<CvActionInfo *> >
PUBLIC	??1?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::~vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >
PUBLIC	??1?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::~vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >
PUBLIC	??1?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::~vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >
PUBLIC	??1?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::~vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >
PUBLIC	??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::~vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >
PUBLIC	??1?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::~vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::~_Vector_val<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >
PUBLIC	??1?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::~vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::~_Vector_val<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >
PUBLIC	??1?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::~vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::~_Vector_val<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >
PUBLIC	??1?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::~vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::~_Vector_val<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >
PUBLIC	??1?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::~vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvVoteInfo *,std::allocator<CvVoteInfo *> >::~_Vector_val<CvVoteInfo *,std::allocator<CvVoteInfo *> >
PUBLIC	??1?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::~vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvProcessInfo *,std::allocator<CvProcessInfo *> >::~_Vector_val<CvProcessInfo *,std::allocator<CvProcessInfo *> >
PUBLIC	??1?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::~vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::~_Vector_val<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >
PUBLIC	??1?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::~vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::~_Vector_val<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >
PUBLIC	??1?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::~vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::~_Vector_val<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >
PUBLIC	??1?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::~vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::~_Vector_val<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >
PUBLIC	??1?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::~vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::~_Vector_val<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >
PUBLIC	??1?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::~vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::~_Vector_val<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >
PUBLIC	??1?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::~vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvBuildInfo *,std::allocator<CvBuildInfo *> >::~_Vector_val<CvBuildInfo *,std::allocator<CvBuildInfo *> >
PUBLIC	??1?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::~vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvResourceInfo *,std::allocator<CvResourceInfo *> >::~_Vector_val<CvResourceInfo *,std::allocator<CvResourceInfo *> >
PUBLIC	??1?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::~vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::~_Vector_val<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >
PUBLIC	??1?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::~vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::~_Vector_val<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >
PUBLIC	??1?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::~vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvRouteInfo *,std::allocator<CvRouteInfo *> >::~_Vector_val<CvRouteInfo *,std::allocator<CvRouteInfo *> >
PUBLIC	??1?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::~vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvYieldInfo *,std::allocator<CvYieldInfo *> >::~_Vector_val<CvYieldInfo *,std::allocator<CvYieldInfo *> >
PUBLIC	??1?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::~vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::~_Vector_val<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >
PUBLIC	??1?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::~vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::~_Vector_val<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >
PUBLIC	??1?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::~vector<CvColorInfo *,std::allocator<CvColorInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvColorInfo *,std::allocator<CvColorInfo *> >::~_Vector_val<CvColorInfo *,std::allocator<CvColorInfo *> >
PUBLIC	??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ ; std::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >::~map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >
PUBLIC	??1?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAE@XZ ; stdext::hash_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::~hash_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >
PUBLIC	??1?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::~vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::~_Vector_val<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >
PUBLIC	__real@c2e423d7
PUBLIC	__real@411ae148
PUBLIC	__real@40a00000
PUBLIC	__real@3fd9999a
PUBLIC	__real@3fe66666
PUBLIC	__real@40c00000
PUBLIC	__real@40c9999a
PUBLIC	__real@3f8147ae
PUBLIC	__real@3f2b851f
PUBLIC	__real@3e99999a
PUBLIC	__real@40066666
PUBLIC	__real@3f666666
PUBLIC	__real@3f000000
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3f800000
PUBLIC	__real@3f8ccccd
PUBLIC	__real@41a00000
PUBLIC	__real@44480000
PUBLIC	__real@442f0000
PUBLIC	__real@43fa0000
PUBLIC	__real@3f733333
PUBLIC	__real@3e19999a
PUBLIC	__real@3c75c28f
PUBLIC	__real@c15bced9
PUBLIC	__real@41802f1b
PUBLIC	__real@40e00000
PUBLIC	__real@3fb8b439
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3fa00000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@40000000
PUBLIC	__real@3eae147b
PUBLIC	??0?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >
PUBLIC	??0?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >
PUBLIC	??0?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >
PUBLIC	??0?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >
PUBLIC	??0?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >
PUBLIC	??0?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::vector<CvEraInfo *,std::allocator<CvEraInfo *> >
PUBLIC	??0?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >
PUBLIC	??0?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >
PUBLIC	??0?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::vector<CvControlInfo *,std::allocator<CvControlInfo *> >
PUBLIC	??0?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >
PUBLIC	??0?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::vector<CvActionInfo *,std::allocator<CvActionInfo *> >
PUBLIC	??0?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >
PUBLIC	??0?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >
PUBLIC	??0?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >
PUBLIC	??0?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >
PUBLIC	??0?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::_Buy
PUBLIC	?_Buy@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::_Buy
PUBLIC	??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
PUBLIC	??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >
PUBLIC	?_Buy@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::_Buy
PUBLIC	__real@00000000
PUBLIC	??_7CvGlobals@@6B@				; CvGlobals::`vftable'
PUBLIC	??0CvGlobals@@QAE@XZ				; CvGlobals::CvGlobals
EXTRN	__imp_??1Results@Database@@UAE@XZ:PROC
EXTRN	__imp_??0Results@Database@@QAE@PBD@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__fltused:DWORD
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_ECvGlobals@@UAEPAXI@Z:PROC			; CvGlobals::`vector deleting destructor'
;	COMDAT __real@c2e423d7
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	SEGMENT
__real@c2e423d7 DD 0c2e423d7r			; -114.07
CONST	ENDS
;	COMDAT __real@411ae148
CONST	SEGMENT
__real@411ae148 DD 0411ae148r			; 9.68
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@3fd9999a
CONST	SEGMENT
__real@3fd9999a DD 03fd9999ar			; 1.7
CONST	ENDS
;	COMDAT __real@3fe66666
CONST	SEGMENT
__real@3fe66666 DD 03fe66666r			; 1.8
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40c9999a
CONST	SEGMENT
__real@40c9999a DD 040c9999ar			; 6.3
CONST	ENDS
;	COMDAT __real@3f8147ae
CONST	SEGMENT
__real@3f8147ae DD 03f8147aer			; 1.01
CONST	ENDS
;	COMDAT __real@3f2b851f
CONST	SEGMENT
__real@3f2b851f DD 03f2b851fr			; 0.67
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@40066666
CONST	SEGMENT
__real@40066666 DD 040066666r			; 2.1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@44480000
CONST	SEGMENT
__real@44480000 DD 044480000r			; 800
CONST	ENDS
;	COMDAT __real@442f0000
CONST	SEGMENT
__real@442f0000 DD 0442f0000r			; 700
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3c75c28f
CONST	SEGMENT
__real@3c75c28f DD 03c75c28fr			; 0.015
CONST	ENDS
;	COMDAT __real@c15bced9
CONST	SEGMENT
__real@c15bced9 DD 0c15bced9r			; -13.738
CONST	ENDS
;	COMDAT __real@41802f1b
CONST	SEGMENT
__real@41802f1b DD 041802f1br			; 16.023
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@3fb8b439
CONST	SEGMENT
__real@3fb8b439 DD 03fb8b439r			; 1.443
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3fa00000
CONST	SEGMENT
__real@3fa00000 DD 03fa00000r			; 1.25
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3eae147b
CONST	SEGMENT
__real@3eae147b DD 03eae147br			; 0.34
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_7CvGlobals@@6B@
CONST	SEGMENT
??_7CvGlobals@@6B@ DD FLAT:??_ECvGlobals@@UAEPAXI@Z	; CvGlobals::`vftable'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CvGlobals@@QAE@XZ DD 019930522H
	DD	040H
	DD	FLAT:__unwindtable$??0CvGlobals@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CvGlobals@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$43
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$1
	DD	02H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$2
	DD	03H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$3
	DD	04H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$58
	DD	04H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$4
	DD	06H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$62
	DD	06H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$5
	DD	08H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$66
	DD	08H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$6
	DD	0aH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$70
	DD	0aH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$7
	DD	0cH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$74
	DD	0cH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$8
	DD	0eH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$78
	DD	0eH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$9
	DD	010H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$82
	DD	010H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$10
	DD	012H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$86
	DD	012H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$11
	DD	014H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$90
	DD	014H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$12
	DD	016H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$94
	DD	016H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$13
	DD	018H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$98
	DD	018H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$14
	DD	01aH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$102
	DD	01aH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$15
	DD	01cH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$106
	DD	01cH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$16
	DD	01eH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$110
	DD	01eH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$17
	DD	020H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$114
	DD	020H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$18
	DD	022H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$118
	DD	022H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$19
	DD	024H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$124
	DD	024H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$20
	DD	026H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$130
	DD	026H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$21
	DD	028H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$136
	DD	028H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$22
	DD	02aH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$142
	DD	02aH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$23
	DD	02cH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$148
	DD	02cH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$24
	DD	02eH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$25
	DD	02fH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$26
	DD	030H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$27
	DD	031H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$28
	DD	032H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$29
	DD	033H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$30
	DD	034H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$31
	DD	035H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$32
	DD	036H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$33
	DD	037H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$34
	DD	038H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$35
	DD	039H
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$36
	DD	03aH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$37
	DD	03bH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$38
	DD	03cH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$39
	DD	03dH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$40
	DD	03eH
	DD	FLAT:__unwindfunclet$??0CvGlobals@@QAE@XZ$41
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
xdata$x	ENDS
;	COMDAT ??0CvGlobals@@QAE@XZ
_TEXT	SEGMENT
tv4362 = -2788						; size = 4
tv4441 = -2784						; size = 4
tv4258 = -2780						; size = 4
tv4337 = -2776						; size = 4
tv4154 = -2772						; size = 4
tv4233 = -2768						; size = 4
tv4018 = -2764						; size = 4
tv4129 = -2760						; size = 4
tv3914 = -2756						; size = 4
tv3993 = -2752						; size = 4
tv3833 = -2748						; size = 4
tv3889 = -2744						; size = 4
tv3717 = -2740						; size = 4
tv3805 = -2736						; size = 4
tv3633 = -2732						; size = 4
tv3689 = -2728						; size = 4
tv3549 = -2724						; size = 4
tv3605 = -2720						; size = 4
tv3465 = -2716						; size = 4
tv3521 = -2712						; size = 4
tv3349 = -2708						; size = 4
tv3437 = -2704						; size = 4
tv3265 = -2700						; size = 4
tv3321 = -2696						; size = 4
tv3181 = -2692						; size = 4
tv3237 = -2688						; size = 4
tv3065 = -2684						; size = 4
tv3153 = -2680						; size = 4
tv2981 = -2676						; size = 4
tv3037 = -2672						; size = 4
tv2897 = -2668						; size = 4
tv2953 = -2664						; size = 4
tv2813 = -2660						; size = 4
tv2869 = -2656						; size = 4
tv2697 = -2652						; size = 4
tv2785 = -2648						; size = 4
tv2613 = -2644						; size = 4
tv2669 = -2640						; size = 4
tv2529 = -2636						; size = 4
tv2585 = -2632						; size = 4
tv2346 = -2628						; size = 4
tv2501 = -2624						; size = 4
tv2163 = -2620						; size = 4
tv2188 = -2616						; size = 4
_this$ = -2612						; size = 4
$T255906 = -2608					; size = 4
$T255859 = -2530					; size = 1
$T255846 = -2529					; size = 1
$T255842 = -2528					; size = 4
$T255835 = -2520					; size = 4
$T255828 = -2512					; size = 4
$T255772 = -2418					; size = 1
$T255759 = -2417					; size = 1
$T255755 = -2416					; size = 4
$T255748 = -2408					; size = 4
$T255741 = -2400					; size = 4
$T255685 = -2306					; size = 1
$T255672 = -2305					; size = 1
$T255668 = -2304					; size = 4
$T255661 = -2296					; size = 4
$T255654 = -2288					; size = 4
$T255598 = -2194					; size = 1
$T255585 = -2193					; size = 1
$T255581 = -2192					; size = 4
$T255574 = -2184					; size = 4
$T255567 = -2176					; size = 4
$T255511 = -2082					; size = 1
$T255498 = -2081					; size = 1
$T255494 = -2080					; size = 4
$T255487 = -2072					; size = 4
$T255480 = -2064					; size = 4
$T255424 = -1970					; size = 1
$T255411 = -1969					; size = 1
$T255407 = -1968					; size = 4
$T255400 = -1960					; size = 4
$T255393 = -1952					; size = 4
$T255344 = -1858					; size = 1
$T255331 = -1857					; size = 1
$T255327 = -1856					; size = 4
$T255320 = -1848					; size = 4
$T255313 = -1840					; size = 4
$T255264 = -1746					; size = 1
$T255251 = -1745					; size = 1
$T255247 = -1744					; size = 4
$T255240 = -1736					; size = 4
$T255233 = -1728					; size = 4
$T255184 = -1634					; size = 1
$T255171 = -1633					; size = 1
$T255167 = -1632					; size = 4
$T255160 = -1624					; size = 4
$T255153 = -1616					; size = 4
$T255104 = -1522					; size = 1
$T255091 = -1521					; size = 1
$T255087 = -1520					; size = 4
$T255080 = -1512					; size = 4
$T255073 = -1504					; size = 4
$T255024 = -1410					; size = 1
$T255011 = -1409					; size = 1
$T255007 = -1408					; size = 4
$T255000 = -1400					; size = 4
$T254993 = -1392					; size = 4
$T254944 = -1298					; size = 1
$T254931 = -1297					; size = 1
$T254927 = -1296					; size = 4
$T254920 = -1288					; size = 4
$T254913 = -1280					; size = 4
$T254864 = -1186					; size = 1
$T254851 = -1185					; size = 1
$T254847 = -1184					; size = 4
$T254840 = -1176					; size = 4
$T254833 = -1168					; size = 4
$T254784 = -1074					; size = 1
$T254771 = -1073					; size = 1
$T254767 = -1072					; size = 4
$T254760 = -1064					; size = 4
$T254753 = -1056					; size = 4
$T254704 = -962						; size = 1
$T254691 = -961						; size = 1
$T254687 = -960						; size = 4
$T254680 = -952						; size = 4
$T254673 = -944						; size = 4
$T254624 = -850						; size = 1
$T254611 = -849						; size = 1
$T254607 = -848						; size = 4
$T254600 = -840						; size = 4
$T254593 = -832						; size = 4
$T254544 = -738						; size = 1
$T254531 = -737						; size = 1
$T254527 = -736						; size = 4
$T254520 = -728						; size = 4
$T254513 = -720						; size = 4
$T254464 = -626						; size = 1
$T254451 = -625						; size = 1
$T254447 = -624						; size = 4
$T254440 = -616						; size = 4
$T254433 = -608						; size = 4
$T254384 = -514						; size = 1
$T254371 = -513						; size = 1
$T254367 = -512						; size = 4
$T254360 = -504						; size = 4
$T254353 = -496						; size = 4
$T254304 = -402						; size = 1
$T254291 = -401						; size = 1
$T254287 = -400						; size = 4
$T254280 = -392						; size = 4
$T254273 = -384						; size = 4
$T254224 = -290						; size = 1
$T254211 = -289						; size = 1
$T254207 = -288						; size = 4
$T254200 = -280						; size = 4
$T254193 = -272						; size = 4
$T254189 = -234						; size = 1
$T254188 = -233						; size = 1
$T254100 = -232						; size = 4
$T254095 = -130						; size = 1
$T254094 = -129						; size = 1
$T253911 = -128						; size = 4
$T253861 = -34						; size = 1
$T253848 = -33						; size = 1
$T253844 = -32						; size = 4
$T253837 = -24						; size = 4
$T253830 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvGlobals@@QAE@XZ PROC				; CvGlobals::CvGlobals, COMDAT
; _this$ = ecx

; 1936 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvGlobals@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2776				; 00000ad8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvGlobals@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+5], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+6], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+7], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+13], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+14], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+15], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+16], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+17], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+18], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+19], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+21], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+22], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+23], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR $T253830[ebp], eax
	mov	ecx, DWORD PTR $T253830[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx], xmm0
	mov	edx, DWORD PTR $T253830[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+4], xmm0
	mov	eax, DWORD PTR $T253830[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+40], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+41], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+42], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+68], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+84], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+92], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+96], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+100], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+104], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 896				; 00000380H
	mov	DWORD PTR $T253911[ebp], edx
	lea	eax, DWORD PTR $T253861[ebp]
	mov	DWORD PTR $T253837[ebp], eax
	lea	ecx, DWORD PTR $T253848[ebp]
	mov	DWORD PTR $T253844[ebp], ecx
	mov	edx, DWORD PTR $T253911[ebp]
	mov	DWORD PTR tv2188[ebp], edx
	mov	eax, DWORD PTR $T253911[ebp]
	mov	DWORD PTR tv2163[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR $T253911[ebp]
	call	?_Buy@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::_Buy
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+912], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_??0Results@Database@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 980				; 000003d4H
	mov	DWORD PTR $T254100[ebp], edx
	lea	eax, DWORD PTR $T254094[ebp]
	push	eax
	lea	ecx, DWORD PTR $T254095[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T254100[ebp]
	call	??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	mov	DWORD PTR $T254193[ebp], edx
	lea	eax, DWORD PTR $T254188[ebp]
	push	eax
	lea	ecx, DWORD PTR $T254189[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T254193[ebp]
	call	??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1036				; 0000040cH
	mov	DWORD PTR $T254273[ebp], edx
	lea	eax, DWORD PTR $T254224[ebp]
	mov	DWORD PTR $T254200[ebp], eax
	lea	ecx, DWORD PTR $T254211[ebp]
	mov	DWORD PTR $T254207[ebp], ecx
	mov	edx, DWORD PTR $T254273[ebp]
	mov	DWORD PTR tv2501[ebp], edx
	mov	eax, DWORD PTR $T254273[ebp]
	mov	DWORD PTR tv2346[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	push	0
	mov	ecx, DWORD PTR $T254273[ebp]
	call	?_Buy@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1052				; 0000041cH
	mov	DWORD PTR $T254353[ebp], ecx
	lea	edx, DWORD PTR $T254304[ebp]
	mov	DWORD PTR $T254280[ebp], edx
	lea	eax, DWORD PTR $T254291[ebp]
	mov	DWORD PTR $T254287[ebp], eax
	mov	ecx, DWORD PTR $T254353[ebp]
	mov	DWORD PTR tv2585[ebp], ecx
	mov	edx, DWORD PTR $T254353[ebp]
	mov	DWORD PTR tv2529[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	push	0
	mov	ecx, DWORD PTR $T254353[ebp]
	call	?_Buy@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1068				; 0000042cH
	mov	DWORD PTR $T254433[ebp], eax
	lea	ecx, DWORD PTR $T254384[ebp]
	mov	DWORD PTR $T254360[ebp], ecx
	lea	edx, DWORD PTR $T254371[ebp]
	mov	DWORD PTR $T254367[ebp], edx
	mov	eax, DWORD PTR $T254433[ebp]
	mov	DWORD PTR tv2669[ebp], eax
	mov	ecx, DWORD PTR $T254433[ebp]
	mov	DWORD PTR tv2613[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	push	0
	mov	ecx, DWORD PTR $T254433[ebp]
	call	?_Buy@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1084				; 0000043cH
	mov	DWORD PTR $T254513[ebp], edx
	lea	eax, DWORD PTR $T254464[ebp]
	mov	DWORD PTR $T254440[ebp], eax
	lea	ecx, DWORD PTR $T254451[ebp]
	mov	DWORD PTR $T254447[ebp], ecx
	mov	edx, DWORD PTR $T254513[ebp]
	mov	DWORD PTR tv2785[ebp], edx
	mov	eax, DWORD PTR $T254513[ebp]
	mov	DWORD PTR tv2697[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	push	0
	mov	ecx, DWORD PTR $T254513[ebp]
	call	?_Buy@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1100				; 0000044cH
	mov	DWORD PTR $T254593[ebp], ecx
	lea	edx, DWORD PTR $T254544[ebp]
	mov	DWORD PTR $T254520[ebp], edx
	lea	eax, DWORD PTR $T254531[ebp]
	mov	DWORD PTR $T254527[ebp], eax
	mov	ecx, DWORD PTR $T254593[ebp]
	mov	DWORD PTR tv2869[ebp], ecx
	mov	edx, DWORD PTR $T254593[ebp]
	mov	DWORD PTR tv2813[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	push	0
	mov	ecx, DWORD PTR $T254593[ebp]
	call	?_Buy@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1116				; 0000045cH
	mov	DWORD PTR $T254673[ebp], eax
	lea	ecx, DWORD PTR $T254624[ebp]
	mov	DWORD PTR $T254600[ebp], ecx
	lea	edx, DWORD PTR $T254611[ebp]
	mov	DWORD PTR $T254607[ebp], edx
	mov	eax, DWORD PTR $T254673[ebp]
	mov	DWORD PTR tv2953[ebp], eax
	mov	ecx, DWORD PTR $T254673[ebp]
	mov	DWORD PTR tv2897[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	push	0
	mov	ecx, DWORD PTR $T254673[ebp]
	call	?_Buy@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1132				; 0000046cH
	mov	DWORD PTR $T254753[ebp], edx
	lea	eax, DWORD PTR $T254704[ebp]
	mov	DWORD PTR $T254680[ebp], eax
	lea	ecx, DWORD PTR $T254691[ebp]
	mov	DWORD PTR $T254687[ebp], ecx
	mov	edx, DWORD PTR $T254753[ebp]
	mov	DWORD PTR tv3037[ebp], edx
	mov	eax, DWORD PTR $T254753[ebp]
	mov	DWORD PTR tv2981[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	push	0
	mov	ecx, DWORD PTR $T254753[ebp]
	call	?_Buy@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1148				; 0000047cH
	mov	DWORD PTR $T254833[ebp], ecx
	lea	edx, DWORD PTR $T254784[ebp]
	mov	DWORD PTR $T254760[ebp], edx
	lea	eax, DWORD PTR $T254771[ebp]
	mov	DWORD PTR $T254767[ebp], eax
	mov	ecx, DWORD PTR $T254833[ebp]
	mov	DWORD PTR tv3153[ebp], ecx
	mov	edx, DWORD PTR $T254833[ebp]
	mov	DWORD PTR tv3065[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	push	0
	mov	ecx, DWORD PTR $T254833[ebp]
	call	?_Buy@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1164				; 0000048cH
	mov	DWORD PTR $T254913[ebp], eax
	lea	ecx, DWORD PTR $T254864[ebp]
	mov	DWORD PTR $T254840[ebp], ecx
	lea	edx, DWORD PTR $T254851[ebp]
	mov	DWORD PTR $T254847[ebp], edx
	mov	eax, DWORD PTR $T254913[ebp]
	mov	DWORD PTR tv3237[ebp], eax
	mov	ecx, DWORD PTR $T254913[ebp]
	mov	DWORD PTR tv3181[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	push	0
	mov	ecx, DWORD PTR $T254913[ebp]
	call	?_Buy@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1180				; 0000049cH
	mov	DWORD PTR $T254993[ebp], edx
	lea	eax, DWORD PTR $T254944[ebp]
	mov	DWORD PTR $T254920[ebp], eax
	lea	ecx, DWORD PTR $T254931[ebp]
	mov	DWORD PTR $T254927[ebp], ecx
	mov	edx, DWORD PTR $T254993[ebp]
	mov	DWORD PTR tv3321[ebp], edx
	mov	eax, DWORD PTR $T254993[ebp]
	mov	DWORD PTR tv3265[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	push	0
	mov	ecx, DWORD PTR $T254993[ebp]
	call	?_Buy@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1196				; 000004acH
	mov	DWORD PTR $T255073[ebp], ecx
	lea	edx, DWORD PTR $T255024[ebp]
	mov	DWORD PTR $T255000[ebp], edx
	lea	eax, DWORD PTR $T255011[ebp]
	mov	DWORD PTR $T255007[ebp], eax
	mov	ecx, DWORD PTR $T255073[ebp]
	mov	DWORD PTR tv3437[ebp], ecx
	mov	edx, DWORD PTR $T255073[ebp]
	mov	DWORD PTR tv3349[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	push	0
	mov	ecx, DWORD PTR $T255073[ebp]
	call	?_Buy@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1212				; 000004bcH
	mov	DWORD PTR $T255153[ebp], eax
	lea	ecx, DWORD PTR $T255104[ebp]
	mov	DWORD PTR $T255080[ebp], ecx
	lea	edx, DWORD PTR $T255091[ebp]
	mov	DWORD PTR $T255087[ebp], edx
	mov	eax, DWORD PTR $T255153[ebp]
	mov	DWORD PTR tv3521[ebp], eax
	mov	ecx, DWORD PTR $T255153[ebp]
	mov	DWORD PTR tv3465[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	push	0
	mov	ecx, DWORD PTR $T255153[ebp]
	call	?_Buy@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1228				; 000004ccH
	mov	DWORD PTR $T255233[ebp], edx
	lea	eax, DWORD PTR $T255184[ebp]
	mov	DWORD PTR $T255160[ebp], eax
	lea	ecx, DWORD PTR $T255171[ebp]
	mov	DWORD PTR $T255167[ebp], ecx
	mov	edx, DWORD PTR $T255233[ebp]
	mov	DWORD PTR tv3605[ebp], edx
	mov	eax, DWORD PTR $T255233[ebp]
	mov	DWORD PTR tv3549[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 29		; 0000001dH
	push	0
	mov	ecx, DWORD PTR $T255233[ebp]
	call	?_Buy@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1252				; 000004e4H
	mov	DWORD PTR $T255313[ebp], ecx
	lea	edx, DWORD PTR $T255264[ebp]
	mov	DWORD PTR $T255240[ebp], edx
	lea	eax, DWORD PTR $T255251[ebp]
	mov	DWORD PTR $T255247[ebp], eax
	mov	ecx, DWORD PTR $T255313[ebp]
	mov	DWORD PTR tv3689[ebp], ecx
	mov	edx, DWORD PTR $T255313[ebp]
	mov	DWORD PTR tv3633[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 31		; 0000001fH
	push	0
	mov	ecx, DWORD PTR $T255313[ebp]
	call	?_Buy@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 32		; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1268				; 000004f4H
	mov	DWORD PTR $T255393[ebp], eax
	lea	ecx, DWORD PTR $T255344[ebp]
	mov	DWORD PTR $T255320[ebp], ecx
	lea	edx, DWORD PTR $T255331[ebp]
	mov	DWORD PTR $T255327[ebp], edx
	mov	eax, DWORD PTR $T255393[ebp]
	mov	DWORD PTR tv3805[ebp], eax
	mov	ecx, DWORD PTR $T255393[ebp]
	mov	DWORD PTR tv3717[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	push	0
	mov	ecx, DWORD PTR $T255393[ebp]
	call	?_Buy@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 34		; 00000022H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1284				; 00000504H
	mov	DWORD PTR $T255480[ebp], edx
	lea	eax, DWORD PTR $T255424[ebp]
	mov	DWORD PTR $T255400[ebp], eax
	lea	ecx, DWORD PTR $T255411[ebp]
	mov	DWORD PTR $T255407[ebp], ecx
	mov	edx, DWORD PTR $T255480[ebp]
	mov	DWORD PTR tv3889[ebp], edx
	mov	eax, DWORD PTR $T255480[ebp]
	mov	DWORD PTR tv3833[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 35		; 00000023H
	push	0
	mov	ecx, DWORD PTR $T255480[ebp]
	call	?_Buy@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 36		; 00000024H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1300				; 00000514H
	mov	DWORD PTR $T255567[ebp], ecx
	lea	edx, DWORD PTR $T255511[ebp]
	mov	DWORD PTR $T255487[ebp], edx
	lea	eax, DWORD PTR $T255498[ebp]
	mov	DWORD PTR $T255494[ebp], eax
	mov	ecx, DWORD PTR $T255567[ebp]
	mov	DWORD PTR tv3993[ebp], ecx
	mov	edx, DWORD PTR $T255567[ebp]
	mov	DWORD PTR tv3914[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 37		; 00000025H
	push	0
	mov	ecx, DWORD PTR $T255567[ebp]
	call	?_Buy@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 38		; 00000026H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1316				; 00000524H
	mov	DWORD PTR $T255654[ebp], eax
	lea	ecx, DWORD PTR $T255598[ebp]
	mov	DWORD PTR $T255574[ebp], ecx
	lea	edx, DWORD PTR $T255585[ebp]
	mov	DWORD PTR $T255581[ebp], edx
	mov	eax, DWORD PTR $T255654[ebp]
	mov	DWORD PTR tv4129[ebp], eax
	mov	ecx, DWORD PTR $T255654[ebp]
	mov	DWORD PTR tv4018[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 39		; 00000027H
	push	0
	mov	ecx, DWORD PTR $T255654[ebp]
	call	?_Buy@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 40		; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1332				; 00000534H
	mov	DWORD PTR $T255741[ebp], edx
	lea	eax, DWORD PTR $T255685[ebp]
	mov	DWORD PTR $T255661[ebp], eax
	lea	ecx, DWORD PTR $T255672[ebp]
	mov	DWORD PTR $T255668[ebp], ecx
	mov	edx, DWORD PTR $T255741[ebp]
	mov	DWORD PTR tv4233[ebp], edx
	mov	eax, DWORD PTR $T255741[ebp]
	mov	DWORD PTR tv4154[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 41		; 00000029H
	push	0
	mov	ecx, DWORD PTR $T255741[ebp]
	call	?_Buy@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 42		; 0000002aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1348				; 00000544H
	mov	DWORD PTR $T255828[ebp], ecx
	lea	edx, DWORD PTR $T255772[ebp]
	mov	DWORD PTR $T255748[ebp], edx
	lea	eax, DWORD PTR $T255759[ebp]
	mov	DWORD PTR $T255755[ebp], eax
	mov	ecx, DWORD PTR $T255828[ebp]
	mov	DWORD PTR tv4337[ebp], ecx
	mov	edx, DWORD PTR $T255828[ebp]
	mov	DWORD PTR tv4258[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 43		; 0000002bH
	push	0
	mov	ecx, DWORD PTR $T255828[ebp]
	call	?_Buy@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 44		; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1364				; 00000554H
	mov	DWORD PTR $T255906[ebp], eax
	lea	ecx, DWORD PTR $T255859[ebp]
	mov	DWORD PTR $T255835[ebp], ecx
	lea	edx, DWORD PTR $T255846[ebp]
	mov	DWORD PTR $T255842[ebp], edx
	mov	eax, DWORD PTR $T255906[ebp]
	mov	DWORD PTR tv4441[ebp], eax
	mov	ecx, DWORD PTR $T255906[ebp]
	mov	DWORD PTR tv4362[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 45		; 0000002dH
	push	0
	mov	ecx, DWORD PTR $T255906[ebp]
	call	?_Buy@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 46		; 0000002eH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1380				; 00000564H
	call	??0?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 47		; 0000002fH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1396				; 00000574H
	call	??0?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 48		; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1412				; 00000584H
	call	??0?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 49		; 00000031H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1428				; 00000594H
	call	??0?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1444				; 000005a4H
	call	??0?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 51		; 00000033H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1460				; 000005b4H
	call	??0?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 52		; 00000034H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1476				; 000005c4H
	call	??0?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::vector<CvActionInfo *,std::allocator<CvActionInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 53		; 00000035H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1492				; 000005d4H
	call	??0?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 54		; 00000036H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1508				; 000005e4H
	call	??0?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::vector<CvControlInfo *,std::allocator<CvControlInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 55		; 00000037H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1524				; 000005f4H
	call	??0?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 56		; 00000038H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1540				; 00000604H
	call	??0?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 57		; 00000039H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1556				; 00000614H
	call	??0?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::vector<CvEraInfo *,std::allocator<CvEraInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 58		; 0000003aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1572				; 00000624H
	call	??0?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 59		; 0000003bH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1588				; 00000634H
	call	??0?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 60		; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1604				; 00000644H
	call	??0?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 61		; 0000003dH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1620				; 00000654H
	call	??0?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 62		; 0000003eH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1636				; 00000664H
	call	??0?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 63		; 0000003fH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1652				; 00000674H
	call	??0?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1668], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1672], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1676], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1680], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1684], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1692], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1696], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1700], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1720], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1724], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1728], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1732], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1736], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1740], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1744], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1748], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1752], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1776], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1780], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1784], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1788], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1792], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1796], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1800], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1804], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1808], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1812], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1816], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1820], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1824], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1828], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1832], 75		; 0000004bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1836], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1840], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1844], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1848], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1852], 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1856], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1860], 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1864], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1868], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1872], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1876], -1000		; fffffc18H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1880], 1000		; 000003e8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1884], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1888], 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1892], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1896], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1900], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1904], 40		; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1908], 120		; 00000078H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1912], 70		; 00000046H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1916], 40		; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1920], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1924], -50		; ffffffceH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1928], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1932], 60		; 0000003cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1936], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1940], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1944], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1948], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1952], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1956], 15		; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1960], 75		; 0000004bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1964], 75		; 0000004bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1968], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1972], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1976], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1980], -40		; ffffffd8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1984], 300		; 0000012cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1988], 150		; 00000096H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1992], 300		; 0000012cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1996], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2000], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2004], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2008], 25		; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2012], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3eae147b
	movss	DWORD PTR [ecx+2016], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2020], 80		; 00000050H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2024], 75		; 0000004bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2028], 20000		; 00004e20H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2032], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2036], 40		; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2040], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2044], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2048], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2052], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2056], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2060], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2064], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2068], 150		; 00000096H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2072], 1000		; 000003e8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2076], 150		; 00000096H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2080], 25		; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2084], 150		; 00000096H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2088], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2092], 300		; 0000012cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2096], 400		; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2100], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2104], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2108], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2112], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2116], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2120], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2124], 50000		; 0000c350H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2128], 15		; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2132], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2136], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2140], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2144], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2148], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2152], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2156], 1000		; 000003e8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2164], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2168], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2172], 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2176], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2180], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2184], 33		; 00000021H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2188], 125		; 0000007dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2192], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2196], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2200], 150		; 00000096H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2204], 150		; 00000096H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2208], 25		; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2212], 10000		; 00002710H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2216], 200		; 000000c8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2220], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2224], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2228], -50		; ffffffceH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2232], -40		; ffffffd8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2236], 500		; 000001f4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2240], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2244], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2248], 300		; 0000012cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2252], 300		; 0000012cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2256], 1000		; 000003e8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2260], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2264], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2268], 250		; 000000faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2272], 200		; 000000c8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2276], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2280], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2284], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2288], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2292], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2296], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2300], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2304], 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2308], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2312], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2316], 18		; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2320], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2324], 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2328], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2332], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2336], 200		; 000000c8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2340], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2344], 2
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [edx+2348], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [eax+2352], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+2356], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+2360], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2364], 900		; 00000384H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2368], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2372], 700		; 000002bcH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2376], 12		; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2380], 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2384], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2388], 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2392], 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2396], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2400], 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2404], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2408], 300		; 0000012cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2412], 250		; 000000faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2416], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2420], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2424], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2428], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2432], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2436], 80		; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2440], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2444], 25		; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2448], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2452], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2456], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2460], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2464], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2468], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2472], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2476], 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2480], 9
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2484], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2488], 16		; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2492], 15		; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2496], 14		; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2500], 12		; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2504], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2508], 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2512], 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2516], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2520], 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2524], 14		; 0000000eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2528], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2532], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2536], 13		; 0000000dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2540], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2544], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2548], 13		; 0000000dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2552], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2556], 11		; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2560], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2564], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2568], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2572], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2576], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2580], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2584], 30		; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2588], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2592], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2596], 35		; 00000023H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2600], 35		; 00000023H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2604], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2608], 15		; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2612], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2616], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2620], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2624], 40		; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2628], 40		; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2632], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2636], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2640], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2644], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2648], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2652], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2656], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2660], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2664], 40		; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2668], 40		; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2672], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2676], 200		; 000000c8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2680], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2684], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2688], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2692], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2696], 24		; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2700], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2704], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2708], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2712], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2716], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2720], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2724], 150		; 00000096H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2728], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2732], -100		; ffffff9cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2736], -150		; ffffff6aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2740], -200		; ffffff38H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2744], -2000		; fffff830H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2748], -1500		; fffffa24H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2752], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2756], -5000		; ffffec78H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2760], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2764], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2768], -60		; ffffffc4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2772], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2776], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2780], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2784], 25		; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2788], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2792], 75		; 0000004bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2796], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2800], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2804], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2808], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2812], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2816], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2820], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2824], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2828], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2832], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2836], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2840], 60		; 0000003cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2844], 120		; 00000078H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2848], -30		; ffffffe2H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2852], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2856], 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2860], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2864], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2868], 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2872], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2876], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2880], 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2884], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2888], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2892], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2896], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2900], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2904], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2908], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2912], 15		; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2916], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2920], -3		; fffffffdH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2924], 67		; 00000043H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2928], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2932], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2936], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2940], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2944], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2948], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2952], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2956], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2960], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2964], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2968], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2972], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2976], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2980], 13		; 0000000dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2984], 12		; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2988], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2992], 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2996], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3000], 13		; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3004], 12		; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3008], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3012], 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3016], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3020], 37		; 00000025H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3024], 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3028], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3032], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3036], -10		; fffffff6H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3040], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3044], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3048], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3052], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3056], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3060], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3064], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3068], 40		; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3072], 40		; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3076], 40		; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3080], 80		; 00000050H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3084], 35		; 00000023H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3088], 40		; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3092], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3096], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3100], 40		; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3104], 40		; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3108], 40		; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3112], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3116], 40		; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3120], 40		; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3124], 40		; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3128], 40		; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3132], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3136], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3140], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3144], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3148], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3152], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3156], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3160], -6		; fffffffaH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3164], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3168], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3172], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3176], 150		; 00000096H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3180], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3184], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3188], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3192], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3196], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3200], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3204], 25		; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3208], 200		; 000000c8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3212], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3216], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3220], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3224], 25		; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3228], 200		; 000000c8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3232], 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3236], 25		; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3240], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3244], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3248], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3252], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3256], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3260], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3264], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3268], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3272], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3276], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3280], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3284], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3288], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3292], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3296], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3300], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3304], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3308], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3312], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3316], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3320], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3324], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3328], 200		; 000000c8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3332], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3336], 120		; 00000078H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3340], 150		; 00000096H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3344], 300		; 0000012cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3348], 200		; 000000c8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3352], 300		; 0000012cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3356], 300		; 0000012cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3360], 300		; 0000012cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3364], 200		; 000000c8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3368], 200		; 000000c8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3372], 40		; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3376], 300		; 0000012cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3380], 200		; 000000c8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3384], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3388], 30		; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3392], 200		; 000000c8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3396], 350		; 0000015eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3400], 300		; 0000012cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3404], 200		; 000000c8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3408], 350		; 0000015eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3412], 300		; 0000012cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3416], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3420], 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3424], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3428], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3432], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3436], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3440], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3444], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3448], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3452], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3456], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3460], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3464], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3468], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3472], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3476], -50		; ffffffceH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3480], 80		; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3484], 101		; 00000065H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3488], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3492], -20		; ffffffecH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3496], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3500], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3504], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3508], 150		; 00000096H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3512], 125		; 0000007dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3516], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3520], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3524], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3528], -6		; fffffffaH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3532], 30		; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3536], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3540], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3544], -6		; fffffffaH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3548], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3552], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3556], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3560], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3564], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3568], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3572], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3576], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3580], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3584], 70		; 00000046H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3588], 40		; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3592], 15		; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3596], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3600], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3604], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3608], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3612], -20		; ffffffecH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3616], -20		; ffffffecH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3620], -200		; ffffff38H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3624], -30		; ffffffe2H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3628], -50		; ffffffceH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3632], -60		; ffffffc4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3636], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3640], 30		; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3644], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3648], -10		; fffffff6H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3652], -6		; fffffffaH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3656], -10		; fffffff6H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3660], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3664], 40		; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3668], 15		; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3672], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3676], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3680], 15		; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3684], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3688], 15		; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3692], 40		; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3696], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3700], 15		; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3704], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3708], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3712], -10		; fffffff6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3716], 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3720], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3724], 30		; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3728], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3732], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3736], 125		; 0000007dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3740], 40		; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3744], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3748], 75		; 0000004bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3752], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3756], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3760], 15		; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3764], 15		; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3768], 75		; 0000004bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3772], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3776], 15		; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3780], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3784], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3788], 25		; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3792], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3796], -35		; ffffffddH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3800], -15		; fffffff1H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3804], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3808], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3812], -10		; fffffff6H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3816], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3820], 35		; 00000023H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3824], 40		; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3828], 60		; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3832], 15		; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3836], 35		; 00000023H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3840], 35		; 00000023H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3844], 15		; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3848], -15		; fffffff1H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3852], 35		; 00000023H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3900], -15		; fffffff1H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3904], 45		; 0000002dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3908], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3912], 45		; 0000002dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3916], -20		; ffffffecH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3920], 45		; 0000002dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3924], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3928], 45		; 0000002dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3932], -20		; ffffffecH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3936], 45		; 0000002dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3940], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3944], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3948], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3952], -10		; fffffff6H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3956], -30		; ffffffe2H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3960], -50		; ffffffceH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3964], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3968], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3972], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3976], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3980], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3984], 15		; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3988], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3992], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3996], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4000], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4004], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4008], 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4012], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4016], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4020], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4024], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4028], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4032], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4036], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4040], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4044], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4048], -5		; fffffffbH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4052], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4056], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4060], -5		; fffffffbH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4064], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4068], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4072], 15		; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4076], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4080], -10		; fffffff6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4084], -10		; fffffff6H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4088], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4092], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4096], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4100], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4104], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4108], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4112], -15		; fffffff1H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4116], -15		; fffffff1H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4120], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4124], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4128], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4132], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4136], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4140], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4144], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4148], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4152], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4156], -6		; fffffffaH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4160], -6		; fffffffaH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4164], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4168], -10		; fffffff6H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4172], -10		; fffffff6H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4176], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4180], -4		; fffffffcH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4184], -4		; fffffffcH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4188], -4		; fffffffcH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4192], -4		; fffffffcH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4196], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4200], -6		; fffffffaH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4204], -6		; fffffffaH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4208], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4212], -4		; fffffffcH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4216], -4		; fffffffcH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4220], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4224], -6		; fffffffaH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4228], -6		; fffffffaH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4232], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4236], -4		; fffffffcH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4240], -4		; fffffffcH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4244], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4248], -10		; fffffff6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4252], -10		; fffffff6H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4256], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4260], -3		; fffffffdH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4264], -3		; fffffffdH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4268], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4272], -4		; fffffffcH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4276], -4		; fffffffcH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4284], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4288], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4292], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4296], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4300], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4304], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4308], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4312], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4316], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4320], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4324], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4328], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4332], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4336], -9		; fffffff7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4340], -3		; fffffffdH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4344], -12		; fffffff4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4348], -2		; fffffffeH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4352], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4356], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4360], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4364], -12		; fffffff4H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4368], -2		; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4372], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4376], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4380], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4384], -2		; fffffffeH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4388], -2		; fffffffeH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4392], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4396], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4400], -4		; fffffffcH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4404], -4		; fffffffcH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4408], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4412], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4416], 45		; 0000002dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4420], 60		; 0000003cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4424], 80		; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4428], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4432], 150		; 00000096H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4436], 180		; 000000b4H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4440], 125		; 0000007dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4444], 115		; 00000073H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4448], 105		; 00000069H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4452], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4456], 80		; 00000050H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4460], 60		; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4464], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4468], 65		; 00000041H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4472], 160		; 000000a0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4476], 115		; 00000073H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4480], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4484], 60		; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4488], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4492], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4496], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4500], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4504], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4508], -15		; fffffff1H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4512], -5		; fffffffbH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4516], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4520], -20		; ffffffecH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4524], -15		; fffffff1H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4528], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4532], -20		; ffffffecH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4536], -15		; fffffff1H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4540], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4544], -10		; fffffff6H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4548], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4552], -15		; fffffff1H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4556], -6		; fffffffaH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4560], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4564], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4568], -100		; ffffff9cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4572], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4576], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4580], -2		; fffffffeH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4584], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4588], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4592], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4596], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4600], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4604], -2		; fffffffeH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4608], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4612], -4		; fffffffcH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4616], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4620], -10		; fffffff6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4624], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4628], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4632], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4636], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4640], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4644], -2		; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4648], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4652], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4656], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4660], -20		; ffffffecH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4664], -2		; fffffffeH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4668], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4672], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4676], 40		; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4680], 110		; 0000006eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4684], 130		; 00000082H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4688], 200		; 000000c8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4692], 150		; 00000096H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4696], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4700], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4704], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4708], -100		; ffffff9cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4712], -50		; ffffffceH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4716], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4720], 25		; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4724], 60		; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4728], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4732], 40		; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4736], 25		; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4740], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4744], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4748], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4752], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4756], 150		; 00000096H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4760], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4764], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4768], 25		; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4772], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4776], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4780], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4784], 25		; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4788], 35		; 00000023H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4792], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4796], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4800], 75		; 0000004bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4804], 75		; 0000004bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4808], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4812], 400		; 00000190H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4816], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4820], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4824], -100		; ffffff9cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4828], -150		; ffffff6aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4832], 150		; 00000096H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4836], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4840], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4844], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4848], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4852], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4856], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4860], -25		; ffffffe7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4864], -100		; ffffff9cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4868], -200		; ffffff38H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4872], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4876], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4880], 60		; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4884], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4888], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4892], -20		; ffffffecH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4896], -50		; ffffffceH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4900], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4904], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4908], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4912], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4916], 80		; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4920], 180		; 000000b4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4924], 150		; 00000096H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4928], 120		; 00000078H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4932], 95		; 0000005fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4936], 70		; 00000046H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4940], 55		; 00000037H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4944], 40		; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4948], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4952], -50		; ffffffceH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4956], -20		; ffffffecH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4960], -10		; fffffff6H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4964], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4968], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4972], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4976], -50		; ffffffceH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4980], -20		; ffffffecH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4984], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4988], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4992], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4996], 150		; 00000096H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5000], 115		; 00000073H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5004], 80		; 00000050H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5008], 65		; 00000041H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5012], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5016], 35		; 00000023H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5020], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5024], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5028], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5032], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5036], 250		; 000000faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5040], 130		; 00000082H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5044], 70		; 00000046H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5048], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5052], 300		; 0000012cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5056], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5060], -30		; ffffffe2H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5064], -100		; ffffff9cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5068], -300		; fffffed4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5072], -50		; ffffffceH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5076], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5080], -20		; ffffffecH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5084], -60		; ffffffc4H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5088], -100		; ffffff9cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5092], -150		; ffffff6aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5096], -100		; ffffff9cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5100], -50		; ffffffceH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5104], -25		; ffffffe7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5108], -10		; fffffff6H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5112], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5116], 200		; 000000c8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5120], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5124], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5128], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5132], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5136], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5140], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5144], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5148], -50		; ffffffceH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5152], -100		; ffffff9cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5156], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5160], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5164], -100		; ffffff9cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5168], -25		; ffffffe7H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5172], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5176], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5180], 60		; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5184], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5188], 25		; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5192], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5196], -25		; ffffffe7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5200], -60		; ffffffc4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5204], -100		; ffffff9cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5208], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5212], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5216], 12		; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5220], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5224], -12		; fffffff4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5228], -30		; ffffffe2H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5232], -50		; ffffffceH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5236], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5240], -10		; fffffff6H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5244], -20		; ffffffecH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5248], -30		; ffffffe2H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5252], -40		; ffffffd8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5256], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5260], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5264], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5268], 15		; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5272], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5276], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5280], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5284], 75		; 0000004bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5288], 57		; 00000039H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5292], 42		; 0000002aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5296], 25		; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5300], 67		; 00000043H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5304], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5308], 25		; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5312], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5316], 150		; 00000096H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5320], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5324], 120		; 00000078H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5328], 80		; 00000050H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5332], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5336], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5340], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5344], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5348], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5352], 9
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5356], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5360], 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5364], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5368], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5372], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5376], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5380], 33		; 00000021H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5384], 250		; 000000faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5388], 165		; 000000a5H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5392], 115		; 00000073H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5396], 85		; 00000055H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5400], 60		; 0000003cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5404], 40		; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5408], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5412], 250		; 000000faH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5416], 153		; 00000099H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5420], 120		; 00000078H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5424], 83		; 00000053H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5428], 65		; 00000041H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5432], 40		; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5436], 200		; 000000c8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5440], 125		; 0000007dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5444], 80		; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5448], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5452], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5456], 250		; 000000faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5460], 165		; 000000a5H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5464], 115		; 00000073H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5468], 85		; 00000055H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5472], 60		; 0000003cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5476], 40		; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5480], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5484], 30		; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5488], -10		; fffffff6H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5492], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5496], 30		; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5500], 80		; 00000050H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5504], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5508], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5512], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5516], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5520], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5524], 35		; 00000023H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5528], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5532], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5536], 115		; 00000073H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5540], 150		; 00000096H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5544], 200		; 000000c8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5548], 150		; 00000096H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5552], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5556], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5560], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5564], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5568], 40		; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5572], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5576], 80		; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5580], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5584], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5588], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5592], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5596], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5600], 60		; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5604], 40		; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5608], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5612], 300		; 0000012cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5616], 220		; 000000dcH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5620], 170		; 000000aaH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5624], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5628], 300		; 0000012cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5632], 200		; 000000c8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5636], 135		; 00000087H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5640], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5644], 65		; 00000041H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5648], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5652], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5656], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5660], -100		; ffffff9cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5664], -40		; ffffffd8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5668], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5672], 80		; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5676], 150		; 00000096H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5680], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5684], 40		; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5688], -40		; ffffffd8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5692], -100		; ffffff9cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5696], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5700], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5704], 40		; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5708], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5712], -30		; ffffffe2H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5716], 200		; 000000c8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5720], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5724], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5728], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5732], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5736], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5740], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5744], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5748], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5752], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5756], 40		; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5760], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5764], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5768], 400		; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5772], 230		; 000000e6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5776], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5780], 80		; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5784], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5788], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5792], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5796], 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5800], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5804], 700		; 000002bcH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5808], 400		; 00000190H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5812], 200		; 000000c8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5816], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5820], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5824], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5828], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5832], 32		; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5836], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5840], 60		; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5844], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5848], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5852], 12		; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5856], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5860], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5864], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5868], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5872], 18		; 00000012H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5876], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5880], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5884], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5888], 14		; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5892], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5896], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5900], 200		; 000000c8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5904], 180		; 000000b4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5908], 160		; 000000a0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5912], 130		; 00000082H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5916], 110		; 0000006eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5920], 90		; 0000005aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5924], 80		; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5928], 55		; 00000037H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5932], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5936], 70		; 00000046H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5940], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5944], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5948], 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5952], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5956], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5960], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5964], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5968], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5972], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5976], 1000		; 000003e8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5980], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5984], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5988], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5992], 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5996], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6000], 30		; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6004], -30		; ffffffe2H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6008], -20		; ffffffecH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6012], -10		; fffffff6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6016], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6020], 25		; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6024], 40		; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6028], 60		; 0000003cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6032], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6036], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6040], 150		; 00000096H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6044], 200		; 000000c8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6048], 300		; 0000012cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6052], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6056], 12		; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6060], 30		; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6064], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6068], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6072], 75		; 0000004bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6076], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6080], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6084], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6088], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6092], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6096], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6100], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6104], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6108], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6112], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6116], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6120], 30		; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6124], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6128], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6132], 15		; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6136], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6140], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6144], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6148], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6152], 25		; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6156], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6160], 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6164], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6168], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6172], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6176], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6180], -4000		; fffff060H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6184], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6188], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6192], 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6196], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6200], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6204], 200		; 000000c8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6208], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6212], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6216], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6220], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6224], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6228], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6232], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6236], 60		; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6240], 12		; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6244], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6248], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6252], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6256], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6260], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6264], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6268], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6272], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6276], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6280], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6284], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6288], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6292], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6296], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6300], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6304], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6308], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6312], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6316], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6320], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6324], 15		; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6328], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6332], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6336], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6340], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6344], 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3fa00000
	movss	DWORD PTR [ecx+6348], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6352], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6356], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6360], -75		; ffffffb5H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6364], -100		; ffffff9cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6368], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6372], -10		; fffffff6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6376], -20		; ffffffecH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6380], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6384], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6388], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6392], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6396], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6400], -2		; fffffffeH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6404], -40		; ffffffd8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6408], -50		; ffffffceH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6412], -2		; fffffffeH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6416], -40		; ffffffd8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6420], -2		; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6424], -40		; ffffffd8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6428], 25		; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6432], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6436], 15		; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6440], 25		; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6444], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6448], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6452], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6456], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6460], 15		; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6464], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6468], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6472], 60		; 0000003cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6476], 32		; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6480], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6484], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6488], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6492], 160		; 000000a0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6496], 12		; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6500], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6504], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6508], 9
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6512], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6516], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6520], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6524], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6528], 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6532], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6536], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6540], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6544], 125		; 0000007dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6548], -5		; fffffffbH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6552], 500		; 000001f4H
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR [edx+6556], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6560], 500		; 000001f4H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6564], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6568], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6572], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6576], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6580], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6584], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6588], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6592], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6596], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6600], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6604], -50		; ffffffceH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6608], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6612], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6616], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6620], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6624], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6628], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6632], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6636], 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6640], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6644], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6648], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6652], 60		; 0000003cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6656], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6660], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6664], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6668], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6672], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6676], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6680], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6684], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6688], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6692], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6696], 67		; 00000043H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6700], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6704], 67		; 00000043H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6708], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6712], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6716], 70		; 00000046H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6720], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6724], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6728], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6732], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6736], 300		; 0000012cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6740], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6744], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6748], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6752], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6756], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6760], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6764], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6768], -25		; ffffffe7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6772], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6776], 99		; 00000063H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6780], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6784], 98		; 00000062H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6788], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6792], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6796], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6800], -75		; ffffffb5H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6804], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6808], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6812], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6816], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6820], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6824], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6828], 5000		; 00001388H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6832], 2000		; 000007d0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6836], 1000		; 000003e8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6840], 2000		; 000007d0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6844], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6848], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6852], -60		; ffffffc4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6856], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6860], 512		; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6864], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6868], 90		; 0000005aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6872], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6876], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6880], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6884], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6888], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6892], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6896], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6900], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6904], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6908], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6912], 67		; 00000043H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6916], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6920], 150		; 00000096H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6924], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6928], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6932], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6936], 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6940], -60		; ffffffc4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6944], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6948], -25		; ffffffe7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6952], -25		; ffffffe7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6956], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6960], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6964], 25		; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6968], 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6972], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6976], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6980], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6984], -75		; ffffffb5H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6988], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+6992], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6996], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7000], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7004], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7008], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7012], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7016], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7020], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7024], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7028], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7032], 33		; 00000021H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7036], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7040], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7044], 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7048], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7052], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7056], 30		; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7060], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7064], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7068], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7072], 200		; 000000c8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7076], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7080], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7084], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7088], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7092], 75		; 0000004bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7096], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7100], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7104], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7108], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7112], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7116], -50		; ffffffceH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7120], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7124], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7132], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7136], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7140], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7144], 75		; 0000004bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7148], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7152], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7156], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7160], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7164], 12		; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7168], 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7172], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7176], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7180], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7184], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7188], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7192], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7196], 15		; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7200], 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7204], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7208], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7212], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7216], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7220], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7224], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7228], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7232], 12		; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7236], 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7240], 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7244], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7248], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7252], 40		; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7256], 85		; 00000055H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7260], -50		; ffffffceH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7264], 15		; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7268], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7272], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7276], -1000		; fffffc18H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7280], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7284], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7288], 150		; 00000096H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7292], 150		; 00000096H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7296], 200		; 000000c8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7300], 40		; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7304], 200		; 000000c8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7308], 150		; 00000096H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7312], 1000		; 000003e8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7316], 500		; 000001f4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7320], 250		; 000000faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7324], 200		; 000000c8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7328], 500		; 000001f4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7332], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7336], 30		; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7340], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7344], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7348], -20		; ffffffecH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7352], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7356], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7360], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7364], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7368], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7372], 200		; 000000c8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7376], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7380], -33		; ffffffdfH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7384], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7388], -20		; ffffffecH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7392], -50		; ffffffceH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7396], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7400], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7404], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7408], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7412], 15		; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7416], 400		; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7420], 125		; 0000007dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7424], 400		; 00000190H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7428], 250		; 000000faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7432], 300		; 0000012cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7436], 200		; 000000c8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7440], 200		; 000000c8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7444], 400		; 00000190H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7448], 300		; 0000012cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7452], 75		; 0000004bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7456], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7460], -50		; ffffffceH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7464], 400		; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7468], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7472], 300		; 0000012cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7476], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7480], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7484], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7488], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7492], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7496], 40		; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7500], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7504], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7508], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7512], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7516], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7520], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7524], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7528], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7532], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7536], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7540], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7544], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7548], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7552], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7556], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7560], 30		; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7564], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7568], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7572], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7576], 200		; 000000c8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7580], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7584], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7588], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7592], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7596], 25		; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7600], 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7604], 11		; 0000000bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7608], 25		; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7612], 20		; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7616], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7620], 45		; 0000002dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7624], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7628], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7632], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7636], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7640], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7644], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7648], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7652], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7656], -85		; ffffffabH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7660], 150		; 00000096H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7664], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7668], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7672], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7676], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7680], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7684], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7688], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7692], -5		; fffffffbH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7696], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7700], -105		; ffffff97H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7704], -105		; ffffff97H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7708], -100		; ffffff9cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7712], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7716], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7720], 1000		; 000003e8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7724], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7728], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7732], 28		; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7736], 35		; 00000023H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7740], 67		; 00000043H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7744], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7748], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7752], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7756], 40		; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7760], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7764], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7768], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7772], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7776], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7780], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7784], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7788], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7792], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7796], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7800], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7804], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7808], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7812], 25		; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7816], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7820], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7824], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7828], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7832], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7836], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7840], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7844], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7848], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7852], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7856], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7860], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7864], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7868], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7872], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7876], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7880], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7884], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7888], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7892], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7896], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7900], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7904], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7908], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7912], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7916], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7920], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7924], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7928], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7932], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7936], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7940], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7944], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7948], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7952], 10		; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7956], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7960], 200		; 000000c8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7964], 20		; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7968], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7972], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7976], 80		; 00000050H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+7980], 40		; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3fb8b439
	movss	DWORD PTR [ecx+7984], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40e00000
	movss	DWORD PTR [edx+7988], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41802f1b
	movss	DWORD PTR [eax+7992], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c15bced9
	movss	DWORD PTR [ecx+7996], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3c75c28f
	movss	DWORD PTR [edx+8000], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [eax+8004], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3c75c28f
	movss	DWORD PTR [ecx+8008], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [edx+8012], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f733333
	movss	DWORD PTR [eax+8016], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43fa0000
	movss	DWORD PTR [ecx+8020], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@442f0000
	movss	DWORD PTR [edx+8024], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@44480000
	movss	DWORD PTR [eax+8028], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR [ecx+8032], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f8ccccd
	movss	DWORD PTR [edx+8036], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+8040], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [ecx+8044], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+8048], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [eax+8052], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [ecx+8056], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [edx+8060], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR [eax+8064], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+8068], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [edx+8072], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [eax+8076], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+8080], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR [edx+8084], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+8088], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40066666
	movss	DWORD PTR [ecx+8092], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f8ccccd
	movss	DWORD PTR [edx+8096], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR [eax+8100], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+8104], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f2b851f
	movss	DWORD PTR [edx+8108], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f8147ae
	movss	DWORD PTR [eax+8112], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40c9999a
	movss	DWORD PTR [ecx+8116], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f8ccccd
	movss	DWORD PTR [edx+8120], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f8ccccd
	movss	DWORD PTR [eax+8124], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR [ecx+8128], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3fe66666
	movss	DWORD PTR [edx+8132], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3fd9999a
	movss	DWORD PTR [eax+8136], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+8140], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+8144], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [eax+8148], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3fe66666
	movss	DWORD PTR [ecx+8152], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+8156], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+8160], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+8164], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+8168], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+8172], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+8176], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+8180], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8184], 25		; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8188], 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@411ae148
	movss	DWORD PTR [edx+8200], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c2e423d7
	movss	DWORD PTR [eax+8204], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8208], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8212], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8216], 25		; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8220], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8224], 25		; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8228], -50		; ffffffceH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8232], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8236], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8240], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8244], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8248], 15		; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8252], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8256], 50		; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8260], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8264], 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8268], 30		; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8272], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8276], 50		; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8280], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8284], 50		; 00000032H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8288], 250		; 000000faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8292], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8296], 25		; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8300], 100		; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8304], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8308], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8312], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8316], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8320], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8324], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8328], 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [edx+8332], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+8336], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8340], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8344], 25		; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8348], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8352], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8356], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8360], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8364], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8368], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8372], 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8376], 9
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8380], 11		; 0000000bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8384], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8388], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8392], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8396], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8400], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8404], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8408], 35		; 00000023H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8412], 39		; 00000027H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8416], 28		; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8420], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8424], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8428], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8432], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8436], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8440], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8444], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8448], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8452], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8456], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8460], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8464], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8468], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8472], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8476], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8480], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8484], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8488], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8492], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8496], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8500], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8504], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8508], 19		; 00000013H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8512], 19		; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8516], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8520], 18		; 00000012H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8524], 76		; 0000004cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8528], 77		; 0000004dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8532], 146		; 00000092H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8536], 115		; 00000073H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8540], 116		; 00000074H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8544], 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8548], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8552], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8556], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8560], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8564], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8568], 0

; 1937 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvGlobals@@QAE@XZ$43:
	mov	ecx, DWORD PTR $T253911[ebp]
	jmp	??1?$_Vector_val@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 896				; 00000380H
	jmp	??1?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::~vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	jmp	DWORD PTR __imp_??1Results@Database@@UAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 980				; 000003d4H
	jmp	??1?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	jmp	??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$58:
	mov	ecx, DWORD PTR $T254273[ebp]
	jmp	??1?$_Vector_val@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1036				; 0000040cH
	jmp	??1?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::~vector<CvColorInfo *,std::allocator<CvColorInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$62:
	mov	ecx, DWORD PTR $T254353[ebp]
	jmp	??1?$_Vector_val@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1052				; 0000041cH
	jmp	??1?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::~vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$66:
	mov	ecx, DWORD PTR $T254433[ebp]
	jmp	??1?$_Vector_val@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1068				; 0000042cH
	jmp	??1?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::~vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$70:
	mov	ecx, DWORD PTR $T254513[ebp]
	jmp	??1?$_Vector_val@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1084				; 0000043cH
	jmp	??1?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::~vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$74:
	mov	ecx, DWORD PTR $T254593[ebp]
	jmp	??1?$_Vector_val@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1100				; 0000044cH
	jmp	??1?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::~vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$78:
	mov	ecx, DWORD PTR $T254673[ebp]
	jmp	??1?$_Vector_val@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1116				; 0000045cH
	jmp	??1?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::~vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$82:
	mov	ecx, DWORD PTR $T254753[ebp]
	jmp	??1?$_Vector_val@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$10:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1132				; 0000046cH
	jmp	??1?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::~vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$86:
	mov	ecx, DWORD PTR $T254833[ebp]
	jmp	??1?$_Vector_val@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$11:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1148				; 0000047cH
	jmp	??1?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::~vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$90:
	mov	ecx, DWORD PTR $T254913[ebp]
	jmp	??1?$_Vector_val@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$12:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1164				; 0000048cH
	jmp	??1?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::~vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$94:
	mov	ecx, DWORD PTR $T254993[ebp]
	jmp	??1?$_Vector_val@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$13:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1180				; 0000049cH
	jmp	??1?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::~vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$98:
	mov	ecx, DWORD PTR $T255073[ebp]
	jmp	??1?$_Vector_val@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$14:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1196				; 000004acH
	jmp	??1?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::~vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$102:
	mov	ecx, DWORD PTR $T255153[ebp]
	jmp	??1?$_Vector_val@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$15:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1212				; 000004bcH
	jmp	??1?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::~vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$106:
	mov	ecx, DWORD PTR $T255233[ebp]
	jmp	??1?$_Vector_val@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$16:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1228				; 000004ccH
	jmp	??1?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::~vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$110:
	mov	ecx, DWORD PTR $T255313[ebp]
	jmp	??1?$_Vector_val@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$17:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1252				; 000004e4H
	jmp	??1?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::~vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$114:
	mov	ecx, DWORD PTR $T255393[ebp]
	jmp	??1?$_Vector_val@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$18:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1268				; 000004f4H
	jmp	??1?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::~vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$118:
	mov	ecx, DWORD PTR $T255480[ebp]
	jmp	??1?$_Vector_val@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$19:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1284				; 00000504H
	jmp	??1?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::~vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$124:
	mov	ecx, DWORD PTR $T255567[ebp]
	jmp	??1?$_Vector_val@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$20:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1300				; 00000514H
	jmp	??1?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::~vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$130:
	mov	ecx, DWORD PTR $T255654[ebp]
	jmp	??1?$_Vector_val@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$21:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1316				; 00000524H
	jmp	??1?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::~vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$136:
	mov	ecx, DWORD PTR $T255741[ebp]
	jmp	??1?$_Vector_val@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$22:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1332				; 00000534H
	jmp	??1?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::~vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$142:
	mov	ecx, DWORD PTR $T255828[ebp]
	jmp	??1?$_Vector_val@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$23:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1348				; 00000544H
	jmp	??1?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::~vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$148:
	mov	ecx, DWORD PTR $T255906[ebp]
	jmp	??1?$_Vector_val@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvGlobals@@QAE@XZ$24:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1364				; 00000554H
	jmp	??1?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::~vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$25:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1380				; 00000564H
	jmp	??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::~vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$26:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1396				; 00000574H
	jmp	??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::~vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$27:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1412				; 00000584H
	jmp	??1?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::~vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$28:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1428				; 00000594H
	jmp	??1?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::~vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$29:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1444				; 000005a4H
	jmp	??1?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::~vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$30:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1460				; 000005b4H
	jmp	??1?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::~vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$31:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1476				; 000005c4H
	jmp	??1?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::~vector<CvActionInfo *,std::allocator<CvActionInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$32:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1492				; 000005d4H
	jmp	??1?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::~vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$33:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1508				; 000005e4H
	jmp	??1?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::~vector<CvControlInfo *,std::allocator<CvControlInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$34:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1524				; 000005f4H
	jmp	??1?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::~vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$35:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1540				; 00000604H
	jmp	??1?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::~vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$36:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1556				; 00000614H
	jmp	??1?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::~vector<CvEraInfo *,std::allocator<CvEraInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$37:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1572				; 00000624H
	jmp	??1?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::~vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$38:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1588				; 00000634H
	jmp	??1?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::~vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$39:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1604				; 00000644H
	jmp	??1?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::~vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$40:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1620				; 00000654H
	jmp	??1?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::~vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >
__unwindfunclet$??0CvGlobals@@QAE@XZ$41:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1636				; 00000664H
	jmp	??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::~vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >
__ehhandler$??0CvGlobals@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2780]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvGlobals@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvGlobals@@QAE@XZ ENDP				; CvGlobals::CvGlobals
PUBLIC	??1CvGlobals@@UAE@XZ				; CvGlobals::~CvGlobals
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GCvGlobals@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvGlobals@@UAEPAXI@Z PROC				; CvGlobals::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvGlobals@@UAE@XZ			; CvGlobals::~CvGlobals
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvGlobals@@UAEPAXI@Z ENDP				; CvGlobals::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::~_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >
; Function compile flags: /Odtp
;	COMDAT ??1?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAE@XZ
_TEXT	SEGMENT
_this$ = -72						; size = 4
??1?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAE@XZ PROC ; stdext::hash_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::~hash_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::~_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAE@XZ ENDP ; stdext::hash_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::~hash_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >
_TEXT	ENDS
PUBLIC	??1?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ$1
__ehfuncinfo$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -100						; size = 4
__$EHRec$ = -12						; size = 12
??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ PROC ; std::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >::~map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ
__ehhandler$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ ENDP ; std::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >::~map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >
PUBLIC	??1?$_Vector_val@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::~_Vector_val<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::~_Vector_val<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::~_Vector_val<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::~_Vector_val<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvActionInfo *,std::allocator<CvActionInfo *> >::~_Vector_val<CvActionInfo *,std::allocator<CvActionInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvMissionInfo *,std::allocator<CvMissionInfo *> >::~_Vector_val<CvMissionInfo *,std::allocator<CvMissionInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvControlInfo *,std::allocator<CvControlInfo *> >::~_Vector_val<CvControlInfo *,std::allocator<CvControlInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvCommandInfo *,std::allocator<CvCommandInfo *> >::~_Vector_val<CvCommandInfo *,std::allocator<CvCommandInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::~_Vector_val<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvEraInfo *,std::allocator<CvEraInfo *> >::~_Vector_val<CvEraInfo *,std::allocator<CvEraInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvHurryInfo *,std::allocator<CvHurryInfo *> >::~_Vector_val<CvHurryInfo *,std::allocator<CvHurryInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::~_Vector_val<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::~_Vector_val<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::~_Vector_val<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvBaseInfo *,std::allocator<CvBaseInfo *> >::~_Vector_val<CvBaseInfo *,std::allocator<CvBaseInfo *> >
PUBLIC	??1?$_Vector_val@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::~_Vector_val<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >
PUBLIC	?_Tidy@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@IAEXXZ ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@IAEXXZ ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@IAEXXZ ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@IAEXXZ ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@IAEXXZ ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@IAEXXZ ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@IAEXXZ ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@IAEXXZ ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@IAEXXZ ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@IAEXXZ ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@IAEXXZ ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@IAEXXZ ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@IAEXXZ ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@IAEXXZ ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@IAEXXZ ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@IAEXXZ ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@IAEXXZ ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@IAEXXZ ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@IAEXXZ ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@IAEXXZ ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@IAEXXZ ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@IAEXXZ ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@IAEXXZ ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@IAEXXZ ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@IAEXXZ ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@IAEXXZ ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@IAEXXZ ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@IAEXXZ ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@IAEXXZ ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@IAEXXZ ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@IAEXXZ ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@IAEXXZ ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@IAEXXZ ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@IAEXXZ ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@IAEXXZ ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@IAEXXZ ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@IAEXXZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::_Tidy
PUBLIC	?_Tidy@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@IAEXXZ ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::_Tidy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__ehfuncinfo$??1CvGlobals@@UAE@XZ DD 019930522H
	DD	053H
	DD	FLAT:__unwindtable$??1CvGlobals@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvGlobals@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$14
	DD	0eH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$15
	DD	0fH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$16
	DD	010H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$17
	DD	011H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$18
	DD	012H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$19
	DD	013H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$20
	DD	014H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$21
	DD	015H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$22
	DD	016H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$23
	DD	017H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$24
	DD	018H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$25
	DD	019H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$26
	DD	01aH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$27
	DD	01bH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$28
	DD	01cH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$29
	DD	01dH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$30
	DD	01eH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$31
	DD	01fH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$32
	DD	020H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$33
	DD	021H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$34
	DD	022H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$35
	DD	023H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$36
	DD	024H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$37
	DD	025H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$38
	DD	026H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$39
	DD	027H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$40
	DD	028H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$41
	DD	029H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$43
	DD	028H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$45
	DD	027H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$47
	DD	026H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$49
	DD	025H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$51
	DD	024H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$53
	DD	023H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$55
	DD	022H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$57
	DD	021H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$59
	DD	020H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$61
	DD	01fH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$63
	DD	01eH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$65
	DD	01dH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$67
	DD	01cH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$69
	DD	01bH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$71
	DD	01aH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$73
	DD	019H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$75
	DD	018H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$77
	DD	017H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$79
	DD	016H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$81
	DD	015H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$83
	DD	014H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$85
	DD	013H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$87
	DD	012H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$89
	DD	011H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$91
	DD	010H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$93
	DD	0fH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$95
	DD	0eH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$97
	DD	0dH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$99
	DD	0cH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$101
	DD	0bH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$103
	DD	0aH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$105
	DD	09H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$107
	DD	08H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$109
	DD	07H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$111
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$113
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$115
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$117
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$119
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$122
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvGlobals@@UAE@XZ$136
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
xdata$x	ENDS
;	COMDAT ??1CvGlobals@@UAE@XZ
_TEXT	SEGMENT
_this$ = -424						; size = 4
$T257774 = -420						; size = 4
$T257718 = -388						; size = 4
$T257592 = -368						; size = 4
$T257522 = -364						; size = 4
$T257466 = -332						; size = 4
$T257410 = -300						; size = 4
$T257354 = -268						; size = 4
$T257298 = -236						; size = 4
$T257242 = -204						; size = 4
$T257186 = -172						; size = 4
$T257130 = -140						; size = 4
$T257112 = -136						; size = 4
$T257094 = -132						; size = 4
$T257076 = -128						; size = 4
$T257058 = -124						; size = 4
$T257040 = -120						; size = 4
$T257022 = -116						; size = 4
$T257004 = -112						; size = 4
$T256986 = -108						; size = 4
$T256968 = -104						; size = 4
$T256950 = -100						; size = 4
$T256932 = -96						; size = 4
$T256914 = -92						; size = 4
$T256896 = -88						; size = 4
$T256878 = -84						; size = 4
$T256860 = -80						; size = 4
$T256842 = -76						; size = 4
$T256824 = -72						; size = 4
$T256806 = -68						; size = 4
$T256788 = -64						; size = 4
$T256770 = -60						; size = 4
$T256752 = -56						; size = 4
$T256734 = -52						; size = 4
$T256716 = -48						; size = 4
$T256698 = -44						; size = 4
$T256680 = -40						; size = 4
$T256662 = -36						; size = 4
$T256644 = -32						; size = 4
$T256626 = -28						; size = 4
$T256608 = -24						; size = 4
$T256590 = -20						; size = 4
$T256572 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvGlobals@@UAE@XZ PROC				; CvGlobals::~CvGlobals, COMDAT
; _this$ = ecx

; 1940 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvGlobals@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 412				; 0000019cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvGlobals@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 41		; 00000029H

; 1941 : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1652				; 00000674H
	mov	DWORD PTR $T256572[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 42		; 0000002aH
	mov	ecx, DWORD PTR $T256572[ebp]
	call	?_Tidy@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@IAEXXZ ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 41		; 00000029H
	mov	BYTE PTR __$EHRec$[ebp+8], 40		; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1636				; 00000664H
	mov	DWORD PTR $T256590[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 43		; 0000002bH
	mov	ecx, DWORD PTR $T256590[ebp]
	call	?_Tidy@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@IAEXXZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 40		; 00000028H
	mov	BYTE PTR __$EHRec$[ebp+8], 39		; 00000027H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1620				; 00000654H
	mov	DWORD PTR $T256608[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 44		; 0000002cH
	mov	ecx, DWORD PTR $T256608[ebp]
	call	?_Tidy@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@IAEXXZ ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 39		; 00000027H
	mov	BYTE PTR __$EHRec$[ebp+8], 38		; 00000026H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1604				; 00000644H
	mov	DWORD PTR $T256626[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 45		; 0000002dH
	mov	ecx, DWORD PTR $T256626[ebp]
	call	?_Tidy@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@IAEXXZ ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 38		; 00000026H
	mov	BYTE PTR __$EHRec$[ebp+8], 37		; 00000025H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1588				; 00000634H
	mov	DWORD PTR $T256644[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 46		; 0000002eH
	mov	ecx, DWORD PTR $T256644[ebp]
	call	?_Tidy@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@IAEXXZ ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 37		; 00000025H
	mov	BYTE PTR __$EHRec$[ebp+8], 36		; 00000024H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1572				; 00000624H
	mov	DWORD PTR $T256662[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 47		; 0000002fH
	mov	ecx, DWORD PTR $T256662[ebp]
	call	?_Tidy@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@IAEXXZ ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 36		; 00000024H
	mov	BYTE PTR __$EHRec$[ebp+8], 35		; 00000023H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1556				; 00000614H
	mov	DWORD PTR $T256680[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 48		; 00000030H
	mov	ecx, DWORD PTR $T256680[ebp]
	call	?_Tidy@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@IAEXXZ ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 35		; 00000023H
	mov	BYTE PTR __$EHRec$[ebp+8], 34		; 00000022H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1540				; 00000604H
	mov	DWORD PTR $T256698[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 49		; 00000031H
	mov	ecx, DWORD PTR $T256698[ebp]
	call	?_Tidy@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@IAEXXZ ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 34		; 00000022H
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1524				; 000005f4H
	mov	DWORD PTR $T256716[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 50		; 00000032H
	mov	ecx, DWORD PTR $T256716[ebp]
	call	?_Tidy@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@IAEXXZ ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	mov	BYTE PTR __$EHRec$[ebp+8], 32		; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1508				; 000005e4H
	mov	DWORD PTR $T256734[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 51		; 00000033H
	mov	ecx, DWORD PTR $T256734[ebp]
	call	?_Tidy@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@IAEXXZ ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 32		; 00000020H
	mov	BYTE PTR __$EHRec$[ebp+8], 31		; 0000001fH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1492				; 000005d4H
	mov	DWORD PTR $T256752[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 52		; 00000034H
	mov	ecx, DWORD PTR $T256752[ebp]
	call	?_Tidy@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@IAEXXZ ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 31		; 0000001fH
	mov	BYTE PTR __$EHRec$[ebp+8], 30		; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1476				; 000005c4H
	mov	DWORD PTR $T256770[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 53		; 00000035H
	mov	ecx, DWORD PTR $T256770[ebp]
	call	?_Tidy@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@IAEXXZ ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 30		; 0000001eH
	mov	BYTE PTR __$EHRec$[ebp+8], 29		; 0000001dH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1460				; 000005b4H
	mov	DWORD PTR $T256788[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 54		; 00000036H
	mov	ecx, DWORD PTR $T256788[ebp]
	call	?_Tidy@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@IAEXXZ ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 29		; 0000001dH
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1444				; 000005a4H
	mov	DWORD PTR $T256806[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 55		; 00000037H
	mov	ecx, DWORD PTR $T256806[ebp]
	call	?_Tidy@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@IAEXXZ ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1428				; 00000594H
	mov	DWORD PTR $T256824[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 56		; 00000038H
	mov	ecx, DWORD PTR $T256824[ebp]
	call	?_Tidy@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@IAEXXZ ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1412				; 00000584H
	mov	DWORD PTR $T256842[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 57		; 00000039H
	mov	ecx, DWORD PTR $T256842[ebp]
	call	?_Tidy@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@IAEXXZ ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1396				; 00000574H
	mov	DWORD PTR $T256860[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 58		; 0000003aH
	mov	ecx, DWORD PTR $T256860[ebp]
	call	?_Tidy@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@IAEXXZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1380				; 00000564H
	mov	DWORD PTR $T256878[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 59		; 0000003bH
	mov	ecx, DWORD PTR $T256878[ebp]
	call	?_Tidy@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@IAEXXZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1364				; 00000554H
	mov	DWORD PTR $T256896[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 60		; 0000003cH
	mov	ecx, DWORD PTR $T256896[ebp]
	call	?_Tidy@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@IAEXXZ ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1348				; 00000544H
	mov	DWORD PTR $T256914[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 61		; 0000003dH
	mov	ecx, DWORD PTR $T256914[ebp]
	call	?_Tidy@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@IAEXXZ ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1332				; 00000534H
	mov	DWORD PTR $T256932[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 62		; 0000003eH
	mov	ecx, DWORD PTR $T256932[ebp]
	call	?_Tidy@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@IAEXXZ ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1316				; 00000524H
	mov	DWORD PTR $T256950[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 63		; 0000003fH
	mov	ecx, DWORD PTR $T256950[ebp]
	call	?_Tidy@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@IAEXXZ ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1300				; 00000514H
	mov	DWORD PTR $T256968[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 64		; 00000040H
	mov	ecx, DWORD PTR $T256968[ebp]
	call	?_Tidy@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@IAEXXZ ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1284				; 00000504H
	mov	DWORD PTR $T256986[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 65		; 00000041H
	mov	ecx, DWORD PTR $T256986[ebp]
	call	?_Tidy@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@IAEXXZ ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1268				; 000004f4H
	mov	DWORD PTR $T257004[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 66		; 00000042H
	mov	ecx, DWORD PTR $T257004[ebp]
	call	?_Tidy@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@IAEXXZ ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1252				; 000004e4H
	mov	DWORD PTR $T257022[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 67		; 00000043H
	mov	ecx, DWORD PTR $T257022[ebp]
	call	?_Tidy@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@IAEXXZ ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1228				; 000004ccH
	mov	DWORD PTR $T257040[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 68		; 00000044H
	mov	ecx, DWORD PTR $T257040[ebp]
	call	?_Tidy@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@IAEXXZ ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1212				; 000004bcH
	mov	DWORD PTR $T257058[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 69		; 00000045H
	mov	ecx, DWORD PTR $T257058[ebp]
	call	?_Tidy@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@IAEXXZ ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1196				; 000004acH
	mov	DWORD PTR $T257076[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 70		; 00000046H
	mov	ecx, DWORD PTR $T257076[ebp]
	call	?_Tidy@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@IAEXXZ ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1180				; 0000049cH
	mov	DWORD PTR $T257094[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 71		; 00000047H
	mov	ecx, DWORD PTR $T257094[ebp]
	call	?_Tidy@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@IAEXXZ ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1164				; 0000048cH
	mov	DWORD PTR $T257112[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 72		; 00000048H
	mov	ecx, DWORD PTR $T257112[ebp]
	call	?_Tidy@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@IAEXXZ ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1148				; 0000047cH
	mov	DWORD PTR $T257130[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 73		; 00000049H
	mov	ecx, DWORD PTR $T257130[ebp]
	call	?_Tidy@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@IAEXXZ ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1132				; 0000046cH
	mov	DWORD PTR $T257186[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 74		; 0000004aH
	mov	ecx, DWORD PTR $T257186[ebp]
	call	?_Tidy@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@IAEXXZ ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1116				; 0000045cH
	mov	DWORD PTR $T257242[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 75		; 0000004bH
	mov	ecx, DWORD PTR $T257242[ebp]
	call	?_Tidy@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@IAEXXZ ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1100				; 0000044cH
	mov	DWORD PTR $T257298[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 76		; 0000004cH
	mov	ecx, DWORD PTR $T257298[ebp]
	call	?_Tidy@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@IAEXXZ ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1084				; 0000043cH
	mov	DWORD PTR $T257354[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 77		; 0000004dH
	mov	ecx, DWORD PTR $T257354[ebp]
	call	?_Tidy@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@IAEXXZ ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1068				; 0000042cH
	mov	DWORD PTR $T257410[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 78		; 0000004eH
	mov	ecx, DWORD PTR $T257410[ebp]
	call	?_Tidy@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@IAEXXZ ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1052				; 0000041cH
	mov	DWORD PTR $T257466[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 79		; 0000004fH
	mov	ecx, DWORD PTR $T257466[ebp]
	call	?_Tidy@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@IAEXXZ ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1036				; 0000040cH
	mov	DWORD PTR $T257522[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 80		; 00000050H
	mov	ecx, DWORD PTR $T257522[ebp]
	call	?_Tidy@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@IAEXXZ ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	mov	DWORD PTR $T257592[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 81		; 00000051H
	mov	ecx, DWORD PTR $T257592[ebp]
	call	?_Tidy@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 980				; 000003d4H
	mov	DWORD PTR $T257718[ebp], edx
	mov	ecx, DWORD PTR $T257718[ebp]
	call	??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::~_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 896				; 00000380H
	mov	DWORD PTR $T257774[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 82		; 00000052H
	mov	ecx, DWORD PTR $T257774[ebp]
	call	?_Tidy@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@IAEXXZ ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvGlobals@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 896				; 00000380H
	jmp	??1?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::~vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	jmp	DWORD PTR __imp_??1Results@Database@@UAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 980				; 000003d4H
	jmp	??1?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	jmp	??1?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1036				; 0000040cH
	jmp	??1?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::~vector<CvColorInfo *,std::allocator<CvColorInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1052				; 0000041cH
	jmp	??1?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::~vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1068				; 0000042cH
	jmp	??1?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::~vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1084				; 0000043cH
	jmp	??1?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::~vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1100				; 0000044cH
	jmp	??1?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::~vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1116				; 0000045cH
	jmp	??1?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::~vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$10:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1132				; 0000046cH
	jmp	??1?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::~vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$11:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1148				; 0000047cH
	jmp	??1?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::~vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$12:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1164				; 0000048cH
	jmp	??1?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::~vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$13:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1180				; 0000049cH
	jmp	??1?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::~vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$14:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1196				; 000004acH
	jmp	??1?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::~vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$15:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1212				; 000004bcH
	jmp	??1?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::~vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$16:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1228				; 000004ccH
	jmp	??1?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::~vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$17:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1252				; 000004e4H
	jmp	??1?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::~vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$18:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1268				; 000004f4H
	jmp	??1?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::~vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$19:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1284				; 00000504H
	jmp	??1?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::~vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$20:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1300				; 00000514H
	jmp	??1?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::~vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$21:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1316				; 00000524H
	jmp	??1?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::~vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$22:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1332				; 00000534H
	jmp	??1?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::~vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$23:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1348				; 00000544H
	jmp	??1?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::~vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$24:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1364				; 00000554H
	jmp	??1?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::~vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$25:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1380				; 00000564H
	jmp	??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::~vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$26:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1396				; 00000574H
	jmp	??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::~vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$27:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1412				; 00000584H
	jmp	??1?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::~vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$28:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1428				; 00000594H
	jmp	??1?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::~vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$29:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1444				; 000005a4H
	jmp	??1?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::~vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$30:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1460				; 000005b4H
	jmp	??1?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::~vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$31:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1476				; 000005c4H
	jmp	??1?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::~vector<CvActionInfo *,std::allocator<CvActionInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$32:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1492				; 000005d4H
	jmp	??1?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::~vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$33:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1508				; 000005e4H
	jmp	??1?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::~vector<CvControlInfo *,std::allocator<CvControlInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$34:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1524				; 000005f4H
	jmp	??1?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::~vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$35:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1540				; 00000604H
	jmp	??1?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::~vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$36:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1556				; 00000614H
	jmp	??1?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::~vector<CvEraInfo *,std::allocator<CvEraInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$37:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1572				; 00000624H
	jmp	??1?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::~vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$38:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1588				; 00000634H
	jmp	??1?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::~vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$39:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1604				; 00000644H
	jmp	??1?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::~vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$40:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1620				; 00000654H
	jmp	??1?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::~vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$41:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1636				; 00000664H
	jmp	??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::~vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >
__unwindfunclet$??1CvGlobals@@UAE@XZ$43:
	mov	ecx, DWORD PTR $T256572[ebp]
	jmp	??1?$_Vector_val@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$45:
	mov	ecx, DWORD PTR $T256590[ebp]
	jmp	??1?$_Vector_val@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$47:
	mov	ecx, DWORD PTR $T256608[ebp]
	jmp	??1?$_Vector_val@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$49:
	mov	ecx, DWORD PTR $T256626[ebp]
	jmp	??1?$_Vector_val@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$51:
	mov	ecx, DWORD PTR $T256644[ebp]
	jmp	??1?$_Vector_val@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$53:
	mov	ecx, DWORD PTR $T256662[ebp]
	jmp	??1?$_Vector_val@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$55:
	mov	ecx, DWORD PTR $T256680[ebp]
	jmp	??1?$_Vector_val@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$57:
	mov	ecx, DWORD PTR $T256698[ebp]
	jmp	??1?$_Vector_val@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$59:
	mov	ecx, DWORD PTR $T256716[ebp]
	jmp	??1?$_Vector_val@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$61:
	mov	ecx, DWORD PTR $T256734[ebp]
	jmp	??1?$_Vector_val@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$63:
	mov	ecx, DWORD PTR $T256752[ebp]
	jmp	??1?$_Vector_val@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$65:
	mov	ecx, DWORD PTR $T256770[ebp]
	jmp	??1?$_Vector_val@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$67:
	mov	ecx, DWORD PTR $T256788[ebp]
	jmp	??1?$_Vector_val@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$69:
	mov	ecx, DWORD PTR $T256806[ebp]
	jmp	??1?$_Vector_val@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$71:
	mov	ecx, DWORD PTR $T256824[ebp]
	jmp	??1?$_Vector_val@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$73:
	mov	ecx, DWORD PTR $T256842[ebp]
	jmp	??1?$_Vector_val@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$75:
	mov	ecx, DWORD PTR $T256860[ebp]
	jmp	??1?$_Vector_val@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$77:
	mov	ecx, DWORD PTR $T256878[ebp]
	jmp	??1?$_Vector_val@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$79:
	mov	ecx, DWORD PTR $T256896[ebp]
	jmp	??1?$_Vector_val@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$81:
	mov	ecx, DWORD PTR $T256914[ebp]
	jmp	??1?$_Vector_val@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$83:
	mov	ecx, DWORD PTR $T256932[ebp]
	jmp	??1?$_Vector_val@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$85:
	mov	ecx, DWORD PTR $T256950[ebp]
	jmp	??1?$_Vector_val@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$87:
	mov	ecx, DWORD PTR $T256968[ebp]
	jmp	??1?$_Vector_val@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$89:
	mov	ecx, DWORD PTR $T256986[ebp]
	jmp	??1?$_Vector_val@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$91:
	mov	ecx, DWORD PTR $T257004[ebp]
	jmp	??1?$_Vector_val@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$93:
	mov	ecx, DWORD PTR $T257022[ebp]
	jmp	??1?$_Vector_val@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$95:
	mov	ecx, DWORD PTR $T257040[ebp]
	jmp	??1?$_Vector_val@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$97:
	mov	ecx, DWORD PTR $T257058[ebp]
	jmp	??1?$_Vector_val@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$99:
	mov	ecx, DWORD PTR $T257076[ebp]
	jmp	??1?$_Vector_val@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$101:
	mov	ecx, DWORD PTR $T257094[ebp]
	jmp	??1?$_Vector_val@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$103:
	mov	ecx, DWORD PTR $T257112[ebp]
	jmp	??1?$_Vector_val@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$105:
	mov	ecx, DWORD PTR $T257130[ebp]
	jmp	??1?$_Vector_val@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$107:
	mov	ecx, DWORD PTR $T257186[ebp]
	jmp	??1?$_Vector_val@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$109:
	mov	ecx, DWORD PTR $T257242[ebp]
	jmp	??1?$_Vector_val@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$111:
	mov	ecx, DWORD PTR $T257298[ebp]
	jmp	??1?$_Vector_val@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$113:
	mov	ecx, DWORD PTR $T257354[ebp]
	jmp	??1?$_Vector_val@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$115:
	mov	ecx, DWORD PTR $T257410[ebp]
	jmp	??1?$_Vector_val@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$117:
	mov	ecx, DWORD PTR $T257466[ebp]
	jmp	??1?$_Vector_val@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$119:
	mov	ecx, DWORD PTR $T257522[ebp]
	jmp	??1?$_Vector_val@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$122:
	mov	ecx, DWORD PTR $T257592[ebp]
	jmp	??1?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvGlobals@@UAE@XZ$136:
	mov	ecx, DWORD PTR $T257774[ebp]
	jmp	??1?$_Vector_val@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1CvGlobals@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-416]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvGlobals@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvGlobals@@UAE@XZ ENDP				; CvGlobals::~CvGlobals
PUBLIC	??1?$auto_ptr@VICvDLLDatabaseUtility1@@@std@@QAE@XZ ; std::auto_ptr<ICvDLLDatabaseUtility1>::~auto_ptr<ICvDLLDatabaseUtility1>
PUBLIC	?SetTacticalAnalysisMapFinder@CvGlobals@@QAEXPAVCvTwoLayerPathFinder@@@Z ; CvGlobals::SetTacticalAnalysisMapFinder
PUBLIC	?SetInternationalTradeRouteWaterFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ; CvGlobals::SetInternationalTradeRouteWaterFinder
PUBLIC	?SetInternationalTradeRouteLandFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ; CvGlobals::SetInternationalTradeRouteLandFinder
PUBLIC	?SetBuildRouteFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ; CvGlobals::SetBuildRouteFinder
PUBLIC	?setInfluenceFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ; CvGlobals::setInfluenceFinder
PUBLIC	?setAreaFinder@CvGlobals@@QAEXPAVCvAStar@@@Z	; CvGlobals::setAreaFinder
PUBLIC	?SetWaterRouteFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ; CvGlobals::SetWaterRouteFinder
PUBLIC	?setRouteFinder@CvGlobals@@QAEXPAVCvAStar@@@Z	; CvGlobals::setRouteFinder
PUBLIC	?setStepFinder@CvGlobals@@QAEXPAVCvStepPathFinder@@@Z ; CvGlobals::setStepFinder
PUBLIC	?setIgnoreUnitsPathFinder@CvGlobals@@QAEXPAVCvIgnoreUnitsPathFinder@@@Z ; CvGlobals::setIgnoreUnitsPathFinder
PUBLIC	?setInterfacePathFinder@CvGlobals@@QAEXPAVCvTwoLayerPathFinder@@@Z ; CvGlobals::setInterfacePathFinder
PUBLIC	?setPathFinder@CvGlobals@@QAEXPAVCvTwoLayerPathFinder@@@Z ; CvGlobals::setPathFinder
PUBLIC	??_C@_0DB@FMALIPEM@SELECT?5Value?5from?5Defines?5where?5@ ; `string'
PUBLIC	?getDatabaseLoadUtility@CvGlobals@@QAEPAVICvDLLDatabaseUtility1@@XZ ; CvGlobals::getDatabaseLoadUtility
PUBLIC	?init@CvGlobals@@QAEXXZ				; CvGlobals::init
EXTRN	??0CvAStar@@QAE@XZ:PROC				; CvAStar::CvAStar
EXTRN	??0CvTwoLayerPathFinder@@QAE@XZ:PROC		; CvTwoLayerPathFinder::CvTwoLayerPathFinder
EXTRN	?initStatics@CvTeam@@SAXXZ:PROC			; CvTeam::initStatics
EXTRN	?initStatics@CvPlayerAI@@SAXXZ:PROC		; CvPlayerAI::initStatics
EXTRN	__imp_?Execute@Connection@Database@@QBE_NAAVResults@2@PBDH@Z:PROC
EXTRN	??0CvNotificationXMLEntries@@QAE@XZ:PROC	; CvNotificationXMLEntries::CvNotificationXMLEntries
EXTRN	??0CvResolutionXMLEntries@@QAE@XZ:PROC		; CvResolutionXMLEntries::CvResolutionXMLEntries
EXTRN	??0CvLeagueProjectRewardXMLEntries@@QAE@XZ:PROC	; CvLeagueProjectRewardXMLEntries::CvLeagueProjectRewardXMLEntries
EXTRN	??0CvLeagueProjectXMLEntries@@QAE@XZ:PROC	; CvLeagueProjectXMLEntries::CvLeagueProjectXMLEntries
EXTRN	??0CvLeagueNameXMLEntries@@QAE@XZ:PROC		; CvLeagueNameXMLEntries::CvLeagueNameXMLEntries
EXTRN	??0CvLeagueSpecialSessionXMLEntries@@QAE@XZ:PROC ; CvLeagueSpecialSessionXMLEntries::CvLeagueSpecialSessionXMLEntries
EXTRN	??0CvBeliefXMLEntries@@QAE@XZ:PROC		; CvBeliefXMLEntries::CvBeliefXMLEntries
EXTRN	??0CvReligionXMLEntries@@QAE@XZ:PROC		; CvReligionXMLEntries::CvReligionXMLEntries
EXTRN	??0CvTraitXMLEntries@@QAE@XZ:PROC		; CvTraitXMLEntries::CvTraitXMLEntries
EXTRN	??0CvEmphasisXMLEntries@@QAE@XZ:PROC		; CvEmphasisXMLEntries::CvEmphasisXMLEntries
EXTRN	??0CvImprovementXMLEntries@@QAE@XZ:PROC		; CvImprovementXMLEntries::CvImprovementXMLEntries
EXTRN	??0CvPromotionXMLEntries@@QAE@XZ:PROC		; CvPromotionXMLEntries::CvPromotionXMLEntries
EXTRN	??0CvProjectXMLEntries@@QAE@XZ:PROC		; CvProjectXMLEntries::CvProjectXMLEntries
EXTRN	??0CvUnitXMLEntries@@QAE@XZ:PROC		; CvUnitXMLEntries::CvUnitXMLEntries
EXTRN	??0CvBuildingXMLEntries@@QAE@XZ:PROC		; CvBuildingXMLEntries::CvBuildingXMLEntries
EXTRN	??0CvTechXMLEntries@@QAE@XZ:PROC		; CvTechXMLEntries::CvTechXMLEntries
EXTRN	??0CvPolicyXMLEntries@@QAE@XZ:PROC		; CvPolicyXMLEntries::CvPolicyXMLEntries
EXTRN	??0CvAICityStrategies@@QAE@XZ:PROC		; CvAICityStrategies::CvAICityStrategies
EXTRN	??0CvAIGrandStrategyXMLEntries@@QAE@XZ:PROC	; CvAIGrandStrategyXMLEntries::CvAIGrandStrategyXMLEntries
EXTRN	??0CvMilitaryAIStrategyXMLEntries@@QAE@XZ:PROC	; CvMilitaryAIStrategyXMLEntries::CvMilitaryAIStrategyXMLEntries
EXTRN	??0CvTacticalMoveXMLEntries@@QAE@XZ:PROC	; CvTacticalMoveXMLEntries::CvTacticalMoveXMLEntries
EXTRN	??0CvCitySpecializationXMLEntries@@QAE@XZ:PROC	; CvCitySpecializationXMLEntries::CvCitySpecializationXMLEntries
EXTRN	??0CvEconomicAIStrategyXMLEntries@@QAE@XZ:PROC	; CvEconomicAIStrategyXMLEntries::CvEconomicAIStrategyXMLEntries
EXTRN	??0CvMap@@QAE@XZ:PROC				; CvMap::CvMap
EXTRN	??0CvGame@@QAE@XZ:PROC				; CvGame::CvGame
EXTRN	??0CvRandom@@QAE@XZ:PROC			; CvRandom::CvRandom
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_C@_0DB@FMALIPEM@SELECT?5Value?5from?5Defines?5where?5@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
CONST	SEGMENT
??_C@_0DB@FMALIPEM@SELECT?5Value?5from?5Defines?5where?5@ DB 'SELECT Valu'
	DB	'e from Defines where Name = ? LIMIT 1', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?init@CvGlobals@@QAEXXZ DD 019930522H
	DD	027H
	DD	FLAT:__unwindtable$?init@CvGlobals@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?init@CvGlobals@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$11
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$12
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$14
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$15
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$16
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$17
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$18
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$19
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$20
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$21
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$22
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$23
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$24
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$25
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$26
	DD	01aH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$27
	DD	01aH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$28
	DD	01aH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$29
	DD	01aH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$30
	DD	01aH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$31
	DD	01aH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$32
	DD	01aH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$33
	DD	01aH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$34
	DD	01aH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$35
	DD	01aH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$36
	DD	01aH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$37
	DD	01aH
	DD	FLAT:__unwindfunclet$?init@CvGlobals@@QAEXXZ$38
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
xdata$x	ENDS
;	COMDAT ?init@CvGlobals@@QAEXXZ
_TEXT	SEGMENT
tv910 = -1260						; size = 4
tv901 = -1256						; size = 4
tv892 = -1252						; size = 4
tv883 = -1248						; size = 4
tv874 = -1244						; size = 4
tv865 = -1240						; size = 4
tv856 = -1236						; size = 4
tv847 = -1232						; size = 4
tv838 = -1228						; size = 4
tv829 = -1224						; size = 4
tv820 = -1220						; size = 4
tv811 = -1216						; size = 4
tv752 = -1212						; size = 4
tv746 = -1208						; size = 4
tv698 = -1204						; size = 4
tv690 = -1200						; size = 4
tv682 = -1196						; size = 4
tv674 = -1192						; size = 4
tv666 = -1188						; size = 4
tv658 = -1184						; size = 4
tv650 = -1180						; size = 4
tv642 = -1176						; size = 4
tv634 = -1172						; size = 4
tv626 = -1168						; size = 4
tv618 = -1164						; size = 4
tv610 = -1160						; size = 4
tv602 = -1156						; size = 4
tv594 = -1152						; size = 4
tv586 = -1148						; size = 4
tv578 = -1144						; size = 4
tv538 = -1140						; size = 4
tv530 = -1136						; size = 4
tv522 = -1132						; size = 4
tv514 = -1128						; size = 4
tv506 = -1124						; size = 4
tv498 = -1120						; size = 4
tv490 = -1116						; size = 4
tv482 = -1112						; size = 4
tv90 = -1108						; size = 4
tv79 = -1104						; size = 4
tv72 = -1100						; size = 4
_this$ = -1096						; size = 4
_inst$258021 = -1092					; size = 4
$T258018 = -1088					; size = 4
$T257981 = -1084					; size = 4
$T257977 = -1080					; size = 4
$T257932 = -1076					; size = 4
$T257931 = -1072					; size = 4
$T257928 = -1068					; size = 4
$T257927 = -1064					; size = 4
$T257924 = -1060					; size = 4
$T257923 = -1056					; size = 4
$T257920 = -1052					; size = 4
$T257919 = -1048					; size = 4
$T257916 = -1044					; size = 4
$T257915 = -1040					; size = 4
$T257912 = -1036					; size = 4
$T257911 = -1032					; size = 4
$T257908 = -1028					; size = 4
$T257907 = -1024					; size = 4
$T257904 = -1020					; size = 4
$T257903 = -1016					; size = 4
$T257900 = -1012					; size = 4
$T257899 = -1008					; size = 4
$T257896 = -1004					; size = 4
$T257895 = -1000					; size = 4
$T257892 = -996						; size = 4
$T257891 = -992						; size = 4
$T257888 = -988						; size = 4
$T257887 = -984						; size = 4
$T257884 = -980						; size = 4
$T257883 = -976						; size = 4
$T257880 = -972						; size = 4
$T257879 = -968						; size = 4
$T257876 = -964						; size = 4
$T257875 = -960						; size = 4
$T257872 = -956						; size = 4
$T257871 = -952						; size = 4
$T257868 = -948						; size = 4
$T257867 = -944						; size = 4
$T257864 = -940						; size = 4
$T257863 = -936						; size = 4
$T257860 = -932						; size = 4
$T257859 = -928						; size = 4
$T257856 = -924						; size = 4
$T257855 = -920						; size = 4
$T257852 = -916						; size = 4
$T257851 = -912						; size = 4
$T257848 = -908						; size = 4
$T257847 = -904						; size = 4
$T257844 = -900						; size = 4
$T257843 = -896						; size = 4
$T257840 = -892						; size = 4
$T257839 = -888						; size = 4
$T257836 = -884						; size = 4
$T257835 = -880						; size = 4
$T257832 = -876						; size = 4
$T257831 = -872						; size = 4
$T257828 = -868						; size = 4
$T257827 = -864						; size = 4
$T257824 = -860						; size = 4
$T257823 = -856						; size = 4
$T257820 = -852						; size = 4
$T257819 = -848						; size = 4
$T257816 = -844						; size = 4
$T257815 = -840						; size = 4
$T257812 = -836						; size = 4
$T257811 = -832						; size = 4
$T257808 = -828						; size = 4
$T257807 = -824						; size = 4
$T257804 = -820						; size = 4
$T257803 = -816						; size = 4
$T257800 = -812						; size = 4
$T257799 = -808						; size = 4
$T257796 = -804						; size = 4
$T257795 = -800						; size = 4
$T257792 = -796						; size = 4
$T257791 = -792						; size = 4
$T257788 = -788						; size = 4
$T257787 = -784						; size = 4
$T257784 = -780						; size = 4
$T257783 = -776						; size = 4
_aaiXYCityPlot$ = -772					; size = 196
_aeTurnRightDirection$ = -572				; size = 24
_aeTurnLeftDirection$ = -548				; size = 24
_aiPlotDirectionY$ = -524				; size = 24
_pkLoader$ = -500					; size = 4
_pDB$ = -496						; size = 4
_aiCityPlotPriority$ = -492				; size = 148
_aiCityPlotX$ = -340					; size = 148
_aiPlotDirectionX$ = -188				; size = 24
_aiCityPlotY$ = -164					; size = 148
__$EHRec$ = -12						; size = 12
?init@CvGlobals@@QAEXXZ PROC				; CvGlobals::init, COMDAT
; _this$ = ecx

; 2014 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?init@CvGlobals@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1248				; 000004e0H
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2015 : 	//
; 2016 : 	// These vars are used to initialize the globals.
; 2017 : 	//
; 2018 : 	int aiPlotDirectionX[NUM_DIRECTION_TYPES] =
; 2019 : 	{
; 2020 : 		0,	// DIRECTION_NORTHEAST

	mov	DWORD PTR _aiPlotDirectionX$[ebp], 0

; 2021 : 		1,	// DIRECTION_EAST

	mov	DWORD PTR _aiPlotDirectionX$[ebp+4], 1

; 2022 : 		1,	// DIRECTION_SOUTHEAST

	mov	DWORD PTR _aiPlotDirectionX$[ebp+8], 1

; 2023 : 		0,	// DIRECTION_SOUTHWEST

	mov	DWORD PTR _aiPlotDirectionX$[ebp+12], 0

; 2024 : 		-1,	// DIRECTION_WEST

	mov	DWORD PTR _aiPlotDirectionX$[ebp+16], -1

; 2025 : 		-1,	// DIRECTION_NORTHWEST

	mov	DWORD PTR _aiPlotDirectionX$[ebp+20], -1

; 2026 : 	};
; 2027 : 
; 2028 : 	int aiPlotDirectionY[NUM_DIRECTION_TYPES] =
; 2029 : 	{
; 2030 : 		1,	// DIRECTION_NORTHEAST

	mov	DWORD PTR _aiPlotDirectionY$[ebp], 1

; 2031 : 		0,	// DIRECTION_EAST

	mov	DWORD PTR _aiPlotDirectionY$[ebp+4], 0

; 2032 : 		-1,	// DIRECTION_SOUTHEAST

	mov	DWORD PTR _aiPlotDirectionY$[ebp+8], -1

; 2033 : 		-1,	// DIRECTION_SOUTHWEST

	mov	DWORD PTR _aiPlotDirectionY$[ebp+12], -1

; 2034 : 		0,	// DIRECTION_WEST

	mov	DWORD PTR _aiPlotDirectionY$[ebp+16], 0

; 2035 : 		1,	// DIRECTION_NORTHWEST

	mov	DWORD PTR _aiPlotDirectionY$[ebp+20], 1

; 2036 : 	};
; 2037 : 
; 2038 : 	// these are now in hex-space coords
; 2039 : 	int aiCityPlotX[NUM_CITY_PLOTS] =
; 2040 : 	{
; 2041 : 		//	0
; 2042 : 		0,

	mov	DWORD PTR _aiCityPlotX$[ebp], 0

; 2043 : 		//	1	2	3	4	5	6
; 2044 : 		0,  1,  1,  0, -1, -1,

	mov	DWORD PTR _aiCityPlotX$[ebp+4], 0
	mov	DWORD PTR _aiCityPlotX$[ebp+8], 1
	mov	DWORD PTR _aiCityPlotX$[ebp+12], 1
	mov	DWORD PTR _aiCityPlotX$[ebp+16], 0
	mov	DWORD PTR _aiCityPlotX$[ebp+20], -1
	mov	DWORD PTR _aiCityPlotX$[ebp+24], -1

; 2045 : 		//	7	8	9	10	11	12	13	14	15	16	17	18
; 2046 : 		0,  1,  2,  2,  2,  1,  0,  -1, -2, -2, -2, -1,

	mov	DWORD PTR _aiCityPlotX$[ebp+28], 0
	mov	DWORD PTR _aiCityPlotX$[ebp+32], 1
	mov	DWORD PTR _aiCityPlotX$[ebp+36], 2
	mov	DWORD PTR _aiCityPlotX$[ebp+40], 2
	mov	DWORD PTR _aiCityPlotX$[ebp+44], 2
	mov	DWORD PTR _aiCityPlotX$[ebp+48], 1
	mov	DWORD PTR _aiCityPlotX$[ebp+52], 0
	mov	DWORD PTR _aiCityPlotX$[ebp+56], -1
	mov	DWORD PTR _aiCityPlotX$[ebp+60], -2	; fffffffeH
	mov	DWORD PTR _aiCityPlotX$[ebp+64], -2	; fffffffeH
	mov	DWORD PTR _aiCityPlotX$[ebp+68], -2	; fffffffeH
	mov	DWORD PTR _aiCityPlotX$[ebp+72], -1

; 2047 : 		//	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36
; 2048 : 		0,  1,  2,  3,  3,  3,  3,  2,  1,  0,  -1, -2, -3, -3, -3, -3, -2, -1,

	mov	DWORD PTR _aiCityPlotX$[ebp+76], 0
	mov	DWORD PTR _aiCityPlotX$[ebp+80], 1
	mov	DWORD PTR _aiCityPlotX$[ebp+84], 2
	mov	DWORD PTR _aiCityPlotX$[ebp+88], 3
	mov	DWORD PTR _aiCityPlotX$[ebp+92], 3
	mov	DWORD PTR _aiCityPlotX$[ebp+96], 3
	mov	DWORD PTR _aiCityPlotX$[ebp+100], 3
	mov	DWORD PTR _aiCityPlotX$[ebp+104], 2
	mov	DWORD PTR _aiCityPlotX$[ebp+108], 1
	mov	DWORD PTR _aiCityPlotX$[ebp+112], 0
	mov	DWORD PTR _aiCityPlotX$[ebp+116], -1
	mov	DWORD PTR _aiCityPlotX$[ebp+120], -2	; fffffffeH
	mov	DWORD PTR _aiCityPlotX$[ebp+124], -3	; fffffffdH
	mov	DWORD PTR _aiCityPlotX$[ebp+128], -3	; fffffffdH
	mov	DWORD PTR _aiCityPlotX$[ebp+132], -3	; fffffffdH
	mov	DWORD PTR _aiCityPlotX$[ebp+136], -3	; fffffffdH
	mov	DWORD PTR _aiCityPlotX$[ebp+140], -2	; fffffffeH
	mov	DWORD PTR _aiCityPlotX$[ebp+144], -1

; 2049 : 		//	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60
; 2050 : 		//	0,  1,  2,  3,  4,  4,  4,  4,  4,  3,  2,  1,  0,  -1,  -2, -3, -4, -4, -4, -4, -4, -3, -2, -1,
; 2051 : 	};
; 2052 : 
; 2053 : 	int aiCityPlotY[NUM_CITY_PLOTS] =
; 2054 : 	{
; 2055 : 		//	0
; 2056 : 		0,

	mov	DWORD PTR _aiCityPlotY$[ebp], 0

; 2057 : 		//	1	2	3	4	5	6
; 2058 : 		1,  0, -1, -1,  0,  1,

	mov	DWORD PTR _aiCityPlotY$[ebp+4], 1
	mov	DWORD PTR _aiCityPlotY$[ebp+8], 0
	mov	DWORD PTR _aiCityPlotY$[ebp+12], -1
	mov	DWORD PTR _aiCityPlotY$[ebp+16], -1
	mov	DWORD PTR _aiCityPlotY$[ebp+20], 0
	mov	DWORD PTR _aiCityPlotY$[ebp+24], 1

; 2059 : 		//	7	8	9	10	11	12	13	14	15	16	17	18
; 2060 : 		2,  1,  0, -1,	-2, -2, -2, -1,  0,  1,  2,  2,

	mov	DWORD PTR _aiCityPlotY$[ebp+28], 2
	mov	DWORD PTR _aiCityPlotY$[ebp+32], 1
	mov	DWORD PTR _aiCityPlotY$[ebp+36], 0
	mov	DWORD PTR _aiCityPlotY$[ebp+40], -1
	mov	DWORD PTR _aiCityPlotY$[ebp+44], -2	; fffffffeH
	mov	DWORD PTR _aiCityPlotY$[ebp+48], -2	; fffffffeH
	mov	DWORD PTR _aiCityPlotY$[ebp+52], -2	; fffffffeH
	mov	DWORD PTR _aiCityPlotY$[ebp+56], -1
	mov	DWORD PTR _aiCityPlotY$[ebp+60], 0
	mov	DWORD PTR _aiCityPlotY$[ebp+64], 1
	mov	DWORD PTR _aiCityPlotY$[ebp+68], 2
	mov	DWORD PTR _aiCityPlotY$[ebp+72], 2

; 2061 : 		//	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36
; 2062 : 		3,  2,  1,  0,  -1, -2, -3, -3, -3, -3, -2, -1,  0,  1,  2,  3,  3,  3,

	mov	DWORD PTR _aiCityPlotY$[ebp+76], 3
	mov	DWORD PTR _aiCityPlotY$[ebp+80], 2
	mov	DWORD PTR _aiCityPlotY$[ebp+84], 1
	mov	DWORD PTR _aiCityPlotY$[ebp+88], 0
	mov	DWORD PTR _aiCityPlotY$[ebp+92], -1
	mov	DWORD PTR _aiCityPlotY$[ebp+96], -2	; fffffffeH
	mov	DWORD PTR _aiCityPlotY$[ebp+100], -3	; fffffffdH
	mov	DWORD PTR _aiCityPlotY$[ebp+104], -3	; fffffffdH
	mov	DWORD PTR _aiCityPlotY$[ebp+108], -3	; fffffffdH
	mov	DWORD PTR _aiCityPlotY$[ebp+112], -3	; fffffffdH
	mov	DWORD PTR _aiCityPlotY$[ebp+116], -2	; fffffffeH
	mov	DWORD PTR _aiCityPlotY$[ebp+120], -1
	mov	DWORD PTR _aiCityPlotY$[ebp+124], 0
	mov	DWORD PTR _aiCityPlotY$[ebp+128], 1
	mov	DWORD PTR _aiCityPlotY$[ebp+132], 2
	mov	DWORD PTR _aiCityPlotY$[ebp+136], 3
	mov	DWORD PTR _aiCityPlotY$[ebp+140], 3
	mov	DWORD PTR _aiCityPlotY$[ebp+144], 3

; 2063 : 		//	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60
; 2064 : 		//	4,  3,  2,  1,  0, -1, -2, -3, -4, -4, -4, -4, -4, -3, -2, -1,  0,  1,  2,  3,  4,  4,  4,  4,
; 2065 : 	};
; 2066 : 
; 2067 : 	int aiCityPlotPriority[NUM_CITY_PLOTS] =
; 2068 : 	{
; 2069 : 		0,

	mov	DWORD PTR _aiCityPlotPriority$[ebp], 0

; 2070 : 		1,  1,  1,  1,  1,  1,

	mov	DWORD PTR _aiCityPlotPriority$[ebp+4], 1
	mov	DWORD PTR _aiCityPlotPriority$[ebp+8], 1
	mov	DWORD PTR _aiCityPlotPriority$[ebp+12], 1
	mov	DWORD PTR _aiCityPlotPriority$[ebp+16], 1
	mov	DWORD PTR _aiCityPlotPriority$[ebp+20], 1
	mov	DWORD PTR _aiCityPlotPriority$[ebp+24], 1

; 2071 : 		2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,

	mov	DWORD PTR _aiCityPlotPriority$[ebp+28], 2
	mov	DWORD PTR _aiCityPlotPriority$[ebp+32], 2
	mov	DWORD PTR _aiCityPlotPriority$[ebp+36], 2
	mov	DWORD PTR _aiCityPlotPriority$[ebp+40], 2
	mov	DWORD PTR _aiCityPlotPriority$[ebp+44], 2
	mov	DWORD PTR _aiCityPlotPriority$[ebp+48], 2
	mov	DWORD PTR _aiCityPlotPriority$[ebp+52], 2
	mov	DWORD PTR _aiCityPlotPriority$[ebp+56], 2
	mov	DWORD PTR _aiCityPlotPriority$[ebp+60], 2
	mov	DWORD PTR _aiCityPlotPriority$[ebp+64], 2
	mov	DWORD PTR _aiCityPlotPriority$[ebp+68], 2
	mov	DWORD PTR _aiCityPlotPriority$[ebp+72], 2

; 2072 : 		3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,

	mov	DWORD PTR _aiCityPlotPriority$[ebp+76], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+80], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+84], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+88], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+92], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+96], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+100], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+104], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+108], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+112], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+116], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+120], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+124], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+128], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+132], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+136], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+140], 3
	mov	DWORD PTR _aiCityPlotPriority$[ebp+144], 3

; 2073 : 		//4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
; 2074 : 	};
; 2075 : 
; 2076 : 	int aaiXYCityPlot[CITY_PLOTS_DIAMETER][CITY_PLOTS_DIAMETER] =
; 2077 : 	{
; 2078 : 		// this is the 4 ring layout
; 2079 : 		/*
; 2080 : 		//	 -4  -3  -2  -1   0   1   2   3  4  -- in the Y direction
; 2081 : 		{-1, -1, -1, -1, 53, 54, 55, 56, 57,}, // -4 hex-space x
; 2082 : 		{-1, -1, -1, 52, 31, 32, 33, 34, 58,}, // -3 hex-space x
; 2083 : 		{-1, -1, 51, 30, 15, 16, 17, 35, 59,}, // -2 hex-space x
; 2084 : 		{-1, 50, 29, 14,  5,  6, 18, 36, 60,}, // -1 hex-space x
; 2085 : 		{49, 28, 13,  4,  0,  1,  7, 19, 37,}, //  0 hex-space x
; 2086 : 		{48, 27, 12,  3,  2,  8, 20, 38, -1,}, //  1 hex-space x
; 2087 : 		{47, 26, 11, 10,  9, 21, 39, -1, -1,}, //  2 hex-space x
; 2088 : 		{46, 25, 24, 23, 22, 40, -1, -1, -1,}, //  3 hex-space x
; 2089 : 		{45, 44, 43, 42, 41, -1, -1, -1, -1,}, //  4 hex-space x
; 2090 : 		*/
; 2091 : 		// this is the 3 ring layout
; 2092 : 		//	 -3  -2  -1   0   1   2   3    -- in the Y direction
; 2093 : 		{-1, -1, -1, 31, 32, 33, 34,}, // -3 hex-space x

	mov	DWORD PTR _aaiXYCityPlot$[ebp], -1
	mov	DWORD PTR _aaiXYCityPlot$[ebp+4], -1
	mov	DWORD PTR _aaiXYCityPlot$[ebp+8], -1
	mov	DWORD PTR _aaiXYCityPlot$[ebp+12], 31	; 0000001fH
	mov	DWORD PTR _aaiXYCityPlot$[ebp+16], 32	; 00000020H
	mov	DWORD PTR _aaiXYCityPlot$[ebp+20], 33	; 00000021H
	mov	DWORD PTR _aaiXYCityPlot$[ebp+24], 34	; 00000022H

; 2094 : 		{-1, -1, 30, 15, 16, 17, 35,}, // -2 hex-space x

	mov	DWORD PTR _aaiXYCityPlot$[ebp+28], -1
	mov	DWORD PTR _aaiXYCityPlot$[ebp+32], -1
	mov	DWORD PTR _aaiXYCityPlot$[ebp+36], 30	; 0000001eH
	mov	DWORD PTR _aaiXYCityPlot$[ebp+40], 15	; 0000000fH
	mov	DWORD PTR _aaiXYCityPlot$[ebp+44], 16	; 00000010H
	mov	DWORD PTR _aaiXYCityPlot$[ebp+48], 17	; 00000011H
	mov	DWORD PTR _aaiXYCityPlot$[ebp+52], 35	; 00000023H

; 2095 : 		{-1, 29, 14,  5,  6, 18, 36,}, // -1 hex-space x

	mov	DWORD PTR _aaiXYCityPlot$[ebp+56], -1
	mov	DWORD PTR _aaiXYCityPlot$[ebp+60], 29	; 0000001dH
	mov	DWORD PTR _aaiXYCityPlot$[ebp+64], 14	; 0000000eH
	mov	DWORD PTR _aaiXYCityPlot$[ebp+68], 5
	mov	DWORD PTR _aaiXYCityPlot$[ebp+72], 6
	mov	DWORD PTR _aaiXYCityPlot$[ebp+76], 18	; 00000012H
	mov	DWORD PTR _aaiXYCityPlot$[ebp+80], 36	; 00000024H

; 2096 : 		{28, 13,  4,  0,  1,  7, 19,}, //  0 hex-space x

	mov	DWORD PTR _aaiXYCityPlot$[ebp+84], 28	; 0000001cH
	mov	DWORD PTR _aaiXYCityPlot$[ebp+88], 13	; 0000000dH
	mov	DWORD PTR _aaiXYCityPlot$[ebp+92], 4
	mov	DWORD PTR _aaiXYCityPlot$[ebp+96], 0
	mov	DWORD PTR _aaiXYCityPlot$[ebp+100], 1
	mov	DWORD PTR _aaiXYCityPlot$[ebp+104], 7
	mov	DWORD PTR _aaiXYCityPlot$[ebp+108], 19	; 00000013H

; 2097 : 		{27, 12,  3,  2,  8, 20, -1,}, //  1 hex-space x

	mov	DWORD PTR _aaiXYCityPlot$[ebp+112], 27	; 0000001bH
	mov	DWORD PTR _aaiXYCityPlot$[ebp+116], 12	; 0000000cH
	mov	DWORD PTR _aaiXYCityPlot$[ebp+120], 3
	mov	DWORD PTR _aaiXYCityPlot$[ebp+124], 2
	mov	DWORD PTR _aaiXYCityPlot$[ebp+128], 8
	mov	DWORD PTR _aaiXYCityPlot$[ebp+132], 20	; 00000014H
	mov	DWORD PTR _aaiXYCityPlot$[ebp+136], -1

; 2098 : 		{26, 11, 10,  9, 21, -1, -1,}, //  2 hex-space x

	mov	DWORD PTR _aaiXYCityPlot$[ebp+140], 26	; 0000001aH
	mov	DWORD PTR _aaiXYCityPlot$[ebp+144], 11	; 0000000bH
	mov	DWORD PTR _aaiXYCityPlot$[ebp+148], 10	; 0000000aH
	mov	DWORD PTR _aaiXYCityPlot$[ebp+152], 9
	mov	DWORD PTR _aaiXYCityPlot$[ebp+156], 21	; 00000015H
	mov	DWORD PTR _aaiXYCityPlot$[ebp+160], -1
	mov	DWORD PTR _aaiXYCityPlot$[ebp+164], -1

; 2099 : 		{25, 24, 23, 22, -1, -1, -1,}, //  3 hex-space x

	mov	DWORD PTR _aaiXYCityPlot$[ebp+168], 25	; 00000019H
	mov	DWORD PTR _aaiXYCityPlot$[ebp+172], 24	; 00000018H
	mov	DWORD PTR _aaiXYCityPlot$[ebp+176], 23	; 00000017H
	mov	DWORD PTR _aaiXYCityPlot$[ebp+180], 22	; 00000016H
	mov	DWORD PTR _aaiXYCityPlot$[ebp+184], -1
	mov	DWORD PTR _aaiXYCityPlot$[ebp+188], -1
	mov	DWORD PTR _aaiXYCityPlot$[ebp+192], -1

; 2100 : 		/*
; 2101 : 		// this is the 2 ring layout
; 2102 : 		//	-2   -1   0   1   2      -- in the Y direction
; 2103 : 		{-1, -1, 16, 17, 18,}, // -2 hex-space x
; 2104 : 		{-1, 15,  5,  6,  7,}, // -1 hex-space x
; 2105 : 		{14,  4,  0,  1,  8,}, //  0 hex-space x
; 2106 : 		{13,  3,  2,  9, -1,}, //  1 hex-space x
; 2107 : 		{12, 11, 10, -1, -1,}, //  2 hex-space x
; 2108 : 		*/
; 2109 : 	};
; 2110 : 
; 2111 : 	DirectionTypes aeTurnRightDirection[NUM_DIRECTION_TYPES] =
; 2112 : 	{
; 2113 : 		DIRECTION_EAST,			// DIRECTION_NORTHEAST or DIRECTION_NORTH (deprecated)

	mov	DWORD PTR _aeTurnRightDirection$[ebp], 1

; 2114 : 		DIRECTION_SOUTHEAST,	// DIRECTION_EAST

	mov	DWORD PTR _aeTurnRightDirection$[ebp+4], 2

; 2115 : 		DIRECTION_SOUTHWEST,	// DIRECTION_SOUTHEAST

	mov	DWORD PTR _aeTurnRightDirection$[ebp+8], 3

; 2116 : 		DIRECTION_WEST,			// DIRECTION_SOUTHWEST or DIRECTION_SOUTH (deprecated)

	mov	DWORD PTR _aeTurnRightDirection$[ebp+12], 4

; 2117 : 		DIRECTION_NORTHWEST,	// DIRECTION_WEST

	mov	DWORD PTR _aeTurnRightDirection$[ebp+16], 5

; 2118 : 		DIRECTION_NORTHEAST,	// DIRECTION_NORTHWEST

	mov	DWORD PTR _aeTurnRightDirection$[ebp+20], 0

; 2119 : 	};
; 2120 : 
; 2121 : 	DirectionTypes aeTurnLeftDirection[NUM_DIRECTION_TYPES] =
; 2122 : 	{
; 2123 : 		DIRECTION_NORTHWEST,	// DIRECTION_NORTHEAST or DIRECTION_NORTH (deprecated)

	mov	DWORD PTR _aeTurnLeftDirection$[ebp], 5

; 2124 : 		DIRECTION_NORTHEAST,	// DIRECTION_EAST

	mov	DWORD PTR _aeTurnLeftDirection$[ebp+4], 0

; 2125 : 		DIRECTION_EAST,			// DIRECTION_SOUTHEAST

	mov	DWORD PTR _aeTurnLeftDirection$[ebp+8], 1

; 2126 : 		DIRECTION_SOUTHEAST,	// DIRECTION_SOUTHWEST or DIRECTION_SOUTH (deprecated)

	mov	DWORD PTR _aeTurnLeftDirection$[ebp+12], 2

; 2127 : 		DIRECTION_SOUTHWEST,	// DIRECTION_WEST

	mov	DWORD PTR _aeTurnLeftDirection$[ebp+16], 3

; 2128 : 		DIRECTION_WEST,			// DIRECTION_NORTHWEST

	mov	DWORD PTR _aeTurnLeftDirection$[ebp+20], 4

; 2129 : 	};
; 2130 : 
; 2131 : 	CvAssertMsg(gDLL != NULL, "Civ app needs to set gDLL");
; 2132 : #ifdef AUI_WARNING_FIXES
; 2133 : 	m_asyncRand = new(_aligned_malloc(sizeof(CvRandom), 16)) CvRandom();
; 2134 : #else
; 2135 : 	m_asyncRand = FNEW(CvRandom, c_eCiv5GameplayDLL, 0);

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257784[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T257784[ebp], 0
	je	SHORT $LN3@init
	mov	ecx, DWORD PTR $T257784[ebp]
	call	??0CvRandom@@QAE@XZ			; CvRandom::CvRandom
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@init
$LN3@init:
	mov	DWORD PTR tv72[ebp], 0
$LN4@init:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T257783[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257783[ebp]
	mov	DWORD PTR [ecx+44], edx

; 2136 : #endif
; 2137 : 
; 2138 : 	gDLL->InitGlobals();	// some globals need to be allocated outside the dll

	mov	eax, DWORD PTR $T257977[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv79[ebp], ecx
	mov	edx, DWORD PTR tv79[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv79[ebp]
	mov	edx, DWORD PTR [eax+488]
	call	edx

; 2139 : 
; 2140 : #ifdef AUI_WARNING_FIXES
; 2141 : 	m_game = new(_aligned_malloc(sizeof(CvGame), 16)) CvGame();
; 2142 : #else
; 2143 : 	m_game = FNEW(CvGame, c_eCiv5GameplayDLL, 0);

	push	5368					; 000014f8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257788[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T257788[ebp], 0
	je	SHORT $LN5@init
	mov	ecx, DWORD PTR $T257788[ebp]
	call	??0CvGame@@QAE@XZ			; CvGame::CvGame
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN6@init
$LN5@init:
	mov	DWORD PTR tv90[ebp], 0
$LN6@init:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR $T257787[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257787[ebp]
	mov	DWORD PTR [ecx+48], edx

; 2144 : #endif
; 2145 : 	m_map = FNEW(CvMap, c_eCiv5GameplayDLL, 0);

	push	4332					; 000010ecH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257792[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T257792[ebp], 0
	je	SHORT $LN7@init
	mov	ecx, DWORD PTR $T257792[ebp]
	call	??0CvMap@@QAE@XZ			; CvMap::CvMap
	mov	DWORD PTR tv482[ebp], eax
	jmp	SHORT $LN8@init
$LN7@init:
	mov	DWORD PTR tv482[ebp], 0
$LN8@init:
	mov	eax, DWORD PTR tv482[ebp]
	mov	DWORD PTR $T257791[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257791[ebp]
	mov	DWORD PTR [ecx+52], edx

; 2146 : 
; 2147 : 	m_pEconomicAIStrategies = FNEW(CvEconomicAIStrategyXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257796[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T257796[ebp], 0
	je	SHORT $LN9@init
	mov	ecx, DWORD PTR $T257796[ebp]
	call	??0CvEconomicAIStrategyXMLEntries@@QAE@XZ ; CvEconomicAIStrategyXMLEntries::CvEconomicAIStrategyXMLEntries
	mov	DWORD PTR tv490[ebp], eax
	jmp	SHORT $LN10@init
$LN9@init:
	mov	DWORD PTR tv490[ebp], 0
$LN10@init:
	mov	eax, DWORD PTR tv490[ebp]
	mov	DWORD PTR $T257795[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257795[ebp]
	mov	DWORD PTR [ecx+1668], edx

; 2148 : 	m_pCitySpecializations = FNEW(CvCitySpecializationXMLEntries, c_eCiv5GameplayDLL, 0);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257800[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T257800[ebp], 0
	je	SHORT $LN11@init
	mov	ecx, DWORD PTR $T257800[ebp]
	call	??0CvCitySpecializationXMLEntries@@QAE@XZ ; CvCitySpecializationXMLEntries::CvCitySpecializationXMLEntries
	mov	DWORD PTR tv498[ebp], eax
	jmp	SHORT $LN12@init
$LN11@init:
	mov	DWORD PTR tv498[ebp], 0
$LN12@init:
	mov	eax, DWORD PTR tv498[ebp]
	mov	DWORD PTR $T257799[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257799[ebp]
	mov	DWORD PTR [ecx+1672], edx

; 2149 : 	m_pTacticalMoves = FNEW(CvTacticalMoveXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257804[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T257804[ebp], 0
	je	SHORT $LN13@init
	mov	ecx, DWORD PTR $T257804[ebp]
	call	??0CvTacticalMoveXMLEntries@@QAE@XZ	; CvTacticalMoveXMLEntries::CvTacticalMoveXMLEntries
	mov	DWORD PTR tv506[ebp], eax
	jmp	SHORT $LN14@init
$LN13@init:
	mov	DWORD PTR tv506[ebp], 0
$LN14@init:
	mov	eax, DWORD PTR tv506[ebp]
	mov	DWORD PTR $T257803[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257803[ebp]
	mov	DWORD PTR [ecx+1676], edx

; 2150 : 	m_pMilitaryAIStrategies = FNEW(CvMilitaryAIStrategyXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257808[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T257808[ebp], 0
	je	SHORT $LN15@init
	mov	ecx, DWORD PTR $T257808[ebp]
	call	??0CvMilitaryAIStrategyXMLEntries@@QAE@XZ ; CvMilitaryAIStrategyXMLEntries::CvMilitaryAIStrategyXMLEntries
	mov	DWORD PTR tv514[ebp], eax
	jmp	SHORT $LN16@init
$LN15@init:
	mov	DWORD PTR tv514[ebp], 0
$LN16@init:
	mov	eax, DWORD PTR tv514[ebp]
	mov	DWORD PTR $T257807[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257807[ebp]
	mov	DWORD PTR [ecx+1680], edx

; 2151 : 	m_pAIGrandStrategies = FNEW(CvAIGrandStrategyXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257812[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T257812[ebp], 0
	je	SHORT $LN17@init
	mov	ecx, DWORD PTR $T257812[ebp]
	call	??0CvAIGrandStrategyXMLEntries@@QAE@XZ	; CvAIGrandStrategyXMLEntries::CvAIGrandStrategyXMLEntries
	mov	DWORD PTR tv522[ebp], eax
	jmp	SHORT $LN18@init
$LN17@init:
	mov	DWORD PTR tv522[ebp], 0
$LN18@init:
	mov	eax, DWORD PTR tv522[ebp]
	mov	DWORD PTR $T257811[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257811[ebp]
	mov	DWORD PTR [ecx+1684], edx

; 2152 : 	m_pAICityStrategies = FNEW(CvAICityStrategies, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257816[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 8
	cmp	DWORD PTR $T257816[ebp], 0
	je	SHORT $LN19@init
	mov	ecx, DWORD PTR $T257816[ebp]
	call	??0CvAICityStrategies@@QAE@XZ		; CvAICityStrategies::CvAICityStrategies
	mov	DWORD PTR tv530[ebp], eax
	jmp	SHORT $LN20@init
$LN19@init:
	mov	DWORD PTR tv530[ebp], 0
$LN20@init:
	mov	eax, DWORD PTR tv530[ebp]
	mov	DWORD PTR $T257815[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257815[ebp]
	mov	DWORD PTR [ecx+1688], edx

; 2153 : 	m_pPolicies = FNEW(CvPolicyXMLEntries, c_eCiv5GameplayDLL, 0);

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257820[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 9
	cmp	DWORD PTR $T257820[ebp], 0
	je	SHORT $LN21@init
	mov	ecx, DWORD PTR $T257820[ebp]
	call	??0CvPolicyXMLEntries@@QAE@XZ		; CvPolicyXMLEntries::CvPolicyXMLEntries
	mov	DWORD PTR tv538[ebp], eax
	jmp	SHORT $LN22@init
$LN21@init:
	mov	DWORD PTR tv538[ebp], 0
$LN22@init:
	mov	eax, DWORD PTR tv538[ebp]
	mov	DWORD PTR $T257819[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257819[ebp]
	mov	DWORD PTR [ecx+1692], edx

; 2154 : 	m_pTechs = FNEW(CvTechXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257824[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH
	cmp	DWORD PTR $T257824[ebp], 0
	je	SHORT $LN23@init
	mov	ecx, DWORD PTR $T257824[ebp]
	call	??0CvTechXMLEntries@@QAE@XZ		; CvTechXMLEntries::CvTechXMLEntries
	mov	DWORD PTR tv578[ebp], eax
	jmp	SHORT $LN24@init
$LN23@init:
	mov	DWORD PTR tv578[ebp], 0
$LN24@init:
	mov	eax, DWORD PTR tv578[ebp]
	mov	DWORD PTR $T257823[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257823[ebp]
	mov	DWORD PTR [ecx+1696], edx

; 2155 : 	m_pBuildings = FNEW(CvBuildingXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257828[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 11		; 0000000bH
	cmp	DWORD PTR $T257828[ebp], 0
	je	SHORT $LN25@init
	mov	ecx, DWORD PTR $T257828[ebp]
	call	??0CvBuildingXMLEntries@@QAE@XZ		; CvBuildingXMLEntries::CvBuildingXMLEntries
	mov	DWORD PTR tv586[ebp], eax
	jmp	SHORT $LN26@init
$LN25@init:
	mov	DWORD PTR tv586[ebp], 0
$LN26@init:
	mov	eax, DWORD PTR tv586[ebp]
	mov	DWORD PTR $T257827[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257827[ebp]
	mov	DWORD PTR [ecx+1700], edx

; 2156 : 	m_pUnits = FNEW(CvUnitXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257832[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 12		; 0000000cH
	cmp	DWORD PTR $T257832[ebp], 0
	je	SHORT $LN27@init
	mov	ecx, DWORD PTR $T257832[ebp]
	call	??0CvUnitXMLEntries@@QAE@XZ		; CvUnitXMLEntries::CvUnitXMLEntries
	mov	DWORD PTR tv594[ebp], eax
	jmp	SHORT $LN28@init
$LN27@init:
	mov	DWORD PTR tv594[ebp], 0
$LN28@init:
	mov	eax, DWORD PTR tv594[ebp]
	mov	DWORD PTR $T257831[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257831[ebp]
	mov	DWORD PTR [ecx+1704], edx

; 2157 : 	m_pProjects = FNEW(CvProjectXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257836[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 13		; 0000000dH
	cmp	DWORD PTR $T257836[ebp], 0
	je	SHORT $LN29@init
	mov	ecx, DWORD PTR $T257836[ebp]
	call	??0CvProjectXMLEntries@@QAE@XZ		; CvProjectXMLEntries::CvProjectXMLEntries
	mov	DWORD PTR tv602[ebp], eax
	jmp	SHORT $LN30@init
$LN29@init:
	mov	DWORD PTR tv602[ebp], 0
$LN30@init:
	mov	eax, DWORD PTR tv602[ebp]
	mov	DWORD PTR $T257835[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257835[ebp]
	mov	DWORD PTR [ecx+1708], edx

; 2158 : 	m_pPromotions = FNEW(CvPromotionXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257840[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 14		; 0000000eH
	cmp	DWORD PTR $T257840[ebp], 0
	je	SHORT $LN31@init
	mov	ecx, DWORD PTR $T257840[ebp]
	call	??0CvPromotionXMLEntries@@QAE@XZ	; CvPromotionXMLEntries::CvPromotionXMLEntries
	mov	DWORD PTR tv610[ebp], eax
	jmp	SHORT $LN32@init
$LN31@init:
	mov	DWORD PTR tv610[ebp], 0
$LN32@init:
	mov	eax, DWORD PTR tv610[ebp]
	mov	DWORD PTR $T257839[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257839[ebp]
	mov	DWORD PTR [ecx+1712], edx

; 2159 : 	m_pImprovements = FNEW(CvImprovementXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257844[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 15		; 0000000fH
	cmp	DWORD PTR $T257844[ebp], 0
	je	SHORT $LN33@init
	mov	ecx, DWORD PTR $T257844[ebp]
	call	??0CvImprovementXMLEntries@@QAE@XZ	; CvImprovementXMLEntries::CvImprovementXMLEntries
	mov	DWORD PTR tv618[ebp], eax
	jmp	SHORT $LN34@init
$LN33@init:
	mov	DWORD PTR tv618[ebp], 0
$LN34@init:
	mov	eax, DWORD PTR tv618[ebp]
	mov	DWORD PTR $T257843[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257843[ebp]
	mov	DWORD PTR [ecx+1716], edx

; 2160 : 	m_pEmphases = FNEW(CvEmphasisXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257848[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 16		; 00000010H
	cmp	DWORD PTR $T257848[ebp], 0
	je	SHORT $LN35@init
	mov	ecx, DWORD PTR $T257848[ebp]
	call	??0CvEmphasisXMLEntries@@QAE@XZ		; CvEmphasisXMLEntries::CvEmphasisXMLEntries
	mov	DWORD PTR tv626[ebp], eax
	jmp	SHORT $LN36@init
$LN35@init:
	mov	DWORD PTR tv626[ebp], 0
$LN36@init:
	mov	eax, DWORD PTR tv626[ebp]
	mov	DWORD PTR $T257847[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257847[ebp]
	mov	DWORD PTR [ecx+1720], edx

; 2161 : 	m_pTraits = FNEW(CvTraitXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257852[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 17		; 00000011H
	cmp	DWORD PTR $T257852[ebp], 0
	je	SHORT $LN37@init
	mov	ecx, DWORD PTR $T257852[ebp]
	call	??0CvTraitXMLEntries@@QAE@XZ		; CvTraitXMLEntries::CvTraitXMLEntries
	mov	DWORD PTR tv634[ebp], eax
	jmp	SHORT $LN38@init
$LN37@init:
	mov	DWORD PTR tv634[ebp], 0
$LN38@init:
	mov	eax, DWORD PTR tv634[ebp]
	mov	DWORD PTR $T257851[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257851[ebp]
	mov	DWORD PTR [ecx+1724], edx

; 2162 : 	m_pReligions = FNEW(CvReligionXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257856[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 18		; 00000012H
	cmp	DWORD PTR $T257856[ebp], 0
	je	SHORT $LN39@init
	mov	ecx, DWORD PTR $T257856[ebp]
	call	??0CvReligionXMLEntries@@QAE@XZ		; CvReligionXMLEntries::CvReligionXMLEntries
	mov	DWORD PTR tv642[ebp], eax
	jmp	SHORT $LN40@init
$LN39@init:
	mov	DWORD PTR tv642[ebp], 0
$LN40@init:
	mov	eax, DWORD PTR tv642[ebp]
	mov	DWORD PTR $T257855[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257855[ebp]
	mov	DWORD PTR [ecx+1728], edx

; 2163 : 	m_pBeliefs = FNEW(CvBeliefXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257860[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 19		; 00000013H
	cmp	DWORD PTR $T257860[ebp], 0
	je	SHORT $LN41@init
	mov	ecx, DWORD PTR $T257860[ebp]
	call	??0CvBeliefXMLEntries@@QAE@XZ		; CvBeliefXMLEntries::CvBeliefXMLEntries
	mov	DWORD PTR tv650[ebp], eax
	jmp	SHORT $LN42@init
$LN41@init:
	mov	DWORD PTR tv650[ebp], 0
$LN42@init:
	mov	eax, DWORD PTR tv650[ebp]
	mov	DWORD PTR $T257859[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257859[ebp]
	mov	DWORD PTR [ecx+1732], edx

; 2164 : 	m_pLeagueSpecialSessions = FNEW(CvLeagueSpecialSessionXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257864[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 20		; 00000014H
	cmp	DWORD PTR $T257864[ebp], 0
	je	SHORT $LN43@init
	mov	ecx, DWORD PTR $T257864[ebp]
	call	??0CvLeagueSpecialSessionXMLEntries@@QAE@XZ ; CvLeagueSpecialSessionXMLEntries::CvLeagueSpecialSessionXMLEntries
	mov	DWORD PTR tv658[ebp], eax
	jmp	SHORT $LN44@init
$LN43@init:
	mov	DWORD PTR tv658[ebp], 0
$LN44@init:
	mov	eax, DWORD PTR tv658[ebp]
	mov	DWORD PTR $T257863[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257863[ebp]
	mov	DWORD PTR [ecx+1736], edx

; 2165 : 	m_pLeagueNames = FNEW(CvLeagueNameXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257868[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 21		; 00000015H
	cmp	DWORD PTR $T257868[ebp], 0
	je	SHORT $LN45@init
	mov	ecx, DWORD PTR $T257868[ebp]
	call	??0CvLeagueNameXMLEntries@@QAE@XZ	; CvLeagueNameXMLEntries::CvLeagueNameXMLEntries
	mov	DWORD PTR tv666[ebp], eax
	jmp	SHORT $LN46@init
$LN45@init:
	mov	DWORD PTR tv666[ebp], 0
$LN46@init:
	mov	eax, DWORD PTR tv666[ebp]
	mov	DWORD PTR $T257867[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257867[ebp]
	mov	DWORD PTR [ecx+1740], edx

; 2166 : 	m_pLeagueProjects = FNEW(CvLeagueProjectXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257872[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 22		; 00000016H
	cmp	DWORD PTR $T257872[ebp], 0
	je	SHORT $LN47@init
	mov	ecx, DWORD PTR $T257872[ebp]
	call	??0CvLeagueProjectXMLEntries@@QAE@XZ	; CvLeagueProjectXMLEntries::CvLeagueProjectXMLEntries
	mov	DWORD PTR tv674[ebp], eax
	jmp	SHORT $LN48@init
$LN47@init:
	mov	DWORD PTR tv674[ebp], 0
$LN48@init:
	mov	eax, DWORD PTR tv674[ebp]
	mov	DWORD PTR $T257871[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257871[ebp]
	mov	DWORD PTR [ecx+1744], edx

; 2167 : 	m_pLeagueProjectRewards = FNEW(CvLeagueProjectRewardXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257876[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 23		; 00000017H
	cmp	DWORD PTR $T257876[ebp], 0
	je	SHORT $LN49@init
	mov	ecx, DWORD PTR $T257876[ebp]
	call	??0CvLeagueProjectRewardXMLEntries@@QAE@XZ ; CvLeagueProjectRewardXMLEntries::CvLeagueProjectRewardXMLEntries
	mov	DWORD PTR tv682[ebp], eax
	jmp	SHORT $LN50@init
$LN49@init:
	mov	DWORD PTR tv682[ebp], 0
$LN50@init:
	mov	eax, DWORD PTR tv682[ebp]
	mov	DWORD PTR $T257875[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257875[ebp]
	mov	DWORD PTR [ecx+1748], edx

; 2168 : 	m_pResolutions = FNEW(CvResolutionXMLEntries, c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257880[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 24		; 00000018H
	cmp	DWORD PTR $T257880[ebp], 0
	je	SHORT $LN51@init
	mov	ecx, DWORD PTR $T257880[ebp]
	call	??0CvResolutionXMLEntries@@QAE@XZ	; CvResolutionXMLEntries::CvResolutionXMLEntries
	mov	DWORD PTR tv690[ebp], eax
	jmp	SHORT $LN52@init
$LN51@init:
	mov	DWORD PTR tv690[ebp], 0
$LN52@init:
	mov	eax, DWORD PTR tv690[ebp]
	mov	DWORD PTR $T257879[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257879[ebp]
	mov	DWORD PTR [ecx+1752], edx

; 2169 : 	m_pNotifications = FNEW(CvNotificationXMLEntries, c_eCiv5GameplayDLL, 0);

	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257884[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 25		; 00000019H
	cmp	DWORD PTR $T257884[ebp], 0
	je	SHORT $LN53@init
	mov	ecx, DWORD PTR $T257884[ebp]
	call	??0CvNotificationXMLEntries@@QAE@XZ	; CvNotificationXMLEntries::CvNotificationXMLEntries
	mov	DWORD PTR tv698[ebp], eax
	jmp	SHORT $LN54@init
$LN53@init:
	mov	DWORD PTR tv698[ebp], 0
$LN54@init:
	mov	eax, DWORD PTR tv698[ebp]
	mov	DWORD PTR $T257883[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T257883[ebp]
	mov	DWORD PTR [ecx+1756], edx

; 2170 : 
; 2171 : 	auto_ptr<ICvDLLDatabaseUtility1> pkLoader(getDatabaseLoadUtility());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDatabaseLoadUtility@CvGlobals@@QAEPAVICvDLLDatabaseUtility1@@XZ ; CvGlobals::getDatabaseLoadUtility
	mov	DWORD PTR $T257981[ebp], eax
	mov	eax, DWORD PTR $T257981[ebp]
	mov	DWORD PTR _pkLoader$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 26		; 0000001aH

; 2172 : 
; 2173 : 	Database::Connection* pDB = GetGameDatabase();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+912]
	mov	DWORD PTR _pDB$[ebp], edx

; 2174 : 	pDB->Execute(m_kGlobalDefinesLookup, "SELECT Value from Defines where Name = ? LIMIT 1");

	push	-1
	push	OFFSET ??_C@_0DB@FMALIPEM@SELECT?5Value?5from?5Defines?5where?5@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 916				; 00000394H
	push	eax
	mov	ecx, DWORD PTR _pDB$[ebp]
	call	DWORD PTR __imp_?Execute@Connection@Database@@QBE_NAAVResults@2@PBDH@Z

; 2175 : 
; 2176 : 	pkLoader->PerformDatabasePostProcessing();

	mov	ecx, DWORD PTR _pkLoader$[ebp]
	mov	DWORD PTR tv746[ebp], ecx
	mov	edx, DWORD PTR tv746[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv746[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx

; 2177 : 	pkLoader->CacheGameDatabaseData();

	mov	eax, DWORD PTR _pkLoader$[ebp]
	mov	DWORD PTR tv752[ebp], eax
	mov	ecx, DWORD PTR tv752[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv752[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx

; 2178 : 
; 2179 : 	CvPlayerAI::initStatics();

	call	?initStatics@CvPlayerAI@@SAXXZ		; CvPlayerAI::initStatics

; 2180 : 	CvTeam::initStatics();

	call	?initStatics@CvTeam@@SAXXZ		; CvTeam::initStatics

; 2181 : 
; 2182 : 	memcpy(m_aiPlotDirectionX, aiPlotDirectionX, sizeof(m_aiPlotDirectionX));

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 112				; 00000070H
	mov	eax, DWORD PTR _aiPlotDirectionX$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _aiPlotDirectionX$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _aiPlotDirectionX$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _aiPlotDirectionX$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _aiPlotDirectionX$[ebp+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _aiPlotDirectionX$[ebp+20]
	mov	DWORD PTR [edx+20], ecx

; 2183 : 	memcpy(m_aiPlotDirectionY, aiPlotDirectionY, sizeof(m_aiPlotDirectionY));

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 136				; 00000088H
	mov	eax, DWORD PTR _aiPlotDirectionY$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _aiPlotDirectionY$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _aiPlotDirectionY$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _aiPlotDirectionY$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _aiPlotDirectionY$[ebp+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _aiPlotDirectionY$[ebp+20]
	mov	DWORD PTR [edx+20], ecx

; 2184 : 	memcpy(m_aiCityPlotX, aiCityPlotX, sizeof(m_aiCityPlotX));

	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 160				; 000000a0H
	mov	ecx, 37					; 00000025H
	lea	esi, DWORD PTR _aiCityPlotX$[ebp]
	rep movsd

; 2185 : 	memcpy(m_aiCityPlotY, aiCityPlotY, sizeof(m_aiCityPlotY));

	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 308				; 00000134H
	mov	ecx, 37					; 00000025H
	lea	esi, DWORD PTR _aiCityPlotY$[ebp]
	rep movsd

; 2186 : 	memcpy(m_aiCityPlotPriority, aiCityPlotPriority, sizeof(m_aiCityPlotPriority));

	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 456				; 000001c8H
	mov	ecx, 37					; 00000025H
	lea	esi, DWORD PTR _aiCityPlotPriority$[ebp]
	rep movsd

; 2187 : 	memcpy(m_aeTurnLeftDirection, aeTurnLeftDirection, sizeof(m_aeTurnLeftDirection));

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 800				; 00000320H
	mov	eax, DWORD PTR _aeTurnLeftDirection$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _aeTurnLeftDirection$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _aeTurnLeftDirection$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _aeTurnLeftDirection$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _aeTurnLeftDirection$[ebp+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _aeTurnLeftDirection$[ebp+20]
	mov	DWORD PTR [edx+20], ecx

; 2188 : 	memcpy(m_aeTurnRightDirection, aeTurnRightDirection, sizeof(m_aeTurnRightDirection));

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 824				; 00000338H
	mov	eax, DWORD PTR _aeTurnRightDirection$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _aeTurnRightDirection$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _aeTurnRightDirection$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _aeTurnRightDirection$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _aeTurnRightDirection$[ebp+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _aeTurnRightDirection$[ebp+20]
	mov	DWORD PTR [edx+20], ecx

; 2189 : 	memcpy(m_aaiXYCityPlot, aaiXYCityPlot, sizeof(m_aaiXYCityPlot));

	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 604				; 0000025cH
	mov	ecx, 49					; 00000031H
	lea	esi, DWORD PTR _aaiXYCityPlot$[ebp]
	rep movsd

; 2190 : 
; 2191 : 	setPathFinder(FNEW(CvTwoLayerPathFinder, c_eCiv5GameplayDLL, 0));

	push	632					; 00000278H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257888[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	cmp	DWORD PTR $T257888[ebp], 0
	je	SHORT $LN55@init
	mov	ecx, DWORD PTR $T257888[ebp]
	call	??0CvTwoLayerPathFinder@@QAE@XZ		; CvTwoLayerPathFinder::CvTwoLayerPathFinder
	mov	DWORD PTR tv811[ebp], eax
	jmp	SHORT $LN56@init
$LN55@init:
	mov	DWORD PTR tv811[ebp], 0
$LN56@init:
	mov	edx, DWORD PTR tv811[ebp]
	mov	DWORD PTR $T257887[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	eax, DWORD PTR $T257887[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setPathFinder@CvGlobals@@QAEXPAVCvTwoLayerPathFinder@@@Z ; CvGlobals::setPathFinder

; 2192 : 	setInterfacePathFinder(FNEW(CvTwoLayerPathFinder, c_eCiv5GameplayDLL, 0));

	push	632					; 00000278H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257892[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	cmp	DWORD PTR $T257892[ebp], 0
	je	SHORT $LN57@init
	mov	ecx, DWORD PTR $T257892[ebp]
	call	??0CvTwoLayerPathFinder@@QAE@XZ		; CvTwoLayerPathFinder::CvTwoLayerPathFinder
	mov	DWORD PTR tv820[ebp], eax
	jmp	SHORT $LN58@init
$LN57@init:
	mov	DWORD PTR tv820[ebp], 0
$LN58@init:
	mov	ecx, DWORD PTR tv820[ebp]
	mov	DWORD PTR $T257891[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	edx, DWORD PTR $T257891[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setInterfacePathFinder@CvGlobals@@QAEXPAVCvTwoLayerPathFinder@@@Z ; CvGlobals::setInterfacePathFinder

; 2193 : 	setIgnoreUnitsPathFinder(FNEW(CvIgnoreUnitsPathFinder, c_eCiv5GameplayDLL, 0));

	push	632					; 00000278H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257896[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 29		; 0000001dH
	cmp	DWORD PTR $T257896[ebp], 0
	je	SHORT $LN59@init
	mov	ecx, DWORD PTR $T257896[ebp]
	call	??0CvAStar@@QAE@XZ			; CvAStar::CvAStar
	mov	eax, DWORD PTR $T257896[ebp]
	mov	DWORD PTR tv829[ebp], eax
	jmp	SHORT $LN60@init
$LN59@init:
	mov	DWORD PTR tv829[ebp], 0
$LN60@init:
	mov	ecx, DWORD PTR tv829[ebp]
	mov	DWORD PTR $T257895[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	edx, DWORD PTR $T257895[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setIgnoreUnitsPathFinder@CvGlobals@@QAEXPAVCvIgnoreUnitsPathFinder@@@Z ; CvGlobals::setIgnoreUnitsPathFinder

; 2194 : 	setStepFinder(FNEW(CvStepPathFinder, c_eCiv5GameplayDLL, 0));

	push	628					; 00000274H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257900[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 30		; 0000001eH
	cmp	DWORD PTR $T257900[ebp], 0
	je	SHORT $LN61@init
	mov	ecx, DWORD PTR $T257900[ebp]
	call	??0CvAStar@@QAE@XZ			; CvAStar::CvAStar
	mov	eax, DWORD PTR $T257900[ebp]
	mov	DWORD PTR tv838[ebp], eax
	jmp	SHORT $LN62@init
$LN61@init:
	mov	DWORD PTR tv838[ebp], 0
$LN62@init:
	mov	ecx, DWORD PTR tv838[ebp]
	mov	DWORD PTR $T257899[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	edx, DWORD PTR $T257899[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setStepFinder@CvGlobals@@QAEXPAVCvStepPathFinder@@@Z ; CvGlobals::setStepFinder

; 2195 : 	setRouteFinder(FNEW(CvAStar, c_eCiv5GameplayDLL, 0));

	push	628					; 00000274H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257904[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 31		; 0000001fH
	cmp	DWORD PTR $T257904[ebp], 0
	je	SHORT $LN63@init
	mov	ecx, DWORD PTR $T257904[ebp]
	call	??0CvAStar@@QAE@XZ			; CvAStar::CvAStar
	mov	DWORD PTR tv847[ebp], eax
	jmp	SHORT $LN64@init
$LN63@init:
	mov	DWORD PTR tv847[ebp], 0
$LN64@init:
	mov	eax, DWORD PTR tv847[ebp]
	mov	DWORD PTR $T257903[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	ecx, DWORD PTR $T257903[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRouteFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ; CvGlobals::setRouteFinder

; 2196 : 	SetWaterRouteFinder(FNEW(CvAStar, c_eCiv5GameplayDLL, 0));

	push	628					; 00000274H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257908[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 32		; 00000020H
	cmp	DWORD PTR $T257908[ebp], 0
	je	SHORT $LN65@init
	mov	ecx, DWORD PTR $T257908[ebp]
	call	??0CvAStar@@QAE@XZ			; CvAStar::CvAStar
	mov	DWORD PTR tv856[ebp], eax
	jmp	SHORT $LN66@init
$LN65@init:
	mov	DWORD PTR tv856[ebp], 0
$LN66@init:
	mov	edx, DWORD PTR tv856[ebp]
	mov	DWORD PTR $T257907[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	eax, DWORD PTR $T257907[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWaterRouteFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ; CvGlobals::SetWaterRouteFinder

; 2197 : 	setAreaFinder(FNEW(CvAStar, c_eCiv5GameplayDLL, 0));

	push	628					; 00000274H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257912[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	cmp	DWORD PTR $T257912[ebp], 0
	je	SHORT $LN67@init
	mov	ecx, DWORD PTR $T257912[ebp]
	call	??0CvAStar@@QAE@XZ			; CvAStar::CvAStar
	mov	DWORD PTR tv865[ebp], eax
	jmp	SHORT $LN68@init
$LN67@init:
	mov	DWORD PTR tv865[ebp], 0
$LN68@init:
	mov	ecx, DWORD PTR tv865[ebp]
	mov	DWORD PTR $T257911[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	edx, DWORD PTR $T257911[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setAreaFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ; CvGlobals::setAreaFinder

; 2198 : 	setInfluenceFinder(FNEW(CvAStar, c_eCiv5GameplayDLL, 0));

	push	628					; 00000274H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257916[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 34		; 00000022H
	cmp	DWORD PTR $T257916[ebp], 0
	je	SHORT $LN69@init
	mov	ecx, DWORD PTR $T257916[ebp]
	call	??0CvAStar@@QAE@XZ			; CvAStar::CvAStar
	mov	DWORD PTR tv874[ebp], eax
	jmp	SHORT $LN70@init
$LN69@init:
	mov	DWORD PTR tv874[ebp], 0
$LN70@init:
	mov	eax, DWORD PTR tv874[ebp]
	mov	DWORD PTR $T257915[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	ecx, DWORD PTR $T257915[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setInfluenceFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ; CvGlobals::setInfluenceFinder

; 2199 : 	SetBuildRouteFinder(FNEW(CvAStar, c_eCiv5GameplayDLL, 0));

	push	628					; 00000274H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257920[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 35		; 00000023H
	cmp	DWORD PTR $T257920[ebp], 0
	je	SHORT $LN71@init
	mov	ecx, DWORD PTR $T257920[ebp]
	call	??0CvAStar@@QAE@XZ			; CvAStar::CvAStar
	mov	DWORD PTR tv883[ebp], eax
	jmp	SHORT $LN72@init
$LN71@init:
	mov	DWORD PTR tv883[ebp], 0
$LN72@init:
	mov	edx, DWORD PTR tv883[ebp]
	mov	DWORD PTR $T257919[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	eax, DWORD PTR $T257919[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetBuildRouteFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ; CvGlobals::SetBuildRouteFinder

; 2200 : 	SetInternationalTradeRouteLandFinder(FNEW(CvAStar, c_eCiv5GameplayDLL, 0));

	push	628					; 00000274H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257924[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 36		; 00000024H
	cmp	DWORD PTR $T257924[ebp], 0
	je	SHORT $LN73@init
	mov	ecx, DWORD PTR $T257924[ebp]
	call	??0CvAStar@@QAE@XZ			; CvAStar::CvAStar
	mov	DWORD PTR tv892[ebp], eax
	jmp	SHORT $LN74@init
$LN73@init:
	mov	DWORD PTR tv892[ebp], 0
$LN74@init:
	mov	ecx, DWORD PTR tv892[ebp]
	mov	DWORD PTR $T257923[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	edx, DWORD PTR $T257923[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetInternationalTradeRouteLandFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ; CvGlobals::SetInternationalTradeRouteLandFinder

; 2201 : 	SetInternationalTradeRouteWaterFinder(FNEW(CvAStar, c_eCiv5GameplayDLL, 0));

	push	628					; 00000274H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257928[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 37		; 00000025H
	cmp	DWORD PTR $T257928[ebp], 0
	je	SHORT $LN75@init
	mov	ecx, DWORD PTR $T257928[ebp]
	call	??0CvAStar@@QAE@XZ			; CvAStar::CvAStar
	mov	DWORD PTR tv901[ebp], eax
	jmp	SHORT $LN76@init
$LN75@init:
	mov	DWORD PTR tv901[ebp], 0
$LN76@init:
	mov	eax, DWORD PTR tv901[ebp]
	mov	DWORD PTR $T257927[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	ecx, DWORD PTR $T257927[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetInternationalTradeRouteWaterFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ; CvGlobals::SetInternationalTradeRouteWaterFinder

; 2202 : 	SetTacticalAnalysisMapFinder(FNEW(CvTwoLayerPathFinder, c_eCiv5GameplayDLL, 0));

	push	632					; 00000278H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T257932[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 38		; 00000026H
	cmp	DWORD PTR $T257932[ebp], 0
	je	SHORT $LN77@init
	mov	ecx, DWORD PTR $T257932[ebp]
	call	??0CvTwoLayerPathFinder@@QAE@XZ		; CvTwoLayerPathFinder::CvTwoLayerPathFinder
	mov	DWORD PTR tv910[ebp], eax
	jmp	SHORT $LN78@init
$LN77@init:
	mov	DWORD PTR tv910[ebp], 0
$LN78@init:
	mov	edx, DWORD PTR tv910[ebp]
	mov	DWORD PTR $T257931[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	eax, DWORD PTR $T257931[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTacticalAnalysisMapFinder@CvGlobals@@QAEXPAVCvTwoLayerPathFinder@@@Z ; CvGlobals::SetTacticalAnalysisMapFinder

; 2203 : #ifdef AUI_DANGER_PLOTS_REMADE
; 2204 : 	setDangerPathFinder(FNEW(CvTwoLayerPathFinder, c_eCiv5GameplayDLL, 0));
; 2205 : #endif
; 2206 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pkLoader$[ebp]
	mov	DWORD PTR $T258018[ebp], ecx
	cmp	DWORD PTR $T258018[ebp], 0
	je	SHORT $LN1@init
	mov	edx, DWORD PTR $T258018[ebp]
	mov	DWORD PTR _inst$258021[ebp], edx
	mov	eax, DWORD PTR _inst$258021[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$258021[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN1@init:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?init@CvGlobals@@QAEXXZ$0:
	mov	eax, DWORD PTR $T257784[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$1:
	mov	eax, DWORD PTR $T257788[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$2:
	mov	eax, DWORD PTR $T257792[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$3:
	mov	eax, DWORD PTR $T257796[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$4:
	mov	eax, DWORD PTR $T257800[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$5:
	mov	eax, DWORD PTR $T257804[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$6:
	mov	eax, DWORD PTR $T257808[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$7:
	mov	eax, DWORD PTR $T257812[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$8:
	mov	eax, DWORD PTR $T257816[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$9:
	mov	eax, DWORD PTR $T257820[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$10:
	mov	eax, DWORD PTR $T257824[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$11:
	mov	eax, DWORD PTR $T257828[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$12:
	mov	eax, DWORD PTR $T257832[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$13:
	mov	eax, DWORD PTR $T257836[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$14:
	mov	eax, DWORD PTR $T257840[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$15:
	mov	eax, DWORD PTR $T257844[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$16:
	mov	eax, DWORD PTR $T257848[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$17:
	mov	eax, DWORD PTR $T257852[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$18:
	mov	eax, DWORD PTR $T257856[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$19:
	mov	eax, DWORD PTR $T257860[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$20:
	mov	eax, DWORD PTR $T257864[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$21:
	mov	eax, DWORD PTR $T257868[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$22:
	mov	eax, DWORD PTR $T257872[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$23:
	mov	eax, DWORD PTR $T257876[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$24:
	mov	eax, DWORD PTR $T257880[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$25:
	mov	eax, DWORD PTR $T257884[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$26:
	lea	ecx, DWORD PTR _pkLoader$[ebp]
	jmp	??1?$auto_ptr@VICvDLLDatabaseUtility1@@@std@@QAE@XZ ; std::auto_ptr<ICvDLLDatabaseUtility1>::~auto_ptr<ICvDLLDatabaseUtility1>
__unwindfunclet$?init@CvGlobals@@QAEXXZ$27:
	mov	eax, DWORD PTR $T257888[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$28:
	mov	eax, DWORD PTR $T257892[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$29:
	mov	eax, DWORD PTR $T257896[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$30:
	mov	eax, DWORD PTR $T257900[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$31:
	mov	eax, DWORD PTR $T257904[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$32:
	mov	eax, DWORD PTR $T257908[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$33:
	mov	eax, DWORD PTR $T257912[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$34:
	mov	eax, DWORD PTR $T257916[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$35:
	mov	eax, DWORD PTR $T257920[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$36:
	mov	eax, DWORD PTR $T257924[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$37:
	mov	eax, DWORD PTR $T257928[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?init@CvGlobals@@QAEXXZ$38:
	mov	eax, DWORD PTR $T257932[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?init@CvGlobals@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?init@CvGlobals@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?init@CvGlobals@@QAEXXZ ENDP				; CvGlobals::init
PUBLIC	?uninit@CvGlobals@@QAEXXZ			; CvGlobals::uninit
EXTRN	??1CvAStar@@QAE@XZ:PROC				; CvAStar::~CvAStar
EXTRN	??1CvTwoLayerPathFinder@@QAE@XZ:PROC		; CvTwoLayerPathFinder::~CvTwoLayerPathFinder
EXTRN	__imp_?Release@Results@Database@@QAEXXZ:PROC
EXTRN	??1CvGame@@QAE@XZ:PROC				; CvGame::~CvGame
EXTRN	??1CvTechXMLEntries@@QAE@XZ:PROC		; CvTechXMLEntries::~CvTechXMLEntries
EXTRN	??1CvImprovementXMLEntries@@QAE@XZ:PROC		; CvImprovementXMLEntries::~CvImprovementXMLEntries
EXTRN	??1CvNotificationXMLEntries@@QAE@XZ:PROC	; CvNotificationXMLEntries::~CvNotificationXMLEntries
EXTRN	??1CvResolutionXMLEntries@@QAE@XZ:PROC		; CvResolutionXMLEntries::~CvResolutionXMLEntries
EXTRN	??1CvLeagueProjectRewardXMLEntries@@QAE@XZ:PROC	; CvLeagueProjectRewardXMLEntries::~CvLeagueProjectRewardXMLEntries
EXTRN	??1CvLeagueProjectXMLEntries@@QAE@XZ:PROC	; CvLeagueProjectXMLEntries::~CvLeagueProjectXMLEntries
EXTRN	??1CvLeagueNameXMLEntries@@QAE@XZ:PROC		; CvLeagueNameXMLEntries::~CvLeagueNameXMLEntries
EXTRN	??1CvLeagueSpecialSessionXMLEntries@@QAE@XZ:PROC ; CvLeagueSpecialSessionXMLEntries::~CvLeagueSpecialSessionXMLEntries
EXTRN	??1CvBeliefXMLEntries@@QAE@XZ:PROC		; CvBeliefXMLEntries::~CvBeliefXMLEntries
EXTRN	??1CvReligionXMLEntries@@QAE@XZ:PROC		; CvReligionXMLEntries::~CvReligionXMLEntries
EXTRN	??1CvTraitXMLEntries@@QAE@XZ:PROC		; CvTraitXMLEntries::~CvTraitXMLEntries
EXTRN	??1CvEmphasisXMLEntries@@QAE@XZ:PROC		; CvEmphasisXMLEntries::~CvEmphasisXMLEntries
EXTRN	??1CvPromotionXMLEntries@@QAE@XZ:PROC		; CvPromotionXMLEntries::~CvPromotionXMLEntries
EXTRN	??1CvProjectXMLEntries@@QAE@XZ:PROC		; CvProjectXMLEntries::~CvProjectXMLEntries
EXTRN	??1CvUnitXMLEntries@@QAE@XZ:PROC		; CvUnitXMLEntries::~CvUnitXMLEntries
EXTRN	??1CvBuildingXMLEntries@@QAE@XZ:PROC		; CvBuildingXMLEntries::~CvBuildingXMLEntries
EXTRN	??1CvPolicyXMLEntries@@QAE@XZ:PROC		; CvPolicyXMLEntries::~CvPolicyXMLEntries
EXTRN	??1CvAIGrandStrategyXMLEntries@@QAE@XZ:PROC	; CvAIGrandStrategyXMLEntries::~CvAIGrandStrategyXMLEntries
EXTRN	??1CvMilitaryAIStrategyXMLEntries@@QAE@XZ:PROC	; CvMilitaryAIStrategyXMLEntries::~CvMilitaryAIStrategyXMLEntries
EXTRN	??1CvTacticalMoveXMLEntries@@QAE@XZ:PROC	; CvTacticalMoveXMLEntries::~CvTacticalMoveXMLEntries
EXTRN	??1CvCitySpecializationXMLEntries@@QAE@XZ:PROC	; CvCitySpecializationXMLEntries::~CvCitySpecializationXMLEntries
EXTRN	??1CvEconomicAIStrategyXMLEntries@@QAE@XZ:PROC	; CvEconomicAIStrategyXMLEntries::~CvEconomicAIStrategyXMLEntries
EXTRN	?freeStatics@CvTeam@@SAXXZ:PROC			; CvTeam::freeStatics
EXTRN	?freeStatics@CvPlayerAI@@SAXXZ:PROC		; CvPlayerAI::freeStatics
; Function compile flags: /Odtp
;	COMDAT ?uninit@CvGlobals@@QAEXXZ
_TEXT	SEGMENT
tv522 = -608						; size = 4
tv516 = -604						; size = 4
tv478 = -600						; size = 4
tv472 = -596						; size = 4
tv466 = -592						; size = 4
tv460 = -588						; size = 4
tv454 = -584						; size = 4
tv448 = -580						; size = 4
tv437 = -576						; size = 4
tv426 = -572						; size = 4
tv420 = -568						; size = 4
tv414 = -564						; size = 4
tv158 = -560						; size = 4
tv411 = -556						; size = 4
tv403 = -552						; size = 4
tv399 = -548						; size = 4
tv391 = -544						; size = 4
tv385 = -540						; size = 4
tv347 = -536						; size = 4
tv341 = -532						; size = 4
tv335 = -528						; size = 4
tv329 = -524						; size = 4
tv323 = -520						; size = 4
tv317 = -516						; size = 4
tv311 = -512						; size = 4
tv305 = -508						; size = 4
tv299 = -504						; size = 4
tv293 = -500						; size = 4
tv255 = -496						; size = 4
tv249 = -492						; size = 4
tv243 = -488						; size = 4
tv237 = -484						; size = 4
tv231 = -480						; size = 4
tv225 = -476						; size = 4
tv219 = -472						; size = 4
tv213 = -468						; size = 4
tv207 = -464						; size = 4
tv201 = -460						; size = 4
_this$ = -456						; size = 4
$T258743 = -452						; size = 4
$T258737 = -448						; size = 4
$T258736 = -444						; size = 4
$T258724 = -440						; size = 4
$T258718 = -436						; size = 4
$T258717 = -432						; size = 4
$T258705 = -428						; size = 4
$T258699 = -424						; size = 4
$T258698 = -420						; size = 4
$T258686 = -416						; size = 4
$T258680 = -412						; size = 4
$T258679 = -408						; size = 4
$T258667 = -404						; size = 4
$T258661 = -400						; size = 4
$T258660 = -396						; size = 4
$T258648 = -392						; size = 4
$T258642 = -388						; size = 4
$T258641 = -384						; size = 4
$T258629 = -380						; size = 4
$T258623 = -376						; size = 4
$T258622 = -372						; size = 4
$T258610 = -368						; size = 4
$T258604 = -364						; size = 4
$T258603 = -360						; size = 4
$T258591 = -356						; size = 4
$T258583 = -352						; size = 4
$T258582 = -348						; size = 4
$T258564 = -344						; size = 4
$T258556 = -340						; size = 4
$T258555 = -336						; size = 4
$T258537 = -332						; size = 4
$T258531 = -328						; size = 4
$T258530 = -324						; size = 4
$T258518 = -320						; size = 4
$T258512 = -316						; size = 4
$T258511 = -312						; size = 4
$T258499 = -308						; size = 4
$T258495 = -304						; size = 4
$T258491 = -300						; size = 4
$T258488 = -296						; size = 4
$T258487 = -292						; size = 4
$T258479 = -288						; size = 4
$T258473 = -284						; size = 4
$T258472 = -280						; size = 4
$T258460 = -276						; size = 4
$T258457 = -272						; size = 4
$T258456 = -268						; size = 4
$T258448 = -264						; size = 4
$T258442 = -260						; size = 4
$T258441 = -256						; size = 4
$T258429 = -252						; size = 4
$T258423 = -248						; size = 4
$T258422 = -244						; size = 4
$T258410 = -240						; size = 4
$T258404 = -236						; size = 4
$T258403 = -232						; size = 4
$T258391 = -228						; size = 4
$T258385 = -224						; size = 4
$T258384 = -220						; size = 4
$T258372 = -216						; size = 4
$T258366 = -212						; size = 4
$T258365 = -208						; size = 4
$T258353 = -204						; size = 4
$T258347 = -200						; size = 4
$T258346 = -196						; size = 4
$T258334 = -192						; size = 4
$T258328 = -188						; size = 4
$T258327 = -184						; size = 4
$T258315 = -180						; size = 4
$T258309 = -176						; size = 4
$T258308 = -172						; size = 4
$T258296 = -168						; size = 4
$T258290 = -164						; size = 4
$T258289 = -160						; size = 4
$T258277 = -156						; size = 4
$T258271 = -152						; size = 4
$T258270 = -148						; size = 4
$T258258 = -144						; size = 4
$T258252 = -140						; size = 4
$T258251 = -136						; size = 4
$T258239 = -132						; size = 4
$T258233 = -128						; size = 4
$T258232 = -124						; size = 4
$T258220 = -120						; size = 4
$T258214 = -116						; size = 4
$T258213 = -112						; size = 4
$T258201 = -108						; size = 4
$T258195 = -104						; size = 4
$T258194 = -100						; size = 4
$T258182 = -96						; size = 4
$T258176 = -92						; size = 4
$T258175 = -88						; size = 4
$T258163 = -84						; size = 4
$T258157 = -80						; size = 4
$T258156 = -76						; size = 4
$T258144 = -72						; size = 4
$T258137 = -68						; size = 4
$T258136 = -64						; size = 4
$T258125 = -60						; size = 4
$T258118 = -56						; size = 4
$T258117 = -52						; size = 4
$T258106 = -48						; size = 4
$T258099 = -44						; size = 4
$T258098 = -40						; size = 4
$T258087 = -36						; size = 4
$T258080 = -32						; size = 4
$T258079 = -28						; size = 4
$T258068 = -24						; size = 4
$T258061 = -20						; size = 4
$T258060 = -16						; size = 4
$T258049 = -12						; size = 4
$T258043 = -8						; size = 4
$T258042 = -4						; size = 4
?uninit@CvGlobals@@QAEXXZ PROC				; CvGlobals::uninit, COMDAT
; _this$ = ecx

; 2212 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 608				; 00000260H
	mov	DWORD PTR _this$[ebp], ecx

; 2213 : 	CvPlayerAI::freeStatics();

	call	?freeStatics@CvPlayerAI@@SAXXZ		; CvPlayerAI::freeStatics

; 2214 : 	CvTeam::freeStatics();

	call	?freeStatics@CvTeam@@SAXXZ		; CvTeam::freeStatics

; 2215 : 
; 2216 : 	SAFE_DELETE(m_pEconomicAIStrategies);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1668				; 00000684H
	mov	DWORD PTR $T258049[ebp], eax
	mov	ecx, DWORD PTR $T258049[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T258043[ebp], edx
	mov	eax, DWORD PTR $T258043[ebp]
	mov	DWORD PTR $T258042[ebp], eax
	cmp	DWORD PTR $T258042[ebp], 0
	je	SHORT $LN6@uninit
	mov	ecx, DWORD PTR $T258042[ebp]
	call	??1CvEconomicAIStrategyXMLEntries@@QAE@XZ ; CvEconomicAIStrategyXMLEntries::~CvEconomicAIStrategyXMLEntries
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN9@uninit
	mov	edx, DWORD PTR $T258042[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN9@uninit:
	mov	eax, DWORD PTR $T258042[ebp]
	mov	DWORD PTR tv201[ebp], eax
	jmp	SHORT $LN7@uninit
$LN6@uninit:
	mov	DWORD PTR tv201[ebp], 0
$LN7@uninit:
	mov	ecx, DWORD PTR $T258049[ebp]
	mov	DWORD PTR [ecx], 0

; 2217 : 	SAFE_DELETE(m_pCitySpecializations);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1672				; 00000688H
	mov	DWORD PTR $T258068[ebp], edx
	mov	eax, DWORD PTR $T258068[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T258061[ebp], ecx
	mov	edx, DWORD PTR $T258061[ebp]
	mov	DWORD PTR $T258060[ebp], edx
	cmp	DWORD PTR $T258060[ebp], 0
	je	SHORT $LN13@uninit
	mov	ecx, DWORD PTR $T258060[ebp]
	call	??1CvCitySpecializationXMLEntries@@QAE@XZ ; CvCitySpecializationXMLEntries::~CvCitySpecializationXMLEntries
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN16@uninit
	mov	ecx, DWORD PTR $T258060[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN16@uninit:
	mov	edx, DWORD PTR $T258060[ebp]
	mov	DWORD PTR tv207[ebp], edx
	jmp	SHORT $LN14@uninit
$LN13@uninit:
	mov	DWORD PTR tv207[ebp], 0
$LN14@uninit:
	mov	eax, DWORD PTR $T258068[ebp]
	mov	DWORD PTR [eax], 0

; 2218 : 	SAFE_DELETE(m_pTacticalMoves);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1676				; 0000068cH
	mov	DWORD PTR $T258087[ebp], ecx
	mov	edx, DWORD PTR $T258087[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T258080[ebp], eax
	mov	ecx, DWORD PTR $T258080[ebp]
	mov	DWORD PTR $T258079[ebp], ecx
	cmp	DWORD PTR $T258079[ebp], 0
	je	SHORT $LN20@uninit
	mov	ecx, DWORD PTR $T258079[ebp]
	call	??1CvTacticalMoveXMLEntries@@QAE@XZ	; CvTacticalMoveXMLEntries::~CvTacticalMoveXMLEntries
	mov	edx, 1
	and	edx, 1
	je	SHORT $LN23@uninit
	mov	eax, DWORD PTR $T258079[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN23@uninit:
	mov	ecx, DWORD PTR $T258079[ebp]
	mov	DWORD PTR tv213[ebp], ecx
	jmp	SHORT $LN21@uninit
$LN20@uninit:
	mov	DWORD PTR tv213[ebp], 0
$LN21@uninit:
	mov	edx, DWORD PTR $T258087[ebp]
	mov	DWORD PTR [edx], 0

; 2219 : 	SAFE_DELETE(m_pMilitaryAIStrategies);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1680				; 00000690H
	mov	DWORD PTR $T258106[ebp], eax
	mov	ecx, DWORD PTR $T258106[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T258099[ebp], edx
	mov	eax, DWORD PTR $T258099[ebp]
	mov	DWORD PTR $T258098[ebp], eax
	cmp	DWORD PTR $T258098[ebp], 0
	je	SHORT $LN27@uninit
	mov	ecx, DWORD PTR $T258098[ebp]
	call	??1CvMilitaryAIStrategyXMLEntries@@QAE@XZ ; CvMilitaryAIStrategyXMLEntries::~CvMilitaryAIStrategyXMLEntries
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN30@uninit
	mov	edx, DWORD PTR $T258098[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN30@uninit:
	mov	eax, DWORD PTR $T258098[ebp]
	mov	DWORD PTR tv219[ebp], eax
	jmp	SHORT $LN28@uninit
$LN27@uninit:
	mov	DWORD PTR tv219[ebp], 0
$LN28@uninit:
	mov	ecx, DWORD PTR $T258106[ebp]
	mov	DWORD PTR [ecx], 0

; 2220 : 	SAFE_DELETE(m_pAIGrandStrategies);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1684				; 00000694H
	mov	DWORD PTR $T258125[ebp], edx
	mov	eax, DWORD PTR $T258125[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T258118[ebp], ecx
	mov	edx, DWORD PTR $T258118[ebp]
	mov	DWORD PTR $T258117[ebp], edx
	cmp	DWORD PTR $T258117[ebp], 0
	je	SHORT $LN34@uninit
	mov	ecx, DWORD PTR $T258117[ebp]
	call	??1CvAIGrandStrategyXMLEntries@@QAE@XZ	; CvAIGrandStrategyXMLEntries::~CvAIGrandStrategyXMLEntries
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN37@uninit
	mov	ecx, DWORD PTR $T258117[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN37@uninit:
	mov	edx, DWORD PTR $T258117[ebp]
	mov	DWORD PTR tv225[ebp], edx
	jmp	SHORT $LN35@uninit
$LN34@uninit:
	mov	DWORD PTR tv225[ebp], 0
$LN35@uninit:
	mov	eax, DWORD PTR $T258125[ebp]
	mov	DWORD PTR [eax], 0

; 2221 : 	SAFE_DELETE(m_pPolicies);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1692				; 0000069cH
	mov	DWORD PTR $T258144[ebp], ecx
	mov	edx, DWORD PTR $T258144[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T258137[ebp], eax
	mov	ecx, DWORD PTR $T258137[ebp]
	mov	DWORD PTR $T258136[ebp], ecx
	cmp	DWORD PTR $T258136[ebp], 0
	je	SHORT $LN41@uninit
	mov	ecx, DWORD PTR $T258136[ebp]
	call	??1CvPolicyXMLEntries@@QAE@XZ		; CvPolicyXMLEntries::~CvPolicyXMLEntries
	mov	edx, 1
	and	edx, 1
	je	SHORT $LN44@uninit
	mov	eax, DWORD PTR $T258136[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN44@uninit:
	mov	ecx, DWORD PTR $T258136[ebp]
	mov	DWORD PTR tv231[ebp], ecx
	jmp	SHORT $LN42@uninit
$LN41@uninit:
	mov	DWORD PTR tv231[ebp], 0
$LN42@uninit:
	mov	edx, DWORD PTR $T258144[ebp]
	mov	DWORD PTR [edx], 0

; 2222 : 	SAFE_DELETE(m_pBuildings);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1700				; 000006a4H
	mov	DWORD PTR $T258163[ebp], eax
	mov	ecx, DWORD PTR $T258163[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T258157[ebp], edx
	mov	eax, DWORD PTR $T258157[ebp]
	mov	DWORD PTR $T258156[ebp], eax
	cmp	DWORD PTR $T258156[ebp], 0
	je	SHORT $LN48@uninit
	mov	ecx, DWORD PTR $T258156[ebp]
	call	??1CvBuildingXMLEntries@@QAE@XZ		; CvBuildingXMLEntries::~CvBuildingXMLEntries
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN51@uninit
	mov	edx, DWORD PTR $T258156[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN51@uninit:
	mov	eax, DWORD PTR $T258156[ebp]
	mov	DWORD PTR tv237[ebp], eax
	jmp	SHORT $LN49@uninit
$LN48@uninit:
	mov	DWORD PTR tv237[ebp], 0
$LN49@uninit:
	mov	ecx, DWORD PTR $T258163[ebp]
	mov	DWORD PTR [ecx], 0

; 2223 : 	SAFE_DELETE(m_pUnits);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1704				; 000006a8H
	mov	DWORD PTR $T258182[ebp], edx
	mov	eax, DWORD PTR $T258182[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T258176[ebp], ecx
	mov	edx, DWORD PTR $T258176[ebp]
	mov	DWORD PTR $T258175[ebp], edx
	cmp	DWORD PTR $T258175[ebp], 0
	je	SHORT $LN55@uninit
	mov	ecx, DWORD PTR $T258175[ebp]
	call	??1CvUnitXMLEntries@@QAE@XZ		; CvUnitXMLEntries::~CvUnitXMLEntries
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN58@uninit
	mov	ecx, DWORD PTR $T258175[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN58@uninit:
	mov	edx, DWORD PTR $T258175[ebp]
	mov	DWORD PTR tv243[ebp], edx
	jmp	SHORT $LN56@uninit
$LN55@uninit:
	mov	DWORD PTR tv243[ebp], 0
$LN56@uninit:
	mov	eax, DWORD PTR $T258182[ebp]
	mov	DWORD PTR [eax], 0

; 2224 : 	SAFE_DELETE(m_pProjects);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1708				; 000006acH
	mov	DWORD PTR $T258201[ebp], ecx
	mov	edx, DWORD PTR $T258201[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T258195[ebp], eax
	mov	ecx, DWORD PTR $T258195[ebp]
	mov	DWORD PTR $T258194[ebp], ecx
	cmp	DWORD PTR $T258194[ebp], 0
	je	SHORT $LN62@uninit
	mov	ecx, DWORD PTR $T258194[ebp]
	call	??1CvProjectXMLEntries@@QAE@XZ		; CvProjectXMLEntries::~CvProjectXMLEntries
	mov	edx, 1
	and	edx, 1
	je	SHORT $LN65@uninit
	mov	eax, DWORD PTR $T258194[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN65@uninit:
	mov	ecx, DWORD PTR $T258194[ebp]
	mov	DWORD PTR tv249[ebp], ecx
	jmp	SHORT $LN63@uninit
$LN62@uninit:
	mov	DWORD PTR tv249[ebp], 0
$LN63@uninit:
	mov	edx, DWORD PTR $T258201[ebp]
	mov	DWORD PTR [edx], 0

; 2225 : 	SAFE_DELETE(m_pPromotions);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1712				; 000006b0H
	mov	DWORD PTR $T258220[ebp], eax
	mov	ecx, DWORD PTR $T258220[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T258214[ebp], edx
	mov	eax, DWORD PTR $T258214[ebp]
	mov	DWORD PTR $T258213[ebp], eax
	cmp	DWORD PTR $T258213[ebp], 0
	je	SHORT $LN69@uninit
	mov	ecx, DWORD PTR $T258213[ebp]
	call	??1CvPromotionXMLEntries@@QAE@XZ	; CvPromotionXMLEntries::~CvPromotionXMLEntries
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN72@uninit
	mov	edx, DWORD PTR $T258213[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN72@uninit:
	mov	eax, DWORD PTR $T258213[ebp]
	mov	DWORD PTR tv255[ebp], eax
	jmp	SHORT $LN70@uninit
$LN69@uninit:
	mov	DWORD PTR tv255[ebp], 0
$LN70@uninit:
	mov	ecx, DWORD PTR $T258220[ebp]
	mov	DWORD PTR [ecx], 0

; 2226 : 	SAFE_DELETE(m_pEmphases);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1720				; 000006b8H
	mov	DWORD PTR $T258239[ebp], edx
	mov	eax, DWORD PTR $T258239[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T258233[ebp], ecx
	mov	edx, DWORD PTR $T258233[ebp]
	mov	DWORD PTR $T258232[ebp], edx
	cmp	DWORD PTR $T258232[ebp], 0
	je	SHORT $LN76@uninit
	mov	ecx, DWORD PTR $T258232[ebp]
	call	??1CvEmphasisXMLEntries@@QAE@XZ		; CvEmphasisXMLEntries::~CvEmphasisXMLEntries
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN79@uninit
	mov	ecx, DWORD PTR $T258232[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN79@uninit:
	mov	edx, DWORD PTR $T258232[ebp]
	mov	DWORD PTR tv293[ebp], edx
	jmp	SHORT $LN77@uninit
$LN76@uninit:
	mov	DWORD PTR tv293[ebp], 0
$LN77@uninit:
	mov	eax, DWORD PTR $T258239[ebp]
	mov	DWORD PTR [eax], 0

; 2227 : 	SAFE_DELETE(m_pTraits);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1724				; 000006bcH
	mov	DWORD PTR $T258258[ebp], ecx
	mov	edx, DWORD PTR $T258258[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T258252[ebp], eax
	mov	ecx, DWORD PTR $T258252[ebp]
	mov	DWORD PTR $T258251[ebp], ecx
	cmp	DWORD PTR $T258251[ebp], 0
	je	SHORT $LN83@uninit
	mov	ecx, DWORD PTR $T258251[ebp]
	call	??1CvTraitXMLEntries@@QAE@XZ		; CvTraitXMLEntries::~CvTraitXMLEntries
	mov	edx, 1
	and	edx, 1
	je	SHORT $LN86@uninit
	mov	eax, DWORD PTR $T258251[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN86@uninit:
	mov	ecx, DWORD PTR $T258251[ebp]
	mov	DWORD PTR tv299[ebp], ecx
	jmp	SHORT $LN84@uninit
$LN83@uninit:
	mov	DWORD PTR tv299[ebp], 0
$LN84@uninit:
	mov	edx, DWORD PTR $T258258[ebp]
	mov	DWORD PTR [edx], 0

; 2228 : 	SAFE_DELETE(m_pReligions);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1728				; 000006c0H
	mov	DWORD PTR $T258277[ebp], eax
	mov	ecx, DWORD PTR $T258277[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T258271[ebp], edx
	mov	eax, DWORD PTR $T258271[ebp]
	mov	DWORD PTR $T258270[ebp], eax
	cmp	DWORD PTR $T258270[ebp], 0
	je	SHORT $LN90@uninit
	mov	ecx, DWORD PTR $T258270[ebp]
	call	??1CvReligionXMLEntries@@QAE@XZ		; CvReligionXMLEntries::~CvReligionXMLEntries
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN93@uninit
	mov	edx, DWORD PTR $T258270[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN93@uninit:
	mov	eax, DWORD PTR $T258270[ebp]
	mov	DWORD PTR tv305[ebp], eax
	jmp	SHORT $LN91@uninit
$LN90@uninit:
	mov	DWORD PTR tv305[ebp], 0
$LN91@uninit:
	mov	ecx, DWORD PTR $T258277[ebp]
	mov	DWORD PTR [ecx], 0

; 2229 : 	SAFE_DELETE(m_pBeliefs);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1732				; 000006c4H
	mov	DWORD PTR $T258296[ebp], edx
	mov	eax, DWORD PTR $T258296[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T258290[ebp], ecx
	mov	edx, DWORD PTR $T258290[ebp]
	mov	DWORD PTR $T258289[ebp], edx
	cmp	DWORD PTR $T258289[ebp], 0
	je	SHORT $LN97@uninit
	mov	ecx, DWORD PTR $T258289[ebp]
	call	??1CvBeliefXMLEntries@@QAE@XZ		; CvBeliefXMLEntries::~CvBeliefXMLEntries
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN100@uninit
	mov	ecx, DWORD PTR $T258289[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN100@uninit:
	mov	edx, DWORD PTR $T258289[ebp]
	mov	DWORD PTR tv311[ebp], edx
	jmp	SHORT $LN98@uninit
$LN97@uninit:
	mov	DWORD PTR tv311[ebp], 0
$LN98@uninit:
	mov	eax, DWORD PTR $T258296[ebp]
	mov	DWORD PTR [eax], 0

; 2230 : 	SAFE_DELETE(m_pLeagueSpecialSessions);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1736				; 000006c8H
	mov	DWORD PTR $T258315[ebp], ecx
	mov	edx, DWORD PTR $T258315[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T258309[ebp], eax
	mov	ecx, DWORD PTR $T258309[ebp]
	mov	DWORD PTR $T258308[ebp], ecx
	cmp	DWORD PTR $T258308[ebp], 0
	je	SHORT $LN104@uninit
	mov	ecx, DWORD PTR $T258308[ebp]
	call	??1CvLeagueSpecialSessionXMLEntries@@QAE@XZ ; CvLeagueSpecialSessionXMLEntries::~CvLeagueSpecialSessionXMLEntries
	mov	edx, 1
	and	edx, 1
	je	SHORT $LN107@uninit
	mov	eax, DWORD PTR $T258308[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN107@uninit:
	mov	ecx, DWORD PTR $T258308[ebp]
	mov	DWORD PTR tv317[ebp], ecx
	jmp	SHORT $LN105@uninit
$LN104@uninit:
	mov	DWORD PTR tv317[ebp], 0
$LN105@uninit:
	mov	edx, DWORD PTR $T258315[ebp]
	mov	DWORD PTR [edx], 0

; 2231 : 	SAFE_DELETE(m_pLeagueNames);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1740				; 000006ccH
	mov	DWORD PTR $T258334[ebp], eax
	mov	ecx, DWORD PTR $T258334[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T258328[ebp], edx
	mov	eax, DWORD PTR $T258328[ebp]
	mov	DWORD PTR $T258327[ebp], eax
	cmp	DWORD PTR $T258327[ebp], 0
	je	SHORT $LN111@uninit
	mov	ecx, DWORD PTR $T258327[ebp]
	call	??1CvLeagueNameXMLEntries@@QAE@XZ	; CvLeagueNameXMLEntries::~CvLeagueNameXMLEntries
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN114@uninit
	mov	edx, DWORD PTR $T258327[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN114@uninit:
	mov	eax, DWORD PTR $T258327[ebp]
	mov	DWORD PTR tv323[ebp], eax
	jmp	SHORT $LN112@uninit
$LN111@uninit:
	mov	DWORD PTR tv323[ebp], 0
$LN112@uninit:
	mov	ecx, DWORD PTR $T258334[ebp]
	mov	DWORD PTR [ecx], 0

; 2232 : 	SAFE_DELETE(m_pLeagueProjects);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1744				; 000006d0H
	mov	DWORD PTR $T258353[ebp], edx
	mov	eax, DWORD PTR $T258353[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T258347[ebp], ecx
	mov	edx, DWORD PTR $T258347[ebp]
	mov	DWORD PTR $T258346[ebp], edx
	cmp	DWORD PTR $T258346[ebp], 0
	je	SHORT $LN118@uninit
	mov	ecx, DWORD PTR $T258346[ebp]
	call	??1CvLeagueProjectXMLEntries@@QAE@XZ	; CvLeagueProjectXMLEntries::~CvLeagueProjectXMLEntries
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN121@uninit
	mov	ecx, DWORD PTR $T258346[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN121@uninit:
	mov	edx, DWORD PTR $T258346[ebp]
	mov	DWORD PTR tv329[ebp], edx
	jmp	SHORT $LN119@uninit
$LN118@uninit:
	mov	DWORD PTR tv329[ebp], 0
$LN119@uninit:
	mov	eax, DWORD PTR $T258353[ebp]
	mov	DWORD PTR [eax], 0

; 2233 : 	SAFE_DELETE(m_pLeagueProjectRewards);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1748				; 000006d4H
	mov	DWORD PTR $T258372[ebp], ecx
	mov	edx, DWORD PTR $T258372[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T258366[ebp], eax
	mov	ecx, DWORD PTR $T258366[ebp]
	mov	DWORD PTR $T258365[ebp], ecx
	cmp	DWORD PTR $T258365[ebp], 0
	je	SHORT $LN125@uninit
	mov	ecx, DWORD PTR $T258365[ebp]
	call	??1CvLeagueProjectRewardXMLEntries@@QAE@XZ ; CvLeagueProjectRewardXMLEntries::~CvLeagueProjectRewardXMLEntries
	mov	edx, 1
	and	edx, 1
	je	SHORT $LN128@uninit
	mov	eax, DWORD PTR $T258365[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN128@uninit:
	mov	ecx, DWORD PTR $T258365[ebp]
	mov	DWORD PTR tv335[ebp], ecx
	jmp	SHORT $LN126@uninit
$LN125@uninit:
	mov	DWORD PTR tv335[ebp], 0
$LN126@uninit:
	mov	edx, DWORD PTR $T258372[ebp]
	mov	DWORD PTR [edx], 0

; 2234 : 	SAFE_DELETE(m_pResolutions);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1752				; 000006d8H
	mov	DWORD PTR $T258391[ebp], eax
	mov	ecx, DWORD PTR $T258391[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T258385[ebp], edx
	mov	eax, DWORD PTR $T258385[ebp]
	mov	DWORD PTR $T258384[ebp], eax
	cmp	DWORD PTR $T258384[ebp], 0
	je	SHORT $LN132@uninit
	mov	ecx, DWORD PTR $T258384[ebp]
	call	??1CvResolutionXMLEntries@@QAE@XZ	; CvResolutionXMLEntries::~CvResolutionXMLEntries
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN135@uninit
	mov	edx, DWORD PTR $T258384[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN135@uninit:
	mov	eax, DWORD PTR $T258384[ebp]
	mov	DWORD PTR tv341[ebp], eax
	jmp	SHORT $LN133@uninit
$LN132@uninit:
	mov	DWORD PTR tv341[ebp], 0
$LN133@uninit:
	mov	ecx, DWORD PTR $T258391[ebp]
	mov	DWORD PTR [ecx], 0

; 2235 : 	SAFE_DELETE(m_pNotifications);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1756				; 000006dcH
	mov	DWORD PTR $T258410[ebp], edx
	mov	eax, DWORD PTR $T258410[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T258404[ebp], ecx
	mov	edx, DWORD PTR $T258404[ebp]
	mov	DWORD PTR $T258403[ebp], edx
	cmp	DWORD PTR $T258403[ebp], 0
	je	SHORT $LN139@uninit
	mov	ecx, DWORD PTR $T258403[ebp]
	call	??1CvNotificationXMLEntries@@QAE@XZ	; CvNotificationXMLEntries::~CvNotificationXMLEntries
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN142@uninit
	mov	ecx, DWORD PTR $T258403[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN142@uninit:
	mov	edx, DWORD PTR $T258403[ebp]
	mov	DWORD PTR tv347[ebp], edx
	jmp	SHORT $LN140@uninit
$LN139@uninit:
	mov	DWORD PTR tv347[ebp], 0
$LN140@uninit:
	mov	eax, DWORD PTR $T258410[ebp]
	mov	DWORD PTR [eax], 0

; 2236 : 
; 2237 : 	SAFE_DELETE(m_pImprovements); // player uses the improvement count in deallocating.

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1716				; 000006b4H
	mov	DWORD PTR $T258429[ebp], ecx
	mov	edx, DWORD PTR $T258429[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T258423[ebp], eax
	mov	ecx, DWORD PTR $T258423[ebp]
	mov	DWORD PTR $T258422[ebp], ecx
	cmp	DWORD PTR $T258422[ebp], 0
	je	SHORT $LN146@uninit
	mov	ecx, DWORD PTR $T258422[ebp]
	call	??1CvImprovementXMLEntries@@QAE@XZ	; CvImprovementXMLEntries::~CvImprovementXMLEntries
	mov	edx, 1
	and	edx, 1
	je	SHORT $LN149@uninit
	mov	eax, DWORD PTR $T258422[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN149@uninit:
	mov	ecx, DWORD PTR $T258422[ebp]
	mov	DWORD PTR tv385[ebp], ecx
	jmp	SHORT $LN147@uninit
$LN146@uninit:
	mov	DWORD PTR tv385[ebp], 0
$LN147@uninit:
	mov	edx, DWORD PTR $T258429[ebp]
	mov	DWORD PTR [edx], 0

; 2238 : 	SAFE_DELETE(m_pTechs);        // improvements uses tech to deallocate. arrghh!

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1696				; 000006a0H
	mov	DWORD PTR $T258448[ebp], eax
	mov	ecx, DWORD PTR $T258448[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T258442[ebp], edx
	mov	eax, DWORD PTR $T258442[ebp]
	mov	DWORD PTR $T258441[ebp], eax
	cmp	DWORD PTR $T258441[ebp], 0
	je	SHORT $LN153@uninit
	mov	ecx, DWORD PTR $T258441[ebp]
	call	??1CvTechXMLEntries@@QAE@XZ		; CvTechXMLEntries::~CvTechXMLEntries
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN156@uninit
	mov	edx, DWORD PTR $T258441[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN156@uninit:
	mov	eax, DWORD PTR $T258441[ebp]
	mov	DWORD PTR tv391[ebp], eax
	jmp	SHORT $LN154@uninit
$LN153@uninit:
	mov	DWORD PTR tv391[ebp], 0
$LN154@uninit:
	mov	ecx, DWORD PTR $T258448[ebp]
	mov	DWORD PTR [ecx], 0

; 2239 : 
; 2240 : 	SAFE_DELETE(m_map);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR $T258460[ebp], edx
	mov	eax, DWORD PTR $T258460[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T258457[ebp], ecx
	mov	edx, DWORD PTR $T258457[ebp]
	mov	DWORD PTR $T258456[ebp], edx
	cmp	DWORD PTR $T258456[ebp], 0
	je	SHORT $LN160@uninit
	push	1
	mov	eax, DWORD PTR $T258456[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T258456[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv399[ebp], eax
	jmp	SHORT $LN161@uninit
$LN160@uninit:
	mov	DWORD PTR tv399[ebp], 0
$LN161@uninit:
	mov	ecx, DWORD PTR $T258460[ebp]
	mov	DWORD PTR [ecx], 0

; 2241 : #ifdef AUI_WARNING_FIXES
; 2242 : 	m_game->~CvGame();
; 2243 : 	_aligned_free(m_game);
; 2244 : 	m_game = NULL;
; 2245 : 
; 2246 : 	m_asyncRand->~CvRandom();
; 2247 : 	_aligned_free(m_asyncRand);
; 2248 : 	m_asyncRand = NULL;
; 2249 : #else
; 2250 : 	SAFE_DELETE(m_game);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR $T258479[ebp], edx
	mov	eax, DWORD PTR $T258479[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T258473[ebp], ecx
	mov	edx, DWORD PTR $T258473[ebp]
	mov	DWORD PTR $T258472[ebp], edx
	cmp	DWORD PTR $T258472[ebp], 0
	je	SHORT $LN164@uninit
	mov	ecx, DWORD PTR $T258472[ebp]
	call	??1CvGame@@QAE@XZ			; CvGame::~CvGame
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN167@uninit
	mov	ecx, DWORD PTR $T258472[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN167@uninit:
	mov	edx, DWORD PTR $T258472[ebp]
	mov	DWORD PTR tv403[ebp], edx
	jmp	SHORT $LN165@uninit
$LN164@uninit:
	mov	DWORD PTR tv403[ebp], 0
$LN165@uninit:
	mov	eax, DWORD PTR $T258479[ebp]
	mov	DWORD PTR [eax], 0

; 2251 : 
; 2252 : 	SAFE_DELETE(m_asyncRand);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR $T258491[ebp], ecx
	mov	edx, DWORD PTR $T258491[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T258488[ebp], eax
	mov	ecx, DWORD PTR $T258488[ebp]
	mov	DWORD PTR $T258487[ebp], ecx
	cmp	DWORD PTR $T258487[ebp], 0
	je	SHORT $LN171@uninit
	push	1
	mov	edx, DWORD PTR $T258487[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T258487[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv411[ebp], eax
	jmp	SHORT $LN172@uninit
$LN171@uninit:
	mov	DWORD PTR tv411[ebp], 0
$LN172@uninit:
	mov	eax, DWORD PTR $T258491[ebp]
	mov	DWORD PTR [eax], 0

; 2253 : #endif
; 2254 : 
; 2255 : 	m_kGlobalDefinesLookup.Release();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_?Release@Results@Database@@QAEXXZ

; 2256 : 
; 2257 : 	if(gDLL)

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR $T258495[ebp], ecx
	cmp	DWORD PTR $T258495[ebp], 0
	je	SHORT $LN1@uninit

; 2258 : 		gDLL->UninitGlobals();	// free globals allocated outside the dll

	mov	edx, DWORD PTR $T258499[ebp]
	mov	DWORD PTR tv158[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv158[ebp], eax
	mov	ecx, DWORD PTR tv158[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv158[ebp]
	mov	eax, DWORD PTR [edx+492]
	call	eax
$LN1@uninit:

; 2259 : 
; 2260 : 	SAFE_DELETE(m_pathFinder);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	mov	DWORD PTR $T258518[ebp], ecx
	mov	edx, DWORD PTR $T258518[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T258512[ebp], eax
	mov	ecx, DWORD PTR $T258512[ebp]
	mov	DWORD PTR $T258511[ebp], ecx
	cmp	DWORD PTR $T258511[ebp], 0
	je	SHORT $LN179@uninit
	mov	ecx, DWORD PTR $T258511[ebp]
	call	??1CvTwoLayerPathFinder@@QAE@XZ		; CvTwoLayerPathFinder::~CvTwoLayerPathFinder
	mov	edx, 1
	and	edx, 1
	je	SHORT $LN182@uninit
	mov	eax, DWORD PTR $T258511[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN182@uninit:
	mov	ecx, DWORD PTR $T258511[ebp]
	mov	DWORD PTR tv414[ebp], ecx
	jmp	SHORT $LN180@uninit
$LN179@uninit:
	mov	DWORD PTR tv414[ebp], 0
$LN180@uninit:
	mov	edx, DWORD PTR $T258518[ebp]
	mov	DWORD PTR [edx], 0

; 2261 : 	SAFE_DELETE(m_interfacePathFinder);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 60					; 0000003cH
	mov	DWORD PTR $T258537[ebp], eax
	mov	ecx, DWORD PTR $T258537[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T258531[ebp], edx
	mov	eax, DWORD PTR $T258531[ebp]
	mov	DWORD PTR $T258530[ebp], eax
	cmp	DWORD PTR $T258530[ebp], 0
	je	SHORT $LN186@uninit
	mov	ecx, DWORD PTR $T258530[ebp]
	call	??1CvTwoLayerPathFinder@@QAE@XZ		; CvTwoLayerPathFinder::~CvTwoLayerPathFinder
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN189@uninit
	mov	edx, DWORD PTR $T258530[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN189@uninit:
	mov	eax, DWORD PTR $T258530[ebp]
	mov	DWORD PTR tv420[ebp], eax
	jmp	SHORT $LN187@uninit
$LN186@uninit:
	mov	DWORD PTR tv420[ebp], 0
$LN187@uninit:
	mov	ecx, DWORD PTR $T258537[ebp]
	mov	DWORD PTR [ecx], 0

; 2262 : 	SAFE_DELETE(m_ignoreUnitsPathFinder);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR $T258564[ebp], edx
	mov	eax, DWORD PTR $T258564[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T258556[ebp], ecx
	mov	edx, DWORD PTR $T258556[ebp]
	mov	DWORD PTR $T258555[ebp], edx
	cmp	DWORD PTR $T258555[ebp], 0
	je	SHORT $LN193@uninit
	mov	ecx, DWORD PTR $T258555[ebp]
	call	??1CvAStar@@QAE@XZ			; CvAStar::~CvAStar
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN196@uninit
	mov	ecx, DWORD PTR $T258555[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN196@uninit:
	mov	edx, DWORD PTR $T258555[ebp]
	mov	DWORD PTR tv426[ebp], edx
	jmp	SHORT $LN194@uninit
$LN193@uninit:
	mov	DWORD PTR tv426[ebp], 0
$LN194@uninit:
	mov	eax, DWORD PTR $T258564[ebp]
	mov	DWORD PTR [eax], 0

; 2263 : 	SAFE_DELETE(m_stepFinder);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	mov	DWORD PTR $T258591[ebp], ecx
	mov	edx, DWORD PTR $T258591[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T258583[ebp], eax
	mov	ecx, DWORD PTR $T258583[ebp]
	mov	DWORD PTR $T258582[ebp], ecx
	cmp	DWORD PTR $T258582[ebp], 0
	je	SHORT $LN203@uninit
	mov	ecx, DWORD PTR $T258582[ebp]
	call	??1CvAStar@@QAE@XZ			; CvAStar::~CvAStar
	mov	edx, 1
	and	edx, 1
	je	SHORT $LN206@uninit
	mov	eax, DWORD PTR $T258582[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN206@uninit:
	mov	ecx, DWORD PTR $T258582[ebp]
	mov	DWORD PTR tv437[ebp], ecx
	jmp	SHORT $LN204@uninit
$LN203@uninit:
	mov	DWORD PTR tv437[ebp], 0
$LN204@uninit:
	mov	edx, DWORD PTR $T258591[ebp]
	mov	DWORD PTR [edx], 0

; 2264 : 	SAFE_DELETE(m_routeFinder);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 72					; 00000048H
	mov	DWORD PTR $T258610[ebp], eax
	mov	ecx, DWORD PTR $T258610[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T258604[ebp], edx
	mov	eax, DWORD PTR $T258604[ebp]
	mov	DWORD PTR $T258603[ebp], eax
	cmp	DWORD PTR $T258603[ebp], 0
	je	SHORT $LN213@uninit
	mov	ecx, DWORD PTR $T258603[ebp]
	call	??1CvAStar@@QAE@XZ			; CvAStar::~CvAStar
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN216@uninit
	mov	edx, DWORD PTR $T258603[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN216@uninit:
	mov	eax, DWORD PTR $T258603[ebp]
	mov	DWORD PTR tv448[ebp], eax
	jmp	SHORT $LN214@uninit
$LN213@uninit:
	mov	DWORD PTR tv448[ebp], 0
$LN214@uninit:
	mov	ecx, DWORD PTR $T258610[ebp]
	mov	DWORD PTR [ecx], 0

; 2265 : 	SAFE_DELETE(m_waterRouteFinder);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 76					; 0000004cH
	mov	DWORD PTR $T258629[ebp], edx
	mov	eax, DWORD PTR $T258629[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T258623[ebp], ecx
	mov	edx, DWORD PTR $T258623[ebp]
	mov	DWORD PTR $T258622[ebp], edx
	cmp	DWORD PTR $T258622[ebp], 0
	je	SHORT $LN220@uninit
	mov	ecx, DWORD PTR $T258622[ebp]
	call	??1CvAStar@@QAE@XZ			; CvAStar::~CvAStar
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN223@uninit
	mov	ecx, DWORD PTR $T258622[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN223@uninit:
	mov	edx, DWORD PTR $T258622[ebp]
	mov	DWORD PTR tv454[ebp], edx
	jmp	SHORT $LN221@uninit
$LN220@uninit:
	mov	DWORD PTR tv454[ebp], 0
$LN221@uninit:
	mov	eax, DWORD PTR $T258629[ebp]
	mov	DWORD PTR [eax], 0

; 2266 : 	SAFE_DELETE(m_areaFinder);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	mov	DWORD PTR $T258648[ebp], ecx
	mov	edx, DWORD PTR $T258648[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T258642[ebp], eax
	mov	ecx, DWORD PTR $T258642[ebp]
	mov	DWORD PTR $T258641[ebp], ecx
	cmp	DWORD PTR $T258641[ebp], 0
	je	SHORT $LN227@uninit
	mov	ecx, DWORD PTR $T258641[ebp]
	call	??1CvAStar@@QAE@XZ			; CvAStar::~CvAStar
	mov	edx, 1
	and	edx, 1
	je	SHORT $LN230@uninit
	mov	eax, DWORD PTR $T258641[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN230@uninit:
	mov	ecx, DWORD PTR $T258641[ebp]
	mov	DWORD PTR tv460[ebp], ecx
	jmp	SHORT $LN228@uninit
$LN227@uninit:
	mov	DWORD PTR tv460[ebp], 0
$LN228@uninit:
	mov	edx, DWORD PTR $T258648[ebp]
	mov	DWORD PTR [edx], 0

; 2267 : 	SAFE_DELETE(m_influenceFinder);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 88					; 00000058H
	mov	DWORD PTR $T258667[ebp], eax
	mov	ecx, DWORD PTR $T258667[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T258661[ebp], edx
	mov	eax, DWORD PTR $T258661[ebp]
	mov	DWORD PTR $T258660[ebp], eax
	cmp	DWORD PTR $T258660[ebp], 0
	je	SHORT $LN234@uninit
	mov	ecx, DWORD PTR $T258660[ebp]
	call	??1CvAStar@@QAE@XZ			; CvAStar::~CvAStar
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN237@uninit
	mov	edx, DWORD PTR $T258660[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN237@uninit:
	mov	eax, DWORD PTR $T258660[ebp]
	mov	DWORD PTR tv466[ebp], eax
	jmp	SHORT $LN235@uninit
$LN234@uninit:
	mov	DWORD PTR tv466[ebp], 0
$LN235@uninit:
	mov	ecx, DWORD PTR $T258667[ebp]
	mov	DWORD PTR [ecx], 0

; 2268 : 	SAFE_DELETE(m_buildRouteFinder);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR $T258686[ebp], edx
	mov	eax, DWORD PTR $T258686[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T258680[ebp], ecx
	mov	edx, DWORD PTR $T258680[ebp]
	mov	DWORD PTR $T258679[ebp], edx
	cmp	DWORD PTR $T258679[ebp], 0
	je	SHORT $LN241@uninit
	mov	ecx, DWORD PTR $T258679[ebp]
	call	??1CvAStar@@QAE@XZ			; CvAStar::~CvAStar
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN244@uninit
	mov	ecx, DWORD PTR $T258679[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN244@uninit:
	mov	edx, DWORD PTR $T258679[ebp]
	mov	DWORD PTR tv472[ebp], edx
	jmp	SHORT $LN242@uninit
$LN241@uninit:
	mov	DWORD PTR tv472[ebp], 0
$LN242@uninit:
	mov	eax, DWORD PTR $T258686[ebp]
	mov	DWORD PTR [eax], 0

; 2269 : 	SAFE_DELETE(m_internationalTradeRouteLandFinder);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	mov	DWORD PTR $T258705[ebp], ecx
	mov	edx, DWORD PTR $T258705[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T258699[ebp], eax
	mov	ecx, DWORD PTR $T258699[ebp]
	mov	DWORD PTR $T258698[ebp], ecx
	cmp	DWORD PTR $T258698[ebp], 0
	je	SHORT $LN248@uninit
	mov	ecx, DWORD PTR $T258698[ebp]
	call	??1CvAStar@@QAE@XZ			; CvAStar::~CvAStar
	mov	edx, 1
	and	edx, 1
	je	SHORT $LN251@uninit
	mov	eax, DWORD PTR $T258698[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN251@uninit:
	mov	ecx, DWORD PTR $T258698[ebp]
	mov	DWORD PTR tv478[ebp], ecx
	jmp	SHORT $LN249@uninit
$LN248@uninit:
	mov	DWORD PTR tv478[ebp], 0
$LN249@uninit:
	mov	edx, DWORD PTR $T258705[ebp]
	mov	DWORD PTR [edx], 0

; 2270 : 	SAFE_DELETE(m_internationalTradeRouteWaterFinder);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR $T258724[ebp], eax
	mov	ecx, DWORD PTR $T258724[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T258718[ebp], edx
	mov	eax, DWORD PTR $T258718[ebp]
	mov	DWORD PTR $T258717[ebp], eax
	cmp	DWORD PTR $T258717[ebp], 0
	je	SHORT $LN255@uninit
	mov	ecx, DWORD PTR $T258717[ebp]
	call	??1CvAStar@@QAE@XZ			; CvAStar::~CvAStar
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN258@uninit
	mov	edx, DWORD PTR $T258717[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN258@uninit:
	mov	eax, DWORD PTR $T258717[ebp]
	mov	DWORD PTR tv516[ebp], eax
	jmp	SHORT $LN256@uninit
$LN255@uninit:
	mov	DWORD PTR tv516[ebp], 0
$LN256@uninit:
	mov	ecx, DWORD PTR $T258724[ebp]
	mov	DWORD PTR [ecx], 0

; 2271 : 	SAFE_DELETE(m_tacticalAnalysisMapFinder);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 104				; 00000068H
	mov	DWORD PTR $T258743[ebp], edx
	mov	eax, DWORD PTR $T258743[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T258737[ebp], ecx
	mov	edx, DWORD PTR $T258737[ebp]
	mov	DWORD PTR $T258736[ebp], edx
	cmp	DWORD PTR $T258736[ebp], 0
	je	SHORT $LN262@uninit
	mov	ecx, DWORD PTR $T258736[ebp]
	call	??1CvTwoLayerPathFinder@@QAE@XZ		; CvTwoLayerPathFinder::~CvTwoLayerPathFinder
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN265@uninit
	mov	ecx, DWORD PTR $T258736[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN265@uninit:
	mov	edx, DWORD PTR $T258736[ebp]
	mov	DWORD PTR tv522[ebp], edx
	jmp	SHORT $LN263@uninit
$LN262@uninit:
	mov	DWORD PTR tv522[ebp], 0
$LN263@uninit:
	mov	eax, DWORD PTR $T258743[ebp]
	mov	DWORD PTR [eax], 0

; 2272 : 
; 2273 : 	// already deleted outside of the dll, set to null for safety
; 2274 : 	m_pathFinder=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], 0

; 2275 : 	m_interfacePathFinder=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], 0

; 2276 : 	m_ignoreUnitsPathFinder=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0

; 2277 : 	m_stepFinder=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], 0

; 2278 : 	m_routeFinder=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], 0

; 2279 : 	m_waterRouteFinder=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], 0

; 2280 : 	m_areaFinder=NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], 0

; 2281 : 	m_influenceFinder=NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], 0

; 2282 : 	m_buildRouteFinder = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], 0

; 2283 : 	m_internationalTradeRouteLandFinder = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+96], 0

; 2284 : 	m_internationalTradeRouteWaterFinder = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+100], 0

; 2285 : 	m_tacticalAnalysisMapFinder = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 0

; 2286 : 
; 2287 : #ifdef AUI_DANGER_PLOTS_REMADE
; 2288 : 	SAFE_DELETE(m_pathDangerFinder);
; 2289 : 	m_pathDangerFinder = NULL;
; 2290 : #endif
; 2291 : 
; 2292 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?uninit@CvGlobals@@QAEXXZ ENDP				; CvGlobals::uninit
_TEXT	ENDS
PUBLIC	?UnwrapCityPointer@CvGlobals@@QAEPAVCvCity@@PAVICvCity1@@@Z ; CvGlobals::UnwrapCityPointer
EXTRN	?GetInstance@CvDllCity@@QAEPAVCvCity@@XZ:PROC	; CvDllCity::GetInstance
; Function compile flags: /Odtp
;	COMDAT ?UnwrapCityPointer@CvGlobals@@QAEPAVCvCity@@PAVICvCity1@@@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_pCity$ = 8						; size = 4
?UnwrapCityPointer@CvGlobals@@QAEPAVCvCity@@PAVICvCity1@@@Z PROC ; CvGlobals::UnwrapCityPointer, COMDAT
; _this$ = ecx

; 2296 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2297 : 	return (NULL != pCity)? static_cast<CvDllCity*>(pCity)->GetInstance() : NULL;

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN3@UnwrapCity
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetInstance@CvDllCity@@QAEPAVCvCity@@XZ ; CvDllCity::GetInstance
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@UnwrapCity
$LN3@UnwrapCity:
	mov	DWORD PTR tv71[ebp], 0
$LN4@UnwrapCity:
	mov	eax, DWORD PTR tv71[ebp]

; 2298 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?UnwrapCityPointer@CvGlobals@@QAEPAVCvCity@@PAVICvCity1@@@Z ENDP ; CvGlobals::UnwrapCityPointer
_TEXT	ENDS
PUBLIC	??1?$auto_ptr@VICvCity1@@@std@@QAE@XZ		; std::auto_ptr<ICvCity1>::~auto_ptr<ICvCity1>
PUBLIC	?WrapCityPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvCity1@@@std@@PAVCvCity@@@Z ; CvGlobals::WrapCityPointer
EXTRN	??3CvDllCity@@SAXPAX@Z:PROC			; CvDllCity::operator delete
EXTRN	??0CvDllCity@@QAE@PAVCvCity@@@Z:PROC		; CvDllCity::CvDllCity
EXTRN	??2CvDllCity@@SAPAXI@Z:PROC			; CvDllCity::operator new
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
xdata$x	SEGMENT
__unwindtable$?WrapCityPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvCity1@@@std@@PAVCvCity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WrapCityPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvCity1@@@std@@PAVCvCity@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?WrapCityPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvCity1@@@std@@PAVCvCity@@@Z$0
__ehfuncinfo$?WrapCityPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvCity1@@@std@@PAVCvCity@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?WrapCityPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvCity1@@@std@@PAVCvCity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
xdata$x	ENDS
;	COMDAT ?WrapCityPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvCity1@@@std@@PAVCvCity@@@Z
_TEXT	SEGMENT
tv80 = -72						; size = 4
_this$ = -68						; size = 4
_inst$258795 = -64					; size = 4
$T258791 = -60						; size = 4
$T258782 = -56						; size = 4
__Ptr$258781 = -52					; size = 4
$T258777 = -48						; size = 4
__Cvtptr$258772 = -44					; size = 4
__Ans$258773 = -40					; size = 4
$T258766 = -36						; size = 4
$T258761 = -32						; size = 4
$T258757 = -28						; size = 4
$T258752 = -24						; size = 4
$T258751 = -20						; size = 4
$T258750 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_pCity$ = 12						; size = 4
?WrapCityPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvCity1@@@std@@PAVCvCity@@@Z PROC ; CvGlobals::WrapCityPointer, COMDAT
; _this$ = ecx

; 2301 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?WrapCityPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvCity1@@@std@@PAVCvCity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T258761[ebp], 0

; 2302 : 	return auto_ptr<ICvCity1>((NULL != pCity)? new CvDllCity(pCity) : NULL);

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN5@WrapCityPo
	push	12					; 0000000cH
	call	??2CvDllCity@@SAPAXI@Z			; CvDllCity::operator new
	add	esp, 4
	mov	DWORD PTR $T258752[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T258752[ebp], 0
	je	SHORT $LN3@WrapCityPo
	mov	eax, DWORD PTR _pCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T258752[ebp]
	call	??0CvDllCity@@QAE@PAVCvCity@@@Z		; CvDllCity::CvDllCity
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN4@WrapCityPo
$LN3@WrapCityPo:
	mov	DWORD PTR tv80[ebp], 0
$LN4@WrapCityPo:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T258751[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T258751[ebp]
	mov	DWORD PTR $T258766[ebp], edx
	jmp	SHORT $LN6@WrapCityPo
$LN5@WrapCityPo:
	mov	DWORD PTR $T258766[ebp], 0
$LN6@WrapCityPo:
	mov	eax, DWORD PTR $T258766[ebp]
	mov	DWORD PTR $T258750[ebp], eax
	lea	ecx, DWORD PTR $T258750[ebp]
	mov	DWORD PTR $T258777[ebp], ecx
	mov	edx, DWORD PTR $T258777[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Cvtptr$258772[ebp], eax
	mov	ecx, DWORD PTR __Cvtptr$258772[ebp]
	mov	DWORD PTR __Ans$258773[ebp], ecx
	mov	edx, DWORD PTR $T258777[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR __Ans$258773[ebp]
	mov	DWORD PTR $T258757[ebp], eax
	mov	ecx, DWORD PTR $T258757[ebp]
	mov	DWORD PTR $T258782[ebp], ecx
	mov	edx, DWORD PTR $T258782[ebp]
	mov	DWORD PTR __Ptr$258781[ebp], edx
	mov	DWORD PTR $T258782[ebp], 0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Ptr$258781[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T258761[ebp]
	or	edx, 1
	mov	DWORD PTR $T258761[ebp], edx
	mov	eax, DWORD PTR $T258750[ebp]
	mov	DWORD PTR $T258791[ebp], eax
	cmp	DWORD PTR $T258791[ebp], 0
	je	SHORT $LN19@WrapCityPo
	mov	ecx, DWORD PTR $T258791[ebp]
	mov	DWORD PTR _inst$258795[ebp], ecx
	mov	edx, DWORD PTR _inst$258795[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$258795[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN19@WrapCityPo:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2303 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WrapCityPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvCity1@@@std@@PAVCvCity@@@Z$0:
	mov	eax, DWORD PTR $T258752[ebp]
	push	eax
	call	??3CvDllCity@@SAXPAX@Z			; CvDllCity::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?WrapCityPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvCity1@@@std@@PAVCvCity@@@Z$2:
	mov	eax, DWORD PTR $T258761[ebp]
	and	eax, 1
	je	$LN10@WrapCityPo
	and	DWORD PTR $T258761[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$auto_ptr@VICvCity1@@@std@@QAE@XZ	; std::auto_ptr<ICvCity1>::~auto_ptr<ICvCity1>
$LN10@WrapCityPo:
	ret	0
__ehhandler$?WrapCityPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvCity1@@@std@@PAVCvCity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?WrapCityPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvCity1@@@std@@PAVCvCity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?WrapCityPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvCity1@@@std@@PAVCvCity@@@Z ENDP ; CvGlobals::WrapCityPointer
PUBLIC	?UnwrapDealPointer@CvGlobals@@QAEPAVCvDeal@@PAVICvDeal1@@@Z ; CvGlobals::UnwrapDealPointer
EXTRN	?GetInstance@CvDllDeal@@QAEPAVCvDeal@@XZ:PROC	; CvDllDeal::GetInstance
; Function compile flags: /Odtp
;	COMDAT ?UnwrapDealPointer@CvGlobals@@QAEPAVCvDeal@@PAVICvDeal1@@@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_pDeal$ = 8						; size = 4
?UnwrapDealPointer@CvGlobals@@QAEPAVCvDeal@@PAVICvDeal1@@@Z PROC ; CvGlobals::UnwrapDealPointer, COMDAT
; _this$ = ecx

; 2306 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2307 : 	return (NULL != pDeal)? static_cast<CvDllDeal*>(pDeal)->GetInstance() : NULL;

	cmp	DWORD PTR _pDeal$[ebp], 0
	je	SHORT $LN3@UnwrapDeal
	mov	ecx, DWORD PTR _pDeal$[ebp]
	call	?GetInstance@CvDllDeal@@QAEPAVCvDeal@@XZ ; CvDllDeal::GetInstance
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@UnwrapDeal
$LN3@UnwrapDeal:
	mov	DWORD PTR tv71[ebp], 0
$LN4@UnwrapDeal:
	mov	eax, DWORD PTR tv71[ebp]

; 2308 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?UnwrapDealPointer@CvGlobals@@QAEPAVCvDeal@@PAVICvDeal1@@@Z ENDP ; CvGlobals::UnwrapDealPointer
_TEXT	ENDS
PUBLIC	??1?$auto_ptr@VICvDeal1@@@std@@QAE@XZ		; std::auto_ptr<ICvDeal1>::~auto_ptr<ICvDeal1>
PUBLIC	?WrapDealPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvDeal1@@@std@@PAVCvDeal@@@Z ; CvGlobals::WrapDealPointer
EXTRN	??3CvDllDeal@@SAXPAX@Z:PROC			; CvDllDeal::operator delete
EXTRN	??0CvDllDeal@@QAE@PAVCvDeal@@@Z:PROC		; CvDllDeal::CvDllDeal
EXTRN	??2CvDllDeal@@SAPAXI@Z:PROC			; CvDllDeal::operator new
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
xdata$x	SEGMENT
__unwindtable$?WrapDealPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvDeal1@@@std@@PAVCvDeal@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WrapDealPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvDeal1@@@std@@PAVCvDeal@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?WrapDealPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvDeal1@@@std@@PAVCvDeal@@@Z$0
__ehfuncinfo$?WrapDealPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvDeal1@@@std@@PAVCvDeal@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?WrapDealPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvDeal1@@@std@@PAVCvDeal@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
xdata$x	ENDS
;	COMDAT ?WrapDealPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvDeal1@@@std@@PAVCvDeal@@@Z
_TEXT	SEGMENT
tv80 = -72						; size = 4
_this$ = -68						; size = 4
_inst$258854 = -64					; size = 4
$T258850 = -60						; size = 4
$T258841 = -56						; size = 4
__Ptr$258840 = -52					; size = 4
$T258836 = -48						; size = 4
__Cvtptr$258831 = -44					; size = 4
__Ans$258832 = -40					; size = 4
$T258825 = -36						; size = 4
$T258820 = -32						; size = 4
$T258816 = -28						; size = 4
$T258811 = -24						; size = 4
$T258810 = -20						; size = 4
$T258809 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_pDeal$ = 12						; size = 4
?WrapDealPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvDeal1@@@std@@PAVCvDeal@@@Z PROC ; CvGlobals::WrapDealPointer, COMDAT
; _this$ = ecx

; 2311 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?WrapDealPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvDeal1@@@std@@PAVCvDeal@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T258820[ebp], 0

; 2312 : 	return auto_ptr<ICvDeal1>((NULL != pDeal)? new CvDllDeal(pDeal) : NULL);

	cmp	DWORD PTR _pDeal$[ebp], 0
	je	SHORT $LN5@WrapDealPo
	push	12					; 0000000cH
	call	??2CvDllDeal@@SAPAXI@Z			; CvDllDeal::operator new
	add	esp, 4
	mov	DWORD PTR $T258811[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T258811[ebp], 0
	je	SHORT $LN3@WrapDealPo
	mov	eax, DWORD PTR _pDeal$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T258811[ebp]
	call	??0CvDllDeal@@QAE@PAVCvDeal@@@Z		; CvDllDeal::CvDllDeal
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN4@WrapDealPo
$LN3@WrapDealPo:
	mov	DWORD PTR tv80[ebp], 0
$LN4@WrapDealPo:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T258810[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T258810[ebp]
	mov	DWORD PTR $T258825[ebp], edx
	jmp	SHORT $LN6@WrapDealPo
$LN5@WrapDealPo:
	mov	DWORD PTR $T258825[ebp], 0
$LN6@WrapDealPo:
	mov	eax, DWORD PTR $T258825[ebp]
	mov	DWORD PTR $T258809[ebp], eax
	lea	ecx, DWORD PTR $T258809[ebp]
	mov	DWORD PTR $T258836[ebp], ecx
	mov	edx, DWORD PTR $T258836[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Cvtptr$258831[ebp], eax
	mov	ecx, DWORD PTR __Cvtptr$258831[ebp]
	mov	DWORD PTR __Ans$258832[ebp], ecx
	mov	edx, DWORD PTR $T258836[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR __Ans$258832[ebp]
	mov	DWORD PTR $T258816[ebp], eax
	mov	ecx, DWORD PTR $T258816[ebp]
	mov	DWORD PTR $T258841[ebp], ecx
	mov	edx, DWORD PTR $T258841[ebp]
	mov	DWORD PTR __Ptr$258840[ebp], edx
	mov	DWORD PTR $T258841[ebp], 0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Ptr$258840[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T258820[ebp]
	or	edx, 1
	mov	DWORD PTR $T258820[ebp], edx
	mov	eax, DWORD PTR $T258809[ebp]
	mov	DWORD PTR $T258850[ebp], eax
	cmp	DWORD PTR $T258850[ebp], 0
	je	SHORT $LN19@WrapDealPo
	mov	ecx, DWORD PTR $T258850[ebp]
	mov	DWORD PTR _inst$258854[ebp], ecx
	mov	edx, DWORD PTR _inst$258854[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$258854[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN19@WrapDealPo:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2313 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WrapDealPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvDeal1@@@std@@PAVCvDeal@@@Z$0:
	mov	eax, DWORD PTR $T258811[ebp]
	push	eax
	call	??3CvDllDeal@@SAXPAX@Z			; CvDllDeal::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?WrapDealPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvDeal1@@@std@@PAVCvDeal@@@Z$2:
	mov	eax, DWORD PTR $T258820[ebp]
	and	eax, 1
	je	$LN10@WrapDealPo
	and	DWORD PTR $T258820[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$auto_ptr@VICvDeal1@@@std@@QAE@XZ	; std::auto_ptr<ICvDeal1>::~auto_ptr<ICvDeal1>
$LN10@WrapDealPo:
	ret	0
__ehhandler$?WrapDealPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvDeal1@@@std@@PAVCvDeal@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?WrapDealPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvDeal1@@@std@@PAVCvDeal@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?WrapDealPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvDeal1@@@std@@PAVCvDeal@@@Z ENDP ; CvGlobals::WrapDealPointer
PUBLIC	?UnwrapPlotPointer@CvGlobals@@QAEPAVCvPlot@@PAVICvPlot1@@@Z ; CvGlobals::UnwrapPlotPointer
EXTRN	?GetInstance@CvDllPlot@@QAEPAVCvPlot@@XZ:PROC	; CvDllPlot::GetInstance
; Function compile flags: /Odtp
;	COMDAT ?UnwrapPlotPointer@CvGlobals@@QAEPAVCvPlot@@PAVICvPlot1@@@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_pPlot$ = 8						; size = 4
?UnwrapPlotPointer@CvGlobals@@QAEPAVCvPlot@@PAVICvPlot1@@@Z PROC ; CvGlobals::UnwrapPlotPointer, COMDAT
; _this$ = ecx

; 2316 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2317 : 	return (NULL != pPlot)? static_cast<CvDllPlot*>(pPlot)->GetInstance() : NULL;

	cmp	DWORD PTR _pPlot$[ebp], 0
	je	SHORT $LN3@UnwrapPlot
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?GetInstance@CvDllPlot@@QAEPAVCvPlot@@XZ ; CvDllPlot::GetInstance
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@UnwrapPlot
$LN3@UnwrapPlot:
	mov	DWORD PTR tv71[ebp], 0
$LN4@UnwrapPlot:
	mov	eax, DWORD PTR tv71[ebp]

; 2318 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?UnwrapPlotPointer@CvGlobals@@QAEPAVCvPlot@@PAVICvPlot1@@@Z ENDP ; CvGlobals::UnwrapPlotPointer
_TEXT	ENDS
PUBLIC	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ		; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
PUBLIC	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ; CvGlobals::WrapPlotPointer
EXTRN	??3CvDllPlot@@SAXPAX@Z:PROC			; CvDllPlot::operator delete
EXTRN	??0CvDllPlot@@QAE@PAVCvPlot@@@Z:PROC		; CvDllPlot::CvDllPlot
EXTRN	??2CvDllPlot@@SAPAXI@Z:PROC			; CvDllPlot::operator new
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
xdata$x	SEGMENT
__unwindtable$?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z$0
__ehfuncinfo$?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
xdata$x	ENDS
;	COMDAT ?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z
_TEXT	SEGMENT
tv80 = -72						; size = 4
_this$ = -68						; size = 4
_inst$258912 = -64					; size = 4
$T258909 = -60						; size = 4
$T258900 = -56						; size = 4
__Ptr$258899 = -52					; size = 4
$T258895 = -48						; size = 4
__Cvtptr$258890 = -44					; size = 4
__Ans$258891 = -40					; size = 4
$T258884 = -36						; size = 4
$T258879 = -32						; size = 4
$T258875 = -28						; size = 4
$T258870 = -24						; size = 4
$T258869 = -20						; size = 4
$T258868 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_pPlot$ = 12						; size = 4
?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z PROC ; CvGlobals::WrapPlotPointer, COMDAT
; _this$ = ecx

; 2321 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T258879[ebp], 0

; 2322 : 	return auto_ptr<ICvPlot1>((NULL != pPlot)? new CvDllPlot(pPlot) : NULL);

	cmp	DWORD PTR _pPlot$[ebp], 0
	je	SHORT $LN5@WrapPlotPo
	push	12					; 0000000cH
	call	??2CvDllPlot@@SAPAXI@Z			; CvDllPlot::operator new
	add	esp, 4
	mov	DWORD PTR $T258870[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T258870[ebp], 0
	je	SHORT $LN3@WrapPlotPo
	mov	eax, DWORD PTR _pPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T258870[ebp]
	call	??0CvDllPlot@@QAE@PAVCvPlot@@@Z		; CvDllPlot::CvDllPlot
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN4@WrapPlotPo
$LN3@WrapPlotPo:
	mov	DWORD PTR tv80[ebp], 0
$LN4@WrapPlotPo:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T258869[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T258869[ebp]
	mov	DWORD PTR $T258884[ebp], edx
	jmp	SHORT $LN6@WrapPlotPo
$LN5@WrapPlotPo:
	mov	DWORD PTR $T258884[ebp], 0
$LN6@WrapPlotPo:
	mov	eax, DWORD PTR $T258884[ebp]
	mov	DWORD PTR $T258868[ebp], eax
	lea	ecx, DWORD PTR $T258868[ebp]
	mov	DWORD PTR $T258895[ebp], ecx
	mov	edx, DWORD PTR $T258895[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Cvtptr$258890[ebp], eax
	mov	ecx, DWORD PTR __Cvtptr$258890[ebp]
	mov	DWORD PTR __Ans$258891[ebp], ecx
	mov	edx, DWORD PTR $T258895[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR __Ans$258891[ebp]
	mov	DWORD PTR $T258875[ebp], eax
	mov	ecx, DWORD PTR $T258875[ebp]
	mov	DWORD PTR $T258900[ebp], ecx
	mov	edx, DWORD PTR $T258900[ebp]
	mov	DWORD PTR __Ptr$258899[ebp], edx
	mov	DWORD PTR $T258900[ebp], 0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Ptr$258899[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T258879[ebp]
	or	edx, 1
	mov	DWORD PTR $T258879[ebp], edx
	mov	eax, DWORD PTR $T258868[ebp]
	mov	DWORD PTR $T258909[ebp], eax
	cmp	DWORD PTR $T258909[ebp], 0
	je	SHORT $LN19@WrapPlotPo
	mov	ecx, DWORD PTR $T258909[ebp]
	mov	DWORD PTR _inst$258912[ebp], ecx
	mov	edx, DWORD PTR _inst$258912[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$258912[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN19@WrapPlotPo:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2323 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z$0:
	mov	eax, DWORD PTR $T258870[ebp]
	push	eax
	call	??3CvDllPlot@@SAXPAX@Z			; CvDllPlot::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z$2:
	mov	eax, DWORD PTR $T258879[ebp]
	and	eax, 1
	je	$LN10@WrapPlotPo
	and	DWORD PTR $T258879[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
$LN10@WrapPlotPo:
	ret	0
__ehhandler$?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ENDP ; CvGlobals::WrapPlotPointer
PUBLIC	?UnwrapRandomPointer@CvGlobals@@QAEPAVCvRandom@@PAVICvRandom1@@@Z ; CvGlobals::UnwrapRandomPointer
EXTRN	?GetInstance@CvDllRandom@@QAEPAVCvRandom@@XZ:PROC ; CvDllRandom::GetInstance
; Function compile flags: /Odtp
;	COMDAT ?UnwrapRandomPointer@CvGlobals@@QAEPAVCvRandom@@PAVICvRandom1@@@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_pRandom$ = 8						; size = 4
?UnwrapRandomPointer@CvGlobals@@QAEPAVCvRandom@@PAVICvRandom1@@@Z PROC ; CvGlobals::UnwrapRandomPointer, COMDAT
; _this$ = ecx

; 2326 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2327 : 	return (NULL != pRandom)? static_cast<CvDllRandom*>(pRandom)->GetInstance() : NULL;

	cmp	DWORD PTR _pRandom$[ebp], 0
	je	SHORT $LN3@UnwrapRand
	mov	ecx, DWORD PTR _pRandom$[ebp]
	call	?GetInstance@CvDllRandom@@QAEPAVCvRandom@@XZ ; CvDllRandom::GetInstance
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@UnwrapRand
$LN3@UnwrapRand:
	mov	DWORD PTR tv71[ebp], 0
$LN4@UnwrapRand:
	mov	eax, DWORD PTR tv71[ebp]

; 2328 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?UnwrapRandomPointer@CvGlobals@@QAEPAVCvRandom@@PAVICvRandom1@@@Z ENDP ; CvGlobals::UnwrapRandomPointer
_TEXT	ENDS
PUBLIC	??1?$auto_ptr@VICvRandom1@@@std@@QAE@XZ		; std::auto_ptr<ICvRandom1>::~auto_ptr<ICvRandom1>
PUBLIC	?WrapRandomPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvRandom1@@@std@@PAVCvRandom@@@Z ; CvGlobals::WrapRandomPointer
EXTRN	??3CvDllRandom@@SAXPAX@Z:PROC			; CvDllRandom::operator delete
EXTRN	??0CvDllRandom@@QAE@PAVCvRandom@@@Z:PROC	; CvDllRandom::CvDllRandom
EXTRN	??2CvDllRandom@@SAPAXI@Z:PROC			; CvDllRandom::operator new
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
xdata$x	SEGMENT
__unwindtable$?WrapRandomPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvRandom1@@@std@@PAVCvRandom@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WrapRandomPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvRandom1@@@std@@PAVCvRandom@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?WrapRandomPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvRandom1@@@std@@PAVCvRandom@@@Z$0
__ehfuncinfo$?WrapRandomPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvRandom1@@@std@@PAVCvRandom@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?WrapRandomPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvRandom1@@@std@@PAVCvRandom@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
xdata$x	ENDS
;	COMDAT ?WrapRandomPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvRandom1@@@std@@PAVCvRandom@@@Z
_TEXT	SEGMENT
tv80 = -72						; size = 4
_this$ = -68						; size = 4
_inst$258971 = -64					; size = 4
$T258968 = -60						; size = 4
$T258959 = -56						; size = 4
__Ptr$258958 = -52					; size = 4
$T258954 = -48						; size = 4
__Cvtptr$258949 = -44					; size = 4
__Ans$258950 = -40					; size = 4
$T258943 = -36						; size = 4
$T258938 = -32						; size = 4
$T258934 = -28						; size = 4
$T258929 = -24						; size = 4
$T258928 = -20						; size = 4
$T258927 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_pRandom$ = 12						; size = 4
?WrapRandomPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvRandom1@@@std@@PAVCvRandom@@@Z PROC ; CvGlobals::WrapRandomPointer, COMDAT
; _this$ = ecx

; 2331 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?WrapRandomPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvRandom1@@@std@@PAVCvRandom@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T258938[ebp], 0

; 2332 : 	return auto_ptr<ICvRandom1>((NULL != pRandom)? new CvDllRandom(pRandom) : NULL);

	cmp	DWORD PTR _pRandom$[ebp], 0
	je	SHORT $LN5@WrapRandom
	push	12					; 0000000cH
	call	??2CvDllRandom@@SAPAXI@Z		; CvDllRandom::operator new
	add	esp, 4
	mov	DWORD PTR $T258929[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T258929[ebp], 0
	je	SHORT $LN3@WrapRandom
	mov	eax, DWORD PTR _pRandom$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T258929[ebp]
	call	??0CvDllRandom@@QAE@PAVCvRandom@@@Z	; CvDllRandom::CvDllRandom
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN4@WrapRandom
$LN3@WrapRandom:
	mov	DWORD PTR tv80[ebp], 0
$LN4@WrapRandom:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T258928[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T258928[ebp]
	mov	DWORD PTR $T258943[ebp], edx
	jmp	SHORT $LN6@WrapRandom
$LN5@WrapRandom:
	mov	DWORD PTR $T258943[ebp], 0
$LN6@WrapRandom:
	mov	eax, DWORD PTR $T258943[ebp]
	mov	DWORD PTR $T258927[ebp], eax
	lea	ecx, DWORD PTR $T258927[ebp]
	mov	DWORD PTR $T258954[ebp], ecx
	mov	edx, DWORD PTR $T258954[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Cvtptr$258949[ebp], eax
	mov	ecx, DWORD PTR __Cvtptr$258949[ebp]
	mov	DWORD PTR __Ans$258950[ebp], ecx
	mov	edx, DWORD PTR $T258954[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR __Ans$258950[ebp]
	mov	DWORD PTR $T258934[ebp], eax
	mov	ecx, DWORD PTR $T258934[ebp]
	mov	DWORD PTR $T258959[ebp], ecx
	mov	edx, DWORD PTR $T258959[ebp]
	mov	DWORD PTR __Ptr$258958[ebp], edx
	mov	DWORD PTR $T258959[ebp], 0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Ptr$258958[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T258938[ebp]
	or	edx, 1
	mov	DWORD PTR $T258938[ebp], edx
	mov	eax, DWORD PTR $T258927[ebp]
	mov	DWORD PTR $T258968[ebp], eax
	cmp	DWORD PTR $T258968[ebp], 0
	je	SHORT $LN19@WrapRandom
	mov	ecx, DWORD PTR $T258968[ebp]
	mov	DWORD PTR _inst$258971[ebp], ecx
	mov	edx, DWORD PTR _inst$258971[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$258971[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN19@WrapRandom:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2333 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WrapRandomPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvRandom1@@@std@@PAVCvRandom@@@Z$0:
	mov	eax, DWORD PTR $T258929[ebp]
	push	eax
	call	??3CvDllRandom@@SAXPAX@Z		; CvDllRandom::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?WrapRandomPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvRandom1@@@std@@PAVCvRandom@@@Z$2:
	mov	eax, DWORD PTR $T258938[ebp]
	and	eax, 1
	je	$LN10@WrapRandom
	and	DWORD PTR $T258938[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$auto_ptr@VICvRandom1@@@std@@QAE@XZ	; std::auto_ptr<ICvRandom1>::~auto_ptr<ICvRandom1>
$LN10@WrapRandom:
	ret	0
__ehhandler$?WrapRandomPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvRandom1@@@std@@PAVCvRandom@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?WrapRandomPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvRandom1@@@std@@PAVCvRandom@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?WrapRandomPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvRandom1@@@std@@PAVCvRandom@@@Z ENDP ; CvGlobals::WrapRandomPointer
PUBLIC	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ		; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
PUBLIC	?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z ; CvGlobals::WrapUnitPointer
EXTRN	??3CvDllUnit@@SAXPAX@Z:PROC			; CvDllUnit::operator delete
EXTRN	??0CvDllUnit@@QAE@PAVCvUnit@@@Z:PROC		; CvDllUnit::CvDllUnit
EXTRN	??2CvDllUnit@@SAPAXI@Z:PROC			; CvDllUnit::operator new
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
xdata$x	SEGMENT
__unwindtable$?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z$0
__ehfuncinfo$?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
xdata$x	ENDS
;	COMDAT ?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z
_TEXT	SEGMENT
tv80 = -72						; size = 4
_this$ = -68						; size = 4
_inst$259027 = -64					; size = 4
$T259024 = -60						; size = 4
$T259014 = -56						; size = 4
__Ptr$259012 = -52					; size = 4
$T259009 = -48						; size = 4
__Cvtptr$259004 = -44					; size = 4
__Ans$259005 = -40					; size = 4
$T258998 = -36						; size = 4
$T258993 = -32						; size = 4
$T258989 = -28						; size = 4
$T258984 = -24						; size = 4
$T258983 = -20						; size = 4
$T258982 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_pUnit$ = 12						; size = 4
?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z PROC ; CvGlobals::WrapUnitPointer, COMDAT
; _this$ = ecx

; 2336 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T258993[ebp], 0

; 2337 : 	return auto_ptr<ICvUnit1>((NULL != pUnit)? new CvDllUnit(pUnit) : NULL);

	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN5@WrapUnitPo
	push	12					; 0000000cH
	call	??2CvDllUnit@@SAPAXI@Z			; CvDllUnit::operator new
	add	esp, 4
	mov	DWORD PTR $T258984[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T258984[ebp], 0
	je	SHORT $LN3@WrapUnitPo
	mov	eax, DWORD PTR _pUnit$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T258984[ebp]
	call	??0CvDllUnit@@QAE@PAVCvUnit@@@Z		; CvDllUnit::CvDllUnit
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN4@WrapUnitPo
$LN3@WrapUnitPo:
	mov	DWORD PTR tv80[ebp], 0
$LN4@WrapUnitPo:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T258983[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T258983[ebp]
	mov	DWORD PTR $T258998[ebp], edx
	jmp	SHORT $LN6@WrapUnitPo
$LN5@WrapUnitPo:
	mov	DWORD PTR $T258998[ebp], 0
$LN6@WrapUnitPo:
	mov	eax, DWORD PTR $T258998[ebp]
	mov	DWORD PTR $T258982[ebp], eax
	lea	ecx, DWORD PTR $T258982[ebp]
	mov	DWORD PTR $T259009[ebp], ecx
	mov	edx, DWORD PTR $T259009[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Cvtptr$259004[ebp], eax
	mov	ecx, DWORD PTR __Cvtptr$259004[ebp]
	mov	DWORD PTR __Ans$259005[ebp], ecx
	mov	edx, DWORD PTR $T259009[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR __Ans$259005[ebp]
	mov	DWORD PTR $T258989[ebp], eax
	mov	ecx, DWORD PTR $T258989[ebp]
	mov	DWORD PTR $T259014[ebp], ecx
	mov	edx, DWORD PTR $T259014[ebp]
	mov	DWORD PTR __Ptr$259012[ebp], edx
	mov	DWORD PTR $T259014[ebp], 0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Ptr$259012[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T258993[ebp]
	or	edx, 1
	mov	DWORD PTR $T258993[ebp], edx
	mov	eax, DWORD PTR $T258982[ebp]
	mov	DWORD PTR $T259024[ebp], eax
	cmp	DWORD PTR $T259024[ebp], 0
	je	SHORT $LN19@WrapUnitPo
	mov	ecx, DWORD PTR $T259024[ebp]
	mov	DWORD PTR _inst$259027[ebp], ecx
	mov	edx, DWORD PTR _inst$259027[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$259027[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN19@WrapUnitPo:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2338 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z$0:
	mov	eax, DWORD PTR $T258984[ebp]
	push	eax
	call	??3CvDllUnit@@SAXPAX@Z			; CvDllUnit::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z$2:
	mov	eax, DWORD PTR $T258993[ebp]
	and	eax, 1
	je	$LN10@WrapUnitPo
	and	DWORD PTR $T258993[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ	; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
$LN10@WrapUnitPo:
	ret	0
__ehhandler$?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z ENDP ; CvGlobals::WrapUnitPointer
PUBLIC	?UnwrapUnitPointer@CvGlobals@@QAEPAVCvUnit@@PAVICvUnit1@@@Z ; CvGlobals::UnwrapUnitPointer
EXTRN	?GetInstance@CvDllUnit@@QAEPAVCvUnit@@XZ:PROC	; CvDllUnit::GetInstance
; Function compile flags: /Odtp
;	COMDAT ?UnwrapUnitPointer@CvGlobals@@QAEPAVCvUnit@@PAVICvUnit1@@@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_pUnit$ = 8						; size = 4
?UnwrapUnitPointer@CvGlobals@@QAEPAVCvUnit@@PAVICvUnit1@@@Z PROC ; CvGlobals::UnwrapUnitPointer, COMDAT
; _this$ = ecx

; 2341 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2342 : 	return (NULL != pUnit)? static_cast<CvDllUnit*>(pUnit)->GetInstance() : NULL;

	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN3@UnwrapUnit
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?GetInstance@CvDllUnit@@QAEPAVCvUnit@@XZ ; CvDllUnit::GetInstance
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@UnwrapUnit
$LN3@UnwrapUnit:
	mov	DWORD PTR tv71[ebp], 0
$LN4@UnwrapUnit:
	mov	eax, DWORD PTR tv71[ebp]

; 2343 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?UnwrapUnitPointer@CvGlobals@@QAEPAVCvUnit@@PAVICvUnit1@@@Z ENDP ; CvGlobals::UnwrapUnitPointer
_TEXT	ENDS
PUBLIC	?getInstance@CvGlobals@@SAAAV1@XZ		; CvGlobals::getInstance
; Function compile flags: /Odtp
;	COMDAT ?getInstance@CvGlobals@@SAAAV1@XZ
_TEXT	SEGMENT
?getInstance@CvGlobals@@SAAAV1@XZ PROC			; CvGlobals::getInstance, COMDAT

; 2346 : {

	push	ebp
	mov	ebp, esp

; 2347 : 	return gGlobals;

	mov	eax, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals

; 2348 : }

	pop	ebp
	ret	0
?getInstance@CvGlobals@@SAAAV1@XZ ENDP			; CvGlobals::getInstance
_TEXT	ENDS
PUBLIC	?getASyncRand@CvGlobals@@QAEAAVCvRandom@@XZ	; CvGlobals::getASyncRand
; Function compile flags: /Odtp
;	COMDAT ?getASyncRand@CvGlobals@@QAEAAVCvRandom@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getASyncRand@CvGlobals@@QAEAAVCvRandom@@XZ PROC	; CvGlobals::getASyncRand, COMDAT
; _this$ = ecx

; 2351 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2352 : 	return *m_asyncRand;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]

; 2353 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getASyncRand@CvGlobals@@QAEAAVCvRandom@@XZ ENDP	; CvGlobals::getASyncRand
_TEXT	ENDS
PUBLIC	?getPathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ; CvGlobals::getPathFinder
; Function compile flags: /Odtp
;	COMDAT ?getPathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ PROC ; CvGlobals::getPathFinder, COMDAT
; _this$ = ecx

; 2356 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2357 : 	return *m_pathFinder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]

; 2358 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ENDP ; CvGlobals::getPathFinder
_TEXT	ENDS
PUBLIC	?getInterfacePathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ; CvGlobals::getInterfacePathFinder
; Function compile flags: /Odtp
;	COMDAT ?getInterfacePathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInterfacePathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ PROC ; CvGlobals::getInterfacePathFinder, COMDAT
; _this$ = ecx

; 2361 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2362 : 	return *m_interfacePathFinder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]

; 2363 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getInterfacePathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ENDP ; CvGlobals::getInterfacePathFinder
_TEXT	ENDS
PUBLIC	?getIgnoreUnitsPathFinder@CvGlobals@@QAEAAVCvIgnoreUnitsPathFinder@@XZ ; CvGlobals::getIgnoreUnitsPathFinder
; Function compile flags: /Odtp
;	COMDAT ?getIgnoreUnitsPathFinder@CvGlobals@@QAEAAVCvIgnoreUnitsPathFinder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getIgnoreUnitsPathFinder@CvGlobals@@QAEAAVCvIgnoreUnitsPathFinder@@XZ PROC ; CvGlobals::getIgnoreUnitsPathFinder, COMDAT
; _this$ = ecx

; 2366 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2367 : 	return *m_ignoreUnitsPathFinder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]

; 2368 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getIgnoreUnitsPathFinder@CvGlobals@@QAEAAVCvIgnoreUnitsPathFinder@@XZ ENDP ; CvGlobals::getIgnoreUnitsPathFinder
_TEXT	ENDS
PUBLIC	?getStepFinder@CvGlobals@@QAEAAVCvStepPathFinder@@XZ ; CvGlobals::getStepFinder
; Function compile flags: /Odtp
;	COMDAT ?getStepFinder@CvGlobals@@QAEAAVCvStepPathFinder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStepFinder@CvGlobals@@QAEAAVCvStepPathFinder@@XZ PROC ; CvGlobals::getStepFinder, COMDAT
; _this$ = ecx

; 2371 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2372 : 	return *m_stepFinder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+68]

; 2373 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStepFinder@CvGlobals@@QAEAAVCvStepPathFinder@@XZ ENDP ; CvGlobals::getStepFinder
_TEXT	ENDS
PUBLIC	?getRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ	; CvGlobals::getRouteFinder
; Function compile flags: /Odtp
;	COMDAT ?getRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ PROC	; CvGlobals::getRouteFinder, COMDAT
; _this$ = ecx

; 2376 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2377 : 	return *m_routeFinder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+72]

; 2378 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ ENDP	; CvGlobals::getRouteFinder
_TEXT	ENDS
PUBLIC	?GetWaterRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ ; CvGlobals::GetWaterRouteFinder
; Function compile flags: /Odtp
;	COMDAT ?GetWaterRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWaterRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ PROC	; CvGlobals::GetWaterRouteFinder, COMDAT
; _this$ = ecx

; 2381 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2382 : 	return *m_waterRouteFinder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+76]

; 2383 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetWaterRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ ENDP	; CvGlobals::GetWaterRouteFinder
_TEXT	ENDS
PUBLIC	?getAreaFinder@CvGlobals@@QAEAAVCvAStar@@XZ	; CvGlobals::getAreaFinder
; Function compile flags: /Odtp
;	COMDAT ?getAreaFinder@CvGlobals@@QAEAAVCvAStar@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAreaFinder@CvGlobals@@QAEAAVCvAStar@@XZ PROC	; CvGlobals::getAreaFinder, COMDAT
; _this$ = ecx

; 2386 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2387 : 	return *m_areaFinder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+84]

; 2388 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAreaFinder@CvGlobals@@QAEAAVCvAStar@@XZ ENDP	; CvGlobals::getAreaFinder
_TEXT	ENDS
PUBLIC	?getInfluenceFinder@CvGlobals@@QAEAAVCvAStar@@XZ ; CvGlobals::getInfluenceFinder
; Function compile flags: /Odtp
;	COMDAT ?getInfluenceFinder@CvGlobals@@QAEAAVCvAStar@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInfluenceFinder@CvGlobals@@QAEAAVCvAStar@@XZ PROC	; CvGlobals::getInfluenceFinder, COMDAT
; _this$ = ecx

; 2391 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2392 : 	return *m_influenceFinder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+88]

; 2393 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getInfluenceFinder@CvGlobals@@QAEAAVCvAStar@@XZ ENDP	; CvGlobals::getInfluenceFinder
_TEXT	ENDS
PUBLIC	?GetBuildRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ ; CvGlobals::GetBuildRouteFinder
; Function compile flags: /Odtp
;	COMDAT ?GetBuildRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBuildRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ PROC	; CvGlobals::GetBuildRouteFinder, COMDAT
; _this$ = ecx

; 2396 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2397 : 	return *m_buildRouteFinder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+92]

; 2398 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetBuildRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ ENDP	; CvGlobals::GetBuildRouteFinder
_TEXT	ENDS
PUBLIC	?GetInternationalTradeRouteLandFinder@CvGlobals@@QAEAAVCvAStar@@XZ ; CvGlobals::GetInternationalTradeRouteLandFinder
; Function compile flags: /Odtp
;	COMDAT ?GetInternationalTradeRouteLandFinder@CvGlobals@@QAEAAVCvAStar@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInternationalTradeRouteLandFinder@CvGlobals@@QAEAAVCvAStar@@XZ PROC ; CvGlobals::GetInternationalTradeRouteLandFinder, COMDAT
; _this$ = ecx

; 2401 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2402 : 	return *m_internationalTradeRouteLandFinder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+96]

; 2403 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInternationalTradeRouteLandFinder@CvGlobals@@QAEAAVCvAStar@@XZ ENDP ; CvGlobals::GetInternationalTradeRouteLandFinder
_TEXT	ENDS
PUBLIC	?GetInternationalTradeRouteWaterFinder@CvGlobals@@QAEAAVCvAStar@@XZ ; CvGlobals::GetInternationalTradeRouteWaterFinder
; Function compile flags: /Odtp
;	COMDAT ?GetInternationalTradeRouteWaterFinder@CvGlobals@@QAEAAVCvAStar@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInternationalTradeRouteWaterFinder@CvGlobals@@QAEAAVCvAStar@@XZ PROC ; CvGlobals::GetInternationalTradeRouteWaterFinder, COMDAT
; _this$ = ecx

; 2406 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2407 : 	return *m_internationalTradeRouteWaterFinder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+100]

; 2408 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInternationalTradeRouteWaterFinder@CvGlobals@@QAEAAVCvAStar@@XZ ENDP ; CvGlobals::GetInternationalTradeRouteWaterFinder
_TEXT	ENDS
PUBLIC	?GetTacticalAnalysisMapFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ; CvGlobals::GetTacticalAnalysisMapFinder
; Function compile flags: /Odtp
;	COMDAT ?GetTacticalAnalysisMapFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTacticalAnalysisMapFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ PROC ; CvGlobals::GetTacticalAnalysisMapFinder, COMDAT
; _this$ = ecx

; 2411 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2412 : 	return *m_tacticalAnalysisMapFinder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+104]

; 2413 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTacticalAnalysisMapFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ENDP ; CvGlobals::GetTacticalAnalysisMapFinder
_TEXT	ENDS
EXTRN	??3CvDllDatabaseUtility@@SAXPAX@Z:PROC		; CvDllDatabaseUtility::operator delete
EXTRN	??0CvDllDatabaseUtility@@QAE@AAVConnection@Database@@@Z:PROC ; CvDllDatabaseUtility::CvDllDatabaseUtility
EXTRN	??2CvDllDatabaseUtility@@SAPAXI@Z:PROC		; CvDllDatabaseUtility::operator new
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\icvdlldatabaseutility.h
xdata$x	SEGMENT
__unwindtable$?getDatabaseLoadUtility@CvGlobals@@QAEPAVICvDLLDatabaseUtility1@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getDatabaseLoadUtility@CvGlobals@@QAEPAVICvDLLDatabaseUtility1@@XZ$0
__ehfuncinfo$?getDatabaseLoadUtility@CvGlobals@@QAEPAVICvDLLDatabaseUtility1@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?getDatabaseLoadUtility@CvGlobals@@QAEPAVICvDLLDatabaseUtility1@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
xdata$x	ENDS
;	COMDAT ?getDatabaseLoadUtility@CvGlobals@@QAEPAVICvDLLDatabaseUtility1@@XZ
_TEXT	SEGMENT
tv80 = -68						; size = 4
_this$ = -64						; size = 4
$T259091 = -60						; size = 4
$T259087 = -56						; size = 16
$T259086 = -40						; size = 16
$T259077 = -24						; size = 4
$T259070 = -20						; size = 4
$T259069 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?getDatabaseLoadUtility@CvGlobals@@QAEPAVICvDLLDatabaseUtility1@@XZ PROC ; CvGlobals::getDatabaseLoadUtility, COMDAT
; _this$ = ecx

; 2423 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?getDatabaseLoadUtility@CvGlobals@@QAEPAVICvDLLDatabaseUtility1@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2424 : 	if(m_pkDatabaseLoadUtility == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+108], 0
	jne	SHORT $LN1@getDatabas

; 2425 : 		m_pkDatabaseLoadUtility = new CvDllDatabaseUtility(DB);

	push	16					; 00000010H
	call	??2CvDllDatabaseUtility@@SAPAXI@Z	; CvDllDatabaseUtility::operator new
	add	esp, 4
	mov	DWORD PTR $T259070[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T259070[ebp], 0
	je	SHORT $LN4@getDatabas
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR $T259077[ebp], ecx
	mov	edx, DWORD PTR $T259077[ebp]
	push	edx
	mov	ecx, DWORD PTR $T259070[ebp]
	call	??0CvDllDatabaseUtility@@QAE@AAVConnection@Database@@@Z ; CvDllDatabaseUtility::CvDllDatabaseUtility
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN5@getDatabas
$LN4@getDatabas:
	mov	DWORD PTR tv80[ebp], 0
$LN5@getDatabas:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T259069[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T259069[ebp]
	mov	DWORD PTR [ecx+108], edx
$LN1@getDatabas:

; 2426 : 
; 2427 : 	//By using query interface, we implicitly increment the reference count and avoid
; 2428 : 	//a new allocation.
; 2429 : 	return m_pkDatabaseLoadUtility->QueryInterface<ICvDLLDatabaseUtility1>();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR $T259091[ebp], ecx
	mov	edx, DWORD PTR _guidICvDLLDatabaseUtility1
	mov	DWORD PTR $T259087[ebp], edx
	mov	eax, DWORD PTR _guidICvDLLDatabaseUtility1+4
	mov	DWORD PTR $T259087[ebp+4], eax
	mov	ecx, DWORD PTR _guidICvDLLDatabaseUtility1+8
	mov	DWORD PTR $T259087[ebp+8], ecx
	mov	edx, DWORD PTR _guidICvDLLDatabaseUtility1+12
	mov	DWORD PTR $T259087[ebp+12], edx
	mov	eax, DWORD PTR $T259087[ebp]
	mov	DWORD PTR $T259086[ebp], eax
	mov	ecx, DWORD PTR $T259087[ebp+4]
	mov	DWORD PTR $T259086[ebp+4], ecx
	mov	edx, DWORD PTR $T259087[ebp+8]
	mov	DWORD PTR $T259086[ebp+8], edx
	mov	eax, DWORD PTR $T259087[ebp+12]
	mov	DWORD PTR $T259086[ebp+12], eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR $T259086[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T259086[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T259086[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR $T259086[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR $T259091[ebp]
	push	ecx
	mov	edx, DWORD PTR $T259091[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	call	ecx

; 2430 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getDatabaseLoadUtility@CvGlobals@@QAEPAVICvDLLDatabaseUtility1@@XZ$0:
	mov	eax, DWORD PTR $T259070[ebp]
	push	eax
	call	??3CvDllDatabaseUtility@@SAXPAX@Z	; CvDllDatabaseUtility::operator delete
	pop	ecx
	ret	0
__ehhandler$?getDatabaseLoadUtility@CvGlobals@@QAEPAVICvDLLDatabaseUtility1@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?getDatabaseLoadUtility@CvGlobals@@QAEPAVICvDLLDatabaseUtility1@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?getDatabaseLoadUtility@CvGlobals@@QAEPAVICvDLLDatabaseUtility1@@XZ ENDP ; CvGlobals::getDatabaseLoadUtility
PUBLIC	?getInterfaceModeInfo@CvGlobals@@QAEAAV?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@XZ ; CvGlobals::getInterfaceModeInfo
; Function compile flags: /Odtp
;	COMDAT ?getInterfaceModeInfo@CvGlobals@@QAEAAV?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInterfaceModeInfo@CvGlobals@@QAEAAV?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@XZ PROC ; CvGlobals::getInterfaceModeInfo, COMDAT
; _this$ = ecx

; 2433 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2434 : 	return m_paInterfaceModeInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 896				; 00000380H

; 2435 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getInterfaceModeInfo@CvGlobals@@QAEAAV?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getInterfaceModeInfo
_TEXT	ENDS
PUBLIC	?getInterfaceModeInfo@CvGlobals@@QAEPAVCvInterfaceModeInfo@@W4InterfaceModeTypes@@@Z ; CvGlobals::getInterfaceModeInfo
; Function compile flags: /Odtp
;	COMDAT ?getInterfaceModeInfo@CvGlobals@@QAEPAVCvInterfaceModeInfo@@W4InterfaceModeTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259105 = -4						; size = 4
_e$ = 8							; size = 4
?getInterfaceModeInfo@CvGlobals@@QAEPAVCvInterfaceModeInfo@@W4InterfaceModeTypes@@@Z PROC ; CvGlobals::getInterfaceModeInfo, COMDAT
; _this$ = ecx

; 2438 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2439 : 	CvAssert(e > -1);
; 2440 : 	CvAssert(e < NUM_INTERFACEMODE_TYPES);
; 2441 : 	if(e > -1 && e < (int)m_paInterfaceModeInfo.size())

	cmp	DWORD PTR _e$[ebp], -1
	jle	SHORT $LN2@getInterfa
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 896				; 00000380H
	mov	DWORD PTR $T259105[ebp], eax
	mov	ecx, DWORD PTR $T259105[ebp]
	mov	edx, DWORD PTR $T259105[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _e$[ebp], eax
	jge	SHORT $LN2@getInterfa

; 2442 : 		return m_paInterfaceModeInfo[e];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getInterfa

; 2443 : 	else

	jmp	SHORT $LN3@getInterfa
$LN2@getInterfa:

; 2444 : 		return NULL;

	xor	eax, eax
$LN3@getInterfa:

; 2445 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getInterfaceModeInfo@CvGlobals@@QAEPAVCvInterfaceModeInfo@@W4InterfaceModeTypes@@@Z ENDP ; CvGlobals::getInterfaceModeInfo
_TEXT	ENDS
PUBLIC	?getLogging@CvGlobals@@QAE_NXZ			; CvGlobals::getLogging
; Function compile flags: /Odtp
;	COMDAT ?getLogging@CvGlobals@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLogging@CvGlobals@@QAE_NXZ PROC			; CvGlobals::getLogging, COMDAT
; _this$ = ecx

; 2448 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2449 : 	return m_bLogging;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+7]

; 2450 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getLogging@CvGlobals@@QAE_NXZ ENDP			; CvGlobals::getLogging
_TEXT	ENDS
PUBLIC	?setLogging@CvGlobals@@QAEX_N@Z			; CvGlobals::setLogging
; Function compile flags: /Odtp
;	COMDAT ?setLogging@CvGlobals@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bLoggingEnabled$ = 8					; size = 1
?setLogging@CvGlobals@@QAEX_N@Z PROC			; CvGlobals::setLogging, COMDAT
; _this$ = ecx

; 2453 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2454 : 	m_bLogging = bLoggingEnabled;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bLoggingEnabled$[ebp]
	mov	BYTE PTR [eax+7], cl

; 2455 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setLogging@CvGlobals@@QAEX_N@Z ENDP			; CvGlobals::setLogging
_TEXT	ENDS
PUBLIC	?getRandLogging@CvGlobals@@QAEHXZ		; CvGlobals::getRandLogging
; Function compile flags: /Odtp
;	COMDAT ?getRandLogging@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRandLogging@CvGlobals@@QAEHXZ PROC			; CvGlobals::getRandLogging, COMDAT
; _this$ = ecx

; 2458 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2459 : 	return m_iRandLogging;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 2460 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getRandLogging@CvGlobals@@QAEHXZ ENDP			; CvGlobals::getRandLogging
_TEXT	ENDS
PUBLIC	?setRandLogging@CvGlobals@@QAEXH@Z		; CvGlobals::setRandLogging
; Function compile flags: /Odtp
;	COMDAT ?setRandLogging@CvGlobals@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iRandLoggingFlags$ = 8					; size = 4
?setRandLogging@CvGlobals@@QAEXH@Z PROC			; CvGlobals::setRandLogging, COMDAT
; _this$ = ecx

; 2463 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2464 : 	m_iRandLogging = iRandLoggingFlags;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iRandLoggingFlags$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2465 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setRandLogging@CvGlobals@@QAEXH@Z ENDP			; CvGlobals::setRandLogging
_TEXT	ENDS
PUBLIC	?getAILogging@CvGlobals@@QAE_NXZ		; CvGlobals::getAILogging
; Function compile flags: /Odtp
;	COMDAT ?getAILogging@CvGlobals@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAILogging@CvGlobals@@QAE_NXZ PROC			; CvGlobals::getAILogging, COMDAT
; _this$ = ecx

; 2468 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2469 : 	return m_bAILogging;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+13]

; 2470 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAILogging@CvGlobals@@QAE_NXZ ENDP			; CvGlobals::getAILogging
_TEXT	ENDS
PUBLIC	?setAILogging@CvGlobals@@QAEX_N@Z		; CvGlobals::setAILogging
; Function compile flags: /Odtp
;	COMDAT ?setAILogging@CvGlobals@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bEnable$ = 8						; size = 1
?setAILogging@CvGlobals@@QAEX_N@Z PROC			; CvGlobals::setAILogging, COMDAT
; _this$ = ecx

; 2473 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2474 : 	m_bAILogging = bEnable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bEnable$[ebp]
	mov	BYTE PTR [eax+13], cl

; 2475 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setAILogging@CvGlobals@@QAEX_N@Z ENDP			; CvGlobals::setAILogging
_TEXT	ENDS
PUBLIC	?getAIPerfLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getAIPerfLogging
; Function compile flags: /Odtp
;	COMDAT ?getAIPerfLogging@CvGlobals@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIPerfLogging@CvGlobals@@QAE_NXZ PROC		; CvGlobals::getAIPerfLogging, COMDAT
; _this$ = ecx

; 2478 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2479 : 	return m_bAIPerfLogging;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+14]

; 2480 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIPerfLogging@CvGlobals@@QAE_NXZ ENDP		; CvGlobals::getAIPerfLogging
_TEXT	ENDS
PUBLIC	?setAIPerfLogging@CvGlobals@@QAEX_N@Z		; CvGlobals::setAIPerfLogging
; Function compile flags: /Odtp
;	COMDAT ?setAIPerfLogging@CvGlobals@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bEnable$ = 8						; size = 1
?setAIPerfLogging@CvGlobals@@QAEX_N@Z PROC		; CvGlobals::setAIPerfLogging, COMDAT
; _this$ = ecx

; 2483 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2484 : 	m_bAIPerfLogging = bEnable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bEnable$[ebp]
	mov	BYTE PTR [eax+14], cl

; 2485 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setAIPerfLogging@CvGlobals@@QAEX_N@Z ENDP		; CvGlobals::setAIPerfLogging
_TEXT	ENDS
PUBLIC	?GetBuilderAILogging@CvGlobals@@QAE_NXZ		; CvGlobals::GetBuilderAILogging
; Function compile flags: /Odtp
;	COMDAT ?GetBuilderAILogging@CvGlobals@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBuilderAILogging@CvGlobals@@QAE_NXZ PROC		; CvGlobals::GetBuilderAILogging, COMDAT
; _this$ = ecx

; 2488 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2489 : 	return m_bBuilderAILogging;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+15]

; 2490 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetBuilderAILogging@CvGlobals@@QAE_NXZ ENDP		; CvGlobals::GetBuilderAILogging
_TEXT	ENDS
PUBLIC	?SetBuilderAILogging@CvGlobals@@QAEX_N@Z	; CvGlobals::SetBuilderAILogging
; Function compile flags: /Odtp
;	COMDAT ?SetBuilderAILogging@CvGlobals@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bEnable$ = 8						; size = 1
?SetBuilderAILogging@CvGlobals@@QAEX_N@Z PROC		; CvGlobals::SetBuilderAILogging, COMDAT
; _this$ = ecx

; 2493 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2494 : 	m_bBuilderAILogging = bEnable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bEnable$[ebp]
	mov	BYTE PTR [eax+15], cl

; 2495 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetBuilderAILogging@CvGlobals@@QAEX_N@Z ENDP		; CvGlobals::SetBuilderAILogging
_TEXT	ENDS
PUBLIC	?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ	; CvGlobals::getPlayerAndCityAILogSplit
; Function compile flags: /Odtp
;	COMDAT ?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ PROC	; CvGlobals::getPlayerAndCityAILogSplit, COMDAT
; _this$ = ecx

; 2498 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2499 : 	return m_bPlayerAndCityAILogSplit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+17]

; 2500 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ ENDP	; CvGlobals::getPlayerAndCityAILogSplit
_TEXT	ENDS
PUBLIC	?setPlayerAndCityAILogSplit@CvGlobals@@QAEX_N@Z	; CvGlobals::setPlayerAndCityAILogSplit
; Function compile flags: /Odtp
;	COMDAT ?setPlayerAndCityAILogSplit@CvGlobals@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bEnable$ = 8						; size = 1
?setPlayerAndCityAILogSplit@CvGlobals@@QAEX_N@Z PROC	; CvGlobals::setPlayerAndCityAILogSplit, COMDAT
; _this$ = ecx

; 2503 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2504 : 	m_bPlayerAndCityAILogSplit = bEnable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bEnable$[ebp]
	mov	BYTE PTR [eax+17], cl

; 2505 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setPlayerAndCityAILogSplit@CvGlobals@@QAEX_N@Z ENDP	; CvGlobals::setPlayerAndCityAILogSplit
_TEXT	ENDS
PUBLIC	?GetTutorialLogging@CvGlobals@@QAE_NXZ		; CvGlobals::GetTutorialLogging
; Function compile flags: /Odtp
;	COMDAT ?GetTutorialLogging@CvGlobals@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTutorialLogging@CvGlobals@@QAE_NXZ PROC		; CvGlobals::GetTutorialLogging, COMDAT
; _this$ = ecx

; 2508 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2509 : 	return m_bTutorialLogging;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+18]

; 2510 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTutorialLogging@CvGlobals@@QAE_NXZ ENDP		; CvGlobals::GetTutorialLogging
_TEXT	ENDS
PUBLIC	?SetTutorialLogging@CvGlobals@@QAEX_N@Z		; CvGlobals::SetTutorialLogging
; Function compile flags: /Odtp
;	COMDAT ?SetTutorialLogging@CvGlobals@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bEnable$ = 8						; size = 1
?SetTutorialLogging@CvGlobals@@QAEX_N@Z PROC		; CvGlobals::SetTutorialLogging, COMDAT
; _this$ = ecx

; 2513 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2514 : 	m_bTutorialLogging = bEnable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bEnable$[ebp]
	mov	BYTE PTR [eax+18], cl

; 2515 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetTutorialLogging@CvGlobals@@QAEX_N@Z ENDP		; CvGlobals::SetTutorialLogging
_TEXT	ENDS
PUBLIC	?GetTutorialDebugging@CvGlobals@@QAE_NXZ	; CvGlobals::GetTutorialDebugging
; Function compile flags: /Odtp
;	COMDAT ?GetTutorialDebugging@CvGlobals@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTutorialDebugging@CvGlobals@@QAE_NXZ PROC		; CvGlobals::GetTutorialDebugging, COMDAT
; _this$ = ecx

; 2518 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2519 : 	return m_bTutorialDebugging;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+19]

; 2520 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTutorialDebugging@CvGlobals@@QAE_NXZ ENDP		; CvGlobals::GetTutorialDebugging
_TEXT	ENDS
PUBLIC	?SetTutorialDebugging@CvGlobals@@QAEX_N@Z	; CvGlobals::SetTutorialDebugging
; Function compile flags: /Odtp
;	COMDAT ?SetTutorialDebugging@CvGlobals@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bEnable$ = 8						; size = 1
?SetTutorialDebugging@CvGlobals@@QAEX_N@Z PROC		; CvGlobals::SetTutorialDebugging, COMDAT
; _this$ = ecx

; 2523 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2524 : 	m_bTutorialDebugging = bEnable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bEnable$[ebp]
	mov	BYTE PTR [eax+19], cl

; 2525 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetTutorialDebugging@CvGlobals@@QAEX_N@Z ENDP		; CvGlobals::SetTutorialDebugging
_TEXT	ENDS
PUBLIC	?GetAllowRClickMovementWhileScrolling@CvGlobals@@QAE_NXZ ; CvGlobals::GetAllowRClickMovementWhileScrolling
; Function compile flags: /Odtp
;	COMDAT ?GetAllowRClickMovementWhileScrolling@CvGlobals@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAllowRClickMovementWhileScrolling@CvGlobals@@QAE_NXZ PROC ; CvGlobals::GetAllowRClickMovementWhileScrolling, COMDAT
; _this$ = ecx

; 2528 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2529 : 	return m_bAllowRClickMovementWhileCameraScrolling;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+20]

; 2530 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAllowRClickMovementWhileScrolling@CvGlobals@@QAE_NXZ ENDP ; CvGlobals::GetAllowRClickMovementWhileScrolling
_TEXT	ENDS
PUBLIC	?SetAllowRClickMovementWhileScrolling@CvGlobals@@QAEX_N@Z ; CvGlobals::SetAllowRClickMovementWhileScrolling
; Function compile flags: /Odtp
;	COMDAT ?SetAllowRClickMovementWhileScrolling@CvGlobals@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bAllow$ = 8						; size = 1
?SetAllowRClickMovementWhileScrolling@CvGlobals@@QAEX_N@Z PROC ; CvGlobals::SetAllowRClickMovementWhileScrolling, COMDAT
; _this$ = ecx

; 2533 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2534 : 	m_bAllowRClickMovementWhileCameraScrolling = bAllow;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bAllow$[ebp]
	mov	BYTE PTR [eax+20], cl

; 2535 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetAllowRClickMovementWhileScrolling@CvGlobals@@QAEX_N@Z ENDP ; CvGlobals::SetAllowRClickMovementWhileScrolling
_TEXT	ENDS
PUBLIC	?GetPostTurnAutosaves@CvGlobals@@QAE_NXZ	; CvGlobals::GetPostTurnAutosaves
; Function compile flags: /Odtp
;	COMDAT ?GetPostTurnAutosaves@CvGlobals@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPostTurnAutosaves@CvGlobals@@QAE_NXZ PROC		; CvGlobals::GetPostTurnAutosaves, COMDAT
; _this$ = ecx

; 2538 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2539 : 	return m_bPostTurnAutosaves;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+21]

; 2540 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPostTurnAutosaves@CvGlobals@@QAE_NXZ ENDP		; CvGlobals::GetPostTurnAutosaves
_TEXT	ENDS
PUBLIC	?SetPostTurnAutosaves@CvGlobals@@QAEX_N@Z	; CvGlobals::SetPostTurnAutosaves
; Function compile flags: /Odtp
;	COMDAT ?SetPostTurnAutosaves@CvGlobals@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bEnable$ = 8						; size = 1
?SetPostTurnAutosaves@CvGlobals@@QAEX_N@Z PROC		; CvGlobals::SetPostTurnAutosaves, COMDAT
; _this$ = ecx

; 2543 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2544 : 	m_bPostTurnAutosaves = bEnable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bEnable$[ebp]
	mov	BYTE PTR [eax+21], cl

; 2545 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPostTurnAutosaves@CvGlobals@@QAEX_N@Z ENDP		; CvGlobals::SetPostTurnAutosaves
_TEXT	ENDS
PUBLIC	?getCityPlotPriority@CvGlobals@@QAEPAHXZ	; CvGlobals::getCityPlotPriority
; Function compile flags: /Odtp
;	COMDAT ?getCityPlotPriority@CvGlobals@@QAEPAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCityPlotPriority@CvGlobals@@QAEPAHXZ PROC		; CvGlobals::getCityPlotPriority, COMDAT
; _this$ = ecx

; 2549 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2550 : 	return m_aiCityPlotPriority;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 456				; 000001c8H

; 2551 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCityPlotPriority@CvGlobals@@QAEPAHXZ ENDP		; CvGlobals::getCityPlotPriority
_TEXT	ENDS
PUBLIC	?getXYCityPlot@CvGlobals@@QAEHHH@Z		; CvGlobals::getXYCityPlot
; Function compile flags: /Odtp
;	COMDAT ?getXYCityPlot@CvGlobals@@QAEHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_j$ = 12						; size = 4
?getXYCityPlot@CvGlobals@@QAEHHH@Z PROC			; CvGlobals::getXYCityPlot, COMDAT
; _this$ = ecx

; 2554 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2555 : 	CvAssertMsg(i < CITY_PLOTS_DIAMETER, "Index out of bounds");
; 2556 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 2557 : 	if(i < 0 || i >= CITY_PLOTS_DIAMETER) return -1;

	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN3@getXYCityP
	cmp	DWORD PTR _i$[ebp], 7
	jl	SHORT $LN4@getXYCityP
$LN3@getXYCityP:
	or	eax, -1
	jmp	SHORT $LN5@getXYCityP
$LN4@getXYCityP:

; 2558 : 
; 2559 : 	CvAssertMsg(j < CITY_PLOTS_DIAMETER, "Index out of bounds");
; 2560 : 	CvAssertMsg(j > -1, "Index out of bounds");
; 2561 : 	if(j < 0 || j >= CITY_PLOTS_DIAMETER) return -1;

	cmp	DWORD PTR _j$[ebp], 0
	jl	SHORT $LN1@getXYCityP
	cmp	DWORD PTR _j$[ebp], 7
	jl	SHORT $LN2@getXYCityP
$LN1@getXYCityP:
	or	eax, -1
	jmp	SHORT $LN5@getXYCityP
$LN2@getXYCityP:

; 2562 : 
; 2563 : 	return m_aaiXYCityPlot[i][j];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+604]
	mov	eax, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
$LN5@getXYCityP:

; 2564 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?getXYCityPlot@CvGlobals@@QAEHHH@Z ENDP			; CvGlobals::getXYCityPlot
_TEXT	ENDS
PUBLIC	?getTurnLeftDirection@CvGlobals@@QAEPAW4DirectionTypes@@XZ ; CvGlobals::getTurnLeftDirection
; Function compile flags: /Odtp
;	COMDAT ?getTurnLeftDirection@CvGlobals@@QAEPAW4DirectionTypes@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTurnLeftDirection@CvGlobals@@QAEPAW4DirectionTypes@@XZ PROC ; CvGlobals::getTurnLeftDirection, COMDAT
; _this$ = ecx

; 2567 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2568 : 	return m_aeTurnLeftDirection;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 800				; 00000320H

; 2569 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTurnLeftDirection@CvGlobals@@QAEPAW4DirectionTypes@@XZ ENDP ; CvGlobals::getTurnLeftDirection
_TEXT	ENDS
PUBLIC	?getTurnLeftDirection@CvGlobals@@QAE?AW4DirectionTypes@@H@Z ; CvGlobals::getTurnLeftDirection
; Function compile flags: /Odtp
;	COMDAT ?getTurnLeftDirection@CvGlobals@@QAE?AW4DirectionTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getTurnLeftDirection@CvGlobals@@QAE?AW4DirectionTypes@@H@Z PROC ; CvGlobals::getTurnLeftDirection, COMDAT
; _this$ = ecx

; 2572 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2573 : 	CvAssertMsg(i < NUM_DIRECTION_TYPES, "Index out of bounds");
; 2574 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 2575 : 
; 2576 : 	if(i < 0 || i >= NUM_DIRECTION_TYPES) return NO_DIRECTION;

	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN1@getTurnLef
	cmp	DWORD PTR _i$[ebp], 6
	jl	SHORT $LN2@getTurnLef
$LN1@getTurnLef:
	or	eax, -1
	jmp	SHORT $LN3@getTurnLef
$LN2@getTurnLef:

; 2577 : 
; 2578 : 	return m_aeTurnLeftDirection[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+800]
$LN3@getTurnLef:

; 2579 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getTurnLeftDirection@CvGlobals@@QAE?AW4DirectionTypes@@H@Z ENDP ; CvGlobals::getTurnLeftDirection
_TEXT	ENDS
PUBLIC	?getTurnRightDirection@CvGlobals@@QAEPAW4DirectionTypes@@XZ ; CvGlobals::getTurnRightDirection
; Function compile flags: /Odtp
;	COMDAT ?getTurnRightDirection@CvGlobals@@QAEPAW4DirectionTypes@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTurnRightDirection@CvGlobals@@QAEPAW4DirectionTypes@@XZ PROC ; CvGlobals::getTurnRightDirection, COMDAT
; _this$ = ecx

; 2582 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2583 : 	return m_aeTurnRightDirection;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 824				; 00000338H

; 2584 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTurnRightDirection@CvGlobals@@QAEPAW4DirectionTypes@@XZ ENDP ; CvGlobals::getTurnRightDirection
_TEXT	ENDS
PUBLIC	?getTurnRightDirection@CvGlobals@@QAE?AW4DirectionTypes@@H@Z ; CvGlobals::getTurnRightDirection
; Function compile flags: /Odtp
;	COMDAT ?getTurnRightDirection@CvGlobals@@QAE?AW4DirectionTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getTurnRightDirection@CvGlobals@@QAE?AW4DirectionTypes@@H@Z PROC ; CvGlobals::getTurnRightDirection, COMDAT
; _this$ = ecx

; 2587 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2588 : 	CvAssertMsg(i < NUM_DIRECTION_TYPES, "Index out of bounds");
; 2589 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 2590 : 
; 2591 : 	if(i < 0 || i >= NUM_DIRECTION_TYPES) return NO_DIRECTION;

	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN1@getTurnRig
	cmp	DWORD PTR _i$[ebp], 6
	jl	SHORT $LN2@getTurnRig
$LN1@getTurnRig:
	or	eax, -1
	jmp	SHORT $LN3@getTurnRig
$LN2@getTurnRig:

; 2592 : 
; 2593 : 	return m_aeTurnRightDirection[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+824]
$LN3@getTurnRig:

; 2594 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getTurnRightDirection@CvGlobals@@QAE?AW4DirectionTypes@@H@Z ENDP ; CvGlobals::getTurnRightDirection
_TEXT	ENDS
PUBLIC	??_C@_06MEGNPIOK@Worlds?$AA@			; `string'
PUBLIC	?getNumWorldInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumWorldInfos
EXTRN	__imp_?Count@Connection@Database@@QAEHPBD_N@Z:PROC
;	COMDAT ??_C@_06MEGNPIOK@Worlds?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_06MEGNPIOK@Worlds?$AA@ DB 'Worlds', 00H		; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
CONST	ENDS
;	COMDAT ?getNumWorldInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259166 = -4						; size = 4
?getNumWorldInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumWorldInfos, COMDAT
; _this$ = ecx

; 2597 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2598 : 	return GetGameDatabase()->Count("Worlds");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+912]
	mov	DWORD PTR $T259166[ebp], ecx
	push	1
	push	OFFSET ??_C@_06MEGNPIOK@Worlds?$AA@
	mov	ecx, DWORD PTR $T259166[ebp]
	call	DWORD PTR __imp_?Count@Connection@Database@@QAEHPBD_N@Z

; 2599 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumWorldInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumWorldInfos
_TEXT	ENDS
PUBLIC	??_C@_08NJOIDOBN@Climates?$AA@			; `string'
PUBLIC	?getNumClimateInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumClimateInfos
;	COMDAT ??_C@_08NJOIDOBN@Climates?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_08NJOIDOBN@Climates?$AA@ DB 'Climates', 00H	; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
CONST	ENDS
;	COMDAT ?getNumClimateInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259172 = -4						; size = 4
?getNumClimateInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumClimateInfos, COMDAT
; _this$ = ecx

; 2602 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2603 : 	return GetGameDatabase()->Count("Climates");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+912]
	mov	DWORD PTR $T259172[ebp], ecx
	push	1
	push	OFFSET ??_C@_08NJOIDOBN@Climates?$AA@
	mov	ecx, DWORD PTR $T259172[ebp]
	call	DWORD PTR __imp_?Count@Connection@Database@@QAEHPBD_N@Z

; 2604 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumClimateInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumClimateInfos
_TEXT	ENDS
PUBLIC	??_C@_09KAMEEFMH@SeaLevels?$AA@			; `string'
PUBLIC	?getNumSeaLevelInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumSeaLevelInfos
;	COMDAT ??_C@_09KAMEEFMH@SeaLevels?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_09KAMEEFMH@SeaLevels?$AA@ DB 'SeaLevels', 00H	; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
CONST	ENDS
;	COMDAT ?getNumSeaLevelInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259178 = -4						; size = 4
?getNumSeaLevelInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumSeaLevelInfos, COMDAT
; _this$ = ecx

; 2607 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2608 : 	return GetGameDatabase()->Count("SeaLevels");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+912]
	mov	DWORD PTR $T259178[ebp], ecx
	push	1
	push	OFFSET ??_C@_09KAMEEFMH@SeaLevels?$AA@
	mov	ecx, DWORD PTR $T259178[ebp]
	call	DWORD PTR __imp_?Count@Connection@Database@@QAEHPBD_N@Z

; 2609 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumSeaLevelInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumSeaLevelInfos
_TEXT	ENDS
PUBLIC	?GetNumColorInfos@CvGlobals@@QAEHXZ		; CvGlobals::GetNumColorInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumColorInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259184 = -4						; size = 4
?GetNumColorInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::GetNumColorInfos, COMDAT
; _this$ = ecx

; 2617 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2618 : 	return (int)m_paColorInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1036				; 0000040cH
	mov	DWORD PTR $T259184[ebp], eax
	mov	ecx, DWORD PTR $T259184[ebp]
	mov	edx, DWORD PTR $T259184[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 2619 : #endif
; 2620 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumColorInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::GetNumColorInfos
_TEXT	ENDS
PUBLIC	?GetColorInfo@CvGlobals@@QAEAAV?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@XZ ; CvGlobals::GetColorInfo
; Function compile flags: /Odtp
;	COMDAT ?GetColorInfo@CvGlobals@@QAEAAV?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetColorInfo@CvGlobals@@QAEAAV?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@XZ PROC ; CvGlobals::GetColorInfo, COMDAT
; _this$ = ecx

; 2623 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2624 : 	return m_paColorInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1036				; 0000040cH

; 2625 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetColorInfo@CvGlobals@@QAEAAV?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@XZ ENDP ; CvGlobals::GetColorInfo
_TEXT	ENDS
PUBLIC	?GetColorInfo@CvGlobals@@QAEPAVCvColorInfo@@W4ColorTypes@@@Z ; CvGlobals::GetColorInfo
; Function compile flags: /Odtp
;	COMDAT ?GetColorInfo@CvGlobals@@QAEPAVCvColorInfo@@W4ColorTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259192 = -4						; size = 4
_e$ = 8							; size = 4
?GetColorInfo@CvGlobals@@QAEPAVCvColorInfo@@W4ColorTypes@@@Z PROC ; CvGlobals::GetColorInfo, COMDAT
; _this$ = ecx

; 2632 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2633 : 	CvAssert(e > -1);
; 2634 : 	CvAssert(e < GetNumColorInfos());
; 2635 : 	if(e > -1 && e < (int)m_paColorInfo.size())

	cmp	DWORD PTR _e$[ebp], -1
	jle	SHORT $LN2@GetColorIn
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1036				; 0000040cH
	mov	DWORD PTR $T259192[ebp], eax
	mov	ecx, DWORD PTR $T259192[ebp]
	mov	edx, DWORD PTR $T259192[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _e$[ebp], eax
	jge	SHORT $LN2@GetColorIn

; 2636 : 		return m_paColorInfo[e];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1040]
	mov	eax, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@GetColorIn

; 2637 : 	else

	jmp	SHORT $LN3@GetColorIn
$LN2@GetColorIn:

; 2638 : 		return NULL;

	xor	eax, eax
$LN3@GetColorIn:

; 2639 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetColorInfo@CvGlobals@@QAEPAVCvColorInfo@@W4ColorTypes@@@Z ENDP ; CvGlobals::GetColorInfo
_TEXT	ENDS
PUBLIC	?GetNumPlayerColorInfos@CvGlobals@@QAEHXZ	; CvGlobals::GetNumPlayerColorInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumPlayerColorInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259201 = -4						; size = 4
?GetNumPlayerColorInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::GetNumPlayerColorInfos, COMDAT
; _this$ = ecx

; 2648 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2649 : 	return (int)m_paPlayerColorInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1052				; 0000041cH
	mov	DWORD PTR $T259201[ebp], eax
	mov	ecx, DWORD PTR $T259201[ebp]
	mov	edx, DWORD PTR $T259201[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 2650 : #endif
; 2651 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumPlayerColorInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::GetNumPlayerColorInfos
_TEXT	ENDS
PUBLIC	?GetPlayerColorInfo@CvGlobals@@QAEAAV?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@XZ ; CvGlobals::GetPlayerColorInfo
; Function compile flags: /Odtp
;	COMDAT ?GetPlayerColorInfo@CvGlobals@@QAEAAV?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerColorInfo@CvGlobals@@QAEAAV?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@XZ PROC ; CvGlobals::GetPlayerColorInfo, COMDAT
; _this$ = ecx

; 2654 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2655 : 	return m_paPlayerColorInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1052				; 0000041cH

; 2656 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerColorInfo@CvGlobals@@QAEAAV?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@XZ ENDP ; CvGlobals::GetPlayerColorInfo
_TEXT	ENDS
PUBLIC	?GetPlayerColorInfo@CvGlobals@@QAEPAVCvPlayerColorInfo@@W4PlayerColorTypes@@@Z ; CvGlobals::GetPlayerColorInfo
; Function compile flags: /Odtp
;	COMDAT ?GetPlayerColorInfo@CvGlobals@@QAEPAVCvPlayerColorInfo@@W4PlayerColorTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259209 = -4						; size = 4
_e$ = 8							; size = 4
?GetPlayerColorInfo@CvGlobals@@QAEPAVCvPlayerColorInfo@@W4PlayerColorTypes@@@Z PROC ; CvGlobals::GetPlayerColorInfo, COMDAT
; _this$ = ecx

; 2663 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2664 : 	CvAssert(e > -1);
; 2665 : 	CvAssert(e < GetNumPlayerColorInfos());
; 2666 : 	if(e > -1 && e < (int)m_paPlayerColorInfo.size())

	cmp	DWORD PTR _e$[ebp], -1
	jle	SHORT $LN2@GetPlayerC
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1052				; 0000041cH
	mov	DWORD PTR $T259209[ebp], eax
	mov	ecx, DWORD PTR $T259209[ebp]
	mov	edx, DWORD PTR $T259209[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _e$[ebp], eax
	jge	SHORT $LN2@GetPlayerC

; 2667 : 		return m_paPlayerColorInfo[e];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1056]
	mov	eax, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@GetPlayerC

; 2668 : 	else

	jmp	SHORT $LN3@GetPlayerC
$LN2@GetPlayerC:

; 2669 : 		return NULL;

	xor	eax, eax
$LN3@GetPlayerC:

; 2670 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetPlayerColorInfo@CvGlobals@@QAEPAVCvPlayerColorInfo@@W4PlayerColorTypes@@@Z ENDP ; CvGlobals::GetPlayerColorInfo
_TEXT	ENDS
PUBLIC	?getNumEntityEventInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumEntityEventInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumEntityEventInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259218 = -4						; size = 4
?getNumEntityEventInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumEntityEventInfos, COMDAT
; _this$ = ecx

; 2678 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2679 : 	return (int)m_paEntityEventInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1620				; 00000654H
	mov	DWORD PTR $T259218[ebp], eax
	mov	ecx, DWORD PTR $T259218[ebp]
	mov	edx, DWORD PTR $T259218[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 2680 : #endif
; 2681 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumEntityEventInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumEntityEventInfos
_TEXT	ENDS
PUBLIC	?getEntityEventInfo@CvGlobals@@QAEAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@XZ ; CvGlobals::getEntityEventInfo
; Function compile flags: /Odtp
;	COMDAT ?getEntityEventInfo@CvGlobals@@QAEAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getEntityEventInfo@CvGlobals@@QAEAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@XZ PROC ; CvGlobals::getEntityEventInfo, COMDAT
; _this$ = ecx

; 2684 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2685 : 	return m_paEntityEventInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1620				; 00000654H

; 2686 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getEntityEventInfo@CvGlobals@@QAEAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getEntityEventInfo
_TEXT	ENDS
PUBLIC	?getEntityEventInfo@CvGlobals@@QAEPAVCvEntityEventInfo@@W4EntityEventTypes@@@Z ; CvGlobals::getEntityEventInfo
; Function compile flags: /Odtp
;	COMDAT ?getEntityEventInfo@CvGlobals@@QAEPAVCvEntityEventInfo@@W4EntityEventTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259226 = -4						; size = 4
_e$ = 8							; size = 4
?getEntityEventInfo@CvGlobals@@QAEPAVCvEntityEventInfo@@W4EntityEventTypes@@@Z PROC ; CvGlobals::getEntityEventInfo, COMDAT
; _this$ = ecx

; 2693 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2694 : 	CvAssert(e > -1);
; 2695 : 	CvAssert(e < GC.getNumEntityEventInfos());
; 2696 : 	if(e > -1 && e < (int)m_paEntityEventInfo.size())

	cmp	DWORD PTR _e$[ebp], -1
	jle	SHORT $LN2@getEntityE
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1620				; 00000654H
	mov	DWORD PTR $T259226[ebp], eax
	mov	ecx, DWORD PTR $T259226[ebp]
	mov	edx, DWORD PTR $T259226[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _e$[ebp], eax
	jge	SHORT $LN2@getEntityE

; 2697 : 		return m_paEntityEventInfo[e];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1624]
	mov	eax, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getEntityE

; 2698 : 	else

	jmp	SHORT $LN3@getEntityE
$LN2@getEntityE:

; 2699 : 		return NULL;

	xor	eax, eax
$LN3@getEntityE:

; 2700 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getEntityEventInfo@CvGlobals@@QAEPAVCvEntityEventInfo@@W4EntityEventTypes@@@Z ENDP ; CvGlobals::getEntityEventInfo
_TEXT	ENDS
PUBLIC	?getNumMultiUnitFormationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumMultiUnitFormationInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumMultiUnitFormationInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259235 = -4						; size = 4
?getNumMultiUnitFormationInfos@CvGlobals@@QAEHXZ PROC	; CvGlobals::getNumMultiUnitFormationInfos, COMDAT
; _this$ = ecx

; 2708 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2709 : 	return (int)m_paMultiUnitFormationInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1652				; 00000674H
	mov	DWORD PTR $T259235[ebp], eax
	mov	ecx, DWORD PTR $T259235[ebp]
	mov	edx, DWORD PTR $T259235[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 2710 : #endif
; 2711 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumMultiUnitFormationInfos@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getNumMultiUnitFormationInfos
_TEXT	ENDS
PUBLIC	?getMultiUnitFormationInfo@CvGlobals@@QAEAAV?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@XZ ; CvGlobals::getMultiUnitFormationInfo
; Function compile flags: /Odtp
;	COMDAT ?getMultiUnitFormationInfo@CvGlobals@@QAEAAV?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMultiUnitFormationInfo@CvGlobals@@QAEAAV?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@XZ PROC ; CvGlobals::getMultiUnitFormationInfo, COMDAT
; _this$ = ecx

; 2714 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2715 : 	return m_paMultiUnitFormationInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1652				; 00000674H

; 2716 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMultiUnitFormationInfo@CvGlobals@@QAEAAV?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getMultiUnitFormationInfo
_TEXT	ENDS
PUBLIC	?getMultiUnitFormationInfo@CvGlobals@@QAEPAVCvMultiUnitFormationInfo@@H@Z ; CvGlobals::getMultiUnitFormationInfo
; Function compile flags: /Odtp
;	COMDAT ?getMultiUnitFormationInfo@CvGlobals@@QAEPAVCvMultiUnitFormationInfo@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259243 = -4						; size = 4
_i$ = 8							; size = 4
?getMultiUnitFormationInfo@CvGlobals@@QAEPAVCvMultiUnitFormationInfo@@H@Z PROC ; CvGlobals::getMultiUnitFormationInfo, COMDAT
; _this$ = ecx

; 2723 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2724 : 	CvAssert(i > -1);
; 2725 : 	CvAssert(i < GC.getNumMultiUnitFormationInfos());
; 2726 : 	if(i > -1 && i < (int)m_paMultiUnitFormationInfo.size())

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN2@getMultiUn
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1652				; 00000674H
	mov	DWORD PTR $T259243[ebp], eax
	mov	ecx, DWORD PTR $T259243[ebp]
	mov	edx, DWORD PTR $T259243[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@getMultiUn

; 2727 : 		return m_paMultiUnitFormationInfo[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1656]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getMultiUn

; 2728 : 	else

	jmp	SHORT $LN3@getMultiUn
$LN2@getMultiUn:

; 2729 : 		return NULL;

	xor	eax, eax
$LN3@getMultiUn:

; 2730 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getMultiUnitFormationInfo@CvGlobals@@QAEPAVCvMultiUnitFormationInfo@@H@Z ENDP ; CvGlobals::getMultiUnitFormationInfo
_TEXT	ENDS
PUBLIC	?getNumTerrainInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumTerrainInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumTerrainInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259252 = -4						; size = 4
?getNumTerrainInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumTerrainInfos, COMDAT
; _this$ = ecx

; 2738 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2739 : 	return (int)m_paTerrainInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1068				; 0000042cH
	mov	DWORD PTR $T259252[ebp], eax
	mov	ecx, DWORD PTR $T259252[ebp]
	mov	edx, DWORD PTR $T259252[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 2740 : #endif
; 2741 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumTerrainInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumTerrainInfos
_TEXT	ENDS
PUBLIC	?getTerrainInfo@CvGlobals@@QAEAAV?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@XZ ; CvGlobals::getTerrainInfo
; Function compile flags: /Odtp
;	COMDAT ?getTerrainInfo@CvGlobals@@QAEAAV?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTerrainInfo@CvGlobals@@QAEAAV?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@XZ PROC ; CvGlobals::getTerrainInfo, COMDAT
; _this$ = ecx

; 2744 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2745 : 	return m_paTerrainInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1068				; 0000042cH

; 2746 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTerrainInfo@CvGlobals@@QAEAAV?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getTerrainInfo
_TEXT	ENDS
PUBLIC	?getTerrainInfo@CvGlobals@@QAEPAVCvTerrainInfo@@W4TerrainTypes@@@Z ; CvGlobals::getTerrainInfo
; Function compile flags: /Odtp
;	COMDAT ?getTerrainInfo@CvGlobals@@QAEPAVCvTerrainInfo@@W4TerrainTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259260 = -4						; size = 4
_eTerrainNum$ = 8					; size = 4
?getTerrainInfo@CvGlobals@@QAEPAVCvTerrainInfo@@W4TerrainTypes@@@Z PROC ; CvGlobals::getTerrainInfo, COMDAT
; _this$ = ecx

; 2749 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2750 : 	CvAssert(eTerrainNum > -1);
; 2751 : 	CvAssert(eTerrainNum < GC.getNumTerrainInfos());
; 2752 : 	if(eTerrainNum > -1 && eTerrainNum < (int)m_paTerrainInfo.size())

	cmp	DWORD PTR _eTerrainNum$[ebp], -1
	jle	SHORT $LN2@getTerrain
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1068				; 0000042cH
	mov	DWORD PTR $T259260[ebp], eax
	mov	ecx, DWORD PTR $T259260[ebp]
	mov	edx, DWORD PTR $T259260[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eTerrainNum$[ebp], eax
	jge	SHORT $LN2@getTerrain

; 2753 : 		return m_paTerrainInfo[eTerrainNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1072]
	mov	eax, DWORD PTR _eTerrainNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getTerrain

; 2754 : 	else

	jmp	SHORT $LN3@getTerrain
$LN2@getTerrain:

; 2755 : 		return NULL;

	xor	eax, eax
$LN3@getTerrain:

; 2756 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getTerrainInfo@CvGlobals@@QAEPAVCvTerrainInfo@@W4TerrainTypes@@@Z ENDP ; CvGlobals::getTerrainInfo
_TEXT	ENDS
PUBLIC	?getNumResourceClassInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumResourceClassInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumResourceClassInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259269 = -4						; size = 4
?getNumResourceClassInfos@CvGlobals@@QAEHXZ PROC	; CvGlobals::getNumResourceClassInfos, COMDAT
; _this$ = ecx

; 2764 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2765 : 	return (int)m_paResourceClassInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1132				; 0000046cH
	mov	DWORD PTR $T259269[ebp], eax
	mov	ecx, DWORD PTR $T259269[ebp]
	mov	edx, DWORD PTR $T259269[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 2766 : #endif
; 2767 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumResourceClassInfos@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getNumResourceClassInfos
_TEXT	ENDS
PUBLIC	?getResourceClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@XZ ; CvGlobals::getResourceClassInfo
; Function compile flags: /Odtp
;	COMDAT ?getResourceClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResourceClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@XZ PROC ; CvGlobals::getResourceClassInfo, COMDAT
; _this$ = ecx

; 2770 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2771 : 	return m_paResourceClassInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1132				; 0000046cH

; 2772 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getResourceClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getResourceClassInfo
_TEXT	ENDS
PUBLIC	?getResourceClassInfo@CvGlobals@@QAEPAVCvResourceClassInfo@@W4ResourceClassTypes@@@Z ; CvGlobals::getResourceClassInfo
; Function compile flags: /Odtp
;	COMDAT ?getResourceClassInfo@CvGlobals@@QAEPAVCvResourceClassInfo@@W4ResourceClassTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259277 = -4						; size = 4
_eResourceNum$ = 8					; size = 4
?getResourceClassInfo@CvGlobals@@QAEPAVCvResourceClassInfo@@W4ResourceClassTypes@@@Z PROC ; CvGlobals::getResourceClassInfo, COMDAT
; _this$ = ecx

; 2779 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2780 : 	CvAssert(eResourceNum > -1);
; 2781 : 	CvAssert(eResourceNum < GC.getNumResourceClassInfos());
; 2782 : 	if(eResourceNum > -1 && eResourceNum < (int)m_paResourceClassInfo.size())

	cmp	DWORD PTR _eResourceNum$[ebp], -1
	jle	SHORT $LN2@getResourc
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1132				; 0000046cH
	mov	DWORD PTR $T259277[ebp], eax
	mov	ecx, DWORD PTR $T259277[ebp]
	mov	edx, DWORD PTR $T259277[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eResourceNum$[ebp], eax
	jge	SHORT $LN2@getResourc

; 2783 : 		return m_paResourceClassInfo[eResourceNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1136]
	mov	eax, DWORD PTR _eResourceNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getResourc

; 2784 : 	else

	jmp	SHORT $LN3@getResourc
$LN2@getResourc:

; 2785 : 		return NULL;

	xor	eax, eax
$LN3@getResourc:

; 2786 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getResourceClassInfo@CvGlobals@@QAEPAVCvResourceClassInfo@@W4ResourceClassTypes@@@Z ENDP ; CvGlobals::getResourceClassInfo
_TEXT	ENDS
PUBLIC	?getNumResourceInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumResourceInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumResourceInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259286 = -4						; size = 4
?getNumResourceInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumResourceInfos, COMDAT
; _this$ = ecx

; 2795 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2796 : 	return (int)m_paResourceInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1148				; 0000047cH
	mov	DWORD PTR $T259286[ebp], eax
	mov	ecx, DWORD PTR $T259286[ebp]
	mov	edx, DWORD PTR $T259286[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 2797 : #endif
; 2798 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumResourceInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumResourceInfos
_TEXT	ENDS
PUBLIC	?getResourceInfo@CvGlobals@@QAEAAV?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@XZ ; CvGlobals::getResourceInfo
; Function compile flags: /Odtp
;	COMDAT ?getResourceInfo@CvGlobals@@QAEAAV?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResourceInfo@CvGlobals@@QAEAAV?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@XZ PROC ; CvGlobals::getResourceInfo, COMDAT
; _this$ = ecx

; 2801 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2802 : 	return m_paResourceInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1148				; 0000047cH

; 2803 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getResourceInfo@CvGlobals@@QAEAAV?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getResourceInfo
_TEXT	ENDS
PUBLIC	?getResourceInfo@CvGlobals@@QAEPAVCvResourceInfo@@W4ResourceTypes@@@Z ; CvGlobals::getResourceInfo
; Function compile flags: /Odtp
;	COMDAT ?getResourceInfo@CvGlobals@@QAEPAVCvResourceInfo@@W4ResourceTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259294 = -4						; size = 4
_eResourceNum$ = 8					; size = 4
?getResourceInfo@CvGlobals@@QAEPAVCvResourceInfo@@W4ResourceTypes@@@Z PROC ; CvGlobals::getResourceInfo, COMDAT
; _this$ = ecx

; 2806 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2807 : 	CvAssert(eResourceNum > -1);
; 2808 : 	CvAssert(eResourceNum < GC.getNumResourceInfos());
; 2809 : 	if(eResourceNum > -1 && eResourceNum < (int)m_paResourceInfo.size())

	cmp	DWORD PTR _eResourceNum$[ebp], -1
	jle	SHORT $LN2@getResourc@2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1148				; 0000047cH
	mov	DWORD PTR $T259294[ebp], eax
	mov	ecx, DWORD PTR $T259294[ebp]
	mov	edx, DWORD PTR $T259294[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eResourceNum$[ebp], eax
	jge	SHORT $LN2@getResourc@2

; 2810 : 		return m_paResourceInfo[eResourceNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1152]
	mov	eax, DWORD PTR _eResourceNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getResourc@2

; 2811 : 	else

	jmp	SHORT $LN3@getResourc@2
$LN2@getResourc@2:

; 2812 : 		return NULL;

	xor	eax, eax
$LN3@getResourc@2:

; 2813 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getResourceInfo@CvGlobals@@QAEPAVCvResourceInfo@@W4ResourceTypes@@@Z ENDP ; CvGlobals::getResourceInfo
_TEXT	ENDS
PUBLIC	?getNumFeatureInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumFeatureInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumFeatureInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259303 = -4						; size = 4
?getNumFeatureInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumFeatureInfos, COMDAT
; _this$ = ecx

; 2821 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2822 : 	return (int)m_paFeatureInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1116				; 0000045cH
	mov	DWORD PTR $T259303[ebp], eax
	mov	ecx, DWORD PTR $T259303[ebp]
	mov	edx, DWORD PTR $T259303[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 2823 : #endif
; 2824 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumFeatureInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumFeatureInfos
_TEXT	ENDS
PUBLIC	?getFeatureInfo@CvGlobals@@QAEAAV?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@XZ ; CvGlobals::getFeatureInfo
; Function compile flags: /Odtp
;	COMDAT ?getFeatureInfo@CvGlobals@@QAEAAV?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFeatureInfo@CvGlobals@@QAEAAV?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@XZ PROC ; CvGlobals::getFeatureInfo, COMDAT
; _this$ = ecx

; 2827 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2828 : 	return m_paFeatureInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1116				; 0000045cH

; 2829 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFeatureInfo@CvGlobals@@QAEAAV?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getFeatureInfo
_TEXT	ENDS
PUBLIC	?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z ; CvGlobals::getFeatureInfo
; Function compile flags: /Odtp
;	COMDAT ?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259311 = -4						; size = 4
_eFeatureNum$ = 8					; size = 4
?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z PROC ; CvGlobals::getFeatureInfo, COMDAT
; _this$ = ecx

; 2832 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2833 : 	CvAssert(eFeatureNum > -1);
; 2834 : 	CvAssert(eFeatureNum < GC.getNumFeatureInfos());
; 2835 : 	if(eFeatureNum > -1 && eFeatureNum < (int)m_paFeatureInfo.size())

	cmp	DWORD PTR _eFeatureNum$[ebp], -1
	jle	SHORT $LN2@getFeature
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1116				; 0000045cH
	mov	DWORD PTR $T259311[ebp], eax
	mov	ecx, DWORD PTR $T259311[ebp]
	mov	edx, DWORD PTR $T259311[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eFeatureNum$[ebp], eax
	jge	SHORT $LN2@getFeature

; 2836 : 		return m_paFeatureInfo[eFeatureNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1120]
	mov	eax, DWORD PTR _eFeatureNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getFeature

; 2837 : 	else

	jmp	SHORT $LN3@getFeature
$LN2@getFeature:

; 2838 : 		return NULL;

	xor	eax, eax
$LN3@getFeature:

; 2839 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z ENDP ; CvGlobals::getFeatureInfo
_TEXT	ENDS
PUBLIC	?getNumPlayableCivilizationInfos@CvGlobals@@QAEAAHXZ ; CvGlobals::getNumPlayableCivilizationInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumPlayableCivilizationInfos@CvGlobals@@QAEAAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumPlayableCivilizationInfos@CvGlobals@@QAEAAHXZ PROC ; CvGlobals::getNumPlayableCivilizationInfos, COMDAT
; _this$ = ecx

; 2842 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2843 : 	return m_iNumPlayableCivilizationInfos;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1244				; 000004dcH

; 2844 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumPlayableCivilizationInfos@CvGlobals@@QAEAAHXZ ENDP ; CvGlobals::getNumPlayableCivilizationInfos
_TEXT	ENDS
PUBLIC	?getNumAIPlayableCivilizationInfos@CvGlobals@@QAEAAHXZ ; CvGlobals::getNumAIPlayableCivilizationInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumAIPlayableCivilizationInfos@CvGlobals@@QAEAAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumAIPlayableCivilizationInfos@CvGlobals@@QAEAAHXZ PROC ; CvGlobals::getNumAIPlayableCivilizationInfos, COMDAT
; _this$ = ecx

; 2847 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2848 : 	return m_iNumAIPlayableCivilizationInfos;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1248				; 000004e0H

; 2849 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumAIPlayableCivilizationInfos@CvGlobals@@QAEAAHXZ ENDP ; CvGlobals::getNumAIPlayableCivilizationInfos
_TEXT	ENDS
PUBLIC	?getNumCivilizationInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumCivilizationInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumCivilizationInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259324 = -4						; size = 4
?getNumCivilizationInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumCivilizationInfos, COMDAT
; _this$ = ecx

; 2857 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2858 : 	return (int)m_paCivilizationInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1228				; 000004ccH
	mov	DWORD PTR $T259324[ebp], eax
	mov	ecx, DWORD PTR $T259324[ebp]
	mov	edx, DWORD PTR $T259324[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 2859 : #endif
; 2860 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumCivilizationInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumCivilizationInfos
_TEXT	ENDS
PUBLIC	?getCivilizationInfo@CvGlobals@@QAEAAV?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@XZ ; CvGlobals::getCivilizationInfo
; Function compile flags: /Odtp
;	COMDAT ?getCivilizationInfo@CvGlobals@@QAEAAV?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCivilizationInfo@CvGlobals@@QAEAAV?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@XZ PROC ; CvGlobals::getCivilizationInfo, COMDAT
; _this$ = ecx

; 2863 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2864 : 	return m_paCivilizationInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1228				; 000004ccH

; 2865 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCivilizationInfo@CvGlobals@@QAEAAV?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getCivilizationInfo
_TEXT	ENDS
PUBLIC	?getCivilizationInfo@CvGlobals@@QAEPAVCvCivilizationInfo@@W4CivilizationTypes@@@Z ; CvGlobals::getCivilizationInfo
; Function compile flags: /Odtp
;	COMDAT ?getCivilizationInfo@CvGlobals@@QAEPAVCvCivilizationInfo@@W4CivilizationTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259332 = -4						; size = 4
_eCivilizationNum$ = 8					; size = 4
?getCivilizationInfo@CvGlobals@@QAEPAVCvCivilizationInfo@@W4CivilizationTypes@@@Z PROC ; CvGlobals::getCivilizationInfo, COMDAT
; _this$ = ecx

; 2872 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2873 : 	CvAssert(eCivilizationNum > -1);
; 2874 : 	CvAssert(eCivilizationNum < GC.getNumCivilizationInfos());
; 2875 : 	if(eCivilizationNum > -1 && eCivilizationNum < (int)m_paCivilizationInfo.size())

	cmp	DWORD PTR _eCivilizationNum$[ebp], -1
	jle	SHORT $LN2@getCiviliz
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1228				; 000004ccH
	mov	DWORD PTR $T259332[ebp], eax
	mov	ecx, DWORD PTR $T259332[ebp]
	mov	edx, DWORD PTR $T259332[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eCivilizationNum$[ebp], eax
	jge	SHORT $LN2@getCiviliz

; 2876 : 		return m_paCivilizationInfo[eCivilizationNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1232]
	mov	eax, DWORD PTR _eCivilizationNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getCiviliz

; 2877 : 	else

	jmp	SHORT $LN3@getCiviliz
$LN2@getCiviliz:

; 2878 : 		return NULL;

	xor	eax, eax
$LN3@getCiviliz:

; 2879 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getCivilizationInfo@CvGlobals@@QAEPAVCvCivilizationInfo@@W4CivilizationTypes@@@Z ENDP ; CvGlobals::getCivilizationInfo
_TEXT	ENDS
PUBLIC	?getCivilizationInfoIndex@CvGlobals@@QAE?AW4CivilizationTypes@@PBD@Z ; CvGlobals::getCivilizationInfoIndex
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Odtp
;	COMDAT ?getCivilizationInfoIndex@CvGlobals@@QAE?AW4CivilizationTypes@@PBD@Z
_TEXT	SEGMENT
tv131 = -56						; size = 4
tv194 = -52						; size = 4
tv189 = -46						; size = 1
tv182 = -45						; size = 1
tv176 = -44						; size = 4
tv178 = -40						; size = 4
_this$ = -36						; size = 4
$T259399 = -32						; size = 4
$T259395 = -28						; size = 4
$T259372 = -24						; size = 4
$T259348 = -20						; size = 4
$T259338 = -16						; size = 4
_szType$229088 = -12					; size = 4
_itr$229082 = -8					; size = 4
_iIndex$228930 = -4					; size = 4
_pszType$ = 8						; size = 4
?getCivilizationInfoIndex@CvGlobals@@QAE?AW4CivilizationTypes@@PBD@Z PROC ; CvGlobals::getCivilizationInfoIndex, COMDAT
; _this$ = ecx

; 2882 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 2883 : 	CvAssert(pszType != NULL);
; 2884 : 	if(pszType != NULL)

	cmp	DWORD PTR _pszType$[ebp], 0
	je	$LN5@getCiviliz@2

; 2885 : 	{
; 2886 : 		int iIndex = 0;

	mov	DWORD PTR _iIndex$228930[ebp], 0

; 2887 : 		for(std::vector<CvCivilizationInfo*>::iterator itr = m_paCivilizationInfo.begin(); itr != m_paCivilizationInfo.end(); ++itr, ++iIndex)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1232]
	mov	DWORD PTR $T259348[ebp], ecx
	mov	edx, DWORD PTR $T259348[ebp]
	mov	DWORD PTR _itr$229082[ebp], edx
	jmp	SHORT $LN4@getCiviliz@2
$LN3@getCiviliz@2:
	mov	eax, DWORD PTR _itr$229082[ebp]
	add	eax, 4
	mov	DWORD PTR _itr$229082[ebp], eax
	mov	ecx, DWORD PTR _iIndex$228930[ebp]
	add	ecx, 1
	mov	DWORD PTR _iIndex$228930[ebp], ecx
$LN4@getCiviliz@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1236]
	mov	DWORD PTR $T259372[ebp], eax
	mov	ecx, DWORD PTR $T259372[ebp]
	mov	DWORD PTR $T259338[ebp], ecx
	mov	edx, DWORD PTR _itr$229082[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T259338[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN5@getCiviliz@2

; 2888 : 		{
; 2889 : 			const char* szType = (*itr)->GetType();

	mov	eax, DWORD PTR _itr$229082[ebp]
	mov	DWORD PTR $T259395[ebp], eax
	mov	ecx, DWORD PTR $T259395[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T259399[ebp], edx
	mov	ecx, DWORD PTR $T259399[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szType$229088[ebp], eax

; 2890 : 			if(szType && strcmp(szType, pszType) == 0)

	cmp	DWORD PTR _szType$229088[ebp], 0
	je	SHORT $LN1@getCiviliz@2
	mov	eax, DWORD PTR _pszType$[ebp]
	mov	DWORD PTR tv178[ebp], eax
	mov	ecx, DWORD PTR _szType$229088[ebp]
	mov	DWORD PTR tv176[ebp], ecx
$LL34@getCiviliz@2:
	mov	edx, DWORD PTR tv176[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv182[ebp], al
	mov	ecx, DWORD PTR tv178[ebp]
	cmp	al, BYTE PTR [ecx]
	jne	SHORT $LN35@getCiviliz@2
	cmp	BYTE PTR tv182[ebp], 0
	je	SHORT $LN36@getCiviliz@2
	mov	edx, DWORD PTR tv176[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv189[ebp], al
	mov	ecx, DWORD PTR tv178[ebp]
	cmp	al, BYTE PTR [ecx+1]
	jne	SHORT $LN35@getCiviliz@2
	add	DWORD PTR tv176[ebp], 2
	add	DWORD PTR tv178[ebp], 2
	cmp	BYTE PTR tv189[ebp], 0
	jne	SHORT $LL34@getCiviliz@2
$LN36@getCiviliz@2:
	mov	DWORD PTR tv194[ebp], 0
	jmp	SHORT $LN37@getCiviliz@2
$LN35@getCiviliz@2:
	sbb	edx, edx
	sbb	edx, -1
	mov	DWORD PTR tv194[ebp], edx
$LN37@getCiviliz@2:
	mov	eax, DWORD PTR tv194[ebp]
	mov	DWORD PTR tv131[ebp], eax
	cmp	DWORD PTR tv131[ebp], 0
	jne	SHORT $LN1@getCiviliz@2

; 2891 : 				return (CivilizationTypes)iIndex;

	mov	eax, DWORD PTR _iIndex$228930[ebp]
	jmp	SHORT $LN6@getCiviliz@2
$LN1@getCiviliz@2:

; 2892 : 		}

	jmp	$LN3@getCiviliz@2
$LN5@getCiviliz@2:

; 2893 : 	}
; 2894 : 	return NO_CIVILIZATION;

	or	eax, -1
$LN6@getCiviliz@2:

; 2895 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getCivilizationInfoIndex@CvGlobals@@QAE?AW4CivilizationTypes@@PBD@Z ENDP ; CvGlobals::getCivilizationInfoIndex
_TEXT	ENDS
PUBLIC	?getNumMinorCivInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumMinorCivInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumMinorCivInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259409 = -4						; size = 4
?getNumMinorCivInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumMinorCivInfos, COMDAT
; _this$ = ecx

; 2903 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2904 : 	return (int)m_paMinorCivInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1252				; 000004e4H
	mov	DWORD PTR $T259409[ebp], eax
	mov	ecx, DWORD PTR $T259409[ebp]
	mov	edx, DWORD PTR $T259409[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 2905 : #endif
; 2906 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumMinorCivInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumMinorCivInfos
_TEXT	ENDS
PUBLIC	?GetNumPlayableMinorCivs@CvGlobals@@QBEHXZ	; CvGlobals::GetNumPlayableMinorCivs
; Function compile flags: /Odtp
;	COMDAT ?GetNumPlayableMinorCivs@CvGlobals@@QBEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T259415 = -12						; size = 4
_iFound$ = -8						; size = 4
_iCurrentMinorIndex$ = -4				; size = 4
?GetNumPlayableMinorCivs@CvGlobals@@QBEHXZ PROC		; CvGlobals::GetNumPlayableMinorCivs, COMDAT
; _this$ = ecx

; 2916 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2917 : 	int iFound = 0;

	mov	DWORD PTR _iFound$[ebp], 0

; 2918 : 	int iCurrentMinorIndex = 0;

	mov	DWORD PTR _iCurrentMinorIndex$[ebp], 0

; 2919 : 
; 2920 : 	for(; iCurrentMinorIndex < (int)m_paMinorCivInfo.size(); iCurrentMinorIndex++)

	jmp	SHORT $LN4@GetNumPlay
$LN3@GetNumPlay:
	mov	eax, DWORD PTR _iCurrentMinorIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _iCurrentMinorIndex$[ebp], eax
$LN4@GetNumPlay:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1252				; 000004e4H
	mov	DWORD PTR $T259415[ebp], ecx
	mov	edx, DWORD PTR $T259415[ebp]
	mov	eax, DWORD PTR $T259415[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	cmp	DWORD PTR _iCurrentMinorIndex$[ebp], ecx
	jge	SHORT $LN2@GetNumPlay

; 2921 : #endif
; 2922 : 	{
; 2923 : 		if(m_paMinorCivInfo[iCurrentMinorIndex] != NULL)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1256]
	mov	ecx, DWORD PTR _iCurrentMinorIndex$[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN1@GetNumPlay

; 2924 : 		{
; 2925 : 			iFound++;

	mov	edx, DWORD PTR _iFound$[ebp]
	add	edx, 1
	mov	DWORD PTR _iFound$[ebp], edx
$LN1@GetNumPlay:

; 2926 : 		}
; 2927 : 	}

	jmp	SHORT $LN3@GetNumPlay
$LN2@GetNumPlay:

; 2928 : 
; 2929 : 	return iFound;

	mov	eax, DWORD PTR _iFound$[ebp]

; 2930 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumPlayableMinorCivs@CvGlobals@@QBEHXZ ENDP		; CvGlobals::GetNumPlayableMinorCivs
_TEXT	ENDS
PUBLIC	?getMinorCivInfo@CvGlobals@@QAEAAV?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@XZ ; CvGlobals::getMinorCivInfo
; Function compile flags: /Odtp
;	COMDAT ?getMinorCivInfo@CvGlobals@@QAEAAV?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMinorCivInfo@CvGlobals@@QAEAAV?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@XZ PROC ; CvGlobals::getMinorCivInfo, COMDAT
; _this$ = ecx

; 2933 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2934 : 	return m_paMinorCivInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1252				; 000004e4H

; 2935 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMinorCivInfo@CvGlobals@@QAEAAV?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getMinorCivInfo
_TEXT	ENDS
PUBLIC	?getMinorCivInfo@CvGlobals@@QAEPAVCvMinorCivInfo@@W4MinorCivTypes@@@Z ; CvGlobals::getMinorCivInfo
; Function compile flags: /Odtp
;	COMDAT ?getMinorCivInfo@CvGlobals@@QAEPAVCvMinorCivInfo@@W4MinorCivTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259426 = -4						; size = 4
_eMinorCivNum$ = 8					; size = 4
?getMinorCivInfo@CvGlobals@@QAEPAVCvMinorCivInfo@@W4MinorCivTypes@@@Z PROC ; CvGlobals::getMinorCivInfo, COMDAT
; _this$ = ecx

; 2938 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2939 : 	CvAssert(eMinorCivNum > -1);
; 2940 : 	CvAssert(eMinorCivNum < GC.getNumMinorCivInfos());
; 2941 : 	if(eMinorCivNum > -1 && eMinorCivNum < (int)m_paMinorCivInfo.size())

	cmp	DWORD PTR _eMinorCivNum$[ebp], -1
	jle	SHORT $LN2@getMinorCi
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1252				; 000004e4H
	mov	DWORD PTR $T259426[ebp], eax
	mov	ecx, DWORD PTR $T259426[ebp]
	mov	edx, DWORD PTR $T259426[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eMinorCivNum$[ebp], eax
	jge	SHORT $LN2@getMinorCi

; 2942 : 		return m_paMinorCivInfo[eMinorCivNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1256]
	mov	eax, DWORD PTR _eMinorCivNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getMinorCi

; 2943 : 	else

	jmp	SHORT $LN3@getMinorCi
$LN2@getMinorCi:

; 2944 : 		return NULL;

	xor	eax, eax
$LN3@getMinorCi:

; 2945 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getMinorCivInfo@CvGlobals@@QAEPAVCvMinorCivInfo@@W4MinorCivTypes@@@Z ENDP ; CvGlobals::getMinorCivInfo
_TEXT	ENDS
PUBLIC	?getNumLeaderHeadInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumLeaderHeadInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumLeaderHeadInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259435 = -4						; size = 4
?getNumLeaderHeadInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumLeaderHeadInfos, COMDAT
; _this$ = ecx

; 2953 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2954 : 	return (int)m_paLeaderHeadInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1268				; 000004f4H
	mov	DWORD PTR $T259435[ebp], eax
	mov	ecx, DWORD PTR $T259435[ebp]
	mov	edx, DWORD PTR $T259435[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 2955 : #endif
; 2956 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumLeaderHeadInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumLeaderHeadInfos
_TEXT	ENDS
PUBLIC	?getLeaderHeadInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@XZ ; CvGlobals::getLeaderHeadInfo
; Function compile flags: /Odtp
;	COMDAT ?getLeaderHeadInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLeaderHeadInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@XZ PROC ; CvGlobals::getLeaderHeadInfo, COMDAT
; _this$ = ecx

; 2959 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2960 : 	return m_paLeaderHeadInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1268				; 000004f4H

; 2961 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getLeaderHeadInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getLeaderHeadInfo
_TEXT	ENDS
PUBLIC	?getLeaderHeadInfo@CvGlobals@@QAEPAVCvLeaderHeadInfo@@W4LeaderHeadTypes@@@Z ; CvGlobals::getLeaderHeadInfo
; Function compile flags: /Odtp
;	COMDAT ?getLeaderHeadInfo@CvGlobals@@QAEPAVCvLeaderHeadInfo@@W4LeaderHeadTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259443 = -4						; size = 4
_eLeaderHeadNum$ = 8					; size = 4
?getLeaderHeadInfo@CvGlobals@@QAEPAVCvLeaderHeadInfo@@W4LeaderHeadTypes@@@Z PROC ; CvGlobals::getLeaderHeadInfo, COMDAT
; _this$ = ecx

; 2968 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2969 : 	CvAssert(eLeaderHeadNum > -1);
; 2970 : 	CvAssert(eLeaderHeadNum < GC.getNumLeaderHeadInfos());
; 2971 : 	if(eLeaderHeadNum > -1 && eLeaderHeadNum < (int)m_paLeaderHeadInfo.size())

	cmp	DWORD PTR _eLeaderHeadNum$[ebp], -1
	jle	SHORT $LN2@getLeaderH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1268				; 000004f4H
	mov	DWORD PTR $T259443[ebp], eax
	mov	ecx, DWORD PTR $T259443[ebp]
	mov	edx, DWORD PTR $T259443[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eLeaderHeadNum$[ebp], eax
	jge	SHORT $LN2@getLeaderH

; 2972 : 		return m_paLeaderHeadInfo[eLeaderHeadNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1272]
	mov	eax, DWORD PTR _eLeaderHeadNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getLeaderH

; 2973 : 	else

	jmp	SHORT $LN3@getLeaderH
$LN2@getLeaderH:

; 2974 : 		return NULL;

	xor	eax, eax
$LN3@getLeaderH:

; 2975 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getLeaderHeadInfo@CvGlobals@@QAEPAVCvLeaderHeadInfo@@W4LeaderHeadTypes@@@Z ENDP ; CvGlobals::getLeaderHeadInfo
_TEXT	ENDS
PUBLIC	?getNumUnitInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumUnitInfos
EXTRN	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ:PROC	; CvUnitXMLEntries::GetNumUnits
; Function compile flags: /Odtp
;	COMDAT ?getNumUnitInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumUnitInfos@CvGlobals@@QAEHXZ PROC			; CvGlobals::getNumUnitInfos, COMDAT
; _this$ = ecx

; 2982 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2983 : 	return m_pUnits->GetNumUnits();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1704]
	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits

; 2984 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumUnitInfos@CvGlobals@@QAEHXZ ENDP			; CvGlobals::getNumUnitInfos
_TEXT	ENDS
PUBLIC	?getUnitInfo@CvGlobals@@QAEAAV?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@XZ ; CvGlobals::getUnitInfo
EXTRN	?GetUnitEntries@CvUnitXMLEntries@@QAEAAV?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@XZ:PROC ; CvUnitXMLEntries::GetUnitEntries
; Function compile flags: /Odtp
;	COMDAT ?getUnitInfo@CvGlobals@@QAEAAV?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUnitInfo@CvGlobals@@QAEAAV?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@XZ PROC ; CvGlobals::getUnitInfo, COMDAT
; _this$ = ecx

; 2987 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2988 : 	return m_pUnits->GetUnitEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1704]
	call	?GetUnitEntries@CvUnitXMLEntries@@QAEAAV?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@XZ ; CvUnitXMLEntries::GetUnitEntries

; 2989 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getUnitInfo@CvGlobals@@QAEAAV?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getUnitInfo
_TEXT	ENDS
PUBLIC	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo
; Function compile flags: /Odtp
;	COMDAT ?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259456 = -4						; size = 4
_eUnitNum$ = 8						; size = 4
?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z PROC ; CvGlobals::getUnitInfo, COMDAT
; _this$ = ecx

; 2996 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2997 : #ifdef AUI_WARNING_FIXES
; 2998 : 	uint uiIndex = uint(eUnitNum);
; 2999 : 	CvAssert(uiIndex < GC.getNumUnitInfos());
; 3000 : 	if (uiIndex < GC.getNumUnitInfos())
; 3001 : 		return m_pUnits->GetUnitEntries()[uiIndex];
; 3002 : #else
; 3003 : 	CvAssert(eUnitNum > -1);
; 3004 : 	CvAssert(eUnitNum < GC.getNumUnitInfos());
; 3005 : 	if(eUnitNum > -1 && eUnitNum < GC.getNumUnitInfos())

	cmp	DWORD PTR _eUnitNum$[ebp], -1
	jle	SHORT $LN2@getUnitInf
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumUnitInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumUnitInfos
	cmp	DWORD PTR _eUnitNum$[ebp], eax
	jge	SHORT $LN2@getUnitInf

; 3006 : 		return m_pUnits->GetUnitEntries()[eUnitNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1704]
	call	?GetUnitEntries@CvUnitXMLEntries@@QAEAAV?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@XZ ; CvUnitXMLEntries::GetUnitEntries
	mov	DWORD PTR $T259456[ebp], eax
	mov	ecx, DWORD PTR $T259456[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eUnitNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getUnitInf

; 3007 : #endif
; 3008 : 	else

	jmp	SHORT $LN3@getUnitInf
$LN2@getUnitInf:

; 3009 : 		return NULL;

	xor	eax, eax
$LN3@getUnitInf:

; 3010 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ENDP ; CvGlobals::getUnitInfo
_TEXT	ENDS
PUBLIC	?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ ; CvGlobals::GetGameUnits
; Function compile flags: /Odtp
;	COMDAT ?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ PROC ; CvGlobals::GetGameUnits, COMDAT
; _this$ = ecx

; 3013 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3014 : 	return m_pUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1704]

; 3015 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ ENDP ; CvGlobals::GetGameUnits
_TEXT	ENDS
PUBLIC	?getNumSpecialUnitInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumSpecialUnitInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumSpecialUnitInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259464 = -4						; size = 4
?getNumSpecialUnitInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumSpecialUnitInfos, COMDAT
; _this$ = ecx

; 3023 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3024 : 	return (int)m_paSpecialUnitInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1348				; 00000544H
	mov	DWORD PTR $T259464[ebp], eax
	mov	ecx, DWORD PTR $T259464[ebp]
	mov	edx, DWORD PTR $T259464[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3025 : #endif
; 3026 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumSpecialUnitInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumSpecialUnitInfos
_TEXT	ENDS
PUBLIC	?getSpecialUnitInfo@CvGlobals@@QAEAAV?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@XZ ; CvGlobals::getSpecialUnitInfo
; Function compile flags: /Odtp
;	COMDAT ?getSpecialUnitInfo@CvGlobals@@QAEAAV?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSpecialUnitInfo@CvGlobals@@QAEAAV?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@XZ PROC ; CvGlobals::getSpecialUnitInfo, COMDAT
; _this$ = ecx

; 3029 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3030 : 	return m_paSpecialUnitInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1348				; 00000544H

; 3031 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSpecialUnitInfo@CvGlobals@@QAEAAV?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getSpecialUnitInfo
_TEXT	ENDS
PUBLIC	?getSpecialUnitInfo@CvGlobals@@QAEPAVCvSpecialUnitInfo@@W4SpecialUnitTypes@@@Z ; CvGlobals::getSpecialUnitInfo
; Function compile flags: /Odtp
;	COMDAT ?getSpecialUnitInfo@CvGlobals@@QAEPAVCvSpecialUnitInfo@@W4SpecialUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259472 = -4						; size = 4
_eSpecialUnitNum$ = 8					; size = 4
?getSpecialUnitInfo@CvGlobals@@QAEPAVCvSpecialUnitInfo@@W4SpecialUnitTypes@@@Z PROC ; CvGlobals::getSpecialUnitInfo, COMDAT
; _this$ = ecx

; 3042 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3043 : 	CvAssert(eSpecialUnitNum > -1);
; 3044 : 	CvAssert(eSpecialUnitNum < GC.getNumSpecialUnitInfos());
; 3045 : 	if(eSpecialUnitNum > -1 && eSpecialUnitNum < (int)m_paSpecialUnitInfo.size())

	cmp	DWORD PTR _eSpecialUnitNum$[ebp], -1
	jle	SHORT $LN2@getSpecial
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1348				; 00000544H
	mov	DWORD PTR $T259472[ebp], eax
	mov	ecx, DWORD PTR $T259472[ebp]
	mov	edx, DWORD PTR $T259472[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eSpecialUnitNum$[ebp], eax
	jge	SHORT $LN2@getSpecial

; 3046 : 		return m_paSpecialUnitInfo[eSpecialUnitNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1352]
	mov	eax, DWORD PTR _eSpecialUnitNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getSpecial

; 3047 : #endif
; 3048 : 	else

	jmp	SHORT $LN3@getSpecial
$LN2@getSpecial:

; 3049 : 		return NULL;

	xor	eax, eax
$LN3@getSpecial:

; 3050 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getSpecialUnitInfo@CvGlobals@@QAEPAVCvSpecialUnitInfo@@W4SpecialUnitTypes@@@Z ENDP ; CvGlobals::getSpecialUnitInfo
_TEXT	ENDS
PUBLIC	?getNumVoteSourceInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumVoteSourceInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumVoteSourceInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259481 = -4						; size = 4
?getNumVoteSourceInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumVoteSourceInfos, COMDAT
; _this$ = ecx

; 3058 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3059 : 	return (int)m_paVoteSourceInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1364				; 00000554H
	mov	DWORD PTR $T259481[ebp], eax
	mov	ecx, DWORD PTR $T259481[ebp]
	mov	edx, DWORD PTR $T259481[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3060 : #endif
; 3061 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumVoteSourceInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumVoteSourceInfos
_TEXT	ENDS
PUBLIC	?getVoteSourceInfo@CvGlobals@@QAEAAV?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@XZ ; CvGlobals::getVoteSourceInfo
; Function compile flags: /Odtp
;	COMDAT ?getVoteSourceInfo@CvGlobals@@QAEAAV?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVoteSourceInfo@CvGlobals@@QAEAAV?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@XZ PROC ; CvGlobals::getVoteSourceInfo, COMDAT
; _this$ = ecx

; 3064 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3065 : 	return m_paVoteSourceInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1364				; 00000554H

; 3066 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getVoteSourceInfo@CvGlobals@@QAEAAV?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getVoteSourceInfo
_TEXT	ENDS
PUBLIC	?getVoteSourceInfo@CvGlobals@@QAEPAVCvVoteSourceInfo@@W4VoteSourceTypes@@@Z ; CvGlobals::getVoteSourceInfo
; Function compile flags: /Odtp
;	COMDAT ?getVoteSourceInfo@CvGlobals@@QAEPAVCvVoteSourceInfo@@W4VoteSourceTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259489 = -4						; size = 4
_e$ = 8							; size = 4
?getVoteSourceInfo@CvGlobals@@QAEPAVCvVoteSourceInfo@@W4VoteSourceTypes@@@Z PROC ; CvGlobals::getVoteSourceInfo, COMDAT
; _this$ = ecx

; 3077 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3078 : 	CvAssert(e > -1);
; 3079 : 	CvAssert(e < GC.getNumVoteSourceInfos());
; 3080 : 	if(e > -1 && e < (int)m_paVoteSourceInfo.size())

	cmp	DWORD PTR _e$[ebp], -1
	jle	SHORT $LN2@getVoteSou
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1364				; 00000554H
	mov	DWORD PTR $T259489[ebp], eax
	mov	ecx, DWORD PTR $T259489[ebp]
	mov	edx, DWORD PTR $T259489[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _e$[ebp], eax
	jge	SHORT $LN2@getVoteSou

; 3081 : 		return m_paVoteSourceInfo[e];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1368]
	mov	eax, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getVoteSou

; 3082 : #endif
; 3083 : 	else

	jmp	SHORT $LN3@getVoteSou
$LN2@getVoteSou:

; 3084 : 		return NULL;

	xor	eax, eax
$LN3@getVoteSou:

; 3085 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getVoteSourceInfo@CvGlobals@@QAEPAVCvVoteSourceInfo@@W4VoteSourceTypes@@@Z ENDP ; CvGlobals::getVoteSourceInfo
_TEXT	ENDS
PUBLIC	?getNumUnitCombatClassInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumUnitCombatClassInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumUnitCombatClassInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259498 = -4						; size = 4
?getNumUnitCombatClassInfos@CvGlobals@@QAEHXZ PROC	; CvGlobals::getNumUnitCombatClassInfos, COMDAT
; _this$ = ecx

; 3093 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3094 : 	return (int)m_paUnitCombatClassInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1380				; 00000564H
	mov	DWORD PTR $T259498[ebp], eax
	mov	ecx, DWORD PTR $T259498[ebp]
	mov	edx, DWORD PTR $T259498[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3095 : #endif
; 3096 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumUnitCombatClassInfos@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getNumUnitCombatClassInfos
_TEXT	ENDS
PUBLIC	?getUnitCombatClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@XZ ; CvGlobals::getUnitCombatClassInfo
; Function compile flags: /Odtp
;	COMDAT ?getUnitCombatClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUnitCombatClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@XZ PROC ; CvGlobals::getUnitCombatClassInfo, COMDAT
; _this$ = ecx

; 3099 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3100 : 	return m_paUnitCombatClassInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1380				; 00000564H

; 3101 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getUnitCombatClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getUnitCombatClassInfo
_TEXT	ENDS
PUBLIC	?getUnitCombatClassInfo@CvGlobals@@QAEPAVCvBaseInfo@@W4UnitCombatTypes@@@Z ; CvGlobals::getUnitCombatClassInfo
; Function compile flags: /Odtp
;	COMDAT ?getUnitCombatClassInfo@CvGlobals@@QAEPAVCvBaseInfo@@W4UnitCombatTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259506 = -4						; size = 4
_e$ = 8							; size = 4
?getUnitCombatClassInfo@CvGlobals@@QAEPAVCvBaseInfo@@W4UnitCombatTypes@@@Z PROC ; CvGlobals::getUnitCombatClassInfo, COMDAT
; _this$ = ecx

; 3112 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3113 : 	CvAssert(e > -1);
; 3114 : 	CvAssert(e < GC.getNumUnitCombatClassInfos());
; 3115 : 	if(e > -1 && e < (int)m_paUnitCombatClassInfo.size())

	cmp	DWORD PTR _e$[ebp], -1
	jle	SHORT $LN2@getUnitCom
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1380				; 00000564H
	mov	DWORD PTR $T259506[ebp], eax
	mov	ecx, DWORD PTR $T259506[ebp]
	mov	edx, DWORD PTR $T259506[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _e$[ebp], eax
	jge	SHORT $LN2@getUnitCom

; 3116 : 		return m_paUnitCombatClassInfo[e];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1384]
	mov	eax, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getUnitCom

; 3117 : #endif
; 3118 : 	else

	jmp	SHORT $LN3@getUnitCom
$LN2@getUnitCom:

; 3119 : 		return NULL;

	xor	eax, eax
$LN3@getUnitCom:

; 3120 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getUnitCombatClassInfo@CvGlobals@@QAEPAVCvBaseInfo@@W4UnitCombatTypes@@@Z ENDP ; CvGlobals::getUnitCombatClassInfo
_TEXT	ENDS
PUBLIC	?getUnitAIInfo@CvGlobals@@QAEAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@XZ ; CvGlobals::getUnitAIInfo
; Function compile flags: /Odtp
;	COMDAT ?getUnitAIInfo@CvGlobals@@QAEAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUnitAIInfo@CvGlobals@@QAEAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@XZ PROC ; CvGlobals::getUnitAIInfo, COMDAT
; _this$ = ecx

; 3123 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3124 : 	return m_paUnitAIInfos;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1396				; 00000574H

; 3125 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getUnitAIInfo@CvGlobals@@QAEAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getUnitAIInfo
_TEXT	ENDS
PUBLIC	?getUnitAIInfo@CvGlobals@@QAEPAVCvBaseInfo@@W4UnitAITypes@@@Z ; CvGlobals::getUnitAIInfo
; Function compile flags: /Odtp
;	COMDAT ?getUnitAIInfo@CvGlobals@@QAEPAVCvBaseInfo@@W4UnitAITypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259517 = -4						; size = 4
_eUnitAINum$ = 8					; size = 4
?getUnitAIInfo@CvGlobals@@QAEPAVCvBaseInfo@@W4UnitAITypes@@@Z PROC ; CvGlobals::getUnitAIInfo, COMDAT
; _this$ = ecx

; 3136 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3137 : 	CvAssert(eUnitAINum >= 0);
; 3138 : 	CvAssert(eUnitAINum < NUM_UNITAI_TYPES);
; 3139 : 	if(eUnitAINum > -1 && eUnitAINum < (int)m_paUnitAIInfos.size())

	cmp	DWORD PTR _eUnitAINum$[ebp], -1
	jle	SHORT $LN2@getUnitAII
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1396				; 00000574H
	mov	DWORD PTR $T259517[ebp], eax
	mov	ecx, DWORD PTR $T259517[ebp]
	mov	edx, DWORD PTR $T259517[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eUnitAINum$[ebp], eax
	jge	SHORT $LN2@getUnitAII

; 3140 : 		return m_paUnitAIInfos[eUnitAINum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1400]
	mov	eax, DWORD PTR _eUnitAINum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getUnitAII

; 3141 : #endif
; 3142 : 	else

	jmp	SHORT $LN3@getUnitAII
$LN2@getUnitAII:

; 3143 : 		return NULL;

	xor	eax, eax
$LN3@getUnitAII:

; 3144 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getUnitAIInfo@CvGlobals@@QAEPAVCvBaseInfo@@W4UnitAITypes@@@Z ENDP ; CvGlobals::getUnitAIInfo
_TEXT	ENDS
PUBLIC	?getNumGameOptionInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumGameOptionInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumGameOptionInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259526 = -4						; size = 4
?getNumGameOptionInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumGameOptionInfos, COMDAT
; _this$ = ecx

; 3152 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3153 : 	return (int)m_paGameOptionInfos.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1412				; 00000584H
	mov	DWORD PTR $T259526[ebp], eax
	mov	ecx, DWORD PTR $T259526[ebp]
	mov	edx, DWORD PTR $T259526[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3154 : #endif
; 3155 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumGameOptionInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumGameOptionInfos
_TEXT	ENDS
PUBLIC	?getGameOptionInfo@CvGlobals@@QAEAAV?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@XZ ; CvGlobals::getGameOptionInfo
; Function compile flags: /Odtp
;	COMDAT ?getGameOptionInfo@CvGlobals@@QAEAAV?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGameOptionInfo@CvGlobals@@QAEAAV?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@XZ PROC ; CvGlobals::getGameOptionInfo, COMDAT
; _this$ = ecx

; 3158 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3159 : 	return m_paGameOptionInfos;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1412				; 00000584H

; 3160 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGameOptionInfo@CvGlobals@@QAEAAV?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getGameOptionInfo
_TEXT	ENDS
PUBLIC	?getGameOptionInfo@CvGlobals@@QAEPAVCvGameOptionInfo@@W4GameOptionTypes@@@Z ; CvGlobals::getGameOptionInfo
; Function compile flags: /Odtp
;	COMDAT ?getGameOptionInfo@CvGlobals@@QAEPAVCvGameOptionInfo@@W4GameOptionTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259534 = -4						; size = 4
_eGameOptionNum$ = 8					; size = 4
?getGameOptionInfo@CvGlobals@@QAEPAVCvGameOptionInfo@@W4GameOptionTypes@@@Z PROC ; CvGlobals::getGameOptionInfo, COMDAT
; _this$ = ecx

; 3171 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3172 : 	CvAssert(eGameOptionNum >= 0);
; 3173 : 	CvAssert(eGameOptionNum < GC.getNumGameOptionInfos());
; 3174 : 	if(eGameOptionNum > -1 && eGameOptionNum < (int)m_paGameOptionInfos.size())

	cmp	DWORD PTR _eGameOptionNum$[ebp], -1
	jle	SHORT $LN2@getGameOpt
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1412				; 00000584H
	mov	DWORD PTR $T259534[ebp], eax
	mov	ecx, DWORD PTR $T259534[ebp]
	mov	edx, DWORD PTR $T259534[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eGameOptionNum$[ebp], eax
	jge	SHORT $LN2@getGameOpt

; 3175 : 		return m_paGameOptionInfos[eGameOptionNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1416]
	mov	eax, DWORD PTR _eGameOptionNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getGameOpt

; 3176 : #endif
; 3177 : 	else

	jmp	SHORT $LN3@getGameOpt
$LN2@getGameOpt:

; 3178 : 		return NULL;

	xor	eax, eax
$LN3@getGameOpt:

; 3179 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getGameOptionInfo@CvGlobals@@QAEPAVCvGameOptionInfo@@W4GameOptionTypes@@@Z ENDP ; CvGlobals::getGameOptionInfo
_TEXT	ENDS
PUBLIC	?getNumMPOptionInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumMPOptionInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumMPOptionInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259543 = -4						; size = 4
?getNumMPOptionInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumMPOptionInfos, COMDAT
; _this$ = ecx

; 3187 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3188 : 	return (int)m_paMPOptionInfos.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1428				; 00000594H
	mov	DWORD PTR $T259543[ebp], eax
	mov	ecx, DWORD PTR $T259543[ebp]
	mov	edx, DWORD PTR $T259543[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3189 : #endif
; 3190 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumMPOptionInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumMPOptionInfos
_TEXT	ENDS
PUBLIC	?getMPOptionInfo@CvGlobals@@QAEAAV?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@XZ ; CvGlobals::getMPOptionInfo
; Function compile flags: /Odtp
;	COMDAT ?getMPOptionInfo@CvGlobals@@QAEAAV?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMPOptionInfo@CvGlobals@@QAEAAV?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@XZ PROC ; CvGlobals::getMPOptionInfo, COMDAT
; _this$ = ecx

; 3193 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3194 : 	return m_paMPOptionInfos;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1428				; 00000594H

; 3195 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMPOptionInfo@CvGlobals@@QAEAAV?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getMPOptionInfo
_TEXT	ENDS
PUBLIC	?getMPOptionInfo@CvGlobals@@QAEPAVCvMPOptionInfo@@W4MultiplayerOptionTypes@@@Z ; CvGlobals::getMPOptionInfo
; Function compile flags: /Odtp
;	COMDAT ?getMPOptionInfo@CvGlobals@@QAEPAVCvMPOptionInfo@@W4MultiplayerOptionTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259551 = -4						; size = 4
_eMPOptionNum$ = 8					; size = 4
?getMPOptionInfo@CvGlobals@@QAEPAVCvMPOptionInfo@@W4MultiplayerOptionTypes@@@Z PROC ; CvGlobals::getMPOptionInfo, COMDAT
; _this$ = ecx

; 3206 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3207 : 	CvAssert(eMPOptionNum >= 0);
; 3208 : 	CvAssert(eMPOptionNum < GC.getNumMPOptionInfos());
; 3209 : 	if(eMPOptionNum > -1 && eMPOptionNum < (int)m_paMPOptionInfos.size())

	cmp	DWORD PTR _eMPOptionNum$[ebp], -1
	jle	SHORT $LN2@getMPOptio
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1428				; 00000594H
	mov	DWORD PTR $T259551[ebp], eax
	mov	ecx, DWORD PTR $T259551[ebp]
	mov	edx, DWORD PTR $T259551[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eMPOptionNum$[ebp], eax
	jge	SHORT $LN2@getMPOptio

; 3210 : 		return m_paMPOptionInfos[eMPOptionNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1432]
	mov	eax, DWORD PTR _eMPOptionNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getMPOptio

; 3211 : #endif
; 3212 : 	else

	jmp	SHORT $LN3@getMPOptio
$LN2@getMPOptio:

; 3213 : 		return NULL;

	xor	eax, eax
$LN3@getMPOptio:

; 3214 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getMPOptionInfo@CvGlobals@@QAEPAVCvMPOptionInfo@@W4MultiplayerOptionTypes@@@Z ENDP ; CvGlobals::getMPOptionInfo
_TEXT	ENDS
PUBLIC	?getPlayerOptionInfo@CvGlobals@@QAEAAV?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@XZ ; CvGlobals::getPlayerOptionInfo
; Function compile flags: /Odtp
;	COMDAT ?getPlayerOptionInfo@CvGlobals@@QAEAAV?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPlayerOptionInfo@CvGlobals@@QAEAAV?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@XZ PROC ; CvGlobals::getPlayerOptionInfo, COMDAT
; _this$ = ecx

; 3217 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3218 : 	return m_paPlayerOptionInfos;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1444				; 000005a4H

; 3219 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPlayerOptionInfo@CvGlobals@@QAEAAV?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getPlayerOptionInfo
_TEXT	ENDS
PUBLIC	?getPlayerOptionInfo@CvGlobals@@QAEPAVCvPlayerOptionInfo@@W4PlayerOptionTypes@@@Z ; CvGlobals::getPlayerOptionInfo
; Function compile flags: /Odtp
;	COMDAT ?getPlayerOptionInfo@CvGlobals@@QAEPAVCvPlayerOptionInfo@@W4PlayerOptionTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259562 = -4						; size = 4
_ePlayerOptionNum$ = 8					; size = 4
?getPlayerOptionInfo@CvGlobals@@QAEPAVCvPlayerOptionInfo@@W4PlayerOptionTypes@@@Z PROC ; CvGlobals::getPlayerOptionInfo, COMDAT
; _this$ = ecx

; 3230 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3231 : 	CvAssert(ePlayerOptionNum >= 0);
; 3232 : 	if(ePlayerOptionNum > -1 && ePlayerOptionNum < (int)m_paPlayerOptionInfos.size())

	cmp	DWORD PTR _ePlayerOptionNum$[ebp], -1
	jle	SHORT $LN2@getPlayerO
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1444				; 000005a4H
	mov	DWORD PTR $T259562[ebp], eax
	mov	ecx, DWORD PTR $T259562[ebp]
	mov	edx, DWORD PTR $T259562[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _ePlayerOptionNum$[ebp], eax
	jge	SHORT $LN2@getPlayerO

; 3233 : 		return m_paPlayerOptionInfos[ePlayerOptionNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1448]
	mov	eax, DWORD PTR _ePlayerOptionNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getPlayerO

; 3234 : #endif
; 3235 : 	else

	jmp	SHORT $LN3@getPlayerO
$LN2@getPlayerO:

; 3236 : 		return NULL;

	xor	eax, eax
$LN3@getPlayerO:

; 3237 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getPlayerOptionInfo@CvGlobals@@QAEPAVCvPlayerOptionInfo@@W4PlayerOptionTypes@@@Z ENDP ; CvGlobals::getPlayerOptionInfo
_TEXT	ENDS
PUBLIC	?getYieldInfo@CvGlobals@@QAEAAV?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@XZ ; CvGlobals::getYieldInfo
; Function compile flags: /Odtp
;	COMDAT ?getYieldInfo@CvGlobals@@QAEAAV?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getYieldInfo@CvGlobals@@QAEAAV?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@XZ PROC ; CvGlobals::getYieldInfo, COMDAT
; _this$ = ecx

; 3240 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3241 : 	return m_paYieldInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1084				; 0000043cH

; 3242 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getYieldInfo@CvGlobals@@QAEAAV?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getYieldInfo
_TEXT	ENDS
PUBLIC	?getYieldInfo@CvGlobals@@QAEPAVCvYieldInfo@@W4YieldTypes@@@Z ; CvGlobals::getYieldInfo
; Function compile flags: /Odtp
;	COMDAT ?getYieldInfo@CvGlobals@@QAEPAVCvYieldInfo@@W4YieldTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259573 = -4						; size = 4
_eYieldNum$ = 8						; size = 4
?getYieldInfo@CvGlobals@@QAEPAVCvYieldInfo@@W4YieldTypes@@@Z PROC ; CvGlobals::getYieldInfo, COMDAT
; _this$ = ecx

; 3257 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3258 : 	CvAssert(eYieldNum > -1);
; 3259 : 	CvAssert(eYieldNum < NUM_YIELD_TYPES);
; 3260 : 	if(eYieldNum > -1 && eYieldNum < (int)m_paYieldInfo.size())

	cmp	DWORD PTR _eYieldNum$[ebp], -1
	jle	SHORT $LN2@getYieldIn
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1084				; 0000043cH
	mov	DWORD PTR $T259573[ebp], eax
	mov	ecx, DWORD PTR $T259573[ebp]
	mov	edx, DWORD PTR $T259573[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eYieldNum$[ebp], eax
	jge	SHORT $LN2@getYieldIn

; 3261 : 		return m_paYieldInfo[eYieldNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1088]
	mov	eax, DWORD PTR _eYieldNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getYieldIn

; 3262 : #endif
; 3263 : 	else

	jmp	SHORT $LN3@getYieldIn
$LN2@getYieldIn:

; 3264 : 		return NULL;

	xor	eax, eax
$LN3@getYieldIn:

; 3265 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getYieldInfo@CvGlobals@@QAEPAVCvYieldInfo@@W4YieldTypes@@@Z ENDP ; CvGlobals::getYieldInfo
_TEXT	ENDS
PUBLIC	?getNumRouteInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumRouteInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumRouteInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259582 = -4						; size = 4
?getNumRouteInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumRouteInfos, COMDAT
; _this$ = ecx

; 3273 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3274 : 	return (int)m_paRouteInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1100				; 0000044cH
	mov	DWORD PTR $T259582[ebp], eax
	mov	ecx, DWORD PTR $T259582[ebp]
	mov	edx, DWORD PTR $T259582[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3275 : #endif
; 3276 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumRouteInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumRouteInfos
_TEXT	ENDS
PUBLIC	?getRouteInfo@CvGlobals@@QAEAAV?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@XZ ; CvGlobals::getRouteInfo
; Function compile flags: /Odtp
;	COMDAT ?getRouteInfo@CvGlobals@@QAEAAV?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRouteInfo@CvGlobals@@QAEAAV?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@XZ PROC ; CvGlobals::getRouteInfo, COMDAT
; _this$ = ecx

; 3279 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3280 : 	return m_paRouteInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1100				; 0000044cH

; 3281 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getRouteInfo@CvGlobals@@QAEAAV?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getRouteInfo
_TEXT	ENDS
PUBLIC	?getRouteInfo@CvGlobals@@QAEPAVCvRouteInfo@@W4RouteTypes@@@Z ; CvGlobals::getRouteInfo
; Function compile flags: /Odtp
;	COMDAT ?getRouteInfo@CvGlobals@@QAEPAVCvRouteInfo@@W4RouteTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259590 = -4						; size = 4
_eRouteNum$ = 8						; size = 4
?getRouteInfo@CvGlobals@@QAEPAVCvRouteInfo@@W4RouteTypes@@@Z PROC ; CvGlobals::getRouteInfo, COMDAT
; _this$ = ecx

; 3292 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3293 : 	CvAssert(eRouteNum > -1);
; 3294 : 	CvAssert(eRouteNum < GC.getNumRouteInfos());
; 3295 : 	if(eRouteNum > -1 && eRouteNum < (int)m_paRouteInfo.size())

	cmp	DWORD PTR _eRouteNum$[ebp], -1
	jle	SHORT $LN2@getRouteIn
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1100				; 0000044cH
	mov	DWORD PTR $T259590[ebp], eax
	mov	ecx, DWORD PTR $T259590[ebp]
	mov	edx, DWORD PTR $T259590[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eRouteNum$[ebp], eax
	jge	SHORT $LN2@getRouteIn

; 3296 : 		return m_paRouteInfo[eRouteNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1104]
	mov	eax, DWORD PTR _eRouteNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getRouteIn

; 3297 : #endif
; 3298 : 	else

	jmp	SHORT $LN3@getRouteIn
$LN2@getRouteIn:

; 3299 : 		return NULL;

	xor	eax, eax
$LN3@getRouteIn:

; 3300 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getRouteInfo@CvGlobals@@QAEPAVCvRouteInfo@@W4RouteTypes@@@Z ENDP ; CvGlobals::getRouteInfo
_TEXT	ENDS
PUBLIC	?getNumImprovementInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumImprovementInfos
EXTRN	?GetNumImprovements@CvImprovementXMLEntries@@QAEHXZ:PROC ; CvImprovementXMLEntries::GetNumImprovements
; Function compile flags: /Odtp
;	COMDAT ?getNumImprovementInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumImprovementInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumImprovementInfos, COMDAT
; _this$ = ecx

; 3307 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3308 : 	return m_pImprovements->GetNumImprovements();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1716]
	call	?GetNumImprovements@CvImprovementXMLEntries@@QAEHXZ ; CvImprovementXMLEntries::GetNumImprovements

; 3309 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumImprovementInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumImprovementInfos
_TEXT	ENDS
PUBLIC	?getImprovementInfo@CvGlobals@@QAEAAV?$vector@PAVCvImprovementEntry@@V?$allocator@PAVCvImprovementEntry@@@std@@@std@@XZ ; CvGlobals::getImprovementInfo
EXTRN	?GetImprovementEntries@CvImprovementXMLEntries@@QAEAAV?$vector@PAVCvImprovementEntry@@V?$allocator@PAVCvImprovementEntry@@@std@@@std@@XZ:PROC ; CvImprovementXMLEntries::GetImprovementEntries
; Function compile flags: /Odtp
;	COMDAT ?getImprovementInfo@CvGlobals@@QAEAAV?$vector@PAVCvImprovementEntry@@V?$allocator@PAVCvImprovementEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getImprovementInfo@CvGlobals@@QAEAAV?$vector@PAVCvImprovementEntry@@V?$allocator@PAVCvImprovementEntry@@@std@@@std@@XZ PROC ; CvGlobals::getImprovementInfo, COMDAT
; _this$ = ecx

; 3312 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3313 : 	return m_pImprovements->GetImprovementEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1716]
	call	?GetImprovementEntries@CvImprovementXMLEntries@@QAEAAV?$vector@PAVCvImprovementEntry@@V?$allocator@PAVCvImprovementEntry@@@std@@@std@@XZ ; CvImprovementXMLEntries::GetImprovementEntries

; 3314 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getImprovementInfo@CvGlobals@@QAEAAV?$vector@PAVCvImprovementEntry@@V?$allocator@PAVCvImprovementEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getImprovementInfo
_TEXT	ENDS
PUBLIC	?getImprovementInfo@CvGlobals@@QAEPAVCvImprovementEntry@@W4ImprovementTypes@@@Z ; CvGlobals::getImprovementInfo
; Function compile flags: /Odtp
;	COMDAT ?getImprovementInfo@CvGlobals@@QAEPAVCvImprovementEntry@@W4ImprovementTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259603 = -4						; size = 4
_eImprovementNum$ = 8					; size = 4
?getImprovementInfo@CvGlobals@@QAEPAVCvImprovementEntry@@W4ImprovementTypes@@@Z PROC ; CvGlobals::getImprovementInfo, COMDAT
; _this$ = ecx

; 3317 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3318 : #ifdef AUI_WARNING_FIXES
; 3319 : 	uint uiIndex = uint(eImprovementNum);
; 3320 : 	CvAssert(uiIndex < GC.getNumImprovementInfos());
; 3321 : 	if (uiIndex < GC.getNumImprovementInfos())
; 3322 : 		return m_pImprovements->GetImprovementEntries()[uiIndex];
; 3323 : #else
; 3324 : 	CvAssert(eImprovementNum > -1);
; 3325 : 	CvAssert(eImprovementNum < GC.getNumImprovementInfos());
; 3326 : 	if(eImprovementNum > -1 && eImprovementNum < GC.getNumImprovementInfos())

	cmp	DWORD PTR _eImprovementNum$[ebp], -1
	jle	SHORT $LN2@getImprove
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumImprovementInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumImprovementInfos
	cmp	DWORD PTR _eImprovementNum$[ebp], eax
	jge	SHORT $LN2@getImprove

; 3327 : 		return m_pImprovements->GetImprovementEntries()[eImprovementNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1716]
	call	?GetImprovementEntries@CvImprovementXMLEntries@@QAEAAV?$vector@PAVCvImprovementEntry@@V?$allocator@PAVCvImprovementEntry@@@std@@@std@@XZ ; CvImprovementXMLEntries::GetImprovementEntries
	mov	DWORD PTR $T259603[ebp], eax
	mov	ecx, DWORD PTR $T259603[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eImprovementNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getImprove

; 3328 : #endif
; 3329 : 	else

	jmp	SHORT $LN3@getImprove
$LN2@getImprove:

; 3330 : 		return NULL;

	xor	eax, eax
$LN3@getImprove:

; 3331 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getImprovementInfo@CvGlobals@@QAEPAVCvImprovementEntry@@W4ImprovementTypes@@@Z ENDP ; CvGlobals::getImprovementInfo
_TEXT	ENDS
PUBLIC	?GetGameImprovements@CvGlobals@@QBEPAVCvImprovementXMLEntries@@XZ ; CvGlobals::GetGameImprovements
; Function compile flags: /Odtp
;	COMDAT ?GetGameImprovements@CvGlobals@@QBEPAVCvImprovementXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameImprovements@CvGlobals@@QBEPAVCvImprovementXMLEntries@@XZ PROC ; CvGlobals::GetGameImprovements, COMDAT
; _this$ = ecx

; 3334 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3335 : 	return m_pImprovements;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1716]

; 3336 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameImprovements@CvGlobals@@QBEPAVCvImprovementXMLEntries@@XZ ENDP ; CvGlobals::GetGameImprovements
_TEXT	ENDS
PUBLIC	?getNumBuildInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumBuildInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumBuildInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259611 = -4						; size = 4
?getNumBuildInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumBuildInfos, COMDAT
; _this$ = ecx

; 3344 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3345 : 	return (int)m_paBuildInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1164				; 0000048cH
	mov	DWORD PTR $T259611[ebp], eax
	mov	ecx, DWORD PTR $T259611[ebp]
	mov	edx, DWORD PTR $T259611[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3346 : #endif
; 3347 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumBuildInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumBuildInfos
_TEXT	ENDS
PUBLIC	?getBuildInfo@CvGlobals@@QAEAAV?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@XZ ; CvGlobals::getBuildInfo
; Function compile flags: /Odtp
;	COMDAT ?getBuildInfo@CvGlobals@@QAEAAV?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBuildInfo@CvGlobals@@QAEAAV?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@XZ PROC ; CvGlobals::getBuildInfo, COMDAT
; _this$ = ecx

; 3350 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3351 : 	return m_paBuildInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1164				; 0000048cH

; 3352 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBuildInfo@CvGlobals@@QAEAAV?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getBuildInfo
_TEXT	ENDS
PUBLIC	?getBuildInfo@CvGlobals@@QAEPAVCvBuildInfo@@W4BuildTypes@@@Z ; CvGlobals::getBuildInfo
; Function compile flags: /Odtp
;	COMDAT ?getBuildInfo@CvGlobals@@QAEPAVCvBuildInfo@@W4BuildTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259619 = -4						; size = 4
_eBuildNum$ = 8						; size = 4
?getBuildInfo@CvGlobals@@QAEPAVCvBuildInfo@@W4BuildTypes@@@Z PROC ; CvGlobals::getBuildInfo, COMDAT
; _this$ = ecx

; 3355 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3356 : #ifdef AUI_WARNING_FIXES
; 3357 : 	uint uiIndex = uint(eBuildNum);
; 3358 : 	CvAssert(uiIndex < GC.getNumBuildInfos());
; 3359 : 	if (uiIndex < m_paBuildInfo.size())
; 3360 : 		return m_paBuildInfo[uiIndex];
; 3361 : #else
; 3362 : 	CvAssert(eBuildNum > -1);
; 3363 : 	CvAssert(eBuildNum < GC.getNumBuildInfos());
; 3364 : 	if(eBuildNum > -1 && eBuildNum < (int)m_paBuildInfo.size())

	cmp	DWORD PTR _eBuildNum$[ebp], -1
	jle	SHORT $LN2@getBuildIn
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1164				; 0000048cH
	mov	DWORD PTR $T259619[ebp], eax
	mov	ecx, DWORD PTR $T259619[ebp]
	mov	edx, DWORD PTR $T259619[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eBuildNum$[ebp], eax
	jge	SHORT $LN2@getBuildIn

; 3365 : 		return m_paBuildInfo[eBuildNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1168]
	mov	eax, DWORD PTR _eBuildNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getBuildIn

; 3366 : #endif
; 3367 : 	else

	jmp	SHORT $LN3@getBuildIn
$LN2@getBuildIn:

; 3368 : 		return NULL;

	xor	eax, eax
$LN3@getBuildIn:

; 3369 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getBuildInfo@CvGlobals@@QAEPAVCvBuildInfo@@W4BuildTypes@@@Z ENDP ; CvGlobals::getBuildInfo
_TEXT	ENDS
PUBLIC	?getNumHandicapInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumHandicapInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumHandicapInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259628 = -4						; size = 4
?getNumHandicapInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumHandicapInfos, COMDAT
; _this$ = ecx

; 3377 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3378 : 	return (int)m_paHandicapInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1180				; 0000049cH
	mov	DWORD PTR $T259628[ebp], eax
	mov	ecx, DWORD PTR $T259628[ebp]
	mov	edx, DWORD PTR $T259628[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3379 : #endif
; 3380 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumHandicapInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumHandicapInfos
_TEXT	ENDS
PUBLIC	?getHandicapInfo@CvGlobals@@QAEAAV?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@XZ ; CvGlobals::getHandicapInfo
; Function compile flags: /Odtp
;	COMDAT ?getHandicapInfo@CvGlobals@@QAEAAV?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHandicapInfo@CvGlobals@@QAEAAV?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@XZ PROC ; CvGlobals::getHandicapInfo, COMDAT
; _this$ = ecx

; 3383 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3384 : 	return m_paHandicapInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1180				; 0000049cH

; 3385 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHandicapInfo@CvGlobals@@QAEAAV?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getHandicapInfo
_TEXT	ENDS
PUBLIC	?getHandicapInfo@CvGlobals@@QAEPAVCvHandicapInfo@@W4HandicapTypes@@@Z ; CvGlobals::getHandicapInfo
; Function compile flags: /Odtp
;	COMDAT ?getHandicapInfo@CvGlobals@@QAEPAVCvHandicapInfo@@W4HandicapTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259636 = -4						; size = 4
_eHandicapNum$ = 8					; size = 4
?getHandicapInfo@CvGlobals@@QAEPAVCvHandicapInfo@@W4HandicapTypes@@@Z PROC ; CvGlobals::getHandicapInfo, COMDAT
; _this$ = ecx

; 3396 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3397 : 	CvAssert(eHandicapNum > -1);
; 3398 : 	CvAssert(eHandicapNum < GC.getNumHandicapInfos());
; 3399 : 	if(eHandicapNum > -1 && eHandicapNum < (int)m_paHandicapInfo.size())

	cmp	DWORD PTR _eHandicapNum$[ebp], -1
	jle	SHORT $LN2@getHandica
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1180				; 0000049cH
	mov	DWORD PTR $T259636[ebp], eax
	mov	ecx, DWORD PTR $T259636[ebp]
	mov	edx, DWORD PTR $T259636[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eHandicapNum$[ebp], eax
	jge	SHORT $LN2@getHandica

; 3400 : 		return m_paHandicapInfo[eHandicapNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1184]
	mov	eax, DWORD PTR _eHandicapNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getHandica

; 3401 : #endif
; 3402 : 	else

	jmp	SHORT $LN3@getHandica
$LN2@getHandica:

; 3403 : 		return NULL;

	xor	eax, eax
$LN3@getHandica:

; 3404 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getHandicapInfo@CvGlobals@@QAEPAVCvHandicapInfo@@W4HandicapTypes@@@Z ENDP ; CvGlobals::getHandicapInfo
_TEXT	ENDS
PUBLIC	?getNumGameSpeedInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumGameSpeedInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumGameSpeedInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259645 = -4						; size = 4
?getNumGameSpeedInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumGameSpeedInfos, COMDAT
; _this$ = ecx

; 3412 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3413 : 	return (int)m_paGameSpeedInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1196				; 000004acH
	mov	DWORD PTR $T259645[ebp], eax
	mov	ecx, DWORD PTR $T259645[ebp]
	mov	edx, DWORD PTR $T259645[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3414 : #endif
; 3415 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumGameSpeedInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumGameSpeedInfos
_TEXT	ENDS
PUBLIC	?getGameSpeedInfo@CvGlobals@@QAEAAV?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@XZ ; CvGlobals::getGameSpeedInfo
; Function compile flags: /Odtp
;	COMDAT ?getGameSpeedInfo@CvGlobals@@QAEAAV?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGameSpeedInfo@CvGlobals@@QAEAAV?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@XZ PROC ; CvGlobals::getGameSpeedInfo, COMDAT
; _this$ = ecx

; 3418 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3419 : 	return m_paGameSpeedInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1196				; 000004acH

; 3420 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGameSpeedInfo@CvGlobals@@QAEAAV?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getGameSpeedInfo
_TEXT	ENDS
PUBLIC	?getGameSpeedInfo@CvGlobals@@QAEPAVCvGameSpeedInfo@@W4GameSpeedTypes@@@Z ; CvGlobals::getGameSpeedInfo
; Function compile flags: /Odtp
;	COMDAT ?getGameSpeedInfo@CvGlobals@@QAEPAVCvGameSpeedInfo@@W4GameSpeedTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259653 = -4						; size = 4
_eGameSpeedNum$ = 8					; size = 4
?getGameSpeedInfo@CvGlobals@@QAEPAVCvGameSpeedInfo@@W4GameSpeedTypes@@@Z PROC ; CvGlobals::getGameSpeedInfo, COMDAT
; _this$ = ecx

; 3431 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3432 : 	CvAssert(eGameSpeedNum > -1);
; 3433 : 	CvAssert(eGameSpeedNum < GC.getNumGameSpeedInfos());
; 3434 : 	if(eGameSpeedNum > -1 && eGameSpeedNum < (int)m_paGameSpeedInfo.size())

	cmp	DWORD PTR _eGameSpeedNum$[ebp], -1
	jle	SHORT $LN2@getGameSpe
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1196				; 000004acH
	mov	DWORD PTR $T259653[ebp], eax
	mov	ecx, DWORD PTR $T259653[ebp]
	mov	edx, DWORD PTR $T259653[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eGameSpeedNum$[ebp], eax
	jge	SHORT $LN2@getGameSpe

; 3435 : 		return m_paGameSpeedInfo[eGameSpeedNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1200]
	mov	eax, DWORD PTR _eGameSpeedNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getGameSpe

; 3436 : #endif
; 3437 : 	else

	jmp	SHORT $LN3@getGameSpe
$LN2@getGameSpe:

; 3438 : 		return NULL;

	xor	eax, eax
$LN3@getGameSpe:

; 3439 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getGameSpeedInfo@CvGlobals@@QAEPAVCvGameSpeedInfo@@W4GameSpeedTypes@@@Z ENDP ; CvGlobals::getGameSpeedInfo
_TEXT	ENDS
PUBLIC	?getNumProcessInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumProcessInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumProcessInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259662 = -4						; size = 4
?getNumProcessInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumProcessInfos, COMDAT
; _this$ = ecx

; 3447 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3448 : 	return (int)m_paProcessInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1284				; 00000504H
	mov	DWORD PTR $T259662[ebp], eax
	mov	ecx, DWORD PTR $T259662[ebp]
	mov	edx, DWORD PTR $T259662[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3449 : #endif
; 3450 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumProcessInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumProcessInfos
_TEXT	ENDS
PUBLIC	?getProcessInfo@CvGlobals@@QAEAAV?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@XZ ; CvGlobals::getProcessInfo
; Function compile flags: /Odtp
;	COMDAT ?getProcessInfo@CvGlobals@@QAEAAV?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getProcessInfo@CvGlobals@@QAEAAV?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@XZ PROC ; CvGlobals::getProcessInfo, COMDAT
; _this$ = ecx

; 3453 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3454 : 	return m_paProcessInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1284				; 00000504H

; 3455 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getProcessInfo@CvGlobals@@QAEAAV?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getProcessInfo
_TEXT	ENDS
PUBLIC	?getProcessInfo@CvGlobals@@QAEPAVCvProcessInfo@@W4ProcessTypes@@@Z ; CvGlobals::getProcessInfo
; Function compile flags: /Odtp
;	COMDAT ?getProcessInfo@CvGlobals@@QAEPAVCvProcessInfo@@W4ProcessTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259670 = -4						; size = 4
_e$ = 8							; size = 4
?getProcessInfo@CvGlobals@@QAEPAVCvProcessInfo@@W4ProcessTypes@@@Z PROC ; CvGlobals::getProcessInfo, COMDAT
; _this$ = ecx

; 3458 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3459 : #ifdef AUI_WARNING_FIXES
; 3460 : 	uint uiIndex = uint(e);
; 3461 : 	CvAssert(uiIndex < GC.getNumProcessInfos());
; 3462 : 	if (uiIndex < m_paProcessInfo.size())
; 3463 : 		return m_paProcessInfo[uiIndex];
; 3464 : #else
; 3465 : 	CvAssert(e > -1);
; 3466 : 	CvAssert(e < GC.getNumProcessInfos());
; 3467 : 	if(e > -1 && e < (int)m_paProcessInfo.size())

	cmp	DWORD PTR _e$[ebp], -1
	jle	SHORT $LN2@getProcess
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1284				; 00000504H
	mov	DWORD PTR $T259670[ebp], eax
	mov	ecx, DWORD PTR $T259670[ebp]
	mov	edx, DWORD PTR $T259670[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _e$[ebp], eax
	jge	SHORT $LN2@getProcess

; 3468 : 		return m_paProcessInfo[e];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1288]
	mov	eax, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getProcess

; 3469 : #endif
; 3470 : 	else

	jmp	SHORT $LN3@getProcess
$LN2@getProcess:

; 3471 : 		return NULL;

	xor	eax, eax
$LN3@getProcess:

; 3472 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getProcessInfo@CvGlobals@@QAEPAVCvProcessInfo@@W4ProcessTypes@@@Z ENDP ; CvGlobals::getProcessInfo
_TEXT	ENDS
PUBLIC	?getNumVoteInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumVoteInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumVoteInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259679 = -4						; size = 4
?getNumVoteInfos@CvGlobals@@QAEHXZ PROC			; CvGlobals::getNumVoteInfos, COMDAT
; _this$ = ecx

; 3480 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3481 : 	return (int)m_paVoteInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1300				; 00000514H
	mov	DWORD PTR $T259679[ebp], eax
	mov	ecx, DWORD PTR $T259679[ebp]
	mov	edx, DWORD PTR $T259679[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3482 : #endif
; 3483 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumVoteInfos@CvGlobals@@QAEHXZ ENDP			; CvGlobals::getNumVoteInfos
_TEXT	ENDS
PUBLIC	?getVoteInfo@CvGlobals@@QAEAAV?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@XZ ; CvGlobals::getVoteInfo
; Function compile flags: /Odtp
;	COMDAT ?getVoteInfo@CvGlobals@@QAEAAV?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVoteInfo@CvGlobals@@QAEAAV?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@XZ PROC ; CvGlobals::getVoteInfo, COMDAT
; _this$ = ecx

; 3486 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3487 : 	return m_paVoteInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1300				; 00000514H

; 3488 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getVoteInfo@CvGlobals@@QAEAAV?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getVoteInfo
_TEXT	ENDS
PUBLIC	?getVoteInfo@CvGlobals@@QAEPAVCvVoteInfo@@W4VoteTypes@@@Z ; CvGlobals::getVoteInfo
; Function compile flags: /Odtp
;	COMDAT ?getVoteInfo@CvGlobals@@QAEPAVCvVoteInfo@@W4VoteTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259687 = -4						; size = 4
_e$ = 8							; size = 4
?getVoteInfo@CvGlobals@@QAEPAVCvVoteInfo@@W4VoteTypes@@@Z PROC ; CvGlobals::getVoteInfo, COMDAT
; _this$ = ecx

; 3491 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3492 : #ifdef AUI_WARNING_FIXES
; 3493 : 	uint uiIndex = uint(e);
; 3494 : 	CvAssert(uiIndex < GC.getNumVoteInfos());
; 3495 : 	if (uiIndex < m_paVoteInfo.size())
; 3496 : 		return m_paVoteInfo[uiIndex];
; 3497 : #else
; 3498 : 	CvAssert(e > -1);
; 3499 : 	CvAssert(e < GC.getNumVoteInfos());
; 3500 : 	if(e > -1 && e < (int)m_paVoteInfo.size())

	cmp	DWORD PTR _e$[ebp], -1
	jle	SHORT $LN2@getVoteInf
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1300				; 00000514H
	mov	DWORD PTR $T259687[ebp], eax
	mov	ecx, DWORD PTR $T259687[ebp]
	mov	edx, DWORD PTR $T259687[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _e$[ebp], eax
	jge	SHORT $LN2@getVoteInf

; 3501 : 		return m_paVoteInfo[e];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1304]
	mov	eax, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getVoteInf

; 3502 : #endif
; 3503 : 	else

	jmp	SHORT $LN3@getVoteInf
$LN2@getVoteInf:

; 3504 : 		return NULL;

	xor	eax, eax
$LN3@getVoteInf:

; 3505 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getVoteInfo@CvGlobals@@QAEPAVCvVoteInfo@@W4VoteTypes@@@Z ENDP ; CvGlobals::getVoteInfo
_TEXT	ENDS
PUBLIC	?getNumProjectInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumProjectInfos
EXTRN	?GetNumProjects@CvProjectXMLEntries@@QAEHXZ:PROC ; CvProjectXMLEntries::GetNumProjects
; Function compile flags: /Odtp
;	COMDAT ?getNumProjectInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumProjectInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumProjectInfos, COMDAT
; _this$ = ecx

; 3512 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3513 : 	return m_pProjects->GetNumProjects();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1708]
	call	?GetNumProjects@CvProjectXMLEntries@@QAEHXZ ; CvProjectXMLEntries::GetNumProjects

; 3514 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumProjectInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumProjectInfos
_TEXT	ENDS
PUBLIC	?getProjectInfo@CvGlobals@@QAEAAV?$vector@PAVCvProjectEntry@@V?$allocator@PAVCvProjectEntry@@@std@@@std@@XZ ; CvGlobals::getProjectInfo
EXTRN	?GetProjectEntries@CvProjectXMLEntries@@QAEAAV?$vector@PAVCvProjectEntry@@V?$allocator@PAVCvProjectEntry@@@std@@@std@@XZ:PROC ; CvProjectXMLEntries::GetProjectEntries
; Function compile flags: /Odtp
;	COMDAT ?getProjectInfo@CvGlobals@@QAEAAV?$vector@PAVCvProjectEntry@@V?$allocator@PAVCvProjectEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getProjectInfo@CvGlobals@@QAEAAV?$vector@PAVCvProjectEntry@@V?$allocator@PAVCvProjectEntry@@@std@@@std@@XZ PROC ; CvGlobals::getProjectInfo, COMDAT
; _this$ = ecx

; 3517 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3518 : 	return m_pProjects->GetProjectEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1708]
	call	?GetProjectEntries@CvProjectXMLEntries@@QAEAAV?$vector@PAVCvProjectEntry@@V?$allocator@PAVCvProjectEntry@@@std@@@std@@XZ ; CvProjectXMLEntries::GetProjectEntries

; 3519 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getProjectInfo@CvGlobals@@QAEAAV?$vector@PAVCvProjectEntry@@V?$allocator@PAVCvProjectEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getProjectInfo
_TEXT	ENDS
PUBLIC	?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z ; CvGlobals::getProjectInfo
; Function compile flags: /Odtp
;	COMDAT ?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259700 = -4						; size = 4
_e$ = 8							; size = 4
?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z PROC ; CvGlobals::getProjectInfo, COMDAT
; _this$ = ecx

; 3522 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3523 : #ifdef AUI_WARNING_FIXES
; 3524 : 	uint uiIndex = uint(e);
; 3525 : 	CvAssert(uiIndex < GC.getNumProjectInfos());
; 3526 : 	if (uiIndex < GC.getNumProjectInfos())
; 3527 : 		return m_pProjects->GetProjectEntries()[uiIndex];
; 3528 : #else
; 3529 : 	CvAssert(e > -1);
; 3530 : 	CvAssert(e < GC.getNumProjectInfos());
; 3531 : 	if(e > -1 && e < GC.getNumProjectInfos())

	cmp	DWORD PTR _e$[ebp], -1
	jle	SHORT $LN2@getProject
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumProjectInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProjectInfos
	cmp	DWORD PTR _e$[ebp], eax
	jge	SHORT $LN2@getProject

; 3532 : 		return m_pProjects->GetProjectEntries()[e];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1708]
	call	?GetProjectEntries@CvProjectXMLEntries@@QAEAAV?$vector@PAVCvProjectEntry@@V?$allocator@PAVCvProjectEntry@@@std@@@std@@XZ ; CvProjectXMLEntries::GetProjectEntries
	mov	DWORD PTR $T259700[ebp], eax
	mov	ecx, DWORD PTR $T259700[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getProject

; 3533 : #endif
; 3534 : 	else

	jmp	SHORT $LN3@getProject
$LN2@getProject:

; 3535 : 		return NULL;

	xor	eax, eax
$LN3@getProject:

; 3536 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z ENDP ; CvGlobals::getProjectInfo
_TEXT	ENDS
PUBLIC	?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ ; CvGlobals::GetGameProjects
; Function compile flags: /Odtp
;	COMDAT ?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ PROC ; CvGlobals::GetGameProjects, COMDAT
; _this$ = ecx

; 3539 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3540 : 	return m_pProjects;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1708]

; 3541 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ ENDP ; CvGlobals::GetGameProjects
_TEXT	ENDS
PUBLIC	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumBuildingClassInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumBuildingClassInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259708 = -4						; size = 4
?getNumBuildingClassInfos@CvGlobals@@QAEHXZ PROC	; CvGlobals::getNumBuildingClassInfos, COMDAT
; _this$ = ecx

; 3549 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3550 : 	return (int)m_paBuildingClassInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1316				; 00000524H
	mov	DWORD PTR $T259708[ebp], eax
	mov	ecx, DWORD PTR $T259708[ebp]
	mov	edx, DWORD PTR $T259708[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3551 : #endif
; 3552 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getNumBuildingClassInfos
_TEXT	ENDS
PUBLIC	?getBuildingClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@XZ ; CvGlobals::getBuildingClassInfo
; Function compile flags: /Odtp
;	COMDAT ?getBuildingClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBuildingClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@XZ PROC ; CvGlobals::getBuildingClassInfo, COMDAT
; _this$ = ecx

; 3555 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3556 : 	return m_paBuildingClassInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1316				; 00000524H

; 3557 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBuildingClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getBuildingClassInfo
_TEXT	ENDS
PUBLIC	?getBuildingClassInfo@CvGlobals@@QAEPAVCvBuildingClassInfo@@W4BuildingClassTypes@@@Z ; CvGlobals::getBuildingClassInfo
; Function compile flags: /Odtp
;	COMDAT ?getBuildingClassInfo@CvGlobals@@QAEPAVCvBuildingClassInfo@@W4BuildingClassTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259716 = -4						; size = 4
_eBuildingClassNum$ = 8					; size = 4
?getBuildingClassInfo@CvGlobals@@QAEPAVCvBuildingClassInfo@@W4BuildingClassTypes@@@Z PROC ; CvGlobals::getBuildingClassInfo, COMDAT
; _this$ = ecx

; 3568 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3569 : 	CvAssert(eBuildingClassNum > -1);
; 3570 : 	CvAssert(eBuildingClassNum < GC.getNumBuildingClassInfos());
; 3571 : 	if(eBuildingClassNum > -1 && eBuildingClassNum < (int)m_paBuildingClassInfo.size())

	cmp	DWORD PTR _eBuildingClassNum$[ebp], -1
	jle	SHORT $LN2@getBuildin
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1316				; 00000524H
	mov	DWORD PTR $T259716[ebp], eax
	mov	ecx, DWORD PTR $T259716[ebp]
	mov	edx, DWORD PTR $T259716[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eBuildingClassNum$[ebp], eax
	jge	SHORT $LN2@getBuildin

; 3572 : 		return m_paBuildingClassInfo[eBuildingClassNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1320]
	mov	eax, DWORD PTR _eBuildingClassNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getBuildin

; 3573 : #endif
; 3574 : 	else

	jmp	SHORT $LN3@getBuildin
$LN2@getBuildin:

; 3575 : 		return NULL;

	xor	eax, eax
$LN3@getBuildin:

; 3576 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getBuildingClassInfo@CvGlobals@@QAEPAVCvBuildingClassInfo@@W4BuildingClassTypes@@@Z ENDP ; CvGlobals::getBuildingClassInfo
_TEXT	ENDS
PUBLIC	?getNumBuildingInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumBuildingInfos
EXTRN	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ:PROC ; CvBuildingXMLEntries::GetNumBuildings
; Function compile flags: /Odtp
;	COMDAT ?getNumBuildingInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumBuildingInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumBuildingInfos, COMDAT
; _this$ = ecx

; 3583 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3584 : 	return m_pBuildings->GetNumBuildings();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1700]
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings

; 3585 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumBuildingInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumBuildingInfos
_TEXT	ENDS
PUBLIC	?getBuildingInfo@CvGlobals@@QAEAAV?$vector@PAVCvBuildingEntry@@V?$allocator@PAVCvBuildingEntry@@@std@@@std@@XZ ; CvGlobals::getBuildingInfo
EXTRN	?GetBuildingEntries@CvBuildingXMLEntries@@QAEAAV?$vector@PAVCvBuildingEntry@@V?$allocator@PAVCvBuildingEntry@@@std@@@std@@XZ:PROC ; CvBuildingXMLEntries::GetBuildingEntries
; Function compile flags: /Odtp
;	COMDAT ?getBuildingInfo@CvGlobals@@QAEAAV?$vector@PAVCvBuildingEntry@@V?$allocator@PAVCvBuildingEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBuildingInfo@CvGlobals@@QAEAAV?$vector@PAVCvBuildingEntry@@V?$allocator@PAVCvBuildingEntry@@@std@@@std@@XZ PROC ; CvGlobals::getBuildingInfo, COMDAT
; _this$ = ecx

; 3588 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3589 : 	return m_pBuildings->GetBuildingEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1700]
	call	?GetBuildingEntries@CvBuildingXMLEntries@@QAEAAV?$vector@PAVCvBuildingEntry@@V?$allocator@PAVCvBuildingEntry@@@std@@@std@@XZ ; CvBuildingXMLEntries::GetBuildingEntries

; 3590 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBuildingInfo@CvGlobals@@QAEAAV?$vector@PAVCvBuildingEntry@@V?$allocator@PAVCvBuildingEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getBuildingInfo
_TEXT	ENDS
PUBLIC	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
; Function compile flags: /Odtp
;	COMDAT ?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259729 = -4						; size = 4
_eBuildingNum$ = 8					; size = 4
?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z PROC ; CvGlobals::getBuildingInfo, COMDAT
; _this$ = ecx

; 3601 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3602 : 	CvAssert(eBuildingNum > -1);
; 3603 : 	CvAssert(eBuildingNum < GC.getNumBuildingInfos());
; 3604 : 	if(eBuildingNum > -1 && eBuildingNum < GC.getNumBuildingInfos())

	cmp	DWORD PTR _eBuildingNum$[ebp], -1
	jle	SHORT $LN2@getBuildin@2
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumBuildingInfos
	cmp	DWORD PTR _eBuildingNum$[ebp], eax
	jge	SHORT $LN2@getBuildin@2

; 3605 : 		return m_pBuildings->GetBuildingEntries()[eBuildingNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1700]
	call	?GetBuildingEntries@CvBuildingXMLEntries@@QAEAAV?$vector@PAVCvBuildingEntry@@V?$allocator@PAVCvBuildingEntry@@@std@@@std@@XZ ; CvBuildingXMLEntries::GetBuildingEntries
	mov	DWORD PTR $T259729[ebp], eax
	mov	ecx, DWORD PTR $T259729[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eBuildingNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getBuildin@2

; 3606 : #endif
; 3607 : 	else

	jmp	SHORT $LN3@getBuildin@2
$LN2@getBuildin@2:

; 3608 : 		return NULL;

	xor	eax, eax
$LN3@getBuildin@2:

; 3609 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ENDP ; CvGlobals::getBuildingInfo
_TEXT	ENDS
PUBLIC	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
; Function compile flags: /Odtp
;	COMDAT ?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ PROC ; CvGlobals::GetGameBuildings, COMDAT
; _this$ = ecx

; 3612 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3613 : 	return m_pBuildings;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1700]

; 3614 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ENDP ; CvGlobals::GetGameBuildings
_TEXT	ENDS
PUBLIC	?getNumUnitClassInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumUnitClassInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumUnitClassInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259737 = -4						; size = 4
?getNumUnitClassInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumUnitClassInfos, COMDAT
; _this$ = ecx

; 3622 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3623 : 	return (int)m_paUnitClassInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1332				; 00000534H
	mov	DWORD PTR $T259737[ebp], eax
	mov	ecx, DWORD PTR $T259737[ebp]
	mov	edx, DWORD PTR $T259737[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3624 : #endif
; 3625 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumUnitClassInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumUnitClassInfos
_TEXT	ENDS
PUBLIC	?getUnitClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@XZ ; CvGlobals::getUnitClassInfo
; Function compile flags: /Odtp
;	COMDAT ?getUnitClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUnitClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@XZ PROC ; CvGlobals::getUnitClassInfo, COMDAT
; _this$ = ecx

; 3628 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3629 : 	return m_paUnitClassInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1332				; 00000534H

; 3630 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getUnitClassInfo@CvGlobals@@QAEAAV?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getUnitClassInfo
_TEXT	ENDS
PUBLIC	?getUnitClassInfo@CvGlobals@@QAEPAVCvUnitClassInfo@@W4UnitClassTypes@@@Z ; CvGlobals::getUnitClassInfo
; Function compile flags: /Odtp
;	COMDAT ?getUnitClassInfo@CvGlobals@@QAEPAVCvUnitClassInfo@@W4UnitClassTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259745 = -4						; size = 4
_eUnitClassNum$ = 8					; size = 4
?getUnitClassInfo@CvGlobals@@QAEPAVCvUnitClassInfo@@W4UnitClassTypes@@@Z PROC ; CvGlobals::getUnitClassInfo, COMDAT
; _this$ = ecx

; 3637 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3638 : #ifdef AUI_WARNING_FIXES
; 3639 : 	uint uiIndex = uint(eUnitClassNum);
; 3640 : 	CvAssert(uiIndex < GC.getNumUnitClassInfos());
; 3641 : 	if (uiIndex < m_paUnitClassInfo.size())
; 3642 : 		return m_paUnitClassInfo[uiIndex];
; 3643 : #else
; 3644 : 	CvAssert(eUnitClassNum > -1);
; 3645 : 	CvAssert(eUnitClassNum < GC.getNumUnitClassInfos());
; 3646 : 	if(eUnitClassNum > -1 && eUnitClassNum < (int)m_paUnitClassInfo.size())

	cmp	DWORD PTR _eUnitClassNum$[ebp], -1
	jle	SHORT $LN2@getUnitCla
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1332				; 00000534H
	mov	DWORD PTR $T259745[ebp], eax
	mov	ecx, DWORD PTR $T259745[ebp]
	mov	edx, DWORD PTR $T259745[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eUnitClassNum$[ebp], eax
	jge	SHORT $LN2@getUnitCla

; 3647 : 		return m_paUnitClassInfo[eUnitClassNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1336]
	mov	eax, DWORD PTR _eUnitClassNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getUnitCla

; 3648 : #endif
; 3649 : 	else

	jmp	SHORT $LN3@getUnitCla
$LN2@getUnitCla:

; 3650 : 		return NULL;

	xor	eax, eax
$LN3@getUnitCla:

; 3651 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getUnitClassInfo@CvGlobals@@QAEPAVCvUnitClassInfo@@W4UnitClassTypes@@@Z ENDP ; CvGlobals::getUnitClassInfo
_TEXT	ENDS
PUBLIC	?getNumActionInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumActionInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumActionInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259754 = -4						; size = 4
?getNumActionInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumActionInfos, COMDAT
; _this$ = ecx

; 3659 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3660 : 	return (int)m_paActionInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1476				; 000005c4H
	mov	DWORD PTR $T259754[ebp], eax
	mov	ecx, DWORD PTR $T259754[ebp]
	mov	edx, DWORD PTR $T259754[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3661 : #endif
; 3662 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumActionInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumActionInfos
_TEXT	ENDS
PUBLIC	?getActionInfo@CvGlobals@@QAEAAV?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@XZ ; CvGlobals::getActionInfo
; Function compile flags: /Odtp
;	COMDAT ?getActionInfo@CvGlobals@@QAEAAV?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getActionInfo@CvGlobals@@QAEAAV?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@XZ PROC ; CvGlobals::getActionInfo, COMDAT
; _this$ = ecx

; 3665 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3666 : 	return m_paActionInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1476				; 000005c4H

; 3667 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getActionInfo@CvGlobals@@QAEAAV?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getActionInfo
_TEXT	ENDS
PUBLIC	?getActionInfo@CvGlobals@@QAEPAVCvActionInfo@@H@Z ; CvGlobals::getActionInfo
; Function compile flags: /Odtp
;	COMDAT ?getActionInfo@CvGlobals@@QAEPAVCvActionInfo@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259762 = -4						; size = 4
_i$ = 8							; size = 4
?getActionInfo@CvGlobals@@QAEPAVCvActionInfo@@H@Z PROC	; CvGlobals::getActionInfo, COMDAT
; _this$ = ecx

; 3676 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3677 : 	CvAssertMsg(i < getNumActionInfos(), "Index out of bounds");
; 3678 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 3679 : 	if(i > -1 && i < (int)m_paActionInfo.size())

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN2@getActionI
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1476				; 000005c4H
	mov	DWORD PTR $T259762[ebp], eax
	mov	ecx, DWORD PTR $T259762[ebp]
	mov	edx, DWORD PTR $T259762[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@getActionI

; 3680 : #endif
; 3681 : 		return m_paActionInfo[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1480]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getActionI

; 3682 : 	else

	jmp	SHORT $LN3@getActionI
$LN2@getActionI:

; 3683 : 		return NULL;

	xor	eax, eax
$LN3@getActionI:

; 3684 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getActionInfo@CvGlobals@@QAEPAVCvActionInfo@@H@Z ENDP	; CvGlobals::getActionInfo
_TEXT	ENDS
PUBLIC	?getMissionInfo@CvGlobals@@QAEAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@XZ ; CvGlobals::getMissionInfo
; Function compile flags: /Odtp
;	COMDAT ?getMissionInfo@CvGlobals@@QAEAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMissionInfo@CvGlobals@@QAEAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@XZ PROC ; CvGlobals::getMissionInfo, COMDAT
; _this$ = ecx

; 3687 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3688 : 	return m_paMissionInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1492				; 000005d4H

; 3689 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMissionInfo@CvGlobals@@QAEAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getMissionInfo
_TEXT	ENDS
PUBLIC	?getMissionInfo@CvGlobals@@QAEPAVCvMissionInfo@@W4MissionTypes@@@Z ; CvGlobals::getMissionInfo
; Function compile flags: /Odtp
;	COMDAT ?getMissionInfo@CvGlobals@@QAEPAVCvMissionInfo@@W4MissionTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259773 = -4						; size = 4
_eMissionNum$ = 8					; size = 4
?getMissionInfo@CvGlobals@@QAEPAVCvMissionInfo@@W4MissionTypes@@@Z PROC ; CvGlobals::getMissionInfo, COMDAT
; _this$ = ecx

; 3700 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3701 : 	CvAssert(eMissionNum > -1);
; 3702 : 	CvAssert(static_cast<unsigned int>(eMissionNum) < CvTypes::getNUM_MISSION_TYPES());
; 3703 : 	if(eMissionNum > -1 && eMissionNum < (int)m_paMissionInfo.size())

	cmp	DWORD PTR _eMissionNum$[ebp], -1
	jle	SHORT $LN2@getMission
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1492				; 000005d4H
	mov	DWORD PTR $T259773[ebp], eax
	mov	ecx, DWORD PTR $T259773[ebp]
	mov	edx, DWORD PTR $T259773[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eMissionNum$[ebp], eax
	jge	SHORT $LN2@getMission

; 3704 : 		return m_paMissionInfo[eMissionNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1496]
	mov	eax, DWORD PTR _eMissionNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getMission

; 3705 : #endif
; 3706 : 	else

	jmp	SHORT $LN3@getMission
$LN2@getMission:

; 3707 : 		return NULL;

	xor	eax, eax
$LN3@getMission:

; 3708 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getMissionInfo@CvGlobals@@QAEPAVCvMissionInfo@@W4MissionTypes@@@Z ENDP ; CvGlobals::getMissionInfo
_TEXT	ENDS
PUBLIC	?getControlInfo@CvGlobals@@QAEAAV?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@XZ ; CvGlobals::getControlInfo
; Function compile flags: /Odtp
;	COMDAT ?getControlInfo@CvGlobals@@QAEAAV?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getControlInfo@CvGlobals@@QAEAAV?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@XZ PROC ; CvGlobals::getControlInfo, COMDAT
; _this$ = ecx

; 3711 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3712 : 	return m_paControlInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1508				; 000005e4H

; 3713 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getControlInfo@CvGlobals@@QAEAAV?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getControlInfo
_TEXT	ENDS
PUBLIC	?getControlInfo@CvGlobals@@QAEPAVCvControlInfo@@W4ControlTypes@@@Z ; CvGlobals::getControlInfo
; Function compile flags: /Odtp
;	COMDAT ?getControlInfo@CvGlobals@@QAEPAVCvControlInfo@@W4ControlTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259784 = -4						; size = 4
_eControlNum$ = 8					; size = 4
?getControlInfo@CvGlobals@@QAEPAVCvControlInfo@@W4ControlTypes@@@Z PROC ; CvGlobals::getControlInfo, COMDAT
; _this$ = ecx

; 3724 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3725 : 	CvAssert(eControlNum > -1);
; 3726 : 	CvAssert(eControlNum < NUM_CONTROL_TYPES);
; 3727 : 	if(eControlNum > -1 && eControlNum < (int)m_paControlInfo.size())

	cmp	DWORD PTR _eControlNum$[ebp], -1
	jle	SHORT $LN2@getControl
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1508				; 000005e4H
	mov	DWORD PTR $T259784[ebp], eax
	mov	ecx, DWORD PTR $T259784[ebp]
	mov	edx, DWORD PTR $T259784[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eControlNum$[ebp], eax
	jge	SHORT $LN2@getControl

; 3728 : 		return m_paControlInfo[eControlNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1512]
	mov	eax, DWORD PTR _eControlNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getControl

; 3729 : #endif
; 3730 : 	else

	jmp	SHORT $LN3@getControl
$LN2@getControl:

; 3731 : 		return NULL;

	xor	eax, eax
$LN3@getControl:

; 3732 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getControlInfo@CvGlobals@@QAEPAVCvControlInfo@@W4ControlTypes@@@Z ENDP ; CvGlobals::getControlInfo
_TEXT	ENDS
PUBLIC	?getCommandInfo@CvGlobals@@QAEAAV?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@XZ ; CvGlobals::getCommandInfo
; Function compile flags: /Odtp
;	COMDAT ?getCommandInfo@CvGlobals@@QAEAAV?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCommandInfo@CvGlobals@@QAEAAV?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@XZ PROC ; CvGlobals::getCommandInfo, COMDAT
; _this$ = ecx

; 3735 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3736 : 	return m_paCommandInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1524				; 000005f4H

; 3737 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCommandInfo@CvGlobals@@QAEAAV?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getCommandInfo
_TEXT	ENDS
PUBLIC	?getCommandInfo@CvGlobals@@QAEPAVCvCommandInfo@@W4CommandTypes@@@Z ; CvGlobals::getCommandInfo
; Function compile flags: /Odtp
;	COMDAT ?getCommandInfo@CvGlobals@@QAEPAVCvCommandInfo@@W4CommandTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259795 = -4						; size = 4
_eCommandNum$ = 8					; size = 4
?getCommandInfo@CvGlobals@@QAEPAVCvCommandInfo@@W4CommandTypes@@@Z PROC ; CvGlobals::getCommandInfo, COMDAT
; _this$ = ecx

; 3748 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3749 : 	CvAssert(eCommandNum > -1);
; 3750 : 	CvAssert(eCommandNum < NUM_COMMAND_TYPES);
; 3751 : 	if(eCommandNum > -1 && eCommandNum < (int)m_paCommandInfo.size())

	cmp	DWORD PTR _eCommandNum$[ebp], -1
	jle	SHORT $LN2@getCommand
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1524				; 000005f4H
	mov	DWORD PTR $T259795[ebp], eax
	mov	ecx, DWORD PTR $T259795[ebp]
	mov	edx, DWORD PTR $T259795[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eCommandNum$[ebp], eax
	jge	SHORT $LN2@getCommand

; 3752 : 		return m_paCommandInfo[eCommandNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1528]
	mov	eax, DWORD PTR _eCommandNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getCommand

; 3753 : #endif
; 3754 : 	else

	jmp	SHORT $LN3@getCommand
$LN2@getCommand:

; 3755 : 		return NULL;

	xor	eax, eax
$LN3@getCommand:

; 3756 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getCommandInfo@CvGlobals@@QAEPAVCvCommandInfo@@W4CommandTypes@@@Z ENDP ; CvGlobals::getCommandInfo
_TEXT	ENDS
PUBLIC	?getNumAutomateInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumAutomateInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumAutomateInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259804 = -4						; size = 4
?getNumAutomateInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumAutomateInfos, COMDAT
; _this$ = ecx

; 3764 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3765 : 	return (int)m_paAutomateInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1540				; 00000604H
	mov	DWORD PTR $T259804[ebp], eax
	mov	ecx, DWORD PTR $T259804[ebp]
	mov	edx, DWORD PTR $T259804[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3766 : #endif
; 3767 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumAutomateInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumAutomateInfos
_TEXT	ENDS
PUBLIC	?getAutomateInfo@CvGlobals@@QAEAAV?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@XZ ; CvGlobals::getAutomateInfo
; Function compile flags: /Odtp
;	COMDAT ?getAutomateInfo@CvGlobals@@QAEAAV?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAutomateInfo@CvGlobals@@QAEAAV?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@XZ PROC ; CvGlobals::getAutomateInfo, COMDAT
; _this$ = ecx

; 3770 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3771 : 	return m_paAutomateInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1540				; 00000604H

; 3772 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAutomateInfo@CvGlobals@@QAEAAV?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getAutomateInfo
_TEXT	ENDS
PUBLIC	?getAutomateInfo@CvGlobals@@QAEPAVCvAutomateInfo@@H@Z ; CvGlobals::getAutomateInfo
; Function compile flags: /Odtp
;	COMDAT ?getAutomateInfo@CvGlobals@@QAEPAVCvAutomateInfo@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259812 = -4						; size = 4
_iAutomateNum$ = 8					; size = 4
?getAutomateInfo@CvGlobals@@QAEPAVCvAutomateInfo@@H@Z PROC ; CvGlobals::getAutomateInfo, COMDAT
; _this$ = ecx

; 3779 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3780 : 	CvAssertMsg(iAutomateNum < getNumAutomateInfos(), "Index out of bounds");
; 3781 : 	CvAssertMsg(iAutomateNum > -1, "Index out of bounds");
; 3782 : #ifdef AUI_WARNING_FIXES
; 3783 : 	if (iAutomateNum < m_paAutomateInfo.size())
; 3784 : #else
; 3785 : 	if(iAutomateNum > -1 && iAutomateNum < (int)m_paAutomateInfo.size())

	cmp	DWORD PTR _iAutomateNum$[ebp], -1
	jle	SHORT $LN2@getAutomat
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1540				; 00000604H
	mov	DWORD PTR $T259812[ebp], eax
	mov	ecx, DWORD PTR $T259812[ebp]
	mov	edx, DWORD PTR $T259812[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _iAutomateNum$[ebp], eax
	jge	SHORT $LN2@getAutomat

; 3786 : #endif
; 3787 : 		return m_paAutomateInfo[iAutomateNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1544]
	mov	eax, DWORD PTR _iAutomateNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getAutomat

; 3788 : 	else

	jmp	SHORT $LN3@getAutomat
$LN2@getAutomat:

; 3789 : 		return NULL;

	xor	eax, eax
$LN3@getAutomat:

; 3790 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getAutomateInfo@CvGlobals@@QAEPAVCvAutomateInfo@@H@Z ENDP ; CvGlobals::getAutomateInfo
_TEXT	ENDS
PUBLIC	?getNumPromotionInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumPromotionInfos
EXTRN	?GetPromotionEntries@CvPromotionXMLEntries@@QAEAAV?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@XZ:PROC ; CvPromotionXMLEntries::GetPromotionEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumPromotionInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259821 = -4						; size = 4
?getNumPromotionInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumPromotionInfos, COMDAT
; _this$ = ecx

; 3798 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3799 : 	return (int)m_pPromotions->GetPromotionEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1712]
	call	?GetPromotionEntries@CvPromotionXMLEntries@@QAEAAV?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@XZ ; CvPromotionXMLEntries::GetPromotionEntries
	mov	DWORD PTR $T259821[ebp], eax
	mov	ecx, DWORD PTR $T259821[ebp]
	mov	edx, DWORD PTR $T259821[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3800 : #endif
; 3801 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumPromotionInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumPromotionInfos
_TEXT	ENDS
PUBLIC	?getPromotionInfo@CvGlobals@@QAEAAV?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@XZ ; CvGlobals::getPromotionInfo
; Function compile flags: /Odtp
;	COMDAT ?getPromotionInfo@CvGlobals@@QAEAAV?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPromotionInfo@CvGlobals@@QAEAAV?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@XZ PROC ; CvGlobals::getPromotionInfo, COMDAT
; _this$ = ecx

; 3804 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3805 : 	return m_pPromotions->GetPromotionEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1712]
	call	?GetPromotionEntries@CvPromotionXMLEntries@@QAEAAV?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@XZ ; CvPromotionXMLEntries::GetPromotionEntries

; 3806 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPromotionInfo@CvGlobals@@QAEAAV?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getPromotionInfo
_TEXT	ENDS
PUBLIC	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z ; CvGlobals::getPromotionInfo
; Function compile flags: /Odtp
;	COMDAT ?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259829 = -4						; size = 4
_ePromotionNum$ = 8					; size = 4
?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z PROC ; CvGlobals::getPromotionInfo, COMDAT
; _this$ = ecx

; 3817 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3818 : 	CvAssert(ePromotionNum > -1);
; 3819 : 	CvAssert(ePromotionNum < GC.getNumPromotionInfos());
; 3820 : 	if(ePromotionNum > -1 && ePromotionNum < GC.getNumPromotionInfos())

	cmp	DWORD PTR _ePromotionNum$[ebp], -1
	jle	SHORT $LN2@getPromoti
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumPromotionInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumPromotionInfos
	cmp	DWORD PTR _ePromotionNum$[ebp], eax
	jge	SHORT $LN2@getPromoti

; 3821 : 		return m_pPromotions->GetPromotionEntries()[ePromotionNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1712]
	call	?GetPromotionEntries@CvPromotionXMLEntries@@QAEAAV?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@XZ ; CvPromotionXMLEntries::GetPromotionEntries
	mov	DWORD PTR $T259829[ebp], eax
	mov	ecx, DWORD PTR $T259829[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _ePromotionNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getPromoti

; 3822 : #endif
; 3823 : 	else

	jmp	SHORT $LN3@getPromoti
$LN2@getPromoti:

; 3824 : 		return NULL;

	xor	eax, eax
$LN3@getPromoti:

; 3825 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z ENDP ; CvGlobals::getPromotionInfo
_TEXT	ENDS
PUBLIC	?GetGamePromotions@CvGlobals@@QBEPAVCvPromotionXMLEntries@@XZ ; CvGlobals::GetGamePromotions
; Function compile flags: /Odtp
;	COMDAT ?GetGamePromotions@CvGlobals@@QBEPAVCvPromotionXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGamePromotions@CvGlobals@@QBEPAVCvPromotionXMLEntries@@XZ PROC ; CvGlobals::GetGamePromotions, COMDAT
; _this$ = ecx

; 3828 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3829 : 	return m_pPromotions;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1712]

; 3830 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGamePromotions@CvGlobals@@QBEPAVCvPromotionXMLEntries@@XZ ENDP ; CvGlobals::GetGamePromotions
_TEXT	ENDS
PUBLIC	?getNumSpecialistInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumSpecialistInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumSpecialistInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259837 = -4						; size = 4
?getNumSpecialistInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumSpecialistInfos, COMDAT
; _this$ = ecx

; 3838 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3839 : 	return (int)m_paSpecialistInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1460				; 000005b4H
	mov	DWORD PTR $T259837[ebp], eax
	mov	ecx, DWORD PTR $T259837[ebp]
	mov	edx, DWORD PTR $T259837[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3840 : #endif
; 3841 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumSpecialistInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumSpecialistInfos
_TEXT	ENDS
PUBLIC	?getSpecialistInfo@CvGlobals@@QAEAAV?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@XZ ; CvGlobals::getSpecialistInfo
; Function compile flags: /Odtp
;	COMDAT ?getSpecialistInfo@CvGlobals@@QAEAAV?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSpecialistInfo@CvGlobals@@QAEAAV?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@XZ PROC ; CvGlobals::getSpecialistInfo, COMDAT
; _this$ = ecx

; 3844 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3845 : 	return m_paSpecialistInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1460				; 000005b4H

; 3846 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSpecialistInfo@CvGlobals@@QAEAAV?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getSpecialistInfo
_TEXT	ENDS
PUBLIC	?getSpecialistInfo@CvGlobals@@QAEPAVCvSpecialistInfo@@W4SpecialistTypes@@@Z ; CvGlobals::getSpecialistInfo
; Function compile flags: /Odtp
;	COMDAT ?getSpecialistInfo@CvGlobals@@QAEPAVCvSpecialistInfo@@W4SpecialistTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259845 = -4						; size = 4
_eSpecialistNum$ = 8					; size = 4
?getSpecialistInfo@CvGlobals@@QAEPAVCvSpecialistInfo@@W4SpecialistTypes@@@Z PROC ; CvGlobals::getSpecialistInfo, COMDAT
; _this$ = ecx

; 3857 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3858 : 	CvAssert(eSpecialistNum > -1);
; 3859 : 	CvAssert(eSpecialistNum < GC.getNumSpecialistInfos());
; 3860 : 	if(eSpecialistNum > -1 && eSpecialistNum < (int)m_paSpecialistInfo.size())

	cmp	DWORD PTR _eSpecialistNum$[ebp], -1
	jle	SHORT $LN2@getSpecial@2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1460				; 000005b4H
	mov	DWORD PTR $T259845[ebp], eax
	mov	ecx, DWORD PTR $T259845[ebp]
	mov	edx, DWORD PTR $T259845[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _eSpecialistNum$[ebp], eax
	jge	SHORT $LN2@getSpecial@2

; 3861 : 		return m_paSpecialistInfo[eSpecialistNum];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1464]
	mov	eax, DWORD PTR _eSpecialistNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getSpecial@2

; 3862 : #endif
; 3863 : 	else

	jmp	SHORT $LN3@getSpecial@2
$LN2@getSpecial@2:

; 3864 : 		return NULL;

	xor	eax, eax
$LN3@getSpecial@2:

; 3865 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getSpecialistInfo@CvGlobals@@QAEPAVCvSpecialistInfo@@W4SpecialistTypes@@@Z ENDP ; CvGlobals::getSpecialistInfo
_TEXT	ENDS
PUBLIC	?getNumEconomicAIStrategyInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumEconomicAIStrategyInfos
EXTRN	?GetEconomicAIStrategyEntries@CvEconomicAIStrategyXMLEntries@@QAEAAV?$vector@PAVCvEconomicAIStrategyXMLEntry@@V?$allocator@PAVCvEconomicAIStrategyXMLEntry@@@std@@@std@@XZ:PROC ; CvEconomicAIStrategyXMLEntries::GetEconomicAIStrategyEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumEconomicAIStrategyInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259854 = -4						; size = 4
?getNumEconomicAIStrategyInfos@CvGlobals@@QAEHXZ PROC	; CvGlobals::getNumEconomicAIStrategyInfos, COMDAT
; _this$ = ecx

; 3873 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3874 : 	return (int)m_pEconomicAIStrategies->GetEconomicAIStrategyEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1668]
	call	?GetEconomicAIStrategyEntries@CvEconomicAIStrategyXMLEntries@@QAEAAV?$vector@PAVCvEconomicAIStrategyXMLEntry@@V?$allocator@PAVCvEconomicAIStrategyXMLEntry@@@std@@@std@@XZ ; CvEconomicAIStrategyXMLEntries::GetEconomicAIStrategyEntries
	mov	DWORD PTR $T259854[ebp], eax
	mov	ecx, DWORD PTR $T259854[ebp]
	mov	edx, DWORD PTR $T259854[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3875 : #endif
; 3876 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumEconomicAIStrategyInfos@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getNumEconomicAIStrategyInfos
_TEXT	ENDS
PUBLIC	?getEconomicAIStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvEconomicAIStrategyXMLEntry@@V?$allocator@PAVCvEconomicAIStrategyXMLEntry@@@std@@@std@@XZ ; CvGlobals::getEconomicAIStrategyInfo
; Function compile flags: /Odtp
;	COMDAT ?getEconomicAIStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvEconomicAIStrategyXMLEntry@@V?$allocator@PAVCvEconomicAIStrategyXMLEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getEconomicAIStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvEconomicAIStrategyXMLEntry@@V?$allocator@PAVCvEconomicAIStrategyXMLEntry@@@std@@@std@@XZ PROC ; CvGlobals::getEconomicAIStrategyInfo, COMDAT
; _this$ = ecx

; 3879 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3880 : 	return m_pEconomicAIStrategies->GetEconomicAIStrategyEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1668]
	call	?GetEconomicAIStrategyEntries@CvEconomicAIStrategyXMLEntries@@QAEAAV?$vector@PAVCvEconomicAIStrategyXMLEntry@@V?$allocator@PAVCvEconomicAIStrategyXMLEntry@@@std@@@std@@XZ ; CvEconomicAIStrategyXMLEntries::GetEconomicAIStrategyEntries

; 3881 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getEconomicAIStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvEconomicAIStrategyXMLEntry@@V?$allocator@PAVCvEconomicAIStrategyXMLEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getEconomicAIStrategyInfo
_TEXT	ENDS
PUBLIC	?getEconomicAIStrategyInfo@CvGlobals@@QAEPAVCvEconomicAIStrategyXMLEntry@@W4EconomicAIStrategyTypes@@@Z ; CvGlobals::getEconomicAIStrategyInfo
; Function compile flags: /Odtp
;	COMDAT ?getEconomicAIStrategyInfo@CvGlobals@@QAEPAVCvEconomicAIStrategyXMLEntry@@W4EconomicAIStrategyTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259862 = -4						; size = 4
_eAIStrategyNum$ = 8					; size = 4
?getEconomicAIStrategyInfo@CvGlobals@@QAEPAVCvEconomicAIStrategyXMLEntry@@W4EconomicAIStrategyTypes@@@Z PROC ; CvGlobals::getEconomicAIStrategyInfo, COMDAT
; _this$ = ecx

; 3892 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3893 : 	FAssert(eAIStrategyNum > -1);
; 3894 : 	FAssert(eAIStrategyNum < GC.getNumEconomicAIStrategyInfos());
; 3895 : 	if(eAIStrategyNum > -1 && eAIStrategyNum < GC.getNumEconomicAIStrategyInfos())

	cmp	DWORD PTR _eAIStrategyNum$[ebp], -1
	jle	SHORT $LN2@getEconomi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumEconomicAIStrategyInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumEconomicAIStrategyInfos
	cmp	DWORD PTR _eAIStrategyNum$[ebp], eax
	jge	SHORT $LN2@getEconomi

; 3896 : 		return m_pEconomicAIStrategies->GetEconomicAIStrategyEntries()[eAIStrategyNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1668]
	call	?GetEconomicAIStrategyEntries@CvEconomicAIStrategyXMLEntries@@QAEAAV?$vector@PAVCvEconomicAIStrategyXMLEntry@@V?$allocator@PAVCvEconomicAIStrategyXMLEntry@@@std@@@std@@XZ ; CvEconomicAIStrategyXMLEntries::GetEconomicAIStrategyEntries
	mov	DWORD PTR $T259862[ebp], eax
	mov	ecx, DWORD PTR $T259862[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eAIStrategyNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getEconomi

; 3897 : #endif
; 3898 : 	else

	jmp	SHORT $LN3@getEconomi
$LN2@getEconomi:

; 3899 : 		return NULL;

	xor	eax, eax
$LN3@getEconomi:

; 3900 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getEconomicAIStrategyInfo@CvGlobals@@QAEPAVCvEconomicAIStrategyXMLEntry@@W4EconomicAIStrategyTypes@@@Z ENDP ; CvGlobals::getEconomicAIStrategyInfo
_TEXT	ENDS
PUBLIC	?GetGameEconomicAIStrategies@CvGlobals@@QBEPAVCvEconomicAIStrategyXMLEntries@@XZ ; CvGlobals::GetGameEconomicAIStrategies
; Function compile flags: /Odtp
;	COMDAT ?GetGameEconomicAIStrategies@CvGlobals@@QBEPAVCvEconomicAIStrategyXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameEconomicAIStrategies@CvGlobals@@QBEPAVCvEconomicAIStrategyXMLEntries@@XZ PROC ; CvGlobals::GetGameEconomicAIStrategies, COMDAT
; _this$ = ecx

; 3903 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3904 : 	return m_pEconomicAIStrategies;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1668]

; 3905 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameEconomicAIStrategies@CvGlobals@@QBEPAVCvEconomicAIStrategyXMLEntries@@XZ ENDP ; CvGlobals::GetGameEconomicAIStrategies
_TEXT	ENDS
PUBLIC	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
EXTRN	?GetCitySpecializationEntries@CvCitySpecializationXMLEntries@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ:PROC ; CvCitySpecializationXMLEntries::GetCitySpecializationEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259870 = -4						; size = 4
?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ PROC	; CvGlobals::getNumCitySpecializationInfos, COMDAT
; _this$ = ecx

; 3913 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3914 : 	return (int)m_pCitySpecializations->GetCitySpecializationEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1672]
	call	?GetCitySpecializationEntries@CvCitySpecializationXMLEntries@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ ; CvCitySpecializationXMLEntries::GetCitySpecializationEntries
	mov	DWORD PTR $T259870[ebp], eax
	mov	ecx, DWORD PTR $T259870[ebp]
	mov	edx, DWORD PTR $T259870[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3915 : #endif
; 3916 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getNumCitySpecializationInfos
_TEXT	ENDS
PUBLIC	?getCitySpecializationInfo@CvGlobals@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ ; CvGlobals::getCitySpecializationInfo
; Function compile flags: /Odtp
;	COMDAT ?getCitySpecializationInfo@CvGlobals@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCitySpecializationInfo@CvGlobals@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ PROC ; CvGlobals::getCitySpecializationInfo, COMDAT
; _this$ = ecx

; 3919 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3920 : 	return m_pCitySpecializations->GetCitySpecializationEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1672]
	call	?GetCitySpecializationEntries@CvCitySpecializationXMLEntries@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ ; CvCitySpecializationXMLEntries::GetCitySpecializationEntries

; 3921 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCitySpecializationInfo@CvGlobals@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getCitySpecializationInfo
_TEXT	ENDS
PUBLIC	?getCitySpecializationInfo@CvGlobals@@QAEPAVCvCitySpecializationXMLEntry@@W4CitySpecializationTypes@@@Z ; CvGlobals::getCitySpecializationInfo
; Function compile flags: /Odtp
;	COMDAT ?getCitySpecializationInfo@CvGlobals@@QAEPAVCvCitySpecializationXMLEntry@@W4CitySpecializationTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259878 = -4						; size = 4
_eCitySpecialization$ = 8				; size = 4
?getCitySpecializationInfo@CvGlobals@@QAEPAVCvCitySpecializationXMLEntry@@W4CitySpecializationTypes@@@Z PROC ; CvGlobals::getCitySpecializationInfo, COMDAT
; _this$ = ecx

; 3932 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3933 : 	CvAssert(eCitySpecialization > -1);
; 3934 : 	CvAssert(eCitySpecialization < GC.getNumCitySpecializationInfos());
; 3935 : 	if(eCitySpecialization > -1 && eCitySpecialization < GC.getNumCitySpecializationInfos())

	cmp	DWORD PTR _eCitySpecialization$[ebp], -1
	jle	SHORT $LN2@getCitySpe
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	cmp	DWORD PTR _eCitySpecialization$[ebp], eax
	jge	SHORT $LN2@getCitySpe

; 3936 : 		return m_pCitySpecializations->GetCitySpecializationEntries()[eCitySpecialization];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1672]
	call	?GetCitySpecializationEntries@CvCitySpecializationXMLEntries@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ ; CvCitySpecializationXMLEntries::GetCitySpecializationEntries
	mov	DWORD PTR $T259878[ebp], eax
	mov	ecx, DWORD PTR $T259878[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eCitySpecialization$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getCitySpe

; 3937 : #endif
; 3938 : 	else

	jmp	SHORT $LN3@getCitySpe
$LN2@getCitySpe:

; 3939 : 		return NULL;

	xor	eax, eax
$LN3@getCitySpe:

; 3940 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getCitySpecializationInfo@CvGlobals@@QAEPAVCvCitySpecializationXMLEntry@@W4CitySpecializationTypes@@@Z ENDP ; CvGlobals::getCitySpecializationInfo
_TEXT	ENDS
PUBLIC	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
; Function compile flags: /Odtp
;	COMDAT ?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ PROC ; CvGlobals::GetGameCitySpecializations, COMDAT
; _this$ = ecx

; 3943 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3944 : 	return m_pCitySpecializations;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1672]

; 3945 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ENDP ; CvGlobals::GetGameCitySpecializations
_TEXT	ENDS
PUBLIC	?getNumTacticalMoveInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumTacticalMoveInfos
EXTRN	?GetTacticalMoveEntries@CvTacticalMoveXMLEntries@@QAEAAV?$vector@PAVCvTacticalMoveXMLEntry@@V?$allocator@PAVCvTacticalMoveXMLEntry@@@std@@@std@@XZ:PROC ; CvTacticalMoveXMLEntries::GetTacticalMoveEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumTacticalMoveInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259886 = -4						; size = 4
?getNumTacticalMoveInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumTacticalMoveInfos, COMDAT
; _this$ = ecx

; 3953 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3954 : 	return (int)m_pTacticalMoves->GetTacticalMoveEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1676]
	call	?GetTacticalMoveEntries@CvTacticalMoveXMLEntries@@QAEAAV?$vector@PAVCvTacticalMoveXMLEntry@@V?$allocator@PAVCvTacticalMoveXMLEntry@@@std@@@std@@XZ ; CvTacticalMoveXMLEntries::GetTacticalMoveEntries
	mov	DWORD PTR $T259886[ebp], eax
	mov	ecx, DWORD PTR $T259886[ebp]
	mov	edx, DWORD PTR $T259886[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3955 : #endif
; 3956 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumTacticalMoveInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumTacticalMoveInfos
_TEXT	ENDS
PUBLIC	?getTacticalMoveInfo@CvGlobals@@QAEAAV?$vector@PAVCvTacticalMoveXMLEntry@@V?$allocator@PAVCvTacticalMoveXMLEntry@@@std@@@std@@XZ ; CvGlobals::getTacticalMoveInfo
; Function compile flags: /Odtp
;	COMDAT ?getTacticalMoveInfo@CvGlobals@@QAEAAV?$vector@PAVCvTacticalMoveXMLEntry@@V?$allocator@PAVCvTacticalMoveXMLEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTacticalMoveInfo@CvGlobals@@QAEAAV?$vector@PAVCvTacticalMoveXMLEntry@@V?$allocator@PAVCvTacticalMoveXMLEntry@@@std@@@std@@XZ PROC ; CvGlobals::getTacticalMoveInfo, COMDAT
; _this$ = ecx

; 3959 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3960 : 	return m_pTacticalMoves->GetTacticalMoveEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1676]
	call	?GetTacticalMoveEntries@CvTacticalMoveXMLEntries@@QAEAAV?$vector@PAVCvTacticalMoveXMLEntry@@V?$allocator@PAVCvTacticalMoveXMLEntry@@@std@@@std@@XZ ; CvTacticalMoveXMLEntries::GetTacticalMoveEntries

; 3961 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTacticalMoveInfo@CvGlobals@@QAEAAV?$vector@PAVCvTacticalMoveXMLEntry@@V?$allocator@PAVCvTacticalMoveXMLEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getTacticalMoveInfo
_TEXT	ENDS
PUBLIC	?getTacticalMoveInfo@CvGlobals@@QAEPAVCvTacticalMoveXMLEntry@@W4TacticalAIMoveTypes@@@Z ; CvGlobals::getTacticalMoveInfo
; Function compile flags: /Odtp
;	COMDAT ?getTacticalMoveInfo@CvGlobals@@QAEPAVCvTacticalMoveXMLEntry@@W4TacticalAIMoveTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259894 = -4						; size = 4
_eTacticalMove$ = 8					; size = 4
?getTacticalMoveInfo@CvGlobals@@QAEPAVCvTacticalMoveXMLEntry@@W4TacticalAIMoveTypes@@@Z PROC ; CvGlobals::getTacticalMoveInfo, COMDAT
; _this$ = ecx

; 3972 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3973 : 	FAssert(eTacticalMove > -1);
; 3974 : 	FAssert(eTacticalMove < GC.getNumTacticalMoveInfos());
; 3975 : 	if(eTacticalMove > -1 && eTacticalMove < GC.getNumTacticalMoveInfos())

	cmp	DWORD PTR _eTacticalMove$[ebp], -1
	jle	SHORT $LN2@getTactica
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumTacticalMoveInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumTacticalMoveInfos
	cmp	DWORD PTR _eTacticalMove$[ebp], eax
	jge	SHORT $LN2@getTactica

; 3976 : 		return m_pTacticalMoves->GetTacticalMoveEntries()[eTacticalMove];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1676]
	call	?GetTacticalMoveEntries@CvTacticalMoveXMLEntries@@QAEAAV?$vector@PAVCvTacticalMoveXMLEntry@@V?$allocator@PAVCvTacticalMoveXMLEntry@@@std@@@std@@XZ ; CvTacticalMoveXMLEntries::GetTacticalMoveEntries
	mov	DWORD PTR $T259894[ebp], eax
	mov	ecx, DWORD PTR $T259894[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eTacticalMove$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN3@getTactica

; 3977 : #endif
; 3978 : 	else

	jmp	SHORT $LN3@getTactica
$LN2@getTactica:

; 3979 : 		return NULL;

	xor	eax, eax
$LN3@getTactica:

; 3980 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getTacticalMoveInfo@CvGlobals@@QAEPAVCvTacticalMoveXMLEntry@@W4TacticalAIMoveTypes@@@Z ENDP ; CvGlobals::getTacticalMoveInfo
_TEXT	ENDS
PUBLIC	?GetGameTacticalMoves@CvGlobals@@QBEPAVCvTacticalMoveXMLEntries@@XZ ; CvGlobals::GetGameTacticalMoves
; Function compile flags: /Odtp
;	COMDAT ?GetGameTacticalMoves@CvGlobals@@QBEPAVCvTacticalMoveXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameTacticalMoves@CvGlobals@@QBEPAVCvTacticalMoveXMLEntries@@XZ PROC ; CvGlobals::GetGameTacticalMoves, COMDAT
; _this$ = ecx

; 3983 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3984 : 	return m_pTacticalMoves;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1676]

; 3985 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameTacticalMoves@CvGlobals@@QBEPAVCvTacticalMoveXMLEntries@@XZ ENDP ; CvGlobals::GetGameTacticalMoves
_TEXT	ENDS
PUBLIC	?getNumMilitaryAIStrategyInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumMilitaryAIStrategyInfos
EXTRN	?GetMilitaryAIStrategyEntries@CvMilitaryAIStrategyXMLEntries@@QAEAAV?$vector@PAVCvMilitaryAIStrategyXMLEntry@@V?$allocator@PAVCvMilitaryAIStrategyXMLEntry@@@std@@@std@@XZ:PROC ; CvMilitaryAIStrategyXMLEntries::GetMilitaryAIStrategyEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumMilitaryAIStrategyInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259902 = -4						; size = 4
?getNumMilitaryAIStrategyInfos@CvGlobals@@QAEHXZ PROC	; CvGlobals::getNumMilitaryAIStrategyInfos, COMDAT
; _this$ = ecx

; 3993 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3994 : 	return (int)m_pMilitaryAIStrategies->GetMilitaryAIStrategyEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1680]
	call	?GetMilitaryAIStrategyEntries@CvMilitaryAIStrategyXMLEntries@@QAEAAV?$vector@PAVCvMilitaryAIStrategyXMLEntry@@V?$allocator@PAVCvMilitaryAIStrategyXMLEntry@@@std@@@std@@XZ ; CvMilitaryAIStrategyXMLEntries::GetMilitaryAIStrategyEntries
	mov	DWORD PTR $T259902[ebp], eax
	mov	ecx, DWORD PTR $T259902[ebp]
	mov	edx, DWORD PTR $T259902[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 3995 : #endif
; 3996 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumMilitaryAIStrategyInfos@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getNumMilitaryAIStrategyInfos
_TEXT	ENDS
PUBLIC	?getMilitaryAIStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvMilitaryAIStrategyXMLEntry@@V?$allocator@PAVCvMilitaryAIStrategyXMLEntry@@@std@@@std@@XZ ; CvGlobals::getMilitaryAIStrategyInfo
; Function compile flags: /Odtp
;	COMDAT ?getMilitaryAIStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvMilitaryAIStrategyXMLEntry@@V?$allocator@PAVCvMilitaryAIStrategyXMLEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMilitaryAIStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvMilitaryAIStrategyXMLEntry@@V?$allocator@PAVCvMilitaryAIStrategyXMLEntry@@@std@@@std@@XZ PROC ; CvGlobals::getMilitaryAIStrategyInfo, COMDAT
; _this$ = ecx

; 3999 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4000 : 	return m_pMilitaryAIStrategies->GetMilitaryAIStrategyEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1680]
	call	?GetMilitaryAIStrategyEntries@CvMilitaryAIStrategyXMLEntries@@QAEAAV?$vector@PAVCvMilitaryAIStrategyXMLEntry@@V?$allocator@PAVCvMilitaryAIStrategyXMLEntry@@@std@@@std@@XZ ; CvMilitaryAIStrategyXMLEntries::GetMilitaryAIStrategyEntries

; 4001 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMilitaryAIStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvMilitaryAIStrategyXMLEntry@@V?$allocator@PAVCvMilitaryAIStrategyXMLEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getMilitaryAIStrategyInfo
_TEXT	ENDS
PUBLIC	?getMilitaryAIStrategyInfo@CvGlobals@@QAEPAVCvMilitaryAIStrategyXMLEntry@@W4MilitaryAIStrategyTypes@@@Z ; CvGlobals::getMilitaryAIStrategyInfo
; Function compile flags: /Odtp
;	COMDAT ?getMilitaryAIStrategyInfo@CvGlobals@@QAEPAVCvMilitaryAIStrategyXMLEntry@@W4MilitaryAIStrategyTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259910 = -4						; size = 4
_eAIStrategyNum$ = 8					; size = 4
?getMilitaryAIStrategyInfo@CvGlobals@@QAEPAVCvMilitaryAIStrategyXMLEntry@@W4MilitaryAIStrategyTypes@@@Z PROC ; CvGlobals::getMilitaryAIStrategyInfo, COMDAT
; _this$ = ecx

; 4014 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4015 : 	FAssert(eAIStrategyNum < GC.getNumMilitaryAIStrategyInfos());
; 4016 : 	return m_pMilitaryAIStrategies->GetMilitaryAIStrategyEntries()[eAIStrategyNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1680]
	call	?GetMilitaryAIStrategyEntries@CvMilitaryAIStrategyXMLEntries@@QAEAAV?$vector@PAVCvMilitaryAIStrategyXMLEntry@@V?$allocator@PAVCvMilitaryAIStrategyXMLEntry@@@std@@@std@@XZ ; CvMilitaryAIStrategyXMLEntries::GetMilitaryAIStrategyEntries
	mov	DWORD PTR $T259910[ebp], eax
	mov	ecx, DWORD PTR $T259910[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eAIStrategyNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 4017 : #endif
; 4018 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getMilitaryAIStrategyInfo@CvGlobals@@QAEPAVCvMilitaryAIStrategyXMLEntry@@W4MilitaryAIStrategyTypes@@@Z ENDP ; CvGlobals::getMilitaryAIStrategyInfo
_TEXT	ENDS
PUBLIC	?GetGameMilitaryAIStrategies@CvGlobals@@QBEPAVCvMilitaryAIStrategyXMLEntries@@XZ ; CvGlobals::GetGameMilitaryAIStrategies
; Function compile flags: /Odtp
;	COMDAT ?GetGameMilitaryAIStrategies@CvGlobals@@QBEPAVCvMilitaryAIStrategyXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameMilitaryAIStrategies@CvGlobals@@QBEPAVCvMilitaryAIStrategyXMLEntries@@XZ PROC ; CvGlobals::GetGameMilitaryAIStrategies, COMDAT
; _this$ = ecx

; 4021 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4022 : 	return m_pMilitaryAIStrategies;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1680]

; 4023 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameMilitaryAIStrategies@CvGlobals@@QBEPAVCvMilitaryAIStrategyXMLEntries@@XZ ENDP ; CvGlobals::GetGameMilitaryAIStrategies
_TEXT	ENDS
PUBLIC	?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumAIGrandStrategyInfos
EXTRN	?GetAIGrandStrategyEntries@CvAIGrandStrategyXMLEntries@@QAEAAV?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@XZ:PROC ; CvAIGrandStrategyXMLEntries::GetAIGrandStrategyEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259918 = -4						; size = 4
?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ PROC	; CvGlobals::getNumAIGrandStrategyInfos, COMDAT
; _this$ = ecx

; 4031 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4032 : 	return (int)m_pAIGrandStrategies->GetAIGrandStrategyEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1684]
	call	?GetAIGrandStrategyEntries@CvAIGrandStrategyXMLEntries@@QAEAAV?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@XZ ; CvAIGrandStrategyXMLEntries::GetAIGrandStrategyEntries
	mov	DWORD PTR $T259918[ebp], eax
	mov	ecx, DWORD PTR $T259918[ebp]
	mov	edx, DWORD PTR $T259918[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4033 : #endif
; 4034 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getNumAIGrandStrategyInfos
_TEXT	ENDS
PUBLIC	?getAIGrandStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@XZ ; CvGlobals::getAIGrandStrategyInfo
; Function compile flags: /Odtp
;	COMDAT ?getAIGrandStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIGrandStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@XZ PROC ; CvGlobals::getAIGrandStrategyInfo, COMDAT
; _this$ = ecx

; 4037 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4038 : 	return m_pAIGrandStrategies->GetAIGrandStrategyEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1684]
	call	?GetAIGrandStrategyEntries@CvAIGrandStrategyXMLEntries@@QAEAAV?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@XZ ; CvAIGrandStrategyXMLEntries::GetAIGrandStrategyEntries

; 4039 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIGrandStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getAIGrandStrategyInfo
_TEXT	ENDS
PUBLIC	?getAIGrandStrategyInfo@CvGlobals@@QAEPAVCvAIGrandStrategyXMLEntry@@W4AIGrandStrategyTypes@@@Z ; CvGlobals::getAIGrandStrategyInfo
; Function compile flags: /Odtp
;	COMDAT ?getAIGrandStrategyInfo@CvGlobals@@QAEPAVCvAIGrandStrategyXMLEntry@@W4AIGrandStrategyTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259926 = -4						; size = 4
_eAIGrandStrategyNum$ = 8				; size = 4
?getAIGrandStrategyInfo@CvGlobals@@QAEPAVCvAIGrandStrategyXMLEntry@@W4AIGrandStrategyTypes@@@Z PROC ; CvGlobals::getAIGrandStrategyInfo, COMDAT
; _this$ = ecx

; 4052 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4053 : 	CvAssert(eAIGrandStrategyNum > -1);
; 4054 : 	CvAssert(eAIGrandStrategyNum < GC.getNumAIGrandStrategyInfos());
; 4055 : 	return m_pAIGrandStrategies->GetAIGrandStrategyEntries()[eAIGrandStrategyNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1684]
	call	?GetAIGrandStrategyEntries@CvAIGrandStrategyXMLEntries@@QAEAAV?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@XZ ; CvAIGrandStrategyXMLEntries::GetAIGrandStrategyEntries
	mov	DWORD PTR $T259926[ebp], eax
	mov	ecx, DWORD PTR $T259926[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eAIGrandStrategyNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 4056 : #endif
; 4057 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getAIGrandStrategyInfo@CvGlobals@@QAEPAVCvAIGrandStrategyXMLEntry@@W4AIGrandStrategyTypes@@@Z ENDP ; CvGlobals::getAIGrandStrategyInfo
_TEXT	ENDS
PUBLIC	?GetGameAIGrandStrategies@CvGlobals@@QBEPAVCvAIGrandStrategyXMLEntries@@XZ ; CvGlobals::GetGameAIGrandStrategies
; Function compile flags: /Odtp
;	COMDAT ?GetGameAIGrandStrategies@CvGlobals@@QBEPAVCvAIGrandStrategyXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameAIGrandStrategies@CvGlobals@@QBEPAVCvAIGrandStrategyXMLEntries@@XZ PROC ; CvGlobals::GetGameAIGrandStrategies, COMDAT
; _this$ = ecx

; 4060 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4061 : 	return m_pAIGrandStrategies;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1684]

; 4062 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameAIGrandStrategies@CvGlobals@@QBEPAVCvAIGrandStrategyXMLEntries@@XZ ENDP ; CvGlobals::GetGameAIGrandStrategies
_TEXT	ENDS
PUBLIC	?getNumAICityStrategyInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumAICityStrategyInfos
EXTRN	?GetAICityStrategyEntries@CvAICityStrategies@@QAEAAV?$vector@PAVCvAICityStrategyEntry@@V?$allocator@PAVCvAICityStrategyEntry@@@std@@@std@@XZ:PROC ; CvAICityStrategies::GetAICityStrategyEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumAICityStrategyInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259934 = -4						; size = 4
?getNumAICityStrategyInfos@CvGlobals@@QAEHXZ PROC	; CvGlobals::getNumAICityStrategyInfos, COMDAT
; _this$ = ecx

; 4070 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4071 : 	return (int)m_pAICityStrategies->GetAICityStrategyEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1688]
	call	?GetAICityStrategyEntries@CvAICityStrategies@@QAEAAV?$vector@PAVCvAICityStrategyEntry@@V?$allocator@PAVCvAICityStrategyEntry@@@std@@@std@@XZ ; CvAICityStrategies::GetAICityStrategyEntries
	mov	DWORD PTR $T259934[ebp], eax
	mov	ecx, DWORD PTR $T259934[ebp]
	mov	edx, DWORD PTR $T259934[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4072 : #endif
; 4073 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumAICityStrategyInfos@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getNumAICityStrategyInfos
_TEXT	ENDS
PUBLIC	?getAICityStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvAICityStrategyEntry@@V?$allocator@PAVCvAICityStrategyEntry@@@std@@@std@@XZ ; CvGlobals::getAICityStrategyInfo
; Function compile flags: /Odtp
;	COMDAT ?getAICityStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvAICityStrategyEntry@@V?$allocator@PAVCvAICityStrategyEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAICityStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvAICityStrategyEntry@@V?$allocator@PAVCvAICityStrategyEntry@@@std@@@std@@XZ PROC ; CvGlobals::getAICityStrategyInfo, COMDAT
; _this$ = ecx

; 4076 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4077 : 	return m_pAICityStrategies->GetAICityStrategyEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1688]
	call	?GetAICityStrategyEntries@CvAICityStrategies@@QAEAAV?$vector@PAVCvAICityStrategyEntry@@V?$allocator@PAVCvAICityStrategyEntry@@@std@@@std@@XZ ; CvAICityStrategies::GetAICityStrategyEntries

; 4078 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAICityStrategyInfo@CvGlobals@@QAEAAV?$vector@PAVCvAICityStrategyEntry@@V?$allocator@PAVCvAICityStrategyEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getAICityStrategyInfo
_TEXT	ENDS
PUBLIC	?getAICityStrategyInfo@CvGlobals@@QAEPAVCvAICityStrategyEntry@@W4AICityStrategyTypes@@@Z ; CvGlobals::getAICityStrategyInfo
; Function compile flags: /Odtp
;	COMDAT ?getAICityStrategyInfo@CvGlobals@@QAEPAVCvAICityStrategyEntry@@W4AICityStrategyTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259942 = -4						; size = 4
_eAICityStrategyNum$ = 8				; size = 4
?getAICityStrategyInfo@CvGlobals@@QAEPAVCvAICityStrategyEntry@@W4AICityStrategyTypes@@@Z PROC ; CvGlobals::getAICityStrategyInfo, COMDAT
; _this$ = ecx

; 4091 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4092 : 	CvAssert(eAICityStrategyNum > -1);
; 4093 : 	CvAssert(eAICityStrategyNum < GC.getNumAICityStrategyInfos());
; 4094 : 	return m_pAICityStrategies->GetAICityStrategyEntries()[eAICityStrategyNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1688]
	call	?GetAICityStrategyEntries@CvAICityStrategies@@QAEAAV?$vector@PAVCvAICityStrategyEntry@@V?$allocator@PAVCvAICityStrategyEntry@@@std@@@std@@XZ ; CvAICityStrategies::GetAICityStrategyEntries
	mov	DWORD PTR $T259942[ebp], eax
	mov	ecx, DWORD PTR $T259942[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eAICityStrategyNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 4095 : #endif
; 4096 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getAICityStrategyInfo@CvGlobals@@QAEPAVCvAICityStrategyEntry@@W4AICityStrategyTypes@@@Z ENDP ; CvGlobals::getAICityStrategyInfo
_TEXT	ENDS
PUBLIC	?GetGameAICityStrategies@CvGlobals@@QBEPAVCvAICityStrategies@@XZ ; CvGlobals::GetGameAICityStrategies
; Function compile flags: /Odtp
;	COMDAT ?GetGameAICityStrategies@CvGlobals@@QBEPAVCvAICityStrategies@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameAICityStrategies@CvGlobals@@QBEPAVCvAICityStrategies@@XZ PROC ; CvGlobals::GetGameAICityStrategies, COMDAT
; _this$ = ecx

; 4099 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4100 : 	return m_pAICityStrategies;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1688]

; 4101 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameAICityStrategies@CvGlobals@@QBEPAVCvAICityStrategies@@XZ ENDP ; CvGlobals::GetGameAICityStrategies
_TEXT	ENDS
PUBLIC	?getNumPolicyInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumPolicyInfos
EXTRN	?GetPolicyEntries@CvPolicyXMLEntries@@QAEAAV?$vector@PAVCvPolicyEntry@@V?$allocator@PAVCvPolicyEntry@@@std@@@std@@XZ:PROC ; CvPolicyXMLEntries::GetPolicyEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumPolicyInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259950 = -4						; size = 4
?getNumPolicyInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumPolicyInfos, COMDAT
; _this$ = ecx

; 4109 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4110 : 	return (int)m_pPolicies->GetPolicyEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1692]
	call	?GetPolicyEntries@CvPolicyXMLEntries@@QAEAAV?$vector@PAVCvPolicyEntry@@V?$allocator@PAVCvPolicyEntry@@@std@@@std@@XZ ; CvPolicyXMLEntries::GetPolicyEntries
	mov	DWORD PTR $T259950[ebp], eax
	mov	ecx, DWORD PTR $T259950[ebp]
	mov	edx, DWORD PTR $T259950[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4111 : #endif
; 4112 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumPolicyInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumPolicyInfos
_TEXT	ENDS
PUBLIC	?getPolicyInfo@CvGlobals@@QAEAAV?$vector@PAVCvPolicyEntry@@V?$allocator@PAVCvPolicyEntry@@@std@@@std@@XZ ; CvGlobals::getPolicyInfo
; Function compile flags: /Odtp
;	COMDAT ?getPolicyInfo@CvGlobals@@QAEAAV?$vector@PAVCvPolicyEntry@@V?$allocator@PAVCvPolicyEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPolicyInfo@CvGlobals@@QAEAAV?$vector@PAVCvPolicyEntry@@V?$allocator@PAVCvPolicyEntry@@@std@@@std@@XZ PROC ; CvGlobals::getPolicyInfo, COMDAT
; _this$ = ecx

; 4115 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4116 : 	return m_pPolicies->GetPolicyEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1692]
	call	?GetPolicyEntries@CvPolicyXMLEntries@@QAEAAV?$vector@PAVCvPolicyEntry@@V?$allocator@PAVCvPolicyEntry@@@std@@@std@@XZ ; CvPolicyXMLEntries::GetPolicyEntries

; 4117 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPolicyInfo@CvGlobals@@QAEAAV?$vector@PAVCvPolicyEntry@@V?$allocator@PAVCvPolicyEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getPolicyInfo
_TEXT	ENDS
PUBLIC	?getPolicyInfo@CvGlobals@@QAEPAVCvPolicyEntry@@W4PolicyTypes@@@Z ; CvGlobals::getPolicyInfo
; Function compile flags: /Odtp
;	COMDAT ?getPolicyInfo@CvGlobals@@QAEPAVCvPolicyEntry@@W4PolicyTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259958 = -4						; size = 4
_ePolicyNum$ = 8					; size = 4
?getPolicyInfo@CvGlobals@@QAEPAVCvPolicyEntry@@W4PolicyTypes@@@Z PROC ; CvGlobals::getPolicyInfo, COMDAT
; _this$ = ecx

; 4130 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4131 : 	CvAssert(ePolicyNum > -1);
; 4132 : 	CvAssert(ePolicyNum < GC.getNumPolicyInfos());
; 4133 : 	return m_pPolicies->GetPolicyEntries()[ePolicyNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1692]
	call	?GetPolicyEntries@CvPolicyXMLEntries@@QAEAAV?$vector@PAVCvPolicyEntry@@V?$allocator@PAVCvPolicyEntry@@@std@@@std@@XZ ; CvPolicyXMLEntries::GetPolicyEntries
	mov	DWORD PTR $T259958[ebp], eax
	mov	ecx, DWORD PTR $T259958[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _ePolicyNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 4134 : #endif
; 4135 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getPolicyInfo@CvGlobals@@QAEPAVCvPolicyEntry@@W4PolicyTypes@@@Z ENDP ; CvGlobals::getPolicyInfo
_TEXT	ENDS
PUBLIC	?GetGamePolicies@CvGlobals@@QBEPAVCvPolicyXMLEntries@@XZ ; CvGlobals::GetGamePolicies
; Function compile flags: /Odtp
;	COMDAT ?GetGamePolicies@CvGlobals@@QBEPAVCvPolicyXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGamePolicies@CvGlobals@@QBEPAVCvPolicyXMLEntries@@XZ PROC ; CvGlobals::GetGamePolicies, COMDAT
; _this$ = ecx

; 4138 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4139 : 	return m_pPolicies;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1692]

; 4140 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGamePolicies@CvGlobals@@QBEPAVCvPolicyXMLEntries@@XZ ENDP ; CvGlobals::GetGamePolicies
_TEXT	ENDS
PUBLIC	?getNumPolicyBranchInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumPolicyBranchInfos
EXTRN	?GetPolicyBranchEntries@CvPolicyXMLEntries@@QAEAAV?$vector@PAVCvPolicyBranchEntry@@V?$allocator@PAVCvPolicyBranchEntry@@@std@@@std@@XZ:PROC ; CvPolicyXMLEntries::GetPolicyBranchEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumPolicyBranchInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259966 = -4						; size = 4
?getNumPolicyBranchInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumPolicyBranchInfos, COMDAT
; _this$ = ecx

; 4148 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4149 : 	return (int)m_pPolicies->GetPolicyBranchEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1692]
	call	?GetPolicyBranchEntries@CvPolicyXMLEntries@@QAEAAV?$vector@PAVCvPolicyBranchEntry@@V?$allocator@PAVCvPolicyBranchEntry@@@std@@@std@@XZ ; CvPolicyXMLEntries::GetPolicyBranchEntries
	mov	DWORD PTR $T259966[ebp], eax
	mov	ecx, DWORD PTR $T259966[ebp]
	mov	edx, DWORD PTR $T259966[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4150 : #endif
; 4151 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumPolicyBranchInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumPolicyBranchInfos
_TEXT	ENDS
PUBLIC	?getPolicyBranchInfo@CvGlobals@@QAEAAV?$vector@PAVCvPolicyBranchEntry@@V?$allocator@PAVCvPolicyBranchEntry@@@std@@@std@@XZ ; CvGlobals::getPolicyBranchInfo
; Function compile flags: /Odtp
;	COMDAT ?getPolicyBranchInfo@CvGlobals@@QAEAAV?$vector@PAVCvPolicyBranchEntry@@V?$allocator@PAVCvPolicyBranchEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPolicyBranchInfo@CvGlobals@@QAEAAV?$vector@PAVCvPolicyBranchEntry@@V?$allocator@PAVCvPolicyBranchEntry@@@std@@@std@@XZ PROC ; CvGlobals::getPolicyBranchInfo, COMDAT
; _this$ = ecx

; 4154 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4155 : 	return m_pPolicies->GetPolicyBranchEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1692]
	call	?GetPolicyBranchEntries@CvPolicyXMLEntries@@QAEAAV?$vector@PAVCvPolicyBranchEntry@@V?$allocator@PAVCvPolicyBranchEntry@@@std@@@std@@XZ ; CvPolicyXMLEntries::GetPolicyBranchEntries

; 4156 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPolicyBranchInfo@CvGlobals@@QAEAAV?$vector@PAVCvPolicyBranchEntry@@V?$allocator@PAVCvPolicyBranchEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getPolicyBranchInfo
_TEXT	ENDS
PUBLIC	?getPolicyBranchInfo@CvGlobals@@QAEPAVCvPolicyBranchEntry@@W4PolicyBranchTypes@@@Z ; CvGlobals::getPolicyBranchInfo
; Function compile flags: /Odtp
;	COMDAT ?getPolicyBranchInfo@CvGlobals@@QAEPAVCvPolicyBranchEntry@@W4PolicyBranchTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259974 = -4						; size = 4
_ePolicyBranchNum$ = 8					; size = 4
?getPolicyBranchInfo@CvGlobals@@QAEPAVCvPolicyBranchEntry@@W4PolicyBranchTypes@@@Z PROC ; CvGlobals::getPolicyBranchInfo, COMDAT
; _this$ = ecx

; 4169 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4170 : 	CvAssert(ePolicyBranchNum > -1);
; 4171 : 	CvAssert(ePolicyBranchNum < GC.getNumPolicyBranchInfos());
; 4172 : 	return m_pPolicies->GetPolicyBranchEntries()[ePolicyBranchNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1692]
	call	?GetPolicyBranchEntries@CvPolicyXMLEntries@@QAEAAV?$vector@PAVCvPolicyBranchEntry@@V?$allocator@PAVCvPolicyBranchEntry@@@std@@@std@@XZ ; CvPolicyXMLEntries::GetPolicyBranchEntries
	mov	DWORD PTR $T259974[ebp], eax
	mov	ecx, DWORD PTR $T259974[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _ePolicyBranchNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 4173 : #endif
; 4174 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getPolicyBranchInfo@CvGlobals@@QAEPAVCvPolicyBranchEntry@@W4PolicyBranchTypes@@@Z ENDP ; CvGlobals::getPolicyBranchInfo
_TEXT	ENDS
PUBLIC	?getNumEmphasisInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumEmphasisInfos
EXTRN	?GetEmphasisEntries@CvEmphasisXMLEntries@@QAEAAV?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@XZ:PROC ; CvEmphasisXMLEntries::GetEmphasisEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumEmphasisInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259980 = -4						; size = 4
?getNumEmphasisInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumEmphasisInfos, COMDAT
; _this$ = ecx

; 4182 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4183 : 	return (int)m_pEmphases->GetEmphasisEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1720]
	call	?GetEmphasisEntries@CvEmphasisXMLEntries@@QAEAAV?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@XZ ; CvEmphasisXMLEntries::GetEmphasisEntries
	mov	DWORD PTR $T259980[ebp], eax
	mov	ecx, DWORD PTR $T259980[ebp]
	mov	edx, DWORD PTR $T259980[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4184 : #endif
; 4185 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumEmphasisInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumEmphasisInfos
_TEXT	ENDS
PUBLIC	?getEmphasisInfo@CvGlobals@@QAEAAV?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@XZ ; CvGlobals::getEmphasisInfo
; Function compile flags: /Odtp
;	COMDAT ?getEmphasisInfo@CvGlobals@@QAEAAV?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getEmphasisInfo@CvGlobals@@QAEAAV?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@XZ PROC ; CvGlobals::getEmphasisInfo, COMDAT
; _this$ = ecx

; 4188 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4189 : 	return m_pEmphases->GetEmphasisEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1720]
	call	?GetEmphasisEntries@CvEmphasisXMLEntries@@QAEAAV?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@XZ ; CvEmphasisXMLEntries::GetEmphasisEntries

; 4190 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getEmphasisInfo@CvGlobals@@QAEAAV?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getEmphasisInfo
_TEXT	ENDS
PUBLIC	?getEmphasisInfo@CvGlobals@@QAEPAVCvEmphasisEntry@@W4EmphasizeTypes@@@Z ; CvGlobals::getEmphasisInfo
; Function compile flags: /Odtp
;	COMDAT ?getEmphasisInfo@CvGlobals@@QAEPAVCvEmphasisEntry@@W4EmphasizeTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259988 = -4						; size = 4
_eEmphasisNum$ = 8					; size = 4
?getEmphasisInfo@CvGlobals@@QAEPAVCvEmphasisEntry@@W4EmphasizeTypes@@@Z PROC ; CvGlobals::getEmphasisInfo, COMDAT
; _this$ = ecx

; 4203 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4204 : 	CvAssert(eEmphasisNum > -1);
; 4205 : 	CvAssert(eEmphasisNum < GC.getNumEmphasisInfos());
; 4206 : 	return m_pEmphases->GetEmphasisEntries()[eEmphasisNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1720]
	call	?GetEmphasisEntries@CvEmphasisXMLEntries@@QAEAAV?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@XZ ; CvEmphasisXMLEntries::GetEmphasisEntries
	mov	DWORD PTR $T259988[ebp], eax
	mov	ecx, DWORD PTR $T259988[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eEmphasisNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 4207 : #endif
; 4208 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getEmphasisInfo@CvGlobals@@QAEPAVCvEmphasisEntry@@W4EmphasizeTypes@@@Z ENDP ; CvGlobals::getEmphasisInfo
_TEXT	ENDS
PUBLIC	?GetGameEmphases@CvGlobals@@QBEPAVCvEmphasisXMLEntries@@XZ ; CvGlobals::GetGameEmphases
; Function compile flags: /Odtp
;	COMDAT ?GetGameEmphases@CvGlobals@@QBEPAVCvEmphasisXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameEmphases@CvGlobals@@QBEPAVCvEmphasisXMLEntries@@XZ PROC ; CvGlobals::GetGameEmphases, COMDAT
; _this$ = ecx

; 4211 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4212 : 	return m_pEmphases;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1720]

; 4213 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameEmphases@CvGlobals@@QBEPAVCvEmphasisXMLEntries@@XZ ENDP ; CvGlobals::GetGameEmphases
_TEXT	ENDS
PUBLIC	?getNumTraitInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumTraitInfos
EXTRN	?GetTraitEntries@CvTraitXMLEntries@@QAEAAV?$vector@PAVCvTraitEntry@@V?$allocator@PAVCvTraitEntry@@@std@@@std@@XZ:PROC ; CvTraitXMLEntries::GetTraitEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumTraitInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T259996 = -4						; size = 4
?getNumTraitInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumTraitInfos, COMDAT
; _this$ = ecx

; 4221 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4222 : 	return (int)m_pTraits->GetTraitEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1724]
	call	?GetTraitEntries@CvTraitXMLEntries@@QAEAAV?$vector@PAVCvTraitEntry@@V?$allocator@PAVCvTraitEntry@@@std@@@std@@XZ ; CvTraitXMLEntries::GetTraitEntries
	mov	DWORD PTR $T259996[ebp], eax
	mov	ecx, DWORD PTR $T259996[ebp]
	mov	edx, DWORD PTR $T259996[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4223 : #endif
; 4224 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumTraitInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumTraitInfos
_TEXT	ENDS
PUBLIC	?getTraitInfo@CvGlobals@@QAEAAV?$vector@PAVCvTraitEntry@@V?$allocator@PAVCvTraitEntry@@@std@@@std@@XZ ; CvGlobals::getTraitInfo
; Function compile flags: /Odtp
;	COMDAT ?getTraitInfo@CvGlobals@@QAEAAV?$vector@PAVCvTraitEntry@@V?$allocator@PAVCvTraitEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTraitInfo@CvGlobals@@QAEAAV?$vector@PAVCvTraitEntry@@V?$allocator@PAVCvTraitEntry@@@std@@@std@@XZ PROC ; CvGlobals::getTraitInfo, COMDAT
; _this$ = ecx

; 4227 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4228 : 	return m_pTraits->GetTraitEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1724]
	call	?GetTraitEntries@CvTraitXMLEntries@@QAEAAV?$vector@PAVCvTraitEntry@@V?$allocator@PAVCvTraitEntry@@@std@@@std@@XZ ; CvTraitXMLEntries::GetTraitEntries

; 4229 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTraitInfo@CvGlobals@@QAEAAV?$vector@PAVCvTraitEntry@@V?$allocator@PAVCvTraitEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getTraitInfo
_TEXT	ENDS
PUBLIC	?getTraitInfo@CvGlobals@@QAEPAVCvTraitEntry@@W4TraitTypes@@@Z ; CvGlobals::getTraitInfo
; Function compile flags: /Odtp
;	COMDAT ?getTraitInfo@CvGlobals@@QAEPAVCvTraitEntry@@W4TraitTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260004 = -4						; size = 4
_eTraitNum$ = 8						; size = 4
?getTraitInfo@CvGlobals@@QAEPAVCvTraitEntry@@W4TraitTypes@@@Z PROC ; CvGlobals::getTraitInfo, COMDAT
; _this$ = ecx

; 4242 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4243 : 	CvAssert(eTraitNum > -1);
; 4244 : 	CvAssert(eTraitNum < GC.getNumTraitInfos());
; 4245 : 	return m_pTraits->GetTraitEntries()[eTraitNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1724]
	call	?GetTraitEntries@CvTraitXMLEntries@@QAEAAV?$vector@PAVCvTraitEntry@@V?$allocator@PAVCvTraitEntry@@@std@@@std@@XZ ; CvTraitXMLEntries::GetTraitEntries
	mov	DWORD PTR $T260004[ebp], eax
	mov	ecx, DWORD PTR $T260004[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eTraitNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 4246 : #endif
; 4247 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getTraitInfo@CvGlobals@@QAEPAVCvTraitEntry@@W4TraitTypes@@@Z ENDP ; CvGlobals::getTraitInfo
_TEXT	ENDS
PUBLIC	?GetGameTraits@CvGlobals@@QBEPAVCvTraitXMLEntries@@XZ ; CvGlobals::GetGameTraits
; Function compile flags: /Odtp
;	COMDAT ?GetGameTraits@CvGlobals@@QBEPAVCvTraitXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameTraits@CvGlobals@@QBEPAVCvTraitXMLEntries@@XZ PROC ; CvGlobals::GetGameTraits, COMDAT
; _this$ = ecx

; 4250 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4251 : 	return m_pTraits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1724]

; 4252 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameTraits@CvGlobals@@QBEPAVCvTraitXMLEntries@@XZ ENDP ; CvGlobals::GetGameTraits
_TEXT	ENDS
PUBLIC	?getNumReligionInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumReligionInfos
EXTRN	?GetReligionEntries@CvReligionXMLEntries@@QAEAAV?$vector@PAVCvReligionEntry@@V?$allocator@PAVCvReligionEntry@@@std@@@std@@XZ:PROC ; CvReligionXMLEntries::GetReligionEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumReligionInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260012 = -4						; size = 4
?getNumReligionInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumReligionInfos, COMDAT
; _this$ = ecx

; 4260 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4261 : 	return (int)m_pReligions->GetReligionEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1728]
	call	?GetReligionEntries@CvReligionXMLEntries@@QAEAAV?$vector@PAVCvReligionEntry@@V?$allocator@PAVCvReligionEntry@@@std@@@std@@XZ ; CvReligionXMLEntries::GetReligionEntries
	mov	DWORD PTR $T260012[ebp], eax
	mov	ecx, DWORD PTR $T260012[ebp]
	mov	edx, DWORD PTR $T260012[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4262 : #endif
; 4263 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumReligionInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumReligionInfos
_TEXT	ENDS
PUBLIC	?getReligionInfo@CvGlobals@@QAEAAV?$vector@PAVCvReligionEntry@@V?$allocator@PAVCvReligionEntry@@@std@@@std@@XZ ; CvGlobals::getReligionInfo
; Function compile flags: /Odtp
;	COMDAT ?getReligionInfo@CvGlobals@@QAEAAV?$vector@PAVCvReligionEntry@@V?$allocator@PAVCvReligionEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getReligionInfo@CvGlobals@@QAEAAV?$vector@PAVCvReligionEntry@@V?$allocator@PAVCvReligionEntry@@@std@@@std@@XZ PROC ; CvGlobals::getReligionInfo, COMDAT
; _this$ = ecx

; 4266 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4267 : 	return m_pReligions->GetReligionEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1728]
	call	?GetReligionEntries@CvReligionXMLEntries@@QAEAAV?$vector@PAVCvReligionEntry@@V?$allocator@PAVCvReligionEntry@@@std@@@std@@XZ ; CvReligionXMLEntries::GetReligionEntries

; 4268 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getReligionInfo@CvGlobals@@QAEAAV?$vector@PAVCvReligionEntry@@V?$allocator@PAVCvReligionEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getReligionInfo
_TEXT	ENDS
PUBLIC	?getReligionInfo@CvGlobals@@QAEPAVCvReligionEntry@@W4ReligionTypes@@@Z ; CvGlobals::getReligionInfo
; Function compile flags: /Odtp
;	COMDAT ?getReligionInfo@CvGlobals@@QAEPAVCvReligionEntry@@W4ReligionTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260020 = -4						; size = 4
_eReligionNum$ = 8					; size = 4
?getReligionInfo@CvGlobals@@QAEPAVCvReligionEntry@@W4ReligionTypes@@@Z PROC ; CvGlobals::getReligionInfo, COMDAT
; _this$ = ecx

; 4281 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4282 : 	CvAssert(eReligionNum > -1);
; 4283 : 	CvAssert(eReligionNum < GC.getNumReligionInfos());
; 4284 : 	return m_pReligions->GetReligionEntries()[eReligionNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1728]
	call	?GetReligionEntries@CvReligionXMLEntries@@QAEAAV?$vector@PAVCvReligionEntry@@V?$allocator@PAVCvReligionEntry@@@std@@@std@@XZ ; CvReligionXMLEntries::GetReligionEntries
	mov	DWORD PTR $T260020[ebp], eax
	mov	ecx, DWORD PTR $T260020[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eReligionNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 4285 : #endif
; 4286 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getReligionInfo@CvGlobals@@QAEPAVCvReligionEntry@@W4ReligionTypes@@@Z ENDP ; CvGlobals::getReligionInfo
_TEXT	ENDS
PUBLIC	?GetGameReligions@CvGlobals@@QBEPAVCvReligionXMLEntries@@XZ ; CvGlobals::GetGameReligions
; Function compile flags: /Odtp
;	COMDAT ?GetGameReligions@CvGlobals@@QBEPAVCvReligionXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameReligions@CvGlobals@@QBEPAVCvReligionXMLEntries@@XZ PROC ; CvGlobals::GetGameReligions, COMDAT
; _this$ = ecx

; 4289 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4290 : 	return m_pReligions;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1728]

; 4291 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameReligions@CvGlobals@@QBEPAVCvReligionXMLEntries@@XZ ENDP ; CvGlobals::GetGameReligions
_TEXT	ENDS
PUBLIC	?getNumBeliefInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumBeliefInfos
EXTRN	?GetBeliefEntries@CvBeliefXMLEntries@@QAEAAV?$vector@PAVCvBeliefEntry@@V?$allocator@PAVCvBeliefEntry@@@std@@@std@@XZ:PROC ; CvBeliefXMLEntries::GetBeliefEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumBeliefInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260028 = -4						; size = 4
?getNumBeliefInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumBeliefInfos, COMDAT
; _this$ = ecx

; 4299 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4300 : 	return (int)m_pBeliefs->GetBeliefEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1732]
	call	?GetBeliefEntries@CvBeliefXMLEntries@@QAEAAV?$vector@PAVCvBeliefEntry@@V?$allocator@PAVCvBeliefEntry@@@std@@@std@@XZ ; CvBeliefXMLEntries::GetBeliefEntries
	mov	DWORD PTR $T260028[ebp], eax
	mov	ecx, DWORD PTR $T260028[ebp]
	mov	edx, DWORD PTR $T260028[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4301 : #endif
; 4302 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumBeliefInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumBeliefInfos
_TEXT	ENDS
PUBLIC	?getBeliefInfo@CvGlobals@@QAEAAV?$vector@PAVCvBeliefEntry@@V?$allocator@PAVCvBeliefEntry@@@std@@@std@@XZ ; CvGlobals::getBeliefInfo
; Function compile flags: /Odtp
;	COMDAT ?getBeliefInfo@CvGlobals@@QAEAAV?$vector@PAVCvBeliefEntry@@V?$allocator@PAVCvBeliefEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBeliefInfo@CvGlobals@@QAEAAV?$vector@PAVCvBeliefEntry@@V?$allocator@PAVCvBeliefEntry@@@std@@@std@@XZ PROC ; CvGlobals::getBeliefInfo, COMDAT
; _this$ = ecx

; 4305 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4306 : 	return m_pBeliefs->GetBeliefEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1732]
	call	?GetBeliefEntries@CvBeliefXMLEntries@@QAEAAV?$vector@PAVCvBeliefEntry@@V?$allocator@PAVCvBeliefEntry@@@std@@@std@@XZ ; CvBeliefXMLEntries::GetBeliefEntries

; 4307 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBeliefInfo@CvGlobals@@QAEAAV?$vector@PAVCvBeliefEntry@@V?$allocator@PAVCvBeliefEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getBeliefInfo
_TEXT	ENDS
PUBLIC	?getBeliefInfo@CvGlobals@@QAEPAVCvBeliefEntry@@W4BeliefTypes@@@Z ; CvGlobals::getBeliefInfo
; Function compile flags: /Odtp
;	COMDAT ?getBeliefInfo@CvGlobals@@QAEPAVCvBeliefEntry@@W4BeliefTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260036 = -4						; size = 4
_eBeliefNum$ = 8					; size = 4
?getBeliefInfo@CvGlobals@@QAEPAVCvBeliefEntry@@W4BeliefTypes@@@Z PROC ; CvGlobals::getBeliefInfo, COMDAT
; _this$ = ecx

; 4320 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4321 : 	CvAssert(eBeliefNum > -1);
; 4322 : 	CvAssert(eBeliefNum < GC.getNumBeliefInfos());
; 4323 : 	return m_pBeliefs->GetBeliefEntries()[eBeliefNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1732]
	call	?GetBeliefEntries@CvBeliefXMLEntries@@QAEAAV?$vector@PAVCvBeliefEntry@@V?$allocator@PAVCvBeliefEntry@@@std@@@std@@XZ ; CvBeliefXMLEntries::GetBeliefEntries
	mov	DWORD PTR $T260036[ebp], eax
	mov	ecx, DWORD PTR $T260036[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eBeliefNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 4324 : #endif
; 4325 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getBeliefInfo@CvGlobals@@QAEPAVCvBeliefEntry@@W4BeliefTypes@@@Z ENDP ; CvGlobals::getBeliefInfo
_TEXT	ENDS
PUBLIC	?GetGameBeliefs@CvGlobals@@QBEPAVCvBeliefXMLEntries@@XZ ; CvGlobals::GetGameBeliefs
; Function compile flags: /Odtp
;	COMDAT ?GetGameBeliefs@CvGlobals@@QBEPAVCvBeliefXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameBeliefs@CvGlobals@@QBEPAVCvBeliefXMLEntries@@XZ PROC ; CvGlobals::GetGameBeliefs, COMDAT
; _this$ = ecx

; 4328 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4329 : 	return m_pBeliefs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1732]

; 4330 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameBeliefs@CvGlobals@@QBEPAVCvBeliefXMLEntries@@XZ ENDP ; CvGlobals::GetGameBeliefs
_TEXT	ENDS
PUBLIC	?getNumLeagueSpecialSessionInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumLeagueSpecialSessionInfos
EXTRN	?GetLeagueSpecialSessionEntries@CvLeagueSpecialSessionXMLEntries@@QAEAAV?$vector@PAVCvLeagueSpecialSessionEntry@@V?$allocator@PAVCvLeagueSpecialSessionEntry@@@std@@@std@@XZ:PROC ; CvLeagueSpecialSessionXMLEntries::GetLeagueSpecialSessionEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumLeagueSpecialSessionInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260044 = -4						; size = 4
?getNumLeagueSpecialSessionInfos@CvGlobals@@QAEHXZ PROC	; CvGlobals::getNumLeagueSpecialSessionInfos, COMDAT
; _this$ = ecx

; 4338 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4339 : 	return (int) m_pLeagueSpecialSessions->GetLeagueSpecialSessionEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1736]
	call	?GetLeagueSpecialSessionEntries@CvLeagueSpecialSessionXMLEntries@@QAEAAV?$vector@PAVCvLeagueSpecialSessionEntry@@V?$allocator@PAVCvLeagueSpecialSessionEntry@@@std@@@std@@XZ ; CvLeagueSpecialSessionXMLEntries::GetLeagueSpecialSessionEntries
	mov	DWORD PTR $T260044[ebp], eax
	mov	ecx, DWORD PTR $T260044[ebp]
	mov	edx, DWORD PTR $T260044[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4340 : #endif
; 4341 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumLeagueSpecialSessionInfos@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getNumLeagueSpecialSessionInfos
_TEXT	ENDS
PUBLIC	?getLeagueSpecialSessionInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueSpecialSessionEntry@@V?$allocator@PAVCvLeagueSpecialSessionEntry@@@std@@@std@@XZ ; CvGlobals::getLeagueSpecialSessionInfo
; Function compile flags: /Odtp
;	COMDAT ?getLeagueSpecialSessionInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueSpecialSessionEntry@@V?$allocator@PAVCvLeagueSpecialSessionEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLeagueSpecialSessionInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueSpecialSessionEntry@@V?$allocator@PAVCvLeagueSpecialSessionEntry@@@std@@@std@@XZ PROC ; CvGlobals::getLeagueSpecialSessionInfo, COMDAT
; _this$ = ecx

; 4344 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4345 : 	return m_pLeagueSpecialSessions->GetLeagueSpecialSessionEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1736]
	call	?GetLeagueSpecialSessionEntries@CvLeagueSpecialSessionXMLEntries@@QAEAAV?$vector@PAVCvLeagueSpecialSessionEntry@@V?$allocator@PAVCvLeagueSpecialSessionEntry@@@std@@@std@@XZ ; CvLeagueSpecialSessionXMLEntries::GetLeagueSpecialSessionEntries

; 4346 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getLeagueSpecialSessionInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueSpecialSessionEntry@@V?$allocator@PAVCvLeagueSpecialSessionEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getLeagueSpecialSessionInfo
_TEXT	ENDS
PUBLIC	?getLeagueSpecialSessionInfo@CvGlobals@@QAEPAVCvLeagueSpecialSessionEntry@@W4LeagueSpecialSessionTypes@@@Z ; CvGlobals::getLeagueSpecialSessionInfo
; Function compile flags: /Odtp
;	COMDAT ?getLeagueSpecialSessionInfo@CvGlobals@@QAEPAVCvLeagueSpecialSessionEntry@@W4LeagueSpecialSessionTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260052 = -4						; size = 4
_eLeagueSpecialSessionNum$ = 8				; size = 4
?getLeagueSpecialSessionInfo@CvGlobals@@QAEPAVCvLeagueSpecialSessionEntry@@W4LeagueSpecialSessionTypes@@@Z PROC ; CvGlobals::getLeagueSpecialSessionInfo, COMDAT
; _this$ = ecx

; 4349 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4350 : #ifdef AUI_WARNING_FIXES
; 4351 : 	uint uiIndex = uint(eLeagueSpecialSessionNum);
; 4352 : 	CvAssert(uiIndex < GC.getNumLeagueSpecialSessionInfos());
; 4353 : 	if (uiIndex < GC.getNumLeagueSpecialSessionInfos())
; 4354 : 		return m_pLeagueSpecialSessions->GetLeagueSpecialSessionEntries()[uiIndex];
; 4355 : 	else
; 4356 : 		return NULL;
; 4357 : #else
; 4358 : 	CvAssert(eLeagueSpecialSessionNum > -1);
; 4359 : 	CvAssert(eLeagueSpecialSessionNum < GC.getNumLeagueSpecialSessionInfos());
; 4360 : 	return m_pLeagueSpecialSessions->GetLeagueSpecialSessionEntries()[eLeagueSpecialSessionNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1736]
	call	?GetLeagueSpecialSessionEntries@CvLeagueSpecialSessionXMLEntries@@QAEAAV?$vector@PAVCvLeagueSpecialSessionEntry@@V?$allocator@PAVCvLeagueSpecialSessionEntry@@@std@@@std@@XZ ; CvLeagueSpecialSessionXMLEntries::GetLeagueSpecialSessionEntries
	mov	DWORD PTR $T260052[ebp], eax
	mov	ecx, DWORD PTR $T260052[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eLeagueSpecialSessionNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 4361 : #endif
; 4362 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getLeagueSpecialSessionInfo@CvGlobals@@QAEPAVCvLeagueSpecialSessionEntry@@W4LeagueSpecialSessionTypes@@@Z ENDP ; CvGlobals::getLeagueSpecialSessionInfo
_TEXT	ENDS
PUBLIC	?GetGameLeagueSpecialSessions@CvGlobals@@QBEPAVCvLeagueSpecialSessionXMLEntries@@XZ ; CvGlobals::GetGameLeagueSpecialSessions
; Function compile flags: /Odtp
;	COMDAT ?GetGameLeagueSpecialSessions@CvGlobals@@QBEPAVCvLeagueSpecialSessionXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameLeagueSpecialSessions@CvGlobals@@QBEPAVCvLeagueSpecialSessionXMLEntries@@XZ PROC ; CvGlobals::GetGameLeagueSpecialSessions, COMDAT
; _this$ = ecx

; 4365 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4366 : 	return m_pLeagueSpecialSessions;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1736]

; 4367 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameLeagueSpecialSessions@CvGlobals@@QBEPAVCvLeagueSpecialSessionXMLEntries@@XZ ENDP ; CvGlobals::GetGameLeagueSpecialSessions
_TEXT	ENDS
PUBLIC	?getNumLeagueNameInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumLeagueNameInfos
EXTRN	?GetLeagueNameEntries@CvLeagueNameXMLEntries@@QAEAAV?$vector@PAVCvLeagueNameEntry@@V?$allocator@PAVCvLeagueNameEntry@@@std@@@std@@XZ:PROC ; CvLeagueNameXMLEntries::GetLeagueNameEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumLeagueNameInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260060 = -4						; size = 4
?getNumLeagueNameInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumLeagueNameInfos, COMDAT
; _this$ = ecx

; 4375 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4376 : 	return (int) m_pLeagueNames->GetLeagueNameEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1740]
	call	?GetLeagueNameEntries@CvLeagueNameXMLEntries@@QAEAAV?$vector@PAVCvLeagueNameEntry@@V?$allocator@PAVCvLeagueNameEntry@@@std@@@std@@XZ ; CvLeagueNameXMLEntries::GetLeagueNameEntries
	mov	DWORD PTR $T260060[ebp], eax
	mov	ecx, DWORD PTR $T260060[ebp]
	mov	edx, DWORD PTR $T260060[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4377 : #endif
; 4378 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumLeagueNameInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumLeagueNameInfos
_TEXT	ENDS
PUBLIC	?getLeagueNameInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueNameEntry@@V?$allocator@PAVCvLeagueNameEntry@@@std@@@std@@XZ ; CvGlobals::getLeagueNameInfo
; Function compile flags: /Odtp
;	COMDAT ?getLeagueNameInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueNameEntry@@V?$allocator@PAVCvLeagueNameEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLeagueNameInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueNameEntry@@V?$allocator@PAVCvLeagueNameEntry@@@std@@@std@@XZ PROC ; CvGlobals::getLeagueNameInfo, COMDAT
; _this$ = ecx

; 4381 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4382 : 	return m_pLeagueNames->GetLeagueNameEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1740]
	call	?GetLeagueNameEntries@CvLeagueNameXMLEntries@@QAEAAV?$vector@PAVCvLeagueNameEntry@@V?$allocator@PAVCvLeagueNameEntry@@@std@@@std@@XZ ; CvLeagueNameXMLEntries::GetLeagueNameEntries

; 4383 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getLeagueNameInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueNameEntry@@V?$allocator@PAVCvLeagueNameEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getLeagueNameInfo
_TEXT	ENDS
PUBLIC	?getLeagueNameInfo@CvGlobals@@QAEPAVCvLeagueNameEntry@@W4LeagueNameTypes@@@Z ; CvGlobals::getLeagueNameInfo
; Function compile flags: /Odtp
;	COMDAT ?getLeagueNameInfo@CvGlobals@@QAEPAVCvLeagueNameEntry@@W4LeagueNameTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260068 = -4						; size = 4
_eLeagueNameNum$ = 8					; size = 4
?getLeagueNameInfo@CvGlobals@@QAEPAVCvLeagueNameEntry@@W4LeagueNameTypes@@@Z PROC ; CvGlobals::getLeagueNameInfo, COMDAT
; _this$ = ecx

; 4396 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4397 : 	CvAssert(eLeagueNameNum > -1);
; 4398 : 	CvAssert(eLeagueNameNum < GC.getNumLeagueNameInfos());
; 4399 : 	return m_pLeagueNames->GetLeagueNameEntries()[eLeagueNameNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1740]
	call	?GetLeagueNameEntries@CvLeagueNameXMLEntries@@QAEAAV?$vector@PAVCvLeagueNameEntry@@V?$allocator@PAVCvLeagueNameEntry@@@std@@@std@@XZ ; CvLeagueNameXMLEntries::GetLeagueNameEntries
	mov	DWORD PTR $T260068[ebp], eax
	mov	ecx, DWORD PTR $T260068[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eLeagueNameNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 4400 : #endif
; 4401 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getLeagueNameInfo@CvGlobals@@QAEPAVCvLeagueNameEntry@@W4LeagueNameTypes@@@Z ENDP ; CvGlobals::getLeagueNameInfo
_TEXT	ENDS
PUBLIC	?GetGameLeagueNames@CvGlobals@@QBEPAVCvLeagueNameXMLEntries@@XZ ; CvGlobals::GetGameLeagueNames
; Function compile flags: /Odtp
;	COMDAT ?GetGameLeagueNames@CvGlobals@@QBEPAVCvLeagueNameXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameLeagueNames@CvGlobals@@QBEPAVCvLeagueNameXMLEntries@@XZ PROC ; CvGlobals::GetGameLeagueNames, COMDAT
; _this$ = ecx

; 4404 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4405 : 	return m_pLeagueNames;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1740]

; 4406 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameLeagueNames@CvGlobals@@QBEPAVCvLeagueNameXMLEntries@@XZ ENDP ; CvGlobals::GetGameLeagueNames
_TEXT	ENDS
PUBLIC	?getNumLeagueProjectInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumLeagueProjectInfos
EXTRN	?GetLeagueProjectEntries@CvLeagueProjectXMLEntries@@QAEAAV?$vector@PAVCvLeagueProjectEntry@@V?$allocator@PAVCvLeagueProjectEntry@@@std@@@std@@XZ:PROC ; CvLeagueProjectXMLEntries::GetLeagueProjectEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumLeagueProjectInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260076 = -4						; size = 4
?getNumLeagueProjectInfos@CvGlobals@@QAEHXZ PROC	; CvGlobals::getNumLeagueProjectInfos, COMDAT
; _this$ = ecx

; 4414 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4415 : 	return (int) m_pLeagueProjects->GetLeagueProjectEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1744]
	call	?GetLeagueProjectEntries@CvLeagueProjectXMLEntries@@QAEAAV?$vector@PAVCvLeagueProjectEntry@@V?$allocator@PAVCvLeagueProjectEntry@@@std@@@std@@XZ ; CvLeagueProjectXMLEntries::GetLeagueProjectEntries
	mov	DWORD PTR $T260076[ebp], eax
	mov	ecx, DWORD PTR $T260076[ebp]
	mov	edx, DWORD PTR $T260076[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4416 : #endif
; 4417 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumLeagueProjectInfos@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getNumLeagueProjectInfos
_TEXT	ENDS
PUBLIC	?getLeagueProjectInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueProjectEntry@@V?$allocator@PAVCvLeagueProjectEntry@@@std@@@std@@XZ ; CvGlobals::getLeagueProjectInfo
; Function compile flags: /Odtp
;	COMDAT ?getLeagueProjectInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueProjectEntry@@V?$allocator@PAVCvLeagueProjectEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLeagueProjectInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueProjectEntry@@V?$allocator@PAVCvLeagueProjectEntry@@@std@@@std@@XZ PROC ; CvGlobals::getLeagueProjectInfo, COMDAT
; _this$ = ecx

; 4420 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4421 : 	return m_pLeagueProjects->GetLeagueProjectEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1744]
	call	?GetLeagueProjectEntries@CvLeagueProjectXMLEntries@@QAEAAV?$vector@PAVCvLeagueProjectEntry@@V?$allocator@PAVCvLeagueProjectEntry@@@std@@@std@@XZ ; CvLeagueProjectXMLEntries::GetLeagueProjectEntries

; 4422 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getLeagueProjectInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueProjectEntry@@V?$allocator@PAVCvLeagueProjectEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getLeagueProjectInfo
_TEXT	ENDS
PUBLIC	?getLeagueProjectInfo@CvGlobals@@QAEPAVCvLeagueProjectEntry@@W4LeagueProjectTypes@@@Z ; CvGlobals::getLeagueProjectInfo
; Function compile flags: /Odtp
;	COMDAT ?getLeagueProjectInfo@CvGlobals@@QAEPAVCvLeagueProjectEntry@@W4LeagueProjectTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260084 = -4						; size = 4
_eLeagueProjectNum$ = 8					; size = 4
?getLeagueProjectInfo@CvGlobals@@QAEPAVCvLeagueProjectEntry@@W4LeagueProjectTypes@@@Z PROC ; CvGlobals::getLeagueProjectInfo, COMDAT
; _this$ = ecx

; 4435 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4436 : 	CvAssert(eLeagueProjectNum > -1);
; 4437 : 	CvAssert(eLeagueProjectNum < GC.getNumLeagueProjectInfos());
; 4438 : 	return m_pLeagueProjects->GetLeagueProjectEntries()[eLeagueProjectNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1744]
	call	?GetLeagueProjectEntries@CvLeagueProjectXMLEntries@@QAEAAV?$vector@PAVCvLeagueProjectEntry@@V?$allocator@PAVCvLeagueProjectEntry@@@std@@@std@@XZ ; CvLeagueProjectXMLEntries::GetLeagueProjectEntries
	mov	DWORD PTR $T260084[ebp], eax
	mov	ecx, DWORD PTR $T260084[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eLeagueProjectNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 4439 : #endif
; 4440 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getLeagueProjectInfo@CvGlobals@@QAEPAVCvLeagueProjectEntry@@W4LeagueProjectTypes@@@Z ENDP ; CvGlobals::getLeagueProjectInfo
_TEXT	ENDS
PUBLIC	?GetGameLeagueProjects@CvGlobals@@QBEPAVCvLeagueProjectXMLEntries@@XZ ; CvGlobals::GetGameLeagueProjects
; Function compile flags: /Odtp
;	COMDAT ?GetGameLeagueProjects@CvGlobals@@QBEPAVCvLeagueProjectXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameLeagueProjects@CvGlobals@@QBEPAVCvLeagueProjectXMLEntries@@XZ PROC ; CvGlobals::GetGameLeagueProjects, COMDAT
; _this$ = ecx

; 4443 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4444 : 	return m_pLeagueProjects;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1744]

; 4445 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameLeagueProjects@CvGlobals@@QBEPAVCvLeagueProjectXMLEntries@@XZ ENDP ; CvGlobals::GetGameLeagueProjects
_TEXT	ENDS
PUBLIC	?getNumLeagueProjectRewardInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumLeagueProjectRewardInfos
EXTRN	?GetLeagueProjectRewardEntries@CvLeagueProjectRewardXMLEntries@@QAEAAV?$vector@PAVCvLeagueProjectRewardEntry@@V?$allocator@PAVCvLeagueProjectRewardEntry@@@std@@@std@@XZ:PROC ; CvLeagueProjectRewardXMLEntries::GetLeagueProjectRewardEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumLeagueProjectRewardInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260092 = -4						; size = 4
?getNumLeagueProjectRewardInfos@CvGlobals@@QAEHXZ PROC	; CvGlobals::getNumLeagueProjectRewardInfos, COMDAT
; _this$ = ecx

; 4453 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4454 : 	return (int) m_pLeagueProjectRewards->GetLeagueProjectRewardEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1748]
	call	?GetLeagueProjectRewardEntries@CvLeagueProjectRewardXMLEntries@@QAEAAV?$vector@PAVCvLeagueProjectRewardEntry@@V?$allocator@PAVCvLeagueProjectRewardEntry@@@std@@@std@@XZ ; CvLeagueProjectRewardXMLEntries::GetLeagueProjectRewardEntries
	mov	DWORD PTR $T260092[ebp], eax
	mov	ecx, DWORD PTR $T260092[ebp]
	mov	edx, DWORD PTR $T260092[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4455 : #endif
; 4456 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumLeagueProjectRewardInfos@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getNumLeagueProjectRewardInfos
_TEXT	ENDS
PUBLIC	?getLeagueProjectRewardInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueProjectRewardEntry@@V?$allocator@PAVCvLeagueProjectRewardEntry@@@std@@@std@@XZ ; CvGlobals::getLeagueProjectRewardInfo
; Function compile flags: /Odtp
;	COMDAT ?getLeagueProjectRewardInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueProjectRewardEntry@@V?$allocator@PAVCvLeagueProjectRewardEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLeagueProjectRewardInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueProjectRewardEntry@@V?$allocator@PAVCvLeagueProjectRewardEntry@@@std@@@std@@XZ PROC ; CvGlobals::getLeagueProjectRewardInfo, COMDAT
; _this$ = ecx

; 4459 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4460 : 	return m_pLeagueProjectRewards->GetLeagueProjectRewardEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1748]
	call	?GetLeagueProjectRewardEntries@CvLeagueProjectRewardXMLEntries@@QAEAAV?$vector@PAVCvLeagueProjectRewardEntry@@V?$allocator@PAVCvLeagueProjectRewardEntry@@@std@@@std@@XZ ; CvLeagueProjectRewardXMLEntries::GetLeagueProjectRewardEntries

; 4461 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getLeagueProjectRewardInfo@CvGlobals@@QAEAAV?$vector@PAVCvLeagueProjectRewardEntry@@V?$allocator@PAVCvLeagueProjectRewardEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getLeagueProjectRewardInfo
_TEXT	ENDS
PUBLIC	?getLeagueProjectRewardInfo@CvGlobals@@QAEPAVCvLeagueProjectRewardEntry@@W4LeagueProjectRewardTypes@@@Z ; CvGlobals::getLeagueProjectRewardInfo
; Function compile flags: /Odtp
;	COMDAT ?getLeagueProjectRewardInfo@CvGlobals@@QAEPAVCvLeagueProjectRewardEntry@@W4LeagueProjectRewardTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260100 = -4						; size = 4
_eLeagueProjectRewardNum$ = 8				; size = 4
?getLeagueProjectRewardInfo@CvGlobals@@QAEPAVCvLeagueProjectRewardEntry@@W4LeagueProjectRewardTypes@@@Z PROC ; CvGlobals::getLeagueProjectRewardInfo, COMDAT
; _this$ = ecx

; 4474 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4475 : 	CvAssert(eLeagueProjectRewardNum > -1);
; 4476 : 	CvAssert(eLeagueProjectRewardNum < GC.getNumLeagueProjectRewardInfos());
; 4477 : 	return m_pLeagueProjectRewards->GetLeagueProjectRewardEntries()[eLeagueProjectRewardNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1748]
	call	?GetLeagueProjectRewardEntries@CvLeagueProjectRewardXMLEntries@@QAEAAV?$vector@PAVCvLeagueProjectRewardEntry@@V?$allocator@PAVCvLeagueProjectRewardEntry@@@std@@@std@@XZ ; CvLeagueProjectRewardXMLEntries::GetLeagueProjectRewardEntries
	mov	DWORD PTR $T260100[ebp], eax
	mov	ecx, DWORD PTR $T260100[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eLeagueProjectRewardNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 4478 : #endif
; 4479 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getLeagueProjectRewardInfo@CvGlobals@@QAEPAVCvLeagueProjectRewardEntry@@W4LeagueProjectRewardTypes@@@Z ENDP ; CvGlobals::getLeagueProjectRewardInfo
_TEXT	ENDS
PUBLIC	?GetGameLeagueProjectRewards@CvGlobals@@QBEPAVCvLeagueProjectRewardXMLEntries@@XZ ; CvGlobals::GetGameLeagueProjectRewards
; Function compile flags: /Odtp
;	COMDAT ?GetGameLeagueProjectRewards@CvGlobals@@QBEPAVCvLeagueProjectRewardXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameLeagueProjectRewards@CvGlobals@@QBEPAVCvLeagueProjectRewardXMLEntries@@XZ PROC ; CvGlobals::GetGameLeagueProjectRewards, COMDAT
; _this$ = ecx

; 4482 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4483 : 	return m_pLeagueProjectRewards;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1748]

; 4484 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameLeagueProjectRewards@CvGlobals@@QBEPAVCvLeagueProjectRewardXMLEntries@@XZ ENDP ; CvGlobals::GetGameLeagueProjectRewards
_TEXT	ENDS
PUBLIC	?getNumResolutionInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumResolutionInfos
EXTRN	?GetResolutionEntries@CvResolutionXMLEntries@@QAEAAV?$vector@PAVCvResolutionEntry@@V?$allocator@PAVCvResolutionEntry@@@std@@@std@@XZ:PROC ; CvResolutionXMLEntries::GetResolutionEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumResolutionInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260108 = -4						; size = 4
?getNumResolutionInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumResolutionInfos, COMDAT
; _this$ = ecx

; 4492 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4493 : 	return (int) m_pResolutions->GetResolutionEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1752]
	call	?GetResolutionEntries@CvResolutionXMLEntries@@QAEAAV?$vector@PAVCvResolutionEntry@@V?$allocator@PAVCvResolutionEntry@@@std@@@std@@XZ ; CvResolutionXMLEntries::GetResolutionEntries
	mov	DWORD PTR $T260108[ebp], eax
	mov	ecx, DWORD PTR $T260108[ebp]
	mov	edx, DWORD PTR $T260108[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4494 : #endif
; 4495 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumResolutionInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumResolutionInfos
_TEXT	ENDS
PUBLIC	?getResolutionInfo@CvGlobals@@QAEAAV?$vector@PAVCvResolutionEntry@@V?$allocator@PAVCvResolutionEntry@@@std@@@std@@XZ ; CvGlobals::getResolutionInfo
; Function compile flags: /Odtp
;	COMDAT ?getResolutionInfo@CvGlobals@@QAEAAV?$vector@PAVCvResolutionEntry@@V?$allocator@PAVCvResolutionEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResolutionInfo@CvGlobals@@QAEAAV?$vector@PAVCvResolutionEntry@@V?$allocator@PAVCvResolutionEntry@@@std@@@std@@XZ PROC ; CvGlobals::getResolutionInfo, COMDAT
; _this$ = ecx

; 4498 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4499 : 	return m_pResolutions->GetResolutionEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1752]
	call	?GetResolutionEntries@CvResolutionXMLEntries@@QAEAAV?$vector@PAVCvResolutionEntry@@V?$allocator@PAVCvResolutionEntry@@@std@@@std@@XZ ; CvResolutionXMLEntries::GetResolutionEntries

; 4500 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getResolutionInfo@CvGlobals@@QAEAAV?$vector@PAVCvResolutionEntry@@V?$allocator@PAVCvResolutionEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getResolutionInfo
_TEXT	ENDS
PUBLIC	?getResolutionInfo@CvGlobals@@QAEPAVCvResolutionEntry@@W4ResolutionTypes@@@Z ; CvGlobals::getResolutionInfo
; Function compile flags: /Odtp
;	COMDAT ?getResolutionInfo@CvGlobals@@QAEPAVCvResolutionEntry@@W4ResolutionTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260116 = -4						; size = 4
_eResolutionNum$ = 8					; size = 4
?getResolutionInfo@CvGlobals@@QAEPAVCvResolutionEntry@@W4ResolutionTypes@@@Z PROC ; CvGlobals::getResolutionInfo, COMDAT
; _this$ = ecx

; 4513 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4514 : 	CvAssert(eResolutionNum > -1);
; 4515 : 	CvAssert(eResolutionNum < GC.getNumResolutionInfos());
; 4516 : 	return m_pResolutions->GetResolutionEntries()[eResolutionNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1752]
	call	?GetResolutionEntries@CvResolutionXMLEntries@@QAEAAV?$vector@PAVCvResolutionEntry@@V?$allocator@PAVCvResolutionEntry@@@std@@@std@@XZ ; CvResolutionXMLEntries::GetResolutionEntries
	mov	DWORD PTR $T260116[ebp], eax
	mov	ecx, DWORD PTR $T260116[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eResolutionNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 4517 : #endif
; 4518 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getResolutionInfo@CvGlobals@@QAEPAVCvResolutionEntry@@W4ResolutionTypes@@@Z ENDP ; CvGlobals::getResolutionInfo
_TEXT	ENDS
PUBLIC	?GetGameResolutions@CvGlobals@@QBEPAVCvResolutionXMLEntries@@XZ ; CvGlobals::GetGameResolutions
; Function compile flags: /Odtp
;	COMDAT ?GetGameResolutions@CvGlobals@@QBEPAVCvResolutionXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameResolutions@CvGlobals@@QBEPAVCvResolutionXMLEntries@@XZ PROC ; CvGlobals::GetGameResolutions, COMDAT
; _this$ = ecx

; 4521 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4522 : 	return m_pResolutions;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1752]

; 4523 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameResolutions@CvGlobals@@QBEPAVCvResolutionXMLEntries@@XZ ENDP ; CvGlobals::GetGameResolutions
_TEXT	ENDS
PUBLIC	?getNumTechInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumTechInfos
EXTRN	?GetTechEntries@CvTechXMLEntries@@QAEAAV?$vector@PAVCvTechEntry@@V?$allocator@PAVCvTechEntry@@@std@@@std@@XZ:PROC ; CvTechXMLEntries::GetTechEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumTechInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260124 = -4						; size = 4
?getNumTechInfos@CvGlobals@@QAEHXZ PROC			; CvGlobals::getNumTechInfos, COMDAT
; _this$ = ecx

; 4531 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4532 : 	return (int)m_pTechs->GetTechEntries().size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1696]
	call	?GetTechEntries@CvTechXMLEntries@@QAEAAV?$vector@PAVCvTechEntry@@V?$allocator@PAVCvTechEntry@@@std@@@std@@XZ ; CvTechXMLEntries::GetTechEntries
	mov	DWORD PTR $T260124[ebp], eax
	mov	ecx, DWORD PTR $T260124[ebp]
	mov	edx, DWORD PTR $T260124[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4533 : #endif
; 4534 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumTechInfos@CvGlobals@@QAEHXZ ENDP			; CvGlobals::getNumTechInfos
_TEXT	ENDS
PUBLIC	?getTechInfo@CvGlobals@@QAEAAV?$vector@PAVCvTechEntry@@V?$allocator@PAVCvTechEntry@@@std@@@std@@XZ ; CvGlobals::getTechInfo
; Function compile flags: /Odtp
;	COMDAT ?getTechInfo@CvGlobals@@QAEAAV?$vector@PAVCvTechEntry@@V?$allocator@PAVCvTechEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTechInfo@CvGlobals@@QAEAAV?$vector@PAVCvTechEntry@@V?$allocator@PAVCvTechEntry@@@std@@@std@@XZ PROC ; CvGlobals::getTechInfo, COMDAT
; _this$ = ecx

; 4537 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4538 : 	return m_pTechs->GetTechEntries();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1696]
	call	?GetTechEntries@CvTechXMLEntries@@QAEAAV?$vector@PAVCvTechEntry@@V?$allocator@PAVCvTechEntry@@@std@@@std@@XZ ; CvTechXMLEntries::GetTechEntries

; 4539 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTechInfo@CvGlobals@@QAEAAV?$vector@PAVCvTechEntry@@V?$allocator@PAVCvTechEntry@@@std@@@std@@XZ ENDP ; CvGlobals::getTechInfo
_TEXT	ENDS
PUBLIC	?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z ; CvGlobals::getTechInfo
; Function compile flags: /Odtp
;	COMDAT ?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260132 = -4						; size = 4
_eTechNum$ = 8						; size = 4
?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z PROC ; CvGlobals::getTechInfo, COMDAT
; _this$ = ecx

; 4552 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4553 : 	CvAssert(eTechNum > -1);
; 4554 : 	CvAssert(eTechNum < GC.getNumTechInfos());
; 4555 : 	return m_pTechs->GetTechEntries()[eTechNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1696]
	call	?GetTechEntries@CvTechXMLEntries@@QAEAAV?$vector@PAVCvTechEntry@@V?$allocator@PAVCvTechEntry@@@std@@@std@@XZ ; CvTechXMLEntries::GetTechEntries
	mov	DWORD PTR $T260132[ebp], eax
	mov	ecx, DWORD PTR $T260132[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eTechNum$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 4556 : #endif
; 4557 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z ENDP ; CvGlobals::getTechInfo
_TEXT	ENDS
PUBLIC	?GetGameTechs@CvGlobals@@QBEPAVCvTechXMLEntries@@XZ ; CvGlobals::GetGameTechs
; Function compile flags: /Odtp
;	COMDAT ?GetGameTechs@CvGlobals@@QBEPAVCvTechXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameTechs@CvGlobals@@QBEPAVCvTechXMLEntries@@XZ PROC ; CvGlobals::GetGameTechs, COMDAT
; _this$ = ecx

; 4560 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4561 : 	return m_pTechs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1696]

; 4562 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameTechs@CvGlobals@@QBEPAVCvTechXMLEntries@@XZ ENDP ; CvGlobals::GetGameTechs
_TEXT	ENDS
PUBLIC	?getNumEraInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumEraInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumEraInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260140 = -4						; size = 4
?getNumEraInfos@CvGlobals@@QAEHXZ PROC			; CvGlobals::getNumEraInfos, COMDAT
; _this$ = ecx

; 4570 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4571 : 	return (int)m_aEraInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1556				; 00000614H
	mov	DWORD PTR $T260140[ebp], eax
	mov	ecx, DWORD PTR $T260140[ebp]
	mov	edx, DWORD PTR $T260140[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4572 : #endif
; 4573 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumEraInfos@CvGlobals@@QAEHXZ ENDP			; CvGlobals::getNumEraInfos
_TEXT	ENDS
PUBLIC	?getEraInfo@CvGlobals@@QAEAAV?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@XZ ; CvGlobals::getEraInfo
; Function compile flags: /Odtp
;	COMDAT ?getEraInfo@CvGlobals@@QAEAAV?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getEraInfo@CvGlobals@@QAEAAV?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@XZ PROC ; CvGlobals::getEraInfo, COMDAT
; _this$ = ecx

; 4576 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4577 : 	return m_aEraInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1556				; 00000614H

; 4578 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getEraInfo@CvGlobals@@QAEAAV?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getEraInfo
_TEXT	ENDS
PUBLIC	?getEraInfo@CvGlobals@@QAEPAVCvEraInfo@@W4EraTypes@@@Z ; CvGlobals::getEraInfo
; Function compile flags: /Odtp
;	COMDAT ?getEraInfo@CvGlobals@@QAEPAVCvEraInfo@@W4EraTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eEraNum$ = 8						; size = 4
?getEraInfo@CvGlobals@@QAEPAVCvEraInfo@@W4EraTypes@@@Z PROC ; CvGlobals::getEraInfo, COMDAT
; _this$ = ecx

; 4581 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4582 : #ifdef AUI_WARNING_FIXES
; 4583 : 	uint uiIndex = uint(eEraNum);
; 4584 : 	CvAssert(uiIndex < GC.getNumEraInfos());
; 4585 : 	if (uiIndex < GC.getNumEraInfos())
; 4586 : 		return m_aEraInfo[uiIndex];
; 4587 : 	else
; 4588 : 		return NULL;
; 4589 : #else
; 4590 : 	CvAssert(eEraNum > -1);
; 4591 : 	CvAssert(eEraNum < GC.getNumEraInfos());
; 4592 : 	return m_aEraInfo[eEraNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1560]
	mov	edx, DWORD PTR _eEraNum$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 4593 : #endif
; 4594 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getEraInfo@CvGlobals@@QAEPAVCvEraInfo@@W4EraTypes@@@Z ENDP ; CvGlobals::getEraInfo
_TEXT	ENDS
PUBLIC	?getNumHurryInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumHurryInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumHurryInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260153 = -4						; size = 4
?getNumHurryInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumHurryInfos, COMDAT
; _this$ = ecx

; 4602 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4603 : 	return (int)m_paHurryInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1572				; 00000624H
	mov	DWORD PTR $T260153[ebp], eax
	mov	ecx, DWORD PTR $T260153[ebp]
	mov	edx, DWORD PTR $T260153[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4604 : #endif
; 4605 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumHurryInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumHurryInfos
_TEXT	ENDS
PUBLIC	?getHurryInfo@CvGlobals@@QAEAAV?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@XZ ; CvGlobals::getHurryInfo
; Function compile flags: /Odtp
;	COMDAT ?getHurryInfo@CvGlobals@@QAEAAV?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHurryInfo@CvGlobals@@QAEAAV?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@XZ PROC ; CvGlobals::getHurryInfo, COMDAT
; _this$ = ecx

; 4608 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4609 : 	return m_paHurryInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1572				; 00000624H

; 4610 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHurryInfo@CvGlobals@@QAEAAV?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getHurryInfo
_TEXT	ENDS
PUBLIC	?getHurryInfo@CvGlobals@@QAEPAVCvHurryInfo@@W4HurryTypes@@@Z ; CvGlobals::getHurryInfo
; Function compile flags: /Odtp
;	COMDAT ?getHurryInfo@CvGlobals@@QAEPAVCvHurryInfo@@W4HurryTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eHurryNum$ = 8						; size = 4
?getHurryInfo@CvGlobals@@QAEPAVCvHurryInfo@@W4HurryTypes@@@Z PROC ; CvGlobals::getHurryInfo, COMDAT
; _this$ = ecx

; 4623 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4624 : 	CvAssert(eHurryNum > -1);
; 4625 : 	CvAssert(eHurryNum < GC.getNumHurryInfos());
; 4626 : 	return m_paHurryInfo[eHurryNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1576]
	mov	edx, DWORD PTR _eHurryNum$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 4627 : #endif
; 4628 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getHurryInfo@CvGlobals@@QAEPAVCvHurryInfo@@W4HurryTypes@@@Z ENDP ; CvGlobals::getHurryInfo
_TEXT	ENDS
PUBLIC	?getNumVictoryInfos@CvGlobals@@QAEHXZ		; CvGlobals::getNumVictoryInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumVictoryInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260166 = -4						; size = 4
?getNumVictoryInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumVictoryInfos, COMDAT
; _this$ = ecx

; 4636 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4637 : 	return (int)m_paVictoryInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1588				; 00000634H
	mov	DWORD PTR $T260166[ebp], eax
	mov	ecx, DWORD PTR $T260166[ebp]
	mov	edx, DWORD PTR $T260166[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4638 : #endif
; 4639 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumVictoryInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumVictoryInfos
_TEXT	ENDS
PUBLIC	?getVictoryInfo@CvGlobals@@QAEAAV?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@XZ ; CvGlobals::getVictoryInfo
; Function compile flags: /Odtp
;	COMDAT ?getVictoryInfo@CvGlobals@@QAEAAV?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVictoryInfo@CvGlobals@@QAEAAV?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@XZ PROC ; CvGlobals::getVictoryInfo, COMDAT
; _this$ = ecx

; 4642 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4643 : 	return m_paVictoryInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1588				; 00000634H

; 4644 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getVictoryInfo@CvGlobals@@QAEAAV?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getVictoryInfo
_TEXT	ENDS
PUBLIC	?getVictoryInfo@CvGlobals@@QAEPAVCvVictoryInfo@@W4VictoryTypes@@@Z ; CvGlobals::getVictoryInfo
; Function compile flags: /Odtp
;	COMDAT ?getVictoryInfo@CvGlobals@@QAEPAVCvVictoryInfo@@W4VictoryTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eVictoryNum$ = 8					; size = 4
?getVictoryInfo@CvGlobals@@QAEPAVCvVictoryInfo@@W4VictoryTypes@@@Z PROC ; CvGlobals::getVictoryInfo, COMDAT
; _this$ = ecx

; 4657 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4658 : 	CvAssert(eVictoryNum > -1);
; 4659 : 	CvAssert(eVictoryNum < GC.getNumVictoryInfos());
; 4660 : 	return m_paVictoryInfo[eVictoryNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1592]
	mov	edx, DWORD PTR _eVictoryNum$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 4661 : #endif
; 4662 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getVictoryInfo@CvGlobals@@QAEPAVCvVictoryInfo@@W4VictoryTypes@@@Z ENDP ; CvGlobals::getVictoryInfo
_TEXT	ENDS
PUBLIC	?getNumSmallAwardInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumSmallAwardInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumSmallAwardInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260179 = -4						; size = 4
?getNumSmallAwardInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumSmallAwardInfos, COMDAT
; _this$ = ecx

; 4670 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4671 : 	return (int)m_paSmallAwardInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1604				; 00000644H
	mov	DWORD PTR $T260179[ebp], eax
	mov	ecx, DWORD PTR $T260179[ebp]
	mov	edx, DWORD PTR $T260179[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4672 : #endif
; 4673 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumSmallAwardInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumSmallAwardInfos
_TEXT	ENDS
PUBLIC	?getSmallAwardInfo@CvGlobals@@QAEAAV?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@XZ ; CvGlobals::getSmallAwardInfo
; Function compile flags: /Odtp
;	COMDAT ?getSmallAwardInfo@CvGlobals@@QAEAAV?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSmallAwardInfo@CvGlobals@@QAEAAV?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@XZ PROC ; CvGlobals::getSmallAwardInfo, COMDAT
; _this$ = ecx

; 4676 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4677 : 	return m_paSmallAwardInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1604				; 00000644H

; 4678 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSmallAwardInfo@CvGlobals@@QAEAAV?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getSmallAwardInfo
_TEXT	ENDS
PUBLIC	?getSmallAwardInfo@CvGlobals@@QAEPAVCvSmallAwardInfo@@W4SmallAwardTypes@@@Z ; CvGlobals::getSmallAwardInfo
; Function compile flags: /Odtp
;	COMDAT ?getSmallAwardInfo@CvGlobals@@QAEPAVCvSmallAwardInfo@@W4SmallAwardTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eSmallAwardNum$ = 8					; size = 4
?getSmallAwardInfo@CvGlobals@@QAEPAVCvSmallAwardInfo@@W4SmallAwardTypes@@@Z PROC ; CvGlobals::getSmallAwardInfo, COMDAT
; _this$ = ecx

; 4691 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4692 : 	CvAssert(eSmallAwardNum > -1);
; 4693 : 	CvAssert(eSmallAwardNum < GC.getNumSmallAwardInfos());
; 4694 : 	return m_paSmallAwardInfo[eSmallAwardNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1608]
	mov	edx, DWORD PTR _eSmallAwardNum$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 4695 : #endif
; 4696 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getSmallAwardInfo@CvGlobals@@QAEPAVCvSmallAwardInfo@@W4SmallAwardTypes@@@Z ENDP ; CvGlobals::getSmallAwardInfo
_TEXT	ENDS
PUBLIC	?getNumUnitDomainInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumUnitDomainInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumUnitDomainInfos@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T260192 = -4						; size = 4
?getNumUnitDomainInfos@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumUnitDomainInfos, COMDAT
; _this$ = ecx

; 4705 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4706 : 	return (int)m_paUnitDomainInfo.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1636				; 00000664H
	mov	DWORD PTR $T260192[ebp], eax
	mov	ecx, DWORD PTR $T260192[ebp]
	mov	edx, DWORD PTR $T260192[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 4707 : #endif
; 4708 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumUnitDomainInfos@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumUnitDomainInfos
_TEXT	ENDS
PUBLIC	?getUnitDomainInfo@CvGlobals@@QAEAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@XZ ; CvGlobals::getUnitDomainInfo
; Function compile flags: /Odtp
;	COMDAT ?getUnitDomainInfo@CvGlobals@@QAEAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUnitDomainInfo@CvGlobals@@QAEAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@XZ PROC ; CvGlobals::getUnitDomainInfo, COMDAT
; _this$ = ecx

; 4711 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4712 : 	return m_paUnitDomainInfo;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1636				; 00000664H

; 4713 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getUnitDomainInfo@CvGlobals@@QAEAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@XZ ENDP ; CvGlobals::getUnitDomainInfo
_TEXT	ENDS
PUBLIC	?getUnitDomainInfo@CvGlobals@@QAEPAVCvBaseInfo@@W4DomainTypes@@@Z ; CvGlobals::getUnitDomainInfo
; Function compile flags: /Odtp
;	COMDAT ?getUnitDomainInfo@CvGlobals@@QAEPAVCvBaseInfo@@W4DomainTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eDomainNum$ = 8					; size = 4
?getUnitDomainInfo@CvGlobals@@QAEPAVCvBaseInfo@@W4DomainTypes@@@Z PROC ; CvGlobals::getUnitDomainInfo, COMDAT
; _this$ = ecx

; 4726 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4727 : 	CvAssert(eDomainNum > -1);
; 4728 : 	CvAssert(eDomainNum < GC.getNumUnitDomainInfos());
; 4729 : 	return m_paUnitDomainInfo[eDomainNum];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1640]
	mov	edx, DWORD PTR _eDomainNum$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 4730 : #endif
; 4731 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getUnitDomainInfo@CvGlobals@@QAEPAVCvBaseInfo@@W4DomainTypes@@@Z ENDP ; CvGlobals::getUnitDomainInfo
_TEXT	ENDS
PUBLIC	??_C@_0N@IECAGAHP@GameCore?4log?$AA@		; `string'
PUBLIC	?LogMessage@CvGlobals@@QAEXPBD@Z		; CvGlobals::LogMessage
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
;	COMDAT ??_C@_0N@IECAGAHP@GameCore?4log?$AA@
CONST	SEGMENT
??_C@_0N@IECAGAHP@GameCore?4log?$AA@ DB 'GameCore.log', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?LogMessage@CvGlobals@@QAEXPBD@Z
_TEXT	SEGMENT
tv70 = -12						; size = 4
_this$ = -8						; size = 4
_pLog$230012 = -4					; size = 4
_szMessage$ = 8						; size = 4
?LogMessage@CvGlobals@@QAEXPBD@Z PROC			; CvGlobals::LogMessage, COMDAT
; _this$ = ecx

; 4735 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 4736 : 	if(getLogging())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@LogMessage

; 4737 : 	{
; 4738 : 		FILogFile* pLog = LOGFILEMGR.GetLog("GameCore.log", 0);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv70[ebp], eax
	push	0
	push	0
	push	OFFSET ??_C@_0N@IECAGAHP@GameCore?4log?$AA@
	mov	ecx, DWORD PTR tv70[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv70[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$230012[ebp], eax

; 4739 : 		if(pLog)

	cmp	DWORD PTR _pLog$230012[ebp], 0
	je	SHORT $LN3@LogMessage

; 4740 : 			pLog->Msg(szMessage);

	mov	ecx, DWORD PTR _szMessage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLog$230012[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pLog$230012[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8
$LN3@LogMessage:

; 4741 : 	}
; 4742 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?LogMessage@CvGlobals@@QAEXPBD@Z ENDP			; CvGlobals::LogMessage
_TEXT	ENDS
PUBLIC	?GetNotificationEntries@CvGlobals@@QAEPAVCvNotificationXMLEntries@@XZ ; CvGlobals::GetNotificationEntries
; Function compile flags: /Odtp
;	COMDAT ?GetNotificationEntries@CvGlobals@@QAEPAVCvNotificationXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNotificationEntries@CvGlobals@@QAEPAVCvNotificationXMLEntries@@XZ PROC ; CvGlobals::GetNotificationEntries, COMDAT
; _this$ = ecx

; 4745 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4746 : 	return m_pNotifications;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1756]

; 4747 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNotificationEntries@CvGlobals@@QAEPAVCvNotificationXMLEntries@@XZ ENDP ; CvGlobals::GetNotificationEntries
_TEXT	ENDS
PUBLIC	?getFootstepAudioTags@CvGlobals@@QAEAAPAVCvString@@XZ ; CvGlobals::getFootstepAudioTags
; Function compile flags: /Odtp
;	COMDAT ?getFootstepAudioTags@CvGlobals@@QAEAAPAVCvString@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFootstepAudioTags@CvGlobals@@QAEAAPAVCvString@@XZ PROC ; CvGlobals::getFootstepAudioTags, COMDAT
; _this$ = ecx

; 4750 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4751 : 	return m_paszFootstepAudioTags;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1768				; 000006e8H

; 4752 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFootstepAudioTags@CvGlobals@@QAEAAPAVCvString@@XZ ENDP ; CvGlobals::getFootstepAudioTags
_TEXT	ENDS
PUBLIC	?getFootstepAudioTags@CvGlobals@@QAEAAVCvString@@H@Z ; CvGlobals::getFootstepAudioTags
; Function compile flags: /Odtp
;	COMDAT ?getFootstepAudioTags@CvGlobals@@QAEAAVCvString@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getFootstepAudioTags@CvGlobals@@QAEAAVCvString@@H@Z PROC ; CvGlobals::getFootstepAudioTags, COMDAT
; _this$ = ecx

; 4755 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4756 : //	CvAssertMsg(i < getNumFootstepAudioTags(), "Index out of bounds")
; 4757 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 4758 : 	return m_paszFootstepAudioTags[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1768]

; 4759 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getFootstepAudioTags@CvGlobals@@QAEAAVCvString@@H@Z ENDP ; CvGlobals::getFootstepAudioTags
_TEXT	ENDS
PUBLIC	?GetHexDebugLayerNames@CvGlobals@@QAEPAPBDXZ	; CvGlobals::GetHexDebugLayerNames
PUBLIC	??_C@_0BJ@HLCOHNKP@StartSiteEvaluationLayer?$AA@ ; `string'
PUBLIC	??_C@_0BL@JOKFCABJ@SettlerSiteEvaluationLayer?$AA@ ; `string'
PUBLIC	??_C@_0BA@LPEDOLHE@VisibilityLayer?$AA@		; `string'
PUBLIC	??_C@_0O@OLGDEMLP@RevealedLayer?$AA@		; `string'
PUBLIC	??_C@_0M@KLCPCCNH@DangerLayer?$AA@		; `string'
PUBLIC	??_C@_0BG@KDEFMPNN@TacticalAnalysisLayer?$AA@	; `string'
PUBLIC	??_C@_0O@GMMHJALF@ArtifactLayer?$AA@		; `string'
PUBLIC	??_C@_0BD@KGEJHFIO@TargetingPathLayer?$AA@	; `string'
;	COMDAT ??_C@_0BD@KGEJHFIO@TargetingPathLayer?$AA@
CONST	SEGMENT
??_C@_0BD@KGEJHFIO@TargetingPathLayer?$AA@ DB 'TargetingPathLayer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GMMHJALF@ArtifactLayer?$AA@
CONST	SEGMENT
??_C@_0O@GMMHJALF@ArtifactLayer?$AA@ DB 'ArtifactLayer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KDEFMPNN@TacticalAnalysisLayer?$AA@
CONST	SEGMENT
??_C@_0BG@KDEFMPNN@TacticalAnalysisLayer?$AA@ DB 'TacticalAnalysisLayer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KLCPCCNH@DangerLayer?$AA@
CONST	SEGMENT
??_C@_0M@KLCPCCNH@DangerLayer?$AA@ DB 'DangerLayer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OLGDEMLP@RevealedLayer?$AA@
CONST	SEGMENT
??_C@_0O@OLGDEMLP@RevealedLayer?$AA@ DB 'RevealedLayer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LPEDOLHE@VisibilityLayer?$AA@
CONST	SEGMENT
??_C@_0BA@LPEDOLHE@VisibilityLayer?$AA@ DB 'VisibilityLayer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JOKFCABJ@SettlerSiteEvaluationLayer?$AA@
CONST	SEGMENT
??_C@_0BL@JOKFCABJ@SettlerSiteEvaluationLayer?$AA@ DB 'SettlerSiteEvaluat'
	DB	'ionLayer', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HLCOHNKP@StartSiteEvaluationLayer?$AA@
CONST	SEGMENT
??_C@_0BJ@HLCOHNKP@StartSiteEvaluationLayer?$AA@ DB 'StartSiteEvaluationL'
	DB	'ayer', 00H					; `string'
CONST	ENDS
;	COMDAT ?hexDebugLayerNames@?1??GetHexDebugLayerNames@CvGlobals@@QAEPAPBDXZ@4PAPBDA
_DATA	SEGMENT
?hexDebugLayerNames@?1??GetHexDebugLayerNames@CvGlobals@@QAEPAPBDXZ@4PAPBDA DD FLAT:??_C@_0BJ@HLCOHNKP@StartSiteEvaluationLayer?$AA@ ; `CvGlobals::GetHexDebugLayerNames'::`2'::hexDebugLayerNames
	DD	FLAT:??_C@_0BL@JOKFCABJ@SettlerSiteEvaluationLayer?$AA@
	DD	FLAT:??_C@_0BA@LPEDOLHE@VisibilityLayer?$AA@
	DD	FLAT:??_C@_0O@OLGDEMLP@RevealedLayer?$AA@
	DD	FLAT:??_C@_0M@KLCPCCNH@DangerLayer?$AA@
	DD	FLAT:??_C@_0BG@KDEFMPNN@TacticalAnalysisLayer?$AA@
	DD	FLAT:??_C@_0O@GMMHJALF@ArtifactLayer?$AA@
	DD	FLAT:??_C@_0BD@KGEJHFIO@TargetingPathLayer?$AA@
	DD	00H
; Function compile flags: /Odtp
_DATA	ENDS
;	COMDAT ?GetHexDebugLayerNames@CvGlobals@@QAEPAPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHexDebugLayerNames@CvGlobals@@QAEPAPBDXZ PROC	; CvGlobals::GetHexDebugLayerNames, COMDAT
; _this$ = ecx

; 4762 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4763 : 	static const char* hexDebugLayerNames[] =
; 4764 : 	{
; 4765 : 		"StartSiteEvaluationLayer",
; 4766 : 		"SettlerSiteEvaluationLayer",
; 4767 : 		"VisibilityLayer",
; 4768 : 		"RevealedLayer",
; 4769 : 		"DangerLayer",
; 4770 : 		"TacticalAnalysisLayer",
; 4771 : 		"ArtifactLayer",
; 4772 : 		"TargetingPathLayer",
; 4773 : 		NULL
; 4774 : 	};
; 4775 : 	return hexDebugLayerNames;

	mov	eax, OFFSET ?hexDebugLayerNames@?1??GetHexDebugLayerNames@CvGlobals@@QAEPAPBDXZ@4PAPBDA

; 4776 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetHexDebugLayerNames@CvGlobals@@QAEPAPBDXZ ENDP	; CvGlobals::GetHexDebugLayerNames
_TEXT	ENDS
PUBLIC	__real@3fc00000
PUBLIC	__$ArrayPad$
PUBLIC	?GetHexDebugLayerScale@CvGlobals@@QAEMPBD@Z	; CvGlobals::GetHexDebugLayerScale
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetHexDebugLayerScale@CvGlobals@@QAEMPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetHexDebugLayerScale@CvGlobals@@QAEMPBD@Z$0
__ehfuncinfo$?GetHexDebugLayerScale@CvGlobals@@QAEMPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetHexDebugLayerScale@CvGlobals@@QAEMPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetHexDebugLayerScale@CvGlobals@@QAEMPBD@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T260213 = -52						; size = 4
_strLayerName$ = -48					; size = 28
__$ArrayPad$ = -20					; size = 4
_fScale$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_szLayerName$ = 8					; size = 4
?GetHexDebugLayerScale@CvGlobals@@QAEMPBD@Z PROC	; CvGlobals::GetHexDebugLayerScale, COMDAT
; _this$ = ecx

; 4779 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetHexDebugLayerScale@CvGlobals@@QAEMPBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 4780 : 	std::string strLayerName = szLayerName;

	mov	eax, DWORD PTR _szLayerName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strLayerName$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4781 : 	float fScale = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _fScale$[ebp], xmm0

; 4782 : 
; 4783 : 	if(strLayerName == "SettlerSiteEvaluationLayer")

	push	OFFSET ??_C@_0BL@JOKFCABJ@SettlerSiteEvaluationLayer?$AA@
	lea	ecx, DWORD PTR _strLayerName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@GetHexDebu

; 4784 : 	{
; 4785 : 		fScale = 1.5f;

	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR _fScale$[ebp], xmm0
$LN2@GetHexDebu:

; 4786 : 	}
; 4787 : 	if(strLayerName == "ArtifactLayer")

	push	OFFSET ??_C@_0O@GMMHJALF@ArtifactLayer?$AA@
	lea	eax, DWORD PTR _strLayerName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@GetHexDebu

; 4788 : 	{
; 4789 : 		fScale = 2.0f;

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _fScale$[ebp], xmm0
$LN1@GetHexDebu:

; 4790 : 	}
; 4791 : 
; 4792 : 	return fScale;

	movss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR $T260213[ebp], xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strLayerName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	fld	DWORD PTR $T260213[ebp]

; 4793 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetHexDebugLayerScale@CvGlobals@@QAEMPBD@Z$0:
	lea	ecx, DWORD PTR _strLayerName$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?GetHexDebugLayerScale@CvGlobals@@QAEMPBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetHexDebugLayerScale@CvGlobals@@QAEMPBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetHexDebugLayerScale@CvGlobals@@QAEMPBD@Z ENDP	; CvGlobals::GetHexDebugLayerScale
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_05GEPBPPAJ@?$FL?$CFd?$FN?5?$AA@		; `string'
PUBLIC	??_C@_06IFNOLOPE@?$FLS?$CFd?$FN?5?$AA@		; `string'
PUBLIC	??$sprintf_s@$0BA@@@YAHAAY0BA@DPBDZZ		; sprintf_s<16>
PUBLIC	??_C@_03JDANDILB@?$CFd?5?$AA@			; `string'
PUBLIC	??_C@_02OCKJCHFD@D?5?$AA@			; `string'
PUBLIC	??_C@_02OBCNPDDN@F?5?$AA@			; `string'
PUBLIC	??_C@_02POIPIECD@T?5?$AA@			; `string'
PUBLIC	??_C@_02ODGLENGE@E?5?$AA@			; `string'
PUBLIC	??_C@_02OEGCOFLI@A?5?$AA@			; `string'
PUBLIC	??_C@_02OPDOKCIF@N?5?$AA@			; `string'
PUBLIC	??_C@_03FMIPJCBI@A?$CL?5?$AA@			; `string'
PUBLIC	??_C@_02PNALFAEN@V?5?$AA@			; `string'
PUBLIC	??_C@_02PKACPIJB@R?5?$AA@			; `string'
PUBLIC	??_C@_0M@OCCMKOMK@X?5Territory?$AA@		; `string'
PUBLIC	??_C@_09MGLPHEGN@X?5Terrain?$AA@		; `string'
PUBLIC	??_C@_06GHFHNGAP@Rev?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_06CMDKLNBH@Vis?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z ; CvGlobals::GetHexDebugLayerString
EXTRN	?GetLastTargetingPathIndex@@YAHH@Z:PROC		; GetLastTargetingPathIndex
EXTRN	?GetPlotIndex@CvPlot@@QBEHXZ:PROC		; CvPlot::GetPlotIndex
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	?GetTacticalAnalysisMap@CvGame@@QAEPAVCvTacticalAnalysisMap@@XZ:PROC ; CvGame::GetTacticalAnalysisMap
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	?GetArchaeologicalRecord@CvPlot@@QBE?AUCvArchaeologyData@@XZ:PROC ; CvPlot::GetArchaeologicalRecord
EXTRN	?GetPlotDanger@CvPlayer@@QBEHAAVCvPlot@@@Z:PROC	; CvPlayer::GetPlotDanger
EXTRN	?GetSettlerSiteEvaluator@CvGame@@QAEPAVCvSiteEvaluatorForSettler@@XZ:PROC ; CvGame::GetSettlerSiteEvaluator
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
EXTRN	__imp__sprintf_s:PROC
EXTRN	?GetStartSiteEvaluator@CvGame@@QAEPAVCvSiteEvaluatorForStart@@XZ:PROC ; CvGame::GetStartSiteEvaluator
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvtacticalanalysismap.h
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GEPBPPAJ@?$FL?$CFd?$FN?5?$AA@
CONST	SEGMENT
??_C@_05GEPBPPAJ@?$FL?$CFd?$FN?5?$AA@ DB '[%d] ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IFNOLOPE@?$FLS?$CFd?$FN?5?$AA@
CONST	SEGMENT
??_C@_06IFNOLOPE@?$FLS?$CFd?$FN?5?$AA@ DB '[S%d] ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JDANDILB@?$CFd?5?$AA@
CONST	SEGMENT
??_C@_03JDANDILB@?$CFd?5?$AA@ DB '%d ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02OCKJCHFD@D?5?$AA@
CONST	SEGMENT
??_C@_02OCKJCHFD@D?5?$AA@ DB 'D ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OBCNPDDN@F?5?$AA@
CONST	SEGMENT
??_C@_02OBCNPDDN@F?5?$AA@ DB 'F ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02POIPIECD@T?5?$AA@
CONST	SEGMENT
??_C@_02POIPIECD@T?5?$AA@ DB 'T ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ODGLENGE@E?5?$AA@
CONST	SEGMENT
??_C@_02ODGLENGE@E?5?$AA@ DB 'E ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OEGCOFLI@A?5?$AA@
CONST	SEGMENT
??_C@_02OEGCOFLI@A?5?$AA@ DB 'A ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OPDOKCIF@N?5?$AA@
CONST	SEGMENT
??_C@_02OPDOKCIF@N?5?$AA@ DB 'N ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FMIPJCBI@A?$CL?5?$AA@
CONST	SEGMENT
??_C@_03FMIPJCBI@A?$CL?5?$AA@ DB 'A+ ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02PNALFAEN@V?5?$AA@
CONST	SEGMENT
??_C@_02PNALFAEN@V?5?$AA@ DB 'V ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PKACPIJB@R?5?$AA@
CONST	SEGMENT
??_C@_02PKACPIJB@R?5?$AA@ DB 'R ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OCCMKOMK@X?5Territory?$AA@
CONST	SEGMENT
??_C@_0M@OCCMKOMK@X?5Territory?$AA@ DB 'X Territory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MGLPHEGN@X?5Terrain?$AA@
CONST	SEGMENT
??_C@_09MGLPHEGN@X?5Terrain?$AA@ DB 'X Terrain', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GHFHNGAP@Rev?5?$CFd?$AA@
CONST	SEGMENT
??_C@_06GHFHNGAP@Rev?5?$CFd?$AA@ DB 'Rev %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CMDKLNBH@Vis?5?$CFd?$AA@
CONST	SEGMENT
??_C@_06CMDKLNBH@Vis?5?$CFd?$AA@ DB 'Vis %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z$1
__ehfuncinfo$?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
xdata$x	ENDS
;	COMDAT ?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z
_TEXT	SEGMENT
tv151 = -260						; size = 4
tv86 = -256						; size = 4
_this$ = -252						; size = 4
$T260449 = -248						; size = 4
$T260445 = -244						; size = 4
$T260433 = -240						; size = 4
$T260429 = -236						; size = 4
$T260425 = -232						; size = 4
$T260421 = -228						; size = 4
$T260334 = -224						; size = 4
$T260326 = -220						; size = 4
$T260321 = -216						; size = 4
$T260317 = -212						; size = 4
$T260313 = -208						; size = 4
$T260306 = -204						; size = 4
_uiOffset$260296 = -200					; size = 4
$T260276 = -196						; size = 4
$T260267 = -189						; size = 1
$T260246 = -188						; size = 4
$T260236 = -184						; size = 4
$T260227 = -177						; size = 1
$T260226 = -176						; size = 20
_szTmp$230129 = -156					; size = 16
_szTmp$230121 = -140					; size = 16
_strOut$230090 = -124					; size = 28
_iIndex$230091 = -96					; size = 4
_pTactMap$230092 = -92					; size = 4
_pCell$230093 = -88					; size = 4
_iValue$230086 = -84					; size = 4
_iValue$230083 = -80					; size = 4
_kPlayer$230082 = -76					; size = 4
_eTeam$230076 = -72					; size = 4
_kPlayer$230075 = -68					; size = 4
_eTeam$230069 = -64					; size = 4
_kPlayer$230068 = -60					; size = 4
_iValue$230064 = -56					; size = 4
_kPlayer$230063 = -52					; size = 4
_iValue$230058 = -48					; size = 4
_strLayerName$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pkPlot$ = 8						; size = 4
_szLayerName$ = 12					; size = 4
_ePlayer$ = 16						; size = 4
_szBuffer$ = 20						; size = 4
_uiBufferLength$ = 24					; size = 4
?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z PROC ; CvGlobals::GetHexDebugLayerString, COMDAT
; _this$ = ecx

; 4796 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 248				; 000000f8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 4797 : 	std::string strLayerName = szLayerName;

	mov	eax, DWORD PTR _szLayerName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strLayerName$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4798 : 	if(strLayerName == "StartSiteEvaluationLayer")

	push	OFFSET ??_C@_0BJ@HLCOHNKP@StartSiteEvaluationLayer?$AA@
	lea	ecx, DWORD PTR _strLayerName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN41@GetHexDebu@2

; 4799 : 	{
; 4800 : 		if(!pkPlot->isWater())

	mov	eax, DWORD PTR _pkPlot$[ebp]
	movsx	ecx, BYTE PTR [eax+5]
	xor	edx, edx
	cmp	ecx, 3
	sete	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN40@GetHexDebu@2

; 4801 : 		{
; 4802 : 			const int iValue = GC.getGame().GetStartSiteEvaluator()->PlotFoundValue(pkPlot, NULL);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T260236[ebp], ecx
	mov	ecx, DWORD PTR $T260236[ebp]
	call	?GetStartSiteEvaluator@CvGame@@QAEPAVCvSiteEvaluatorForStart@@XZ ; CvGame::GetStartSiteEvaluator
	mov	DWORD PTR tv86[ebp], eax
	push	1
	push	-1
	push	0
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	eax, DWORD PTR tv86[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv86[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _iValue$230058[ebp], eax

; 4803 : 			sprintf_s(szBuffer, uiBufferLength, "%d", iValue);

	mov	ecx, DWORD PTR _iValue$230058[ebp]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _uiBufferLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _szBuffer$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf_s
	add	esp, 16					; 00000010H
$LN40@GetHexDebu@2:

; 4804 : 		}
; 4805 : 	}

	jmp	$LN39@GetHexDebu@2
$LN41@GetHexDebu@2:

; 4806 : 	else if(strLayerName == "SettlerSiteEvaluationLayer")

	push	OFFSET ??_C@_0BL@JOKFCABJ@SettlerSiteEvaluationLayer?$AA@
	lea	ecx, DWORD PTR _strLayerName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	$LN38@GetHexDebu@2

; 4807 : 	{
; 4808 : 		if(!pkPlot->isWater() && ePlayer != NO_PLAYER)

	mov	eax, DWORD PTR _pkPlot$[ebp]
	movsx	ecx, BYTE PTR [eax+5]
	xor	edx, edx
	cmp	ecx, 3
	sete	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN37@GetHexDebu@2
	cmp	DWORD PTR _ePlayer$[ebp], -1
	je	SHORT $LN37@GetHexDebu@2

; 4809 : 		{
; 4810 : 			CvPlayerAI& kPlayer = GET_PLAYER(ePlayer);

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$230063[ebp], ecx

; 4811 : 			const int iValue = GC.getGame().GetSettlerSiteEvaluator()->PlotFoundValue(pkPlot, &kPlayer);

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T260246[ebp], edx
	mov	ecx, DWORD PTR $T260246[ebp]
	call	?GetSettlerSiteEvaluator@CvGame@@QAEPAVCvSiteEvaluatorForSettler@@XZ ; CvGame::GetSettlerSiteEvaluator
	mov	DWORD PTR tv151[ebp], eax
	push	1
	push	-1
	mov	eax, DWORD PTR _kPlayer$230063[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv151[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv151[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	DWORD PTR _iValue$230064[ebp], eax

; 4812 : 			sprintf_s(szBuffer, uiBufferLength, "%d", iValue);

	mov	eax, DWORD PTR _iValue$230064[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _uiBufferLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szBuffer$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf_s
	add	esp, 16					; 00000010H
$LN37@GetHexDebu@2:

; 4813 : 		}
; 4814 : 	}

	jmp	$LN39@GetHexDebu@2
$LN38@GetHexDebu@2:

; 4815 : 	else if(strLayerName == "VisibilityLayer")

	push	OFFSET ??_C@_0BA@LPEDOLHE@VisibilityLayer?$AA@
	lea	eax, DWORD PTR _strLayerName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN35@GetHexDebu@2

; 4816 : 	{
; 4817 : 		if(ePlayer != NO_PLAYER)

	cmp	DWORD PTR _ePlayer$[ebp], -1
	je	$LN34@GetHexDebu@2

; 4818 : 		{
; 4819 : 			CvPlayerAI& kPlayer = GET_PLAYER(ePlayer);

	mov	edx, DWORD PTR _ePlayer$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$230068[ebp], edx

; 4820 : 			const TeamTypes eTeam = kPlayer.getTeam();

	mov	eax, DWORD PTR _kPlayer$230068[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR _eTeam$230069[ebp], eax

; 4821 : 
; 4822 : 			if(pkPlot->isVisible(eTeam))

	cmp	DWORD PTR _eTeam$230069[ebp], -1
	jne	SHORT $LN65@GetHexDebu@2
	mov	BYTE PTR $T260267[ebp], 0
	jmp	SHORT $LN63@GetHexDebu@2
$LN65@GetHexDebu@2:
	mov	edx, DWORD PTR _pkPlot$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR _eTeam$230069[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	xor	eax, eax
	test	edx, edx
	setg	al
	mov	BYTE PTR $T260267[ebp], al
$LN63@GetHexDebu@2:
	movzx	ecx, BYTE PTR $T260267[ebp]
	test	ecx, ecx
	je	SHORT $LN34@GetHexDebu@2

; 4823 : 			{
; 4824 : 				sprintf_s(szBuffer, uiBufferLength, "Vis %d", kPlayer.GetID());

	mov	edx, DWORD PTR _kPlayer$230068[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T260276[ebp], eax
	mov	ecx, DWORD PTR $T260276[ebp]
	push	ecx
	push	OFFSET ??_C@_06CMDKLNBH@Vis?5?$CFd?$AA@
	mov	edx, DWORD PTR _uiBufferLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _szBuffer$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf_s
	add	esp, 16					; 00000010H
$LN34@GetHexDebu@2:

; 4825 : 			}
; 4826 : 		}
; 4827 : 	}

	jmp	$LN39@GetHexDebu@2
$LN35@GetHexDebu@2:

; 4828 : 	else if(strLayerName == "RevealedLayer")

	push	OFFSET ??_C@_0O@OLGDEMLP@RevealedLayer?$AA@
	lea	ecx, DWORD PTR _strLayerName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	$LN31@GetHexDebu@2

; 4829 : 	{
; 4830 : 		if(ePlayer != NO_PLAYER)

	cmp	DWORD PTR _ePlayer$[ebp], -1
	je	$LN30@GetHexDebu@2

; 4831 : 		{
; 4832 : 			CvPlayerAI& kPlayer = GET_PLAYER(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$230075[ebp], eax

; 4833 : 			const TeamTypes eTeam = kPlayer.getTeam();

	mov	ecx, DWORD PTR _kPlayer$230075[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR _eTeam$230076[ebp], eax

; 4834 : 			if(pkPlot->isRevealed(eTeam))

	mov	eax, DWORD PTR _eTeam$230076[ebp]
	shr	eax, 5
	mov	DWORD PTR _uiOffset$260296[ebp], eax
	mov	ecx, DWORD PTR _uiOffset$260296[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _eTeam$230076[ebp]
	sub	edx, ecx
	mov	eax, 1
	mov	ecx, edx
	shl	eax, cl
	mov	ecx, DWORD PTR _uiOffset$260296[ebp]
	mov	edx, DWORD PTR _pkPlot$[ebp]
	and	eax, DWORD PTR [edx+ecx*4+8]
	setne	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN30@GetHexDebu@2

; 4835 : 			{
; 4836 : 				sprintf_s(szBuffer, uiBufferLength, "Rev %d", kPlayer.GetID());

	mov	edx, DWORD PTR _kPlayer$230075[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T260306[ebp], eax
	mov	ecx, DWORD PTR $T260306[ebp]
	push	ecx
	push	OFFSET ??_C@_06GHFHNGAP@Rev?5?$CFd?$AA@
	mov	edx, DWORD PTR _uiBufferLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _szBuffer$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf_s
	add	esp, 16					; 00000010H
$LN30@GetHexDebu@2:

; 4837 : 
; 4838 : 			}
; 4839 : 		}
; 4840 : 	}

	jmp	$LN39@GetHexDebu@2
$LN31@GetHexDebu@2:

; 4841 : 	else if(strLayerName == "DangerLayer")

	push	OFFSET ??_C@_0M@KLCPCCNH@DangerLayer?$AA@
	lea	ecx, DWORD PTR _strLayerName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN27@GetHexDebu@2

; 4842 : 	{
; 4843 : 		if(ePlayer != NO_PLAYER)

	cmp	DWORD PTR _ePlayer$[ebp], -1
	je	SHORT $LN26@GetHexDebu@2

; 4844 : 		{
; 4845 : 			CvPlayerAI& kPlayer = GET_PLAYER(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$230082[ebp], eax

; 4846 : #ifdef AUI_DANGER_PLOTS_REMADE
; 4847 : 			const int iValue = kPlayer.GetPlotDanger(*pkPlot, ePlayer);
; 4848 : #else
; 4849 : 			const int iValue = kPlayer.GetPlotDanger(*pkPlot);

	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPlayer$230082[ebp]
	call	?GetPlotDanger@CvPlayer@@QBEHAAVCvPlot@@@Z ; CvPlayer::GetPlotDanger
	mov	DWORD PTR _iValue$230083[ebp], eax

; 4850 : #endif
; 4851 : 
; 4852 : 			sprintf_s(szBuffer, uiBufferLength, "%d", iValue);

	mov	edx, DWORD PTR _iValue$230083[ebp]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _uiBufferLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szBuffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf_s
	add	esp, 16					; 00000010H
$LN26@GetHexDebu@2:

; 4853 : 		}
; 4854 : 	}

	jmp	$LN39@GetHexDebu@2
$LN27@GetHexDebu@2:

; 4855 : 	else if(strLayerName == "ArtifactLayer")

	push	OFFSET ??_C@_0O@GMMHJALF@ArtifactLayer?$AA@
	lea	edx, DWORD PTR _strLayerName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN24@GetHexDebu@2

; 4856 : 	{
; 4857 : 		const int iValue = pkPlot->GetArchaeologicalRecord().m_eArtifactType; // this is a copy

	lea	ecx, DWORD PTR $T260226[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkPlot$[ebp]
	call	?GetArchaeologicalRecord@CvPlot@@QBE?AUCvArchaeologyData@@XZ ; CvPlot::GetArchaeologicalRecord
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _iValue$230086[ebp], edx

; 4858 : 		sprintf_s(szBuffer, uiBufferLength, "%d", iValue);

	mov	eax, DWORD PTR _iValue$230086[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _uiBufferLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szBuffer$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf_s
	add	esp, 16					; 00000010H
	jmp	$LN39@GetHexDebu@2
$LN24@GetHexDebu@2:

; 4859 : 	}
; 4860 : 	else if(strLayerName == "TacticalAnalysisLayer")

	push	OFFSET ??_C@_0BG@KDEFMPNN@TacticalAnalysisLayer?$AA@
	lea	eax, DWORD PTR _strLayerName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN22@GetHexDebu@2

; 4861 : 	{
; 4862 : 		std::string strOut;

	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 4863 : 
; 4864 : 		int iIndex = GC.getMap().plotNum(pkPlot->getX(), pkPlot->getY());

	mov	edx, DWORD PTR _pkPlot$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	DWORD PTR $T260313[ebp], eax
	mov	ecx, DWORD PTR _pkPlot$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	DWORD PTR $T260317[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T260321[ebp], eax
	mov	ecx, DWORD PTR $T260321[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T260326[ebp], edx
	mov	eax, DWORD PTR $T260313[ebp]
	imul	eax, DWORD PTR $T260326[ebp]
	add	eax, DWORD PTR $T260317[ebp]
	mov	DWORD PTR _iIndex$230091[ebp], eax

; 4865 : 		CvTacticalAnalysisMap* pTactMap = GC.getGame().GetTacticalAnalysisMap();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T260334[ebp], ecx
	mov	ecx, DWORD PTR $T260334[ebp]
	call	?GetTacticalAnalysisMap@CvGame@@QAEPAVCvTacticalAnalysisMap@@XZ ; CvGame::GetTacticalAnalysisMap
	mov	DWORD PTR _pTactMap$230092[ebp], eax

; 4866 : 		CvTacticalAnalysisCell* pCell = pTactMap->GetCell(iIndex);

	mov	edx, DWORD PTR _iIndex$230091[ebp]
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR _pTactMap$230092[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _pCell$230093[ebp], edx

; 4867 : 
; 4868 : 		if(pCell->IsImpassableTerrain())

	mov	ecx, DWORD PTR _pCell$230093[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 4
	neg	edx
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN105@GetHexDebu@2

; 4869 : 		{
; 4870 : 			strOut += "X Terrain";

	push	OFFSET ??_C@_09MGLPHEGN@X?5Terrain?$AA@
	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4871 : 		}
; 4872 : 		else

	jmp	$LN20@GetHexDebu@2

; 4873 : 		{
; 4874 : 			if(pCell->IsImpassableTerritory())

$LN105@GetHexDebu@2:
	mov	ecx, DWORD PTR _pCell$230093[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 8
	neg	edx
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN109@GetHexDebu@2

; 4875 : 			{
; 4876 : 				strOut += "X Territory";

	push	OFFSET ??_C@_0M@OCCMKOMK@X?5Territory?$AA@
	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4877 : 			}
; 4878 : 			else

	jmp	$LN20@GetHexDebu@2

; 4879 : 			{
; 4880 : 				if(pCell->IsRevealed())

$LN109@GetHexDebu@2:
	mov	ecx, DWORD PTR _pCell$230093[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	neg	edx
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN113@GetHexDebu@2

; 4881 : 				{
; 4882 : 					strOut += "R ";

	push	OFFSET ??_C@_02PKACPIJB@R?5?$AA@
	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4883 : 				}
; 4884 : 				if(pCell->IsVisible())

$LN113@GetHexDebu@2:
	mov	ecx, DWORD PTR _pCell$230093[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 2
	neg	edx
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN117@GetHexDebu@2

; 4885 : 				{
; 4886 : 					strOut += "V ";

	push	OFFSET ??_C@_02PNALFAEN@V?5?$AA@
	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4887 : 				}
; 4888 : 				if(pCell->IsEnemyCanMovePast())

$LN117@GetHexDebu@2:
	mov	ecx, DWORD PTR _pCell$230093[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 64					; 00000040H
	neg	edx
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN121@GetHexDebu@2

; 4889 : 				{
; 4890 : 					strOut += "A+ ";

	push	OFFSET ??_C@_03FMIPJCBI@A?$CL?5?$AA@
	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
	jmp	SHORT $LN129@GetHexDebu@2

; 4891 : 				}
; 4892 : 				else if(pCell->IsNotVisibleToEnemy())

$LN121@GetHexDebu@2:
	mov	ecx, DWORD PTR _pCell$230093[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 16					; 00000010H
	neg	edx
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN125@GetHexDebu@2

; 4893 : 				{
; 4894 : 					strOut += "N ";

	push	OFFSET ??_C@_02OPDOKCIF@N?5?$AA@
	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
	jmp	SHORT $LN129@GetHexDebu@2

; 4895 : 				}
; 4896 : 				else if(pCell->IsSubjectToAttack())

$LN125@GetHexDebu@2:
	mov	ecx, DWORD PTR _pCell$230093[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 32					; 00000020H
	neg	edx
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN129@GetHexDebu@2

; 4897 : 				{
; 4898 : 					strOut += "A ";

	push	OFFSET ??_C@_02OEGCOFLI@A?5?$AA@
	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4899 : 				}
; 4900 : 				if(pCell->IsFriendlyTurnEndTile())

$LN129@GetHexDebu@2:
	mov	ecx, DWORD PTR _pCell$230093[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 128				; 00000080H
	neg	edx
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN133@GetHexDebu@2

; 4901 : 				{
; 4902 : 					strOut += "E ";

	push	OFFSET ??_C@_02ODGLENGE@E?5?$AA@
	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4903 : 				}
; 4904 : 				if(pCell->IsWithinRangeOfTarget())

$LN133@GetHexDebu@2:
	mov	ecx, DWORD PTR _pCell$230093[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 131072				; 00020000H
	neg	edx
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN137@GetHexDebu@2

; 4905 : 				{
; 4906 : 					strOut += "T ";

	push	OFFSET ??_C@_02POIPIECD@T?5?$AA@
	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4907 : 				}
; 4908 : 				if(pCell->IsHelpsProvidesFlankBonus())

$LN137@GetHexDebu@2:
	mov	ecx, DWORD PTR _pCell$230093[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 262144				; 00040000H
	neg	edx
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN8@GetHexDebu@2

; 4909 : 				{
; 4910 : 					strOut += "F ";

	push	OFFSET ??_C@_02OBCNPDDN@F?5?$AA@
	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN8@GetHexDebu@2:

; 4911 : 				}
; 4912 : 				if(pCell->GetDefenseModifier() > 0)

	mov	ecx, DWORD PTR _pCell$230093[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR $T260421[ebp], edx
	cmp	DWORD PTR $T260421[ebp], 0
	jle	SHORT $LN7@GetHexDebu@2

; 4913 : 				{
; 4914 : 					strOut += "D ";

	push	OFFSET ??_C@_02OCKJCHFD@D?5?$AA@
	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN7@GetHexDebu@2:

; 4915 : 				}
; 4916 : 				if(pCell->GetDominanceZone() != -1)

	mov	eax, DWORD PTR _pCell$230093[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T260425[ebp], ecx
	cmp	DWORD PTR $T260425[ebp], -1
	je	SHORT $LN6@GetHexDebu@2

; 4917 : 				{
; 4918 : 					char szTmp[16] = {0};

	mov	BYTE PTR _szTmp$230121[ebp], 0
	xor	edx, edx
	mov	DWORD PTR _szTmp$230121[ebp+1], edx
	mov	DWORD PTR _szTmp$230121[ebp+5], edx
	mov	DWORD PTR _szTmp$230121[ebp+9], edx
	mov	WORD PTR _szTmp$230121[ebp+13], dx
	mov	BYTE PTR _szTmp$230121[ebp+15], dl

; 4919 : 					sprintf_s(szTmp, "%d ", pCell->GetDominanceZone());

	mov	eax, DWORD PTR _pCell$230093[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T260429[ebp], ecx
	mov	edx, DWORD PTR $T260429[ebp]
	push	edx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	lea	eax, DWORD PTR _szTmp$230121[ebp]
	push	eax
	call	??$sprintf_s@$0BA@@@YAHAAY0BA@DPBDZZ	; sprintf_s<16>
	add	esp, 12					; 0000000cH

; 4920 : 
; 4921 : 					strOut += szTmp;

	lea	ecx, DWORD PTR _szTmp$230121[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN6@GetHexDebu@2:

; 4922 : 				}
; 4923 : 				if(pCell->GetDeploymentScore() > 0)

	mov	edx, DWORD PTR _pCell$230093[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR $T260433[ebp], eax
	cmp	DWORD PTR $T260433[ebp], 0
	jle	$LN20@GetHexDebu@2

; 4924 : 				{
; 4925 : 					char szTmp[16] = {0};

	mov	BYTE PTR _szTmp$230129[ebp], 0
	xor	ecx, ecx
	mov	DWORD PTR _szTmp$230129[ebp+1], ecx
	mov	DWORD PTR _szTmp$230129[ebp+5], ecx
	mov	DWORD PTR _szTmp$230129[ebp+9], ecx
	mov	WORD PTR _szTmp$230129[ebp+13], cx
	mov	BYTE PTR _szTmp$230129[ebp+15], cl

; 4926 : 					if(pCell->IsSafeForDeployment())

	mov	edx, DWORD PTR _pCell$230093[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 524288				; 00080000H
	neg	eax
	sbb	eax, eax
	neg	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@GetHexDebu@2

; 4927 : 					{
; 4928 : 						sprintf_s(szTmp, "[S%d] ", pCell->GetDeploymentScore());

	mov	edx, DWORD PTR _pCell$230093[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR $T260445[ebp], eax
	mov	ecx, DWORD PTR $T260445[ebp]
	push	ecx
	push	OFFSET ??_C@_06IFNOLOPE@?$FLS?$CFd?$FN?5?$AA@
	lea	edx, DWORD PTR _szTmp$230129[ebp]
	push	edx
	call	??$sprintf_s@$0BA@@@YAHAAY0BA@DPBDZZ	; sprintf_s<16>
	add	esp, 12					; 0000000cH

; 4929 : 					}
; 4930 : 					else

	jmp	SHORT $LN3@GetHexDebu@2
$LN4@GetHexDebu@2:

; 4931 : 					{
; 4932 : 						sprintf_s(szTmp, "[%d] ", pCell->GetDeploymentScore());

	mov	eax, DWORD PTR _pCell$230093[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR $T260449[ebp], ecx
	mov	edx, DWORD PTR $T260449[ebp]
	push	edx
	push	OFFSET ??_C@_05GEPBPPAJ@?$FL?$CFd?$FN?5?$AA@
	lea	eax, DWORD PTR _szTmp$230129[ebp]
	push	eax
	call	??$sprintf_s@$0BA@@@YAHAAY0BA@DPBDZZ	; sprintf_s<16>
	add	esp, 12					; 0000000cH
$LN3@GetHexDebu@2:

; 4933 : 					}
; 4934 : 
; 4935 : 					strOut += szTmp;

	lea	ecx, DWORD PTR _szTmp$230129[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN20@GetHexDebu@2:

; 4936 : 				}
; 4937 : 			}
; 4938 : 		}
; 4939 : 
; 4940 : 		sprintf_s(szBuffer, uiBufferLength, "%s", strOut.c_str());

	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	edx, DWORD PTR _uiBufferLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _szBuffer$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf_s
	add	esp, 16					; 00000010H

; 4941 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strOut$230090[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	SHORT $LN39@GetHexDebu@2
$LN22@GetHexDebu@2:

; 4942 : 	else if(strLayerName == "TargetingPathLayer")

	push	OFFSET ??_C@_0BD@KGEJHFIO@TargetingPathLayer?$AA@
	lea	ecx, DWORD PTR _strLayerName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN39@GetHexDebu@2

; 4943 : 	{
; 4944 : 		extern int GetLastTargetingPathIndex(int plotIndex);
; 4945 : 		sprintf_s(szBuffer, uiBufferLength, "%d", GetLastTargetingPathIndex(pkPlot->GetPlotIndex()));

	mov	ecx, DWORD PTR _pkPlot$[ebp]
	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex
	push	eax
	call	?GetLastTargetingPathIndex@@YAHH@Z	; GetLastTargetingPathIndex
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _uiBufferLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szBuffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf_s
	add	esp, 16					; 00000010H
$LN39@GetHexDebu@2:

; 4946 : 	}
; 4947 : 
; 4948 : 	return true;

	mov	BYTE PTR $T260227[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strLayerName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T260227[ebp]

; 4949 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z$0:
	lea	ecx, DWORD PTR _strLayerName$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z$1:
	lea	ecx, DWORD PTR _strOut$230090[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-252]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z ENDP ; CvGlobals::GetHexDebugLayerString
PUBLIC	??_C@_0BE@DLGMMGNE@POLICY_BRANCH_ORDER?$AA@	; `string'
PUBLIC	??_C@_0BI@FGGAJNOF@POLICY_BRANCH_AUTOCRACY?$AA@	; `string'
PUBLIC	??_C@_0BG@ICDGHIK@POLICY_BRANCH_FREEDOM?$AA@	; `string'
PUBLIC	??_C@_0BI@BJMHFICB@IDEOLOGY_SCORE_FRIENDLY?$AA@	; `string'
PUBLIC	??_C@_0BG@PKJLIP@IDEOLOGY_SCORE_AFRAID?$AA@	; `string'
PUBLIC	??_C@_0BH@CIOBEOHC@IDEOLOGY_SCORE_GUARDED?$AA@	; `string'
PUBLIC	??_C@_0BH@BHJBBLHN@IDEOLOGY_SCORE_HOSTILE?$AA@	; `string'
PUBLIC	??_C@_0BO@PKOAKDAK@IDEOLOGY_SCORE_PER_FREE_TENET?$AA@ ; `string'
PUBLIC	??_C@_0BJ@CHFKOMLK@IDEOLOGY_SCORE_HAPPINESS?$AA@ ; `string'
PUBLIC	??_C@_0BM@HOLOODP@IDEOLOGY_SCORE_GRAND_STRATS?$AA@ ; `string'
PUBLIC	??_C@_0CE@BAFHEOJE@IDEOLOGY_PERCENT_CLEAR_VICTORY_P@ ; `string'
PUBLIC	??_C@_0BL@DKIMIFHP@PROMOTION_GOODY_HUT_PICKER?$AA@ ; `string'
PUBLIC	??_C@_0CM@CDJDBNFO@ESPIONAGE_COUP_OTHER_PLAYERS_INF@ ; `string'
PUBLIC	??_C@_0CD@LHOAEEJP@ESPIONAGE_SURVEILLANCE_SIGHT_RAN@ ; `string'
PUBLIC	??_C@_0CN@LHFPPCKD@ESPIONAGE_INFLUENCE_LOST_FOR_RIG@ ; `string'
PUBLIC	??_C@_0CP@DJOCGGCB@ESPIONAGE_INFLUENCE_GAINED_FOR_R@ ; `string'
PUBLIC	??_C@_0CN@HMNGJMNK@ESPIONAGE_TURNS_BETWEEN_CITY_STA@ ; `string'
PUBLIC	??_C@_0CM@BPFMDNJN@ESPIONAGE_GATHERING_INTEL_RATE_B@ ; `string'
PUBLIC	??_C@_0DD@IHHPHPHE@ESPIONAGE_GATHERING_INTEL_RATE_B@ ; `string'
PUBLIC	??_C@_0CH@PCGCEIKA@ESPIONAGE_GATHERING_INTEL_COST_P@ ; `string'
PUBLIC	??_C@_0BN@BEHHGHED@RELIGION_DIPLO_HIT_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0CF@BMMEGNPE@RELIGION_DIPLO_HIT_CONVERT_HOLY_@ ; `string'
PUBLIC	??_C@_0DA@LJMNDKMC@RELIGION_DIPLO_HIT_RELIGIOUS_FLI@ ; `string'
PUBLIC	??_C@_0DB@KKMFAFIP@RELIGION_DIPLO_HIT_INITIAL_CONVE@ ; `string'
PUBLIC	??_C@_0CA@CLPPGEEO@RELIGION_ADJACENT_CITY_DISTANCE?$AA@ ; `string'
PUBLIC	??_C@_0CI@JPKIAKNB@RELIGION_MISSIONARY_PRESSURE_MUL@ ; `string'
PUBLIC	??_C@_0CJ@LPDIIAGI@RELIGION_PER_TURN_FOUNDING_CITY_@ ; `string'
PUBLIC	??_C@_0CI@MNOPDPG@RELIGION_INITIAL_FOUNDING_CITY_P@ ; `string'
PUBLIC	??_C@_0CC@NCEGLGPI@RELIGION_ATHEISM_PRESSURE_PER_PO@ ; `string'
PUBLIC	??_C@_0CD@COCOCFDB@RELIGION_BASE_CHANCE_PROPHET_SPA@ ; `string'
PUBLIC	??_C@_0CH@BGOAOAAC@RELIGION_FAITH_DELTA_NEXT_GREAT_@ ; `string'
PUBLIC	??_C@_0CC@MHONFOIF@RELIGION_FAITH_DELTA_NEXT_PROPHE@ ; `string'
PUBLIC	??_C@_0CI@POMFFJMB@RELIGION_GAME_FAITH_DELTA_NEXT_P@ ; `string'
PUBLIC	??_C@_0CG@OKKNMCKG@RELIGION_MIN_FAITH_FIRST_GREAT_P@ ; `string'
PUBLIC	??_C@_0CB@GLMNAIGF@RELIGION_MIN_FAITH_FIRST_PROPHET@ ; `string'
PUBLIC	??_C@_0CC@IMOIAJKP@RELIGION_MIN_FAITH_FIRST_PANTHEO@ ; `string'
PUBLIC	??_C@_0CA@LJIHCLCH@COMBAT_CAPTURE_RATIO_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BK@DEPPMCHG@COMBAT_CAPTURE_MAX_CHANCE?$AA@ ; `string'
PUBLIC	??_C@_0BK@PIPCLJHJ@COMBAT_CAPTURE_MIN_CHANCE?$AA@ ; `string'
PUBLIC	??_C@_0BG@NOILFINA@COMBAT_CAPTURE_HEALTH?$AA@	; `string'
PUBLIC	??_C@_0BP@JCIDAIBH@PROMOTION_UNWELCOME_EVANGELIST?$AA@ ; `string'
PUBLIC	??_C@_0BJ@FCCCKKMB@PROMOTION_ONLY_DEFENSIVE?$AA@ ; `string'
PUBLIC	??_C@_0BE@FOCKKOCB@WALLS_BUILDINGCLASS?$AA@	; `string'
PUBLIC	??_C@_0BL@OAFPPEOG@BARBARIAN_CAMP_IMPROVEMENT?$AA@ ; `string'
PUBLIC	??_C@_0M@NNNHGKNK@AI_HANDICAP?$AA@		; `string'
PUBLIC	??_C@_0BL@OHDFOIK@PROMOTION_OCEAN_IMPASSABLE?$AA@ ; `string'
PUBLIC	??_C@_0CL@PCMBHODK@PROMOTION_OCEAN_IMPASSABLE_UNTIL@ ; `string'
PUBLIC	??_C@_0BP@LDIOBKDI@PROMOTION_ALLWATER_EMBARKATION?$AA@ ; `string'
PUBLIC	??_C@_0CA@IFKPDLFA@PROMOTION_DEFENSIVE_EMBARKATION?$AA@ ; `string'
PUBLIC	??_C@_0BG@KNKLFEIM@PROMOTION_EMBARKATION?$AA@	; `string'
PUBLIC	??_C@_0BD@NKGDNPEG@MINOR_CIVILIZATION?$AA@	; `string'
PUBLIC	??_C@_0BD@JEJEOMLM@MINOR_CIV_HANDICAP?$AA@	; `string'
PUBLIC	??_C@_0BB@BMMDEOOP@BARBARIAN_LEADER?$AA@	; `string'
PUBLIC	??_C@_0BH@NBDMLEBD@BARBARIAN_CIVILIZATION?$AA@	; `string'
PUBLIC	??_C@_0BD@IBNKNHDA@BARBARIAN_HANDICAP?$AA@	; `string'
PUBLIC	??_C@_0BC@GKHLNFHC@STANDARD_CALENDAR?$AA@	; `string'
PUBLIC	??_C@_0BE@FMNFIIEB@LAST_BRIDGE_ART_ERA?$AA@	; `string'
PUBLIC	??_C@_0BC@FLMMHODD@LAST_UNIT_ART_ERA?$AA@	; `string'
PUBLIC	??_C@_0BE@EJPAJPEI@LAST_EMBARK_ART_ERA?$AA@	; `string'
PUBLIC	??_C@_0N@DKBKCGJO@STANDARD_ERA?$AA@		; `string'
PUBLIC	??_C@_0BC@FKKBJAPH@STANDARD_SEALEVEL?$AA@	; `string'
PUBLIC	??_C@_0BE@CMGHPLCK@STANDARD_WORLD_SIZE?$AA@	; `string'
PUBLIC	??_C@_0BB@GPNDHNFJ@STANDARD_CLIMATE?$AA@	; `string'
PUBLIC	??_C@_0BD@GAOGEFBN@STANDARD_TURNTIMER?$AA@	; `string'
PUBLIC	??_C@_0BD@FDBGEDIF@STANDARD_GAMESPEED?$AA@	; `string'
PUBLIC	??_C@_0BI@DHLPNDIC@STANDARD_HANDICAP_QUICK?$AA@	; `string'
PUBLIC	??_C@_0BF@NABKNOLL@MULTIPLAYER_HANDICAP?$AA@	; `string'
PUBLIC	??_C@_0BC@KJCMAPAI@STANDARD_HANDICAP?$AA@	; `string'
PUBLIC	??_C@_0BI@OHIIGMAA@INITIAL_CITY_ROUTE_TYPE?$AA@	; `string'
PUBLIC	??_C@_0BC@BNOKDDGC@MANHATTAN_PROJECT?$AA@	; `string'
PUBLIC	??_C@_0BB@GKIPHEKK@SPACESHIP_ENGINE?$AA@	; `string'
PUBLIC	??_C@_0BB@GFPPBNKK@SPACESHIP_STASIS?$AA@	; `string'
PUBLIC	??_C@_0BC@OLPBECEM@SPACESHIP_BOOSTER?$AA@	; `string'
PUBLIC	??_C@_0BC@DHAKFBLN@SPACESHIP_CAPSULE?$AA@	; `string'
PUBLIC	??_C@_0BL@FJGGDLOI@SPACE_RACE_TRIGGER_PROJECT?$AA@ ; `string'
PUBLIC	??_C@_0BD@EBPACKLL@DEFAULT_SPECIALIST?$AA@	; `string'
PUBLIC	??_C@_0BG@MKLPHHBA@CAPITAL_BUILDINGCLASS?$AA@	; `string'
PUBLIC	??_C@_0BJ@OFLDHDKK@HIDDEN_ARTIFACT_RESOURCE?$AA@ ; `string'
PUBLIC	??_C@_0BC@FCNLHBCH@ARTIFACT_RESOURCE?$AA@	; `string'
PUBLIC	??_C@_0N@NNJKEKOK@NUKE_FEATURE?$AA@		; `string'
PUBLIC	??_C@_0BC@EELFNCN@RUINS_IMPROVEMENT?$AA@	; `string'
PUBLIC	??_C@_0BG@KPDNLNOC@SHALLOW_WATER_TERRAIN?$AA@	; `string'
PUBLIC	??_C@_0BD@DICGPMDI@DEEP_WATER_TERRAIN?$AA@	; `string'
PUBLIC	??_C@_0N@DECNAIAP@LAND_TERRAIN?$AA@		; `string'
PUBLIC	??_C@_0CH@OLIDDOKA@LEAGUE_PROJECT_REWARD_TIER_2_THR@ ; `string'
PUBLIC	??_C@_0CH@JMBNOMFA@LEAGUE_PROJECT_REWARD_TIER_1_THR@ ; `string'
PUBLIC	??_C@_0CI@CAHCOHLD@LEAGUE_MEMBER_VOTES_PER_CITY_STA@ ; `string'
PUBLIC	??_C@_0BN@MBPEPHHC@LEAGUE_MEMBER_VOTES_FOR_HOST?$AA@ ; `string'
PUBLIC	??_C@_0BJ@EPKMOCLI@LEAGUE_MEMBER_VOTES_BASE?$AA@ ; `string'
PUBLIC	??_C@_0BN@POMMHHLM@LEAGUE_MEMBER_PROPOSALS_BASE?$AA@ ; `string'
PUBLIC	??_C@_0CC@DCFLFNCB@LEAGUE_SESSION_SOON_WARNING_TURN@ ; `string'
PUBLIC	??_C@_0CD@JNIAGOP@LEAGUE_SESSION_INTERVAL_BASE_TUR@ ; `string'
PUBLIC	??_C@_0BM@NLCMDPLM@TEMPORARY_TOURISM_BOOST_MOD?$AA@ ; `string'
PUBLIC	??_C@_0BM@LPKHMJGM@TEMPORARY_CULTURE_BOOST_MOD?$AA@ ; `string'
PUBLIC	??_C@_0BE@MOMAGJPH@EXOTIC_GOODS_XP_MAX?$AA@	; `string'
PUBLIC	??_C@_0BE@NMELINJI@EXOTIC_GOODS_XP_MIN?$AA@	; `string'
PUBLIC	??_C@_0BG@HDGFKHBP@EXOTIC_GOODS_GOLD_MAX?$AA@	; `string'
PUBLIC	??_C@_0BG@GBOOEDHA@EXOTIC_GOODS_GOLD_MIN?$AA@	; `string'
PUBLIC	??_C@_0BD@JGDGPAOM@SAPPER_BONUS_RANGE?$AA@	; `string'
PUBLIC	??_C@_0BM@IDEDHKOI@SAPPED_CITY_ATTACK_MODIFIER?$AA@ ; `string'
PUBLIC	??_C@_0BN@DMDPEMGM@PERCENT_HIDDEN_SITES_WRITING?$AA@ ; `string'
PUBLIC	??_C@_0BF@CHKNEKBO@PERCENT_SITES_HIDDEN?$AA@	; `string'
PUBLIC	??_C@_0BM@HCKPFFFO@MAX_DIG_SITES_PER_MAJOR_CIV?$AA@ ; `string'
PUBLIC	??_C@_0BM@CFKBAFBN@MIN_DIG_SITES_PER_MAJOR_CIV?$AA@ ; `string'
PUBLIC	??_C@_0BH@FBBOOHPK@CULTURE_LEVEL_DOMINANT?$AA@	; `string'
PUBLIC	??_C@_0BK@KACDDHKO@CULTURE_LEVEL_INFLUENTIAL?$AA@ ; `string'
PUBLIC	??_C@_0BG@CDGJEBN@CULTURE_LEVEL_POPULAR?$AA@	; `string'
PUBLIC	??_C@_0BH@IIBAEGHK@CULTURE_LEVEL_FAMILIAR?$AA@	; `string'
PUBLIC	??_C@_0BF@JLKGGBAO@CULTURE_LEVEL_EXOTIC?$AA@	; `string'
PUBLIC	??_C@_0CA@OABGJOCA@MINIUMUM_TOURISM_BLAST_STRENGTH?$AA@ ; `string'
PUBLIC	??_C@_0BK@OHKIPNG@TOURISM_MODIFIER_DIPLOMAT?$AA@ ; `string'
PUBLIC	??_C@_0CG@MJKPJEKM@TOURISM_MODIFIER_DIFFERENT_IDEOL@ ; `string'
PUBLIC	??_C@_0BO@HKIDLMKL@TOURISM_MODIFIER_OPEN_BORDERS?$AA@ ; `string'
PUBLIC	??_C@_0BN@JOCPDGKC@TOURISM_MODIFIER_TRADE_ROUTE?$AA@ ; `string'
PUBLIC	??_C@_0CB@GLEENINB@TOURISM_MODIFIER_SHARED_RELIGION@ ; `string'
PUBLIC	??_C@_0BM@IFDFHGID@BASE_TOURISM_PER_GREAT_WORK?$AA@ ; `string'
PUBLIC	??_C@_0BM@EDDMBKGD@BASE_CULTURE_PER_GREAT_WORK?$AA@ ; `string'
PUBLIC	??_C@_0CN@IFHBIFKF@UNRESEARCHED_TECH_BONUS_FROM_KIL@ ; `string'
PUBLIC	??_C@_0CJ@GDHKGPJK@UNRESEARCHED_TECH_BONUS_FROM_KIL@ ; `string'
PUBLIC	??_C@_0CE@KDJDBJKK@CITY_CONNECTIONS_CONNECT_TO_CAPI@ ; `string'
PUBLIC	??_C@_0BE@GFMIBEAG@PILLAGE_HEAL_AMOUNT?$AA@	; `string'
PUBLIC	??_C@_0CF@GHNHLDID@INTERNATIONAL_TRADE_CITY_GPT_DIV@ ; `string'
PUBLIC	??_C@_0CJ@NPGGNEI@INTERNATIONAL_TRADE_EXCLUSIVE_CO@ ; `string'
PUBLIC	??_C@_0BJ@IBEBABHD@INTERNATIONAL_TRADE_BASE?$AA@ ; `string'
PUBLIC	??_C@_0CE@FBPDOJAG@ESPIONAGE_COUP_SPY_LEVEL_DELTA_F@ ; `string'
PUBLIC	??_C@_0CF@BMLMBPFA@ESPIONAGE_COUP_SPY_LEVEL_DELTA_T@ ; `string'
PUBLIC	??_C@_0CD@PAIEJLOO@ESPIONAGE_COUP_SPY_LEVEL_DELTA_T@ ; `string'
PUBLIC	??_C@_0CD@JOIEDLAF@ESPIONAGE_COUP_SPY_LEVEL_DELTA_O@ ; `string'
PUBLIC	??_C@_0CE@GBHNAJHI@ESPIONAGE_COUP_SPY_LEVEL_DELTA_Z@ ; `string'
PUBLIC	??_C@_0CB@JLJLMLDH@ESPIONAGE_COUP_MULTIPLY_CONSTANT@ ; `string'
PUBLIC	??_C@_0BM@OBAJNOI@ESPIONAGE_COUP_NOBODY_BONUS?$AA@ ; `string'
PUBLIC	??_C@_0BM@GDGPPNNE@CITY_STRENGTH_TECH_EXPONENT?$AA@ ; `string'
PUBLIC	??_C@_0BI@HLKDNPBE@CITY_STRENGTH_TECH_BASE?$AA@	; `string'
PUBLIC	??_C@_0BL@BILJPHBC@UNIT_UPGRADE_COST_EXPONENT?$AA@ ; `string'
PUBLIC	??_C@_0CF@CGJFMLJE@UNIT_UPGRADE_COST_MULTIPLIER_PER@ ; `string'
PUBLIC	??_C@_0BF@CKEGBKFK@POLICY_COST_EXPONENT?$AA@	; `string'
PUBLIC	??_C@_0BF@GLIHNBL@CITY_GROWTH_EXPONENT?$AA@	; `string'
PUBLIC	??_C@_0BH@BDEJDHDH@CITY_GROWTH_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0BM@KNDHBFJC@HURRY_GOLD_CULTURE_EXPONENT?$AA@ ; `string'
PUBLIC	??_C@_0BJ@EGKGEJHP@HURRY_GOLD_TECH_EXPONENT?$AA@ ; `string'
PUBLIC	??_C@_0BN@HLPOPNMP@GOLD_GIFT_FRIENDSHIP_DIVISOR?$AA@ ; `string'
PUBLIC	??_C@_0BO@CFGFKDBO@GOLD_GIFT_FRIENDSHIP_EXPONENT?$AA@ ; `string'
PUBLIC	??_C@_0CB@EIKGKLAP@AI_STRATEGY_NAVAL_UNITS_PER_CITY@ ; `string'
PUBLIC	??_C@_0CL@FHPGLLNH@AI_STRATEGY_DEFEND_MY_LANDS_UNIT@ ; `string'
PUBLIC	??_C@_0DF@EPKENCBL@AI_TACTICAL_FLAVOR_DAMPENING_FOR@ ; `string'
PUBLIC	??_C@_0BO@EGLKCOLB@DIPLO_VICTORY_TEAM_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0CH@MLNAJCGK@FLAVOR_STANDARD_LOG10_TILES_PER_@ ; `string'
PUBLIC	??_C@_0CC@KHHPDABN@AI_DANGER_MINOR_APPROACH_CONQUES@ ; `string'
PUBLIC	??_C@_0BP@BPPIKDMP@AI_DANGER_MINOR_APPROACH_BULLY?$AA@ ; `string'
PUBLIC	??_C@_0CC@FKOOHEFN@AI_DANGER_MINOR_APPROACH_FRIENDL@ ; `string'
PUBLIC	??_C@_0CB@LNBAEAEF@AI_DANGER_MINOR_APPROACH_NEUTRAL@ ; `string'
PUBLIC	??_C@_0CB@BGKKGCPO@AI_DANGER_MAJOR_APPROACH_NEUTRAL@ ; `string'
PUBLIC	??_C@_0CC@GPGKEHL@AI_DANGER_MAJOR_APPROACH_FRIENDL@ ; `string'
PUBLIC	??_C@_0CA@HBPIHHEK@AI_DANGER_MAJOR_APPROACH_AFRAID?$AA@ ; `string'
PUBLIC	??_C@_0CB@MDJOHKKB@AI_DANGER_MAJOR_APPROACH_GUARDED@ ; `string'
PUBLIC	??_C@_0CD@HCPFEFHL@AI_DANGER_MAJOR_APPROACH_DECEPTI@ ; `string'
PUBLIC	??_C@_0CB@PMOOCPKO@AI_DANGER_MAJOR_APPROACH_HOSTILE@ ; `string'
PUBLIC	??_C@_0BN@JBCNHNEJ@AI_DANGER_MAJOR_APPROACH_WAR?$AA@ ; `string'
PUBLIC	??_C@_0DF@CBLILIOK@AI_CITY_SPECIALIZATION_PRODUCTIO@ ; `string'
PUBLIC	??_C@_0BH@LKHEJECL@POST_COMBAT_TEXT_DELAY?$AA@	; `string'
PUBLIC	??_C@_0CB@KPNNKHO@CULTURE_COST_LATER_PLOT_EXPONENT@ ; `string'
PUBLIC	??_C@_0BB@PKNCKPLC@CITY_ZOOM_OFFSET?$AA@	; `string'
PUBLIC	??_C@_0BC@PDLCLIJD@CITY_ZOOM_LEVEL_3?$AA@	; `string'
PUBLIC	??_C@_0BC@OKKJIJNC@CITY_ZOOM_LEVEL_2?$AA@	; `string'
PUBLIC	??_C@_0BC@MBIENKBB@CITY_ZOOM_LEVEL_1?$AA@	; `string'
PUBLIC	??_C@_0BP@DFKJJGAF@HURRY_GOLD_PRODUCTION_EXPONENT?$AA@ ; `string'
PUBLIC	??_C@_0BM@DKKANOLN@AI_RESEARCH_WEIGHT_BASE_MOD?$AA@ ; `string'
PUBLIC	??_C@_0CF@DJDFBCNI@AI_RESEARCH_WEIGHT_MOD_PER_TURN_@ ; `string'
PUBLIC	??_C@_0BO@JCHLMGGL@AI_PRODUCTION_WEIGHT_BASE_MOD?$AA@ ; `string'
PUBLIC	??_C@_0CH@KNPNMEMJ@AI_PRODUCTION_WEIGHT_MOD_PER_TUR@ ; `string'
PUBLIC	??_C@_0CE@KODLFCBG@DIPLO_VICTORY_CS_DELEGATES_CONST@ ; `string'
PUBLIC	??_C@_0CH@BOBMFNBO@DIPLO_VICTORY_CS_DELEGATES_COEFF@ ; `string'
PUBLIC	??_C@_0CF@BILFGCAD@DIPLO_VICTORY_CIV_DELEGATES_CONS@ ; `string'
PUBLIC	??_C@_0CI@NBLHKEOH@DIPLO_VICTORY_CIV_DELEGATES_COEF@ ; `string'
PUBLIC	??_C@_0DB@GFEAJCMD@AI_OPERATIONAL_MAX_RECRUIT_TURNS@ ; `string'
PUBLIC	??_C@_0CJ@PNPOCKCP@AI_OPERATIONAL_MAX_RECRUIT_TURNS@ ; `string'
PUBLIC	??_C@_0BK@KDHFMMLE@WITHDRAW_MOD_BLOCKED_TILE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OIPIGCIF@WITHDRAW_MOD_ENEMY_MOVES?$AA@ ; `string'
PUBLIC	??_C@_0BN@PCAIIOIJ@MINOR_CIV_ROUTE_QUEST_WEIGHT?$AA@ ; `string'
PUBLIC	??_C@_0BM@GMGKNNNP@DISBAND_UNIT_REFUND_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BG@INAIJBJM@BUILDING_SALE_DIVISOR?$AA@	; `string'
PUBLIC	??_C@_0CK@JDIOADGH@WARLORD_EXTRA_EXPERIENCE_PER_UNI@ ; `string'
PUBLIC	??_C@_0BO@LCJDBKEB@CITY_STRENGTH_TECH_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BD@JKLLAPJH@BUY_PLOTS_DISABLED?$AA@	; `string'
PUBLIC	??_C@_0BJ@IOONLICM@SETTLER_PRODUCTION_SPEED?$AA@ ; `string'
PUBLIC	??_C@_0BO@EKDHFPFB@PROGRESS_POPUP_TURN_FREQUENCY?$AA@ ; `string'
PUBLIC	??_C@_0BJ@IBEANHNG@HEAVY_RESOURCE_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BN@EFMEJENL@MAX_CITY_DIST_HIGHWATER_MARK?$AA@ ; `string'
PUBLIC	??_C@_0DB@GJDBBHFH@ZERO_SUM_COMPETITION_GREAT_PEOPL@ ; `string'
PUBLIC	??_C@_0CN@BLFPPAPG@ZERO_SUM_COMPETITION_POLICIES_VI@ ; `string'
PUBLIC	??_C@_0CM@IGGNFFEP@ZERO_SUM_COMPETITION_WONDERS_VIC@ ; `string'
PUBLIC	??_C@_0CH@FGNJOOOL@MIN_GAME_TURNS_ELAPSED_TO_TEST_V@ ; `string'
PUBLIC	??_C@_0BH@DJIKKDGM@VICTORY_POINTS_PER_ERA?$AA@	; `string'
PUBLIC	??_C@_0CB@LIBHHDFB@SCORE_RELIGION_CITIES_MULTIPLIER@ ; `string'
PUBLIC	??_C@_0BI@CGAGFKMI@SCORE_BELIEF_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0BM@HFFIIIKB@SCORE_GREAT_WORK_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BI@FEOIIKFD@SCORE_POLICY_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0BN@LBMILBPO@SCORE_FUTURE_TECH_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BG@LBMLHAOE@SCORE_TECH_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0BI@NBGDCDEN@SCORE_WONDER_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0BG@IDMDHNPG@SCORE_LAND_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0BM@MDPHCBBG@SCORE_POPULATION_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BG@IFAOPGBI@SCORE_CITY_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0CD@PNLGPDDB@DIPLO_VICTORY_DEFAULT_VOTE_PERCE@ ; `string'
PUBLIC	??_C@_0CK@ENCLBHON@DIPLO_VICTORY_BEYOND_ALGORITHM_M@ ; `string'
PUBLIC	??_C@_0CC@CIFOPFPA@DIPLO_VICTORY_ALGORITHM_THRESHOL@ ; `string'
PUBLIC	??_C@_0BO@NFLMCEEN@OWN_UNITED_NATIONS_VOTE_BONUS?$AA@ ; `string'
PUBLIC	??_C@_0BP@PCPCGLGO@UNITED_NATIONS_COUNTDOWN_TURNS?$AA@ ; `string'
PUBLIC	??_C@_0CG@IAFAPLGE@PLOT_INFLUENCE_NO_ADJACENT_OWNED@ ; `string'
PUBLIC	??_C@_0CA@LJAFEIMM@PLOT_INFLUENCE_YIELD_POINT_COST?$AA@ ; `string'
PUBLIC	??_C@_0BE@BAFAHDME@PLOT_BUY_YIELD_COST?$AA@	; `string'
PUBLIC	??_C@_0BH@BNJBHALC@PLOT_BUY_RESOURCE_COST?$AA@	; `string'
PUBLIC	??_C@_0BH@DPIKAILF@PLOT_INFLUENCE_NW_COST?$AA@	; `string'
PUBLIC	??_C@_0BN@JGMDODIE@PLOT_INFLUENCE_RESOURCE_COST?$AA@ ; `string'
PUBLIC	??_C@_0BK@HMMGNDL@PLOT_INFLUENCE_ROUTE_COST?$AA@ ; `string'
PUBLIC	??_C@_0CA@OHKJBLIM@PLOT_INFLUENCE_IMPROVEMENT_COST?$AA@ ; `string'
PUBLIC	??_C@_0BK@GNEBHGHM@PLOT_INFLUENCE_WATER_COST?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NOKEENFI@PLOT_INFLUENCE_RING_COST?$AA@ ; `string'
PUBLIC	??_C@_0CA@FJDILNCG@PLOT_INFLUENCE_DISTANCE_DIVISOR?$AA@ ; `string'
PUBLIC	??_C@_0CD@CLBINMPB@PLOT_INFLUENCE_DISTANCE_MULTIPLI@ ; `string'
PUBLIC	??_C@_0BP@NEEHNGLH@PLOT_INFLUENCE_BASE_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BO@DOCDGKDD@MAXIMUM_ACQUIRE_PLOT_DISTANCE?$AA@ ; `string'
PUBLIC	??_C@_0BK@EOMPECIE@MAXIMUM_BUY_PLOT_DISTANCE?$AA@ ; `string'
PUBLIC	??_C@_0CH@IDDOELEM@MINOR_CIV_PLOT_CULTURE_COST_MULT@ ; `string'
PUBLIC	??_C@_0BO@HJBEEMGL@CULTURE_PLOT_COST_MOD_MINIMUM?$AA@ ; `string'
PUBLIC	??_C@_0BN@GNDPBKIH@CULTURE_COST_VISIBLE_DIVISOR?$AA@ ; `string'
PUBLIC	??_C@_0CD@EDHBJCNL@CULTURE_COST_LATER_PLOT_MULTIPLI@ ; `string'
PUBLIC	??_C@_0BI@MBDNEIHO@CULTURE_COST_FIRST_PLOT?$AA@	; `string'
PUBLIC	??_C@_0BN@JJEBLEDJ@PLOT_COST_APPEARANCE_DIVISOR?$AA@ ; `string'
PUBLIC	??_C@_0BO@MNAADMJ@PLOT_ADDITIONAL_COST_PER_PLOT?$AA@ ; `string'
PUBLIC	??_C@_0P@IMNCMELC@PLOT_BASE_COST?$AA@		; `string'
PUBLIC	??_C@_0BL@JACHHLDL@PROXIMITY_FAR_DISTANCE_MIN?$AA@ ; `string'
PUBLIC	??_C@_0BL@ICKMJPFE@PROXIMITY_FAR_DISTANCE_MAX?$AA@ ; `string'
PUBLIC	??_C@_0CG@MFAGGBJ@PROXIMITY_FAR_DISTANCE_MAP_MULTI@ ; `string'
PUBLIC	??_C@_0BN@PNMCKJNL@PROXIMITY_CLOSE_DISTANCE_MIN?$AA@ ; `string'
PUBLIC	??_C@_0BN@OPEJENLE@PROXIMITY_CLOSE_DISTANCE_MAX?$AA@ ; `string'
PUBLIC	??_C@_0CI@ELMOOLAE@PROXIMITY_CLOSE_DISTANCE_MAP_MUL@ ; `string'
PUBLIC	??_C@_0CJ@MKIAMFJD@PROXIMITY_CLOSE_CLOSEST_CITY_POS@ ; `string'
PUBLIC	??_C@_0CN@MFNFBDJO@PROXIMITY_NEIGHBORS_CLOSEST_CITY@ ; `string'
PUBLIC	??_C@_0BM@NGHHEGFJ@CRAMPED_USABLE_PLOT_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BI@PKBBAIGJ@CRAMPED_RANGE_FROM_CITY?$AA@	; `string'
PUBLIC	??_C@_0BK@DOOCMDNE@MAX_EXPERIENCE_PER_COMBAT?$AA@ ; `string'
PUBLIC	??_C@_0BK@NNLPHNAO@MIN_EXPERIENCE_PER_COMBAT?$AA@ ; `string'
PUBLIC	??_C@_0CB@HDLPGCJC@UNIT_DEATH_XP_GREAT_GENERAL_LOSS@ ; `string'
PUBLIC	??_C@_0BJ@NANIBGDF@GREAT_GENERALS_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0CH@KPCMJDFF@GREAT_GENERALS_THRESHOLD_INCREAS@ ; `string'
PUBLIC	??_C@_0CC@DGLDFBKK@GREAT_GENERALS_THRESHOLD_INCREAS@ ; `string'
PUBLIC	??_C@_0CF@HFKNGDJL@COMBAT_EXPERIENCE_IN_BORDERS_PER@ ; `string'
PUBLIC	??_C@_0BH@OGLICHKA@BARBARIAN_MAX_XP_VALUE?$AA@	; `string'
PUBLIC	??_C@_0BO@JNPBNODF@EXPERIENCE_ATTACKING_CITY_AIR?$AA@ ; `string'
PUBLIC	??_C@_0CB@MFDNGOO@EXPERIENCE_ATTACKING_CITY_RANGED@ ; `string'
PUBLIC	??_C@_0CA@DKPBFJCJ@EXPERIENCE_ATTACKING_CITY_MELEE?$AA@ ; `string'
PUBLIC	??_C@_0CG@CLFMKAFM@EXPERIENCE_DEFENDING_AIR_SWEEP_G@ ; `string'
PUBLIC	??_C@_0CD@HJGELFEN@EXPERIENCE_DEFENDING_AIR_SWEEP_A@ ; `string'
PUBLIC	??_C@_0BP@IGACCMDN@EXPERIENCE_ATTACKING_AIR_SWEEP?$AA@ ; `string'
PUBLIC	??_C@_0CB@IMKMCMLJ@EXPERIENCE_DEFENDING_UNIT_RANGED@ ; `string'
PUBLIC	??_C@_0CB@OFFCGGHO@EXPERIENCE_ATTACKING_UNIT_RANGED@ ; `string'
PUBLIC	??_C@_0BO@LAMEOGID@EXPERIENCE_DEFENDING_UNIT_AIR?$AA@ ; `string'
PUBLIC	??_C@_0BO@PCHJACAH@EXPERIENCE_ATTACKING_UNIT_AIR?$AA@ ; `string'
PUBLIC	??_C@_0CA@KAGMMFLM@EXPERIENCE_DEFENDING_UNIT_MELEE?$AA@ ; `string'
PUBLIC	??_C@_0CA@FIOEPMCP@EXPERIENCE_ATTACKING_UNIT_MELEE?$AA@ ; `string'
PUBLIC	??_C@_0BF@BBKNKDJJ@EXPERIENCE_PER_LEVEL?$AA@	; `string'
PUBLIC	??_C@_0BM@OMDNCIGJ@CITY_CAPTURE_DAMAGE_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BH@DNEAKJMK@MIN_CITY_STRIKE_DAMAGE?$AA@	; `string'
PUBLIC	??_C@_0CH@LECDAFHK@CITY_RANGED_ATTACK_STRENGTH_MULT@ ; `string'
PUBLIC	??_C@_0BL@LNCNDMOL@CAN_CITY_USE_INDIRECT_FIRE?$AA@ ; `string'
PUBLIC	??_C@_0BC@GGMKDAAA@CITY_ATTACK_RANGE?$AA@	; `string'
PUBLIC	??_C@_0CA@CDPGPAJA@ATTACKING_CITY_MELEE_DAMAGE_MOD?$AA@ ; `string'
PUBLIC	??_C@_0BK@KLNBCKKJ@CITY_ATTACKING_DAMAGE_MOD?$AA@ ; `string'
PUBLIC	??_C@_0BK@CDKPGCBC@CITY_STRENGTH_HILL_CHANGE?$AA@ ; `string'
PUBLIC	??_C@_0BL@GLCHAKAJ@CITY_STRENGTH_UNIT_DIVISOR?$AA@ ; `string'
PUBLIC	??_C@_0CA@HIBDNCGI@CITY_STRENGTH_POPULATION_CHANGE?$AA@ ; `string'
PUBLIC	??_C@_0BG@MCMBHDMB@CITY_STRENGTH_DEFAULT?$AA@	; `string'
PUBLIC	??_C@_0BJ@BBKLLFMF@TRAIT_WOUNDED_DAMAGE_MOD?$AA@ ; `string'
PUBLIC	??_C@_0BK@GJNDINPN@WOUNDED_DAMAGE_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0CC@FANGPDKB@AIR_SWEEP_INTERCEPTION_DAMAGE_MO@ ; `string'
PUBLIC	??_C@_0DB@KPJCCOIA@INTERCEPTION_SAME_STRENGTH_POSSI@ ; `string'
PUBLIC	??_C@_0CG@MDGJMNDB@INTERCEPTION_SAME_STRENGTH_MIN_D@ ; `string'
PUBLIC	??_C@_0DH@CJKKENDJ@AIR_STRIKE_SAME_STRENGTH_POSSIBL@ ; `string'
PUBLIC	??_C@_0CM@NJPHNFMD@AIR_STRIKE_SAME_STRENGTH_MIN_DEF@ ; `string'
PUBLIC	??_C@_0DB@NJBEDFIN@RANGE_ATTACK_SAME_STRENGTH_POSSI@ ; `string'
PUBLIC	??_C@_0CG@BEFLCKBG@RANGE_ATTACK_SAME_STRENGTH_MIN_D@ ; `string'
PUBLIC	??_C@_0CL@JHCNNPKO@ATTACK_SAME_STRENGTH_POSSIBLE_EX@ ; `string'
PUBLIC	??_C@_0CB@CKMGFABD@RANGE_ATTACK_RANGED_DEFENDER_MOD@ ; `string'
PUBLIC	??_C@_0CA@CBGKPGFB@ATTACK_SAME_STRENGTH_MIN_DAMAGE?$AA@ ; `string'
PUBLIC	??_C@_0P@JKAOAJKK@CITY_HEAL_RATE?$AA@		; `string'
PUBLIC	??_C@_0BA@BAPMLGMF@INSTA_HEAL_RATE?$AA@		; `string'
PUBLIC	??_C@_0BD@BLNMNOMH@FRIENDLY_HEAL_RATE?$AA@	; `string'
PUBLIC	??_C@_0BC@FJPECDBC@NEUTRAL_HEAL_RATE?$AA@	; `string'
PUBLIC	??_C@_0BA@BACICFOH@ENEMY_HEAL_RATE?$AA@		; `string'
PUBLIC	??_C@_0BH@DEAHGOCL@AMPHIB_ATTACK_MODIFIER?$AA@	; `string'
PUBLIC	??_C@_0BG@MDMCGOFD@RIVER_ATTACK_MODIFIER?$AA@	; `string'
PUBLIC	??_C@_0BE@KBIOAKNM@HILLS_EXTRA_DEFENSE?$AA@	; `string'
PUBLIC	??_C@_0BI@ONIPANHL@FLAT_LAND_EXTRA_DEFENSE?$AA@	; `string'
PUBLIC	??_C@_0CA@MFHEEKDI@CITY_HIT_POINTS_HEALED_PER_TURN?$AA@ ; `string'
PUBLIC	??_C@_0BE@HKHJIPK@MAX_CITY_HIT_POINTS?$AA@	; `string'
PUBLIC	??_C@_0P@HLEFCLJM@MAX_HIT_POINTS?$AA@		; `string'
PUBLIC	??_C@_0BG@BFHJICGK@FIRE_SUPPORT_DISABLED?$AA@	; `string'
PUBLIC	??_C@_0BI@FMKIGCCP@ZONE_OF_CONTROL_ENABLED?$AA@	; `string'
PUBLIC	??_C@_0BA@NOCDLMFB@PLOT_UNIT_LIMIT?$AA@		; `string'
PUBLIC	??_C@_0BN@HEHBPIKC@MINOR_UNIT_GIFT_TRAVEL_TURNS?$AA@ ; `string'
PUBLIC	??_C@_0CE@ECKCBJGL@MINOR_FRIENDSHIP_ANCHOR_MOD_WARY@ ; `string'
PUBLIC	??_C@_0CG@GMHDOODL@MINOR_FRIENDSHIP_ANCHOR_MOD_PROT@ ; `string'
PUBLIC	??_C@_0CA@KONKFNLO@MINOR_FRIENDSHIP_ANCHOR_DEFAULT?$AA@ ; `string'
PUBLIC	??_C@_0CE@FDBDNMC@MINOR_FRIENDSHIP_FROM_TRADE_MISS@ ; `string'
PUBLIC	??_C@_0BH@LFOAFPKC@MINOR_CIV_BUYOUT_TURNS?$AA@	; `string'
PUBLIC	??_C@_0BG@JOHJPPHG@MINOR_CIV_BUYOUT_COST?$AA@	; `string'
PUBLIC	??_C@_0CF@JOFACDLK@MINOR_CIV_TILE_IMPROVEMENT_GIFT_@ ; `string'
PUBLIC	??_C@_0BG@BDDIBPHP@MINOR_GOLD_GIFT_SMALL?$AA@	; `string'
PUBLIC	??_C@_0BH@LCAFOHLJ@MINOR_GOLD_GIFT_MEDIUM?$AA@	; `string'
PUBLIC	??_C@_0BG@LLHDOOOJ@MINOR_GOLD_GIFT_LARGE?$AA@	; `string'
PUBLIC	??_C@_0CL@BLFHHHLC@MINOR_POLICY_RESOURCE_HAPPINESS_@ ; `string'
PUBLIC	??_C@_0CB@OMCNOFEN@MINOR_POLICY_RESOURCE_MULTIPLIER@ ; `string'
PUBLIC	??_C@_0BH@GKCDHDFF@MINOR_CIV_TECH_PERCENT?$AA@	; `string'
PUBLIC	??_C@_0BH@BNEFGI@MINOR_CIV_GOLD_PERCENT?$AA@	; `string'
PUBLIC	??_C@_0BN@OFNKIPKA@MINOR_CIV_PRODUCTION_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BJ@BJOAAJFK@MINOR_CIV_GROWTH_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BN@PKICCEOO@MINOR_CIV_CONTACT_GOLD_OTHER?$AA@ ; `string'
PUBLIC	??_C@_0BN@DEKIOJKK@MINOR_CIV_CONTACT_GOLD_FIRST?$AA@ ; `string'
PUBLIC	??_C@_0BO@BLEHMDAD@ALREADY_OWNED_STRATEGIC_VALUE?$AA@ ; `string'
PUBLIC	??_C@_0BF@LMDLIDH@HILL_STRATEGIC_VALUE?$AA@	; `string'
PUBLIC	??_C@_0BL@PMDNDBMP@CHOKEPOINT_STRATEGIC_VALUE?$AA@ ; `string'
PUBLIC	??_C@_0BH@OBBLHJMN@BUILD_ON_RIVER_PERCENT?$AA@	; `string'
PUBLIC	??_C@_0BK@NCADNEHN@BUILD_ON_RESOURCE_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0CC@FOBCADLI@SETTLER_DISTANCE_DROPOFF_MODIFIE@ ; `string'
PUBLIC	??_C@_0BM@JNEHMKPE@SETTLER_EVALUATION_DISTANCE?$AA@ ; `string'
PUBLIC	??_C@_0BH@CDCBKOGG@CITY_RING_5_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0BH@POLHHHOD@CITY_RING_4_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0BH@IDMEHBLL@CITY_RING_3_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0BH@FOFCKIDO@CITY_RING_2_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0BH@ODJIMEPA@CITY_RING_1_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0BP@KDHGHKFO@SETTLER_BUILD_ON_COAST_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BN@KILNHDND@SETTLER_STRATEGIC_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BM@HKCONEPD@SETTLER_RESOURCE_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BJ@CANLDMK@SETTLER_FAITH_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0BL@DPADKONB@SETTLER_SCIENCE_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BI@DPCDIOIH@SETTLER_GOLD_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0BO@DGEMEKBE@SETTLER_PRODUCTION_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BN@DEIMJNPG@SETTLER_HAPPINESS_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BI@ONCKDKMN@SETTLER_FOOD_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0CC@BKEBDKAC@START_AREA_BUILD_ON_COAST_PERCEN@ ; `string'
PUBLIC	??_C@_0CA@OCOIDPOC@START_AREA_STRATEGIC_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BP@PAMHKEJH@START_AREA_RESOURCE_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BM@EGMFBPNL@START_AREA_FAITH_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BO@LDLKCGMK@START_AREA_SCIENCE_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BL@PDKCOMOL@START_AREA_GOLD_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0CB@GHNIBPGC@START_AREA_PRODUCTION_MULTIPLIER@ ; `string'
PUBLIC	??_C@_0CA@HONJNBMH@START_AREA_HAPPINESS_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BL@CBKLFIKB@START_AREA_FOOD_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0CJ@KDOIANKG@MIN_START_FOUND_VALUE_AS_PERCENT@ ; `string'
PUBLIC	??_C@_0BL@BHBKGH@MAJOR_CIV_FOOD_REQUIREMENT?$AA@ ; `string'
PUBLIC	??_C@_0BL@KOIDHNCA@MINOR_CIV_FOOD_REQUIREMENT?$AA@ ; `string'
PUBLIC	??_C@_0CA@PJEEMIIB@MIN_DISTANCE_OTHER_AREA_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BF@FJIGIJJE@MIN_START_AREA_TILES?$AA@	; `string'
PUBLIC	??_C@_0BF@EKAFPGLG@UNIT_DELETE_DISABLED?$AA@	; `string'
PUBLIC	??_C@_0CA@JEHFHDOO@UNIT_WORKER_AUTOMATION_DISABLED?$AA@ ; `string'
PUBLIC	??_C@_0CA@BFIKBJPN@UNIT_AUTO_EXPLORE_FULL_DISABLED?$AA@ ; `string'
PUBLIC	??_C@_0BL@PAKJDMJG@UNIT_AUTO_EXPLORE_DISABLED?$AA@ ; `string'
PUBLIC	??_C@_0CB@DGLIPIGO@LANDMARK_MINOR_FRIENDSHIP_CHANGE@ ; `string'
PUBLIC	??_C@_0CF@OFKNFCG@CULTURE_BOMB_MINOR_FRIENDSHIP_CH@ ; `string'
PUBLIC	??_C@_0BG@EBEIACGA@CULTURE_BOMB_COOLDOWN?$AA@	; `string'
PUBLIC	??_C@_0CA@PMHGDFPK@GREAT_PERSON_THRESHOLD_INCREASE?$AA@ ; `string'
PUBLIC	??_C@_0BM@IHLGFJPC@GREAT_PERSON_THRESHOLD_BASE?$AA@ ; `string'
PUBLIC	??_C@_0BO@FJOOBCGF@MAX_SPECIALISTS_FROM_BUILDING?$AA@ ; `string'
PUBLIC	??_C@_0BK@JMBBIGNJ@CITY_RESOURCE_WLTKD_TURNS?$AA@ ; `string'
PUBLIC	??_C@_0BH@OGLFPGMH@BARBARIAN_TECH_PERCENT?$AA@	; `string'
PUBLIC	??_C@_0BJ@FOAPFLMP@DEFAULT_MAX_NUM_BUILDERS?$AA@ ; `string'
PUBLIC	??_C@_0BK@HJONPDKI@EMBARKED_VISIBILITY_RANGE?$AA@ ; `string'
PUBLIC	??_C@_0BH@COGNNDKH@EMBARKED_UNIT_MOVEMENT?$AA@	; `string'
PUBLIC	??_C@_0BL@KFGAIBAB@BARBARIAN_UNIT_GOLD_RANSOM?$AA@ ; `string'
PUBLIC	??_C@_0BL@OHGKMKBJ@BARBARIAN_CITY_GOLD_RANSOM?$AA@ ; `string'
PUBLIC	??_C@_0BP@BHFCDPOF@GOLD_FROM_BARBARIAN_CONVERSION?$AA@ ; `string'
PUBLIC	??_C@_0CG@PFHFPDFA@MAX_BARBARIANS_FROM_CAMP_NEARBY_@ ; `string'
PUBLIC	??_C@_0CA@GMLODJMD@MAX_BARBARIANS_FROM_CAMP_NEARBY?$AA@ ; `string'
PUBLIC	??_C@_0CG@GFAAPLHB@BARBARIAN_NAVAL_UNIT_START_TURN_@ ; `string'
PUBLIC	??_C@_0CJ@BJFFBJFG@BARBARIAN_EXTRA_RAGING_UNIT_SPAW@ ; `string'
PUBLIC	??_C@_0CC@LBNKOCJH@BARBARIAN_CAMP_COASTAL_SPAWN_ROL@ ; `string'
PUBLIC	??_C@_0CN@DFILBMPA@BARBARIAN_CAMP_MINIMUM_DISTANCE_@ ; `string'
PUBLIC	??_C@_0CI@CCAEIKLA@BARBARIAN_CAMP_MINIMUM_DISTANCE_@ ; `string'
PUBLIC	??_C@_0CJ@LOHCJBNK@BARBARIAN_CAMP_ODDS_OF_NEW_CAMP_@ ; `string'
PUBLIC	??_C@_0DD@PNOPPLKJ@BARBARIAN_CAMP_FIRST_TURN_PERCEN@ ; `string'
PUBLIC	??_C@_0BH@FPIOHNIL@RESEARCH_AGREEMENT_MOD?$AA@	; `string'
PUBLIC	??_C@_0BH@FHJHCCMN@SCIENCE_PER_POPULATION?$AA@	; `string'
PUBLIC	??_C@_0CG@DLOJLKDD@SPECIALISTS_DIVERT_POPULATION_EN@ ; `string'
PUBLIC	??_C@_0BM@JKHDJAHC@NUM_RESOURCE_QUANTITY_TYPES?$AA@ ; `string'
PUBLIC	??_C@_0CG@DDBCPIEN@USE_FIRST_RING_INFLUENCE_TERRAIN@ ; `string'
PUBLIC	??_C@_0BF@LDMCAJEO@INFLUENCE_RIVER_COST?$AA@	; `string'
PUBLIC	??_C@_0BE@IJDPJGDC@INFLUENCE_HILL_COST?$AA@	; `string'
PUBLIC	??_C@_0BI@JCCDIPLM@INFLUENCE_MOUNTAIN_COST?$AA@	; `string'
PUBLIC	??_C@_0BM@GOBBJFHB@PROJECT_PURCHASING_DISABLED?$AA@ ; `string'
PUBLIC	??_C@_0BO@JCJCONNH@GOLD_PURCHASE_VISIBLE_DIVISOR?$AA@ ; `string'
PUBLIC	??_C@_0CC@KNCPKECJ@GOLD_PURCHASE_GOLD_PER_PRODUCTIO@ ; `string'
PUBLIC	??_C@_0BJ@LKKLNLJF@POLICY_COST_DISCOUNT_MAX?$AA@ ; `string'
PUBLIC	??_C@_0CD@DOPHPPIE@SWITCH_POLICY_BRANCHES_TENETS_LO@ ; `string'
PUBLIC	??_C@_0CF@NBHKBADO@SWITCH_POLICY_BRANCHES_ANARCHY_T@ ; `string'
PUBLIC	??_C@_0BM@OFHCPFM@POLICY_COST_VISIBLE_DIVISOR?$AA@ ; `string'
PUBLIC	??_C@_0CG@IGMDGGJH@POLICY_COST_INCREASE_TO_BE_EXPON@ ; `string'
PUBLIC	??_C@_0BB@EEIKDNNN@BASE_POLICY_COST?$AA@	; `string'
PUBLIC	??_C@_0BG@DBKANEAE@PUPPET_FAITH_MODIFIER?$AA@	; `string'
PUBLIC	??_C@_0BF@HHNBMPCB@PUPPET_GOLD_MODIFIER?$AA@	; `string'
PUBLIC	??_C@_0BI@CDDDBBNG@PUPPET_CULTURE_MODIFIER?$AA@	; `string'
PUBLIC	??_C@_0BI@INJNAEKK@PUPPET_SCIENCE_MODIFIER?$AA@	; `string'
PUBLIC	??_C@_0BD@DPPJBLBD@PATH_DAMAGE_WEIGHT?$AA@	; `string'
PUBLIC	??_C@_0CB@IGJBEIJM@NEW_CITY_BUILDING_VALUE_MODIFIER@ ; `string'
PUBLIC	??_C@_0CI@LMGDOMLG@ADVANCED_START_CITY_PLACEMENT_MA@ ; `string'
PUBLIC	??_C@_0CI@FFDIONAH@ADVANCED_START_VISIBILITY_COST_I@ ; `string'
PUBLIC	??_C@_0BP@OIHDGHKC@ADVANCED_START_VISIBILITY_COST?$AA@ ; `string'
PUBLIC	??_C@_0CI@FJNMKCIM@ADVANCED_START_POPULATION_COST_I@ ; `string'
PUBLIC	??_C@_0BP@CPOHJMDE@ADVANCED_START_POPULATION_COST?$AA@ ; `string'
PUBLIC	??_C@_0CC@DLGOLDJB@ADVANCED_START_CITY_COST_INCREAS@ ; `string'
PUBLIC	??_C@_0BJ@PFHGDAHM@ADVANCED_START_CITY_COST?$AA@ ; `string'
PUBLIC	??_C@_0CC@NKIKNOGN@ADVANCED_START_MAX_UNITS_PER_CIT@ ; `string'
PUBLIC	??_C@_0CK@BKOIPHOD@ADVANCED_START_ALLOW_UNITS_OUTSI@ ; `string'
PUBLIC	??_C@_0BJ@JOOIMHLJ@RANGED_ATTACKS_USE_MOVES?$AA@ ; `string'
PUBLIC	??_C@_0BL@MBCHOONI@CITY_MIN_SIZE_FOR_SETTLERS?$AA@ ; `string'
PUBLIC	??_C@_0BH@GHDPGDJK@CITY_MAX_NUM_BUILDINGS?$AA@	; `string'
PUBLIC	??_C@_0CD@CCGPBGGM@LAND_UNITS_CAN_ATTACK_WATER_CITI@ ; `string'
PUBLIC	??_C@_0CD@FGKKMLMB@WATER_POTENTIAL_CITY_WORK_FOR_AR@ ; `string'
PUBLIC	??_C@_0BM@MJMBCEBP@CITY_SCREEN_CLICK_WILL_EXIT?$AA@ ; `string'
PUBLIC	??_C@_0BJ@EIICMMCH@MIN_WATER_SIZE_FOR_OCEAN?$AA@ ; `string'
PUBLIC	??_C@_0BL@EJEAPLLP@PLAYER_ALWAYS_RAZES_CITIES?$AA@ ; `string'
PUBLIC	??_C@_0BI@EJNMNPPE@MAX_EVASION_PROBABILITY?$AA@	; `string'
PUBLIC	??_C@_0BN@GKOGMJFB@MAX_INTERCEPTION_PROBABILITY?$AA@ ; `string'
PUBLIC	??_C@_0BE@LGKCFIK@MINIMAP_RENDER_SIZE?$AA@	; `string'
PUBLIC	??_C@_0BL@GAECBFLJ@SCORE_HANDICAP_PERCENT_PER?$AA@ ; `string'
PUBLIC	??_C@_0BO@JGLENLKL@SCORE_HANDICAP_PERCENT_OFFSET?$AA@ ; `string'
PUBLIC	??_C@_0BG@HPOPAFAC@SCORE_VICTORY_PERCENT?$AA@	; `string'
PUBLIC	??_C@_0BD@HOGIAEEB@SCORE_FREE_PERCENT?$AA@	; `string'
PUBLIC	??_C@_0BC@MKPALOKG@SCORE_TECH_FACTOR?$AA@	; `string'
PUBLIC	??_C@_0BE@LMGNEFPM@SCORE_WONDER_FACTOR?$AA@	; `string'
PUBLIC	??_C@_0BC@GDPHCOIC@SCORE_LAND_FACTOR?$AA@	; `string'
PUBLIC	??_C@_0BI@DNMHFOAA@SCORE_POPULATION_FACTOR?$AA@	; `string'
PUBLIC	??_C@_0CB@IOOIKDIC@RESEARCH_AGREEMENT_BOOST_DIVISOR@ ; `string'
PUBLIC	??_C@_0BJ@NOIOIKAL@RESEARCH_AGREEMENT_TIMER?$AA@ ; `string'
PUBLIC	??_C@_0BJ@GMJIGIGN@TEAM_VOTE_MIN_CANDIDATES?$AA@ ; `string'
PUBLIC	??_C@_0CG@POMFOOPM@DIPLO_VOTE_SECRETARY_GENERAL_INT@ ; `string'
PUBLIC	??_C@_0BL@IIMPEPFP@WAR_SUCCESS_CITY_CAPTURING?$AA@ ; `string'
PUBLIC	??_C@_0BL@OGBOGJGI@WAR_SUCCESS_UNIT_CAPTURING?$AA@ ; `string'
PUBLIC	??_C@_0BP@BOMCEEEG@UNIT_UPGRADE_COST_DISCOUNT_MAX?$AA@ ; `string'
PUBLIC	??_C@_0CC@EDCPOLLI@UNIT_UPGRADE_COST_VISIBLE_DIVISO@ ; `string'
PUBLIC	??_C@_0CB@JIAMNBGN@UNIT_UPGRADE_COST_PER_PRODUCTION@ ; `string'
PUBLIC	??_C@_0BH@BMIALBAO@BASE_UNIT_UPGRADE_COST?$AA@	; `string'
PUBLIC	??_C@_0BO@MNLGAFBN@UNIT_PRODUCTION_DECAY_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BL@FEFFJNDA@UNIT_PRODUCTION_DECAY_TIME?$AA@ ; `string'
PUBLIC	??_C@_0CC@MFDCLFID@BUILDING_PRODUCTION_DECAY_PERCEN@ ; `string'
PUBLIC	??_C@_0BP@EMEMLHDC@BUILDING_PRODUCTION_DECAY_TIME?$AA@ ; `string'
PUBLIC	??_C@_0BP@DACEBBOP@BARBARIAN_CITY_ATTACK_MODIFIER?$AA@ ; `string'
PUBLIC	??_C@_0BH@LMOLALIJ@CAPTURE_GOLD_MAX_TURNS?$AA@	; `string'
PUBLIC	??_C@_0BD@EIOMCDML@CAPTURE_GOLD_RAND2?$AA@	; `string'
PUBLIC	??_C@_0BD@GDMBHAAI@CAPTURE_GOLD_RAND1?$AA@	; `string'
PUBLIC	??_C@_0BM@PJPMALBF@CAPTURE_GOLD_PER_POPULATION?$AA@ ; `string'
PUBLIC	??_C@_0BC@PHPDJMOI@BASE_CAPTURE_GOLD?$AA@	; `string'
PUBLIC	??_C@_0BK@HAIIMNBK@CIRCUMNAVIGATE_FREE_MOVES?$AA@ ; `string'
PUBLIC	??_C@_0BI@PNGKHODC@MAX_CITY_DEFENSE_DAMAGE?$AA@	; `string'
PUBLIC	??_C@_0BL@LOGDPBMF@MAXED_PROJECT_GOLD_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BM@FDMDIPHJ@MAXED_BUILDING_GOLD_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BI@IALMANJF@MAXED_UNIT_GOLD_PERCENT?$AA@	; `string'
PUBLIC	??_C@_0BL@EILHBKHL@PROJECT_PRODUCTION_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BM@CLEABCKE@BUILDING_PRODUCTION_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BI@OEMFDKEF@MAX_UNIT_SUPPLY_PRODMOD?$AA@	; `string'
PUBLIC	??_C@_0BI@FCFOOABF@UNIT_PRODUCTION_PERCENT?$AA@	; `string'
PUBLIC	??_C@_0BL@FHFHILLC@DEFAULT_WAR_VALUE_FOR_UNIT?$AA@ ; `string'
PUBLIC	??_C@_0CK@OOMFPJNP@DIFFERENT_TEAM_FEATURE_PRODUCTIO@ ; `string'
PUBLIC	??_C@_0CG@CIIAHFPM@FEATURE_PRODUCTION_PERCENT_MULTI@ ; `string'
PUBLIC	??_C@_0CA@LHOOJNCM@BASE_FEATURE_PRODUCTION_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BH@PIFGONEB@COOP_WAR_LOCKED_LENGTH?$AA@	; `string'
PUBLIC	??_C@_0BE@OHPHELHI@PEACE_TREATY_LENGTH?$AA@	; `string'
PUBLIC	??_C@_0CA@HOGJPEBE@TECH_COST_KNOWN_PREREQ_MODIFIER?$AA@ ; `string'
PUBLIC	??_C@_0CE@ECPDIMLK@TECH_COST_TOTAL_KNOWN_TEAM_MODIF@ ; `string'
PUBLIC	??_C@_0CF@JOGCDOKE@TECH_COST_EXTRA_TEAM_MEMBER_MODI@ ; `string'
PUBLIC	??_C@_0BC@LHJONLME@NUKE_BLAST_RADIUS?$AA@	; `string'
PUBLIC	??_C@_0BL@LHMOMINC@NUKE_CITY_HIT_POINT_DAMAGE?$AA@ ; `string'
PUBLIC	??_C@_0CG@COGLAPCG@NUKE_LEVEL2_ELIM_POPULATION_THRE@ ; `string'
PUBLIC	??_C@_0CE@JFFEJDMK@NUKE_LEVEL2_POPULATION_DEATH_RAN@ ; `string'
PUBLIC	??_C@_0CE@LOHJMAAJ@NUKE_LEVEL2_POPULATION_DEATH_RAN@ ; `string'
PUBLIC	??_C@_0CC@EBKPCNHC@NUKE_LEVEL2_POPULATION_DEATH_BAS@ ; `string'
PUBLIC	??_C@_0CE@GHADHODC@NUKE_LEVEL1_POPULATION_DEATH_RAN@ ; `string'
PUBLIC	??_C@_0CE@EMCOCNPB@NUKE_LEVEL1_POPULATION_DEATH_RAN@ ; `string'
PUBLIC	??_C@_0CC@BJLBIEFK@NUKE_LEVEL1_POPULATION_DEATH_BAS@ ; `string'
PUBLIC	??_C@_0CA@PLOPIOHL@NUKE_NON_COMBAT_DEATH_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BI@MILANIAN@NUKE_UNIT_DAMAGE_RAND_2?$AA@	; `string'
PUBLIC	??_C@_0BI@ODJNILMO@NUKE_UNIT_DAMAGE_RAND_1?$AA@	; `string'
PUBLIC	??_C@_0BG@MCBGCECM@NUKE_UNIT_DAMAGE_BASE?$AA@	; `string'
PUBLIC	??_C@_0BC@EBPAFFAB@NUKE_FALLOUT_PROB?$AA@	; `string'
PUBLIC	??_C@_0BC@OMHBIHJM@MAX_FORTIFY_TURNS?$AA@	; `string'
PUBLIC	??_C@_0BK@JNNCFGEG@FORTIFY_MODIFIER_PER_TURN?$AA@ ; `string'
PUBLIC	??_C@_0M@NFLOEFD@EXTRA_YIELD?$AA@		; `string'
PUBLIC	??_C@_0BO@FKGJOELC@ROUTE_FEATURE_GROWTH_MODIFIER?$AA@ ; `string'
PUBLIC	??_C@_0BI@CHKNJOKK@FEATURE_GROWTH_MODIFIER?$AA@	; `string'
PUBLIC	??_C@_0BF@KOAJMKLN@RIVER_EXTRA_MOVEMENT?$AA@	; `string'
PUBLIC	??_C@_0BF@DFCJCDIK@HILLS_EXTRA_MOVEMENT?$AA@	; `string'
PUBLIC	??_C@_0BM@MGFLBCKI@GOLDEN_AGE_CULTURE_MODIFIER?$AA@ ; `string'
PUBLIC	??_C@_0BK@BFEFMKNA@MIN_UNIT_GOLDEN_AGE_TURNS?$AA@ ; `string'
PUBLIC	??_C@_0CB@GPHBCMIK@GOLDEN_AGE_GREAT_PEOPLE_MODIFIER@ ; `string'
PUBLIC	??_C@_0BC@EAEONKIK@GOLDEN_AGE_LENGTH?$AA@	; `string'
PUBLIC	??_C@_0BM@FDPKCLMG@GOLDEN_AGE_UNITS_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BG@PDIODPFD@BASE_GOLDEN_AGE_UNITS?$AA@	; `string'
PUBLIC	??_C@_0CF@PBBMEIKM@GOLDEN_AGE_VISIBLE_THRESHOLD_DIV@ ; `string'
PUBLIC	??_C@_0CI@JNEMLIPP@GOLDEN_AGE_EACH_GA_ADDITIONAL_HA@ ; `string'
PUBLIC	??_C@_0CF@FDDKIAJH@GOLDEN_AGE_THRESHOLD_CITY_MULTIP@ ; `string'
PUBLIC	??_C@_0CE@JDAEHAEG@GOLDEN_AGE_BASE_THRESHOLD_HAPPIN@ ; `string'
PUBLIC	??_C@_0CC@MELEDHPL@DEFICIT_UNIT_DISBANDING_THRESHOL@ ; `string'
PUBLIC	??_C@_0CF@PACKIBHI@TRADE_ROUTE_CITY_POP_GOLD_MULTIP@ ; `string'
PUBLIC	??_C@_0CI@OEKMOFHJ@TRADE_ROUTE_CAPITAL_POP_GOLD_MUL@ ; `string'
PUBLIC	??_C@_0BG@EKFAOMNN@TRADE_ROUTE_BASE_GOLD?$AA@	; `string'
PUBLIC	??_C@_0BE@KNHJFFEF@FREE_UNIT_HAPPINESS?$AA@	; `string'
PUBLIC	??_C@_0CH@KAJHHHCF@UNIT_MAINTENANCE_GAME_EXPONENT_D@ ; `string'
PUBLIC	??_C@_0CB@ECPAAJHA@UNIT_MAINTENANCE_GAME_MULTIPLIER@ ; `string'
PUBLIC	??_C@_0CC@GKHMPLAB@INITIAL_OUTSIDE_UNIT_GOLD_PERCEN@ ; `string'
PUBLIC	??_C@_0BL@CHODOAJO@INITIAL_FREE_OUTSIDE_UNITS?$AA@ ; `string'
PUBLIC	??_C@_0CA@JDICOOON@INITIAL_GOLD_PER_UNIT_TIMES_100?$AA@ ; `string'
PUBLIC	??_C@_0BD@NKPFAEOF@LAKE_MAX_AREA_SIZE?$AA@	; `string'
PUBLIC	??_C@_0CA@COLODCN@RIVER_SOURCE_MIN_SEAWATER_RANGE?$AA@ ; `string'
PUBLIC	??_C@_0BN@FBAMIKFK@RIVER_SOURCE_MIN_RIVER_RANGE?$AA@ ; `string'
PUBLIC	??_C@_0BF@FCMBINKG@PLOTS_PER_RIVER_EDGE?$AA@	; `string'
PUBLIC	??_C@_0P@LGHBKHKI@LAKE_PLOT_RAND?$AA@		; `string'
PUBLIC	??_C@_0CK@BPGAHJPD@NAVAL_COMBAT_DEFENDER_STRENGTH_M@ ; `string'
PUBLIC	??_C@_0BN@IGGFKCLJ@NONCOMBAT_UNIT_RANGED_DAMAGE?$AA@ ; `string'
PUBLIC	??_C@_0O@HEBJJADE@COMBAT_DAMAGE?$AA@		; `string'
PUBLIC	??_C@_0BM@POCAGCLC@MIN_TIMER_UNIT_DOUBLE_MOVES?$AA@ ; `string'
PUBLIC	??_C@_0BO@OMJFBHCN@CONSCRIPT_POPULATION_PER_COST?$AA@ ; `string'
PUBLIC	??_C@_0BO@CABCKPBC@CONSCRIPT_MIN_CITY_POPULATION?$AA@ ; `string'
PUBLIC	??_C@_0BI@LLGOJJCC@POLICY_ATTACK_BONUS_MOD?$AA@	; `string'
PUBLIC	??_C@_0BK@JAAEHECI@BONUS_PER_ADJACENT_FRIEND?$AA@ ; `string'
PUBLIC	??_C@_0BL@BNMFAMBN@GREAT_GENERAL_STRENGTH_MOD?$AA@ ; `string'
PUBLIC	??_C@_0BE@MOHPNJFB@GREAT_GENERAL_RANGE?$AA@	; `string'
PUBLIC	??_C@_0BD@FCGDGMIO@NEW_HURRY_MODIFIER?$AA@	; `string'
PUBLIC	??_C@_0BP@GPJNMKGI@RESOURCE_DEMAND_COUNTDOWN_RAND?$AA@ ; `string'
PUBLIC	??_C@_0CG@CMILENIC@RESOURCE_DEMAND_COUNTDOWN_CAPITA@ ; `string'
PUBLIC	??_C@_0BP@CJIFMII@RESOURCE_DEMAND_COUNTDOWN_BASE?$AA@ ; `string'
PUBLIC	??_C@_0CA@HCKBIGIK@INDUSTRIAL_ROUTE_PRODUCTION_MOD?$AA@ ; `string'
PUBLIC	??_C@_0BI@NGNMBLOP@WLTKD_GROWTH_MULTIPLIER?$AA@	; `string'
PUBLIC	??_C@_0BO@GKHAKJGH@VERY_UNHAPPY_MAX_GOLD_PENALTY?$AA@ ; `string'
PUBLIC	??_C@_0CG@MPDPAPKP@VERY_UNHAPPY_GOLD_PENALTY_PER_UN@ ; `string'
PUBLIC	??_C@_0CE@KNOHBPCK@VERY_UNHAPPY_MAX_PRODUCTION_PENA@ ; `string'
PUBLIC	??_C@_0CM@EJNPGPEL@VERY_UNHAPPY_PRODUCTION_PENALTY_@ ; `string'
PUBLIC	??_C@_0CF@HIJOLODN@STRATEGIC_RESOURCE_EXHAUSTED_PEN@ ; `string'
PUBLIC	??_C@_0CA@OOFJGLCN@VERY_UNHAPPY_MAX_COMBAT_PENALTY?$AA@ ; `string'
PUBLIC	??_C@_0CI@EDGHMOBH@VERY_UNHAPPY_COMBAT_PENALTY_PER_@ ; `string'
PUBLIC	??_C@_0BD@IMCPEHEO@REVOLT_COUNTER_MIN?$AA@	; `string'
PUBLIC	??_C@_0BI@DNGHOAAF@UPRISING_NUM_CITY_COUNT?$AA@	; `string'
PUBLIC	??_C@_0BC@GPOGFEIH@UPRISING_NUM_BASE?$AA@	; `string'
PUBLIC	??_C@_0BK@EJDJABKB@UPRISING_COUNTER_POSSIBLE?$AA@ ; `string'
PUBLIC	??_C@_0BF@PJKIMMOF@UPRISING_COUNTER_MIN?$AA@	; `string'
PUBLIC	??_C@_0BI@OEGOAIFM@SUPER_UNHAPPY_THRESHOLD?$AA@	; `string'
PUBLIC	??_C@_0BH@LAEMEBOI@VERY_UNHAPPY_THRESHOLD?$AA@	; `string'
PUBLIC	??_C@_0CB@JOINNBN@VERY_UNHAPPY_CANT_TRAIN_SETTLERS@ ; `string'
PUBLIC	??_C@_0BM@NNIMCKGP@VERY_UNHAPPY_GROWTH_PENALTY?$AA@ ; `string'
PUBLIC	??_C@_0BH@FKHEHMFG@UNHAPPY_GROWTH_PENALTY?$AA@	; `string'
PUBLIC	??_C@_0BO@FKKNACDN@UNHAPPINESS_PER_CAPTURED_CITY?$AA@ ; `string'
PUBLIC	??_C@_0BF@OEHEJCCH@UNHAPPINESS_PER_CITY?$AA@	; `string'
PUBLIC	??_C@_0CE@FBJFDOOJ@UNHAPPINESS_PER_OCCUPIED_POPULAT@ ; `string'
PUBLIC	??_C@_0BL@LCIMIIIJ@UNHAPPINESS_PER_POPULATION?$AA@ ; `string'
PUBLIC	??_C@_0BL@NDBPIOEB@HAPPINESS_PER_EXTRA_LUXURY?$AA@ ; `string'
PUBLIC	??_C@_0BN@LDODFEFA@HAPPINESS_PER_NATURAL_WONDER?$AA@ ; `string'
PUBLIC	??_C@_0CH@GGKLFPEJ@HAPPINESS_PER_CITY_WITH_STATE_RE@ ; `string'
PUBLIC	??_C@_0CA@IPEAJEHO@FOOD_CONSUMPTION_PER_POPULATION?$AA@ ; `string'
PUBLIC	??_C@_0BL@PFGBLLNA@BASE_CITY_GROWTH_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0CA@LEHMNGCD@CITY_CAPTURE_POPULATION_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BH@NOCCADII@BASE_CITY_AIR_STACKING?$AA@	; `string'
PUBLIC	??_C@_0BI@DBAKNMDB@INITIAL_CITY_POPULATION?$AA@	; `string'
PUBLIC	??_C@_0BH@KHHCOKPO@MAX_BUILDINGS_PER_CITY?$AA@	; `string'
PUBLIC	??_C@_0CG@KBMDIEPK@MAX_NATIONAL_WONDERS_PER_CITY_FO@ ; `string'
PUBLIC	??_C@_0BO@OPMKPNNP@MAX_NATIONAL_WONDERS_PER_CITY?$AA@ ; `string'
PUBLIC	??_C@_0BK@CKOJICBM@MAX_TEAM_WONDERS_PER_CITY?$AA@ ; `string'
PUBLIC	??_C@_0BL@MMFEGCH@MAX_WORLD_WONDERS_PER_CITY?$AA@ ; `string'
PUBLIC	??_C@_0BD@NDCAHONM@BASE_RESEARCH_RATE?$AA@	; `string'
PUBLIC	??_C@_0BO@CENACFEC@NUM_BUILDING_RESOURCE_PREREQS?$AA@ ; `string'
PUBLIC	??_C@_0BO@NDPJDGHJ@NUM_BUILDING_AND_TECH_PREREQS?$AA@ ; `string'
PUBLIC	??_C@_0BK@HNICADIJ@NUM_UNIT_AND_TECH_PREREQS?$AA@ ; `string'
PUBLIC	??_C@_0BF@DIMAFOKE@NUM_AND_TECH_PREREQS?$AA@	; `string'
PUBLIC	??_C@_0BE@CMJKNLGN@NUM_OR_TECH_PREREQS?$AA@	; `string'
PUBLIC	??_C@_0BJ@GBNBPGJ@NUM_VICTORY_POINT_AWARDS?$AA@	; `string'
PUBLIC	??_C@_0BN@NLMGFKAN@VICTORY_POINTS_NEEDED_TO_WIN?$AA@ ; `string'
PUBLIC	??_C@_0BM@KGJGMDAN@NUM_POLICY_BRANCHES_ALLOWED?$AA@ ; `string'
PUBLIC	??_C@_0CD@MIBKONDN@OWNERSHIP_SCORE_DURATION_THRESHO@ ; `string'
PUBLIC	??_C@_0P@MCDIEAPN@MIN_CITY_RANGE?$AA@		; `string'
PUBLIC	??_C@_0BK@KDJMHLFO@MIN_CIV_STARTING_DISTANCE?$AA@ ; `string'
PUBLIC	??_C@_0BK@OIKAFPMP@STARTING_DISTANCE_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BB@PDDEADG@MOVE_DENOMINATOR?$AA@		; `string'
PUBLIC	??_C@_0BA@EMAADAGH@MAX_YIELD_STACK?$AA@		; `string'
PUBLIC	??_C@_0BM@IFLEADOJ@SEAWATER_SEE_THROUGH_CHANGE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@LIEEONCG@SEAWATER_SEE_FROM_CHANGE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@EOGHIBGG@HILLS_SEE_THROUGH_CHANGE?$AA@ ; `string'
PUBLIC	??_C@_0BG@GDKAKHHI@HILLS_SEE_FROM_CHANGE?$AA@	; `string'
PUBLIC	??_C@_0BM@EMCLNOIJ@MOUNTAIN_SEE_THROUGH_CHANGE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HFBPDBDA@MOUNTAIN_SEE_FROM_CHANGE?$AA@ ; `string'
PUBLIC	??_C@_0CB@MBJMOGP@AIR_UNIT_REBASE_RANGE_MULTIPLIER@ ; `string'
PUBLIC	??_C@_0BG@PHLLADHB@UNIT_VISIBILITY_RANGE?$AA@	; `string'
PUBLIC	??_C@_0BG@NMNFGIBJ@PLOT_VISIBILITY_RANGE?$AA@	; `string'
PUBLIC	??_C@_0BH@CPEOKDPJ@RECON_VISIBILITY_RANGE?$AA@	; `string'
PUBLIC	??_C@_0BJ@CIDMFMJ@HIDDEN_START_TURN_OFFSET?$AA@	; `string'
PUBLIC	??_C@_0BB@ECAOKLCM@WEEKS_PER_MONTHS?$AA@	; `string'
PUBLIC	??_C@_0L@FBGPJKOJ@START_YEAR?$AA@		; `string'
PUBLIC	??_C@_0BD@CAMOOAJE@EVENT_MESSAGE_TIME?$AA@	; `string'
PUBLIC	??_C@_0BK@MAMNEHPJ@NAVAL_PLOT_BLOCKADE_RANGE?$AA@ ; `string'
PUBLIC	??_C@_0BP@PCPKJFAP@CAN_WORK_WATER_FROM_GAME_START?$AA@ ; `string'
PUBLIC	??_C@_0M@EMBMCJEJ@DEMAND_RAND?$AA@		; `string'
PUBLIC	??_C@_0BN@LOJNPKAD@WANT_RESEARCH_AGREEMENT_RAND?$AA@ ; `string'
PUBLIC	??_C@_0CE@HKJOCJBN@COMMON_FOE_VALUE_PER_OPINION_WEI@ ; `string'
PUBLIC	??_C@_0CA@JGAIMPBB@COMMON_FOE_VALUE_PER_TURN_DECAY?$AA@ ; `string'
PUBLIC	??_C@_0BO@JICBPKEO@DEAL_VALUE_PER_OPINION_WEIGHT?$AA@ ; `string'
PUBLIC	??_C@_0BK@LEMOCCNI@DEAL_VALUE_PER_TURN_DECAY?$AA@ ; `string'
PUBLIC	??_C@_0CK@BOLOKBPI@DECLARED_WAR_ON_FRIEND_PER_OPINI@ ; `string'
PUBLIC	??_C@_0CG@LENHEJDM@DECLARED_WAR_ON_FRIEND_PER_TURN_@ ; `string'
PUBLIC	??_C@_0CK@KDGLKGFH@OPINION_WEIGHT_BORDER_PROMISE_IG@ ; `string'
PUBLIC	??_C@_0CK@FDDJFOGH@IGNORED_BORDER_PROMISE_PER_OPINI@ ; `string'
PUBLIC	??_C@_0CG@HFNGFGKK@BORDER_PROMISE_IGNORED_PER_TURN_@ ; `string'
PUBLIC	??_C@_0CI@OEPOLPBP@OPINION_WEIGHT_BORDER_PROMISE_BR@ ; `string'
PUBLIC	??_C@_0CJ@JDHFBGPC@BROKEN_BORDER_PROMISE_PER_OPINIO@ ; `string'
PUBLIC	??_C@_0CF@PBLCGKKE@BORDER_PROMISE_BROKEN_PER_TURN_D@ ; `string'
PUBLIC	??_C@_0BP@GIBNOAFI@BORDER_PROMISE_TURNS_EFFECTIVE?$AA@ ; `string'
PUBLIC	??_C@_0CN@HEOCJGDH@OPINION_WEIGHT_EXPANSION_PROMISE@ ; `string'
PUBLIC	??_C@_0CN@DEGNECND@IGNORED_EXPANSION_PROMISE_PER_OP@ ; `string'
PUBLIC	??_C@_0CJ@NGJACNLI@EXPANSION_PROMISE_IGNORED_PER_TU@ ; `string'
PUBLIC	??_C@_0CL@LIDBIAAM@OPINION_WEIGHT_EXPANSION_PROMISE@ ; `string'
PUBLIC	??_C@_0CM@IIHPPALO@BROKEN_EXPANSION_PROMISE_PER_OPI@ ; `string'
PUBLIC	??_C@_0CI@LMJAMMG@EXPANSION_PROMISE_BROKEN_PER_TUR@ ; `string'
PUBLIC	??_C@_0CC@OABNOEAA@EXPANSION_PROMISE_TURNS_EFFECTIV@ ; `string'
PUBLIC	??_C@_0BJ@FGFCDPIM@EXPANSION_BICKER_TIMEOUT?$AA@ ; `string'
PUBLIC	??_C@_0CB@IOEFDBGK@EACH_GOLD_PER_TURN_VALUE_PERCENT@ ; `string'
PUBLIC	??_C@_0BI@GHALOGEB@EACH_GOLD_VALUE_PERCENT?$AA@	; `string'
PUBLIC	??_C@_0BE@HHDCCLBP@DOF_EXPIRATION_TIME?$AA@	; `string'
PUBLIC	??_C@_0BN@IKKNHIGG@DENUNCIATION_EXPIRATION_TIME?$AA@ ; `string'
PUBLIC	??_C@_0O@MAEKHHOJ@DOF_THRESHOLD?$AA@		; `string'
PUBLIC	??_C@_0BA@OJBNLAEK@DOF_TURN_BUFFER?$AA@		; `string'
PUBLIC	??_C@_0CM@GNJFHLKJ@DONT_SETTLE_MOD_MILITARY_POSTURE@ ; `string'
PUBLIC	??_C@_0CG@GPLNOCEH@DONT_SETTLE_MOD_MILITARY_POSTURE@ ; `string'
PUBLIC	??_C@_0CI@EHKBKFB@DONT_SETTLE_MOD_MILITARY_POSTURE@ ; `string'
PUBLIC	??_C@_0CF@LELPJGMA@DONT_SETTLE_MOD_MILITARY_POSTURE@ ; `string'
PUBLIC	??_C@_0CG@HPOJANPJ@DONT_SETTLE_MOD_MILITARY_POSTURE@ ; `string'
PUBLIC	??_C@_0BN@HHGIIEEK@DONT_SETTLE_STRENGTH_IMMENSE?$AA@ ; `string'
PUBLIC	??_C@_0BO@JFKLIOIK@DONT_SETTLE_STRENGTH_POWERFUL?$AA@ ; `string'
PUBLIC	??_C@_0BM@CNNGMOKP@DONT_SETTLE_STRENGTH_STRONG?$AA@ ; `string'
PUBLIC	??_C@_0BN@LMILIFMO@DONT_SETTLE_STRENGTH_AVERAGE?$AA@ ; `string'
PUBLIC	??_C@_0BK@CAFMIHMC@DONT_SETTLE_STRENGTH_POOR?$AA@ ; `string'
PUBLIC	??_C@_0BK@GMFPDPKE@DONT_SETTLE_STRENGTH_WEAK?$AA@ ; `string'
PUBLIC	??_C@_0BO@LHCDAHKG@DONT_SETTLE_STRENGTH_PATHETIC?$AA@ ; `string'
PUBLIC	??_C@_0BF@DLDDMBDF@DONT_SETTLE_FRIENDLY?$AA@	; `string'
PUBLIC	??_C@_0BO@FHIIDLEP@DONT_SETTLE_FLAVOR_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BI@KPABBKOJ@DONT_SETTLE_FLAVOR_BASE?$AA@	; `string'
PUBLIC	??_C@_0BB@OGBHKNAM@DONT_SETTLE_RAND?$AA@	; `string'
PUBLIC	??_C@_0BH@INCJJAAP@DEMAND_TURN_LIMIT_RAND?$AA@	; `string'
PUBLIC	??_C@_0BG@FGEFGJOH@DEMAND_TURN_LIMIT_MIN?$AA@	; `string'
PUBLIC	??_C@_0CB@HJELNJLB@COOP_WAR_LOCKED_TURNS_WAR_WEIGHT@ ; `string'
PUBLIC	??_C@_0BG@JJHOLDGE@COOP_WAR_LOCKED_TURNS?$AA@	; `string'
PUBLIC	??_C@_0BG@FOIGDAHK@COOP_WAR_SOON_COUNTER?$AA@	; `string'
PUBLIC	??_C@_0CD@HMNJJNIH@STOP_SPYING_MEMORY_TURN_EXPIRATI@ ; `string'
PUBLIC	??_C@_0BK@LLCDGHMH@IC_MEMORY_TURN_EXPIRATION?$AA@ ; `string'
PUBLIC	??_C@_0DJ@DKFMPNBK@VICTORY_DISPUTE_OTHER_PLAYER_GRA@ ; `string'
PUBLIC	??_C@_0DJ@CFFJEMEE@VICTORY_DISPUTE_OTHER_PLAYER_GRA@ ; `string'
PUBLIC	??_C@_0DL@KBKBGKEN@VICTORY_DISPUTE_OTHER_PLAYER_GRA@ ; `string'
PUBLIC	??_C@_0CM@OAJCALG@VICTORY_DISPUTE_OTHER_PLAYER_WEA@ ; `string'
PUBLIC	??_C@_0CO@IBPDKPMD@VICTORY_DISPUTE_OTHER_PLAYER_STR@ ; `string'
PUBLIC	??_C@_0CO@CIFNIEHG@VICTORY_DISPUTE_OTHER_PLAYER_FIE@ ; `string'
PUBLIC	??_C@_0CK@CEFHOELJ@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ ; `string'
PUBLIC	??_C@_0CK@DNEMNFPI@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ ; `string'
PUBLIC	??_C@_0CK@HCANEDDP@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ ; `string'
PUBLIC	??_C@_0CK@GLBGHCHO@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ ; `string'
PUBLIC	??_C@_0CK@EADLCBLN@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ ; `string'
PUBLIC	??_C@_0CK@FJCABAPM@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ ; `string'
PUBLIC	??_C@_0CK@NOLIAMDD@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ ; `string'
PUBLIC	??_C@_0CK@MHKDDNHC@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ ; `string'
PUBLIC	??_C@_0CL@GPJJNEGG@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ ; `string'
PUBLIC	??_C@_0CM@BBBDEKFL@VICTORY_DISPUTE_GRAND_STRATEGY_M@ ; `string'
PUBLIC	??_C@_0CM@OBGPLAF@VICTORY_DISPUTE_GRAND_STRATEGY_M@ ; `string'
PUBLIC	??_C@_0CO@BNMGBJGJ@VICTORY_DISPUTE_GRAND_STRATEGY_M@ ; `string'
PUBLIC	??_C@_0CD@PJKOHHMA@LAND_DISPUTE_NO_EXPANSION_STRATE@ ; `string'
PUBLIC	??_C@_0CA@LEAACKLF@LAND_DISPUTE_CRAMPED_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BH@IANBDPEF@LAND_DISPUTE_NEIGHBORS?$AA@	; `string'
PUBLIC	??_C@_0BD@EAKMBMHG@LAND_DISPUTE_CLOSE?$AA@	; `string'
PUBLIC	??_C@_0BB@PJAOGGPB@LAND_DISPUTE_FAR?$AA@	; `string'
PUBLIC	??_C@_0BF@NIBMFFBA@LAND_DISPUTE_DISTANT?$AA@	; `string'
PUBLIC	??_C@_0DE@LDAHEGFC@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@ ; `string'
PUBLIC	??_C@_0CO@NDAIEALO@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@ ; `string'
PUBLIC	??_C@_0DA@PJNMDONE@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@ ; `string'
PUBLIC	??_C@_0CN@GHJOHFHB@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@ ; `string'
PUBLIC	??_C@_0CO@MDFMKPAA@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@ ; `string'
PUBLIC	??_C@_0CP@IDAADKDG@LAND_DISPUTE_EXP_AGGRESSIVE_POST@ ; `string'
PUBLIC	??_C@_0CJ@IBKLNLJE@LAND_DISPUTE_EXP_AGGRESSIVE_POST@ ; `string'
PUBLIC	??_C@_0CL@PBGKOKJD@LAND_DISPUTE_EXP_AGGRESSIVE_POST@ ; `string'
PUBLIC	??_C@_0CI@KMOHGJMC@LAND_DISPUTE_EXP_AGGRESSIVE_POST@ ; `string'
PUBLIC	??_C@_0CJ@JBPPDECK@LAND_DISPUTE_EXP_AGGRESSIVE_POST@ ; `string'
PUBLIC	??_C@_0CB@CHKLMCGK@MINOR_CIV_DISPUTE_FRIENDS_WEIGHT@ ; `string'
PUBLIC	??_C@_0CA@KOALBMEE@MINOR_CIV_DISPUTE_ALLIES_WEIGHT?$AA@ ; `string'
PUBLIC	??_C@_0CB@HOIJEDP@MINOR_CIV_DISPUTE_WEAK_THRESHOLD@ ; `string'
PUBLIC	??_C@_0CD@KHLOPCLF@MINOR_CIV_DISPUTE_STRONG_THRESHO@ ; `string'
PUBLIC	??_C@_0CD@OBANJAA@MINOR_CIV_DISPUTE_FIERCE_THRESHO@ ; `string'
PUBLIC	??_C@_0BO@MIHAMNO@WONDER_DISPUTE_WEAK_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0CA@BOAPCAAB@WONDER_DISPUTE_STRONG_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0CA@LHKBALLE@WONDER_DISPUTE_FIERCE_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BP@JFCMKLFO@VICTORY_DISPUTE_WEAK_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0CB@GNDOBHKK@VICTORY_DISPUTE_STRONG_THRESHOLD@ ; `string'
PUBLIC	??_C@_0CB@MEJADMBP@VICTORY_DISPUTE_FIERCE_THRESHOLD@ ; `string'
PUBLIC	??_C@_0BM@ODODNFIL@LAND_DISPUTE_WEAK_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BO@CGMMAMAE@LAND_DISPUTE_STRONG_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BO@IPGCCHLB@LAND_DISPUTE_FIERCE_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0CD@LEBJODDK@WARMONGER_ON_CITY_STATE_MULTIPLI@ ; `string'
PUBLIC	??_C@_0CK@LMFLBFGN@WARMONGER_THREAT_SEVERE_PERCENT_@ ; `string'
PUBLIC	??_C@_0CM@KPMHGKKK@WARMONGER_THREAT_CRITICAL_PERCEN@ ; `string'
PUBLIC	??_C@_0CB@OGDGNBKB@WARMONGER_THREAT_PERSONALITY_MOD@ ; `string'
PUBLIC	??_C@_0CA@JECFNGG@WARMONGER_THREAT_PER_TURN_DECAY?$AA@ ; `string'
PUBLIC	??_C@_0CI@OJIAHPNP@WARMONGER_THREAT_MAJOR_CONQUERED@ ; `string'
PUBLIC	??_C@_0CH@GFBGIOAE@WARMONGER_THREAT_MAJOR_ATTACKED_@ ; `string'
PUBLIC	??_C@_0CI@ECDKFNGE@WARMONGER_THREAT_MINOR_CONQUERED@ ; `string'
PUBLIC	??_C@_0CH@OAJGMCL@WARMONGER_THREAT_MINOR_ATTACKED_@ ; `string'
PUBLIC	??_C@_0CB@HEJMPOHK@WARMONGER_THREAT_MINOR_THRESHOLD@ ; `string'
PUBLIC	??_C@_0CB@KCLJLNOG@WARMONGER_THREAT_MAJOR_THRESHOLD@ ; `string'
PUBLIC	??_C@_0CC@PIKPNPCF@WARMONGER_THREAT_SEVERE_THRESHOL@ ; `string'
PUBLIC	??_C@_0CE@PAIMPGDB@WARMONGER_THREAT_CRITICAL_THRESH@ ; `string'
PUBLIC	??_C@_0DD@NIIDLBLH@MILITARY_THREAT_ALREADY_WAR_EACH@ ; `string'
PUBLIC	??_C@_0CE@BMGBMEGP@MILITARY_THREAT_PER_MAJOR_CONQUE@ ; `string'
PUBLIC	??_C@_0CD@LMEGNNJN@MILITARY_THREAT_PER_MAJOR_ATTACK@ ; `string'
PUBLIC	??_C@_0CE@MKEEIHPD@MILITARY_THREAT_PER_MINOR_CONQUE@ ; `string'
PUBLIC	??_C@_0CD@EPKGKJDN@MILITARY_THREAT_PER_MINOR_ATTACK@ ; `string'
PUBLIC	??_C@_0BI@EDAPFJIA@MILITARY_THREAT_DISTANT?$AA@	; `string'
PUBLIC	??_C@_0BE@ODOIHHKA@MILITARY_THREAT_FAR?$AA@	; `string'
PUBLIC	??_C@_0BG@IJLMEKHH@MILITARY_THREAT_CLOSE?$AA@	; `string'
PUBLIC	??_C@_0BK@PICGGCGH@MILITARY_THREAT_NEIGHBORS?$AA@ ; `string'
PUBLIC	??_C@_0CK@JFLIMINA@MILITARY_THREAT_WAR_STATE_NEARLY@ ; `string'
PUBLIC	??_C@_0CE@PACPPOAL@MILITARY_THREAT_WAR_STATE_DEFENS@ ; `string'
PUBLIC	??_C@_0CE@GCJMFLMD@MILITARY_THREAT_WAR_STATE_STALEM@ ; `string'
PUBLIC	??_C@_0CE@DBECDJDJ@MILITARY_THREAT_WAR_STATE_OFFENS@ ; `string'
PUBLIC	??_C@_0CF@GFOHCLFM@MILITARY_THREAT_WAR_STATE_NEARLY@ ; `string'
PUBLIC	??_C@_0BP@HIEOGLLM@MILITARY_THREAT_WAR_STATE_CALM?$AA@ ; `string'
PUBLIC	??_C@_0CC@CLKGICNF@MILITARY_THREAT_STRENGTH_PATHETI@ ; `string'
PUBLIC	??_C@_0BO@JGDNDLMG@MILITARY_THREAT_STRENGTH_WEAK?$AA@ ; `string'
PUBLIC	??_C@_0BO@NKDOIDKA@MILITARY_THREAT_STRENGTH_POOR?$AA@ ; `string'
PUBLIC	??_C@_0CB@DAAIFPAK@MILITARY_THREAT_STRENGTH_AVERAGE@ ; `string'
PUBLIC	??_C@_0CA@HNHAPJPB@MILITARY_THREAT_STRENGTH_STRONG?$AA@ ; `string'
PUBLIC	??_C@_0CC@JCOALPJ@MILITARY_THREAT_STRENGTH_POWERFU@ ; `string'
PUBLIC	??_C@_0CB@PLOLFOIO@MILITARY_THREAT_STRENGTH_IMMENSE@ ; `string'
PUBLIC	??_C@_0CA@OIHBBGAA@MILITARY_THREAT_MINOR_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0CA@DOFEFFJM@MILITARY_THREAT_MAJOR_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0CB@EIODKKOP@MILITARY_THREAT_SEVERE_THRESHOLD@ ; `string'
PUBLIC	??_C@_0CD@OBPGPMAK@MILITARY_THREAT_CRITICAL_THRESHO@ ; `string'
PUBLIC	??_C@_0DD@NJJCPKOD@GAME_THREAT_GUESS_AT_WAR_MILITAR@ ; `string'
PUBLIC	??_C@_0DC@IEHACFPH@GAME_THREAT_GUESS_AT_WAR_MILITAR@ ; `string'
PUBLIC	??_C@_0DE@NABBMLIA@GAME_THREAT_GUESS_AT_WAR_MILITAR@ ; `string'
PUBLIC	??_C@_0DD@BCHBPLGH@GAME_THREAT_GUESS_AT_WAR_MILITAR@ ; `string'
PUBLIC	??_C@_0BJ@MNHHHBP@GAME_THREAT_GUESS_AT_WAR?$AA@	; `string'
PUBLIC	??_C@_0CN@OMBIACGF@GAME_THREAT_AT_WAR_MILITARY_STRE@ ; `string'
PUBLIC	??_C@_0CM@LLCAFJNP@GAME_THREAT_AT_WAR_MILITARY_STRE@ ; `string'
PUBLIC	??_C@_0CO@NEPPGHGN@GAME_THREAT_AT_WAR_MILITARY_STRE@ ; `string'
PUBLIC	??_C@_0CN@CHPLADOB@GAME_THREAT_AT_WAR_MILITARY_STRE@ ; `string'
PUBLIC	??_C@_0CD@CEJOKHGM@GAME_THREAT_AT_WAR_NEARLY_DEFEAT@ ; `string'
PUBLIC	??_C@_0BN@EJHIEFCJ@GAME_THREAT_AT_WAR_DEFENSIVE?$AA@ ; `string'
PUBLIC	??_C@_0BN@NLMLOAOB@GAME_THREAT_AT_WAR_STALEMATE?$AA@ ; `string'
PUBLIC	??_C@_0BM@MKCMFBKB@GAME_THREAT_MINOR_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BM@BMAJBCDN@GAME_THREAT_MAJOR_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BN@OJBAGENG@GAME_THREAT_SEVERE_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BP@JDKODPPE@GAME_THREAT_CRITICAL_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BO@EBCNBCOD@TARGET_MINOR_BACKUP_NEIGHBORS?$AA@ ; `string'
PUBLIC	??_C@_0BK@HMMCHCMK@TARGET_MINOR_BACKUP_CLOSE?$AA@ ; `string'
PUBLIC	??_C@_0BI@KOIHKJOE@TARGET_MINOR_BACKUP_FAR?$AA@	; `string'
PUBLIC	??_C@_0BM@DKGGMEJF@TARGET_MINOR_BACKUP_DISTANT?$AA@ ; `string'
PUBLIC	??_C@_0BM@CODECLOL@TARGET_MINOR_BACKUP_IMMENSE?$AA@ ; `string'
PUBLIC	??_C@_0BN@DECDEBFL@TARGET_MINOR_BACKUP_POWERFUL?$AA@ ; `string'
PUBLIC	??_C@_0BL@MCEEHIND@TARGET_MINOR_BACKUP_STRONG?$AA@ ; `string'
PUBLIC	??_C@_0BM@OFNHCKGP@TARGET_MINOR_BACKUP_AVERAGE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@DEMFLLCM@TARGET_MINOR_BACKUP_POOR?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HIMGADEK@TARGET_MINOR_BACKUP_WEAK?$AA@ ; `string'
PUBLIC	??_C@_0BN@BGKLMIHH@TARGET_MINOR_BACKUP_PATHETIC?$AA@ ; `string'
PUBLIC	??_C@_0P@NLOPECJO@TARGET_DISTANT?$AA@		; `string'
PUBLIC	??_C@_0L@COFOLJMK@TARGET_FAR?$AA@		; `string'
PUBLIC	??_C@_0N@GKHCOLFL@TARGET_CLOSE?$AA@		; `string'
PUBLIC	??_C@_0BB@KGACAMLE@TARGET_NEIGHBORS?$AA@	; `string'
PUBLIC	??_C@_0BP@KGPKCNPO@TARGET_ALREADY_WAR_EACH_PLAYER?$AA@ ; `string'
PUBLIC	??_C@_0CC@MDNJFFAA@TARGET_MILITARY_STRENGTH_PATHETI@ ; `string'
PUBLIC	??_C@_0BO@FKGAAPJB@TARGET_MILITARY_STRENGTH_WEAK?$AA@ ; `string'
PUBLIC	??_C@_0BO@BGGDLHPH@TARGET_MILITARY_STRENGTH_POOR?$AA@ ; `string'
PUBLIC	??_C@_0CB@PHALLJEN@TARGET_MILITARY_STRENGTH_AVERAGE@ ; `string'
PUBLIC	??_C@_0CA@KJDOAKIK@TARGET_MILITARY_STRENGTH_STRONG?$AA@ ; `string'
PUBLIC	??_C@_0CC@OBFBNMCM@TARGET_MILITARY_STRENGTH_POWERFU@ ; `string'
PUBLIC	??_C@_0CB@DMOILIMJ@TARGET_MILITARY_STRENGTH_IMMENSE@ ; `string'
PUBLIC	??_C@_0BK@GCMLPJAM@TARGET_INCREASE_WAR_TURNS?$AA@ ; `string'
PUBLIC	??_C@_0BL@KHGHPGJD@TARGET_FAVORABLE_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BJ@JNMHMPKA@TARGET_AVERAGE_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BF@FNEFFDCJ@TARGET_BAD_THRESHOLD?$AA@	; `string'
PUBLIC	??_C@_0BM@PPAFNFHP@TARGET_IMPOSSIBLE_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0CB@PCHBPGIJ@ECONOMIC_STRENGTH_WEAK_THRESHOLD@ ; `string'
PUBLIC	??_C@_0CB@NABAPINF@ECONOMIC_STRENGTH_POOR_THRESHOLD@ ; `string'
PUBLIC	??_C@_0CE@EOIKIBOI@ECONOMIC_STRENGTH_AVERAGE_THRESH@ ; `string'
PUBLIC	??_C@_0CD@LGJNAOGG@ECONOMIC_STRENGTH_STRONG_THRESHO@ ; `string'
PUBLIC	??_C@_0CF@GFBCLILP@ECONOMIC_STRENGTH_POWERFUL_THRES@ ; `string'
PUBLIC	??_C@_0CE@HFFKNFCD@ECONOMIC_STRENGTH_IMMENSE_THRESH@ ; `string'
PUBLIC	??_C@_0CD@KALCNKEP@ECONOMIC_STRENGTH_RATIO_MULTIPLI@ ; `string'
PUBLIC	??_C@_0CB@KAHIIMLK@MILITARY_STRENGTH_WEAK_THRESHOLD@ ; `string'
PUBLIC	??_C@_0CB@ICBJICOG@MILITARY_STRENGTH_POOR_THRESHOLD@ ; `string'
PUBLIC	??_C@_0CE@MEKLPDKL@MILITARY_STRENGTH_AVERAGE_THRESH@ ; `string'
PUBLIC	??_C@_0CD@PCCGKBHN@MILITARY_STRENGTH_STRONG_THRESHO@ ; `string'
PUBLIC	??_C@_0CF@IKENIJOH@MILITARY_STRENGTH_POWERFUL_THRES@ ; `string'
PUBLIC	??_C@_0CE@PPHLKHGA@MILITARY_STRENGTH_IMMENSE_THRESH@ ; `string'
PUBLIC	??_C@_0BL@OGMDLEEP@MILITARY_STRENGTH_CITY_MOD?$AA@ ; `string'
PUBLIC	??_C@_0CD@OEAJHFFE@MILITARY_STRENGTH_RATIO_MULTIPLI@ ; `string'
PUBLIC	??_C@_0BH@KMNEMPLD@MILITARY_STRENGTH_BASE?$AA@	; `string'
PUBLIC	??_C@_0CC@DIPEFBJJ@PLOT_BUYING_POSTURE_LOW_THRESHOL@ ; `string'
PUBLIC	??_C@_0CF@GLAJGGBA@PLOT_BUYING_POSTURE_MEDIUM_THRES@ ; `string'
PUBLIC	??_C@_0CD@DBHNLGNJ@PLOT_BUYING_POSTURE_HIGH_THRESHO@ ; `string'
PUBLIC	??_C@_0CJ@KAMKGMDB@PLOT_BUYING_POSTURE_INCREDIBLE_T@ ; `string'
PUBLIC	??_C@_0DC@KGOMIFDJ@EXPANSION_CAPITAL_DISTANCE_AGGRE@ ; `string'
PUBLIC	??_C@_0DF@CNOCBDMA@EXPANSION_CAPITAL_DISTANCE_AGGRE@ ; `string'
PUBLIC	??_C@_0DD@KLMOPLOM@EXPANSION_CAPITAL_DISTANCE_AGGRE@ ; `string'
PUBLIC	??_C@_0CK@EGIJENJE@MILITARY_AGGRESSIVE_POSTURE_THRE@ ; `string'
PUBLIC	??_C@_0CN@MCLJBFIC@MILITARY_AGGRESSIVE_POSTURE_THRE@ ; `string'
PUBLIC	??_C@_0CL@DEJEBHB@MILITARY_AGGRESSIVE_POSTURE_THRE@ ; `string'
PUBLIC	??_C@_0DB@MAPIMJOL@MILITARY_AGGRESSIVE_POSTURE_THRE@ ; `string'
PUBLIC	??_C@_0DA@MCOFBMNP@WAR_DAMAGE_LEVEL_UNINVOLVED_CITY@ ; `string'
PUBLIC	??_C@_0CO@GHELGKPN@WAR_DAMAGE_LEVEL_INVOLVED_CITY_P@ ; `string'
PUBLIC	??_C@_0BN@INGMEPD@WAR_DAMAGE_LEVEL_CITY_WEIGHT?$AA@ ; `string'
PUBLIC	??_C@_0CB@BPGLJKAN@WAR_DAMAGE_LEVEL_THRESHOLD_MINOR@ ; `string'
PUBLIC	??_C@_0CB@KAHJEGJL@WAR_DAMAGE_LEVEL_THRESHOLD_MAJOR@ ; `string'
PUBLIC	??_C@_0CD@KJCDAINP@WAR_DAMAGE_LEVEL_THRESHOLD_SERIO@ ; `string'
PUBLIC	??_C@_0CE@MOGEEAOM@WAR_DAMAGE_LEVEL_THRESHOLD_CRIPP@ ; `string'
PUBLIC	??_C@_0BO@KDPOLBGM@WAR_STATE_THRESHOLD_DEFENSIVE?$AA@ ; `string'
PUBLIC	??_C@_0BO@DBENBEKE@WAR_STATE_THRESHOLD_STALEMATE?$AA@ ; `string'
PUBLIC	??_C@_0BO@GCJDHGFO@WAR_STATE_THRESHOLD_OFFENSIVE?$AA@ ; `string'
PUBLIC	??_C@_0BP@LGGCAOOI@WAR_STATE_THRESHOLD_NEARLY_WON?$AA@ ; `string'
PUBLIC	??_C@_0CI@FOBPGMAL@WAR_STATE_CALM_THRESHOLD_FOREIGN@ ; `string'
PUBLIC	??_C@_0CG@IFICIBIH@WAR_PROJECTION_WAR_DURATION_SCOR@ ; `string'
PUBLIC	??_C@_0CI@LFIONLAH@WAR_PROJECTION_WAR_DAMAGE_THEM_C@ ; `string'
PUBLIC	??_C@_0CH@PCJDENBF@WAR_PROJECTION_WAR_DAMAGE_THEM_S@ ; `string'
PUBLIC	??_C@_0CF@CAKIBOAM@WAR_PROJECTION_WAR_DAMAGE_THEM_M@ ; `string'
PUBLIC	??_C@_0CF@JPLKMCJK@WAR_PROJECTION_WAR_DAMAGE_THEM_M@ ; `string'
PUBLIC	??_C@_0CE@BIGHMCBI@WAR_PROJECTION_WAR_DAMAGE_THEM_N@ ; `string'
PUBLIC	??_C@_0CG@PFPDNOKD@WAR_PROJECTION_WAR_DAMAGE_US_CRI@ ; `string'
PUBLIC	??_C@_0CF@FAJNIPPP@WAR_PROJECTION_WAR_DAMAGE_US_SER@ ; `string'
PUBLIC	??_C@_0CD@JFPCMDJP@WAR_PROJECTION_WAR_DAMAGE_US_MAJ@ ; `string'
PUBLIC	??_C@_0CD@CKOABPAJ@WAR_PROJECTION_WAR_DAMAGE_US_MIN@ ; `string'
PUBLIC	??_C@_0CC@JCHFGAKF@WAR_PROJECTION_WAR_DAMAGE_US_NON@ ; `string'
PUBLIC	??_C@_0CP@NKMJIPHP@WAR_PROJECTION_THEIR_ECONOMIC_ST@ ; `string'
PUBLIC	??_C@_0DA@MDLFOLKC@WAR_PROJECTION_THEIR_ECONOMIC_ST@ ; `string'
PUBLIC	??_C@_0CO@OLFFLNMF@WAR_PROJECTION_THEIR_ECONOMIC_ST@ ; `string'
PUBLIC	??_C@_0CP@BBCKIOPL@WAR_PROJECTION_THEIR_ECONOMIC_ST@ ; `string'
PUBLIC	??_C@_0CM@OPBKECBO@WAR_PROJECTION_THEIR_ECONOMIC_ST@ ; `string'
PUBLIC	??_C@_0CM@KDBJPKHI@WAR_PROJECTION_THEIR_ECONOMIC_ST@ ; `string'
PUBLIC	??_C@_0DA@OBDNGCIO@WAR_PROJECTION_THEIR_ECONOMIC_ST@ ; `string'
PUBLIC	??_C@_0CP@LPAOPKEA@WAR_PROJECTION_THEIR_MILITARY_ST@ ; `string'
PUBLIC	??_C@_0DA@HFLGABOK@WAR_PROJECTION_THEIR_MILITARY_ST@ ; `string'
PUBLIC	??_C@_0CO@JMPJEEJN@WAR_PROJECTION_THEIR_MILITARY_ST@ ; `string'
PUBLIC	??_C@_0CP@HEONPLME@WAR_PROJECTION_THEIR_MILITARY_ST@ ; `string'
PUBLIC	??_C@_0CM@PHOJBKDB@WAR_PROJECTION_THEIR_MILITARY_ST@ ; `string'
PUBLIC	??_C@_0CB@KLOPGNHP@WAR_PROJECTION_RECKLESS_EXPANDER@ ; `string'
PUBLIC	??_C@_0CM@LLOKKCFH@WAR_PROJECTION_THEIR_MILITARY_ST@ ; `string'
PUBLIC	??_C@_0DA@FHDOIIMG@WAR_PROJECTION_THEIR_MILITARY_ST@ ; `string'
PUBLIC	??_C@_0CD@LPPBAKOG@WAR_PROJECTION_THRESHOLD_STALEMA@ ; `string'
PUBLIC	??_C@_0CA@FMGACCNO@WAR_PROJECTION_THRESHOLD_DEFEAT?$AA@ ; `string'
PUBLIC	??_C@_0CF@PLCHPABP@WAR_PROJECTION_THRESHOLD_DESTRUC@ ; `string'
PUBLIC	??_C@_0BO@KBCCKBEP@WAR_PROJECTION_THRESHOLD_GOOD?$AA@ ; `string'
PUBLIC	??_C@_0CD@CEPLCBIO@WAR_PROJECTION_THRESHOLD_VERY_GO@ ; `string'
PUBLIC	??_C@_0BL@IBGDINCJ@WAR_GOAL_TARGET_IMPOSSIBLE?$AA@ ; `string'
PUBLIC	??_C@_0BE@JCJDLFJJ@WAR_GOAL_TARGET_BAD?$AA@	; `string'
PUBLIC	??_C@_0BI@DJLKEMJE@WAR_GOAL_TARGET_AVERAGE?$AA@	; `string'
PUBLIC	??_C@_0BK@NHFMPGNA@WAR_GOAL_TARGET_FAVORABLE?$AA@ ; `string'
PUBLIC	??_C@_0BF@OJENDNGK@WAR_GOAL_TARGET_SOFT?$AA@	; `string'
PUBLIC	??_C@_0BK@MEKILFMG@WAR_GOAL_GAME_THREAT_NONE?$AA@ ; `string'
PUBLIC	??_C@_0BL@POANPCDO@WAR_GOAL_GAME_THREAT_MINOR?$AA@ ; `string'
PUBLIC	??_C@_0BL@EBBPCOKI@WAR_GOAL_GAME_THREAT_MAJOR?$AA@ ; `string'
PUBLIC	??_C@_0BM@DDJPLANG@WAR_GOAL_GAME_THREAT_SEVERE?$AA@ ; `string'
PUBLIC	??_C@_0BO@IAGOLLGB@WAR_GOAL_GAME_THREAT_CRITICAL?$AA@ ; `string'
PUBLIC	??_C@_0BF@GNMMCOF@WAR_GOAL_DAMAGE_NONE?$AA@	; `string'
PUBLIC	??_C@_0BG@FMKIPHDL@WAR_GOAL_DAMAGE_MINOR?$AA@	; `string'
PUBLIC	??_C@_0BG@ODLKCLKN@WAR_GOAL_DAMAGE_MAJOR?$AA@	; `string'
PUBLIC	??_C@_0BI@BDDMMHIM@WAR_GOAL_DAMAGE_SERIOUS?$AA@	; `string'
PUBLIC	??_C@_0BJ@DMLMFPGN@WAR_GOAL_DAMAGE_CRIPPLED?$AA@ ; `string'
PUBLIC	??_C@_0CO@BEHAGIIA@WAR_GOAL_ANOTHER_PLAYER_STATE_NE@ ; `string'
PUBLIC	??_C@_0CI@BOJJMBBF@WAR_GOAL_ANOTHER_PLAYER_STATE_DE@ ; `string'
PUBLIC	??_C@_0CI@IMCKGENN@WAR_GOAL_ANOTHER_PLAYER_STATE_ST@ ; `string'
PUBLIC	??_C@_0CI@NPPEAGCH@WAR_GOAL_ANOTHER_PLAYER_STATE_OF@ ; `string'
PUBLIC	??_C@_0CJ@JPAGKAAA@WAR_GOAL_ANOTHER_PLAYER_STATE_NE@ ; `string'
PUBLIC	??_C@_0CD@OFBCIAJK@WAR_GOAL_ANOTHER_PLAYER_STATE_CA@ ; `string'
PUBLIC	??_C@_0BP@FNALNCDL@WAR_GOAL_STATE_NEARLY_DEFEATED?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KOOEKNCH@WAR_GOAL_STATE_DEFENSIVE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@DMFHAIOP@WAR_GOAL_STATE_STALEMATE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@GPIJGKBF@WAR_GOAL_STATE_OFFENSIVE?$AA@ ; `string'
PUBLIC	??_C@_0BK@FHGBIMOM@WAR_GOAL_STATE_NEARLY_WON?$AA@ ; `string'
PUBLIC	??_C@_0BE@BJCOKPHO@WAR_GOAL_STATE_CALM?$AA@	; `string'
PUBLIC	??_C@_0BJ@JJMNFNKJ@WAR_GOAL_THRESHOLD_PEACE?$AA@ ; `string'
PUBLIC	??_C@_0BK@EGOAGGHO@WAR_GOAL_THRESHOLD_DAMAGE?$AA@ ; `string'
PUBLIC	??_C@_0BM@PMLFHNFD@WAR_GOAL_THRESHOLD_CONQUEST?$AA@ ; `string'
PUBLIC	??_C@_0BD@JFGOMEDI@ARMISTICE_MIN_GOLD?$AA@	; `string'
PUBLIC	??_C@_0BG@LNJFGLFE@ARMISTICE_GPT_DIVISOR?$AA@	; `string'
PUBLIC	??_C@_0CN@PKNKMMHH@PEACE_WILLINGNESS_ACCEPT_THRESHO@ ; `string'
PUBLIC	??_C@_0CO@EBNLLKKM@PEACE_WILLINGNESS_ACCEPT_THRESHO@ ; `string'
PUBLIC	??_C@_0CM@PDMHBKGB@PEACE_WILLINGNESS_ACCEPT_THRESHO@ ; `string'
PUBLIC	??_C@_0CO@HJAFOCCJ@PEACE_WILLINGNESS_ACCEPT_THRESHO@ ; `string'
PUBLIC	??_C@_0CN@HBBJFFIE@PEACE_WILLINGNESS_ACCEPT_THRESHO@ ; `string'
PUBLIC	??_C@_0CL@ONMGMOBF@PEACE_WILLINGNESS_ACCEPT_THRESHO@ ; `string'
PUBLIC	??_C@_0DA@DHNEDMCE@PEACE_WILLINGNESS_ACCEPT_THRESHO@ ; `string'
PUBLIC	??_C@_0DA@HAMCAIBP@PEACE_WILLINGNESS_ACCEPT_THRESHO@ ; `string'
PUBLIC	??_C@_0CF@NDIHOEDH@PEACE_WILLINGNESS_ACCEPT_TARGET_@ ; `string'
PUBLIC	??_C@_0CK@PFBCMGFG@PEACE_WILLINGNESS_ACCEPT_TARGET_@ ; `string'
PUBLIC	??_C@_0CI@HGJFKELF@PEACE_WILLINGNESS_ACCEPT_TARGET_@ ; `string'
PUBLIC	??_C@_0CE@ONBLCGPI@PEACE_WILLINGNESS_ACCEPT_TARGET_@ ; `string'
PUBLIC	??_C@_0CL@IFJKOFAM@PEACE_WILLINGNESS_ACCEPT_TARGET_@ ; `string'
PUBLIC	??_C@_0CO@PAOJBDNL@PEACE_WILLINGNESS_ACCEPT_PROJECT@ ; `string'
PUBLIC	??_C@_0CJ@GGNJHAEE@PEACE_WILLINGNESS_ACCEPT_PROJECT@ ; `string'
PUBLIC	??_C@_0CM@CKBFEDHM@PEACE_WILLINGNESS_ACCEPT_PROJECT@ ; `string'
PUBLIC	??_C@_0CO@GLODDILD@PEACE_WILLINGNESS_ACCEPT_PROJECT@ ; `string'
PUBLIC	??_C@_0CL@EOEANOKM@PEACE_WILLINGNESS_ACCEPT_PROJECT@ ; `string'
PUBLIC	??_C@_0DA@PEDMNMJM@PEACE_WILLINGNESS_ACCEPT_PROJECT@ ; `string'
PUBLIC	??_C@_0CM@NNNEPLBA@PEACE_WILLINGNESS_OFFER_THRESHOL@ ; `string'
PUBLIC	??_C@_0CN@JCCKEAGA@PEACE_WILLINGNESS_OFFER_THRESHOL@ ; `string'
PUBLIC	??_C@_0CL@PPLBNHBA@PEACE_WILLINGNESS_OFFER_THRESHOL@ ; `string'
PUBLIC	??_C@_0CN@KKPEBIOF@PEACE_WILLINGNESS_OFFER_THRESHOL@ ; `string'
PUBLIC	??_C@_0CM@FGBHGCOD@PEACE_WILLINGNESS_OFFER_THRESHOL@ ; `string'
PUBLIC	??_C@_0CK@CNBAIHNO@PEACE_WILLINGNESS_OFFER_THRESHOL@ ; `string'
PUBLIC	??_C@_0CP@NPDGMJF@PEACE_WILLINGNESS_OFFER_THRESHOL@ ; `string'
PUBLIC	??_C@_0CP@EKOFFIKO@PEACE_WILLINGNESS_OFFER_THRESHOL@ ; `string'
PUBLIC	??_C@_0CM@HHBPLIK@PEACE_WILLINGNESS_OFFER_WAR_DAMA@ ; `string'
PUBLIC	??_C@_0CL@LALIOIKM@PEACE_WILLINGNESS_OFFER_WAR_DAMA@ ; `string'
PUBLIC	??_C@_0CJ@BECMINAP@PEACE_WILLINGNESS_OFFER_WAR_DAMA@ ; `string'
PUBLIC	??_C@_0CJ@KLDOFBJJ@PEACE_WILLINGNESS_OFFER_WAR_DAMA@ ; `string'
PUBLIC	??_C@_0CI@PCCNDNHB@PEACE_WILLINGNESS_OFFER_WAR_DAMA@ ; `string'
PUBLIC	??_C@_0CN@CDBIOJBH@PEACE_WILLINGNESS_OFFER_PROJECTI@ ; `string'
PUBLIC	??_C@_0CI@EFCKOCBA@PEACE_WILLINGNESS_OFFER_PROJECTI@ ; `string'
PUBLIC	??_C@_0CL@CGGDIOAN@PEACE_WILLINGNESS_OFFER_PROJECTI@ ; `string'
PUBLIC	??_C@_0CN@LIBCMCHP@PEACE_WILLINGNESS_OFFER_PROJECTI@ ; `string'
PUBLIC	??_C@_0CK@IOJGJHGH@PEACE_WILLINGNESS_OFFER_PROJECTI@ ; `string'
PUBLIC	??_C@_0CP@MOBLIMCN@PEACE_WILLINGNESS_OFFER_PROJECTI@ ; `string'
PUBLIC	??_C@_0BN@KGFDJFHM@REQUEST_PEACE_TURN_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BP@NBDOICHP@EVALUATE_WAR_IMPOSSIBLE_TARGET?$AA@ ; `string'
PUBLIC	??_C@_0BI@JAIHEOCL@EVALUATE_WAR_BAD_TARGET?$AA@	; `string'
PUBLIC	??_C@_0BM@BDKFADGN@EVALUATE_WAR_AVERAGE_TARGET?$AA@ ; `string'
PUBLIC	??_C@_0BO@KKPKNDFM@EVALUATE_WAR_FAVORABLE_TARGET?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MDLDOEBP@EVALUATE_WAR_SOFT_TARGET?$AA@ ; `string'
PUBLIC	??_C@_0BO@CGHDGBH@EVALUATE_WAR_GAME_THREAT_NONE?$AA@ ; `string'
PUBLIC	??_C@_0BP@PBPNPPP@EVALUATE_WAR_GAME_THREAT_MINOR?$AA@ ; `string'
PUBLIC	??_C@_0BP@LAANADGJ@EVALUATE_WAR_GAME_THREAT_MAJOR?$AA@ ; `string'
PUBLIC	??_C@_0CA@NPANFANN@EVALUATE_WAR_GAME_THREAT_SEVERE?$AA@ ; `string'
PUBLIC	??_C@_0CC@MDJAGMEA@EVALUATE_WAR_GAME_THREAT_CRITICA@ ; `string'
PUBLIC	??_C@_0BO@PLAMGJME@EVALUATE_WAR_ALREADY_FIGHTING?$AA@ ; `string'
PUBLIC	??_C@_0BK@BLLEGEMG@EVALUATE_WAR_NOT_PREPARED?$AA@ ; `string'
PUBLIC	??_C@_0CF@JOKJDFOC@EVALUATE_WAR_CONQUEST_GRAND_STRA@ ; `string'
PUBLIC	??_C@_0CK@BEHPIDFA@EVALUATE_WAR_WILLING_TO_DECLARE_@ ; `string'
PUBLIC	??_C@_0BO@POCFMHNP@EVALUATE_WAR_PLAYER_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0CG@CIAODHOO@COOPERATION_DESIRE_THEM_US_SAME_@ ; `string'
PUBLIC	??_C@_0CM@MNEJLOIN@COOPERATION_DESIRE_THEM_US_ENEMY@ ; `string'
PUBLIC	??_C@_0CM@GFBIFNBK@COOPERATION_DESIRE_THEM_US_COMPE@ ; `string'
PUBLIC	??_C@_0CL@CDGMPGCE@COOPERATION_DESIRE_THEM_US_SAME_@ ; `string'
PUBLIC	??_C@_0CE@KAGDKDE@COOPERATION_DESIRE_GAME_THREAT_N@ ; `string'
PUBLIC	??_C@_0CF@KNHAMPIB@COOPERATION_DESIRE_GAME_THREAT_M@ ; `string'
PUBLIC	??_C@_0CF@BCGCBDBH@COOPERATION_DESIRE_GAME_THREAT_M@ ; `string'
PUBLIC	??_C@_0CG@GIBCGDPG@COOPERATION_DESIRE_GAME_THREAT_S@ ; `string'
PUBLIC	??_C@_0CI@KDAEHCA@COOPERATION_DESIRE_GAME_THREAT_C@ ; `string'
PUBLIC	??_C@_0CB@OLECCJEM@COOPERATION_DESIRE_OPINION_ENEMY@ ; `string'
PUBLIC	??_C@_0CG@BKOKFH@COOPERATION_DESIRE_OPINION_COMPE@ ; `string'
PUBLIC	??_C@_0CD@NFKAKMBM@COOPERATION_DESIRE_OPINION_NEUTR@ ; `string'
PUBLIC	??_C@_0CC@LHEFGNPF@COOPERATION_DESIRE_OPINION_FRIEN@ ; `string'
PUBLIC	??_C@_0CA@CAFOBIAE@COOPERATION_DESIRE_OPINION_ALLY?$AA@ ; `string'
PUBLIC	??_C@_0CO@CIBDDIFM@COOPERATION_DESIRE_MILITARY_STRE@ ; `string'
PUBLIC	??_C@_0CK@HPFBMHFF@COOPERATION_DESIRE_MILITARY_STRE@ ; `string'
PUBLIC	??_C@_0CK@DDFCHPDD@COOPERATION_DESIRE_MILITARY_STRE@ ; `string'
PUBLIC	??_C@_0CN@DDFANKII@COOPERATION_DESIRE_MILITARY_STRE@ ; `string'
PUBLIC	??_C@_0CM@JDBHHHHD@COOPERATION_DESIRE_MILITARY_STRE@ ; `string'
PUBLIC	??_C@_0CO@KJLLBHA@COOPERATION_DESIRE_MILITARY_STRE@ ; `string'
PUBLIC	??_C@_0CN@PILDNLAM@COOPERATION_DESIRE_MILITARY_STRE@ ; `string'
PUBLIC	??_C@_0CN@GEGGKLOD@COOPERATION_DESIRE_WAR_STATE_NEA@ ; `string'
PUBLIC	??_C@_0CH@CCIIKOMI@COOPERATION_DESIRE_WAR_STATE_DEF@ ; `string'
PUBLIC	??_C@_0CH@LADLALAA@COOPERATION_DESIRE_WAR_STATE_STA@ ; `string'
PUBLIC	??_C@_0CH@ODOFGJPK@COOPERATION_DESIRE_WAR_STATE_OFF@ ; `string'
PUBLIC	??_C@_0CI@GHFIBPAG@COOPERATION_DESIRE_WAR_STATE_NEA@ ; `string'
PUBLIC	??_C@_0CC@IIEGIHII@COOPERATION_DESIRE_WAR_STATE_CAL@ ; `string'
PUBLIC	??_C@_0CC@GJLLBODC@COOPERATION_DESIRE_THRESHOLD_WEA@ ; `string'
PUBLIC	??_C@_0CE@HPIFJKDD@COOPERATION_DESIRE_THRESHOLD_DEC@ ; `string'
PUBLIC	??_C@_0CE@EGKEPGIJ@COOPERATION_DESIRE_THRESHOLD_STR@ ; `string'
PUBLIC	??_C@_0CD@NEFIKCMO@COOPERATION_DESIRE_THRESHOLD_EAG@ ; `string'
PUBLIC	??_C@_0BP@NNJHBILF@MINOR_APPROACH_WAR_TARGET_SOFT?$AA@ ; `string'
PUBLIC	??_C@_0CE@HACBACEF@MINOR_APPROACH_WAR_TARGET_FAVORA@ ; `string'
PUBLIC	??_C@_0CC@DBJKNFIA@MINOR_APPROACH_WAR_TARGET_AVERAG@ ; `string'
PUBLIC	??_C@_0BO@CGGPJGPA@MINOR_APPROACH_WAR_TARGET_BAD?$AA@ ; `string'
PUBLIC	??_C@_0CF@BKBJHBG@MINOR_APPROACH_WAR_TARGET_IMPOSS@ ; `string'
PUBLIC	??_C@_0CO@HHAHPLKN@MINOR_APPROACH_PROTECTIVE_WITH_A@ ; `string'
PUBLIC	??_C@_0DE@FGCGCEHN@MINOR_APPROACH_WAR_PLANNING_WAR_@ ; `string'
PUBLIC	??_C@_0DB@LPJOEAAC@MINOR_APPROACH_PROTECTIVE_PERSON@ ; `string'
PUBLIC	??_C@_0CP@MLNIEFIC@MINOR_APPROACH_FRIENDLY_PERSONAL@ ; `string'
PUBLIC	??_C@_0CM@DBOMLPBA@MINOR_APPROACH_CONQUEST_PERSONAL@ ; `string'
PUBLIC	??_C@_0CO@JOHJPBIA@MINOR_APPROACH_PROTECTIVE_PERSON@ ; `string'
PUBLIC	??_C@_0CM@DGIFEDN@MINOR_APPROACH_FRIENDLY_PERSONAL@ ; `string'
PUBLIC	??_C@_0CO@HEDNLMNA@MINOR_APPROACH_PROTECTIVE_PERSON@ ; `string'
PUBLIC	??_C@_0CM@OJCMBJGN@MINOR_APPROACH_FRIENDLY_PERSONAL@ ; `string'
PUBLIC	??_C@_0DB@CBIPAEKP@MINOR_APPROACH_PROTECTIVE_PERSON@ ; `string'
PUBLIC	??_C@_0CN@GPAPOAPO@MINOR_APPROACH_FRIENDLY_PERSONAL@ ; `string'
PUBLIC	??_C@_0CK@DLKNDKPB@MINOR_APPROACH_CONQUEST_PROXIMIT@ ; `string'
PUBLIC	??_C@_0CK@PAJBCEK@MINOR_APPROACH_FRIENDLY_PROXIMIT@ ; `string'
PUBLIC	??_C@_0CG@CECCHKPE@MINOR_APPROACH_CONQUEST_PROXIMIT@ ; `string'
PUBLIC	??_C@_0CG@KNICJCCA@MINOR_APPROACH_FRIENDLY_PROXIMIT@ ; `string'
PUBLIC	??_C@_0CI@CJNKGJFA@MINOR_APPROACH_CONQUEST_PROXIMIT@ ; `string'
PUBLIC	??_C@_0CK@NKCGMNNA@MINOR_APPROACH_PROTECTIVE_PROXIM@ ; `string'
PUBLIC	??_C@_0CG@NIHHDDGL@MINOR_APPROACH_IGNORE_PROXIMITY_@ ; `string'
PUBLIC	??_C@_0CM@BKLJGCJA@MINOR_APPROACH_CONQUEST_PROXIMIT@ ; `string'
PUBLIC	??_C@_0CO@LFCMCMAA@MINOR_APPROACH_PROTECTIVE_PROXIM@ ; `string'
PUBLIC	??_C@_0CM@CIDNIJLN@MINOR_APPROACH_FRIENDLY_PROXIMIT@ ; `string'
PUBLIC	??_C@_0CK@INKLLGHI@MINOR_APPROACH_IGNORE_PROXIMITY_@ ; `string'
PUBLIC	??_C@_0CC@FHNLLHIN@MINOR_APPROACH_PROTECTIVE_FRIEND@ ; `string'
PUBLIC	??_C@_0CA@NPJPBNFI@MINOR_APPROACH_FRIENDLY_FRIENDS?$AA@ ; `string'
PUBLIC	??_C@_0BL@EPFIIMMC@MINOR_APPROACH_WAR_FRIENDS?$AA@ ; `string'
PUBLIC	??_C@_0CE@EFKIGNCM@MINOR_APPROACH_PROTECTIVE_RESOUR@ ; `string'
PUBLIC	??_C@_0CC@IPOEJOME@MINOR_APPROACH_FRIENDLY_RESOURCE@ ; `string'
PUBLIC	??_C@_0CG@MCKBCDLL@MINOR_APPROACH_FRIENDLY_CURRENTL@ ; `string'
PUBLIC	??_C@_0CI@EBJFKMEC@MINOR_APPROACH_PROTECTIVE_CURREN@ ; `string'
PUBLIC	??_C@_0CP@LPAKOAGN@MINOR_APPROACH_PROTECTIVE_CURREN@ ; `string'
PUBLIC	??_C@_0CI@JKDGKEHL@MINOR_APPROACH_WAR_CURRENTLY_PRO@ ; `string'
PUBLIC	??_C@_0DF@OAHDKMFM@MINOR_APPROACH_PROTECTIVE_CULTUR@ ; `string'
PUBLIC	??_C@_0CN@FHCDIOMO@MINOR_APPROACH_IGNORE_CULTURE_GR@ ; `string'
PUBLIC	??_C@_0CK@JIJKNGGP@MINOR_APPROACH_WAR_CULTURE_GRAND@ ; `string'
PUBLIC	??_C@_0DJ@NCCCKKCN@MINOR_APPROACH_PROTECTIVE_DIPLO_@ ; `string'
PUBLIC	??_C@_0CL@PMPMFLNC@MINOR_APPROACH_IGNORE_DIPLO_GRAN@ ; `string'
PUBLIC	??_C@_0CI@IHCGGBFA@MINOR_APPROACH_WAR_DIPLO_GRAND_S@ ; `string'
PUBLIC	??_C@_0DF@NOEONLGG@MINOR_APPROACH_WAR_CONQUEST_GRAN@ ; `string'
PUBLIC	??_C@_0DA@JPEKHOKH@MINOR_APPROACH_FRIENDLY_CONQUEST@ ; `string'
PUBLIC	??_C@_0DC@HCIGLLIC@MINOR_APPROACH_PROTECTIVE_CONQUE@ ; `string'
PUBLIC	??_C@_0CL@NBFHJCOD@MINOR_APPROACH_WAR_CONQUEST_GRAN@ ; `string'
PUBLIC	??_C@_0CE@CPMALOGG@MINOR_APPROACH_IGNORE_CURRENTLY_@ ; `string'
PUBLIC	??_C@_0CA@GHLPFOP@MINOR_APPROACH_BIAS_FOR_CURRENT?$AA@ ; `string'
PUBLIC	??_C@_0BO@NFJNEGHL@MINOR_APPROACH_IGNORE_DEFAULT?$AA@ ; `string'
PUBLIC	??_C@_0BP@EDMMIOIF@APPROACH_WAR_PROXIMITY_DISTANT?$AA@ ; `string'
PUBLIC	??_C@_0BL@DODMLEEP@APPROACH_WAR_PROXIMITY_FAR?$AA@ ; `string'
PUBLIC	??_C@_0BN@FCDHOLIK@APPROACH_WAR_PROXIMITY_CLOSE?$AA@ ; `string'
PUBLIC	??_C@_0CB@JNOGNBJG@APPROACH_WAR_PROXIMITY_NEIGHBORS@ ; `string'
PUBLIC	??_C@_0BP@HGGPFKOH@APPROACH_WAR_RECKLESS_EXPANDER?$AA@ ; `string'
PUBLIC	??_C@_0CL@IHHNMPNB@APPROACH_WAR_HAS_MADE_PEACE_BEFO@ ; `string'
PUBLIC	??_C@_0CC@GLHBGGDH@TURNS_SINCE_PEACE_WEIGHT_DAMPENE@ ; `string'
PUBLIC	??_C@_0CO@BBGIMJHE@APPROACH_GUARDED_PROJECTION_VERY@ ; `string'
PUBLIC	??_C@_0CJ@GIGIHKCN@APPROACH_GUARDED_PROJECTION_GOOD@ ; `string'
PUBLIC	??_C@_0CM@CNNGEPBF@APPROACH_GUARDED_PROJECTION_UNKN@ ; `string'
PUBLIC	??_C@_0CO@NIJBCKHL@APPROACH_GUARDED_PROJECTION_STAL@ ; `string'
PUBLIC	??_C@_0CL@IMFBHCN@APPROACH_GUARDED_PROJECTION_DEFE@ ; `string'
PUBLIC	??_C@_0DA@FJIKILCD@APPROACH_GUARDED_PROJECTION_DEST@ ; `string'
PUBLIC	??_C@_0CK@CHEGKFFB@APPROACH_WAR_PROJECTION_VERY_GOO@ ; `string'
PUBLIC	??_C@_0CF@LIABFBHD@APPROACH_WAR_PROJECTION_GOOD_PER@ ; `string'
PUBLIC	??_C@_0CI@JOKGIOK@APPROACH_WAR_PROJECTION_UNKNOWN_@ ; `string'
PUBLIC	??_C@_0CK@OOLPEGFO@APPROACH_WAR_PROJECTION_STALEMAT@ ; `string'
PUBLIC	??_C@_0CH@IAEBEONO@APPROACH_WAR_PROJECTION_DEFEAT_P@ ; `string'
PUBLIC	??_C@_0CM@PFHNEAJJ@APPROACH_WAR_PROJECTION_DESTRUCT@ ; `string'
PUBLIC	??_C@_0CN@NEGLOGIE@APPROACH_FRIENDLY_AFRAID_WITH_AN@ ; `string'
PUBLIC	??_C@_0CO@EOOEDFKO@APPROACH_DECEPTIVE_AFRAID_WITH_A@ ; `string'
PUBLIC	??_C@_0CM@LENDHHFO@APPROACH_HOSTILE_AFRAID_WITH_ANO@ ; `string'
PUBLIC	??_C@_0CI@BCAFLEHK@APPROACH_WAR_AFRAID_WITH_ANOTHER@ ; `string'
PUBLIC	??_C@_0CO@NMGEOBLL@APPROACH_FRIENDLY_HOSTILE_WITH_A@ ; `string'
PUBLIC	??_C@_0CP@HEFKHLO@APPROACH_DECEPTIVE_HOSTILE_WITH_@ ; `string'
PUBLIC	??_C@_0CN@LKACGCOA@APPROACH_HOSTILE_HOSTILE_WITH_AN@ ; `string'
PUBLIC	??_C@_0CJ@IGKHFAPC@APPROACH_WAR_HOSTILE_WITH_ANOTHE@ ; `string'
PUBLIC	??_C@_0DD@DLINKJGM@APPROACH_FRIENDLY_PLANNING_WAR_W@ ; `string'
PUBLIC	??_C@_0DC@KIBNGJB@APPROACH_GUARDED_PLANNING_WAR_WI@ ; `string'
PUBLIC	??_C@_0DE@BGFBBBPO@APPROACH_DECEPTIVE_PLANNING_WAR_@ ; `string'
PUBLIC	??_C@_0DC@PEFPDFNA@APPROACH_HOSTILE_PLANNING_WAR_WI@ ; `string'
PUBLIC	??_C@_0CO@BIBNCHGM@APPROACH_WAR_PLANNING_WAR_WITH_A@ ; `string'
PUBLIC	??_C@_0CF@FHMIKABK@APPROACH_FRIENDLY_AT_WAR_WITH_PL@ ; `string'
PUBLIC	??_C@_0CE@PBIBLAKO@APPROACH_GUARDED_AT_WAR_WITH_PLA@ ; `string'
PUBLIC	??_C@_0CG@DPFPHELM@APPROACH_DECEPTIVE_AT_WAR_WITH_P@ ; `string'
PUBLIC	??_C@_0CE@NJIMIHFF@APPROACH_HOSTILE_AT_WAR_WITH_PLA@ ; `string'
PUBLIC	??_C@_0CM@MACAEGIN@APPROACH_WAR_AT_WAR_WITH_PLAYER_@ ; `string'
PUBLIC	??_C@_0CN@PBJONADN@APPROACH_WAR_AT_WAR_WITH_PLAYER_@ ; `string'
PUBLIC	??_C@_0CN@HJDLKDFK@APPROACH_WAR_AT_WAR_WITH_PLAYER_@ ; `string'
PUBLIC	??_C@_0CG@BEMLPIIN@APPROACH_HOSTILE_MILITARY_THREAT@ ; `string'
PUBLIC	??_C@_0CI@MPGBPEPE@APPROACH_FRIENDLY_MILITARY_THREA@ ; `string'
PUBLIC	??_C@_0CG@PJPOCFLH@APPROACH_AFRAID_MILITARY_THREAT_@ ; `string'
PUBLIC	??_C@_0CH@EIPEEJPL@APPROACH_GUARDED_MILITARY_THREAT@ ; `string'
PUBLIC	??_C@_0CJ@JJKLNDLC@APPROACH_DECEPTIVE_MILITARY_THRE@ ; `string'
PUBLIC	??_C@_0CI@HAHDCIGC@APPROACH_FRIENDLY_MILITARY_THREA@ ; `string'
PUBLIC	??_C@_0CG@EGOMPJCB@APPROACH_AFRAID_MILITARY_THREAT_@ ; `string'
PUBLIC	??_C@_0CH@PHOGJFGN@APPROACH_GUARDED_MILITARY_THREAT@ ; `string'
PUBLIC	??_C@_0CJ@CGLJAPCE@APPROACH_DECEPTIVE_MILITARY_THRE@ ; `string'
PUBLIC	??_C@_0CJ@EIBPPHHO@APPROACH_FRIENDLY_MILITARY_THREA@ ; `string'
PUBLIC	??_C@_0CH@KHPMHIIF@APPROACH_AFRAID_MILITARY_THREAT_@ ; `string'
PUBLIC	??_C@_0CI@NICHHPFC@APPROACH_GUARDED_MILITARY_THREAT@ ; `string'
PUBLIC	??_C@_0CK@NHPGNJPM@APPROACH_DECEPTIVE_MILITARY_THRE@ ; `string'
PUBLIC	??_C@_0CL@OAICCDD@APPROACH_FRIENDLY_MILITARY_THREA@ ; `string'
PUBLIC	??_C@_0CN@CPBAKIGE@APPROACH_FRIENDLY_IGNORED_CITY_S@ ; `string'
PUBLIC	??_C@_0CO@LFJPHLEO@APPROACH_DECEPTIVE_IGNORED_CITY_@ ; `string'
PUBLIC	??_C@_0CI@OJHOPKJK@APPROACH_WAR_IGNORED_CITY_STATE_@ ; `string'
PUBLIC	??_C@_0DC@CAOFKMPH@APPROACH_FRIENDLY_BROKEN_CITY_ST@ ; `string'
PUBLIC	??_C@_0DD@POLCLDAI@APPROACH_DECEPTIVE_BROKEN_CITY_S@ ; `string'
PUBLIC	??_C@_0CN@GJAMBDAA@APPROACH_WAR_BROKEN_CITY_STATE_P@ ; `string'
PUBLIC	??_C@_0CM@DCABCAAI@APPROACH_FRIENDLY_BROKEN_CITY_ST@ ; `string'
PUBLIC	??_C@_0CN@CGBLMIJ@APPROACH_DECEPTIVE_BROKEN_CITY_S@ ; `string'
PUBLIC	??_C@_0CH@FAIKGMDC@APPROACH_WAR_BROKEN_CITY_STATE_P@ ; `string'
PUBLIC	??_C@_0CJ@KGCJKCDH@APPROACH_FRIENDLY_IGNORED_BORDER@ ; `string'
PUBLIC	??_C@_0CK@DJMAIMLF@APPROACH_DECEPTIVE_IGNORED_BORDE@ ; `string'
PUBLIC	??_C@_0CE@DPCMIDPO@APPROACH_WAR_IGNORED_BORDER_PROM@ ; `string'
PUBLIC	??_C@_0CI@HMBMGOPC@APPROACH_FRIENDLY_BROKEN_BORDER_@ ; `string'
PUBLIC	??_C@_0CJ@CKNGEJLE@APPROACH_DECEPTIVE_BROKEN_BORDER@ ; `string'
PUBLIC	??_C@_0CD@HAGMBNPB@APPROACH_WAR_BROKEN_BORDER_PROMI@ ; `string'
PUBLIC	??_C@_0CM@IDFBCBJB@APPROACH_FRIENDLY_IGNORED_EXPANS@ ; `string'
PUBLIC	??_C@_0CN@LDDBLNBA@APPROACH_DECEPTIVE_IGNORED_EXPAN@ ; `string'
PUBLIC	??_C@_0CH@OBNKGNKL@APPROACH_WAR_IGNORED_EXPANSION_P@ ; `string'
PUBLIC	??_C@_0CL@CFMJCJIB@APPROACH_FRIENDLY_BROKEN_EXPANSI@ ; `string'
PUBLIC	??_C@_0CM@PAKKEBGO@APPROACH_DECEPTIVE_BROKEN_EXPANS@ ; `string'
PUBLIC	??_C@_0CG@HDJIMMNN@APPROACH_WAR_BROKEN_EXPANSION_PR@ ; `string'
PUBLIC	??_C@_0CL@GDFIDJAP@APPROACH_FRIENDLY_IGNORED_MILITA@ ; `string'
PUBLIC	??_C@_0CM@LGDLFBOA@APPROACH_DECEPTIVE_IGNORED_MILIT@ ; `string'
PUBLIC	??_C@_0DA@CFGCCAFJ@APPROACH_FRIENDLY_BROKEN_MILITAR@ ; `string'
PUBLIC	??_C@_0DB@MHKKOLJI@APPROACH_DECEPTIVE_BROKEN_MILITA@ ; `string'
PUBLIC	??_C@_0CL@LILPANMM@APPROACH_WAR_BROKEN_MILITARY_PRO@ ; `string'
PUBLIC	??_C@_0CK@EHAHEOKK@APPROACH_FRIENDLY_BROKEN_MILITAR@ ; `string'
PUBLIC	??_C@_0CL@EECOEFII@APPROACH_DECEPTIVE_BROKEN_MILITA@ ; `string'
PUBLIC	??_C@_0CF@KFCGDBJP@APPROACH_WAR_BROKEN_MILITARY_PRO@ ; `string'
PUBLIC	??_C@_0BJ@MAAIDOML@APPROACH_FRIENDLY_DEMAND?$AA@ ; `string'
PUBLIC	??_C@_0BK@DADEBGKO@APPROACH_DECEPTIVE_DEMAND?$AA@ ; `string'
PUBLIC	??_C@_0CJ@IEEHGLBH@APPROACH_AFRAID_MILITARY_THREAT_@ ; `string'
PUBLIC	??_C@_0CK@NEFKNCLH@APPROACH_GUARDED_MILITARY_THREAT@ ; `string'
PUBLIC	??_C@_0CM@NLGLEKNM@APPROACH_DECEPTIVE_MILITARY_THRE@ ; `string'
PUBLIC	??_C@_0CP@HEIHBCHL@APPROACH_ATTACKED_PROTECTED_MINO@ ; `string'
PUBLIC	??_C@_0CP@ELPHEHHE@APPROACH_ATTACKED_PROTECTED_MINO@ ; `string'
PUBLIC	??_C@_0CL@DDNFPENJ@APPROACH_ATTACKED_PROTECTED_MINO@ ; `string'
PUBLIC	??_C@_0CK@JCPAIJKP@APPROACH_ATTACKED_PROTECTED_MINO@ ; `string'
PUBLIC	??_C@_0CK@KNIANMKA@APPROACH_ATTACKED_PROTECTED_MINO@ ; `string'
PUBLIC	??_C@_0CG@IPELBGIL@APPROACH_ATTACKED_PROTECTED_MINO@ ; `string'
PUBLIC	??_C@_0BN@HIDOJFIG@APPROACH_DECEPTIVE_DENOUNCED?$AA@ ; `string'
PUBLIC	??_C@_0BM@EEBAEOJA@APPROACH_FRIENDLY_DENOUNCED?$AA@ ; `string'
PUBLIC	??_C@_0BL@IONDHHAI@APPROACH_GUARDED_DENOUNCED?$AA@ ; `string'
PUBLIC	??_C@_0BL@LFGGGMJH@APPROACH_HOSTILE_DENOUNCED?$AA@ ; `string'
PUBLIC	??_C@_0BH@EGPMBCDM@APPROACH_WAR_DENOUNCED?$AA@	; `string'
PUBLIC	??_C@_0CE@PEIODDKJ@APPROACH_WAR_WORKING_AGAINST_PLA@ ; `string'
PUBLIC	??_C@_0CI@NOLCOEI@APPROACH_HOSTILE_WORKING_AGAINST@ ; `string'
PUBLIC	??_C@_0CK@PCGCDMOC@APPROACH_DECEPTIVE_WORKING_AGAIN@ ; `string'
PUBLIC	??_C@_0CF@ILECEPOC@APPROACH_GUARDED_WORKING_WITH_PL@ ; `string'
PUBLIC	??_C@_0CF@KBAFGJEB@APPROACH_HOSTILE_WORKING_WITH_PL@ ; `string'
PUBLIC	??_C@_0CG@EHOIHBGH@APPROACH_FRIENDLY_WORKING_WITH_P@ ; `string'
PUBLIC	??_C@_0CH@HIDFOAGO@APPROACH_DECEPTIVE_WORKING_WITH_@ ; `string'
PUBLIC	??_C@_0BP@DAOGNHJ@APPROACH_OPINION_ALLY_FRIENDLY?$AA@ ; `string'
PUBLIC	??_C@_0CB@GEFBBFOG@APPROACH_OPINION_FRIEND_FRIENDLY@ ; `string'
PUBLIC	??_C@_0CA@IGECGNPC@APPROACH_OPINION_FRIEND_HOSTILE?$AA@ ; `string'
PUBLIC	??_C@_0CE@NGKINCPC@APPROACH_OPINION_FAVORABLE_FRIEN@ ; `string'
PUBLIC	??_C@_0CF@OGEBCAIJ@APPROACH_OPINION_FAVORABLE_DECEP@ ; `string'
PUBLIC	??_C@_0CD@MCIOFBEL@APPROACH_OPINION_FAVORABLE_HOSTI@ ; `string'
PUBLIC	??_C@_0CC@JHFCAHDK@APPROACH_OPINION_NEUTRAL_FRIENDL@ ; `string'
PUBLIC	??_C@_0CD@HDLPJANO@APPROACH_OPINION_NEUTRAL_DECEPTI@ ; `string'
PUBLIC	??_C@_0CE@KGJNPOBK@APPROACH_OPINION_COMPETITOR_GUAR@ ; `string'
PUBLIC	??_C@_0CG@JPBBBADC@APPROACH_OPINION_COMPETITOR_DECE@ ; `string'
PUBLIC	??_C@_0CE@JJONKLBF@APPROACH_OPINION_COMPETITOR_HOST@ ; `string'
PUBLIC	??_C@_0CA@MBNPKDNK@APPROACH_OPINION_COMPETITOR_WAR?$AA@ ; `string'
PUBLIC	??_C@_0BP@KOBMPIGP@APPROACH_OPINION_ENEMY_GUARDED?$AA@ ; `string'
PUBLIC	??_C@_0CB@CEDKDADF@APPROACH_OPINION_ENEMY_DECEPTIVE@ ; `string'
PUBLIC	??_C@_0BP@JBGMKNGA@APPROACH_OPINION_ENEMY_HOSTILE?$AA@ ; `string'
PUBLIC	??_C@_0BL@DBPADJGG@APPROACH_OPINION_ENEMY_WAR?$AA@ ; `string'
PUBLIC	??_C@_0CG@GKEPFGLN@APPROACH_OPINION_UNFORGIVABLE_GU@ ; `string'
PUBLIC	??_C@_0CI@KGFKNNBE@APPROACH_OPINION_UNFORGIVABLE_DE@ ; `string'
PUBLIC	??_C@_0CG@FFDPADLC@APPROACH_OPINION_UNFORGIVABLE_HO@ ; `string'
PUBLIC	??_C@_0CC@MPFKAOKB@APPROACH_OPINION_UNFORGIVABLE_WA@ ; `string'
PUBLIC	??_C@_0CF@FDBBHCEH@APPROACH_WAR_CONQUEST_GRAND_STRA@ ; `string'
PUBLIC	??_C@_0BI@KBMFJJGA@APPROACH_RANDOM_PERCENT?$AA@	; `string'
PUBLIC	??_C@_0BL@FBBPAFNE@APPROACH_WAR_CURRENTLY_WAR?$AA@ ; `string'
PUBLIC	??_C@_0CD@GHCLPGPK@APPROACH_HOSTILE_CURRENTLY_HOSTI@ ; `string'
PUBLIC	??_C@_0CB@NBCCENIC@APPROACH_WAR_CURRENTLY_DECEPTIVE@ ; `string'
PUBLIC	??_C@_0BK@MKEJLEMN@APPROACH_BIAS_FOR_CURRENT?$AA@ ; `string'
PUBLIC	??_C@_0BJ@BAAOCJOL@APPROACH_NEUTRAL_DEFAULT?$AA@ ; `string'
PUBLIC	??_C@_0BH@DFICOJOI@OPINION_THRESHOLD_ALLY?$AA@	; `string'
PUBLIC	??_C@_0BJ@IPDEAGED@OPINION_THRESHOLD_FRIEND?$AA@ ; `string'
PUBLIC	??_C@_0BM@OIPDHAJK@OPINION_THRESHOLD_FAVORABLE?$AA@ ; `string'
PUBLIC	??_C@_0BN@GCKHCPPJ@OPINION_THRESHOLD_COMPETITOR?$AA@ ; `string'
PUBLIC	??_C@_0BI@ECOLFLOO@OPINION_THRESHOLD_ENEMY?$AA@	; `string'
PUBLIC	??_C@_0BP@HIJGPDCC@OPINION_THRESHOLD_UNFORGIVABLE?$AA@ ; `string'
PUBLIC	??_C@_0DE@HJFNLFEG@OPINION_WEIGHT_THEY_SUPPORTED_OU@ ; `string'
PUBLIC	??_C@_0CK@CAMABMFF@OPINION_WEIGHT_THEY_SUPPORTED_OU@ ; `string'
PUBLIC	??_C@_0DC@JKJPKMBM@OPINION_WEIGHT_THEY_FOILED_OUR_P@ ; `string'
PUBLIC	??_C@_0CI@MKPGLGGL@OPINION_WEIGHT_THEY_FOILED_OUR_P@ ; `string'
PUBLIC	??_C@_0DF@FLOIPDCE@OPINION_WEIGHT_THEY_SUPPORTED_OU@ ; `string'
PUBLIC	??_C@_0CL@KFBKBDAB@OPINION_WEIGHT_THEY_SUPPORTED_OU@ ; `string'
PUBLIC	??_C@_0DE@DACOLAJN@OPINION_WEIGHT_WE_DISLIKED_THEIR@ ; `string'
PUBLIC	??_C@_0CK@PAONHNDJ@OPINION_WEIGHT_WE_DISLIKED_THEIR@ ; `string'
PUBLIC	??_C@_0DB@EPFCNAPB@OPINION_WEIGHT_WE_LIKED_THEIR_PR@ ; `string'
PUBLIC	??_C@_0CH@MFAFHNFL@OPINION_WEIGHT_WE_LIKED_THEIR_PR@ ; `string'
PUBLIC	??_C@_0CA@GAAEDCJI@OPINION_WEIGHT_CAPTURED_CAPITAL?$AA@ ; `string'
PUBLIC	??_C@_0CC@BCPMJJAA@OPINION_WEIGHT_INTRIGUE_SHARED_B@ ; `string'
PUBLIC	??_C@_0BJ@NNGEGEDD@OPINION_WEIGHT_ROBBED_BY?$AA@ ; `string'
PUBLIC	??_C@_0BJ@DONBINCF@OPINION_WEIGHT_NUKED_MAX?$AA@ ; `string'
PUBLIC	??_C@_0BM@IJCMMNEI@OPINION_WEIGHT_PAID_TRIBUTE?$AA@ ; `string'
PUBLIC	??_C@_0BP@ICMFGNMG@OPINION_WEIGHT_GAVE_ASSISTANCE?$AA@ ; `string'
PUBLIC	??_C@_0BO@OHOAMABE@OPINION_WEIGHT_LIBERATED_CITY?$AA@ ; `string'
PUBLIC	??_C@_0CB@NBLKNKIF@OPINION_WEIGHT_LIBERATED_CAPITAL@ ; `string'
PUBLIC	??_C@_0BK@GMLGBCBH@OPINION_WEIGHT_ASSIST_MAX?$AA@ ; `string'
PUBLIC	??_C@_0BO@HLKLGIIC@OPINION_WEIGHT_COMMON_FOE_MAX?$AA@ ; `string'
PUBLIC	??_C@_0BJ@JGNHDFBE@OPINION_WEIGHT_TRADE_MAX?$AA@ ; `string'
PUBLIC	??_C@_0CB@JAFPFEJJ@OPINION_WEIGHT_RECKLESS_EXPANDER@ ; `string'
PUBLIC	??_C@_0BP@OCOJJAID@OPINION_WEIGHT_DENOUNCED_ENEMY?$AA@ ; `string'
PUBLIC	??_C@_0CA@LMJHBJGN@OPINION_WEIGHT_DENOUNCED_FRIEND?$AA@ ; `string'
PUBLIC	??_C@_0BO@DLLGJPHH@OPINION_WEIGHT_DENOUNCED_THEM?$AA@ ; `string'
PUBLIC	??_C@_0BM@BCHLKJEI@OPINION_WEIGHT_DENOUNCED_ME?$AA@ ; `string'
PUBLIC	??_C@_0CE@OEBNOAAF@OPINION_WEIGHT_REFUSED_REQUEST_E@ ; `string'
PUBLIC	??_C@_0BO@BOHIDAM@OPINION_WEIGHT_WAR_ME_FRIENDS?$AA@ ; `string'
PUBLIC	??_C@_0BP@GANDNAID@OPINION_WEIGHT_WAR_FRIEND_EACH?$AA@ ; `string'
PUBLIC	??_C@_0CE@IAFHEDEO@OPINION_WEIGHT_DENOUNCED_ME_FRIE@ ; `string'
PUBLIC	??_C@_0CF@PIIAEAPP@OPINION_WEIGHT_DENOUNCED_FRIEND_@ ; `string'
PUBLIC	??_C@_0CN@MGHPKADK@OPINION_WEIGHT_DENOUNCED_BY_FRIE@ ; `string'
PUBLIC	??_C@_0CI@IHJPOEHG@OPINION_WEIGHT_DENOUNCED_BY_FRIE@ ; `string'
PUBLIC	??_C@_0BO@GJJNNLHG@OPINION_WEIGHT_DOF_WITH_ENEMY?$AA@ ; `string'
PUBLIC	??_C@_0BP@HBMLGLLF@OPINION_WEIGHT_DOF_WITH_FRIEND?$AA@ ; `string'
PUBLIC	??_C@_0BD@MEDGEIBP@OPINION_WEIGHT_DOF?$AA@	; `string'
PUBLIC	??_C@_0CG@MINIOCHN@OPINION_WEIGHT_SIDED_WITH_THEIR_@ ; `string'
PUBLIC	??_C@_0DP@MLAMFGPP@OPINION_WEIGHT_SIDED_WITH_THEIR_@ ; `string'
PUBLIC	??_C@_0CN@POOJBOCH@OPINION_WEIGHT_BULLIED_MANY_PROT@ ; `string'
PUBLIC	??_C@_0DB@OKCABGCK@OPINION_WEIGHT_BULLIED_PROTECTED@ ; `string'
PUBLIC	??_C@_0DA@DNJHALAB@OPINION_WEIGHT_BULLIED_PROTECTED@ ; `string'
PUBLIC	??_C@_0DK@FIOJLLBN@OPINION_WEIGHT_BULLIED_PROTECTED@ ; `string'
PUBLIC	??_C@_0EA@PECFNFCD@OPINION_WEIGHT_BULLIED_PROTECTED@ ; `string'
PUBLIC	??_C@_0CO@FGGKBHPN@OPINION_WEIGHT_ATTACKED_MANY_PRO@ ; `string'
PUBLIC	??_C@_0DC@GELLJEAK@OPINION_WEIGHT_ATTACKED_PROTECTE@ ; `string'
PUBLIC	??_C@_0DB@BIPKNCJM@OPINION_WEIGHT_ATTACKED_PROTECTE@ ; `string'
PUBLIC	??_C@_0DL@CHDOMHH@OPINION_WEIGHT_ATTACKED_PROTECTE@ ; `string'
PUBLIC	??_C@_0EB@GEKPEAGC@OPINION_WEIGHT_ATTACKED_PROTECTE@ ; `string'
PUBLIC	??_C@_0CM@OLNPGDEE@OPINION_WEIGHT_KILLED_MANY_PROTE@ ; `string'
PUBLIC	??_C@_0CG@ENGJNFEN@OPINION_WEIGHT_KILLED_PROTECTED_@ ; `string'
PUBLIC	??_C@_0DP@EIEGNBC@OPINION_WEIGHT_KILLED_PROTECTED_@ ; `string'
PUBLIC	??_C@_0CH@HGEOCBFJ@OPINION_WEIGHT_BROKEN_COOP_WAR_P@ ; `string'
PUBLIC	??_C@_0CG@HMBKAKGI@OPINION_WEIGHT_IGNORED_NO_DIG_PR@ ; `string'
PUBLIC	??_C@_0CF@KOHJIHBL@OPINION_WEIGHT_BROKEN_NO_DIG_PRO@ ; `string'
PUBLIC	??_C@_0CK@OEALGMOJ@OPINION_WEIGHT_IGNORED_NO_CONVER@ ; `string'
PUBLIC	??_C@_0CJ@FCGBGANE@OPINION_WEIGHT_BROKEN_NO_CONVERT@ ; `string'
PUBLIC	??_C@_0CC@JOKECKPM@OPINION_WEIGHT_FORGAVE_FOR_SPYIN@ ; `string'
PUBLIC	??_C@_0CD@HBKCALNG@OPINION_WEIGHT_IGNORED_SPY_PROMI@ ; `string'
PUBLIC	??_C@_0CC@PPAPEFML@OPINION_WEIGHT_BROKEN_SPY_PROMIS@ ; `string'
PUBLIC	??_C@_0CK@KMOLKNCC@OPINION_WEIGHT_IGNORED_CITY_STAT@ ; `string'
PUBLIC	??_C@_0CP@GJLHKGJF@OPINION_WEIGHT_BROKEN_CITY_STATE@ ; `string'
PUBLIC	??_C@_0CJ@BKIBKBBP@OPINION_WEIGHT_BROKEN_CITY_STATE@ ; `string'
PUBLIC	??_C@_0CG@LFFOBLJJ@OPINION_WEIGHT_IGNORED_BORDER_PR@ ; `string'
PUBLIC	??_C@_0CF@GHDNJGOK@OPINION_WEIGHT_BROKEN_BORDER_PRO@ ; `string'
PUBLIC	??_C@_0CJ@KLNBKAIG@OPINION_WEIGHT_IGNORED_EXPANSION@ ; `string'
PUBLIC	??_C@_0CI@KHPAKALJ@OPINION_WEIGHT_BROKEN_EXPANSION_@ ; `string'
PUBLIC	??_C@_0CI@OBGBLADH@OPINION_WEIGHT_IGNORED_MILITARY_@ ; `string'
PUBLIC	??_C@_0CN@GGNAOHJ@OPINION_WEIGHT_BROKEN_MILITARY_P@ ; `string'
PUBLIC	??_C@_0CH@HGHKLHPM@OPINION_WEIGHT_BROKEN_MILITARY_P@ ; `string'
PUBLIC	??_C@_0CH@ICOMMJAM@OPINION_WEIGHT_DIFFERENT_LATE_PO@ ; `string'
PUBLIC	??_C@_0CC@BGIFIPM@OPINION_WEIGHT_SAME_LATE_POLICIE@ ; `string'
PUBLIC	??_C@_0CE@MBFDCBOD@OPINION_WEIGHT_ADOPTING_MY_RELIG@ ; `string'
PUBLIC	??_C@_0CF@JNKODEDO@OPINION_WEIGHT_ADOPTING_HIS_RELI@ ; `string'
PUBLIC	??_C@_0CH@PNOPKKKI@OPINION_WEIGHT_PER_NEGATIVE_CONV@ ; `string'
PUBLIC	??_C@_0BO@MLKJPMMI@OPINION_WEIGHT_CULTURE_BOMBED?$AA@ ; `string'
PUBLIC	??_C@_0BH@BKOKPIIN@OPINION_WEIGHT_EMBASSY?$AA@	; `string'
PUBLIC	??_C@_0CG@LGFFELLN@OPINION_WEIGHT_LIBERATED_THREE_C@ ; `string'
PUBLIC	??_C@_0CE@MMCMJBDD@OPINION_WEIGHT_LIBERATED_TWO_CIT@ ; `string'
PUBLIC	??_C@_0CC@CMEGAJIK@OPINION_WEIGHT_LIBERATED_ONE_CIT@ ; `string'
PUBLIC	??_C@_0BL@KBKFAEID@OPINION_WEIGHT_RESURRECTED?$AA@ ; `string'
PUBLIC	??_C@_0BO@LFKIFCGA@OPINION_WEIGHT_BUILT_LANDMARK?$AA@ ; `string'
PUBLIC	??_C@_0CB@CJMENLAH@OPINION_WEIGHT_RETURNED_CIVILIAN@ ; `string'
PUBLIC	??_C@_0CB@BNNABPNA@OPINION_WEIGHT_MADE_DEMAND_OF_US@ ; `string'
PUBLIC	??_C@_0CB@MHFBGJDD@OPINION_WEIGHT_ASKED_STOP_SPYING@ ; `string'
PUBLIC	??_C@_0BP@BLPAHKGP@OPINION_WEIGHT_ASKED_NO_SETTLE?$AA@ ; `string'
PUBLIC	??_C@_0BO@NDDDNCCA@OPINION_WEIGHT_WARMONGER_NONE?$AA@ ; `string'
PUBLIC	??_C@_0BP@LHHDCOBE@OPINION_WEIGHT_WARMONGER_MINOR?$AA@ ; `string'
PUBLIC	??_C@_0BP@IGBPCIC@OPINION_WEIGHT_WARMONGER_MAJOR?$AA@ ; `string'
PUBLIC	??_C@_0CA@OIGNAHNM@OPINION_WEIGHT_WARMONGER_SEVERE?$AA@ ; `string'
PUBLIC	??_C@_0CC@CPIEKODG@OPINION_WEIGHT_WARMONGER_CRITICA@ ; `string'
PUBLIC	??_C@_0BO@FCIDKMLL@OPINION_WEIGHT_MINOR_CIV_NONE?$AA@ ; `string'
PUBLIC	??_C@_0BO@MFBBNDJP@OPINION_WEIGHT_MINOR_CIV_WEAK?$AA@ ; `string'
PUBLIC	??_C@_0CA@LINICGIK@OPINION_WEIGHT_MINOR_CIV_STRONG?$AA@ ; `string'
PUBLIC	??_C@_0CA@HICLLBKH@OPINION_WEIGHT_MINOR_CIV_FIERCE?$AA@ ; `string'
PUBLIC	??_C@_0BL@MLHKEDN@OPINION_WEIGHT_WONDER_NONE?$AA@ ; `string'
PUBLIC	??_C@_0BL@JLCFNLBJ@OPINION_WEIGHT_WONDER_WEAK?$AA@ ; `string'
PUBLIC	??_C@_0BN@NLNKMPEB@OPINION_WEIGHT_WONDER_STRONG?$AA@ ; `string'
PUBLIC	??_C@_0BN@BLCJFIGM@OPINION_WEIGHT_WONDER_FIERCE?$AA@ ; `string'
PUBLIC	??_C@_0BM@LMAGDPNB@OPINION_WEIGHT_VICTORY_NONE?$AA@ ; `string'
PUBLIC	??_C@_0BM@CLJEEAPF@OPINION_WEIGHT_VICTORY_WEAK?$AA@ ; `string'
PUBLIC	??_C@_0BO@EOMMIJNM@OPINION_WEIGHT_VICTORY_STRONG?$AA@ ; `string'
PUBLIC	??_C@_0BO@IODPBOPB@OPINION_WEIGHT_VICTORY_FIERCE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@EPDHOEHF@OPINION_WEIGHT_LAND_NONE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NIKFJLFB@OPINION_WEIGHT_LAND_WEAK?$AA@ ; `string'
PUBLIC	??_C@_0BL@JFKGAIFM@OPINION_WEIGHT_LAND_STRONG?$AA@ ; `string'
PUBLIC	??_C@_0BL@FFFFJPHB@OPINION_WEIGHT_LAND_FIERCE?$AA@ ; `string'
PUBLIC	??_C@_0CC@BJANBLHN@MC_GIFT_WEIGHT_ALMOST_NOT_FRIEND@ ; `string'
PUBLIC	??_C@_0CB@OENEAKAC@MC_GIFT_WEIGHT_ALMOST_NOT_ALLIES@ ; `string'
PUBLIC	??_C@_0BD@LHIOOCFH@MC_GIFT_WEIGHT_FAR?$AA@	; `string'
PUBLIC	??_C@_0BF@FCCEAOKA@MC_GIFT_WEIGHT_CLOSE?$AA@	; `string'
PUBLIC	??_C@_0BJ@JMKPMNBF@MC_GIFT_WEIGHT_NEIGHBORS?$AA@ ; `string'
PUBLIC	??_C@_0BH@FNFBKLKN@MC_GIFT_WEIGHT_HOSTILE?$AA@	; `string'
PUBLIC	??_C@_0BK@GEPLMMPL@MC_GIFT_WEIGHT_PROTECTIVE?$AA@ ; `string'
PUBLIC	??_C@_0CE@DKKLKKBA@MC_GIFT_WEIGHT_NEUTRAL_VICTORY_R@ ; `string'
PUBLIC	??_C@_0CA@MECGKECP@MC_GIFT_WEIGHT_RESOURCE_WE_NEED?$AA@ ; `string'
PUBLIC	??_C@_0BM@LOJNEAGP@MC_GIFT_WEIGHT_MILITARISTIC?$AA@ ; `string'
PUBLIC	??_C@_0CA@HHMLPMFI@MC_GIFT_WEIGHT_CONQUEST_VICTORY?$AA@ ; `string'
PUBLIC	??_C@_0BP@KDOPKKAC@MC_GIFT_WEIGHT_CULTURE_VICTORY?$AA@ ; `string'
PUBLIC	??_C@_0BN@GEIGINON@MC_GIFT_WEIGHT_DIPLO_VICTORY?$AA@ ; `string'
PUBLIC	??_C@_0BP@HNAJLJDP@MC_GIFT_WEIGHT_MARITIME_GROWTH?$AA@ ; `string'
PUBLIC	??_C@_0CB@ELGIHDI@MC_GIFT_WEIGHT_PASS_OTHER_PLAYER@ ; `string'
PUBLIC	??_C@_0CH@KJMLEFGJ@MC_SMALL_GIFT_WEIGHT_PASS_OTHER_@ ; `string'
PUBLIC	??_C@_0CC@PNIBBFHE@MC_SOMETIMES_GIFT_RAND_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0BP@ENJMLGFD@MC_ALWAYS_GIFT_DIPLO_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NLLIOHCC@MC_GIFT_WEIGHT_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BB@CJMLANJF@AGGRESSIVE_ANNEX?$AA@	; `string'
PUBLIC	??_C@_0N@IAPIDFDC@NORMAL_ANNEX?$AA@		; `string'
PUBLIC	??_C@_0BK@NEMBJDLN@RELIGION_MAX_MISSIONARIES?$AA@ ; `string'
PUBLIC	??_C@_0CD@ELKGCKAL@RELIGION_MISSIONARY_RANGE_IN_TUR@ ; `string'
PUBLIC	??_C@_0CO@EEAEDMOM@RELIGION_BELIEF_SCORE_UNOWNED_PL@ ; `string'
PUBLIC	??_C@_0CM@MLKMICPL@RELIGION_BELIEF_SCORE_OWNED_PLOT@ ; `string'
PUBLIC	??_C@_0CN@EIGIEAMH@RELIGION_BELIEF_SCORE_WORKED_PLO@ ; `string'
PUBLIC	??_C@_0CG@IHCIFGIG@RELIGION_BELIEF_SCORE_CITY_MULTI@ ; `string'
PUBLIC	??_C@_0DK@NPONLKEP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DN@POKAPOIP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0EB@HNJOKHCC@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DC@KPEJBMAC@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DH@OBKJCPJP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DJ@FJLNHAEB@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DO@BOEKBJDM@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0ED@JFBJHLLO@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DJ@GFHNDIPF@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DH@MIPIOEPN@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DK@GJJNEALN@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DK@FLOCGACN@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DP@DPPHMKIH@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DI@HGHFKHJE@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DM@JECBIIAG@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DO@OIGFHNMP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DM@EIMACLOA@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DJ@BFBJEGO@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DD@NGNFCMLI@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DB@CDPNIJEO@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DA@GDAHMKIF@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0DB@DENGEFCH@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ ; `string'
PUBLIC	??_C@_0BP@KKICENCP@MINOR_CIV_QUEST_WEIGHT_DEFAULT?$AA@ ; `string'
PUBLIC	??_C@_0BL@FPEEEOCN@QUEST_DISABLED_TRADE_ROUTE?$AA@ ; `string'
PUBLIC	??_C@_0BP@LFLMNGJM@QUEST_DISABLED_SPREAD_RELIGION?$AA@ ; `string'
PUBLIC	??_C@_0BO@LMJHO@QUEST_DISABLED_DENOUNCE_MAJOR?$AA@ ; `string'
PUBLIC	??_C@_0CA@LHALNFP@QUEST_DISABLED_BULLY_CITY_STATE?$AA@ ; `string'
PUBLIC	??_C@_0BG@KEDPOCGP@QUEST_DISABLED_INVEST?$AA@	; `string'
PUBLIC	??_C@_0BN@IGFFOEHH@QUEST_DISABLED_CONTEST_TECHS?$AA@ ; `string'
PUBLIC	??_C@_0BN@OOHMJAMN@QUEST_DISABLED_CONTEST_FAITH?$AA@ ; `string'
PUBLIC	??_C@_0BP@EFKCDNON@QUEST_DISABLED_CONTEST_CULTURE?$AA@ ; `string'
PUBLIC	??_C@_0CB@NLFBHACE@QUEST_DISABLED_PLEDGE_TO_PROTECT@ ; `string'
PUBLIC	??_C@_0BJ@JNGNPGHH@QUEST_DISABLED_GIVE_GOLD?$AA@ ; `string'
PUBLIC	??_C@_0BO@ONBCNIHG@QUEST_DISABLED_NATURAL_WONDER?$AA@ ; `string'
PUBLIC	??_C@_0BL@MNFFHKF@QUEST_DISABLED_FIND_PLAYER?$AA@ ; `string'
PUBLIC	??_C@_0BP@GDIAOMAA@QUEST_DISABLED_KILL_CITY_STATE?$AA@ ; `string'
PUBLIC	??_C@_0BM@NLJIANGA@QUEST_DISABLED_GREAT_PERSON?$AA@ ; `string'
PUBLIC	??_C@_0CA@KHNIDLE@QUEST_DISABLED_CONSTRUCT_WONDER?$AA@ ; `string'
PUBLIC	??_C@_0CA@NAGHIJGH@QUEST_DISABLED_CONNECT_RESOURCE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MFIBBCFI@QUEST_DISABLED_KILL_CAMP?$AA@ ; `string'
PUBLIC	??_C@_0BF@MFJIJPBN@QUEST_DISABLED_ROUTE?$AA@	; `string'
PUBLIC	??_C@_0DI@MMHPDPEB@MINOR_CIV_MERCANTILE_RESOURCES_K@ ; `string'
PUBLIC	??_C@_0CI@BLPFJMGO@MINOR_CIV_MERCANTILE_RESOURCES_Q@ ; `string'
PUBLIC	??_C@_0CO@KJFHFCJO@MINOR_CIV_THREATENED_BY_BARBS_NO@ ; `string'
PUBLIC	??_C@_0CM@CPPFBFOA@MINOR_CIV_QUEST_WONDER_COMPLETIO@ ; `string'
PUBLIC	??_C@_0CA@EJDADBJE@MINOR_CIV_QUEST_KILL_CAMP_RANGE?$AA@ ; `string'
PUBLIC	??_C@_0DP@GCHPEDKM@MINOR_CIV_PERSONAL_QUEST_RAND_TU@ ; `string'
PUBLIC	??_C@_0CM@GIBMKAAN@MINOR_CIV_PERSONAL_QUEST_RAND_TU@ ; `string'
PUBLIC	??_C@_0CL@DGEEEEPI@MINOR_CIV_PERSONAL_QUEST_MIN_TUR@ ; `string'
PUBLIC	??_C@_0DC@EDBCDLJB@MINOR_CIV_PERSONAL_QUEST_FIRST_P@ ; `string'
PUBLIC	??_C@_0CN@NDIABKPJ@MINOR_CIV_PERSONAL_QUEST_FIRST_P@ ; `string'
PUBLIC	??_C@_0DN@HBDKHJK@MINOR_CIV_GLOBAL_QUEST_RAND_TURN@ ; `string'
PUBLIC	??_C@_0CK@OFNPNGAC@MINOR_CIV_GLOBAL_QUEST_RAND_TURN@ ; `string'
PUBLIC	??_C@_0CJ@PNDPLOOH@MINOR_CIV_GLOBAL_QUEST_MIN_TURNS@ ; `string'
PUBLIC	??_C@_0DA@EJMDFFBA@MINOR_CIV_GLOBAL_QUEST_FIRST_POS@ ; `string'
PUBLIC	??_C@_0CL@EDLCMEBO@MINOR_CIV_GLOBAL_QUEST_FIRST_POS@ ; `string'
PUBLIC	??_C@_0CJ@FJFLIOKH@MINOR_CIV_MAX_PERSONAL_QUESTS_FO@ ; `string'
PUBLIC	??_C@_0CH@LOKANOKP@MINOR_CIV_MAX_GLOBAL_QUESTS_FOR_@ ; `string'
PUBLIC	??_C@_0BL@MENJPJCF@RETURN_CIVILIAN_FRIENDSHIP?$AA@ ; `string'
PUBLIC	??_C@_0BM@PPDCEODI@MINOR_LIBERATION_FRIENDSHIP?$AA@ ; `string'
PUBLIC	??_C@_0BP@DBNKPJAF@MAX_INFLUENCE_FROM_MINOR_GIFTS?$AA@ ; `string'
PUBLIC	??_C@_0BL@FFJNGAL@FRIENDSHIP_PER_UNIT_GIFTED?$AA@ ; `string'
PUBLIC	??_C@_0BL@PGAIGKPP@FRIENDSHIP_PER_BARB_KILLED?$AA@ ; `string'
PUBLIC	??_C@_0BO@MOJAFGBP@FRIENDSHIP_PER_UNIT_INTRUDING?$AA@ ; `string'
PUBLIC	??_C@_0CB@NNCLNFLL@MINOR_CIV_RESOURCE_SEARCH_RADIUS@ ; `string'
PUBLIC	??_C@_0CJ@MFMHLKNB@MINOR_CIV_BEST_RELATIONS_HAPPINE@ ; `string'
PUBLIC	??_C@_0CO@KGEAHABH@MINOR_CIV_GOLD_GIFT_MINIMUM_FRIE@ ; `string'
PUBLIC	??_C@_0CE@DIGGGOGL@MINOR_CIV_GOLD_GIFT_VISIBLE_DIVI@ ; `string'
PUBLIC	??_C@_0CB@LAOHOCAH@MINOR_CIV_GOLD_GIFT_GAME_DIVISOR@ ; `string'
PUBLIC	??_C@_0CE@DJNIHOBB@MINOR_CIV_GOLD_GIFT_GAME_MULTIPL@ ; `string'
PUBLIC	??_C@_0CE@GAKLKPAL@MINOR_QUEST_STANDARD_CONTEST_LEN@ ; `string'
PUBLIC	??_C@_0CD@CLCBGADE@MINOR_QUEST_FRIENDSHIP_TRADE_ROU@ ; `string'
PUBLIC	??_C@_0CH@OFJMIPKE@MINOR_QUEST_FRIENDSHIP_SPREAD_RE@ ; `string'
PUBLIC	??_C@_0CG@CFCDMNAO@MINOR_QUEST_FRIENDSHIP_DENOUNCE_@ ; `string'
PUBLIC	??_C@_0CI@CDCCCFJI@MINOR_QUEST_FRIENDSHIP_BULLY_CIT@ ; `string'
PUBLIC	??_C@_0BO@KDHEDPKN@MINOR_QUEST_FRIENDSHIP_INVEST?$AA@ ; `string'
PUBLIC	??_C@_0CF@MBIDDEMF@MINOR_QUEST_FRIENDSHIP_CONTEST_T@ ; `string'
PUBLIC	??_C@_0CF@KJKKEAHP@MINOR_QUEST_FRIENDSHIP_CONTEST_F@ ; `string'
PUBLIC	??_C@_0CH@BFICGENF@MINOR_QUEST_FRIENDSHIP_CONTEST_C@ ; `string'
PUBLIC	??_C@_0CJ@NOHJHFKP@MINOR_QUEST_FRIENDSHIP_PLEDGE_TO@ ; `string'
PUBLIC	??_C@_0CB@NKNOJHBE@MINOR_QUEST_FRIENDSHIP_GIVE_GOLD@ ; `string'
PUBLIC	??_C@_0CL@HDOJINKH@MINOR_QUEST_FRIENDSHIP_FIND_NATU@ ; `string'
PUBLIC	??_C@_0CD@HILAHJLM@MINOR_QUEST_FRIENDSHIP_FIND_PLAY@ ; `string'
PUBLIC	??_C@_0CH@DDKALFDI@MINOR_QUEST_FRIENDSHIP_KILL_CITY@ ; `string'
PUBLIC	??_C@_0CE@LPIHMAIO@MINOR_QUEST_FRIENDSHIP_GREAT_PER@ ; `string'
PUBLIC	??_C@_0CI@CCCPBLHD@MINOR_QUEST_FRIENDSHIP_CONSTRUCT@ ; `string'
PUBLIC	??_C@_0CI@PIDFBBKA@MINOR_QUEST_FRIENDSHIP_CONNECT_R@ ; `string'
PUBLIC	??_C@_0CB@ICDCHDDL@MINOR_QUEST_FRIENDSHIP_KILL_CAMP@ ; `string'
PUBLIC	??_C@_0BN@ODIBEEBJ@MINOR_QUEST_FRIENDSHIP_ROUTE?$AA@ ; `string'
PUBLIC	??_C@_0BM@JCOMPMIG@WAR_QUEST_MIN_UNITS_TO_KILL?$AA@ ; `string'
PUBLIC	??_C@_0CA@DNHNNLIA@WAR_QUEST_UNITS_TO_KILL_DIVISOR?$AA@ ; `string'
PUBLIC	??_C@_0BO@CJMJMLIE@WAR_QUEST_COMPLETE_FRIENDSHIP?$AA@ ; `string'
PUBLIC	??_C@_0CC@CBKGAJFM@TXT_KEY_MINOR_GIFT_UNITS_REMINDE@ ; `string'
PUBLIC	??_C@_0BP@HBNEFCKF@MAX_DISTANCE_MINORS_BARB_QUEST?$AA@ ; `string'
PUBLIC	??_C@_0CG@HLPNMJNE@MAX_MINOR_ADDITIONAL_ALLIES_GP_C@ ; `string'
PUBLIC	??_C@_0CC@GLGMKJLH@MINOR_ADDITIONAL_ALLIES_GP_CHANG@ ; `string'
PUBLIC	??_C@_0CN@JLIBBBBL@MINOR_TURNS_GREAT_PEOPLE_SPAWN_B@ ; `string'
PUBLIC	??_C@_0CE@DOBHBNON@MINOR_TURNS_GREAT_PEOPLE_SPAWN_R@ ; `string'
PUBLIC	??_C@_0CE@FDBCILAN@MINOR_TURNS_GREAT_PEOPLE_SPAWN_B@ ; `string'
PUBLIC	??_C@_0CH@CPJMOGLA@ALLIES_FAITH_FLAT_BONUS_AMOUNT_A@ ; `string'
PUBLIC	??_C@_0CJ@IBNBEPGB@ALLIES_FAITH_FLAT_BONUS_AMOUNT_C@ ; `string'
PUBLIC	??_C@_0CI@GGDLOAEE@ALLIES_FAITH_FLAT_BONUS_AMOUNT_M@ ; `string'
PUBLIC	??_C@_0CL@HNJAIFPA@ALLIES_FAITH_FLAT_BONUS_AMOUNT_R@ ; `string'
PUBLIC	??_C@_0CK@CDPOFADC@ALLIES_FAITH_FLAT_BONUS_AMOUNT_I@ ; `string'
PUBLIC	??_C@_0CI@IPOIHAMP@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@ ; `string'
PUBLIC	??_C@_0CK@DABKLMFN@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@ ; `string'
PUBLIC	??_C@_0CJ@KGCBPIHP@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@ ; `string'
PUBLIC	??_C@_0CM@CKNHOOGC@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@ ; `string'
PUBLIC	??_C@_0CL@MCAOHEG@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@ ; `string'
PUBLIC	??_C@_0DE@EJBEJBLF@ALLIES_HAPPINESS_PER_LUXURY_BONU@ ; `string'
PUBLIC	??_C@_0DC@ICJBOKLK@ALLIES_HAPPINESS_PER_LUXURY_BONU@ ; `string'
PUBLIC	??_C@_0DB@ILFJBDDM@ALLIES_HAPPINESS_PER_LUXURY_BONU@ ; `string'
PUBLIC	??_C@_0DF@LANBDEFI@FRIENDS_HAPPINESS_PER_LUXURY_BON@ ; `string'
PUBLIC	??_C@_0DD@CEPMMBHE@FRIENDS_HAPPINESS_PER_LUXURY_BON@ ; `string'
PUBLIC	??_C@_0DC@FKCFLKJJ@FRIENDS_HAPPINESS_PER_LUXURY_BON@ ; `string'
PUBLIC	??_C@_0CO@GOCNNODM@ALLIES_HAPPINESS_FLAT_BONUS_AMOU@ ; `string'
PUBLIC	??_C@_0CM@OCJCFDJK@ALLIES_HAPPINESS_FLAT_BONUS_AMOU@ ; `string'
PUBLIC	??_C@_0CL@DIGOOGKD@ALLIES_HAPPINESS_FLAT_BONUS_AMOU@ ; `string'
PUBLIC	??_C@_0CP@POALNEKK@FRIENDS_HAPPINESS_FLAT_BONUS_AMO@ ; `string'
PUBLIC	??_C@_0CN@PMMEOGJJ@FRIENDS_HAPPINESS_FLAT_BONUS_AMO@ ; `string'
PUBLIC	??_C@_0CM@GPCJINDB@FRIENDS_HAPPINESS_FLAT_BONUS_AMO@ ; `string'
PUBLIC	??_C@_0BH@NNHLCKHM@UNIT_SPAWN_NUM_CHOICES?$AA@	; `string'
PUBLIC	??_C@_0BL@IGLHLFEI@UNIT_SPAWN_BIAS_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BO@ODACJMNB@ALLIES_EXTRA_TURNS_UNIT_SPAWN?$AA@ ; `string'
PUBLIC	??_C@_0BO@HBDFNHKM@FRIENDS_RAND_TURNS_UNIT_SPAWN?$AA@ ; `string'
PUBLIC	??_C@_0BO@FJLHLADN@FRIENDS_BASE_TURNS_UNIT_SPAWN?$AA@ ; `string'
PUBLIC	??_C@_0CG@LIMBJBGC@ALLIES_OTHER_CITIES_FOOD_BONUS_A@ ; `string'
PUBLIC	??_C@_0CB@KOHFCGNJ@ALLIES_CAPITAL_FOOD_BONUS_AMOUNT@ ; `string'
PUBLIC	??_C@_0DI@HKIFEHMH@FRIENDS_OTHER_CITIES_FOOD_BONUS_@ ; `string'
PUBLIC	??_C@_0DH@BKMPCDHK@FRIENDS_OTHER_CITIES_FOOD_BONUS_@ ; `string'
PUBLIC	??_C@_0DD@LFGIDGFE@FRIENDS_CAPITAL_FOOD_BONUS_AMOUN@ ; `string'
PUBLIC	??_C@_0DC@ENCLCJEM@FRIENDS_CAPITAL_FOOD_BONUS_AMOUN@ ; `string'
PUBLIC	??_C@_0CH@CNHFIELJ@ALLIES_CULTURE_BONUS_AMOUNT_INDU@ ; `string'
PUBLIC	??_C@_0CF@DPPDNEDE@ALLIES_CULTURE_BONUS_AMOUNT_MEDI@ ; `string'
PUBLIC	??_C@_0CE@FEJFIBMM@ALLIES_CULTURE_BONUS_AMOUNT_ANCI@ ; `string'
PUBLIC	??_C@_0CI@INABBCMG@FRIENDS_CULTURE_BONUS_AMOUNT_IND@ ; `string'
PUBLIC	??_C@_0CG@PKIIIJDJ@FRIENDS_CULTURE_BONUS_AMOUNT_MED@ ; `string'
PUBLIC	??_C@_0CF@JFPDDCHE@FRIENDS_CULTURE_BONUS_AMOUNT_ANC@ ; `string'
PUBLIC	??_C@_0CD@EAANANMJ@MINOR_CIV_SCIENCE_BONUS_MULTIPLI@ ; `string'
PUBLIC	??_C@_0BO@MOOMLIJE@MINOR_FRIENDSHIP_CLOSE_AMOUNT?$AA@ ; `string'
PUBLIC	??_C@_0CL@DLLOHKPA@FRIENDSHIP_THRESHOLD_CAN_PLEDGE_@ ; `string'
PUBLIC	??_C@_0BP@KPLIMLMB@FRIENDSHIP_THRESHOLD_CAN_BULLY?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NFAJCECL@FRIENDSHIP_THRESHOLD_MAX?$AA@ ; `string'
PUBLIC	??_C@_0BM@FDKJOODF@FRIENDSHIP_THRESHOLD_ALLIES?$AA@ ; `string'
PUBLIC	??_C@_0BL@CGHIJMEH@FRIENDSHIP_ALLIES_ON_DEATH?$AA@ ; `string'
PUBLIC	??_C@_0BN@KBAHMDJG@FRIENDSHIP_THRESHOLD_FRIENDS?$AA@ ; `string'
PUBLIC	??_C@_0BM@BDBCDPJL@FRIENDSHIP_FRIENDS_ON_DEATH?$AA@ ; `string'
PUBLIC	??_C@_0BN@CIFBCCOD@FRIENDSHIP_THRESHOLD_NEUTRAL?$AA@ ; `string'
PUBLIC	??_C@_0BM@JPOGAFGD@FRIENDSHIP_NEUTRAL_ON_DEATH?$AA@ ; `string'
PUBLIC	??_C@_0BL@NMFNFFFN@PERMANENT_WAR_OTHER_AT_WAR?$AA@ ; `string'
PUBLIC	??_C@_0CF@IONAPLNK@PERMANENT_WAR_OTHER_CHANCE_NEIGH@ ; `string'
PUBLIC	??_C@_0CB@KDLDHMC@PERMANENT_WAR_OTHER_CHANCE_CLOSE@ ; `string'
PUBLIC	??_C@_0BP@MFMNEJFG@PERMANENT_WAR_OTHER_CHANCE_FAR?$AA@ ; `string'
PUBLIC	??_C@_0CD@PEAJINHL@PERMANENT_WAR_OTHER_CHANCE_DISTA@ ; `string'
PUBLIC	??_C@_0CP@FODJABJA@PERMANENT_WAR_OTHER_WARMONGER_CH@ ; `string'
PUBLIC	??_C@_0CL@NABICODF@PERMANENT_WAR_OTHER_WARMONGER_CH@ ; `string'
PUBLIC	??_C@_0CJ@NADEIDO@PERMANENT_WAR_OTHER_WARMONGER_CH@ ; `string'
PUBLIC	??_C@_0CN@MLJPIIOC@PERMANENT_WAR_OTHER_WARMONGER_CH@ ; `string'
PUBLIC	??_C@_0BP@BJAEFBAH@PERMANENT_WAR_AGGRESSOR_CHANCE?$AA@ ; `string'
PUBLIC	??_C@_0BO@FGMEIMPI@MINOR_CIV_WARMONGER_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BO@LNOJKEHC@MINOR_CIV_AGGRESSOR_THRESHOLD?$AA@ ; `string'
PUBLIC	??_C@_0BI@GJOOKCLM@MINOR_FRIENDSHIP_AT_WAR?$AA@	; `string'
PUBLIC	??_C@_0CM@MDMAEAFL@MINOR_FRIENDSHIP_NEGATIVE_INCREA@ ; `string'
PUBLIC	??_C@_0CL@PABKIALB@MINOR_FRIENDSHIP_DROP_BULLY_WORK@ ; `string'
PUBLIC	??_C@_0CL@DJFIDLOL@MINOR_FRIENDSHIP_DROP_BULLY_WORK@ ; `string'
PUBLIC	??_C@_0CJ@EMLMOJJP@MINOR_FRIENDSHIP_DROP_BULLY_GOLD@ ; `string'
PUBLIC	??_C@_0CJ@IFPOFCMF@MINOR_FRIENDSHIP_DROP_BULLY_GOLD@ ; `string'
PUBLIC	??_C@_0DB@OGIDHCFA@MINOR_FRIENDSHIP_DROP_DISHONOR_P@ ; `string'
PUBLIC	??_C@_0CJ@HNBKLGKB@MINOR_FRIENDSHIP_DROP_PER_TURN_A@ ; `string'
PUBLIC	??_C@_0CH@DPALJAA@MINOR_FRIENDSHIP_DROP_PER_TURN_H@ ; `string'
PUBLIC	??_C@_0BP@GMFCAEOP@MINOR_FRIENDSHIP_DROP_PER_TURN?$AA@ ; `string'
PUBLIC	??_C@_0CK@JEBBBPNF@MINOR_FRIENDSHIP_RATE_MOD_SHARED@ ; `string'
PUBLIC	??_C@_0CC@LLBCNIOF@MINOR_FRIENDSHIP_RATE_MOD_MAXIMU@ ; `string'
PUBLIC	??_C@_0BB@IFFILJIK@MINOR_BULLY_GOLD?$AA@	; `string'
PUBLIC	??_C@_0CE@COBAIHLB@AI_DIPLO_LAND_DISPUTE_WEIGHT_FIE@ ; `string'
PUBLIC	??_C@_0CE@OOODBAJM@AI_DIPLO_LAND_DISPUTE_WEIGHT_STR@ ; `string'
PUBLIC	??_C@_0CC@DPHOAAEH@AI_DIPLO_LAND_DISPUTE_WEIGHT_WEA@ ; `string'
PUBLIC	??_C@_0CJ@BPFAGGFL@AI_DIPLO_PLOT_RANGE_FROM_CITY_HO@ ; `string'
PUBLIC	??_C@_0CH@GEKHNEID@AI_HOMELAND_GREAT_PERSON_TURNS_T@ ; `string'
PUBLIC	??_C@_0CC@BCHLIFIP@AI_HOMELAND_MOVE_PRIORITY_AIRLIF@ ; `string'
PUBLIC	??_C@_0CI@ILBKGPKL@AI_HOMELAND_MOVE_PRIORITY_ARCHAE@ ; `string'
PUBLIC	??_C@_0CF@CJEDPOAE@AI_HOMELAND_MOVE_PRIORITY_TRADE_@ ; `string'
PUBLIC	??_C@_0CD@EFALMOEJ@AI_HOMELAND_MOVE_PRIORITY_TREASU@ ; `string'
PUBLIC	??_C@_0CN@KFEJNHEN@AI_HOMELAND_MOVE_PRIORITY_ADD_SP@ ; `string'
PUBLIC	??_C@_0CJ@NIIKJIGN@AI_HOMELAND_MOVE_PRIORITY_SPACES@ ; `string'
PUBLIC	??_C@_0DA@JCMFDOIB@AI_HOMELAND_MOVE_PRIORITY_AIRCRA@ ; `string'
PUBLIC	??_C@_0CF@BFGDNJCJ@AI_HOMELAND_MOVE_PRIORITY_INQUIS@ ; `string'
PUBLIC	??_C@_0CF@PJAGMAGG@AI_HOMELAND_MOVE_PRIORITY_MISSIO@ ; `string'
PUBLIC	??_C@_0CL@LHKHGIIG@AI_HOMELAND_MOVE_PRIORITY_PROPHE@ ; `string'
PUBLIC	??_C@_0CL@NHJGNEOH@AI_HOMELAND_MOVE_PRIORITY_ADMIRA@ ; `string'
PUBLIC	??_C@_0CL@OFECAJCK@AI_HOMELAND_MOVE_PRIORITY_GENERA@ ; `string'
PUBLIC	??_C@_0CJ@FHJPHKMH@AI_HOMELAND_MOVE_PRIORITY_ENGINE@ ; `string'
PUBLIC	??_C@_0CO@LDDIJMOC@AI_HOMELAND_MOVE_PRIORITY_SCIENT@ ; `string'
PUBLIC	??_C@_0CD@CAELKDKE@AI_HOMELAND_MOVE_PRIORITY_MUSICI@ ; `string'
PUBLIC	??_C@_0CB@BIKAOLAL@AI_HOMELAND_MOVE_PRIORITY_ARTIST@ ; `string'
PUBLIC	??_C@_0CB@GIFMOGMK@AI_HOMELAND_MOVE_PRIORITY_WRITER@ ; `string'
PUBLIC	??_C@_0CO@LLDMBCH@AI_HOMELAND_MOVE_PRIORITY_GARRIS@ ; `string'
PUBLIC	??_C@_0CI@GGKHEJIA@AI_HOMELAND_MOVE_PRIORITY_ANCIEN@ ; `string'
PUBLIC	??_C@_0CC@BOOAGBJ@AI_HOMELAND_MOVE_PRIORITY_UPGRAD@ ; `string'
PUBLIC	??_C@_0CB@EMHEBOJH@AI_HOMELAND_MOVE_PRIORITY_PATROL@ ; `string'
PUBLIC	??_C@_0CD@PNHIGNFH@AI_HOMELAND_MOVE_PRIORITY_GARRIS@ ; `string'
PUBLIC	??_C@_0CJ@FCJFMGNA@AI_HOMELAND_MOVE_PRIORITY_MOBILE@ ; `string'
PUBLIC	??_C@_0CB@MKHNEANE@AI_HOMELAND_MOVE_PRIORITY_SENTRY@ ; `string'
PUBLIC	??_C@_0CG@GEIBPHGH@AI_HOMELAND_MOVE_PRIORITY_EXPLOR@ ; `string'
PUBLIC	??_C@_0CC@HHMNMKGE@AI_HOMELAND_MOVE_PRIORITY_EXPLOR@ ; `string'
PUBLIC	??_C@_0CF@EEGOGFAI@AI_HOMELAND_MOVE_PRIORITY_WORKER@ ; `string'
PUBLIC	??_C@_0CB@MIFOBGNF@AI_HOMELAND_MOVE_PRIORITY_WORKER@ ; `string'
PUBLIC	??_C@_0CE@JNPNPJGG@AI_HOMELAND_MOVE_PRIORITY_TO_SAF@ ; `string'
PUBLIC	??_C@_0BP@EOOEAMAN@AI_HOMELAND_MOVE_PRIORITY_HEAL?$AA@ ; `string'
PUBLIC	??_C@_0CB@BAOCBMNA@AI_HOMELAND_MOVE_PRIORITY_SETTLE@ ; `string'
PUBLIC	??_C@_0CE@HBFAKEBA@AI_HOMELAND_ESTIMATE_TURNS_DISTA@ ; `string'
PUBLIC	??_C@_0CF@LMCGKMJO@AI_HOMELAND_MAX_DEFENSIVE_MOVE_T@ ; `string'
PUBLIC	??_C@_0CD@LKBHOIPJ@AI_HOMELAND_MAX_UPGRADE_MOVE_TUR@ ; `string'
PUBLIC	??_C@_0CF@KGHJKMFA@AI_HOMELAND_MOVE_PRIORITY_RANDOM@ ; `string'
PUBLIC	??_C@_0DC@HBDGLOOD@AI_TACTICAL_BARBARIAN_PRIORITY_P@ ; `string'
PUBLIC	??_C@_0CP@JNEAAHGJ@AI_TACTICAL_BARBARIAN_PRIORITY_E@ ; `string'
PUBLIC	??_C@_0CM@GKMDNPFK@AI_TACTICAL_BARBARIAN_PRIORITY_C@ ; `string'
PUBLIC	??_C@_0CP@HHPFNNJN@AI_TACTICAL_BARBARIAN_PRIORITY_A@ ; `string'
PUBLIC	??_C@_0CM@DPCDPBDB@AI_TACTICAL_BARBARIAN_PRIORITY_P@ ; `string'
PUBLIC	??_C@_0CP@KLBJLPAE@AI_TACTICAL_BARBARIAN_PRIORITY_C@ ; `string'
PUBLIC	??_C@_0DB@BLMDLMND@AI_TACTICAL_BARBARIAN_PRIORITY_B@ ; `string'
PUBLIC	??_C@_0DB@GDNBBJMJ@AI_TACTICAL_BARBARIAN_PRIORITY_P@ ; `string'
PUBLIC	??_C@_0CP@HPDMNEJK@AI_TACTICAL_BARBARIAN_PRIORITY_P@ ; `string'
PUBLIC	??_C@_0CH@LHHIOAKE@AI_TACTICAL_BARBARIAN_PRIORITY_P@ ; `string'
PUBLIC	??_C@_0DA@MLCIBCCJ@AI_TACTICAL_BARBARIAN_PRIORITY_D@ ; `string'
PUBLIC	??_C@_0CP@HLJJBHED@AI_TACTICAL_BARBARIAN_PRIORITY_A@ ; `string'
PUBLIC	??_C@_0DC@JHJFFKNF@AI_TACTICAL_BARBARIAN_PRIORITY_A@ ; `string'
PUBLIC	??_C@_0DA@KKMINGJJ@AI_TACTICAL_BARBARIAN_PRIORITY_A@ ; `string'
PUBLIC	??_C@_0CJ@EOJOGGDD@AI_TACTICAL_BARBARIAN_PRIORITY_T@ ; `string'
PUBLIC	??_C@_0DA@HOINGDDC@AI_TACTICAL_BARBARIAN_PRIORITY_D@ ; `string'
PUBLIC	??_C@_0DD@JDCPDADI@AI_TACTICAL_BARBARIAN_PRIORITY_D@ ; `string'
PUBLIC	??_C@_0DB@INMPIDEH@AI_TACTICAL_BARBARIAN_PRIORITY_D@ ; `string'
PUBLIC	??_C@_0CL@HIGGFMIA@AI_TACTICAL_BARBARIAN_PRIORITY_D@ ; `string'
PUBLIC	??_C@_0CM@PMMGJBEM@AI_TACTICAL_BARBARIAN_PRIORITY_C@ ; `string'
PUBLIC	??_C@_0CF@LOGFMLNC@AI_TACTICAL_MOVE_PRIORITY_RANDOM@ ; `string'
PUBLIC	??_C@_0CI@LGKFGHFP@AI_TACTICAL_BARBARIAN_RELEASE_VA@ ; `string'
PUBLIC	??_C@_0BN@BAAMFMIO@AI_TACTICAL_OVERKILL_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0BN@JHCPHEBF@AI_TACTICAL_REPOSITION_RANGE?$AA@ ; `string'
PUBLIC	??_C@_0BK@PDEINHGE@AI_TACTICAL_RECRUIT_RANGE?$AA@ ; `string'
PUBLIC	??_C@_0CH@OFKGHNKP@AI_TACTICAL_MAP_BOMBARDMENT_ZONE@ ; `string'
PUBLIC	??_C@_0CA@IOMPOMMI@AI_TACTICAL_MAP_TEMP_ZONE_TURNS?$AA@ ; `string'
PUBLIC	??_C@_0CB@IJMKNIGH@AI_TACTICAL_MAP_TEMP_ZONE_RADIUS@ ; `string'
PUBLIC	??_C@_0CF@LJKKHAKO@AI_TACTICAL_MAP_DOMINANCE_PERCEN@ ; `string'
PUBLIC	??_C@_0CJ@ECKKMLOO@AI_TACTICAL_MAP_UNIT_STRENGTH_MU@ ; `string'
PUBLIC	??_C@_0CM@ENEPHICP@AI_OPERATIONAL_PERCENT_HEALTH_FO@ ; `string'
PUBLIC	??_C@_0DB@MJINEPKI@AI_OPERATIONAL_PERCENT_DANGER_FO@ ; `string'
PUBLIC	??_C@_0CO@OLABBHMN@AI_OPERATIONAL_NAVAL_BOMBARDMENT@ ; `string'
PUBLIC	??_C@_0CK@JPCGDAOG@AI_OPERATIONAL_PILLAGE_ENEMY_DEP@ ; `string'
PUBLIC	??_C@_0CI@BBBEOKNB@AI_OPERATIONAL_CITY_ATTACK_DEPLO@ ; `string'
PUBLIC	??_C@_0CL@FLAHNGEP@AI_OPERATIONAL_BARBARIAN_CAMP_DE@ ; `string'
PUBLIC	??_C@_0CC@CEECGEIA@AI_CITIZEN_MOD_PRODUCTION_DEFICI@ ; `string'
PUBLIC	??_C@_0BM@FPMALCDH@AI_CITIZEN_MOD_FOOD_DEFICIT?$AA@ ; `string'
PUBLIC	??_C@_0CC@HEMBFKAO@AI_CITIZEN_FOOD_MOD_SIZE_EXPONEN@ ; `string'
PUBLIC	??_C@_0CA@HMPEOCJJ@AI_CITIZEN_FOOD_MOD_SIZE_CUTOFF?$AA@ ; `string'
PUBLIC	??_C@_0BH@IKEJKLMD@AI_CITIZEN_VALUE_FAITH?$AA@	; `string'
PUBLIC	??_C@_0BJ@GKCKJNHC@AI_CITIZEN_VALUE_CULTURE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@IFCODDPF@AI_CITIZEN_VALUE_SCIENCE?$AA@ ; `string'
PUBLIC	??_C@_0BG@MFNDGIIA@AI_CITIZEN_VALUE_GOLD?$AA@	; `string'
PUBLIC	??_C@_0BM@LOPFOFEF@AI_CITIZEN_VALUE_PRODUCTION?$AA@ ; `string'
PUBLIC	??_C@_0BG@PKPFPPGJ@AI_CITIZEN_VALUE_FOOD?$AA@	; `string'
PUBLIC	??_C@_0CG@LDNKOAGG@AI_CITYSTRATEGY_ARMY_UNIT_BASE_W@ ; `string'
PUBLIC	??_C@_0DB@PMFIMDBA@AI_CITYSTRATEGY_OPERATION_UNIT_F@ ; `string'
PUBLIC	??_C@_0CL@IKFEGKAK@AI_CITYSTRATEGY_OPERATION_UNIT_B@ ; `string'
PUBLIC	??_C@_0CI@EBDKBOIE@AI_CITYSTRATEGY_YIELD_DEFICIENT_@ ; `string'
PUBLIC	??_C@_0CF@MCNMJEAK@AI_CITYSTRATEGY_YIELD_DEFICIENT_@ ; `string'
PUBLIC	??_C@_0CL@NBDGGJHE@AI_CITYSTRATEGY_YIELD_DEFICIENT_@ ; `string'
PUBLIC	??_C@_0CF@PNPKADOD@AI_CITYSTRATEGY_YIELD_DEFICIENT_@ ; `string'
PUBLIC	??_C@_0DB@GLEKLGPK@AI_CITYSTRATEGY_WANT_TILE_IMPROV@ ; `string'
PUBLIC	??_C@_0DD@NMOECHJD@AI_CITYSTRATEGY_NEED_TILE_IMPROV@ ; `string'
PUBLIC	??_C@_0CP@IJDENGIM@AI_CITYSTRATEGY_NEED_TILE_IMPROV@ ; `string'
PUBLIC	??_C@_0DD@KHGALNEK@AI_CITYSTRATEGY_NEED_TILE_IMPROV@ ; `string'
PUBLIC	??_C@_0CJ@DKCCCDNG@AI_CITYSTRATEGY_LARGE_CITY_POP_T@ ; `string'
PUBLIC	??_C@_0CK@GPIGKHN@AI_CITYSTRATEGY_MEDIUM_CITY_POP_@ ; `string'
PUBLIC	??_C@_0CJ@HGOBHHJP@AI_CITYSTRATEGY_SMALL_CITY_POP_T@ ; `string'
PUBLIC	??_C@_0DC@DOBJCOHL@AI_CITY_SPECIALIZATION_YIELD_NUM@ ; `string'
PUBLIC	??_C@_0CP@IGJNMNLB@AI_CITY_SPECIALIZATION_YIELD_WEI@ ; `string'
PUBLIC	??_C@_0DA@DLMIDEPF@AI_CITY_SPECIALIZATION_YIELD_WEI@ ; `string'
PUBLIC	??_C@_0CP@BKCEJLHJ@AI_CITY_SPECIALIZATION_YIELD_WEI@ ; `string'
PUBLIC	??_C@_0DH@CHFMPFPN@AI_CITY_SPECIALIZATION_SCIENCE_W@ ; `string'
PUBLIC	??_C@_0DF@COACCNLO@AI_CITY_SPECIALIZATION_SCIENCE_W@ ; `string'
PUBLIC	??_C@_0DA@IEIIINND@AI_CITY_SPECIALIZATION_GOLD_WEIG@ ; `string'
PUBLIC	??_C@_0CP@LPBKJGM@AI_CITY_SPECIALIZATION_GOLD_WEIG@ ; `string'
PUBLIC	??_C@_0DL@PICJMLCD@AI_CITY_SPECIALIZATION_PRODUCTIO@ ; `string'
PUBLIC	??_C@_0DH@DOLLFJFC@AI_CITY_SPECIALIZATION_PRODUCTIO@ ; `string'
PUBLIC	??_C@_0DK@EKNOCOCE@AI_CITY_SPECIALIZATION_PRODUCTIO@ ; `string'
PUBLIC	??_C@_0DH@GJEHOOOP@AI_CITY_SPECIALIZATION_PRODUCTIO@ ; `string'
PUBLIC	??_C@_0ED@PDMDENAP@AI_CITY_SPECIALIZATION_PRODUCTIO@ ; `string'
PUBLIC	??_C@_0DK@EHKADAJM@AI_CITY_SPECIALIZATION_PRODUCTIO@ ; `string'
PUBLIC	??_C@_0DI@DIMNKLBC@AI_CITY_SPECIALIZATION_PRODUCTIO@ ; `string'
PUBLIC	??_C@_0EB@EKBHHGJG@AI_CITY_SPECIALIZATION_PRODUCTIO@ ; `string'
PUBLIC	??_C@_0DI@NHBJLJKK@AI_CITY_SPECIALIZATION_PRODUCTIO@ ; `string'
PUBLIC	??_C@_0DK@KFLJDMEC@AI_CITY_SPECIALIZATION_PRODUCTIO@ ; `string'
PUBLIC	??_C@_0DK@LFCJKNAL@AI_CITY_SPECIALIZATION_PRODUCTIO@ ; `string'
PUBLIC	??_C@_0EF@HHBLGFHI@AI_CITY_SPECIALIZATION_PRODUCTIO@ ; `string'
PUBLIC	??_C@_0DD@NIDNKBB@AI_CITY_SPECIALIZATION_FOOD_WEIG@ ; `string'
PUBLIC	??_C@_0DA@KCIGIBHD@AI_CITY_SPECIALIZATION_FOOD_WEIG@ ; `string'
PUBLIC	??_C@_0CO@NKNKFGGP@AI_CITY_SPECIALIZATION_FOOD_WEIG@ ; `string'
PUBLIC	??_C@_0DN@IHJKGOBA@AI_CITY_SPECIALIZATION_FOOD_WEIG@ ; `string'
PUBLIC	??_C@_0DE@OHHJGNII@AI_CITY_SPECIALIZATION_FOOD_WEIG@ ; `string'
PUBLIC	??_C@_0CP@CMJEDJDL@AI_CITY_SPECIALIZATION_GENERAL_E@ ; `string'
PUBLIC	??_C@_0CN@JPOCDPNA@AI_CITY_SPECIALIZATION_REEVALUAT@ ; `string'
PUBLIC	??_C@_0CF@OOOEEHOO@AI_CITY_SPECIALIZATION_EARLIEST_@ ; `string'
PUBLIC	??_C@_0CH@ECHLHNGC@AI_MILITARY_CAPTURING_ORIGINAL_C@ ; `string'
PUBLIC	??_C@_0CB@LGLONFKM@AI_MILITARY_RECAPTURING_OWN_CITY@ ; `string'
PUBLIC	??_C@_0BM@OJDONADJ@AI_MILITARY_IGNORE_BAD_ODDS?$AA@ ; `string'
PUBLIC	??_C@_0CI@MJIOABEM@AI_MILITARY_BARBARIANS_FOR_MINOR@ ; `string'
PUBLIC	??_C@_0CH@JHHMADDN@AI_MILITARY_CITY_THREAT_WEIGHT_C@ ; `string'
PUBLIC	??_C@_0CI@LIJLIPEB@AI_STRATEGY_MILITARY_RESERVE_PER@ ; `string'
PUBLIC	??_C@_0CH@LBJHCEOK@AI_STRATEGY_DEFEND_MY_LANDS_BASE@ ; `string'
PUBLIC	??_C@_0CD@MAIHLIBL@AI_MILITARY_THREAT_WEIGHT_CRITIC@ ; `string'
PUBLIC	??_C@_0CB@DIMJKMHM@AI_MILITARY_THREAT_WEIGHT_SEVERE@ ; `string'
PUBLIC	??_C@_0CA@MMNMKFGH@AI_MILITARY_THREAT_WEIGHT_MAJOR?$AA@ ; `string'
PUBLIC	??_C@_0CA@HDMOHJPB@AI_MILITARY_THREAT_WEIGHT_MINOR?$AA@ ; `string'
PUBLIC	??_C@_0CG@IMMCEDME@BUILDER_TASKING_BASELINE_ADDS_CU@ ; `string'
PUBLIC	??_C@_0CH@IEAKJFHO@BUILDER_TASKING_BASELINE_SCRUB_F@ ; `string'
PUBLIC	??_C@_0CA@OLJBLMNP@BUILDER_TASKING_BASELINE_REPAIR?$AA@ ; `string'
PUBLIC	??_C@_0CG@HNBLODOE@BUILDER_TASKING_BASELINE_BUILD_R@ ; `string'
PUBLIC	??_C@_0DF@LBDGPFEF@BUILDER_TASKING_BASELINE_BUILD_R@ ; `string'
PUBLIC	??_C@_0CM@JDOMCDLP@BUILDER_TASKING_BASELINE_BUILD_I@ ; `string'
PUBLIC	??_C@_0CH@NIDGENCM@BUILDER_TASKING_DIRECTIVES_TO_EV@ ; `string'
PUBLIC	??_C@_0CF@PGHIHEDI@BUILDER_TASKING_BUILD_ROUTE_TEND@ ; `string'
PUBLIC	??_C@_0CK@NGGMHBBH@BUILDER_TASKING_IMPROVE_RESOURCE@ ; `string'
PUBLIC	??_C@_0DF@NFIMNIO@BUILDER_TASKING_PLOT_EVAL_MULTIP@ ; `string'
PUBLIC	??_C@_0CN@DCMDEKFA@BUILDER_TASKING_PLOT_EVAL_MULTIP@ ; `string'
PUBLIC	??_C@_0CN@NNMHOENH@BUILDER_TASKING_PLOT_EVAL_MULTIP@ ; `string'
PUBLIC	??_C@_0CK@IPPBBMDC@BUILDER_TASKING_PLOT_EVAL_MULTIP@ ; `string'
PUBLIC	??_C@_0DA@JCJDHOJH@BUILDER_TASKING_PLOT_EVAL_MULTIP@ ; `string'
PUBLIC	??_C@_0CK@LANHILNL@BUILDER_TASKING_PLOT_EVAL_MULTIP@ ; `string'
PUBLIC	??_C@_0CD@LHMJDODN@AI_GOLD_PRIORITY_BUYOUT_CITY_STA@ ; `string'
PUBLIC	??_C@_0CE@JLIGOAJ@AI_GOLD_PRIORITY_DEFENSIVE_BUILD@ ; `string'
PUBLIC	??_C@_0BG@BHDGPGBJ@AI_GOLD_PRIORITY_UNIT?$AA@	; `string'
PUBLIC	??_C@_0CM@JFCGHBOF@AI_GOLD_PRIORITY_DIPLOMACY_PER_F@ ; `string'
PUBLIC	??_C@_0CA@JHKLILDC@AI_GOLD_PRIORITY_DIPLOMACY_BASE?$AA@ ; `string'
PUBLIC	??_C@_0CK@DLCNKPGJ@AI_GOLD_PRIORITY_UPGRADE_PER_FLA@ ; `string'
PUBLIC	??_C@_0BO@LDECMLBF@AI_GOLD_PRIORITY_UPGRADE_BASE?$AA@ ; `string'
PUBLIC	??_C@_0CK@BHDCHEFJ@AI_GOLD_BALANCE_TO_HALVE_PLOT_BU@ ; `string'
PUBLIC	??_C@_0CI@JFAKMEIF@AI_GOLD_PRIORITY_MINIMUM_PLOT_BU@ ; `string'
PUBLIC	??_C@_0BL@KAKLDBNJ@AI_PLOT_VALUE_WEAK_DISPUTE?$AA@ ; `string'
PUBLIC	??_C@_0BN@DAPIMCGH@AI_PLOT_VALUE_STRONG_DISPUTE?$AA@ ; `string'
PUBLIC	??_C@_0BN@CPHHODO@AI_PLOT_VALUE_FIERCE_DISPUTE?$AA@ ; `string'
PUBLIC	??_C@_0CJ@FMPNDNMP@AI_PLOT_VALUE_DEFICIENT_YIELD_MU@ ; `string'
PUBLIC	??_C@_0BP@CJGLAFBC@AI_PLOT_VALUE_YIELD_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0CI@FCHKLDKN@AI_PLOT_VALUE_SPECIALIZATION_MUL@ ; `string'
PUBLIC	??_C@_0BO@HNDANNHG@AI_PLOT_VALUE_LUXURY_RESOURCE?$AA@ ; `string'
PUBLIC	??_C@_0CB@PMILMBIP@AI_PLOT_VALUE_STRATEGIC_RESOURCE@ ; `string'
PUBLIC	??_C@_0BI@JMFLLPMD@AI_BUY_PLOT_TEST_PROBES?$AA@	; `string'
PUBLIC	??_C@_0CF@OMPGEHHB@AI_STRATEGY_MINIMUM_SETTLE_FERTI@ ; `string'
PUBLIC	??_C@_0CB@IFHMNGOJ@AI_STRATEGY_AREA_IS_FULL_PERCENT@ ; `string'
PUBLIC	??_C@_0CO@CHHLLEMC@AI_STRATEGY_ISLAND_START_COAST_R@ ; `string'
PUBLIC	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z		; CvGlobals::getDefineFLOAT
PUBLIC	??_C@_0CI@NBFHMEID@AI_STRATEGY_NEED_IMPROVEMENT_CIT@ ; `string'
PUBLIC	??_C@_0CN@GMGIACCI@AI_STRATEGY_EARLY_EXPANSION_NUM_@ ; `string'
PUBLIC	??_C@_0DH@PKFMJPH@AI_STRATEGY_EARLY_EXPANSION_NUM_@ ; `string'
PUBLIC	??_C@_0DA@PHFEEGOJ@AI_STRATEGY_EARLY_EXPLORATION_WE@ ; `string'
PUBLIC	??_C@_0DH@HLDMJJOI@AI_STRATEGY_EARLY_EXPLORATION_EX@ ; `string'
PUBLIC	??_C@_0CO@FOEBLLJN@AI_STRATEGY_EARLY_EXPLORATION_ST@ ; `string'
PUBLIC	??_C@_0BL@BLPPKMLH@AI_GS_SS_TECH_PROGRESS_MOD?$AA@ ; `string'
PUBLIC	??_C@_0BM@MEHIMGGP@AI_GS_SS_HAS_APOLLO_PROGRAM?$AA@ ; `string'
PUBLIC	??_C@_0BK@PLOBEBDG@AI_GS_UN_SECURED_VOTE_MOD?$AA@ ; `string'
PUBLIC	??_C@_0DA@JKKNIIHP@AI_GRAND_STRATEGY_UN_EACH_MINOR_@ ; `string'
PUBLIC	??_C@_0CC@GFEMKHDG@AI_GS_CULTURE_INFLUENTIAL_CIV_MO@ ; `string'
PUBLIC	??_C@_0CD@BPFLIMCC@AI_GS_CULTURE_TOURISM_AHEAD_WEIG@ ; `string'
PUBLIC	??_C@_0BL@HLMCNNEN@AI_GS_CULTURE_AHEAD_WEIGHT?$AA@ ; `string'
PUBLIC	??_C@_0BP@BDIGPPPI@AI_GS_TOURISM_RATIO_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BP@JPMOHGO@AI_GS_CULTURE_RATIO_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0DG@PCCGGDN@AI_GRAND_STRATEGY_CONQUEST_WEIGH@ ; `string'
PUBLIC	??_C@_0DF@JDHMNJIF@AI_GRAND_STRATEGY_CONQUEST_WEIGH@ ; `string'
PUBLIC	??_C@_0DG@NJAHCFKB@AI_GRAND_STRATEGY_CONQUEST_WEIGH@ ; `string'
PUBLIC	??_C@_0DF@GAJMKNCF@AI_GRAND_STRATEGY_CONQUEST_WEIGH@ ; `string'
PUBLIC	??_C@_0CK@OCHIKJEC@AI_GRAND_STRATEGY_CONQUEST_CRAMP@ ; `string'
PUBLIC	??_C@_0DC@IAOMELPH@AI_GRAND_STRATEGY_CONQUEST_POWER@ ; `string'
PUBLIC	??_C@_0CM@MOHGLHDE@AI_GS_CONQUEST_MILITARY_STRENGTH@ ; `string'
PUBLIC	??_C@_0CJ@NAMHPPEP@AI_GRAND_STRATEGY_CONQUEST_AT_WA@ ; `string'
PUBLIC	??_C@_0CN@DICFAIGP@AI_GRAND_STRATEGY_CONQUEST_NOBOD@ ; `string'
PUBLIC	??_C@_0CF@ENGGCOEC@AI_GS_CONQUEST_NOBODY_MET_FIRST_@ ; `string'
PUBLIC	??_C@_0CO@LBHKCDMH@AI_GRAND_STRATEGY_OTHER_PLAYERS_@ ; `string'
PUBLIC	??_C@_0CJ@HKOMEGOL@AI_GRAND_STRATEGY_GUESS_LIKELY_T@ ; `string'
PUBLIC	??_C@_0CL@BJDBNIPA@AI_GRAND_STRATEGY_GUESS_POSITIVE@ ; `string'
PUBLIC	??_C@_0CH@DJHMMNME@AI_GRAND_STRATEGY_GUESS_NO_CLUE_@ ; `string'
PUBLIC	??_C@_0CK@EIJAGFHG@AI_GRAND_STRATEGY_CURRENT_STRATE@ ; `string'
PUBLIC	??_C@_0BA@JPHCCMJO@AI_GS_RAND_ROLL?$AA@		; `string'
PUBLIC	??_C@_0DE@CKDAPPFM@AI_GRAND_STRATEGY_NUM_TURNS_STRA@ ; `string'
PUBLIC	??_C@_0BO@HDEHHKLF@FLAVOR_EXPANDGROW_COEFFICIENT?$AA@ ; `string'
PUBLIC	??_C@_0BL@HGMCDCDN@FLAVOR_RANDOMIZATION_RANGE?$AA@ ; `string'
PUBLIC	??_C@_0BB@DAAALACJ@FLAVOR_MAX_VALUE?$AA@	; `string'
PUBLIC	??_C@_0BB@DBAMCKJN@FLAVOR_MIN_VALUE?$AA@	; `string'
PUBLIC	??_C@_0BN@EPAOOEJO@PERSONALITY_FLAVOR_MIN_VALUE?$AA@ ; `string'
PUBLIC	??_C@_0BN@EOACHOCK@PERSONALITY_FLAVOR_MAX_VALUE?$AA@ ; `string'
PUBLIC	??_C@_0BF@EAICOGBJ@DEFAULT_FLAVOR_VALUE?$AA@	; `string'
PUBLIC	??_C@_0BK@LAACNNNL@AI_VALUE_OF_YIELD_SCIENCE?$AA@ ; `string'
PUBLIC	??_C@_0BN@HOADDMBL@AI_VALUE_OF_YIELD_PRODUCTION?$AA@ ; `string'
PUBLIC	??_C@_0BH@JPLDDJCD@AI_VALUE_OF_YIELD_GOLD?$AA@	; `string'
PUBLIC	??_C@_0CC@BNOBOLDM@TECH_PRIORITY_MAYA_CALENDAR_BONU@ ; `string'
PUBLIC	??_C@_0BK@HHOBDBKO@TECH_PRIORITY_UNIQUE_ITEM?$AA@ ; `string'
PUBLIC	??_C@_0BP@HCPEDAP@TECH_WEIGHT_PROPAGATION_LEVELS?$AA@ ; `string'
PUBLIC	??_C@_0CA@BIFMEGPJ@TECH_WEIGHT_PROPAGATION_PERCENT?$AA@ ; `string'
PUBLIC	??_C@_0CG@MEMIHBMJ@POLICY_WEIGHT_PERCENT_DROP_NEW_B@ ; `string'
PUBLIC	??_C@_0CB@HIOFDMNL@POLICY_WEIGHT_PROPAGATION_LEVELS@ ; `string'
PUBLIC	??_C@_0CC@JJJNJKEL@POLICY_WEIGHT_PROPAGATION_PERCEN@ ; `string'
PUBLIC	??_C@_0CD@EHPMHLLG@AI_SHOULDNT_MANAGE_PLOT_ASSIGNME@ ; `string'
PUBLIC	??_C@_0BF@EEEGBGEH@AI_CAN_DISBAND_UNITS?$AA@	; `string'
PUBLIC	??_C@_0BL@NAJMKJJB@INITIAL_AI_CITY_PRODUCTION?$AA@ ; `string'
PUBLIC	??_C@_0CG@ENMFICBA@AI_ATTEMPT_RUSH_OVER_X_TURNS_TO_@ ; `string'
PUBLIC	??_C@_0BM@HKJPAJAD@NEW_SCORE_BELIEF_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0CA@HILAFNMD@NEW_SCORE_GREAT_WORK_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BM@IHBNJJI@NEW_SCORE_POLICY_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0CB@BCHJFJFP@NEW_SCORE_FUTURE_TECH_MULTIPLIER@ ; `string'
PUBLIC	??_C@_0BK@OHCPFPBP@NEW_SCORE_TECH_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0BM@INPKHAIG@NEW_SCORE_WONDER_MULTIPLIER?$AA@ ; `string'
PUBLIC	??_C@_0CA@MOBPPEHE@NEW_SCORE_POPULATION_MULTIPLIER?$AA@ ; `string'
PUBLIC	?getDefineINT@CvGlobals@@IAEHPBD_N@Z		; CvGlobals::getDefineINT
PUBLIC	??_C@_0BK@NDOKNJOD@NEW_SCORE_CITY_MULTIPLIER?$AA@ ; `string'
PUBLIC	?cacheGlobals@CvGlobals@@QAEXXZ			; CvGlobals::cacheGlobals
;	COMDAT ??_C@_0BE@DLGMMGNE@POLICY_BRANCH_ORDER?$AA@
CONST	SEGMENT
??_C@_0BE@DLGMMGNE@POLICY_BRANCH_ORDER?$AA@ DB 'POLICY_BRANCH_ORDER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FGGAJNOF@POLICY_BRANCH_AUTOCRACY?$AA@
CONST	SEGMENT
??_C@_0BI@FGGAJNOF@POLICY_BRANCH_AUTOCRACY?$AA@ DB 'POLICY_BRANCH_AUTOCRA'
	DB	'CY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ICDGHIK@POLICY_BRANCH_FREEDOM?$AA@
CONST	SEGMENT
??_C@_0BG@ICDGHIK@POLICY_BRANCH_FREEDOM?$AA@ DB 'POLICY_BRANCH_FREEDOM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BJMHFICB@IDEOLOGY_SCORE_FRIENDLY?$AA@
CONST	SEGMENT
??_C@_0BI@BJMHFICB@IDEOLOGY_SCORE_FRIENDLY?$AA@ DB 'IDEOLOGY_SCORE_FRIEND'
	DB	'LY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PKJLIP@IDEOLOGY_SCORE_AFRAID?$AA@
CONST	SEGMENT
??_C@_0BG@PKJLIP@IDEOLOGY_SCORE_AFRAID?$AA@ DB 'IDEOLOGY_SCORE_AFRAID', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CIOBEOHC@IDEOLOGY_SCORE_GUARDED?$AA@
CONST	SEGMENT
??_C@_0BH@CIOBEOHC@IDEOLOGY_SCORE_GUARDED?$AA@ DB 'IDEOLOGY_SCORE_GUARDED'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BHJBBLHN@IDEOLOGY_SCORE_HOSTILE?$AA@
CONST	SEGMENT
??_C@_0BH@BHJBBLHN@IDEOLOGY_SCORE_HOSTILE?$AA@ DB 'IDEOLOGY_SCORE_HOSTILE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PKOAKDAK@IDEOLOGY_SCORE_PER_FREE_TENET?$AA@
CONST	SEGMENT
??_C@_0BO@PKOAKDAK@IDEOLOGY_SCORE_PER_FREE_TENET?$AA@ DB 'IDEOLOGY_SCORE_'
	DB	'PER_FREE_TENET', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CHFKOMLK@IDEOLOGY_SCORE_HAPPINESS?$AA@
CONST	SEGMENT
??_C@_0BJ@CHFKOMLK@IDEOLOGY_SCORE_HAPPINESS?$AA@ DB 'IDEOLOGY_SCORE_HAPPI'
	DB	'NESS', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HOLOODP@IDEOLOGY_SCORE_GRAND_STRATS?$AA@
CONST	SEGMENT
??_C@_0BM@HOLOODP@IDEOLOGY_SCORE_GRAND_STRATS?$AA@ DB 'IDEOLOGY_SCORE_GRA'
	DB	'ND_STRATS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BAFHEOJE@IDEOLOGY_PERCENT_CLEAR_VICTORY_P@
CONST	SEGMENT
??_C@_0CE@BAFHEOJE@IDEOLOGY_PERCENT_CLEAR_VICTORY_P@ DB 'IDEOLOGY_PERCENT'
	DB	'_CLEAR_VICTORY_PREF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DKIMIFHP@PROMOTION_GOODY_HUT_PICKER?$AA@
CONST	SEGMENT
??_C@_0BL@DKIMIFHP@PROMOTION_GOODY_HUT_PICKER?$AA@ DB 'PROMOTION_GOODY_HU'
	DB	'T_PICKER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CDJDBNFO@ESPIONAGE_COUP_OTHER_PLAYERS_INF@
CONST	SEGMENT
??_C@_0CM@CDJDBNFO@ESPIONAGE_COUP_OTHER_PLAYERS_INF@ DB 'ESPIONAGE_COUP_O'
	DB	'THER_PLAYERS_INFLUENCE_DROP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LHOAEEJP@ESPIONAGE_SURVEILLANCE_SIGHT_RAN@
CONST	SEGMENT
??_C@_0CD@LHOAEEJP@ESPIONAGE_SURVEILLANCE_SIGHT_RAN@ DB 'ESPIONAGE_SURVEI'
	DB	'LLANCE_SIGHT_RANGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LHFPPCKD@ESPIONAGE_INFLUENCE_LOST_FOR_RIG@
CONST	SEGMENT
??_C@_0CN@LHFPPCKD@ESPIONAGE_INFLUENCE_LOST_FOR_RIG@ DB 'ESPIONAGE_INFLUE'
	DB	'NCE_LOST_FOR_RIGGED_ELECTION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@DJOCGGCB@ESPIONAGE_INFLUENCE_GAINED_FOR_R@
CONST	SEGMENT
??_C@_0CP@DJOCGGCB@ESPIONAGE_INFLUENCE_GAINED_FOR_R@ DB 'ESPIONAGE_INFLUE'
	DB	'NCE_GAINED_FOR_RIGGED_ELECTION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@HMNGJMNK@ESPIONAGE_TURNS_BETWEEN_CITY_STA@
CONST	SEGMENT
??_C@_0CN@HMNGJMNK@ESPIONAGE_TURNS_BETWEEN_CITY_STA@ DB 'ESPIONAGE_TURNS_'
	DB	'BETWEEN_CITY_STATE_ELECTIONS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BPFMDNJN@ESPIONAGE_GATHERING_INTEL_RATE_B@
CONST	SEGMENT
??_C@_0CM@BPFMDNJN@ESPIONAGE_GATHERING_INTEL_RATE_B@ DB 'ESPIONAGE_GATHER'
	DB	'ING_INTEL_RATE_BASE_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@IHHPHPHE@ESPIONAGE_GATHERING_INTEL_RATE_B@
CONST	SEGMENT
??_C@_0DD@IHHPHPHE@ESPIONAGE_GATHERING_INTEL_RATE_B@ DB 'ESPIONAGE_GATHER'
	DB	'ING_INTEL_RATE_BY_SPY_RANK_PERCENT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PCGCEIKA@ESPIONAGE_GATHERING_INTEL_COST_P@
CONST	SEGMENT
??_C@_0CH@PCGCEIKA@ESPIONAGE_GATHERING_INTEL_COST_P@ DB 'ESPIONAGE_GATHER'
	DB	'ING_INTEL_COST_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BEHHGHED@RELIGION_DIPLO_HIT_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BN@BEHHGHED@RELIGION_DIPLO_HIT_THRESHOLD?$AA@ DB 'RELIGION_DIPLO_H'
	DB	'IT_THRESHOLD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BMMEGNPE@RELIGION_DIPLO_HIT_CONVERT_HOLY_@
CONST	SEGMENT
??_C@_0CF@BMMEGNPE@RELIGION_DIPLO_HIT_CONVERT_HOLY_@ DB 'RELIGION_DIPLO_H'
	DB	'IT_CONVERT_HOLY_CITY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@LJMNDKMC@RELIGION_DIPLO_HIT_RELIGIOUS_FLI@
CONST	SEGMENT
??_C@_0DA@LJMNDKMC@RELIGION_DIPLO_HIT_RELIGIOUS_FLI@ DB 'RELIGION_DIPLO_H'
	DB	'IT_RELIGIOUS_FLIP_FRIENDLY_CITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KKMFAFIP@RELIGION_DIPLO_HIT_INITIAL_CONVE@
CONST	SEGMENT
??_C@_0DB@KKMFAFIP@RELIGION_DIPLO_HIT_INITIAL_CONVE@ DB 'RELIGION_DIPLO_H'
	DB	'IT_INITIAL_CONVERT_FRIENDLY_CITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CLPPGEEO@RELIGION_ADJACENT_CITY_DISTANCE?$AA@
CONST	SEGMENT
??_C@_0CA@CLPPGEEO@RELIGION_ADJACENT_CITY_DISTANCE?$AA@ DB 'RELIGION_ADJA'
	DB	'CENT_CITY_DISTANCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JPKIAKNB@RELIGION_MISSIONARY_PRESSURE_MUL@
CONST	SEGMENT
??_C@_0CI@JPKIAKNB@RELIGION_MISSIONARY_PRESSURE_MUL@ DB 'RELIGION_MISSION'
	DB	'ARY_PRESSURE_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LPDIIAGI@RELIGION_PER_TURN_FOUNDING_CITY_@
CONST	SEGMENT
??_C@_0CJ@LPDIIAGI@RELIGION_PER_TURN_FOUNDING_CITY_@ DB 'RELIGION_PER_TUR'
	DB	'N_FOUNDING_CITY_PRESSURE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@MNOPDPG@RELIGION_INITIAL_FOUNDING_CITY_P@
CONST	SEGMENT
??_C@_0CI@MNOPDPG@RELIGION_INITIAL_FOUNDING_CITY_P@ DB 'RELIGION_INITIAL_'
	DB	'FOUNDING_CITY_PRESSURE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NCEGLGPI@RELIGION_ATHEISM_PRESSURE_PER_PO@
CONST	SEGMENT
??_C@_0CC@NCEGLGPI@RELIGION_ATHEISM_PRESSURE_PER_PO@ DB 'RELIGION_ATHEISM'
	DB	'_PRESSURE_PER_POP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@COCOCFDB@RELIGION_BASE_CHANCE_PROPHET_SPA@
CONST	SEGMENT
??_C@_0CD@COCOCFDB@RELIGION_BASE_CHANCE_PROPHET_SPA@ DB 'RELIGION_BASE_CH'
	DB	'ANCE_PROPHET_SPAWN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BGOAOAAC@RELIGION_FAITH_DELTA_NEXT_GREAT_@
CONST	SEGMENT
??_C@_0CH@BGOAOAAC@RELIGION_FAITH_DELTA_NEXT_GREAT_@ DB 'RELIGION_FAITH_D'
	DB	'ELTA_NEXT_GREAT_PERSON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MHONFOIF@RELIGION_FAITH_DELTA_NEXT_PROPHE@
CONST	SEGMENT
??_C@_0CC@MHONFOIF@RELIGION_FAITH_DELTA_NEXT_PROPHE@ DB 'RELIGION_FAITH_D'
	DB	'ELTA_NEXT_PROPHET', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@POMFFJMB@RELIGION_GAME_FAITH_DELTA_NEXT_P@
CONST	SEGMENT
??_C@_0CI@POMFFJMB@RELIGION_GAME_FAITH_DELTA_NEXT_P@ DB 'RELIGION_GAME_FA'
	DB	'ITH_DELTA_NEXT_PANTHEON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@OKKNMCKG@RELIGION_MIN_FAITH_FIRST_GREAT_P@
CONST	SEGMENT
??_C@_0CG@OKKNMCKG@RELIGION_MIN_FAITH_FIRST_GREAT_P@ DB 'RELIGION_MIN_FAI'
	DB	'TH_FIRST_GREAT_PERSON', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GLMNAIGF@RELIGION_MIN_FAITH_FIRST_PROPHET@
CONST	SEGMENT
??_C@_0CB@GLMNAIGF@RELIGION_MIN_FAITH_FIRST_PROPHET@ DB 'RELIGION_MIN_FAI'
	DB	'TH_FIRST_PROPHET', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@IMOIAJKP@RELIGION_MIN_FAITH_FIRST_PANTHEO@
CONST	SEGMENT
??_C@_0CC@IMOIAJKP@RELIGION_MIN_FAITH_FIRST_PANTHEO@ DB 'RELIGION_MIN_FAI'
	DB	'TH_FIRST_PANTHEON', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LJIHCLCH@COMBAT_CAPTURE_RATIO_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0CA@LJIHCLCH@COMBAT_CAPTURE_RATIO_MULTIPLIER?$AA@ DB 'COMBAT_CAPTUR'
	DB	'E_RATIO_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DEPPMCHG@COMBAT_CAPTURE_MAX_CHANCE?$AA@
CONST	SEGMENT
??_C@_0BK@DEPPMCHG@COMBAT_CAPTURE_MAX_CHANCE?$AA@ DB 'COMBAT_CAPTURE_MAX_'
	DB	'CHANCE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PIPCLJHJ@COMBAT_CAPTURE_MIN_CHANCE?$AA@
CONST	SEGMENT
??_C@_0BK@PIPCLJHJ@COMBAT_CAPTURE_MIN_CHANCE?$AA@ DB 'COMBAT_CAPTURE_MIN_'
	DB	'CHANCE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NOILFINA@COMBAT_CAPTURE_HEALTH?$AA@
CONST	SEGMENT
??_C@_0BG@NOILFINA@COMBAT_CAPTURE_HEALTH?$AA@ DB 'COMBAT_CAPTURE_HEALTH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JCIDAIBH@PROMOTION_UNWELCOME_EVANGELIST?$AA@
CONST	SEGMENT
??_C@_0BP@JCIDAIBH@PROMOTION_UNWELCOME_EVANGELIST?$AA@ DB 'PROMOTION_UNWE'
	DB	'LCOME_EVANGELIST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FCCCKKMB@PROMOTION_ONLY_DEFENSIVE?$AA@
CONST	SEGMENT
??_C@_0BJ@FCCCKKMB@PROMOTION_ONLY_DEFENSIVE?$AA@ DB 'PROMOTION_ONLY_DEFEN'
	DB	'SIVE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FOCKKOCB@WALLS_BUILDINGCLASS?$AA@
CONST	SEGMENT
??_C@_0BE@FOCKKOCB@WALLS_BUILDINGCLASS?$AA@ DB 'WALLS_BUILDINGCLASS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OAFPPEOG@BARBARIAN_CAMP_IMPROVEMENT?$AA@
CONST	SEGMENT
??_C@_0BL@OAFPPEOG@BARBARIAN_CAMP_IMPROVEMENT?$AA@ DB 'BARBARIAN_CAMP_IMP'
	DB	'ROVEMENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NNNHGKNK@AI_HANDICAP?$AA@
CONST	SEGMENT
??_C@_0M@NNNHGKNK@AI_HANDICAP?$AA@ DB 'AI_HANDICAP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OHDFOIK@PROMOTION_OCEAN_IMPASSABLE?$AA@
CONST	SEGMENT
??_C@_0BL@OHDFOIK@PROMOTION_OCEAN_IMPASSABLE?$AA@ DB 'PROMOTION_OCEAN_IMP'
	DB	'ASSABLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PCMBHODK@PROMOTION_OCEAN_IMPASSABLE_UNTIL@
CONST	SEGMENT
??_C@_0CL@PCMBHODK@PROMOTION_OCEAN_IMPASSABLE_UNTIL@ DB 'PROMOTION_OCEAN_'
	DB	'IMPASSABLE_UNTIL_ASTRONOMY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LDIOBKDI@PROMOTION_ALLWATER_EMBARKATION?$AA@
CONST	SEGMENT
??_C@_0BP@LDIOBKDI@PROMOTION_ALLWATER_EMBARKATION?$AA@ DB 'PROMOTION_ALLW'
	DB	'ATER_EMBARKATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IFKPDLFA@PROMOTION_DEFENSIVE_EMBARKATION?$AA@
CONST	SEGMENT
??_C@_0CA@IFKPDLFA@PROMOTION_DEFENSIVE_EMBARKATION?$AA@ DB 'PROMOTION_DEF'
	DB	'ENSIVE_EMBARKATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KNKLFEIM@PROMOTION_EMBARKATION?$AA@
CONST	SEGMENT
??_C@_0BG@KNKLFEIM@PROMOTION_EMBARKATION?$AA@ DB 'PROMOTION_EMBARKATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NKGDNPEG@MINOR_CIVILIZATION?$AA@
CONST	SEGMENT
??_C@_0BD@NKGDNPEG@MINOR_CIVILIZATION?$AA@ DB 'MINOR_CIVILIZATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JEJEOMLM@MINOR_CIV_HANDICAP?$AA@
CONST	SEGMENT
??_C@_0BD@JEJEOMLM@MINOR_CIV_HANDICAP?$AA@ DB 'MINOR_CIV_HANDICAP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BMMDEOOP@BARBARIAN_LEADER?$AA@
CONST	SEGMENT
??_C@_0BB@BMMDEOOP@BARBARIAN_LEADER?$AA@ DB 'BARBARIAN_LEADER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NBDMLEBD@BARBARIAN_CIVILIZATION?$AA@
CONST	SEGMENT
??_C@_0BH@NBDMLEBD@BARBARIAN_CIVILIZATION?$AA@ DB 'BARBARIAN_CIVILIZATION'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IBNKNHDA@BARBARIAN_HANDICAP?$AA@
CONST	SEGMENT
??_C@_0BD@IBNKNHDA@BARBARIAN_HANDICAP?$AA@ DB 'BARBARIAN_HANDICAP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GKHLNFHC@STANDARD_CALENDAR?$AA@
CONST	SEGMENT
??_C@_0BC@GKHLNFHC@STANDARD_CALENDAR?$AA@ DB 'STANDARD_CALENDAR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FMNFIIEB@LAST_BRIDGE_ART_ERA?$AA@
CONST	SEGMENT
??_C@_0BE@FMNFIIEB@LAST_BRIDGE_ART_ERA?$AA@ DB 'LAST_BRIDGE_ART_ERA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FLMMHODD@LAST_UNIT_ART_ERA?$AA@
CONST	SEGMENT
??_C@_0BC@FLMMHODD@LAST_UNIT_ART_ERA?$AA@ DB 'LAST_UNIT_ART_ERA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EJPAJPEI@LAST_EMBARK_ART_ERA?$AA@
CONST	SEGMENT
??_C@_0BE@EJPAJPEI@LAST_EMBARK_ART_ERA?$AA@ DB 'LAST_EMBARK_ART_ERA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DKBKCGJO@STANDARD_ERA?$AA@
CONST	SEGMENT
??_C@_0N@DKBKCGJO@STANDARD_ERA?$AA@ DB 'STANDARD_ERA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FKKBJAPH@STANDARD_SEALEVEL?$AA@
CONST	SEGMENT
??_C@_0BC@FKKBJAPH@STANDARD_SEALEVEL?$AA@ DB 'STANDARD_SEALEVEL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CMGHPLCK@STANDARD_WORLD_SIZE?$AA@
CONST	SEGMENT
??_C@_0BE@CMGHPLCK@STANDARD_WORLD_SIZE?$AA@ DB 'STANDARD_WORLD_SIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GPNDHNFJ@STANDARD_CLIMATE?$AA@
CONST	SEGMENT
??_C@_0BB@GPNDHNFJ@STANDARD_CLIMATE?$AA@ DB 'STANDARD_CLIMATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GAOGEFBN@STANDARD_TURNTIMER?$AA@
CONST	SEGMENT
??_C@_0BD@GAOGEFBN@STANDARD_TURNTIMER?$AA@ DB 'STANDARD_TURNTIMER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FDBGEDIF@STANDARD_GAMESPEED?$AA@
CONST	SEGMENT
??_C@_0BD@FDBGEDIF@STANDARD_GAMESPEED?$AA@ DB 'STANDARD_GAMESPEED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DHLPNDIC@STANDARD_HANDICAP_QUICK?$AA@
CONST	SEGMENT
??_C@_0BI@DHLPNDIC@STANDARD_HANDICAP_QUICK?$AA@ DB 'STANDARD_HANDICAP_QUI'
	DB	'CK', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NABKNOLL@MULTIPLAYER_HANDICAP?$AA@
CONST	SEGMENT
??_C@_0BF@NABKNOLL@MULTIPLAYER_HANDICAP?$AA@ DB 'MULTIPLAYER_HANDICAP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KJCMAPAI@STANDARD_HANDICAP?$AA@
CONST	SEGMENT
??_C@_0BC@KJCMAPAI@STANDARD_HANDICAP?$AA@ DB 'STANDARD_HANDICAP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OHIIGMAA@INITIAL_CITY_ROUTE_TYPE?$AA@
CONST	SEGMENT
??_C@_0BI@OHIIGMAA@INITIAL_CITY_ROUTE_TYPE?$AA@ DB 'INITIAL_CITY_ROUTE_TY'
	DB	'PE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BNOKDDGC@MANHATTAN_PROJECT?$AA@
CONST	SEGMENT
??_C@_0BC@BNOKDDGC@MANHATTAN_PROJECT?$AA@ DB 'MANHATTAN_PROJECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GKIPHEKK@SPACESHIP_ENGINE?$AA@
CONST	SEGMENT
??_C@_0BB@GKIPHEKK@SPACESHIP_ENGINE?$AA@ DB 'SPACESHIP_ENGINE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GFPPBNKK@SPACESHIP_STASIS?$AA@
CONST	SEGMENT
??_C@_0BB@GFPPBNKK@SPACESHIP_STASIS?$AA@ DB 'SPACESHIP_STASIS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OLPBECEM@SPACESHIP_BOOSTER?$AA@
CONST	SEGMENT
??_C@_0BC@OLPBECEM@SPACESHIP_BOOSTER?$AA@ DB 'SPACESHIP_BOOSTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DHAKFBLN@SPACESHIP_CAPSULE?$AA@
CONST	SEGMENT
??_C@_0BC@DHAKFBLN@SPACESHIP_CAPSULE?$AA@ DB 'SPACESHIP_CAPSULE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FJGGDLOI@SPACE_RACE_TRIGGER_PROJECT?$AA@
CONST	SEGMENT
??_C@_0BL@FJGGDLOI@SPACE_RACE_TRIGGER_PROJECT?$AA@ DB 'SPACE_RACE_TRIGGER'
	DB	'_PROJECT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EBPACKLL@DEFAULT_SPECIALIST?$AA@
CONST	SEGMENT
??_C@_0BD@EBPACKLL@DEFAULT_SPECIALIST?$AA@ DB 'DEFAULT_SPECIALIST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MKLPHHBA@CAPITAL_BUILDINGCLASS?$AA@
CONST	SEGMENT
??_C@_0BG@MKLPHHBA@CAPITAL_BUILDINGCLASS?$AA@ DB 'CAPITAL_BUILDINGCLASS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OFLDHDKK@HIDDEN_ARTIFACT_RESOURCE?$AA@
CONST	SEGMENT
??_C@_0BJ@OFLDHDKK@HIDDEN_ARTIFACT_RESOURCE?$AA@ DB 'HIDDEN_ARTIFACT_RESO'
	DB	'URCE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FCNLHBCH@ARTIFACT_RESOURCE?$AA@
CONST	SEGMENT
??_C@_0BC@FCNLHBCH@ARTIFACT_RESOURCE?$AA@ DB 'ARTIFACT_RESOURCE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NNJKEKOK@NUKE_FEATURE?$AA@
CONST	SEGMENT
??_C@_0N@NNJKEKOK@NUKE_FEATURE?$AA@ DB 'NUKE_FEATURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EELFNCN@RUINS_IMPROVEMENT?$AA@
CONST	SEGMENT
??_C@_0BC@EELFNCN@RUINS_IMPROVEMENT?$AA@ DB 'RUINS_IMPROVEMENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KPDNLNOC@SHALLOW_WATER_TERRAIN?$AA@
CONST	SEGMENT
??_C@_0BG@KPDNLNOC@SHALLOW_WATER_TERRAIN?$AA@ DB 'SHALLOW_WATER_TERRAIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DICGPMDI@DEEP_WATER_TERRAIN?$AA@
CONST	SEGMENT
??_C@_0BD@DICGPMDI@DEEP_WATER_TERRAIN?$AA@ DB 'DEEP_WATER_TERRAIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DECNAIAP@LAND_TERRAIN?$AA@
CONST	SEGMENT
??_C@_0N@DECNAIAP@LAND_TERRAIN?$AA@ DB 'LAND_TERRAIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OLIDDOKA@LEAGUE_PROJECT_REWARD_TIER_2_THR@
CONST	SEGMENT
??_C@_0CH@OLIDDOKA@LEAGUE_PROJECT_REWARD_TIER_2_THR@ DB 'LEAGUE_PROJECT_R'
	DB	'EWARD_TIER_2_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JMBNOMFA@LEAGUE_PROJECT_REWARD_TIER_1_THR@
CONST	SEGMENT
??_C@_0CH@JMBNOMFA@LEAGUE_PROJECT_REWARD_TIER_1_THR@ DB 'LEAGUE_PROJECT_R'
	DB	'EWARD_TIER_1_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CAHCOHLD@LEAGUE_MEMBER_VOTES_PER_CITY_STA@
CONST	SEGMENT
??_C@_0CI@CAHCOHLD@LEAGUE_MEMBER_VOTES_PER_CITY_STA@ DB 'LEAGUE_MEMBER_VO'
	DB	'TES_PER_CITY_STATE_ALLY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MBPEPHHC@LEAGUE_MEMBER_VOTES_FOR_HOST?$AA@
CONST	SEGMENT
??_C@_0BN@MBPEPHHC@LEAGUE_MEMBER_VOTES_FOR_HOST?$AA@ DB 'LEAGUE_MEMBER_VO'
	DB	'TES_FOR_HOST', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EPKMOCLI@LEAGUE_MEMBER_VOTES_BASE?$AA@
CONST	SEGMENT
??_C@_0BJ@EPKMOCLI@LEAGUE_MEMBER_VOTES_BASE?$AA@ DB 'LEAGUE_MEMBER_VOTES_'
	DB	'BASE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@POMMHHLM@LEAGUE_MEMBER_PROPOSALS_BASE?$AA@
CONST	SEGMENT
??_C@_0BN@POMMHHLM@LEAGUE_MEMBER_PROPOSALS_BASE?$AA@ DB 'LEAGUE_MEMBER_PR'
	DB	'OPOSALS_BASE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DCFLFNCB@LEAGUE_SESSION_SOON_WARNING_TURN@
CONST	SEGMENT
??_C@_0CC@DCFLFNCB@LEAGUE_SESSION_SOON_WARNING_TURN@ DB 'LEAGUE_SESSION_S'
	DB	'OON_WARNING_TURNS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JNIAGOP@LEAGUE_SESSION_INTERVAL_BASE_TUR@
CONST	SEGMENT
??_C@_0CD@JNIAGOP@LEAGUE_SESSION_INTERVAL_BASE_TUR@ DB 'LEAGUE_SESSION_IN'
	DB	'TERVAL_BASE_TURNS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NLCMDPLM@TEMPORARY_TOURISM_BOOST_MOD?$AA@
CONST	SEGMENT
??_C@_0BM@NLCMDPLM@TEMPORARY_TOURISM_BOOST_MOD?$AA@ DB 'TEMPORARY_TOURISM'
	DB	'_BOOST_MOD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LPKHMJGM@TEMPORARY_CULTURE_BOOST_MOD?$AA@
CONST	SEGMENT
??_C@_0BM@LPKHMJGM@TEMPORARY_CULTURE_BOOST_MOD?$AA@ DB 'TEMPORARY_CULTURE'
	DB	'_BOOST_MOD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MOMAGJPH@EXOTIC_GOODS_XP_MAX?$AA@
CONST	SEGMENT
??_C@_0BE@MOMAGJPH@EXOTIC_GOODS_XP_MAX?$AA@ DB 'EXOTIC_GOODS_XP_MAX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NMELINJI@EXOTIC_GOODS_XP_MIN?$AA@
CONST	SEGMENT
??_C@_0BE@NMELINJI@EXOTIC_GOODS_XP_MIN?$AA@ DB 'EXOTIC_GOODS_XP_MIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HDGFKHBP@EXOTIC_GOODS_GOLD_MAX?$AA@
CONST	SEGMENT
??_C@_0BG@HDGFKHBP@EXOTIC_GOODS_GOLD_MAX?$AA@ DB 'EXOTIC_GOODS_GOLD_MAX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GBOOEDHA@EXOTIC_GOODS_GOLD_MIN?$AA@
CONST	SEGMENT
??_C@_0BG@GBOOEDHA@EXOTIC_GOODS_GOLD_MIN?$AA@ DB 'EXOTIC_GOODS_GOLD_MIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JGDGPAOM@SAPPER_BONUS_RANGE?$AA@
CONST	SEGMENT
??_C@_0BD@JGDGPAOM@SAPPER_BONUS_RANGE?$AA@ DB 'SAPPER_BONUS_RANGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IDEDHKOI@SAPPED_CITY_ATTACK_MODIFIER?$AA@
CONST	SEGMENT
??_C@_0BM@IDEDHKOI@SAPPED_CITY_ATTACK_MODIFIER?$AA@ DB 'SAPPED_CITY_ATTAC'
	DB	'K_MODIFIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DMDPEMGM@PERCENT_HIDDEN_SITES_WRITING?$AA@
CONST	SEGMENT
??_C@_0BN@DMDPEMGM@PERCENT_HIDDEN_SITES_WRITING?$AA@ DB 'PERCENT_HIDDEN_S'
	DB	'ITES_WRITING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CHKNEKBO@PERCENT_SITES_HIDDEN?$AA@
CONST	SEGMENT
??_C@_0BF@CHKNEKBO@PERCENT_SITES_HIDDEN?$AA@ DB 'PERCENT_SITES_HIDDEN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HCKPFFFO@MAX_DIG_SITES_PER_MAJOR_CIV?$AA@
CONST	SEGMENT
??_C@_0BM@HCKPFFFO@MAX_DIG_SITES_PER_MAJOR_CIV?$AA@ DB 'MAX_DIG_SITES_PER'
	DB	'_MAJOR_CIV', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CFKBAFBN@MIN_DIG_SITES_PER_MAJOR_CIV?$AA@
CONST	SEGMENT
??_C@_0BM@CFKBAFBN@MIN_DIG_SITES_PER_MAJOR_CIV?$AA@ DB 'MIN_DIG_SITES_PER'
	DB	'_MAJOR_CIV', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FBBOOHPK@CULTURE_LEVEL_DOMINANT?$AA@
CONST	SEGMENT
??_C@_0BH@FBBOOHPK@CULTURE_LEVEL_DOMINANT?$AA@ DB 'CULTURE_LEVEL_DOMINANT'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KACDDHKO@CULTURE_LEVEL_INFLUENTIAL?$AA@
CONST	SEGMENT
??_C@_0BK@KACDDHKO@CULTURE_LEVEL_INFLUENTIAL?$AA@ DB 'CULTURE_LEVEL_INFLU'
	DB	'ENTIAL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CDGJEBN@CULTURE_LEVEL_POPULAR?$AA@
CONST	SEGMENT
??_C@_0BG@CDGJEBN@CULTURE_LEVEL_POPULAR?$AA@ DB 'CULTURE_LEVEL_POPULAR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IIBAEGHK@CULTURE_LEVEL_FAMILIAR?$AA@
CONST	SEGMENT
??_C@_0BH@IIBAEGHK@CULTURE_LEVEL_FAMILIAR?$AA@ DB 'CULTURE_LEVEL_FAMILIAR'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JLKGGBAO@CULTURE_LEVEL_EXOTIC?$AA@
CONST	SEGMENT
??_C@_0BF@JLKGGBAO@CULTURE_LEVEL_EXOTIC?$AA@ DB 'CULTURE_LEVEL_EXOTIC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OABGJOCA@MINIUMUM_TOURISM_BLAST_STRENGTH?$AA@
CONST	SEGMENT
??_C@_0CA@OABGJOCA@MINIUMUM_TOURISM_BLAST_STRENGTH?$AA@ DB 'MINIUMUM_TOUR'
	DB	'ISM_BLAST_STRENGTH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OHKIPNG@TOURISM_MODIFIER_DIPLOMAT?$AA@
CONST	SEGMENT
??_C@_0BK@OHKIPNG@TOURISM_MODIFIER_DIPLOMAT?$AA@ DB 'TOURISM_MODIFIER_DIP'
	DB	'LOMAT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MJKPJEKM@TOURISM_MODIFIER_DIFFERENT_IDEOL@
CONST	SEGMENT
??_C@_0CG@MJKPJEKM@TOURISM_MODIFIER_DIFFERENT_IDEOL@ DB 'TOURISM_MODIFIER'
	DB	'_DIFFERENT_IDEOLOGIES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HKIDLMKL@TOURISM_MODIFIER_OPEN_BORDERS?$AA@
CONST	SEGMENT
??_C@_0BO@HKIDLMKL@TOURISM_MODIFIER_OPEN_BORDERS?$AA@ DB 'TOURISM_MODIFIE'
	DB	'R_OPEN_BORDERS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JOCPDGKC@TOURISM_MODIFIER_TRADE_ROUTE?$AA@
CONST	SEGMENT
??_C@_0BN@JOCPDGKC@TOURISM_MODIFIER_TRADE_ROUTE?$AA@ DB 'TOURISM_MODIFIER'
	DB	'_TRADE_ROUTE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GLEENINB@TOURISM_MODIFIER_SHARED_RELIGION@
CONST	SEGMENT
??_C@_0CB@GLEENINB@TOURISM_MODIFIER_SHARED_RELIGION@ DB 'TOURISM_MODIFIER'
	DB	'_SHARED_RELIGION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IFDFHGID@BASE_TOURISM_PER_GREAT_WORK?$AA@
CONST	SEGMENT
??_C@_0BM@IFDFHGID@BASE_TOURISM_PER_GREAT_WORK?$AA@ DB 'BASE_TOURISM_PER_'
	DB	'GREAT_WORK', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EDDMBKGD@BASE_CULTURE_PER_GREAT_WORK?$AA@
CONST	SEGMENT
??_C@_0BM@EDDMBKGD@BASE_CULTURE_PER_GREAT_WORK?$AA@ DB 'BASE_CULTURE_PER_'
	DB	'GREAT_WORK', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@IFHBIFKF@UNRESEARCHED_TECH_BONUS_FROM_KIL@
CONST	SEGMENT
??_C@_0CN@IFHBIFKF@UNRESEARCHED_TECH_BONUS_FROM_KIL@ DB 'UNRESEARCHED_TEC'
	DB	'H_BONUS_FROM_KILLS_INTERCEPT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GDHKGPJK@UNRESEARCHED_TECH_BONUS_FROM_KIL@
CONST	SEGMENT
??_C@_0CJ@GDHKGPJK@UNRESEARCHED_TECH_BONUS_FROM_KIL@ DB 'UNRESEARCHED_TEC'
	DB	'H_BONUS_FROM_KILLS_SLOPE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KDJDBJKK@CITY_CONNECTIONS_CONNECT_TO_CAPI@
CONST	SEGMENT
??_C@_0CE@KDJDBJKK@CITY_CONNECTIONS_CONNECT_TO_CAPI@ DB 'CITY_CONNECTIONS'
	DB	'_CONNECT_TO_CAPITAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GFMIBEAG@PILLAGE_HEAL_AMOUNT?$AA@
CONST	SEGMENT
??_C@_0BE@GFMIBEAG@PILLAGE_HEAL_AMOUNT?$AA@ DB 'PILLAGE_HEAL_AMOUNT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GHNHLDID@INTERNATIONAL_TRADE_CITY_GPT_DIV@
CONST	SEGMENT
??_C@_0CF@GHNHLDID@INTERNATIONAL_TRADE_CITY_GPT_DIV@ DB 'INTERNATIONAL_TR'
	DB	'ADE_CITY_GPT_DIVISOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NPGGNEI@INTERNATIONAL_TRADE_EXCLUSIVE_CO@
CONST	SEGMENT
??_C@_0CJ@NPGGNEI@INTERNATIONAL_TRADE_EXCLUSIVE_CO@ DB 'INTERNATIONAL_TRA'
	DB	'DE_EXCLUSIVE_CONNECTION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IBEBABHD@INTERNATIONAL_TRADE_BASE?$AA@
CONST	SEGMENT
??_C@_0BJ@IBEBABHD@INTERNATIONAL_TRADE_BASE?$AA@ DB 'INTERNATIONAL_TRADE_'
	DB	'BASE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FBPDOJAG@ESPIONAGE_COUP_SPY_LEVEL_DELTA_F@
CONST	SEGMENT
??_C@_0CE@FBPDOJAG@ESPIONAGE_COUP_SPY_LEVEL_DELTA_F@ DB 'ESPIONAGE_COUP_S'
	DB	'PY_LEVEL_DELTA_FOUR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BMLMBPFA@ESPIONAGE_COUP_SPY_LEVEL_DELTA_T@
CONST	SEGMENT
??_C@_0CF@BMLMBPFA@ESPIONAGE_COUP_SPY_LEVEL_DELTA_T@ DB 'ESPIONAGE_COUP_S'
	DB	'PY_LEVEL_DELTA_THREE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PAIEJLOO@ESPIONAGE_COUP_SPY_LEVEL_DELTA_T@
CONST	SEGMENT
??_C@_0CD@PAIEJLOO@ESPIONAGE_COUP_SPY_LEVEL_DELTA_T@ DB 'ESPIONAGE_COUP_S'
	DB	'PY_LEVEL_DELTA_TWO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JOIEDLAF@ESPIONAGE_COUP_SPY_LEVEL_DELTA_O@
CONST	SEGMENT
??_C@_0CD@JOIEDLAF@ESPIONAGE_COUP_SPY_LEVEL_DELTA_O@ DB 'ESPIONAGE_COUP_S'
	DB	'PY_LEVEL_DELTA_ONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GBHNAJHI@ESPIONAGE_COUP_SPY_LEVEL_DELTA_Z@
CONST	SEGMENT
??_C@_0CE@GBHNAJHI@ESPIONAGE_COUP_SPY_LEVEL_DELTA_Z@ DB 'ESPIONAGE_COUP_S'
	DB	'PY_LEVEL_DELTA_ZERO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JLJLMLDH@ESPIONAGE_COUP_MULTIPLY_CONSTANT@
CONST	SEGMENT
??_C@_0CB@JLJLMLDH@ESPIONAGE_COUP_MULTIPLY_CONSTANT@ DB 'ESPIONAGE_COUP_M'
	DB	'ULTIPLY_CONSTANT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OBAJNOI@ESPIONAGE_COUP_NOBODY_BONUS?$AA@
CONST	SEGMENT
??_C@_0BM@OBAJNOI@ESPIONAGE_COUP_NOBODY_BONUS?$AA@ DB 'ESPIONAGE_COUP_NOB'
	DB	'ODY_BONUS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GDGPPNNE@CITY_STRENGTH_TECH_EXPONENT?$AA@
CONST	SEGMENT
??_C@_0BM@GDGPPNNE@CITY_STRENGTH_TECH_EXPONENT?$AA@ DB 'CITY_STRENGTH_TEC'
	DB	'H_EXPONENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HLKDNPBE@CITY_STRENGTH_TECH_BASE?$AA@
CONST	SEGMENT
??_C@_0BI@HLKDNPBE@CITY_STRENGTH_TECH_BASE?$AA@ DB 'CITY_STRENGTH_TECH_BA'
	DB	'SE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BILJPHBC@UNIT_UPGRADE_COST_EXPONENT?$AA@
CONST	SEGMENT
??_C@_0BL@BILJPHBC@UNIT_UPGRADE_COST_EXPONENT?$AA@ DB 'UNIT_UPGRADE_COST_'
	DB	'EXPONENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CGJFMLJE@UNIT_UPGRADE_COST_MULTIPLIER_PER@
CONST	SEGMENT
??_C@_0CF@CGJFMLJE@UNIT_UPGRADE_COST_MULTIPLIER_PER@ DB 'UNIT_UPGRADE_COS'
	DB	'T_MULTIPLIER_PER_ERA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CKEGBKFK@POLICY_COST_EXPONENT?$AA@
CONST	SEGMENT
??_C@_0BF@CKEGBKFK@POLICY_COST_EXPONENT?$AA@ DB 'POLICY_COST_EXPONENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GLIHNBL@CITY_GROWTH_EXPONENT?$AA@
CONST	SEGMENT
??_C@_0BF@GLIHNBL@CITY_GROWTH_EXPONENT?$AA@ DB 'CITY_GROWTH_EXPONENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BDEJDHDH@CITY_GROWTH_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BH@BDEJDHDH@CITY_GROWTH_MULTIPLIER?$AA@ DB 'CITY_GROWTH_MULTIPLIER'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KNDHBFJC@HURRY_GOLD_CULTURE_EXPONENT?$AA@
CONST	SEGMENT
??_C@_0BM@KNDHBFJC@HURRY_GOLD_CULTURE_EXPONENT?$AA@ DB 'HURRY_GOLD_CULTUR'
	DB	'E_EXPONENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EGKGEJHP@HURRY_GOLD_TECH_EXPONENT?$AA@
CONST	SEGMENT
??_C@_0BJ@EGKGEJHP@HURRY_GOLD_TECH_EXPONENT?$AA@ DB 'HURRY_GOLD_TECH_EXPO'
	DB	'NENT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HLPOPNMP@GOLD_GIFT_FRIENDSHIP_DIVISOR?$AA@
CONST	SEGMENT
??_C@_0BN@HLPOPNMP@GOLD_GIFT_FRIENDSHIP_DIVISOR?$AA@ DB 'GOLD_GIFT_FRIEND'
	DB	'SHIP_DIVISOR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CFGFKDBO@GOLD_GIFT_FRIENDSHIP_EXPONENT?$AA@
CONST	SEGMENT
??_C@_0BO@CFGFKDBO@GOLD_GIFT_FRIENDSHIP_EXPONENT?$AA@ DB 'GOLD_GIFT_FRIEN'
	DB	'DSHIP_EXPONENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EIKGKLAP@AI_STRATEGY_NAVAL_UNITS_PER_CITY@
CONST	SEGMENT
??_C@_0CB@EIKGKLAP@AI_STRATEGY_NAVAL_UNITS_PER_CITY@ DB 'AI_STRATEGY_NAVA'
	DB	'L_UNITS_PER_CITY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FHPGLLNH@AI_STRATEGY_DEFEND_MY_LANDS_UNIT@
CONST	SEGMENT
??_C@_0CL@FHPGLLNH@AI_STRATEGY_DEFEND_MY_LANDS_UNIT@ DB 'AI_STRATEGY_DEFE'
	DB	'ND_MY_LANDS_UNITS_PER_CITY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@EPKENCBL@AI_TACTICAL_FLAVOR_DAMPENING_FOR@
CONST	SEGMENT
??_C@_0DF@EPKENCBL@AI_TACTICAL_FLAVOR_DAMPENING_FOR@ DB 'AI_TACTICAL_FLAV'
	DB	'OR_DAMPENING_FOR_MOVE_PRIORITIZATION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EGLKCOLB@DIPLO_VICTORY_TEAM_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BO@EGLKCOLB@DIPLO_VICTORY_TEAM_MULTIPLIER?$AA@ DB 'DIPLO_VICTORY_T'
	DB	'EAM_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MLNAJCGK@FLAVOR_STANDARD_LOG10_TILES_PER_@
CONST	SEGMENT
??_C@_0CH@MLNAJCGK@FLAVOR_STANDARD_LOG10_TILES_PER_@ DB 'FLAVOR_STANDARD_'
	DB	'LOG10_TILES_PER_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KHHPDABN@AI_DANGER_MINOR_APPROACH_CONQUES@
CONST	SEGMENT
??_C@_0CC@KHHPDABN@AI_DANGER_MINOR_APPROACH_CONQUES@ DB 'AI_DANGER_MINOR_'
	DB	'APPROACH_CONQUEST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BPPIKDMP@AI_DANGER_MINOR_APPROACH_BULLY?$AA@
CONST	SEGMENT
??_C@_0BP@BPPIKDMP@AI_DANGER_MINOR_APPROACH_BULLY?$AA@ DB 'AI_DANGER_MINO'
	DB	'R_APPROACH_BULLY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FKOOHEFN@AI_DANGER_MINOR_APPROACH_FRIENDL@
CONST	SEGMENT
??_C@_0CC@FKOOHEFN@AI_DANGER_MINOR_APPROACH_FRIENDL@ DB 'AI_DANGER_MINOR_'
	DB	'APPROACH_FRIENDLY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LNBAEAEF@AI_DANGER_MINOR_APPROACH_NEUTRAL@
CONST	SEGMENT
??_C@_0CB@LNBAEAEF@AI_DANGER_MINOR_APPROACH_NEUTRAL@ DB 'AI_DANGER_MINOR_'
	DB	'APPROACH_NEUTRAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BGKKGCPO@AI_DANGER_MAJOR_APPROACH_NEUTRAL@
CONST	SEGMENT
??_C@_0CB@BGKKGCPO@AI_DANGER_MAJOR_APPROACH_NEUTRAL@ DB 'AI_DANGER_MAJOR_'
	DB	'APPROACH_NEUTRAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GPGKEHL@AI_DANGER_MAJOR_APPROACH_FRIENDL@
CONST	SEGMENT
??_C@_0CC@GPGKEHL@AI_DANGER_MAJOR_APPROACH_FRIENDL@ DB 'AI_DANGER_MAJOR_A'
	DB	'PPROACH_FRIENDLY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HBPIHHEK@AI_DANGER_MAJOR_APPROACH_AFRAID?$AA@
CONST	SEGMENT
??_C@_0CA@HBPIHHEK@AI_DANGER_MAJOR_APPROACH_AFRAID?$AA@ DB 'AI_DANGER_MAJ'
	DB	'OR_APPROACH_AFRAID', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MDJOHKKB@AI_DANGER_MAJOR_APPROACH_GUARDED@
CONST	SEGMENT
??_C@_0CB@MDJOHKKB@AI_DANGER_MAJOR_APPROACH_GUARDED@ DB 'AI_DANGER_MAJOR_'
	DB	'APPROACH_GUARDED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HCPFEFHL@AI_DANGER_MAJOR_APPROACH_DECEPTI@
CONST	SEGMENT
??_C@_0CD@HCPFEFHL@AI_DANGER_MAJOR_APPROACH_DECEPTI@ DB 'AI_DANGER_MAJOR_'
	DB	'APPROACH_DECEPTIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PMOOCPKO@AI_DANGER_MAJOR_APPROACH_HOSTILE@
CONST	SEGMENT
??_C@_0CB@PMOOCPKO@AI_DANGER_MAJOR_APPROACH_HOSTILE@ DB 'AI_DANGER_MAJOR_'
	DB	'APPROACH_HOSTILE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JBCNHNEJ@AI_DANGER_MAJOR_APPROACH_WAR?$AA@
CONST	SEGMENT
??_C@_0BN@JBCNHNEJ@AI_DANGER_MAJOR_APPROACH_WAR?$AA@ DB 'AI_DANGER_MAJOR_'
	DB	'APPROACH_WAR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@CBLILIOK@AI_CITY_SPECIALIZATION_PRODUCTIO@
CONST	SEGMENT
??_C@_0DF@CBLILIOK@AI_CITY_SPECIALIZATION_PRODUCTIO@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_PRODUCTION_WEIGHT_NEXT_WONDER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LKHEJECL@POST_COMBAT_TEXT_DELAY?$AA@
CONST	SEGMENT
??_C@_0BH@LKHEJECL@POST_COMBAT_TEXT_DELAY?$AA@ DB 'POST_COMBAT_TEXT_DELAY'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KPNNKHO@CULTURE_COST_LATER_PLOT_EXPONENT@
CONST	SEGMENT
??_C@_0CB@KPNNKHO@CULTURE_COST_LATER_PLOT_EXPONENT@ DB 'CULTURE_COST_LATE'
	DB	'R_PLOT_EXPONENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PKNCKPLC@CITY_ZOOM_OFFSET?$AA@
CONST	SEGMENT
??_C@_0BB@PKNCKPLC@CITY_ZOOM_OFFSET?$AA@ DB 'CITY_ZOOM_OFFSET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PDLCLIJD@CITY_ZOOM_LEVEL_3?$AA@
CONST	SEGMENT
??_C@_0BC@PDLCLIJD@CITY_ZOOM_LEVEL_3?$AA@ DB 'CITY_ZOOM_LEVEL_3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OKKJIJNC@CITY_ZOOM_LEVEL_2?$AA@
CONST	SEGMENT
??_C@_0BC@OKKJIJNC@CITY_ZOOM_LEVEL_2?$AA@ DB 'CITY_ZOOM_LEVEL_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MBIENKBB@CITY_ZOOM_LEVEL_1?$AA@
CONST	SEGMENT
??_C@_0BC@MBIENKBB@CITY_ZOOM_LEVEL_1?$AA@ DB 'CITY_ZOOM_LEVEL_1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DFKJJGAF@HURRY_GOLD_PRODUCTION_EXPONENT?$AA@
CONST	SEGMENT
??_C@_0BP@DFKJJGAF@HURRY_GOLD_PRODUCTION_EXPONENT?$AA@ DB 'HURRY_GOLD_PRO'
	DB	'DUCTION_EXPONENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DKKANOLN@AI_RESEARCH_WEIGHT_BASE_MOD?$AA@
CONST	SEGMENT
??_C@_0BM@DKKANOLN@AI_RESEARCH_WEIGHT_BASE_MOD?$AA@ DB 'AI_RESEARCH_WEIGH'
	DB	'T_BASE_MOD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DJDFBCNI@AI_RESEARCH_WEIGHT_MOD_PER_TURN_@
CONST	SEGMENT
??_C@_0CF@DJDFBCNI@AI_RESEARCH_WEIGHT_MOD_PER_TURN_@ DB 'AI_RESEARCH_WEIG'
	DB	'HT_MOD_PER_TURN_LEFT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JCHLMGGL@AI_PRODUCTION_WEIGHT_BASE_MOD?$AA@
CONST	SEGMENT
??_C@_0BO@JCHLMGGL@AI_PRODUCTION_WEIGHT_BASE_MOD?$AA@ DB 'AI_PRODUCTION_W'
	DB	'EIGHT_BASE_MOD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KNPNMEMJ@AI_PRODUCTION_WEIGHT_MOD_PER_TUR@
CONST	SEGMENT
??_C@_0CH@KNPNMEMJ@AI_PRODUCTION_WEIGHT_MOD_PER_TUR@ DB 'AI_PRODUCTION_WE'
	DB	'IGHT_MOD_PER_TURN_LEFT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KODLFCBG@DIPLO_VICTORY_CS_DELEGATES_CONST@
CONST	SEGMENT
??_C@_0CE@KODLFCBG@DIPLO_VICTORY_CS_DELEGATES_CONST@ DB 'DIPLO_VICTORY_CS'
	DB	'_DELEGATES_CONSTANT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BOBMFNBO@DIPLO_VICTORY_CS_DELEGATES_COEFF@
CONST	SEGMENT
??_C@_0CH@BOBMFNBO@DIPLO_VICTORY_CS_DELEGATES_COEFF@ DB 'DIPLO_VICTORY_CS'
	DB	'_DELEGATES_COEFFICIENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BILFGCAD@DIPLO_VICTORY_CIV_DELEGATES_CONS@
CONST	SEGMENT
??_C@_0CF@BILFGCAD@DIPLO_VICTORY_CIV_DELEGATES_CONS@ DB 'DIPLO_VICTORY_CI'
	DB	'V_DELEGATES_CONSTANT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NBLHKEOH@DIPLO_VICTORY_CIV_DELEGATES_COEF@
CONST	SEGMENT
??_C@_0CI@NBLHKEOH@DIPLO_VICTORY_CIV_DELEGATES_COEF@ DB 'DIPLO_VICTORY_CI'
	DB	'V_DELEGATES_COEFFICIENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@GFEAJCMD@AI_OPERATIONAL_MAX_RECRUIT_TURNS@
CONST	SEGMENT
??_C@_0DB@GFEAJCMD@AI_OPERATIONAL_MAX_RECRUIT_TURNS@ DB 'AI_OPERATIONAL_M'
	DB	'AX_RECRUIT_TURNS_ENEMY_TERRITORY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PNPOCKCP@AI_OPERATIONAL_MAX_RECRUIT_TURNS@
CONST	SEGMENT
??_C@_0CJ@PNPOCKCP@AI_OPERATIONAL_MAX_RECRUIT_TURNS@ DB 'AI_OPERATIONAL_M'
	DB	'AX_RECRUIT_TURNS_DEFAULT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KDHFMMLE@WITHDRAW_MOD_BLOCKED_TILE?$AA@
CONST	SEGMENT
??_C@_0BK@KDHFMMLE@WITHDRAW_MOD_BLOCKED_TILE?$AA@ DB 'WITHDRAW_MOD_BLOCKE'
	DB	'D_TILE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OIPIGCIF@WITHDRAW_MOD_ENEMY_MOVES?$AA@
CONST	SEGMENT
??_C@_0BJ@OIPIGCIF@WITHDRAW_MOD_ENEMY_MOVES?$AA@ DB 'WITHDRAW_MOD_ENEMY_M'
	DB	'OVES', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PCAIIOIJ@MINOR_CIV_ROUTE_QUEST_WEIGHT?$AA@
CONST	SEGMENT
??_C@_0BN@PCAIIOIJ@MINOR_CIV_ROUTE_QUEST_WEIGHT?$AA@ DB 'MINOR_CIV_ROUTE_'
	DB	'QUEST_WEIGHT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GMGKNNNP@DISBAND_UNIT_REFUND_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BM@GMGKNNNP@DISBAND_UNIT_REFUND_PERCENT?$AA@ DB 'DISBAND_UNIT_REFU'
	DB	'ND_PERCENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@INAIJBJM@BUILDING_SALE_DIVISOR?$AA@
CONST	SEGMENT
??_C@_0BG@INAIJBJM@BUILDING_SALE_DIVISOR?$AA@ DB 'BUILDING_SALE_DIVISOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JDIOADGH@WARLORD_EXTRA_EXPERIENCE_PER_UNI@
CONST	SEGMENT
??_C@_0CK@JDIOADGH@WARLORD_EXTRA_EXPERIENCE_PER_UNI@ DB 'WARLORD_EXTRA_EX'
	DB	'PERIENCE_PER_UNIT_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LCJDBKEB@CITY_STRENGTH_TECH_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BO@LCJDBKEB@CITY_STRENGTH_TECH_MULTIPLIER?$AA@ DB 'CITY_STRENGTH_T'
	DB	'ECH_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JKLLAPJH@BUY_PLOTS_DISABLED?$AA@
CONST	SEGMENT
??_C@_0BD@JKLLAPJH@BUY_PLOTS_DISABLED?$AA@ DB 'BUY_PLOTS_DISABLED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IOONLICM@SETTLER_PRODUCTION_SPEED?$AA@
CONST	SEGMENT
??_C@_0BJ@IOONLICM@SETTLER_PRODUCTION_SPEED?$AA@ DB 'SETTLER_PRODUCTION_S'
	DB	'PEED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EKDHFPFB@PROGRESS_POPUP_TURN_FREQUENCY?$AA@
CONST	SEGMENT
??_C@_0BO@EKDHFPFB@PROGRESS_POPUP_TURN_FREQUENCY?$AA@ DB 'PROGRESS_POPUP_'
	DB	'TURN_FREQUENCY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IBEANHNG@HEAVY_RESOURCE_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BJ@IBEANHNG@HEAVY_RESOURCE_THRESHOLD?$AA@ DB 'HEAVY_RESOURCE_THRES'
	DB	'HOLD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EFMEJENL@MAX_CITY_DIST_HIGHWATER_MARK?$AA@
CONST	SEGMENT
??_C@_0BN@EFMEJENL@MAX_CITY_DIST_HIGHWATER_MARK?$AA@ DB 'MAX_CITY_DIST_HI'
	DB	'GHWATER_MARK', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@GJDBBHFH@ZERO_SUM_COMPETITION_GREAT_PEOPL@
CONST	SEGMENT
??_C@_0DB@GJDBBHFH@ZERO_SUM_COMPETITION_GREAT_PEOPL@ DB 'ZERO_SUM_COMPETI'
	DB	'TION_GREAT_PEOPLE_VICTORY_POINTS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@BLFPPAPG@ZERO_SUM_COMPETITION_POLICIES_VI@
CONST	SEGMENT
??_C@_0CN@BLFPPAPG@ZERO_SUM_COMPETITION_POLICIES_VI@ DB 'ZERO_SUM_COMPETI'
	DB	'TION_POLICIES_VICTORY_POINTS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IGGNFFEP@ZERO_SUM_COMPETITION_WONDERS_VIC@
CONST	SEGMENT
??_C@_0CM@IGGNFFEP@ZERO_SUM_COMPETITION_WONDERS_VIC@ DB 'ZERO_SUM_COMPETI'
	DB	'TION_WONDERS_VICTORY_POINTS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FGNJOOOL@MIN_GAME_TURNS_ELAPSED_TO_TEST_V@
CONST	SEGMENT
??_C@_0CH@FGNJOOOL@MIN_GAME_TURNS_ELAPSED_TO_TEST_V@ DB 'MIN_GAME_TURNS_E'
	DB	'LAPSED_TO_TEST_VICTORY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DJIKKDGM@VICTORY_POINTS_PER_ERA?$AA@
CONST	SEGMENT
??_C@_0BH@DJIKKDGM@VICTORY_POINTS_PER_ERA?$AA@ DB 'VICTORY_POINTS_PER_ERA'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LIBHHDFB@SCORE_RELIGION_CITIES_MULTIPLIER@
CONST	SEGMENT
??_C@_0CB@LIBHHDFB@SCORE_RELIGION_CITIES_MULTIPLIER@ DB 'SCORE_RELIGION_C'
	DB	'ITIES_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CGAGFKMI@SCORE_BELIEF_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BI@CGAGFKMI@SCORE_BELIEF_MULTIPLIER?$AA@ DB 'SCORE_BELIEF_MULTIPLI'
	DB	'ER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HFFIIIKB@SCORE_GREAT_WORK_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BM@HFFIIIKB@SCORE_GREAT_WORK_MULTIPLIER?$AA@ DB 'SCORE_GREAT_WORK_'
	DB	'MULTIPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FEOIIKFD@SCORE_POLICY_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BI@FEOIIKFD@SCORE_POLICY_MULTIPLIER?$AA@ DB 'SCORE_POLICY_MULTIPLI'
	DB	'ER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LBMILBPO@SCORE_FUTURE_TECH_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BN@LBMILBPO@SCORE_FUTURE_TECH_MULTIPLIER?$AA@ DB 'SCORE_FUTURE_TEC'
	DB	'H_MULTIPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LBMLHAOE@SCORE_TECH_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BG@LBMLHAOE@SCORE_TECH_MULTIPLIER?$AA@ DB 'SCORE_TECH_MULTIPLIER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NBGDCDEN@SCORE_WONDER_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BI@NBGDCDEN@SCORE_WONDER_MULTIPLIER?$AA@ DB 'SCORE_WONDER_MULTIPLI'
	DB	'ER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IDMDHNPG@SCORE_LAND_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BG@IDMDHNPG@SCORE_LAND_MULTIPLIER?$AA@ DB 'SCORE_LAND_MULTIPLIER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MDPHCBBG@SCORE_POPULATION_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BM@MDPHCBBG@SCORE_POPULATION_MULTIPLIER?$AA@ DB 'SCORE_POPULATION_'
	DB	'MULTIPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IFAOPGBI@SCORE_CITY_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BG@IFAOPGBI@SCORE_CITY_MULTIPLIER?$AA@ DB 'SCORE_CITY_MULTIPLIER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PNLGPDDB@DIPLO_VICTORY_DEFAULT_VOTE_PERCE@
CONST	SEGMENT
??_C@_0CD@PNLGPDDB@DIPLO_VICTORY_DEFAULT_VOTE_PERCE@ DB 'DIPLO_VICTORY_DE'
	DB	'FAULT_VOTE_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@ENCLBHON@DIPLO_VICTORY_BEYOND_ALGORITHM_M@
CONST	SEGMENT
??_C@_0CK@ENCLBHON@DIPLO_VICTORY_BEYOND_ALGORITHM_M@ DB 'DIPLO_VICTORY_BE'
	DB	'YOND_ALGORITHM_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CIFOPFPA@DIPLO_VICTORY_ALGORITHM_THRESHOL@
CONST	SEGMENT
??_C@_0CC@CIFOPFPA@DIPLO_VICTORY_ALGORITHM_THRESHOL@ DB 'DIPLO_VICTORY_AL'
	DB	'GORITHM_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NFLMCEEN@OWN_UNITED_NATIONS_VOTE_BONUS?$AA@
CONST	SEGMENT
??_C@_0BO@NFLMCEEN@OWN_UNITED_NATIONS_VOTE_BONUS?$AA@ DB 'OWN_UNITED_NATI'
	DB	'ONS_VOTE_BONUS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PCPCGLGO@UNITED_NATIONS_COUNTDOWN_TURNS?$AA@
CONST	SEGMENT
??_C@_0BP@PCPCGLGO@UNITED_NATIONS_COUNTDOWN_TURNS?$AA@ DB 'UNITED_NATIONS'
	DB	'_COUNTDOWN_TURNS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IAFAPLGE@PLOT_INFLUENCE_NO_ADJACENT_OWNED@
CONST	SEGMENT
??_C@_0CG@IAFAPLGE@PLOT_INFLUENCE_NO_ADJACENT_OWNED@ DB 'PLOT_INFLUENCE_N'
	DB	'O_ADJACENT_OWNED_COST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LJAFEIMM@PLOT_INFLUENCE_YIELD_POINT_COST?$AA@
CONST	SEGMENT
??_C@_0CA@LJAFEIMM@PLOT_INFLUENCE_YIELD_POINT_COST?$AA@ DB 'PLOT_INFLUENC'
	DB	'E_YIELD_POINT_COST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BAFAHDME@PLOT_BUY_YIELD_COST?$AA@
CONST	SEGMENT
??_C@_0BE@BAFAHDME@PLOT_BUY_YIELD_COST?$AA@ DB 'PLOT_BUY_YIELD_COST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BNJBHALC@PLOT_BUY_RESOURCE_COST?$AA@
CONST	SEGMENT
??_C@_0BH@BNJBHALC@PLOT_BUY_RESOURCE_COST?$AA@ DB 'PLOT_BUY_RESOURCE_COST'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DPIKAILF@PLOT_INFLUENCE_NW_COST?$AA@
CONST	SEGMENT
??_C@_0BH@DPIKAILF@PLOT_INFLUENCE_NW_COST?$AA@ DB 'PLOT_INFLUENCE_NW_COST'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JGMDODIE@PLOT_INFLUENCE_RESOURCE_COST?$AA@
CONST	SEGMENT
??_C@_0BN@JGMDODIE@PLOT_INFLUENCE_RESOURCE_COST?$AA@ DB 'PLOT_INFLUENCE_R'
	DB	'ESOURCE_COST', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HMMGNDL@PLOT_INFLUENCE_ROUTE_COST?$AA@
CONST	SEGMENT
??_C@_0BK@HMMGNDL@PLOT_INFLUENCE_ROUTE_COST?$AA@ DB 'PLOT_INFLUENCE_ROUTE'
	DB	'_COST', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OHKJBLIM@PLOT_INFLUENCE_IMPROVEMENT_COST?$AA@
CONST	SEGMENT
??_C@_0CA@OHKJBLIM@PLOT_INFLUENCE_IMPROVEMENT_COST?$AA@ DB 'PLOT_INFLUENC'
	DB	'E_IMPROVEMENT_COST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GNEBHGHM@PLOT_INFLUENCE_WATER_COST?$AA@
CONST	SEGMENT
??_C@_0BK@GNEBHGHM@PLOT_INFLUENCE_WATER_COST?$AA@ DB 'PLOT_INFLUENCE_WATE'
	DB	'R_COST', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NOKEENFI@PLOT_INFLUENCE_RING_COST?$AA@
CONST	SEGMENT
??_C@_0BJ@NOKEENFI@PLOT_INFLUENCE_RING_COST?$AA@ DB 'PLOT_INFLUENCE_RING_'
	DB	'COST', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FJDILNCG@PLOT_INFLUENCE_DISTANCE_DIVISOR?$AA@
CONST	SEGMENT
??_C@_0CA@FJDILNCG@PLOT_INFLUENCE_DISTANCE_DIVISOR?$AA@ DB 'PLOT_INFLUENC'
	DB	'E_DISTANCE_DIVISOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CLBINMPB@PLOT_INFLUENCE_DISTANCE_MULTIPLI@
CONST	SEGMENT
??_C@_0CD@CLBINMPB@PLOT_INFLUENCE_DISTANCE_MULTIPLI@ DB 'PLOT_INFLUENCE_D'
	DB	'ISTANCE_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NEEHNGLH@PLOT_INFLUENCE_BASE_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BP@NEEHNGLH@PLOT_INFLUENCE_BASE_MULTIPLIER?$AA@ DB 'PLOT_INFLUENCE'
	DB	'_BASE_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DOCDGKDD@MAXIMUM_ACQUIRE_PLOT_DISTANCE?$AA@
CONST	SEGMENT
??_C@_0BO@DOCDGKDD@MAXIMUM_ACQUIRE_PLOT_DISTANCE?$AA@ DB 'MAXIMUM_ACQUIRE'
	DB	'_PLOT_DISTANCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EOMPECIE@MAXIMUM_BUY_PLOT_DISTANCE?$AA@
CONST	SEGMENT
??_C@_0BK@EOMPECIE@MAXIMUM_BUY_PLOT_DISTANCE?$AA@ DB 'MAXIMUM_BUY_PLOT_DI'
	DB	'STANCE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IDDOELEM@MINOR_CIV_PLOT_CULTURE_COST_MULT@
CONST	SEGMENT
??_C@_0CH@IDDOELEM@MINOR_CIV_PLOT_CULTURE_COST_MULT@ DB 'MINOR_CIV_PLOT_C'
	DB	'ULTURE_COST_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HJBEEMGL@CULTURE_PLOT_COST_MOD_MINIMUM?$AA@
CONST	SEGMENT
??_C@_0BO@HJBEEMGL@CULTURE_PLOT_COST_MOD_MINIMUM?$AA@ DB 'CULTURE_PLOT_CO'
	DB	'ST_MOD_MINIMUM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GNDPBKIH@CULTURE_COST_VISIBLE_DIVISOR?$AA@
CONST	SEGMENT
??_C@_0BN@GNDPBKIH@CULTURE_COST_VISIBLE_DIVISOR?$AA@ DB 'CULTURE_COST_VIS'
	DB	'IBLE_DIVISOR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EDHBJCNL@CULTURE_COST_LATER_PLOT_MULTIPLI@
CONST	SEGMENT
??_C@_0CD@EDHBJCNL@CULTURE_COST_LATER_PLOT_MULTIPLI@ DB 'CULTURE_COST_LAT'
	DB	'ER_PLOT_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MBDNEIHO@CULTURE_COST_FIRST_PLOT?$AA@
CONST	SEGMENT
??_C@_0BI@MBDNEIHO@CULTURE_COST_FIRST_PLOT?$AA@ DB 'CULTURE_COST_FIRST_PL'
	DB	'OT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JJEBLEDJ@PLOT_COST_APPEARANCE_DIVISOR?$AA@
CONST	SEGMENT
??_C@_0BN@JJEBLEDJ@PLOT_COST_APPEARANCE_DIVISOR?$AA@ DB 'PLOT_COST_APPEAR'
	DB	'ANCE_DIVISOR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MNAADMJ@PLOT_ADDITIONAL_COST_PER_PLOT?$AA@
CONST	SEGMENT
??_C@_0BO@MNAADMJ@PLOT_ADDITIONAL_COST_PER_PLOT?$AA@ DB 'PLOT_ADDITIONAL_'
	DB	'COST_PER_PLOT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IMNCMELC@PLOT_BASE_COST?$AA@
CONST	SEGMENT
??_C@_0P@IMNCMELC@PLOT_BASE_COST?$AA@ DB 'PLOT_BASE_COST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JACHHLDL@PROXIMITY_FAR_DISTANCE_MIN?$AA@
CONST	SEGMENT
??_C@_0BL@JACHHLDL@PROXIMITY_FAR_DISTANCE_MIN?$AA@ DB 'PROXIMITY_FAR_DIST'
	DB	'ANCE_MIN', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@ICKMJPFE@PROXIMITY_FAR_DISTANCE_MAX?$AA@
CONST	SEGMENT
??_C@_0BL@ICKMJPFE@PROXIMITY_FAR_DISTANCE_MAX?$AA@ DB 'PROXIMITY_FAR_DIST'
	DB	'ANCE_MAX', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MFAGGBJ@PROXIMITY_FAR_DISTANCE_MAP_MULTI@
CONST	SEGMENT
??_C@_0CG@MFAGGBJ@PROXIMITY_FAR_DISTANCE_MAP_MULTI@ DB 'PROXIMITY_FAR_DIS'
	DB	'TANCE_MAP_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PNMCKJNL@PROXIMITY_CLOSE_DISTANCE_MIN?$AA@
CONST	SEGMENT
??_C@_0BN@PNMCKJNL@PROXIMITY_CLOSE_DISTANCE_MIN?$AA@ DB 'PROXIMITY_CLOSE_'
	DB	'DISTANCE_MIN', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OPEJENLE@PROXIMITY_CLOSE_DISTANCE_MAX?$AA@
CONST	SEGMENT
??_C@_0BN@OPEJENLE@PROXIMITY_CLOSE_DISTANCE_MAX?$AA@ DB 'PROXIMITY_CLOSE_'
	DB	'DISTANCE_MAX', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@ELMOOLAE@PROXIMITY_CLOSE_DISTANCE_MAP_MUL@
CONST	SEGMENT
??_C@_0CI@ELMOOLAE@PROXIMITY_CLOSE_DISTANCE_MAP_MUL@ DB 'PROXIMITY_CLOSE_'
	DB	'DISTANCE_MAP_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@MKIAMFJD@PROXIMITY_CLOSE_CLOSEST_CITY_POS@
CONST	SEGMENT
??_C@_0CJ@MKIAMFJD@PROXIMITY_CLOSE_CLOSEST_CITY_POS@ DB 'PROXIMITY_CLOSE_'
	DB	'CLOSEST_CITY_POSSIBILITY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MFNFBDJO@PROXIMITY_NEIGHBORS_CLOSEST_CITY@
CONST	SEGMENT
??_C@_0CN@MFNFBDJO@PROXIMITY_NEIGHBORS_CLOSEST_CITY@ DB 'PROXIMITY_NEIGHB'
	DB	'ORS_CLOSEST_CITY_REQUIREMENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NGHHEGFJ@CRAMPED_USABLE_PLOT_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BM@NGHHEGFJ@CRAMPED_USABLE_PLOT_PERCENT?$AA@ DB 'CRAMPED_USABLE_PL'
	DB	'OT_PERCENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PKBBAIGJ@CRAMPED_RANGE_FROM_CITY?$AA@
CONST	SEGMENT
??_C@_0BI@PKBBAIGJ@CRAMPED_RANGE_FROM_CITY?$AA@ DB 'CRAMPED_RANGE_FROM_CI'
	DB	'TY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DOOCMDNE@MAX_EXPERIENCE_PER_COMBAT?$AA@
CONST	SEGMENT
??_C@_0BK@DOOCMDNE@MAX_EXPERIENCE_PER_COMBAT?$AA@ DB 'MAX_EXPERIENCE_PER_'
	DB	'COMBAT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NNLPHNAO@MIN_EXPERIENCE_PER_COMBAT?$AA@
CONST	SEGMENT
??_C@_0BK@NNLPHNAO@MIN_EXPERIENCE_PER_COMBAT?$AA@ DB 'MIN_EXPERIENCE_PER_'
	DB	'COMBAT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HDLPGCJC@UNIT_DEATH_XP_GREAT_GENERAL_LOSS@
CONST	SEGMENT
??_C@_0CB@HDLPGCJC@UNIT_DEATH_XP_GREAT_GENERAL_LOSS@ DB 'UNIT_DEATH_XP_GR'
	DB	'EAT_GENERAL_LOSS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NANIBGDF@GREAT_GENERALS_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BJ@NANIBGDF@GREAT_GENERALS_THRESHOLD?$AA@ DB 'GREAT_GENERALS_THRES'
	DB	'HOLD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KPCMJDFF@GREAT_GENERALS_THRESHOLD_INCREAS@
CONST	SEGMENT
??_C@_0CH@KPCMJDFF@GREAT_GENERALS_THRESHOLD_INCREAS@ DB 'GREAT_GENERALS_T'
	DB	'HRESHOLD_INCREASE_TEAM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DGLDFBKK@GREAT_GENERALS_THRESHOLD_INCREAS@
CONST	SEGMENT
??_C@_0CC@DGLDFBKK@GREAT_GENERALS_THRESHOLD_INCREAS@ DB 'GREAT_GENERALS_T'
	DB	'HRESHOLD_INCREASE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HFKNGDJL@COMBAT_EXPERIENCE_IN_BORDERS_PER@
CONST	SEGMENT
??_C@_0CF@HFKNGDJL@COMBAT_EXPERIENCE_IN_BORDERS_PER@ DB 'COMBAT_EXPERIENC'
	DB	'E_IN_BORDERS_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OGLICHKA@BARBARIAN_MAX_XP_VALUE?$AA@
CONST	SEGMENT
??_C@_0BH@OGLICHKA@BARBARIAN_MAX_XP_VALUE?$AA@ DB 'BARBARIAN_MAX_XP_VALUE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JNPBNODF@EXPERIENCE_ATTACKING_CITY_AIR?$AA@
CONST	SEGMENT
??_C@_0BO@JNPBNODF@EXPERIENCE_ATTACKING_CITY_AIR?$AA@ DB 'EXPERIENCE_ATTA'
	DB	'CKING_CITY_AIR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MFDNGOO@EXPERIENCE_ATTACKING_CITY_RANGED@
CONST	SEGMENT
??_C@_0CB@MFDNGOO@EXPERIENCE_ATTACKING_CITY_RANGED@ DB 'EXPERIENCE_ATTACK'
	DB	'ING_CITY_RANGED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DKPBFJCJ@EXPERIENCE_ATTACKING_CITY_MELEE?$AA@
CONST	SEGMENT
??_C@_0CA@DKPBFJCJ@EXPERIENCE_ATTACKING_CITY_MELEE?$AA@ DB 'EXPERIENCE_AT'
	DB	'TACKING_CITY_MELEE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CLFMKAFM@EXPERIENCE_DEFENDING_AIR_SWEEP_G@
CONST	SEGMENT
??_C@_0CG@CLFMKAFM@EXPERIENCE_DEFENDING_AIR_SWEEP_G@ DB 'EXPERIENCE_DEFEN'
	DB	'DING_AIR_SWEEP_GROUND', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HJGELFEN@EXPERIENCE_DEFENDING_AIR_SWEEP_A@
CONST	SEGMENT
??_C@_0CD@HJGELFEN@EXPERIENCE_DEFENDING_AIR_SWEEP_A@ DB 'EXPERIENCE_DEFEN'
	DB	'DING_AIR_SWEEP_AIR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IGACCMDN@EXPERIENCE_ATTACKING_AIR_SWEEP?$AA@
CONST	SEGMENT
??_C@_0BP@IGACCMDN@EXPERIENCE_ATTACKING_AIR_SWEEP?$AA@ DB 'EXPERIENCE_ATT'
	DB	'ACKING_AIR_SWEEP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IMKMCMLJ@EXPERIENCE_DEFENDING_UNIT_RANGED@
CONST	SEGMENT
??_C@_0CB@IMKMCMLJ@EXPERIENCE_DEFENDING_UNIT_RANGED@ DB 'EXPERIENCE_DEFEN'
	DB	'DING_UNIT_RANGED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OFFCGGHO@EXPERIENCE_ATTACKING_UNIT_RANGED@
CONST	SEGMENT
??_C@_0CB@OFFCGGHO@EXPERIENCE_ATTACKING_UNIT_RANGED@ DB 'EXPERIENCE_ATTAC'
	DB	'KING_UNIT_RANGED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LAMEOGID@EXPERIENCE_DEFENDING_UNIT_AIR?$AA@
CONST	SEGMENT
??_C@_0BO@LAMEOGID@EXPERIENCE_DEFENDING_UNIT_AIR?$AA@ DB 'EXPERIENCE_DEFE'
	DB	'NDING_UNIT_AIR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PCHJACAH@EXPERIENCE_ATTACKING_UNIT_AIR?$AA@
CONST	SEGMENT
??_C@_0BO@PCHJACAH@EXPERIENCE_ATTACKING_UNIT_AIR?$AA@ DB 'EXPERIENCE_ATTA'
	DB	'CKING_UNIT_AIR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KAGMMFLM@EXPERIENCE_DEFENDING_UNIT_MELEE?$AA@
CONST	SEGMENT
??_C@_0CA@KAGMMFLM@EXPERIENCE_DEFENDING_UNIT_MELEE?$AA@ DB 'EXPERIENCE_DE'
	DB	'FENDING_UNIT_MELEE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FIOEPMCP@EXPERIENCE_ATTACKING_UNIT_MELEE?$AA@
CONST	SEGMENT
??_C@_0CA@FIOEPMCP@EXPERIENCE_ATTACKING_UNIT_MELEE?$AA@ DB 'EXPERIENCE_AT'
	DB	'TACKING_UNIT_MELEE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BBKNKDJJ@EXPERIENCE_PER_LEVEL?$AA@
CONST	SEGMENT
??_C@_0BF@BBKNKDJJ@EXPERIENCE_PER_LEVEL?$AA@ DB 'EXPERIENCE_PER_LEVEL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OMDNCIGJ@CITY_CAPTURE_DAMAGE_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BM@OMDNCIGJ@CITY_CAPTURE_DAMAGE_PERCENT?$AA@ DB 'CITY_CAPTURE_DAMA'
	DB	'GE_PERCENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DNEAKJMK@MIN_CITY_STRIKE_DAMAGE?$AA@
CONST	SEGMENT
??_C@_0BH@DNEAKJMK@MIN_CITY_STRIKE_DAMAGE?$AA@ DB 'MIN_CITY_STRIKE_DAMAGE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LECDAFHK@CITY_RANGED_ATTACK_STRENGTH_MULT@
CONST	SEGMENT
??_C@_0CH@LECDAFHK@CITY_RANGED_ATTACK_STRENGTH_MULT@ DB 'CITY_RANGED_ATTA'
	DB	'CK_STRENGTH_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LNCNDMOL@CAN_CITY_USE_INDIRECT_FIRE?$AA@
CONST	SEGMENT
??_C@_0BL@LNCNDMOL@CAN_CITY_USE_INDIRECT_FIRE?$AA@ DB 'CAN_CITY_USE_INDIR'
	DB	'ECT_FIRE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GGMKDAAA@CITY_ATTACK_RANGE?$AA@
CONST	SEGMENT
??_C@_0BC@GGMKDAAA@CITY_ATTACK_RANGE?$AA@ DB 'CITY_ATTACK_RANGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CDPGPAJA@ATTACKING_CITY_MELEE_DAMAGE_MOD?$AA@
CONST	SEGMENT
??_C@_0CA@CDPGPAJA@ATTACKING_CITY_MELEE_DAMAGE_MOD?$AA@ DB 'ATTACKING_CIT'
	DB	'Y_MELEE_DAMAGE_MOD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KLNBCKKJ@CITY_ATTACKING_DAMAGE_MOD?$AA@
CONST	SEGMENT
??_C@_0BK@KLNBCKKJ@CITY_ATTACKING_DAMAGE_MOD?$AA@ DB 'CITY_ATTACKING_DAMA'
	DB	'GE_MOD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CDKPGCBC@CITY_STRENGTH_HILL_CHANGE?$AA@
CONST	SEGMENT
??_C@_0BK@CDKPGCBC@CITY_STRENGTH_HILL_CHANGE?$AA@ DB 'CITY_STRENGTH_HILL_'
	DB	'CHANGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GLCHAKAJ@CITY_STRENGTH_UNIT_DIVISOR?$AA@
CONST	SEGMENT
??_C@_0BL@GLCHAKAJ@CITY_STRENGTH_UNIT_DIVISOR?$AA@ DB 'CITY_STRENGTH_UNIT'
	DB	'_DIVISOR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HIBDNCGI@CITY_STRENGTH_POPULATION_CHANGE?$AA@
CONST	SEGMENT
??_C@_0CA@HIBDNCGI@CITY_STRENGTH_POPULATION_CHANGE?$AA@ DB 'CITY_STRENGTH'
	DB	'_POPULATION_CHANGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MCMBHDMB@CITY_STRENGTH_DEFAULT?$AA@
CONST	SEGMENT
??_C@_0BG@MCMBHDMB@CITY_STRENGTH_DEFAULT?$AA@ DB 'CITY_STRENGTH_DEFAULT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BBKLLFMF@TRAIT_WOUNDED_DAMAGE_MOD?$AA@
CONST	SEGMENT
??_C@_0BJ@BBKLLFMF@TRAIT_WOUNDED_DAMAGE_MOD?$AA@ DB 'TRAIT_WOUNDED_DAMAGE'
	DB	'_MOD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GJNDINPN@WOUNDED_DAMAGE_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BK@GJNDINPN@WOUNDED_DAMAGE_MULTIPLIER?$AA@ DB 'WOUNDED_DAMAGE_MULT'
	DB	'IPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FANGPDKB@AIR_SWEEP_INTERCEPTION_DAMAGE_MO@
CONST	SEGMENT
??_C@_0CC@FANGPDKB@AIR_SWEEP_INTERCEPTION_DAMAGE_MO@ DB 'AIR_SWEEP_INTERC'
	DB	'EPTION_DAMAGE_MOD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KPJCCOIA@INTERCEPTION_SAME_STRENGTH_POSSI@
CONST	SEGMENT
??_C@_0DB@KPJCCOIA@INTERCEPTION_SAME_STRENGTH_POSSI@ DB 'INTERCEPTION_SAM'
	DB	'E_STRENGTH_POSSIBLE_EXTRA_DAMAGE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MDGJMNDB@INTERCEPTION_SAME_STRENGTH_MIN_D@
CONST	SEGMENT
??_C@_0CG@MDGJMNDB@INTERCEPTION_SAME_STRENGTH_MIN_D@ DB 'INTERCEPTION_SAM'
	DB	'E_STRENGTH_MIN_DAMAGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@CJKKENDJ@AIR_STRIKE_SAME_STRENGTH_POSSIBL@
CONST	SEGMENT
??_C@_0DH@CJKKENDJ@AIR_STRIKE_SAME_STRENGTH_POSSIBL@ DB 'AIR_STRIKE_SAME_'
	DB	'STRENGTH_POSSIBLE_EXTRA_DEFENSE_DAMAGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@NJPHNFMD@AIR_STRIKE_SAME_STRENGTH_MIN_DEF@
CONST	SEGMENT
??_C@_0CM@NJPHNFMD@AIR_STRIKE_SAME_STRENGTH_MIN_DEF@ DB 'AIR_STRIKE_SAME_'
	DB	'STRENGTH_MIN_DEFENSE_DAMAGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@NJBEDFIN@RANGE_ATTACK_SAME_STRENGTH_POSSI@
CONST	SEGMENT
??_C@_0DB@NJBEDFIN@RANGE_ATTACK_SAME_STRENGTH_POSSI@ DB 'RANGE_ATTACK_SAM'
	DB	'E_STRENGTH_POSSIBLE_EXTRA_DAMAGE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BEFLCKBG@RANGE_ATTACK_SAME_STRENGTH_MIN_D@
CONST	SEGMENT
??_C@_0CG@BEFLCKBG@RANGE_ATTACK_SAME_STRENGTH_MIN_D@ DB 'RANGE_ATTACK_SAM'
	DB	'E_STRENGTH_MIN_DAMAGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@JHCNNPKO@ATTACK_SAME_STRENGTH_POSSIBLE_EX@
CONST	SEGMENT
??_C@_0CL@JHCNNPKO@ATTACK_SAME_STRENGTH_POSSIBLE_EX@ DB 'ATTACK_SAME_STRE'
	DB	'NGTH_POSSIBLE_EXTRA_DAMAGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CKMGFABD@RANGE_ATTACK_RANGED_DEFENDER_MOD@
CONST	SEGMENT
??_C@_0CB@CKMGFABD@RANGE_ATTACK_RANGED_DEFENDER_MOD@ DB 'RANGE_ATTACK_RAN'
	DB	'GED_DEFENDER_MOD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CBGKPGFB@ATTACK_SAME_STRENGTH_MIN_DAMAGE?$AA@
CONST	SEGMENT
??_C@_0CA@CBGKPGFB@ATTACK_SAME_STRENGTH_MIN_DAMAGE?$AA@ DB 'ATTACK_SAME_S'
	DB	'TRENGTH_MIN_DAMAGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JKAOAJKK@CITY_HEAL_RATE?$AA@
CONST	SEGMENT
??_C@_0P@JKAOAJKK@CITY_HEAL_RATE?$AA@ DB 'CITY_HEAL_RATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BAPMLGMF@INSTA_HEAL_RATE?$AA@
CONST	SEGMENT
??_C@_0BA@BAPMLGMF@INSTA_HEAL_RATE?$AA@ DB 'INSTA_HEAL_RATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BLNMNOMH@FRIENDLY_HEAL_RATE?$AA@
CONST	SEGMENT
??_C@_0BD@BLNMNOMH@FRIENDLY_HEAL_RATE?$AA@ DB 'FRIENDLY_HEAL_RATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FJPECDBC@NEUTRAL_HEAL_RATE?$AA@
CONST	SEGMENT
??_C@_0BC@FJPECDBC@NEUTRAL_HEAL_RATE?$AA@ DB 'NEUTRAL_HEAL_RATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BACICFOH@ENEMY_HEAL_RATE?$AA@
CONST	SEGMENT
??_C@_0BA@BACICFOH@ENEMY_HEAL_RATE?$AA@ DB 'ENEMY_HEAL_RATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DEAHGOCL@AMPHIB_ATTACK_MODIFIER?$AA@
CONST	SEGMENT
??_C@_0BH@DEAHGOCL@AMPHIB_ATTACK_MODIFIER?$AA@ DB 'AMPHIB_ATTACK_MODIFIER'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MDMCGOFD@RIVER_ATTACK_MODIFIER?$AA@
CONST	SEGMENT
??_C@_0BG@MDMCGOFD@RIVER_ATTACK_MODIFIER?$AA@ DB 'RIVER_ATTACK_MODIFIER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KBIOAKNM@HILLS_EXTRA_DEFENSE?$AA@
CONST	SEGMENT
??_C@_0BE@KBIOAKNM@HILLS_EXTRA_DEFENSE?$AA@ DB 'HILLS_EXTRA_DEFENSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ONIPANHL@FLAT_LAND_EXTRA_DEFENSE?$AA@
CONST	SEGMENT
??_C@_0BI@ONIPANHL@FLAT_LAND_EXTRA_DEFENSE?$AA@ DB 'FLAT_LAND_EXTRA_DEFEN'
	DB	'SE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MFHEEKDI@CITY_HIT_POINTS_HEALED_PER_TURN?$AA@
CONST	SEGMENT
??_C@_0CA@MFHEEKDI@CITY_HIT_POINTS_HEALED_PER_TURN?$AA@ DB 'CITY_HIT_POIN'
	DB	'TS_HEALED_PER_TURN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HKHJIPK@MAX_CITY_HIT_POINTS?$AA@
CONST	SEGMENT
??_C@_0BE@HKHJIPK@MAX_CITY_HIT_POINTS?$AA@ DB 'MAX_CITY_HIT_POINTS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HLEFCLJM@MAX_HIT_POINTS?$AA@
CONST	SEGMENT
??_C@_0P@HLEFCLJM@MAX_HIT_POINTS?$AA@ DB 'MAX_HIT_POINTS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BFHJICGK@FIRE_SUPPORT_DISABLED?$AA@
CONST	SEGMENT
??_C@_0BG@BFHJICGK@FIRE_SUPPORT_DISABLED?$AA@ DB 'FIRE_SUPPORT_DISABLED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FMKIGCCP@ZONE_OF_CONTROL_ENABLED?$AA@
CONST	SEGMENT
??_C@_0BI@FMKIGCCP@ZONE_OF_CONTROL_ENABLED?$AA@ DB 'ZONE_OF_CONTROL_ENABL'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NOCDLMFB@PLOT_UNIT_LIMIT?$AA@
CONST	SEGMENT
??_C@_0BA@NOCDLMFB@PLOT_UNIT_LIMIT?$AA@ DB 'PLOT_UNIT_LIMIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HEHBPIKC@MINOR_UNIT_GIFT_TRAVEL_TURNS?$AA@
CONST	SEGMENT
??_C@_0BN@HEHBPIKC@MINOR_UNIT_GIFT_TRAVEL_TURNS?$AA@ DB 'MINOR_UNIT_GIFT_'
	DB	'TRAVEL_TURNS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ECKCBJGL@MINOR_FRIENDSHIP_ANCHOR_MOD_WARY@
CONST	SEGMENT
??_C@_0CE@ECKCBJGL@MINOR_FRIENDSHIP_ANCHOR_MOD_WARY@ DB 'MINOR_FRIENDSHIP'
	DB	'_ANCHOR_MOD_WARY_OF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GMHDOODL@MINOR_FRIENDSHIP_ANCHOR_MOD_PROT@
CONST	SEGMENT
??_C@_0CG@GMHDOODL@MINOR_FRIENDSHIP_ANCHOR_MOD_PROT@ DB 'MINOR_FRIENDSHIP'
	DB	'_ANCHOR_MOD_PROTECTED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KONKFNLO@MINOR_FRIENDSHIP_ANCHOR_DEFAULT?$AA@
CONST	SEGMENT
??_C@_0CA@KONKFNLO@MINOR_FRIENDSHIP_ANCHOR_DEFAULT?$AA@ DB 'MINOR_FRIENDS'
	DB	'HIP_ANCHOR_DEFAULT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FDBDNMC@MINOR_FRIENDSHIP_FROM_TRADE_MISS@
CONST	SEGMENT
??_C@_0CE@FDBDNMC@MINOR_FRIENDSHIP_FROM_TRADE_MISS@ DB 'MINOR_FRIENDSHIP_'
	DB	'FROM_TRADE_MISSION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LFOAFPKC@MINOR_CIV_BUYOUT_TURNS?$AA@
CONST	SEGMENT
??_C@_0BH@LFOAFPKC@MINOR_CIV_BUYOUT_TURNS?$AA@ DB 'MINOR_CIV_BUYOUT_TURNS'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JOHJPPHG@MINOR_CIV_BUYOUT_COST?$AA@
CONST	SEGMENT
??_C@_0BG@JOHJPPHG@MINOR_CIV_BUYOUT_COST?$AA@ DB 'MINOR_CIV_BUYOUT_COST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JOFACDLK@MINOR_CIV_TILE_IMPROVEMENT_GIFT_@
CONST	SEGMENT
??_C@_0CF@JOFACDLK@MINOR_CIV_TILE_IMPROVEMENT_GIFT_@ DB 'MINOR_CIV_TILE_I'
	DB	'MPROVEMENT_GIFT_COST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BDDIBPHP@MINOR_GOLD_GIFT_SMALL?$AA@
CONST	SEGMENT
??_C@_0BG@BDDIBPHP@MINOR_GOLD_GIFT_SMALL?$AA@ DB 'MINOR_GOLD_GIFT_SMALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LCAFOHLJ@MINOR_GOLD_GIFT_MEDIUM?$AA@
CONST	SEGMENT
??_C@_0BH@LCAFOHLJ@MINOR_GOLD_GIFT_MEDIUM?$AA@ DB 'MINOR_GOLD_GIFT_MEDIUM'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LLHDOOOJ@MINOR_GOLD_GIFT_LARGE?$AA@
CONST	SEGMENT
??_C@_0BG@LLHDOOOJ@MINOR_GOLD_GIFT_LARGE?$AA@ DB 'MINOR_GOLD_GIFT_LARGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BLFHHHLC@MINOR_POLICY_RESOURCE_HAPPINESS_@
CONST	SEGMENT
??_C@_0CL@BLFHHHLC@MINOR_POLICY_RESOURCE_HAPPINESS_@ DB 'MINOR_POLICY_RES'
	DB	'OURCE_HAPPINESS_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OMCNOFEN@MINOR_POLICY_RESOURCE_MULTIPLIER@
CONST	SEGMENT
??_C@_0CB@OMCNOFEN@MINOR_POLICY_RESOURCE_MULTIPLIER@ DB 'MINOR_POLICY_RES'
	DB	'OURCE_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GKCDHDFF@MINOR_CIV_TECH_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BH@GKCDHDFF@MINOR_CIV_TECH_PERCENT?$AA@ DB 'MINOR_CIV_TECH_PERCENT'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BNEFGI@MINOR_CIV_GOLD_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BH@BNEFGI@MINOR_CIV_GOLD_PERCENT?$AA@ DB 'MINOR_CIV_GOLD_PERCENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OFNKIPKA@MINOR_CIV_PRODUCTION_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BN@OFNKIPKA@MINOR_CIV_PRODUCTION_PERCENT?$AA@ DB 'MINOR_CIV_PRODUC'
	DB	'TION_PERCENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BJOAAJFK@MINOR_CIV_GROWTH_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BJ@BJOAAJFK@MINOR_CIV_GROWTH_PERCENT?$AA@ DB 'MINOR_CIV_GROWTH_PER'
	DB	'CENT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PKICCEOO@MINOR_CIV_CONTACT_GOLD_OTHER?$AA@
CONST	SEGMENT
??_C@_0BN@PKICCEOO@MINOR_CIV_CONTACT_GOLD_OTHER?$AA@ DB 'MINOR_CIV_CONTAC'
	DB	'T_GOLD_OTHER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DEKIOJKK@MINOR_CIV_CONTACT_GOLD_FIRST?$AA@
CONST	SEGMENT
??_C@_0BN@DEKIOJKK@MINOR_CIV_CONTACT_GOLD_FIRST?$AA@ DB 'MINOR_CIV_CONTAC'
	DB	'T_GOLD_FIRST', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BLEHMDAD@ALREADY_OWNED_STRATEGIC_VALUE?$AA@
CONST	SEGMENT
??_C@_0BO@BLEHMDAD@ALREADY_OWNED_STRATEGIC_VALUE?$AA@ DB 'ALREADY_OWNED_S'
	DB	'TRATEGIC_VALUE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LMDLIDH@HILL_STRATEGIC_VALUE?$AA@
CONST	SEGMENT
??_C@_0BF@LMDLIDH@HILL_STRATEGIC_VALUE?$AA@ DB 'HILL_STRATEGIC_VALUE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PMDNDBMP@CHOKEPOINT_STRATEGIC_VALUE?$AA@
CONST	SEGMENT
??_C@_0BL@PMDNDBMP@CHOKEPOINT_STRATEGIC_VALUE?$AA@ DB 'CHOKEPOINT_STRATEG'
	DB	'IC_VALUE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OBBLHJMN@BUILD_ON_RIVER_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BH@OBBLHJMN@BUILD_ON_RIVER_PERCENT?$AA@ DB 'BUILD_ON_RIVER_PERCENT'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NCADNEHN@BUILD_ON_RESOURCE_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BK@NCADNEHN@BUILD_ON_RESOURCE_PERCENT?$AA@ DB 'BUILD_ON_RESOURCE_P'
	DB	'ERCENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FOBCADLI@SETTLER_DISTANCE_DROPOFF_MODIFIE@
CONST	SEGMENT
??_C@_0CC@FOBCADLI@SETTLER_DISTANCE_DROPOFF_MODIFIE@ DB 'SETTLER_DISTANCE'
	DB	'_DROPOFF_MODIFIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JNEHMKPE@SETTLER_EVALUATION_DISTANCE?$AA@
CONST	SEGMENT
??_C@_0BM@JNEHMKPE@SETTLER_EVALUATION_DISTANCE?$AA@ DB 'SETTLER_EVALUATIO'
	DB	'N_DISTANCE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CDCBKOGG@CITY_RING_5_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BH@CDCBKOGG@CITY_RING_5_MULTIPLIER?$AA@ DB 'CITY_RING_5_MULTIPLIER'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@POLHHHOD@CITY_RING_4_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BH@POLHHHOD@CITY_RING_4_MULTIPLIER?$AA@ DB 'CITY_RING_4_MULTIPLIER'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IDMEHBLL@CITY_RING_3_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BH@IDMEHBLL@CITY_RING_3_MULTIPLIER?$AA@ DB 'CITY_RING_3_MULTIPLIER'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FOFCKIDO@CITY_RING_2_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BH@FOFCKIDO@CITY_RING_2_MULTIPLIER?$AA@ DB 'CITY_RING_2_MULTIPLIER'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@ODJIMEPA@CITY_RING_1_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BH@ODJIMEPA@CITY_RING_1_MULTIPLIER?$AA@ DB 'CITY_RING_1_MULTIPLIER'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KDHGHKFO@SETTLER_BUILD_ON_COAST_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BP@KDHGHKFO@SETTLER_BUILD_ON_COAST_PERCENT?$AA@ DB 'SETTLER_BUILD_'
	DB	'ON_COAST_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KILNHDND@SETTLER_STRATEGIC_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BN@KILNHDND@SETTLER_STRATEGIC_MULTIPLIER?$AA@ DB 'SETTLER_STRATEGI'
	DB	'C_MULTIPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HKCONEPD@SETTLER_RESOURCE_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BM@HKCONEPD@SETTLER_RESOURCE_MULTIPLIER?$AA@ DB 'SETTLER_RESOURCE_'
	DB	'MULTIPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CANLDMK@SETTLER_FAITH_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BJ@CANLDMK@SETTLER_FAITH_MULTIPLIER?$AA@ DB 'SETTLER_FAITH_MULTIPL'
	DB	'IER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DPADKONB@SETTLER_SCIENCE_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BL@DPADKONB@SETTLER_SCIENCE_MULTIPLIER?$AA@ DB 'SETTLER_SCIENCE_MU'
	DB	'LTIPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DPCDIOIH@SETTLER_GOLD_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BI@DPCDIOIH@SETTLER_GOLD_MULTIPLIER?$AA@ DB 'SETTLER_GOLD_MULTIPLI'
	DB	'ER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DGEMEKBE@SETTLER_PRODUCTION_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BO@DGEMEKBE@SETTLER_PRODUCTION_MULTIPLIER?$AA@ DB 'SETTLER_PRODUCT'
	DB	'ION_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DEIMJNPG@SETTLER_HAPPINESS_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BN@DEIMJNPG@SETTLER_HAPPINESS_MULTIPLIER?$AA@ DB 'SETTLER_HAPPINES'
	DB	'S_MULTIPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ONCKDKMN@SETTLER_FOOD_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BI@ONCKDKMN@SETTLER_FOOD_MULTIPLIER?$AA@ DB 'SETTLER_FOOD_MULTIPLI'
	DB	'ER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BKEBDKAC@START_AREA_BUILD_ON_COAST_PERCEN@
CONST	SEGMENT
??_C@_0CC@BKEBDKAC@START_AREA_BUILD_ON_COAST_PERCEN@ DB 'START_AREA_BUILD'
	DB	'_ON_COAST_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OCOIDPOC@START_AREA_STRATEGIC_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0CA@OCOIDPOC@START_AREA_STRATEGIC_MULTIPLIER?$AA@ DB 'START_AREA_ST'
	DB	'RATEGIC_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PAMHKEJH@START_AREA_RESOURCE_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BP@PAMHKEJH@START_AREA_RESOURCE_MULTIPLIER?$AA@ DB 'START_AREA_RES'
	DB	'OURCE_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EGMFBPNL@START_AREA_FAITH_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BM@EGMFBPNL@START_AREA_FAITH_MULTIPLIER?$AA@ DB 'START_AREA_FAITH_'
	DB	'MULTIPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LDLKCGMK@START_AREA_SCIENCE_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BO@LDLKCGMK@START_AREA_SCIENCE_MULTIPLIER?$AA@ DB 'START_AREA_SCIE'
	DB	'NCE_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PDKCOMOL@START_AREA_GOLD_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BL@PDKCOMOL@START_AREA_GOLD_MULTIPLIER?$AA@ DB 'START_AREA_GOLD_MU'
	DB	'LTIPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GHNIBPGC@START_AREA_PRODUCTION_MULTIPLIER@
CONST	SEGMENT
??_C@_0CB@GHNIBPGC@START_AREA_PRODUCTION_MULTIPLIER@ DB 'START_AREA_PRODU'
	DB	'CTION_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HONJNBMH@START_AREA_HAPPINESS_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0CA@HONJNBMH@START_AREA_HAPPINESS_MULTIPLIER?$AA@ DB 'START_AREA_HA'
	DB	'PPINESS_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CBKLFIKB@START_AREA_FOOD_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BL@CBKLFIKB@START_AREA_FOOD_MULTIPLIER?$AA@ DB 'START_AREA_FOOD_MU'
	DB	'LTIPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KDOIANKG@MIN_START_FOUND_VALUE_AS_PERCENT@
CONST	SEGMENT
??_C@_0CJ@KDOIANKG@MIN_START_FOUND_VALUE_AS_PERCENT@ DB 'MIN_START_FOUND_'
	DB	'VALUE_AS_PERCENT_OF_BEST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BHBKGH@MAJOR_CIV_FOOD_REQUIREMENT?$AA@
CONST	SEGMENT
??_C@_0BL@BHBKGH@MAJOR_CIV_FOOD_REQUIREMENT?$AA@ DB 'MAJOR_CIV_FOOD_REQUI'
	DB	'REMENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KOIDHNCA@MINOR_CIV_FOOD_REQUIREMENT?$AA@
CONST	SEGMENT
??_C@_0BL@KOIDHNCA@MINOR_CIV_FOOD_REQUIREMENT?$AA@ DB 'MINOR_CIV_FOOD_REQ'
	DB	'UIREMENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PJEEMIIB@MIN_DISTANCE_OTHER_AREA_PERCENT?$AA@
CONST	SEGMENT
??_C@_0CA@PJEEMIIB@MIN_DISTANCE_OTHER_AREA_PERCENT?$AA@ DB 'MIN_DISTANCE_'
	DB	'OTHER_AREA_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FJIGIJJE@MIN_START_AREA_TILES?$AA@
CONST	SEGMENT
??_C@_0BF@FJIGIJJE@MIN_START_AREA_TILES?$AA@ DB 'MIN_START_AREA_TILES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EKAFPGLG@UNIT_DELETE_DISABLED?$AA@
CONST	SEGMENT
??_C@_0BF@EKAFPGLG@UNIT_DELETE_DISABLED?$AA@ DB 'UNIT_DELETE_DISABLED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JEHFHDOO@UNIT_WORKER_AUTOMATION_DISABLED?$AA@
CONST	SEGMENT
??_C@_0CA@JEHFHDOO@UNIT_WORKER_AUTOMATION_DISABLED?$AA@ DB 'UNIT_WORKER_A'
	DB	'UTOMATION_DISABLED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BFIKBJPN@UNIT_AUTO_EXPLORE_FULL_DISABLED?$AA@
CONST	SEGMENT
??_C@_0CA@BFIKBJPN@UNIT_AUTO_EXPLORE_FULL_DISABLED?$AA@ DB 'UNIT_AUTO_EXP'
	DB	'LORE_FULL_DISABLED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PAKJDMJG@UNIT_AUTO_EXPLORE_DISABLED?$AA@
CONST	SEGMENT
??_C@_0BL@PAKJDMJG@UNIT_AUTO_EXPLORE_DISABLED?$AA@ DB 'UNIT_AUTO_EXPLORE_'
	DB	'DISABLED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DGLIPIGO@LANDMARK_MINOR_FRIENDSHIP_CHANGE@
CONST	SEGMENT
??_C@_0CB@DGLIPIGO@LANDMARK_MINOR_FRIENDSHIP_CHANGE@ DB 'LANDMARK_MINOR_F'
	DB	'RIENDSHIP_CHANGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OFKNFCG@CULTURE_BOMB_MINOR_FRIENDSHIP_CH@
CONST	SEGMENT
??_C@_0CF@OFKNFCG@CULTURE_BOMB_MINOR_FRIENDSHIP_CH@ DB 'CULTURE_BOMB_MINO'
	DB	'R_FRIENDSHIP_CHANGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EBEIACGA@CULTURE_BOMB_COOLDOWN?$AA@
CONST	SEGMENT
??_C@_0BG@EBEIACGA@CULTURE_BOMB_COOLDOWN?$AA@ DB 'CULTURE_BOMB_COOLDOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PMHGDFPK@GREAT_PERSON_THRESHOLD_INCREASE?$AA@
CONST	SEGMENT
??_C@_0CA@PMHGDFPK@GREAT_PERSON_THRESHOLD_INCREASE?$AA@ DB 'GREAT_PERSON_'
	DB	'THRESHOLD_INCREASE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IHLGFJPC@GREAT_PERSON_THRESHOLD_BASE?$AA@
CONST	SEGMENT
??_C@_0BM@IHLGFJPC@GREAT_PERSON_THRESHOLD_BASE?$AA@ DB 'GREAT_PERSON_THRE'
	DB	'SHOLD_BASE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FJOOBCGF@MAX_SPECIALISTS_FROM_BUILDING?$AA@
CONST	SEGMENT
??_C@_0BO@FJOOBCGF@MAX_SPECIALISTS_FROM_BUILDING?$AA@ DB 'MAX_SPECIALISTS'
	DB	'_FROM_BUILDING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JMBBIGNJ@CITY_RESOURCE_WLTKD_TURNS?$AA@
CONST	SEGMENT
??_C@_0BK@JMBBIGNJ@CITY_RESOURCE_WLTKD_TURNS?$AA@ DB 'CITY_RESOURCE_WLTKD'
	DB	'_TURNS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OGLFPGMH@BARBARIAN_TECH_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BH@OGLFPGMH@BARBARIAN_TECH_PERCENT?$AA@ DB 'BARBARIAN_TECH_PERCENT'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FOAPFLMP@DEFAULT_MAX_NUM_BUILDERS?$AA@
CONST	SEGMENT
??_C@_0BJ@FOAPFLMP@DEFAULT_MAX_NUM_BUILDERS?$AA@ DB 'DEFAULT_MAX_NUM_BUIL'
	DB	'DERS', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HJONPDKI@EMBARKED_VISIBILITY_RANGE?$AA@
CONST	SEGMENT
??_C@_0BK@HJONPDKI@EMBARKED_VISIBILITY_RANGE?$AA@ DB 'EMBARKED_VISIBILITY'
	DB	'_RANGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@COGNNDKH@EMBARKED_UNIT_MOVEMENT?$AA@
CONST	SEGMENT
??_C@_0BH@COGNNDKH@EMBARKED_UNIT_MOVEMENT?$AA@ DB 'EMBARKED_UNIT_MOVEMENT'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KFGAIBAB@BARBARIAN_UNIT_GOLD_RANSOM?$AA@
CONST	SEGMENT
??_C@_0BL@KFGAIBAB@BARBARIAN_UNIT_GOLD_RANSOM?$AA@ DB 'BARBARIAN_UNIT_GOL'
	DB	'D_RANSOM', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OHGKMKBJ@BARBARIAN_CITY_GOLD_RANSOM?$AA@
CONST	SEGMENT
??_C@_0BL@OHGKMKBJ@BARBARIAN_CITY_GOLD_RANSOM?$AA@ DB 'BARBARIAN_CITY_GOL'
	DB	'D_RANSOM', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BHFCDPOF@GOLD_FROM_BARBARIAN_CONVERSION?$AA@
CONST	SEGMENT
??_C@_0BP@BHFCDPOF@GOLD_FROM_BARBARIAN_CONVERSION?$AA@ DB 'GOLD_FROM_BARB'
	DB	'ARIAN_CONVERSION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PFHFPDFA@MAX_BARBARIANS_FROM_CAMP_NEARBY_@
CONST	SEGMENT
??_C@_0CG@PFHFPDFA@MAX_BARBARIANS_FROM_CAMP_NEARBY_@ DB 'MAX_BARBARIANS_F'
	DB	'ROM_CAMP_NEARBY_RANGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GMLODJMD@MAX_BARBARIANS_FROM_CAMP_NEARBY?$AA@
CONST	SEGMENT
??_C@_0CA@GMLODJMD@MAX_BARBARIANS_FROM_CAMP_NEARBY?$AA@ DB 'MAX_BARBARIAN'
	DB	'S_FROM_CAMP_NEARBY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GFAAPLHB@BARBARIAN_NAVAL_UNIT_START_TURN_@
CONST	SEGMENT
??_C@_0CG@GFAAPLHB@BARBARIAN_NAVAL_UNIT_START_TURN_@ DB 'BARBARIAN_NAVAL_'
	DB	'UNIT_START_TURN_SPAWN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BJFFBJFG@BARBARIAN_EXTRA_RAGING_UNIT_SPAW@
CONST	SEGMENT
??_C@_0CJ@BJFFBJFG@BARBARIAN_EXTRA_RAGING_UNIT_SPAW@ DB 'BARBARIAN_EXTRA_'
	DB	'RAGING_UNIT_SPAWN_CHANCE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LBNKOCJH@BARBARIAN_CAMP_COASTAL_SPAWN_ROL@
CONST	SEGMENT
??_C@_0CC@LBNKOCJH@BARBARIAN_CAMP_COASTAL_SPAWN_ROL@ DB 'BARBARIAN_CAMP_C'
	DB	'OASTAL_SPAWN_ROLL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DFILBMPA@BARBARIAN_CAMP_MINIMUM_DISTANCE_@
CONST	SEGMENT
??_C@_0CN@DFILBMPA@BARBARIAN_CAMP_MINIMUM_DISTANCE_@ DB 'BARBARIAN_CAMP_M'
	DB	'INIMUM_DISTANCE_ANOTHER_CAMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CCAEIKLA@BARBARIAN_CAMP_MINIMUM_DISTANCE_@
CONST	SEGMENT
??_C@_0CI@CCAEIKLA@BARBARIAN_CAMP_MINIMUM_DISTANCE_@ DB 'BARBARIAN_CAMP_M'
	DB	'INIMUM_DISTANCE_CAPITAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LOHCJBNK@BARBARIAN_CAMP_ODDS_OF_NEW_CAMP_@
CONST	SEGMENT
??_C@_0CJ@LOHCJBNK@BARBARIAN_CAMP_ODDS_OF_NEW_CAMP_@ DB 'BARBARIAN_CAMP_O'
	DB	'DDS_OF_NEW_CAMP_SPAWNING', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@PNOPPLKJ@BARBARIAN_CAMP_FIRST_TURN_PERCEN@
CONST	SEGMENT
??_C@_0DD@PNOPPLKJ@BARBARIAN_CAMP_FIRST_TURN_PERCEN@ DB 'BARBARIAN_CAMP_F'
	DB	'IRST_TURN_PERCENT_OF_TARGET_TO_ADD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FPIOHNIL@RESEARCH_AGREEMENT_MOD?$AA@
CONST	SEGMENT
??_C@_0BH@FPIOHNIL@RESEARCH_AGREEMENT_MOD?$AA@ DB 'RESEARCH_AGREEMENT_MOD'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FHJHCCMN@SCIENCE_PER_POPULATION?$AA@
CONST	SEGMENT
??_C@_0BH@FHJHCCMN@SCIENCE_PER_POPULATION?$AA@ DB 'SCIENCE_PER_POPULATION'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DLOJLKDD@SPECIALISTS_DIVERT_POPULATION_EN@
CONST	SEGMENT
??_C@_0CG@DLOJLKDD@SPECIALISTS_DIVERT_POPULATION_EN@ DB 'SPECIALISTS_DIVE'
	DB	'RT_POPULATION_ENABLED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JKHDJAHC@NUM_RESOURCE_QUANTITY_TYPES?$AA@
CONST	SEGMENT
??_C@_0BM@JKHDJAHC@NUM_RESOURCE_QUANTITY_TYPES?$AA@ DB 'NUM_RESOURCE_QUAN'
	DB	'TITY_TYPES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DDBCPIEN@USE_FIRST_RING_INFLUENCE_TERRAIN@
CONST	SEGMENT
??_C@_0CG@DDBCPIEN@USE_FIRST_RING_INFLUENCE_TERRAIN@ DB 'USE_FIRST_RING_I'
	DB	'NFLUENCE_TERRAIN_COST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LDMCAJEO@INFLUENCE_RIVER_COST?$AA@
CONST	SEGMENT
??_C@_0BF@LDMCAJEO@INFLUENCE_RIVER_COST?$AA@ DB 'INFLUENCE_RIVER_COST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IJDPJGDC@INFLUENCE_HILL_COST?$AA@
CONST	SEGMENT
??_C@_0BE@IJDPJGDC@INFLUENCE_HILL_COST?$AA@ DB 'INFLUENCE_HILL_COST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JCCDIPLM@INFLUENCE_MOUNTAIN_COST?$AA@
CONST	SEGMENT
??_C@_0BI@JCCDIPLM@INFLUENCE_MOUNTAIN_COST?$AA@ DB 'INFLUENCE_MOUNTAIN_CO'
	DB	'ST', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GOBBJFHB@PROJECT_PURCHASING_DISABLED?$AA@
CONST	SEGMENT
??_C@_0BM@GOBBJFHB@PROJECT_PURCHASING_DISABLED?$AA@ DB 'PROJECT_PURCHASIN'
	DB	'G_DISABLED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JCJCONNH@GOLD_PURCHASE_VISIBLE_DIVISOR?$AA@
CONST	SEGMENT
??_C@_0BO@JCJCONNH@GOLD_PURCHASE_VISIBLE_DIVISOR?$AA@ DB 'GOLD_PURCHASE_V'
	DB	'ISIBLE_DIVISOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KNCPKECJ@GOLD_PURCHASE_GOLD_PER_PRODUCTIO@
CONST	SEGMENT
??_C@_0CC@KNCPKECJ@GOLD_PURCHASE_GOLD_PER_PRODUCTIO@ DB 'GOLD_PURCHASE_GO'
	DB	'LD_PER_PRODUCTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LKKLNLJF@POLICY_COST_DISCOUNT_MAX?$AA@
CONST	SEGMENT
??_C@_0BJ@LKKLNLJF@POLICY_COST_DISCOUNT_MAX?$AA@ DB 'POLICY_COST_DISCOUNT'
	DB	'_MAX', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DOPHPPIE@SWITCH_POLICY_BRANCHES_TENETS_LO@
CONST	SEGMENT
??_C@_0CD@DOPHPPIE@SWITCH_POLICY_BRANCHES_TENETS_LO@ DB 'SWITCH_POLICY_BR'
	DB	'ANCHES_TENETS_LOST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NBHKBADO@SWITCH_POLICY_BRANCHES_ANARCHY_T@
CONST	SEGMENT
??_C@_0CF@NBHKBADO@SWITCH_POLICY_BRANCHES_ANARCHY_T@ DB 'SWITCH_POLICY_BR'
	DB	'ANCHES_ANARCHY_TURNS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OFHCPFM@POLICY_COST_VISIBLE_DIVISOR?$AA@
CONST	SEGMENT
??_C@_0BM@OFHCPFM@POLICY_COST_VISIBLE_DIVISOR?$AA@ DB 'POLICY_COST_VISIBL'
	DB	'E_DIVISOR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IGMDGGJH@POLICY_COST_INCREASE_TO_BE_EXPON@
CONST	SEGMENT
??_C@_0CG@IGMDGGJH@POLICY_COST_INCREASE_TO_BE_EXPON@ DB 'POLICY_COST_INCR'
	DB	'EASE_TO_BE_EXPONENTED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EEIKDNNN@BASE_POLICY_COST?$AA@
CONST	SEGMENT
??_C@_0BB@EEIKDNNN@BASE_POLICY_COST?$AA@ DB 'BASE_POLICY_COST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DBKANEAE@PUPPET_FAITH_MODIFIER?$AA@
CONST	SEGMENT
??_C@_0BG@DBKANEAE@PUPPET_FAITH_MODIFIER?$AA@ DB 'PUPPET_FAITH_MODIFIER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HHNBMPCB@PUPPET_GOLD_MODIFIER?$AA@
CONST	SEGMENT
??_C@_0BF@HHNBMPCB@PUPPET_GOLD_MODIFIER?$AA@ DB 'PUPPET_GOLD_MODIFIER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CDDDBBNG@PUPPET_CULTURE_MODIFIER?$AA@
CONST	SEGMENT
??_C@_0BI@CDDDBBNG@PUPPET_CULTURE_MODIFIER?$AA@ DB 'PUPPET_CULTURE_MODIFI'
	DB	'ER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@INJNAEKK@PUPPET_SCIENCE_MODIFIER?$AA@
CONST	SEGMENT
??_C@_0BI@INJNAEKK@PUPPET_SCIENCE_MODIFIER?$AA@ DB 'PUPPET_SCIENCE_MODIFI'
	DB	'ER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DPPJBLBD@PATH_DAMAGE_WEIGHT?$AA@
CONST	SEGMENT
??_C@_0BD@DPPJBLBD@PATH_DAMAGE_WEIGHT?$AA@ DB 'PATH_DAMAGE_WEIGHT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IGJBEIJM@NEW_CITY_BUILDING_VALUE_MODIFIER@
CONST	SEGMENT
??_C@_0CB@IGJBEIJM@NEW_CITY_BUILDING_VALUE_MODIFIER@ DB 'NEW_CITY_BUILDIN'
	DB	'G_VALUE_MODIFIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LMGDOMLG@ADVANCED_START_CITY_PLACEMENT_MA@
CONST	SEGMENT
??_C@_0CI@LMGDOMLG@ADVANCED_START_CITY_PLACEMENT_MA@ DB 'ADVANCED_START_C'
	DB	'ITY_PLACEMENT_MAX_RANGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FFDIONAH@ADVANCED_START_VISIBILITY_COST_I@
CONST	SEGMENT
??_C@_0CI@FFDIONAH@ADVANCED_START_VISIBILITY_COST_I@ DB 'ADVANCED_START_V'
	DB	'ISIBILITY_COST_INCREASE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OIHDGHKC@ADVANCED_START_VISIBILITY_COST?$AA@
CONST	SEGMENT
??_C@_0BP@OIHDGHKC@ADVANCED_START_VISIBILITY_COST?$AA@ DB 'ADVANCED_START'
	DB	'_VISIBILITY_COST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FJNMKCIM@ADVANCED_START_POPULATION_COST_I@
CONST	SEGMENT
??_C@_0CI@FJNMKCIM@ADVANCED_START_POPULATION_COST_I@ DB 'ADVANCED_START_P'
	DB	'OPULATION_COST_INCREASE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CPOHJMDE@ADVANCED_START_POPULATION_COST?$AA@
CONST	SEGMENT
??_C@_0BP@CPOHJMDE@ADVANCED_START_POPULATION_COST?$AA@ DB 'ADVANCED_START'
	DB	'_POPULATION_COST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DLGOLDJB@ADVANCED_START_CITY_COST_INCREAS@
CONST	SEGMENT
??_C@_0CC@DLGOLDJB@ADVANCED_START_CITY_COST_INCREAS@ DB 'ADVANCED_START_C'
	DB	'ITY_COST_INCREASE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PFHGDAHM@ADVANCED_START_CITY_COST?$AA@
CONST	SEGMENT
??_C@_0BJ@PFHGDAHM@ADVANCED_START_CITY_COST?$AA@ DB 'ADVANCED_START_CITY_'
	DB	'COST', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NKIKNOGN@ADVANCED_START_MAX_UNITS_PER_CIT@
CONST	SEGMENT
??_C@_0CC@NKIKNOGN@ADVANCED_START_MAX_UNITS_PER_CIT@ DB 'ADVANCED_START_M'
	DB	'AX_UNITS_PER_CITY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BKOIPHOD@ADVANCED_START_ALLOW_UNITS_OUTSI@
CONST	SEGMENT
??_C@_0CK@BKOIPHOD@ADVANCED_START_ALLOW_UNITS_OUTSI@ DB 'ADVANCED_START_A'
	DB	'LLOW_UNITS_OUTSIDE_CITIES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JOOIMHLJ@RANGED_ATTACKS_USE_MOVES?$AA@
CONST	SEGMENT
??_C@_0BJ@JOOIMHLJ@RANGED_ATTACKS_USE_MOVES?$AA@ DB 'RANGED_ATTACKS_USE_M'
	DB	'OVES', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MBCHOONI@CITY_MIN_SIZE_FOR_SETTLERS?$AA@
CONST	SEGMENT
??_C@_0BL@MBCHOONI@CITY_MIN_SIZE_FOR_SETTLERS?$AA@ DB 'CITY_MIN_SIZE_FOR_'
	DB	'SETTLERS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GHDPGDJK@CITY_MAX_NUM_BUILDINGS?$AA@
CONST	SEGMENT
??_C@_0BH@GHDPGDJK@CITY_MAX_NUM_BUILDINGS?$AA@ DB 'CITY_MAX_NUM_BUILDINGS'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CCGPBGGM@LAND_UNITS_CAN_ATTACK_WATER_CITI@
CONST	SEGMENT
??_C@_0CD@CCGPBGGM@LAND_UNITS_CAN_ATTACK_WATER_CITI@ DB 'LAND_UNITS_CAN_A'
	DB	'TTACK_WATER_CITIES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FGKKMLMB@WATER_POTENTIAL_CITY_WORK_FOR_AR@
CONST	SEGMENT
??_C@_0CD@FGKKMLMB@WATER_POTENTIAL_CITY_WORK_FOR_AR@ DB 'WATER_POTENTIAL_'
	DB	'CITY_WORK_FOR_AREA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MJMBCEBP@CITY_SCREEN_CLICK_WILL_EXIT?$AA@
CONST	SEGMENT
??_C@_0BM@MJMBCEBP@CITY_SCREEN_CLICK_WILL_EXIT?$AA@ DB 'CITY_SCREEN_CLICK'
	DB	'_WILL_EXIT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EIICMMCH@MIN_WATER_SIZE_FOR_OCEAN?$AA@
CONST	SEGMENT
??_C@_0BJ@EIICMMCH@MIN_WATER_SIZE_FOR_OCEAN?$AA@ DB 'MIN_WATER_SIZE_FOR_O'
	DB	'CEAN', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EJEAPLLP@PLAYER_ALWAYS_RAZES_CITIES?$AA@
CONST	SEGMENT
??_C@_0BL@EJEAPLLP@PLAYER_ALWAYS_RAZES_CITIES?$AA@ DB 'PLAYER_ALWAYS_RAZE'
	DB	'S_CITIES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EJNMNPPE@MAX_EVASION_PROBABILITY?$AA@
CONST	SEGMENT
??_C@_0BI@EJNMNPPE@MAX_EVASION_PROBABILITY?$AA@ DB 'MAX_EVASION_PROBABILI'
	DB	'TY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GKOGMJFB@MAX_INTERCEPTION_PROBABILITY?$AA@
CONST	SEGMENT
??_C@_0BN@GKOGMJFB@MAX_INTERCEPTION_PROBABILITY?$AA@ DB 'MAX_INTERCEPTION'
	DB	'_PROBABILITY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LGKCFIK@MINIMAP_RENDER_SIZE?$AA@
CONST	SEGMENT
??_C@_0BE@LGKCFIK@MINIMAP_RENDER_SIZE?$AA@ DB 'MINIMAP_RENDER_SIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GAECBFLJ@SCORE_HANDICAP_PERCENT_PER?$AA@
CONST	SEGMENT
??_C@_0BL@GAECBFLJ@SCORE_HANDICAP_PERCENT_PER?$AA@ DB 'SCORE_HANDICAP_PER'
	DB	'CENT_PER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JGLENLKL@SCORE_HANDICAP_PERCENT_OFFSET?$AA@
CONST	SEGMENT
??_C@_0BO@JGLENLKL@SCORE_HANDICAP_PERCENT_OFFSET?$AA@ DB 'SCORE_HANDICAP_'
	DB	'PERCENT_OFFSET', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HPOPAFAC@SCORE_VICTORY_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BG@HPOPAFAC@SCORE_VICTORY_PERCENT?$AA@ DB 'SCORE_VICTORY_PERCENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HOGIAEEB@SCORE_FREE_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BD@HOGIAEEB@SCORE_FREE_PERCENT?$AA@ DB 'SCORE_FREE_PERCENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MKPALOKG@SCORE_TECH_FACTOR?$AA@
CONST	SEGMENT
??_C@_0BC@MKPALOKG@SCORE_TECH_FACTOR?$AA@ DB 'SCORE_TECH_FACTOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LMGNEFPM@SCORE_WONDER_FACTOR?$AA@
CONST	SEGMENT
??_C@_0BE@LMGNEFPM@SCORE_WONDER_FACTOR?$AA@ DB 'SCORE_WONDER_FACTOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GDPHCOIC@SCORE_LAND_FACTOR?$AA@
CONST	SEGMENT
??_C@_0BC@GDPHCOIC@SCORE_LAND_FACTOR?$AA@ DB 'SCORE_LAND_FACTOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DNMHFOAA@SCORE_POPULATION_FACTOR?$AA@
CONST	SEGMENT
??_C@_0BI@DNMHFOAA@SCORE_POPULATION_FACTOR?$AA@ DB 'SCORE_POPULATION_FACT'
	DB	'OR', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IOOIKDIC@RESEARCH_AGREEMENT_BOOST_DIVISOR@
CONST	SEGMENT
??_C@_0CB@IOOIKDIC@RESEARCH_AGREEMENT_BOOST_DIVISOR@ DB 'RESEARCH_AGREEME'
	DB	'NT_BOOST_DIVISOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NOIOIKAL@RESEARCH_AGREEMENT_TIMER?$AA@
CONST	SEGMENT
??_C@_0BJ@NOIOIKAL@RESEARCH_AGREEMENT_TIMER?$AA@ DB 'RESEARCH_AGREEMENT_T'
	DB	'IMER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GMJIGIGN@TEAM_VOTE_MIN_CANDIDATES?$AA@
CONST	SEGMENT
??_C@_0BJ@GMJIGIGN@TEAM_VOTE_MIN_CANDIDATES?$AA@ DB 'TEAM_VOTE_MIN_CANDID'
	DB	'ATES', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@POMFOOPM@DIPLO_VOTE_SECRETARY_GENERAL_INT@
CONST	SEGMENT
??_C@_0CG@POMFOOPM@DIPLO_VOTE_SECRETARY_GENERAL_INT@ DB 'DIPLO_VOTE_SECRE'
	DB	'TARY_GENERAL_INTERVAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IIMPEPFP@WAR_SUCCESS_CITY_CAPTURING?$AA@
CONST	SEGMENT
??_C@_0BL@IIMPEPFP@WAR_SUCCESS_CITY_CAPTURING?$AA@ DB 'WAR_SUCCESS_CITY_C'
	DB	'APTURING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OGBOGJGI@WAR_SUCCESS_UNIT_CAPTURING?$AA@
CONST	SEGMENT
??_C@_0BL@OGBOGJGI@WAR_SUCCESS_UNIT_CAPTURING?$AA@ DB 'WAR_SUCCESS_UNIT_C'
	DB	'APTURING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BOMCEEEG@UNIT_UPGRADE_COST_DISCOUNT_MAX?$AA@
CONST	SEGMENT
??_C@_0BP@BOMCEEEG@UNIT_UPGRADE_COST_DISCOUNT_MAX?$AA@ DB 'UNIT_UPGRADE_C'
	DB	'OST_DISCOUNT_MAX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EDCPOLLI@UNIT_UPGRADE_COST_VISIBLE_DIVISO@
CONST	SEGMENT
??_C@_0CC@EDCPOLLI@UNIT_UPGRADE_COST_VISIBLE_DIVISO@ DB 'UNIT_UPGRADE_COS'
	DB	'T_VISIBLE_DIVISOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JIAMNBGN@UNIT_UPGRADE_COST_PER_PRODUCTION@
CONST	SEGMENT
??_C@_0CB@JIAMNBGN@UNIT_UPGRADE_COST_PER_PRODUCTION@ DB 'UNIT_UPGRADE_COS'
	DB	'T_PER_PRODUCTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BMIALBAO@BASE_UNIT_UPGRADE_COST?$AA@
CONST	SEGMENT
??_C@_0BH@BMIALBAO@BASE_UNIT_UPGRADE_COST?$AA@ DB 'BASE_UNIT_UPGRADE_COST'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MNLGAFBN@UNIT_PRODUCTION_DECAY_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BO@MNLGAFBN@UNIT_PRODUCTION_DECAY_PERCENT?$AA@ DB 'UNIT_PRODUCTION'
	DB	'_DECAY_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FEFFJNDA@UNIT_PRODUCTION_DECAY_TIME?$AA@
CONST	SEGMENT
??_C@_0BL@FEFFJNDA@UNIT_PRODUCTION_DECAY_TIME?$AA@ DB 'UNIT_PRODUCTION_DE'
	DB	'CAY_TIME', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MFDCLFID@BUILDING_PRODUCTION_DECAY_PERCEN@
CONST	SEGMENT
??_C@_0CC@MFDCLFID@BUILDING_PRODUCTION_DECAY_PERCEN@ DB 'BUILDING_PRODUCT'
	DB	'ION_DECAY_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EMEMLHDC@BUILDING_PRODUCTION_DECAY_TIME?$AA@
CONST	SEGMENT
??_C@_0BP@EMEMLHDC@BUILDING_PRODUCTION_DECAY_TIME?$AA@ DB 'BUILDING_PRODU'
	DB	'CTION_DECAY_TIME', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DACEBBOP@BARBARIAN_CITY_ATTACK_MODIFIER?$AA@
CONST	SEGMENT
??_C@_0BP@DACEBBOP@BARBARIAN_CITY_ATTACK_MODIFIER?$AA@ DB 'BARBARIAN_CITY'
	DB	'_ATTACK_MODIFIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LMOLALIJ@CAPTURE_GOLD_MAX_TURNS?$AA@
CONST	SEGMENT
??_C@_0BH@LMOLALIJ@CAPTURE_GOLD_MAX_TURNS?$AA@ DB 'CAPTURE_GOLD_MAX_TURNS'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EIOMCDML@CAPTURE_GOLD_RAND2?$AA@
CONST	SEGMENT
??_C@_0BD@EIOMCDML@CAPTURE_GOLD_RAND2?$AA@ DB 'CAPTURE_GOLD_RAND2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GDMBHAAI@CAPTURE_GOLD_RAND1?$AA@
CONST	SEGMENT
??_C@_0BD@GDMBHAAI@CAPTURE_GOLD_RAND1?$AA@ DB 'CAPTURE_GOLD_RAND1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PJPMALBF@CAPTURE_GOLD_PER_POPULATION?$AA@
CONST	SEGMENT
??_C@_0BM@PJPMALBF@CAPTURE_GOLD_PER_POPULATION?$AA@ DB 'CAPTURE_GOLD_PER_'
	DB	'POPULATION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PHPDJMOI@BASE_CAPTURE_GOLD?$AA@
CONST	SEGMENT
??_C@_0BC@PHPDJMOI@BASE_CAPTURE_GOLD?$AA@ DB 'BASE_CAPTURE_GOLD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HAIIMNBK@CIRCUMNAVIGATE_FREE_MOVES?$AA@
CONST	SEGMENT
??_C@_0BK@HAIIMNBK@CIRCUMNAVIGATE_FREE_MOVES?$AA@ DB 'CIRCUMNAVIGATE_FREE'
	DB	'_MOVES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PNGKHODC@MAX_CITY_DEFENSE_DAMAGE?$AA@
CONST	SEGMENT
??_C@_0BI@PNGKHODC@MAX_CITY_DEFENSE_DAMAGE?$AA@ DB 'MAX_CITY_DEFENSE_DAMA'
	DB	'GE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LOGDPBMF@MAXED_PROJECT_GOLD_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BL@LOGDPBMF@MAXED_PROJECT_GOLD_PERCENT?$AA@ DB 'MAXED_PROJECT_GOLD'
	DB	'_PERCENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FDMDIPHJ@MAXED_BUILDING_GOLD_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BM@FDMDIPHJ@MAXED_BUILDING_GOLD_PERCENT?$AA@ DB 'MAXED_BUILDING_GO'
	DB	'LD_PERCENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IALMANJF@MAXED_UNIT_GOLD_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BI@IALMANJF@MAXED_UNIT_GOLD_PERCENT?$AA@ DB 'MAXED_UNIT_GOLD_PERCE'
	DB	'NT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EILHBKHL@PROJECT_PRODUCTION_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BL@EILHBKHL@PROJECT_PRODUCTION_PERCENT?$AA@ DB 'PROJECT_PRODUCTION'
	DB	'_PERCENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CLEABCKE@BUILDING_PRODUCTION_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BM@CLEABCKE@BUILDING_PRODUCTION_PERCENT?$AA@ DB 'BUILDING_PRODUCTI'
	DB	'ON_PERCENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OEMFDKEF@MAX_UNIT_SUPPLY_PRODMOD?$AA@
CONST	SEGMENT
??_C@_0BI@OEMFDKEF@MAX_UNIT_SUPPLY_PRODMOD?$AA@ DB 'MAX_UNIT_SUPPLY_PRODM'
	DB	'OD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FCFOOABF@UNIT_PRODUCTION_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BI@FCFOOABF@UNIT_PRODUCTION_PERCENT?$AA@ DB 'UNIT_PRODUCTION_PERCE'
	DB	'NT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FHFHILLC@DEFAULT_WAR_VALUE_FOR_UNIT?$AA@
CONST	SEGMENT
??_C@_0BL@FHFHILLC@DEFAULT_WAR_VALUE_FOR_UNIT?$AA@ DB 'DEFAULT_WAR_VALUE_'
	DB	'FOR_UNIT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OOMFPJNP@DIFFERENT_TEAM_FEATURE_PRODUCTIO@
CONST	SEGMENT
??_C@_0CK@OOMFPJNP@DIFFERENT_TEAM_FEATURE_PRODUCTIO@ DB 'DIFFERENT_TEAM_F'
	DB	'EATURE_PRODUCTION_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CIIAHFPM@FEATURE_PRODUCTION_PERCENT_MULTI@
CONST	SEGMENT
??_C@_0CG@CIIAHFPM@FEATURE_PRODUCTION_PERCENT_MULTI@ DB 'FEATURE_PRODUCTI'
	DB	'ON_PERCENT_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LHOOJNCM@BASE_FEATURE_PRODUCTION_PERCENT?$AA@
CONST	SEGMENT
??_C@_0CA@LHOOJNCM@BASE_FEATURE_PRODUCTION_PERCENT?$AA@ DB 'BASE_FEATURE_'
	DB	'PRODUCTION_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PIFGONEB@COOP_WAR_LOCKED_LENGTH?$AA@
CONST	SEGMENT
??_C@_0BH@PIFGONEB@COOP_WAR_LOCKED_LENGTH?$AA@ DB 'COOP_WAR_LOCKED_LENGTH'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OHPHELHI@PEACE_TREATY_LENGTH?$AA@
CONST	SEGMENT
??_C@_0BE@OHPHELHI@PEACE_TREATY_LENGTH?$AA@ DB 'PEACE_TREATY_LENGTH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HOGJPEBE@TECH_COST_KNOWN_PREREQ_MODIFIER?$AA@
CONST	SEGMENT
??_C@_0CA@HOGJPEBE@TECH_COST_KNOWN_PREREQ_MODIFIER?$AA@ DB 'TECH_COST_KNO'
	DB	'WN_PREREQ_MODIFIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ECPDIMLK@TECH_COST_TOTAL_KNOWN_TEAM_MODIF@
CONST	SEGMENT
??_C@_0CE@ECPDIMLK@TECH_COST_TOTAL_KNOWN_TEAM_MODIF@ DB 'TECH_COST_TOTAL_'
	DB	'KNOWN_TEAM_MODIFIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JOGCDOKE@TECH_COST_EXTRA_TEAM_MEMBER_MODI@
CONST	SEGMENT
??_C@_0CF@JOGCDOKE@TECH_COST_EXTRA_TEAM_MEMBER_MODI@ DB 'TECH_COST_EXTRA_'
	DB	'TEAM_MEMBER_MODIFIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LHJONLME@NUKE_BLAST_RADIUS?$AA@
CONST	SEGMENT
??_C@_0BC@LHJONLME@NUKE_BLAST_RADIUS?$AA@ DB 'NUKE_BLAST_RADIUS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LHMOMINC@NUKE_CITY_HIT_POINT_DAMAGE?$AA@
CONST	SEGMENT
??_C@_0BL@LHMOMINC@NUKE_CITY_HIT_POINT_DAMAGE?$AA@ DB 'NUKE_CITY_HIT_POIN'
	DB	'T_DAMAGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@COGLAPCG@NUKE_LEVEL2_ELIM_POPULATION_THRE@
CONST	SEGMENT
??_C@_0CG@COGLAPCG@NUKE_LEVEL2_ELIM_POPULATION_THRE@ DB 'NUKE_LEVEL2_ELIM'
	DB	'_POPULATION_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JFFEJDMK@NUKE_LEVEL2_POPULATION_DEATH_RAN@
CONST	SEGMENT
??_C@_0CE@JFFEJDMK@NUKE_LEVEL2_POPULATION_DEATH_RAN@ DB 'NUKE_LEVEL2_POPU'
	DB	'LATION_DEATH_RAND_2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LOHJMAAJ@NUKE_LEVEL2_POPULATION_DEATH_RAN@
CONST	SEGMENT
??_C@_0CE@LOHJMAAJ@NUKE_LEVEL2_POPULATION_DEATH_RAN@ DB 'NUKE_LEVEL2_POPU'
	DB	'LATION_DEATH_RAND_1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EBKPCNHC@NUKE_LEVEL2_POPULATION_DEATH_BAS@
CONST	SEGMENT
??_C@_0CC@EBKPCNHC@NUKE_LEVEL2_POPULATION_DEATH_BAS@ DB 'NUKE_LEVEL2_POPU'
	DB	'LATION_DEATH_BASE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GHADHODC@NUKE_LEVEL1_POPULATION_DEATH_RAN@
CONST	SEGMENT
??_C@_0CE@GHADHODC@NUKE_LEVEL1_POPULATION_DEATH_RAN@ DB 'NUKE_LEVEL1_POPU'
	DB	'LATION_DEATH_RAND_2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EMCOCNPB@NUKE_LEVEL1_POPULATION_DEATH_RAN@
CONST	SEGMENT
??_C@_0CE@EMCOCNPB@NUKE_LEVEL1_POPULATION_DEATH_RAN@ DB 'NUKE_LEVEL1_POPU'
	DB	'LATION_DEATH_RAND_1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BJLBIEFK@NUKE_LEVEL1_POPULATION_DEATH_BAS@
CONST	SEGMENT
??_C@_0CC@BJLBIEFK@NUKE_LEVEL1_POPULATION_DEATH_BAS@ DB 'NUKE_LEVEL1_POPU'
	DB	'LATION_DEATH_BASE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PLOPIOHL@NUKE_NON_COMBAT_DEATH_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0CA@PLOPIOHL@NUKE_NON_COMBAT_DEATH_THRESHOLD?$AA@ DB 'NUKE_NON_COMB'
	DB	'AT_DEATH_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MILANIAN@NUKE_UNIT_DAMAGE_RAND_2?$AA@
CONST	SEGMENT
??_C@_0BI@MILANIAN@NUKE_UNIT_DAMAGE_RAND_2?$AA@ DB 'NUKE_UNIT_DAMAGE_RAND'
	DB	'_2', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ODJNILMO@NUKE_UNIT_DAMAGE_RAND_1?$AA@
CONST	SEGMENT
??_C@_0BI@ODJNILMO@NUKE_UNIT_DAMAGE_RAND_1?$AA@ DB 'NUKE_UNIT_DAMAGE_RAND'
	DB	'_1', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MCBGCECM@NUKE_UNIT_DAMAGE_BASE?$AA@
CONST	SEGMENT
??_C@_0BG@MCBGCECM@NUKE_UNIT_DAMAGE_BASE?$AA@ DB 'NUKE_UNIT_DAMAGE_BASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EBPAFFAB@NUKE_FALLOUT_PROB?$AA@
CONST	SEGMENT
??_C@_0BC@EBPAFFAB@NUKE_FALLOUT_PROB?$AA@ DB 'NUKE_FALLOUT_PROB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OMHBIHJM@MAX_FORTIFY_TURNS?$AA@
CONST	SEGMENT
??_C@_0BC@OMHBIHJM@MAX_FORTIFY_TURNS?$AA@ DB 'MAX_FORTIFY_TURNS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JNNCFGEG@FORTIFY_MODIFIER_PER_TURN?$AA@
CONST	SEGMENT
??_C@_0BK@JNNCFGEG@FORTIFY_MODIFIER_PER_TURN?$AA@ DB 'FORTIFY_MODIFIER_PE'
	DB	'R_TURN', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NFLOEFD@EXTRA_YIELD?$AA@
CONST	SEGMENT
??_C@_0M@NFLOEFD@EXTRA_YIELD?$AA@ DB 'EXTRA_YIELD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FKGJOELC@ROUTE_FEATURE_GROWTH_MODIFIER?$AA@
CONST	SEGMENT
??_C@_0BO@FKGJOELC@ROUTE_FEATURE_GROWTH_MODIFIER?$AA@ DB 'ROUTE_FEATURE_G'
	DB	'ROWTH_MODIFIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CHKNJOKK@FEATURE_GROWTH_MODIFIER?$AA@
CONST	SEGMENT
??_C@_0BI@CHKNJOKK@FEATURE_GROWTH_MODIFIER?$AA@ DB 'FEATURE_GROWTH_MODIFI'
	DB	'ER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KOAJMKLN@RIVER_EXTRA_MOVEMENT?$AA@
CONST	SEGMENT
??_C@_0BF@KOAJMKLN@RIVER_EXTRA_MOVEMENT?$AA@ DB 'RIVER_EXTRA_MOVEMENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DFCJCDIK@HILLS_EXTRA_MOVEMENT?$AA@
CONST	SEGMENT
??_C@_0BF@DFCJCDIK@HILLS_EXTRA_MOVEMENT?$AA@ DB 'HILLS_EXTRA_MOVEMENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MGFLBCKI@GOLDEN_AGE_CULTURE_MODIFIER?$AA@
CONST	SEGMENT
??_C@_0BM@MGFLBCKI@GOLDEN_AGE_CULTURE_MODIFIER?$AA@ DB 'GOLDEN_AGE_CULTUR'
	DB	'E_MODIFIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BFEFMKNA@MIN_UNIT_GOLDEN_AGE_TURNS?$AA@
CONST	SEGMENT
??_C@_0BK@BFEFMKNA@MIN_UNIT_GOLDEN_AGE_TURNS?$AA@ DB 'MIN_UNIT_GOLDEN_AGE'
	DB	'_TURNS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GPHBCMIK@GOLDEN_AGE_GREAT_PEOPLE_MODIFIER@
CONST	SEGMENT
??_C@_0CB@GPHBCMIK@GOLDEN_AGE_GREAT_PEOPLE_MODIFIER@ DB 'GOLDEN_AGE_GREAT'
	DB	'_PEOPLE_MODIFIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EAEONKIK@GOLDEN_AGE_LENGTH?$AA@
CONST	SEGMENT
??_C@_0BC@EAEONKIK@GOLDEN_AGE_LENGTH?$AA@ DB 'GOLDEN_AGE_LENGTH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FDPKCLMG@GOLDEN_AGE_UNITS_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BM@FDPKCLMG@GOLDEN_AGE_UNITS_MULTIPLIER?$AA@ DB 'GOLDEN_AGE_UNITS_'
	DB	'MULTIPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PDIODPFD@BASE_GOLDEN_AGE_UNITS?$AA@
CONST	SEGMENT
??_C@_0BG@PDIODPFD@BASE_GOLDEN_AGE_UNITS?$AA@ DB 'BASE_GOLDEN_AGE_UNITS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PBBMEIKM@GOLDEN_AGE_VISIBLE_THRESHOLD_DIV@
CONST	SEGMENT
??_C@_0CF@PBBMEIKM@GOLDEN_AGE_VISIBLE_THRESHOLD_DIV@ DB 'GOLDEN_AGE_VISIB'
	DB	'LE_THRESHOLD_DIVISOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JNEMLIPP@GOLDEN_AGE_EACH_GA_ADDITIONAL_HA@
CONST	SEGMENT
??_C@_0CI@JNEMLIPP@GOLDEN_AGE_EACH_GA_ADDITIONAL_HA@ DB 'GOLDEN_AGE_EACH_'
	DB	'GA_ADDITIONAL_HAPPINESS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FDDKIAJH@GOLDEN_AGE_THRESHOLD_CITY_MULTIP@
CONST	SEGMENT
??_C@_0CF@FDDKIAJH@GOLDEN_AGE_THRESHOLD_CITY_MULTIP@ DB 'GOLDEN_AGE_THRES'
	DB	'HOLD_CITY_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JDAEHAEG@GOLDEN_AGE_BASE_THRESHOLD_HAPPIN@
CONST	SEGMENT
??_C@_0CE@JDAEHAEG@GOLDEN_AGE_BASE_THRESHOLD_HAPPIN@ DB 'GOLDEN_AGE_BASE_'
	DB	'THRESHOLD_HAPPINESS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MELEDHPL@DEFICIT_UNIT_DISBANDING_THRESHOL@
CONST	SEGMENT
??_C@_0CC@MELEDHPL@DEFICIT_UNIT_DISBANDING_THRESHOL@ DB 'DEFICIT_UNIT_DIS'
	DB	'BANDING_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PACKIBHI@TRADE_ROUTE_CITY_POP_GOLD_MULTIP@
CONST	SEGMENT
??_C@_0CF@PACKIBHI@TRADE_ROUTE_CITY_POP_GOLD_MULTIP@ DB 'TRADE_ROUTE_CITY'
	DB	'_POP_GOLD_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OEKMOFHJ@TRADE_ROUTE_CAPITAL_POP_GOLD_MUL@
CONST	SEGMENT
??_C@_0CI@OEKMOFHJ@TRADE_ROUTE_CAPITAL_POP_GOLD_MUL@ DB 'TRADE_ROUTE_CAPI'
	DB	'TAL_POP_GOLD_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EKFAOMNN@TRADE_ROUTE_BASE_GOLD?$AA@
CONST	SEGMENT
??_C@_0BG@EKFAOMNN@TRADE_ROUTE_BASE_GOLD?$AA@ DB 'TRADE_ROUTE_BASE_GOLD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KNHJFFEF@FREE_UNIT_HAPPINESS?$AA@
CONST	SEGMENT
??_C@_0BE@KNHJFFEF@FREE_UNIT_HAPPINESS?$AA@ DB 'FREE_UNIT_HAPPINESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KAJHHHCF@UNIT_MAINTENANCE_GAME_EXPONENT_D@
CONST	SEGMENT
??_C@_0CH@KAJHHHCF@UNIT_MAINTENANCE_GAME_EXPONENT_D@ DB 'UNIT_MAINTENANCE'
	DB	'_GAME_EXPONENT_DIVISOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@ECPAAJHA@UNIT_MAINTENANCE_GAME_MULTIPLIER@
CONST	SEGMENT
??_C@_0CB@ECPAAJHA@UNIT_MAINTENANCE_GAME_MULTIPLIER@ DB 'UNIT_MAINTENANCE'
	DB	'_GAME_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GKHMPLAB@INITIAL_OUTSIDE_UNIT_GOLD_PERCEN@
CONST	SEGMENT
??_C@_0CC@GKHMPLAB@INITIAL_OUTSIDE_UNIT_GOLD_PERCEN@ DB 'INITIAL_OUTSIDE_'
	DB	'UNIT_GOLD_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CHODOAJO@INITIAL_FREE_OUTSIDE_UNITS?$AA@
CONST	SEGMENT
??_C@_0BL@CHODOAJO@INITIAL_FREE_OUTSIDE_UNITS?$AA@ DB 'INITIAL_FREE_OUTSI'
	DB	'DE_UNITS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JDICOOON@INITIAL_GOLD_PER_UNIT_TIMES_100?$AA@
CONST	SEGMENT
??_C@_0CA@JDICOOON@INITIAL_GOLD_PER_UNIT_TIMES_100?$AA@ DB 'INITIAL_GOLD_'
	DB	'PER_UNIT_TIMES_100', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NKPFAEOF@LAKE_MAX_AREA_SIZE?$AA@
CONST	SEGMENT
??_C@_0BD@NKPFAEOF@LAKE_MAX_AREA_SIZE?$AA@ DB 'LAKE_MAX_AREA_SIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@COLODCN@RIVER_SOURCE_MIN_SEAWATER_RANGE?$AA@
CONST	SEGMENT
??_C@_0CA@COLODCN@RIVER_SOURCE_MIN_SEAWATER_RANGE?$AA@ DB 'RIVER_SOURCE_M'
	DB	'IN_SEAWATER_RANGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FBAMIKFK@RIVER_SOURCE_MIN_RIVER_RANGE?$AA@
CONST	SEGMENT
??_C@_0BN@FBAMIKFK@RIVER_SOURCE_MIN_RIVER_RANGE?$AA@ DB 'RIVER_SOURCE_MIN'
	DB	'_RIVER_RANGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FCMBINKG@PLOTS_PER_RIVER_EDGE?$AA@
CONST	SEGMENT
??_C@_0BF@FCMBINKG@PLOTS_PER_RIVER_EDGE?$AA@ DB 'PLOTS_PER_RIVER_EDGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LGHBKHKI@LAKE_PLOT_RAND?$AA@
CONST	SEGMENT
??_C@_0P@LGHBKHKI@LAKE_PLOT_RAND?$AA@ DB 'LAKE_PLOT_RAND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BPGAHJPD@NAVAL_COMBAT_DEFENDER_STRENGTH_M@
CONST	SEGMENT
??_C@_0CK@BPGAHJPD@NAVAL_COMBAT_DEFENDER_STRENGTH_M@ DB 'NAVAL_COMBAT_DEF'
	DB	'ENDER_STRENGTH_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IGGFKCLJ@NONCOMBAT_UNIT_RANGED_DAMAGE?$AA@
CONST	SEGMENT
??_C@_0BN@IGGFKCLJ@NONCOMBAT_UNIT_RANGED_DAMAGE?$AA@ DB 'NONCOMBAT_UNIT_R'
	DB	'ANGED_DAMAGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HEBJJADE@COMBAT_DAMAGE?$AA@
CONST	SEGMENT
??_C@_0O@HEBJJADE@COMBAT_DAMAGE?$AA@ DB 'COMBAT_DAMAGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@POCAGCLC@MIN_TIMER_UNIT_DOUBLE_MOVES?$AA@
CONST	SEGMENT
??_C@_0BM@POCAGCLC@MIN_TIMER_UNIT_DOUBLE_MOVES?$AA@ DB 'MIN_TIMER_UNIT_DO'
	DB	'UBLE_MOVES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OMJFBHCN@CONSCRIPT_POPULATION_PER_COST?$AA@
CONST	SEGMENT
??_C@_0BO@OMJFBHCN@CONSCRIPT_POPULATION_PER_COST?$AA@ DB 'CONSCRIPT_POPUL'
	DB	'ATION_PER_COST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CABCKPBC@CONSCRIPT_MIN_CITY_POPULATION?$AA@
CONST	SEGMENT
??_C@_0BO@CABCKPBC@CONSCRIPT_MIN_CITY_POPULATION?$AA@ DB 'CONSCRIPT_MIN_C'
	DB	'ITY_POPULATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LLGOJJCC@POLICY_ATTACK_BONUS_MOD?$AA@
CONST	SEGMENT
??_C@_0BI@LLGOJJCC@POLICY_ATTACK_BONUS_MOD?$AA@ DB 'POLICY_ATTACK_BONUS_M'
	DB	'OD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JAAEHECI@BONUS_PER_ADJACENT_FRIEND?$AA@
CONST	SEGMENT
??_C@_0BK@JAAEHECI@BONUS_PER_ADJACENT_FRIEND?$AA@ DB 'BONUS_PER_ADJACENT_'
	DB	'FRIEND', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BNMFAMBN@GREAT_GENERAL_STRENGTH_MOD?$AA@
CONST	SEGMENT
??_C@_0BL@BNMFAMBN@GREAT_GENERAL_STRENGTH_MOD?$AA@ DB 'GREAT_GENERAL_STRE'
	DB	'NGTH_MOD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MOHPNJFB@GREAT_GENERAL_RANGE?$AA@
CONST	SEGMENT
??_C@_0BE@MOHPNJFB@GREAT_GENERAL_RANGE?$AA@ DB 'GREAT_GENERAL_RANGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FCGDGMIO@NEW_HURRY_MODIFIER?$AA@
CONST	SEGMENT
??_C@_0BD@FCGDGMIO@NEW_HURRY_MODIFIER?$AA@ DB 'NEW_HURRY_MODIFIER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GPJNMKGI@RESOURCE_DEMAND_COUNTDOWN_RAND?$AA@
CONST	SEGMENT
??_C@_0BP@GPJNMKGI@RESOURCE_DEMAND_COUNTDOWN_RAND?$AA@ DB 'RESOURCE_DEMAN'
	DB	'D_COUNTDOWN_RAND', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CMILENIC@RESOURCE_DEMAND_COUNTDOWN_CAPITA@
CONST	SEGMENT
??_C@_0CG@CMILENIC@RESOURCE_DEMAND_COUNTDOWN_CAPITA@ DB 'RESOURCE_DEMAND_'
	DB	'COUNTDOWN_CAPITAL_ADD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CJIFMII@RESOURCE_DEMAND_COUNTDOWN_BASE?$AA@
CONST	SEGMENT
??_C@_0BP@CJIFMII@RESOURCE_DEMAND_COUNTDOWN_BASE?$AA@ DB 'RESOURCE_DEMAND'
	DB	'_COUNTDOWN_BASE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HCKBIGIK@INDUSTRIAL_ROUTE_PRODUCTION_MOD?$AA@
CONST	SEGMENT
??_C@_0CA@HCKBIGIK@INDUSTRIAL_ROUTE_PRODUCTION_MOD?$AA@ DB 'INDUSTRIAL_RO'
	DB	'UTE_PRODUCTION_MOD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NGNMBLOP@WLTKD_GROWTH_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BI@NGNMBLOP@WLTKD_GROWTH_MULTIPLIER?$AA@ DB 'WLTKD_GROWTH_MULTIPLI'
	DB	'ER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GKHAKJGH@VERY_UNHAPPY_MAX_GOLD_PENALTY?$AA@
CONST	SEGMENT
??_C@_0BO@GKHAKJGH@VERY_UNHAPPY_MAX_GOLD_PENALTY?$AA@ DB 'VERY_UNHAPPY_MA'
	DB	'X_GOLD_PENALTY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MPDPAPKP@VERY_UNHAPPY_GOLD_PENALTY_PER_UN@
CONST	SEGMENT
??_C@_0CG@MPDPAPKP@VERY_UNHAPPY_GOLD_PENALTY_PER_UN@ DB 'VERY_UNHAPPY_GOL'
	DB	'D_PENALTY_PER_UNHAPPY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KNOHBPCK@VERY_UNHAPPY_MAX_PRODUCTION_PENA@
CONST	SEGMENT
??_C@_0CE@KNOHBPCK@VERY_UNHAPPY_MAX_PRODUCTION_PENA@ DB 'VERY_UNHAPPY_MAX'
	DB	'_PRODUCTION_PENALTY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@EJNPGPEL@VERY_UNHAPPY_PRODUCTION_PENALTY_@
CONST	SEGMENT
??_C@_0CM@EJNPGPEL@VERY_UNHAPPY_PRODUCTION_PENALTY_@ DB 'VERY_UNHAPPY_PRO'
	DB	'DUCTION_PENALTY_PER_UNHAPPY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HIJOLODN@STRATEGIC_RESOURCE_EXHAUSTED_PEN@
CONST	SEGMENT
??_C@_0CF@HIJOLODN@STRATEGIC_RESOURCE_EXHAUSTED_PEN@ DB 'STRATEGIC_RESOUR'
	DB	'CE_EXHAUSTED_PENALTY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OOFJGLCN@VERY_UNHAPPY_MAX_COMBAT_PENALTY?$AA@
CONST	SEGMENT
??_C@_0CA@OOFJGLCN@VERY_UNHAPPY_MAX_COMBAT_PENALTY?$AA@ DB 'VERY_UNHAPPY_'
	DB	'MAX_COMBAT_PENALTY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EDGHMOBH@VERY_UNHAPPY_COMBAT_PENALTY_PER_@
CONST	SEGMENT
??_C@_0CI@EDGHMOBH@VERY_UNHAPPY_COMBAT_PENALTY_PER_@ DB 'VERY_UNHAPPY_COM'
	DB	'BAT_PENALTY_PER_UNHAPPY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IMCPEHEO@REVOLT_COUNTER_MIN?$AA@
CONST	SEGMENT
??_C@_0BD@IMCPEHEO@REVOLT_COUNTER_MIN?$AA@ DB 'REVOLT_COUNTER_MIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DNGHOAAF@UPRISING_NUM_CITY_COUNT?$AA@
CONST	SEGMENT
??_C@_0BI@DNGHOAAF@UPRISING_NUM_CITY_COUNT?$AA@ DB 'UPRISING_NUM_CITY_COU'
	DB	'NT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GPOGFEIH@UPRISING_NUM_BASE?$AA@
CONST	SEGMENT
??_C@_0BC@GPOGFEIH@UPRISING_NUM_BASE?$AA@ DB 'UPRISING_NUM_BASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EJDJABKB@UPRISING_COUNTER_POSSIBLE?$AA@
CONST	SEGMENT
??_C@_0BK@EJDJABKB@UPRISING_COUNTER_POSSIBLE?$AA@ DB 'UPRISING_COUNTER_PO'
	DB	'SSIBLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PJKIMMOF@UPRISING_COUNTER_MIN?$AA@
CONST	SEGMENT
??_C@_0BF@PJKIMMOF@UPRISING_COUNTER_MIN?$AA@ DB 'UPRISING_COUNTER_MIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OEGOAIFM@SUPER_UNHAPPY_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BI@OEGOAIFM@SUPER_UNHAPPY_THRESHOLD?$AA@ DB 'SUPER_UNHAPPY_THRESHO'
	DB	'LD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LAEMEBOI@VERY_UNHAPPY_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BH@LAEMEBOI@VERY_UNHAPPY_THRESHOLD?$AA@ DB 'VERY_UNHAPPY_THRESHOLD'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JOINNBN@VERY_UNHAPPY_CANT_TRAIN_SETTLERS@
CONST	SEGMENT
??_C@_0CB@JOINNBN@VERY_UNHAPPY_CANT_TRAIN_SETTLERS@ DB 'VERY_UNHAPPY_CANT'
	DB	'_TRAIN_SETTLERS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NNIMCKGP@VERY_UNHAPPY_GROWTH_PENALTY?$AA@
CONST	SEGMENT
??_C@_0BM@NNIMCKGP@VERY_UNHAPPY_GROWTH_PENALTY?$AA@ DB 'VERY_UNHAPPY_GROW'
	DB	'TH_PENALTY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FKHEHMFG@UNHAPPY_GROWTH_PENALTY?$AA@
CONST	SEGMENT
??_C@_0BH@FKHEHMFG@UNHAPPY_GROWTH_PENALTY?$AA@ DB 'UNHAPPY_GROWTH_PENALTY'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FKKNACDN@UNHAPPINESS_PER_CAPTURED_CITY?$AA@
CONST	SEGMENT
??_C@_0BO@FKKNACDN@UNHAPPINESS_PER_CAPTURED_CITY?$AA@ DB 'UNHAPPINESS_PER'
	DB	'_CAPTURED_CITY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OEHEJCCH@UNHAPPINESS_PER_CITY?$AA@
CONST	SEGMENT
??_C@_0BF@OEHEJCCH@UNHAPPINESS_PER_CITY?$AA@ DB 'UNHAPPINESS_PER_CITY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FBJFDOOJ@UNHAPPINESS_PER_OCCUPIED_POPULAT@
CONST	SEGMENT
??_C@_0CE@FBJFDOOJ@UNHAPPINESS_PER_OCCUPIED_POPULAT@ DB 'UNHAPPINESS_PER_'
	DB	'OCCUPIED_POPULATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LCIMIIIJ@UNHAPPINESS_PER_POPULATION?$AA@
CONST	SEGMENT
??_C@_0BL@LCIMIIIJ@UNHAPPINESS_PER_POPULATION?$AA@ DB 'UNHAPPINESS_PER_PO'
	DB	'PULATION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NDBPIOEB@HAPPINESS_PER_EXTRA_LUXURY?$AA@
CONST	SEGMENT
??_C@_0BL@NDBPIOEB@HAPPINESS_PER_EXTRA_LUXURY?$AA@ DB 'HAPPINESS_PER_EXTR'
	DB	'A_LUXURY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LDODFEFA@HAPPINESS_PER_NATURAL_WONDER?$AA@
CONST	SEGMENT
??_C@_0BN@LDODFEFA@HAPPINESS_PER_NATURAL_WONDER?$AA@ DB 'HAPPINESS_PER_NA'
	DB	'TURAL_WONDER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GGKLFPEJ@HAPPINESS_PER_CITY_WITH_STATE_RE@
CONST	SEGMENT
??_C@_0CH@GGKLFPEJ@HAPPINESS_PER_CITY_WITH_STATE_RE@ DB 'HAPPINESS_PER_CI'
	DB	'TY_WITH_STATE_RELIGION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IPEAJEHO@FOOD_CONSUMPTION_PER_POPULATION?$AA@
CONST	SEGMENT
??_C@_0CA@IPEAJEHO@FOOD_CONSUMPTION_PER_POPULATION?$AA@ DB 'FOOD_CONSUMPT'
	DB	'ION_PER_POPULATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PFGBLLNA@BASE_CITY_GROWTH_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BL@PFGBLLNA@BASE_CITY_GROWTH_THRESHOLD?$AA@ DB 'BASE_CITY_GROWTH_T'
	DB	'HRESHOLD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LEHMNGCD@CITY_CAPTURE_POPULATION_PERCENT?$AA@
CONST	SEGMENT
??_C@_0CA@LEHMNGCD@CITY_CAPTURE_POPULATION_PERCENT?$AA@ DB 'CITY_CAPTURE_'
	DB	'POPULATION_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NOCCADII@BASE_CITY_AIR_STACKING?$AA@
CONST	SEGMENT
??_C@_0BH@NOCCADII@BASE_CITY_AIR_STACKING?$AA@ DB 'BASE_CITY_AIR_STACKING'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DBAKNMDB@INITIAL_CITY_POPULATION?$AA@
CONST	SEGMENT
??_C@_0BI@DBAKNMDB@INITIAL_CITY_POPULATION?$AA@ DB 'INITIAL_CITY_POPULATI'
	DB	'ON', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KHHCOKPO@MAX_BUILDINGS_PER_CITY?$AA@
CONST	SEGMENT
??_C@_0BH@KHHCOKPO@MAX_BUILDINGS_PER_CITY?$AA@ DB 'MAX_BUILDINGS_PER_CITY'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KBMDIEPK@MAX_NATIONAL_WONDERS_PER_CITY_FO@
CONST	SEGMENT
??_C@_0CG@KBMDIEPK@MAX_NATIONAL_WONDERS_PER_CITY_FO@ DB 'MAX_NATIONAL_WON'
	DB	'DERS_PER_CITY_FOR_OCC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OPMKPNNP@MAX_NATIONAL_WONDERS_PER_CITY?$AA@
CONST	SEGMENT
??_C@_0BO@OPMKPNNP@MAX_NATIONAL_WONDERS_PER_CITY?$AA@ DB 'MAX_NATIONAL_WO'
	DB	'NDERS_PER_CITY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CKOJICBM@MAX_TEAM_WONDERS_PER_CITY?$AA@
CONST	SEGMENT
??_C@_0BK@CKOJICBM@MAX_TEAM_WONDERS_PER_CITY?$AA@ DB 'MAX_TEAM_WONDERS_PE'
	DB	'R_CITY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MMFEGCH@MAX_WORLD_WONDERS_PER_CITY?$AA@
CONST	SEGMENT
??_C@_0BL@MMFEGCH@MAX_WORLD_WONDERS_PER_CITY?$AA@ DB 'MAX_WORLD_WONDERS_P'
	DB	'ER_CITY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NDCAHONM@BASE_RESEARCH_RATE?$AA@
CONST	SEGMENT
??_C@_0BD@NDCAHONM@BASE_RESEARCH_RATE?$AA@ DB 'BASE_RESEARCH_RATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CENACFEC@NUM_BUILDING_RESOURCE_PREREQS?$AA@
CONST	SEGMENT
??_C@_0BO@CENACFEC@NUM_BUILDING_RESOURCE_PREREQS?$AA@ DB 'NUM_BUILDING_RE'
	DB	'SOURCE_PREREQS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NDPJDGHJ@NUM_BUILDING_AND_TECH_PREREQS?$AA@
CONST	SEGMENT
??_C@_0BO@NDPJDGHJ@NUM_BUILDING_AND_TECH_PREREQS?$AA@ DB 'NUM_BUILDING_AN'
	DB	'D_TECH_PREREQS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HNICADIJ@NUM_UNIT_AND_TECH_PREREQS?$AA@
CONST	SEGMENT
??_C@_0BK@HNICADIJ@NUM_UNIT_AND_TECH_PREREQS?$AA@ DB 'NUM_UNIT_AND_TECH_P'
	DB	'REREQS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DIMAFOKE@NUM_AND_TECH_PREREQS?$AA@
CONST	SEGMENT
??_C@_0BF@DIMAFOKE@NUM_AND_TECH_PREREQS?$AA@ DB 'NUM_AND_TECH_PREREQS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CMJKNLGN@NUM_OR_TECH_PREREQS?$AA@
CONST	SEGMENT
??_C@_0BE@CMJKNLGN@NUM_OR_TECH_PREREQS?$AA@ DB 'NUM_OR_TECH_PREREQS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GBNBPGJ@NUM_VICTORY_POINT_AWARDS?$AA@
CONST	SEGMENT
??_C@_0BJ@GBNBPGJ@NUM_VICTORY_POINT_AWARDS?$AA@ DB 'NUM_VICTORY_POINT_AWA'
	DB	'RDS', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NLMGFKAN@VICTORY_POINTS_NEEDED_TO_WIN?$AA@
CONST	SEGMENT
??_C@_0BN@NLMGFKAN@VICTORY_POINTS_NEEDED_TO_WIN?$AA@ DB 'VICTORY_POINTS_N'
	DB	'EEDED_TO_WIN', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KGJGMDAN@NUM_POLICY_BRANCHES_ALLOWED?$AA@
CONST	SEGMENT
??_C@_0BM@KGJGMDAN@NUM_POLICY_BRANCHES_ALLOWED?$AA@ DB 'NUM_POLICY_BRANCH'
	DB	'ES_ALLOWED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@MIBKONDN@OWNERSHIP_SCORE_DURATION_THRESHO@
CONST	SEGMENT
??_C@_0CD@MIBKONDN@OWNERSHIP_SCORE_DURATION_THRESHO@ DB 'OWNERSHIP_SCORE_'
	DB	'DURATION_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MCDIEAPN@MIN_CITY_RANGE?$AA@
CONST	SEGMENT
??_C@_0P@MCDIEAPN@MIN_CITY_RANGE?$AA@ DB 'MIN_CITY_RANGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KDJMHLFO@MIN_CIV_STARTING_DISTANCE?$AA@
CONST	SEGMENT
??_C@_0BK@KDJMHLFO@MIN_CIV_STARTING_DISTANCE?$AA@ DB 'MIN_CIV_STARTING_DI'
	DB	'STANCE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OIKAFPMP@STARTING_DISTANCE_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BK@OIKAFPMP@STARTING_DISTANCE_PERCENT?$AA@ DB 'STARTING_DISTANCE_P'
	DB	'ERCENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PDDEADG@MOVE_DENOMINATOR?$AA@
CONST	SEGMENT
??_C@_0BB@PDDEADG@MOVE_DENOMINATOR?$AA@ DB 'MOVE_DENOMINATOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EMAADAGH@MAX_YIELD_STACK?$AA@
CONST	SEGMENT
??_C@_0BA@EMAADAGH@MAX_YIELD_STACK?$AA@ DB 'MAX_YIELD_STACK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IFLEADOJ@SEAWATER_SEE_THROUGH_CHANGE?$AA@
CONST	SEGMENT
??_C@_0BM@IFLEADOJ@SEAWATER_SEE_THROUGH_CHANGE?$AA@ DB 'SEAWATER_SEE_THRO'
	DB	'UGH_CHANGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LIEEONCG@SEAWATER_SEE_FROM_CHANGE?$AA@
CONST	SEGMENT
??_C@_0BJ@LIEEONCG@SEAWATER_SEE_FROM_CHANGE?$AA@ DB 'SEAWATER_SEE_FROM_CH'
	DB	'ANGE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EOGHIBGG@HILLS_SEE_THROUGH_CHANGE?$AA@
CONST	SEGMENT
??_C@_0BJ@EOGHIBGG@HILLS_SEE_THROUGH_CHANGE?$AA@ DB 'HILLS_SEE_THROUGH_CH'
	DB	'ANGE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GDKAKHHI@HILLS_SEE_FROM_CHANGE?$AA@
CONST	SEGMENT
??_C@_0BG@GDKAKHHI@HILLS_SEE_FROM_CHANGE?$AA@ DB 'HILLS_SEE_FROM_CHANGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EMCLNOIJ@MOUNTAIN_SEE_THROUGH_CHANGE?$AA@
CONST	SEGMENT
??_C@_0BM@EMCLNOIJ@MOUNTAIN_SEE_THROUGH_CHANGE?$AA@ DB 'MOUNTAIN_SEE_THRO'
	DB	'UGH_CHANGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HFBPDBDA@MOUNTAIN_SEE_FROM_CHANGE?$AA@
CONST	SEGMENT
??_C@_0BJ@HFBPDBDA@MOUNTAIN_SEE_FROM_CHANGE?$AA@ DB 'MOUNTAIN_SEE_FROM_CH'
	DB	'ANGE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MBJMOGP@AIR_UNIT_REBASE_RANGE_MULTIPLIER@
CONST	SEGMENT
??_C@_0CB@MBJMOGP@AIR_UNIT_REBASE_RANGE_MULTIPLIER@ DB 'AIR_UNIT_REBASE_R'
	DB	'ANGE_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PHLLADHB@UNIT_VISIBILITY_RANGE?$AA@
CONST	SEGMENT
??_C@_0BG@PHLLADHB@UNIT_VISIBILITY_RANGE?$AA@ DB 'UNIT_VISIBILITY_RANGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NMNFGIBJ@PLOT_VISIBILITY_RANGE?$AA@
CONST	SEGMENT
??_C@_0BG@NMNFGIBJ@PLOT_VISIBILITY_RANGE?$AA@ DB 'PLOT_VISIBILITY_RANGE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CPEOKDPJ@RECON_VISIBILITY_RANGE?$AA@
CONST	SEGMENT
??_C@_0BH@CPEOKDPJ@RECON_VISIBILITY_RANGE?$AA@ DB 'RECON_VISIBILITY_RANGE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CIDMFMJ@HIDDEN_START_TURN_OFFSET?$AA@
CONST	SEGMENT
??_C@_0BJ@CIDMFMJ@HIDDEN_START_TURN_OFFSET?$AA@ DB 'HIDDEN_START_TURN_OFF'
	DB	'SET', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@ECAOKLCM@WEEKS_PER_MONTHS?$AA@
CONST	SEGMENT
??_C@_0BB@ECAOKLCM@WEEKS_PER_MONTHS?$AA@ DB 'WEEKS_PER_MONTHS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FBGPJKOJ@START_YEAR?$AA@
CONST	SEGMENT
??_C@_0L@FBGPJKOJ@START_YEAR?$AA@ DB 'START_YEAR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CAMOOAJE@EVENT_MESSAGE_TIME?$AA@
CONST	SEGMENT
??_C@_0BD@CAMOOAJE@EVENT_MESSAGE_TIME?$AA@ DB 'EVENT_MESSAGE_TIME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MAMNEHPJ@NAVAL_PLOT_BLOCKADE_RANGE?$AA@
CONST	SEGMENT
??_C@_0BK@MAMNEHPJ@NAVAL_PLOT_BLOCKADE_RANGE?$AA@ DB 'NAVAL_PLOT_BLOCKADE'
	DB	'_RANGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PCPKJFAP@CAN_WORK_WATER_FROM_GAME_START?$AA@
CONST	SEGMENT
??_C@_0BP@PCPKJFAP@CAN_WORK_WATER_FROM_GAME_START?$AA@ DB 'CAN_WORK_WATER'
	DB	'_FROM_GAME_START', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EMBMCJEJ@DEMAND_RAND?$AA@
CONST	SEGMENT
??_C@_0M@EMBMCJEJ@DEMAND_RAND?$AA@ DB 'DEMAND_RAND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LOJNPKAD@WANT_RESEARCH_AGREEMENT_RAND?$AA@
CONST	SEGMENT
??_C@_0BN@LOJNPKAD@WANT_RESEARCH_AGREEMENT_RAND?$AA@ DB 'WANT_RESEARCH_AG'
	DB	'REEMENT_RAND', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HKJOCJBN@COMMON_FOE_VALUE_PER_OPINION_WEI@
CONST	SEGMENT
??_C@_0CE@HKJOCJBN@COMMON_FOE_VALUE_PER_OPINION_WEI@ DB 'COMMON_FOE_VALUE'
	DB	'_PER_OPINION_WEIGHT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JGAIMPBB@COMMON_FOE_VALUE_PER_TURN_DECAY?$AA@
CONST	SEGMENT
??_C@_0CA@JGAIMPBB@COMMON_FOE_VALUE_PER_TURN_DECAY?$AA@ DB 'COMMON_FOE_VA'
	DB	'LUE_PER_TURN_DECAY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JICBPKEO@DEAL_VALUE_PER_OPINION_WEIGHT?$AA@
CONST	SEGMENT
??_C@_0BO@JICBPKEO@DEAL_VALUE_PER_OPINION_WEIGHT?$AA@ DB 'DEAL_VALUE_PER_'
	DB	'OPINION_WEIGHT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LEMOCCNI@DEAL_VALUE_PER_TURN_DECAY?$AA@
CONST	SEGMENT
??_C@_0BK@LEMOCCNI@DEAL_VALUE_PER_TURN_DECAY?$AA@ DB 'DEAL_VALUE_PER_TURN'
	DB	'_DECAY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BOLOKBPI@DECLARED_WAR_ON_FRIEND_PER_OPINI@
CONST	SEGMENT
??_C@_0CK@BOLOKBPI@DECLARED_WAR_ON_FRIEND_PER_OPINI@ DB 'DECLARED_WAR_ON_'
	DB	'FRIEND_PER_OPINION_WEIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LENHEJDM@DECLARED_WAR_ON_FRIEND_PER_TURN_@
CONST	SEGMENT
??_C@_0CG@LENHEJDM@DECLARED_WAR_ON_FRIEND_PER_TURN_@ DB 'DECLARED_WAR_ON_'
	DB	'FRIEND_PER_TURN_DECAY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KDGLKGFH@OPINION_WEIGHT_BORDER_PROMISE_IG@
CONST	SEGMENT
??_C@_0CK@KDGLKGFH@OPINION_WEIGHT_BORDER_PROMISE_IG@ DB 'OPINION_WEIGHT_B'
	DB	'ORDER_PROMISE_IGNORED_MAX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@FDDJFOGH@IGNORED_BORDER_PROMISE_PER_OPINI@
CONST	SEGMENT
??_C@_0CK@FDDJFOGH@IGNORED_BORDER_PROMISE_PER_OPINI@ DB 'IGNORED_BORDER_P'
	DB	'ROMISE_PER_OPINION_WEIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HFNGFGKK@BORDER_PROMISE_IGNORED_PER_TURN_@
CONST	SEGMENT
??_C@_0CG@HFNGFGKK@BORDER_PROMISE_IGNORED_PER_TURN_@ DB 'BORDER_PROMISE_I'
	DB	'GNORED_PER_TURN_DECAY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OEPOLPBP@OPINION_WEIGHT_BORDER_PROMISE_BR@
CONST	SEGMENT
??_C@_0CI@OEPOLPBP@OPINION_WEIGHT_BORDER_PROMISE_BR@ DB 'OPINION_WEIGHT_B'
	DB	'ORDER_PROMISE_BROKE_MAX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JDHFBGPC@BROKEN_BORDER_PROMISE_PER_OPINIO@
CONST	SEGMENT
??_C@_0CJ@JDHFBGPC@BROKEN_BORDER_PROMISE_PER_OPINIO@ DB 'BROKEN_BORDER_PR'
	DB	'OMISE_PER_OPINION_WEIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PBLCGKKE@BORDER_PROMISE_BROKEN_PER_TURN_D@
CONST	SEGMENT
??_C@_0CF@PBLCGKKE@BORDER_PROMISE_BROKEN_PER_TURN_D@ DB 'BORDER_PROMISE_B'
	DB	'ROKEN_PER_TURN_DECAY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GIBNOAFI@BORDER_PROMISE_TURNS_EFFECTIVE?$AA@
CONST	SEGMENT
??_C@_0BP@GIBNOAFI@BORDER_PROMISE_TURNS_EFFECTIVE?$AA@ DB 'BORDER_PROMISE'
	DB	'_TURNS_EFFECTIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@HEOCJGDH@OPINION_WEIGHT_EXPANSION_PROMISE@
CONST	SEGMENT
??_C@_0CN@HEOCJGDH@OPINION_WEIGHT_EXPANSION_PROMISE@ DB 'OPINION_WEIGHT_E'
	DB	'XPANSION_PROMISE_IGNORED_MAX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DEGNECND@IGNORED_EXPANSION_PROMISE_PER_OP@
CONST	SEGMENT
??_C@_0CN@DEGNECND@IGNORED_EXPANSION_PROMISE_PER_OP@ DB 'IGNORED_EXPANSIO'
	DB	'N_PROMISE_PER_OPINION_WEIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NGJACNLI@EXPANSION_PROMISE_IGNORED_PER_TU@
CONST	SEGMENT
??_C@_0CJ@NGJACNLI@EXPANSION_PROMISE_IGNORED_PER_TU@ DB 'EXPANSION_PROMIS'
	DB	'E_IGNORED_PER_TURN_DECAY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LIDBIAAM@OPINION_WEIGHT_EXPANSION_PROMISE@
CONST	SEGMENT
??_C@_0CL@LIDBIAAM@OPINION_WEIGHT_EXPANSION_PROMISE@ DB 'OPINION_WEIGHT_E'
	DB	'XPANSION_PROMISE_BROKE_MAX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IIHPPALO@BROKEN_EXPANSION_PROMISE_PER_OPI@
CONST	SEGMENT
??_C@_0CM@IIHPPALO@BROKEN_EXPANSION_PROMISE_PER_OPI@ DB 'BROKEN_EXPANSION'
	DB	'_PROMISE_PER_OPINION_WEIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LMJAMMG@EXPANSION_PROMISE_BROKEN_PER_TUR@
CONST	SEGMENT
??_C@_0CI@LMJAMMG@EXPANSION_PROMISE_BROKEN_PER_TUR@ DB 'EXPANSION_PROMISE'
	DB	'_BROKEN_PER_TURN_DECAY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OABNOEAA@EXPANSION_PROMISE_TURNS_EFFECTIV@
CONST	SEGMENT
??_C@_0CC@OABNOEAA@EXPANSION_PROMISE_TURNS_EFFECTIV@ DB 'EXPANSION_PROMIS'
	DB	'E_TURNS_EFFECTIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FGFCDPIM@EXPANSION_BICKER_TIMEOUT?$AA@
CONST	SEGMENT
??_C@_0BJ@FGFCDPIM@EXPANSION_BICKER_TIMEOUT?$AA@ DB 'EXPANSION_BICKER_TIM'
	DB	'EOUT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IOEFDBGK@EACH_GOLD_PER_TURN_VALUE_PERCENT@
CONST	SEGMENT
??_C@_0CB@IOEFDBGK@EACH_GOLD_PER_TURN_VALUE_PERCENT@ DB 'EACH_GOLD_PER_TU'
	DB	'RN_VALUE_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GHALOGEB@EACH_GOLD_VALUE_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BI@GHALOGEB@EACH_GOLD_VALUE_PERCENT?$AA@ DB 'EACH_GOLD_VALUE_PERCE'
	DB	'NT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HHDCCLBP@DOF_EXPIRATION_TIME?$AA@
CONST	SEGMENT
??_C@_0BE@HHDCCLBP@DOF_EXPIRATION_TIME?$AA@ DB 'DOF_EXPIRATION_TIME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IKKNHIGG@DENUNCIATION_EXPIRATION_TIME?$AA@
CONST	SEGMENT
??_C@_0BN@IKKNHIGG@DENUNCIATION_EXPIRATION_TIME?$AA@ DB 'DENUNCIATION_EXP'
	DB	'IRATION_TIME', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MAEKHHOJ@DOF_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0O@MAEKHHOJ@DOF_THRESHOLD?$AA@ DB 'DOF_THRESHOLD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OJBNLAEK@DOF_TURN_BUFFER?$AA@
CONST	SEGMENT
??_C@_0BA@OJBNLAEK@DOF_TURN_BUFFER?$AA@ DB 'DOF_TURN_BUFFER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GNJFHLKJ@DONT_SETTLE_MOD_MILITARY_POSTURE@
CONST	SEGMENT
??_C@_0CM@GNJFHLKJ@DONT_SETTLE_MOD_MILITARY_POSTURE@ DB 'DONT_SETTLE_MOD_'
	DB	'MILITARY_POSTURE_INCREDIBLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GPLNOCEH@DONT_SETTLE_MOD_MILITARY_POSTURE@
CONST	SEGMENT
??_C@_0CG@GPLNOCEH@DONT_SETTLE_MOD_MILITARY_POSTURE@ DB 'DONT_SETTLE_MOD_'
	DB	'MILITARY_POSTURE_HIGH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EHKBKFB@DONT_SETTLE_MOD_MILITARY_POSTURE@
CONST	SEGMENT
??_C@_0CI@EHKBKFB@DONT_SETTLE_MOD_MILITARY_POSTURE@ DB 'DONT_SETTLE_MOD_M'
	DB	'ILITARY_POSTURE_MEDIUM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LELPJGMA@DONT_SETTLE_MOD_MILITARY_POSTURE@
CONST	SEGMENT
??_C@_0CF@LELPJGMA@DONT_SETTLE_MOD_MILITARY_POSTURE@ DB 'DONT_SETTLE_MOD_'
	DB	'MILITARY_POSTURE_LOW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HPOJANPJ@DONT_SETTLE_MOD_MILITARY_POSTURE@
CONST	SEGMENT
??_C@_0CG@HPOJANPJ@DONT_SETTLE_MOD_MILITARY_POSTURE@ DB 'DONT_SETTLE_MOD_'
	DB	'MILITARY_POSTURE_NONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HHGIIEEK@DONT_SETTLE_STRENGTH_IMMENSE?$AA@
CONST	SEGMENT
??_C@_0BN@HHGIIEEK@DONT_SETTLE_STRENGTH_IMMENSE?$AA@ DB 'DONT_SETTLE_STRE'
	DB	'NGTH_IMMENSE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JFKLIOIK@DONT_SETTLE_STRENGTH_POWERFUL?$AA@
CONST	SEGMENT
??_C@_0BO@JFKLIOIK@DONT_SETTLE_STRENGTH_POWERFUL?$AA@ DB 'DONT_SETTLE_STR'
	DB	'ENGTH_POWERFUL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CNNGMOKP@DONT_SETTLE_STRENGTH_STRONG?$AA@
CONST	SEGMENT
??_C@_0BM@CNNGMOKP@DONT_SETTLE_STRENGTH_STRONG?$AA@ DB 'DONT_SETTLE_STREN'
	DB	'GTH_STRONG', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LMILIFMO@DONT_SETTLE_STRENGTH_AVERAGE?$AA@
CONST	SEGMENT
??_C@_0BN@LMILIFMO@DONT_SETTLE_STRENGTH_AVERAGE?$AA@ DB 'DONT_SETTLE_STRE'
	DB	'NGTH_AVERAGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CAFMIHMC@DONT_SETTLE_STRENGTH_POOR?$AA@
CONST	SEGMENT
??_C@_0BK@CAFMIHMC@DONT_SETTLE_STRENGTH_POOR?$AA@ DB 'DONT_SETTLE_STRENGT'
	DB	'H_POOR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GMFPDPKE@DONT_SETTLE_STRENGTH_WEAK?$AA@
CONST	SEGMENT
??_C@_0BK@GMFPDPKE@DONT_SETTLE_STRENGTH_WEAK?$AA@ DB 'DONT_SETTLE_STRENGT'
	DB	'H_WEAK', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LHCDAHKG@DONT_SETTLE_STRENGTH_PATHETIC?$AA@
CONST	SEGMENT
??_C@_0BO@LHCDAHKG@DONT_SETTLE_STRENGTH_PATHETIC?$AA@ DB 'DONT_SETTLE_STR'
	DB	'ENGTH_PATHETIC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DLDDMBDF@DONT_SETTLE_FRIENDLY?$AA@
CONST	SEGMENT
??_C@_0BF@DLDDMBDF@DONT_SETTLE_FRIENDLY?$AA@ DB 'DONT_SETTLE_FRIENDLY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FHIIDLEP@DONT_SETTLE_FLAVOR_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BO@FHIIDLEP@DONT_SETTLE_FLAVOR_MULTIPLIER?$AA@ DB 'DONT_SETTLE_FLA'
	DB	'VOR_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KPABBKOJ@DONT_SETTLE_FLAVOR_BASE?$AA@
CONST	SEGMENT
??_C@_0BI@KPABBKOJ@DONT_SETTLE_FLAVOR_BASE?$AA@ DB 'DONT_SETTLE_FLAVOR_BA'
	DB	'SE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OGBHKNAM@DONT_SETTLE_RAND?$AA@
CONST	SEGMENT
??_C@_0BB@OGBHKNAM@DONT_SETTLE_RAND?$AA@ DB 'DONT_SETTLE_RAND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@INCJJAAP@DEMAND_TURN_LIMIT_RAND?$AA@
CONST	SEGMENT
??_C@_0BH@INCJJAAP@DEMAND_TURN_LIMIT_RAND?$AA@ DB 'DEMAND_TURN_LIMIT_RAND'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FGEFGJOH@DEMAND_TURN_LIMIT_MIN?$AA@
CONST	SEGMENT
??_C@_0BG@FGEFGJOH@DEMAND_TURN_LIMIT_MIN?$AA@ DB 'DEMAND_TURN_LIMIT_MIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HJELNJLB@COOP_WAR_LOCKED_TURNS_WAR_WEIGHT@
CONST	SEGMENT
??_C@_0CB@HJELNJLB@COOP_WAR_LOCKED_TURNS_WAR_WEIGHT@ DB 'COOP_WAR_LOCKED_'
	DB	'TURNS_WAR_WEIGHT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JJHOLDGE@COOP_WAR_LOCKED_TURNS?$AA@
CONST	SEGMENT
??_C@_0BG@JJHOLDGE@COOP_WAR_LOCKED_TURNS?$AA@ DB 'COOP_WAR_LOCKED_TURNS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FOIGDAHK@COOP_WAR_SOON_COUNTER?$AA@
CONST	SEGMENT
??_C@_0BG@FOIGDAHK@COOP_WAR_SOON_COUNTER?$AA@ DB 'COOP_WAR_SOON_COUNTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HMNJJNIH@STOP_SPYING_MEMORY_TURN_EXPIRATI@
CONST	SEGMENT
??_C@_0CD@HMNJJNIH@STOP_SPYING_MEMORY_TURN_EXPIRATI@ DB 'STOP_SPYING_MEMO'
	DB	'RY_TURN_EXPIRATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LLCDGHMH@IC_MEMORY_TURN_EXPIRATION?$AA@
CONST	SEGMENT
??_C@_0BK@LLCDGHMH@IC_MEMORY_TURN_EXPIRATION?$AA@ DB 'IC_MEMORY_TURN_EXPI'
	DB	'RATION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@DKFMPNBK@VICTORY_DISPUTE_OTHER_PLAYER_GRA@
CONST	SEGMENT
??_C@_0DJ@DKFMPNBK@VICTORY_DISPUTE_OTHER_PLAYER_GRA@ DB 'VICTORY_DISPUTE_'
	DB	'OTHER_PLAYER_GRAND_STRATEGY_MATCH_UNSURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@CFFJEMEE@VICTORY_DISPUTE_OTHER_PLAYER_GRA@
CONST	SEGMENT
??_C@_0DJ@CFFJEMEE@VICTORY_DISPUTE_OTHER_PLAYER_GRA@ DB 'VICTORY_DISPUTE_'
	DB	'OTHER_PLAYER_GRAND_STRATEGY_MATCH_LIKELY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@KBKBGKEN@VICTORY_DISPUTE_OTHER_PLAYER_GRA@
CONST	SEGMENT
??_C@_0DL@KBKBGKEN@VICTORY_DISPUTE_OTHER_PLAYER_GRA@ DB 'VICTORY_DISPUTE_'
	DB	'OTHER_PLAYER_GRAND_STRATEGY_MATCH_POSITIVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OAJCALG@VICTORY_DISPUTE_OTHER_PLAYER_WEA@
CONST	SEGMENT
??_C@_0CM@OAJCALG@VICTORY_DISPUTE_OTHER_PLAYER_WEA@ DB 'VICTORY_DISPUTE_O'
	DB	'THER_PLAYER_WEAK_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IBPDKPMD@VICTORY_DISPUTE_OTHER_PLAYER_STR@
CONST	SEGMENT
??_C@_0CO@IBPDKPMD@VICTORY_DISPUTE_OTHER_PLAYER_STR@ DB 'VICTORY_DISPUTE_'
	DB	'OTHER_PLAYER_STRONG_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CIFNIEHG@VICTORY_DISPUTE_OTHER_PLAYER_FIE@
CONST	SEGMENT
??_C@_0CO@CIFNIEHG@VICTORY_DISPUTE_OTHER_PLAYER_FIE@ DB 'VICTORY_DISPUTE_'
	DB	'OTHER_PLAYER_FIERCE_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CEFHOELJ@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
CONST	SEGMENT
??_C@_0CK@CEFHOELJ@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ DB 'LAND_DISPUTE_CIT'
	DB	'Y_RATIO_EXPANSION_GUESS_2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@DNEMNFPI@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
CONST	SEGMENT
??_C@_0CK@DNEMNFPI@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ DB 'LAND_DISPUTE_CIT'
	DB	'Y_RATIO_EXPANSION_GUESS_3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@HCANEDDP@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
CONST	SEGMENT
??_C@_0CK@HCANEDDP@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ DB 'LAND_DISPUTE_CIT'
	DB	'Y_RATIO_EXPANSION_GUESS_4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@GLBGHCHO@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
CONST	SEGMENT
??_C@_0CK@GLBGHCHO@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ DB 'LAND_DISPUTE_CIT'
	DB	'Y_RATIO_EXPANSION_GUESS_5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EADLCBLN@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
CONST	SEGMENT
??_C@_0CK@EADLCBLN@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ DB 'LAND_DISPUTE_CIT'
	DB	'Y_RATIO_EXPANSION_GUESS_6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@FJCABAPM@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
CONST	SEGMENT
??_C@_0CK@FJCABAPM@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ DB 'LAND_DISPUTE_CIT'
	DB	'Y_RATIO_EXPANSION_GUESS_7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NOLIAMDD@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
CONST	SEGMENT
??_C@_0CK@NOLIAMDD@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ DB 'LAND_DISPUTE_CIT'
	DB	'Y_RATIO_EXPANSION_GUESS_8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MHKDDNHC@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
CONST	SEGMENT
??_C@_0CK@MHKDDNHC@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ DB 'LAND_DISPUTE_CIT'
	DB	'Y_RATIO_EXPANSION_GUESS_9', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GPJJNEGG@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
CONST	SEGMENT
??_C@_0CL@GPJJNEGG@LAND_DISPUTE_CITY_RATIO_EXPANSIO@ DB 'LAND_DISPUTE_CIT'
	DB	'Y_RATIO_EXPANSION_GUESS_10', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BBBDEKFL@VICTORY_DISPUTE_GRAND_STRATEGY_M@
CONST	SEGMENT
??_C@_0CM@BBBDEKFL@VICTORY_DISPUTE_GRAND_STRATEGY_M@ DB 'VICTORY_DISPUTE_'
	DB	'GRAND_STRATEGY_MATCH_UNSURE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OBGPLAF@VICTORY_DISPUTE_GRAND_STRATEGY_M@
CONST	SEGMENT
??_C@_0CM@OBGPLAF@VICTORY_DISPUTE_GRAND_STRATEGY_M@ DB 'VICTORY_DISPUTE_G'
	DB	'RAND_STRATEGY_MATCH_LIKELY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@BNMGBJGJ@VICTORY_DISPUTE_GRAND_STRATEGY_M@
CONST	SEGMENT
??_C@_0CO@BNMGBJGJ@VICTORY_DISPUTE_GRAND_STRATEGY_M@ DB 'VICTORY_DISPUTE_'
	DB	'GRAND_STRATEGY_MATCH_POSITIVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PJKOHHMA@LAND_DISPUTE_NO_EXPANSION_STRATE@
CONST	SEGMENT
??_C@_0CD@PJKOHHMA@LAND_DISPUTE_NO_EXPANSION_STRATE@ DB 'LAND_DISPUTE_NO_'
	DB	'EXPANSION_STRATEGY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LEAACKLF@LAND_DISPUTE_CRAMPED_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0CA@LEAACKLF@LAND_DISPUTE_CRAMPED_MULTIPLIER?$AA@ DB 'LAND_DISPUTE_'
	DB	'CRAMPED_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IANBDPEF@LAND_DISPUTE_NEIGHBORS?$AA@
CONST	SEGMENT
??_C@_0BH@IANBDPEF@LAND_DISPUTE_NEIGHBORS?$AA@ DB 'LAND_DISPUTE_NEIGHBORS'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EAKMBMHG@LAND_DISPUTE_CLOSE?$AA@
CONST	SEGMENT
??_C@_0BD@EAKMBMHG@LAND_DISPUTE_CLOSE?$AA@ DB 'LAND_DISPUTE_CLOSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PJAOGGPB@LAND_DISPUTE_FAR?$AA@
CONST	SEGMENT
??_C@_0BB@PJAOGGPB@LAND_DISPUTE_FAR?$AA@ DB 'LAND_DISPUTE_FAR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NIBMFFBA@LAND_DISPUTE_DISTANT?$AA@
CONST	SEGMENT
??_C@_0BF@NIBMFFBA@LAND_DISPUTE_DISTANT?$AA@ DB 'LAND_DISPUTE_DISTANT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@LDAHEGFC@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@
CONST	SEGMENT
??_C@_0DE@LDAHEGFC@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@ DB 'LAND_DISPUTE_PLO'
	DB	'T_BUY_AGGRESSIVE_POSTURE_INCREDIBLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NDAIEALO@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@
CONST	SEGMENT
??_C@_0CO@NDAIEALO@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@ DB 'LAND_DISPUTE_PLO'
	DB	'T_BUY_AGGRESSIVE_POSTURE_HIGH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PJNMDONE@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@
CONST	SEGMENT
??_C@_0DA@PJNMDONE@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@ DB 'LAND_DISPUTE_PLO'
	DB	'T_BUY_AGGRESSIVE_POSTURE_MEDIUM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@GHJOHFHB@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@
CONST	SEGMENT
??_C@_0CN@GHJOHFHB@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@ DB 'LAND_DISPUTE_PLO'
	DB	'T_BUY_AGGRESSIVE_POSTURE_LOW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@MDFMKPAA@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@
CONST	SEGMENT
??_C@_0CO@MDFMKPAA@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@ DB 'LAND_DISPUTE_PLO'
	DB	'T_BUY_AGGRESSIVE_POSTURE_NONE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@IDAADKDG@LAND_DISPUTE_EXP_AGGRESSIVE_POST@
CONST	SEGMENT
??_C@_0CP@IDAADKDG@LAND_DISPUTE_EXP_AGGRESSIVE_POST@ DB 'LAND_DISPUTE_EXP'
	DB	'_AGGRESSIVE_POSTURE_INCREDIBLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IBKLNLJE@LAND_DISPUTE_EXP_AGGRESSIVE_POST@
CONST	SEGMENT
??_C@_0CJ@IBKLNLJE@LAND_DISPUTE_EXP_AGGRESSIVE_POST@ DB 'LAND_DISPUTE_EXP'
	DB	'_AGGRESSIVE_POSTURE_HIGH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PBGKOKJD@LAND_DISPUTE_EXP_AGGRESSIVE_POST@
CONST	SEGMENT
??_C@_0CL@PBGKOKJD@LAND_DISPUTE_EXP_AGGRESSIVE_POST@ DB 'LAND_DISPUTE_EXP'
	DB	'_AGGRESSIVE_POSTURE_MEDIUM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KMOHGJMC@LAND_DISPUTE_EXP_AGGRESSIVE_POST@
CONST	SEGMENT
??_C@_0CI@KMOHGJMC@LAND_DISPUTE_EXP_AGGRESSIVE_POST@ DB 'LAND_DISPUTE_EXP'
	DB	'_AGGRESSIVE_POSTURE_LOW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JBPPDECK@LAND_DISPUTE_EXP_AGGRESSIVE_POST@
CONST	SEGMENT
??_C@_0CJ@JBPPDECK@LAND_DISPUTE_EXP_AGGRESSIVE_POST@ DB 'LAND_DISPUTE_EXP'
	DB	'_AGGRESSIVE_POSTURE_NONE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CHKLMCGK@MINOR_CIV_DISPUTE_FRIENDS_WEIGHT@
CONST	SEGMENT
??_C@_0CB@CHKLMCGK@MINOR_CIV_DISPUTE_FRIENDS_WEIGHT@ DB 'MINOR_CIV_DISPUT'
	DB	'E_FRIENDS_WEIGHT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KOALBMEE@MINOR_CIV_DISPUTE_ALLIES_WEIGHT?$AA@
CONST	SEGMENT
??_C@_0CA@KOALBMEE@MINOR_CIV_DISPUTE_ALLIES_WEIGHT?$AA@ DB 'MINOR_CIV_DIS'
	DB	'PUTE_ALLIES_WEIGHT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HOIJEDP@MINOR_CIV_DISPUTE_WEAK_THRESHOLD@
CONST	SEGMENT
??_C@_0CB@HOIJEDP@MINOR_CIV_DISPUTE_WEAK_THRESHOLD@ DB 'MINOR_CIV_DISPUTE'
	DB	'_WEAK_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KHLOPCLF@MINOR_CIV_DISPUTE_STRONG_THRESHO@
CONST	SEGMENT
??_C@_0CD@KHLOPCLF@MINOR_CIV_DISPUTE_STRONG_THRESHO@ DB 'MINOR_CIV_DISPUT'
	DB	'E_STRONG_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OBANJAA@MINOR_CIV_DISPUTE_FIERCE_THRESHO@
CONST	SEGMENT
??_C@_0CD@OBANJAA@MINOR_CIV_DISPUTE_FIERCE_THRESHO@ DB 'MINOR_CIV_DISPUTE'
	DB	'_FIERCE_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MIHAMNO@WONDER_DISPUTE_WEAK_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BO@MIHAMNO@WONDER_DISPUTE_WEAK_THRESHOLD?$AA@ DB 'WONDER_DISPUTE_W'
	DB	'EAK_THRESHOLD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BOAPCAAB@WONDER_DISPUTE_STRONG_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0CA@BOAPCAAB@WONDER_DISPUTE_STRONG_THRESHOLD?$AA@ DB 'WONDER_DISPUT'
	DB	'E_STRONG_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LHKBALLE@WONDER_DISPUTE_FIERCE_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0CA@LHKBALLE@WONDER_DISPUTE_FIERCE_THRESHOLD?$AA@ DB 'WONDER_DISPUT'
	DB	'E_FIERCE_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JFCMKLFO@VICTORY_DISPUTE_WEAK_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BP@JFCMKLFO@VICTORY_DISPUTE_WEAK_THRESHOLD?$AA@ DB 'VICTORY_DISPUT'
	DB	'E_WEAK_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GNDOBHKK@VICTORY_DISPUTE_STRONG_THRESHOLD@
CONST	SEGMENT
??_C@_0CB@GNDOBHKK@VICTORY_DISPUTE_STRONG_THRESHOLD@ DB 'VICTORY_DISPUTE_'
	DB	'STRONG_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MEJADMBP@VICTORY_DISPUTE_FIERCE_THRESHOLD@
CONST	SEGMENT
??_C@_0CB@MEJADMBP@VICTORY_DISPUTE_FIERCE_THRESHOLD@ DB 'VICTORY_DISPUTE_'
	DB	'FIERCE_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ODODNFIL@LAND_DISPUTE_WEAK_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BM@ODODNFIL@LAND_DISPUTE_WEAK_THRESHOLD?$AA@ DB 'LAND_DISPUTE_WEAK'
	DB	'_THRESHOLD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CGMMAMAE@LAND_DISPUTE_STRONG_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BO@CGMMAMAE@LAND_DISPUTE_STRONG_THRESHOLD?$AA@ DB 'LAND_DISPUTE_ST'
	DB	'RONG_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IPGCCHLB@LAND_DISPUTE_FIERCE_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BO@IPGCCHLB@LAND_DISPUTE_FIERCE_THRESHOLD?$AA@ DB 'LAND_DISPUTE_FI'
	DB	'ERCE_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LEBJODDK@WARMONGER_ON_CITY_STATE_MULTIPLI@
CONST	SEGMENT
??_C@_0CD@LEBJODDK@WARMONGER_ON_CITY_STATE_MULTIPLI@ DB 'WARMONGER_ON_CIT'
	DB	'Y_STATE_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@LMFLBFGN@WARMONGER_THREAT_SEVERE_PERCENT_@
CONST	SEGMENT
??_C@_0CK@LMFLBFGN@WARMONGER_THREAT_SEVERE_PERCENT_@ DB 'WARMONGER_THREAT'
	DB	'_SEVERE_PERCENT_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@KPMHGKKK@WARMONGER_THREAT_CRITICAL_PERCEN@
CONST	SEGMENT
??_C@_0CM@KPMHGKKK@WARMONGER_THREAT_CRITICAL_PERCEN@ DB 'WARMONGER_THREAT'
	DB	'_CRITICAL_PERCENT_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OGDGNBKB@WARMONGER_THREAT_PERSONALITY_MOD@
CONST	SEGMENT
??_C@_0CB@OGDGNBKB@WARMONGER_THREAT_PERSONALITY_MOD@ DB 'WARMONGER_THREAT'
	DB	'_PERSONALITY_MOD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JECFNGG@WARMONGER_THREAT_PER_TURN_DECAY?$AA@
CONST	SEGMENT
??_C@_0CA@JECFNGG@WARMONGER_THREAT_PER_TURN_DECAY?$AA@ DB 'WARMONGER_THRE'
	DB	'AT_PER_TURN_DECAY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OJIAHPNP@WARMONGER_THREAT_MAJOR_CONQUERED@
CONST	SEGMENT
??_C@_0CI@OJIAHPNP@WARMONGER_THREAT_MAJOR_CONQUERED@ DB 'WARMONGER_THREAT'
	DB	'_MAJOR_CONQUERED_WEIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GFBGIOAE@WARMONGER_THREAT_MAJOR_ATTACKED_@
CONST	SEGMENT
??_C@_0CH@GFBGIOAE@WARMONGER_THREAT_MAJOR_ATTACKED_@ DB 'WARMONGER_THREAT'
	DB	'_MAJOR_ATTACKED_WEIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@ECDKFNGE@WARMONGER_THREAT_MINOR_CONQUERED@
CONST	SEGMENT
??_C@_0CI@ECDKFNGE@WARMONGER_THREAT_MINOR_CONQUERED@ DB 'WARMONGER_THREAT'
	DB	'_MINOR_CONQUERED_WEIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OAJGMCL@WARMONGER_THREAT_MINOR_ATTACKED_@
CONST	SEGMENT
??_C@_0CH@OAJGMCL@WARMONGER_THREAT_MINOR_ATTACKED_@ DB 'WARMONGER_THREAT_'
	DB	'MINOR_ATTACKED_WEIGHT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HEJMPOHK@WARMONGER_THREAT_MINOR_THRESHOLD@
CONST	SEGMENT
??_C@_0CB@HEJMPOHK@WARMONGER_THREAT_MINOR_THRESHOLD@ DB 'WARMONGER_THREAT'
	DB	'_MINOR_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KCLJLNOG@WARMONGER_THREAT_MAJOR_THRESHOLD@
CONST	SEGMENT
??_C@_0CB@KCLJLNOG@WARMONGER_THREAT_MAJOR_THRESHOLD@ DB 'WARMONGER_THREAT'
	DB	'_MAJOR_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PIKPNPCF@WARMONGER_THREAT_SEVERE_THRESHOL@
CONST	SEGMENT
??_C@_0CC@PIKPNPCF@WARMONGER_THREAT_SEVERE_THRESHOL@ DB 'WARMONGER_THREAT'
	DB	'_SEVERE_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PAIMPGDB@WARMONGER_THREAT_CRITICAL_THRESH@
CONST	SEGMENT
??_C@_0CE@PAIMPGDB@WARMONGER_THREAT_CRITICAL_THRESH@ DB 'WARMONGER_THREAT'
	DB	'_CRITICAL_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@NIIDLBLH@MILITARY_THREAT_ALREADY_WAR_EACH@
CONST	SEGMENT
??_C@_0DD@NIIDLBLH@MILITARY_THREAT_ALREADY_WAR_EACH@ DB 'MILITARY_THREAT_'
	DB	'ALREADY_WAR_EACH_PLAYER_MULTIPLIER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BMGBMEGP@MILITARY_THREAT_PER_MAJOR_CONQUE@
CONST	SEGMENT
??_C@_0CE@BMGBMEGP@MILITARY_THREAT_PER_MAJOR_CONQUE@ DB 'MILITARY_THREAT_'
	DB	'PER_MAJOR_CONQUERED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LMEGNNJN@MILITARY_THREAT_PER_MAJOR_ATTACK@
CONST	SEGMENT
??_C@_0CD@LMEGNNJN@MILITARY_THREAT_PER_MAJOR_ATTACK@ DB 'MILITARY_THREAT_'
	DB	'PER_MAJOR_ATTACKED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MKEEIHPD@MILITARY_THREAT_PER_MINOR_CONQUE@
CONST	SEGMENT
??_C@_0CE@MKEEIHPD@MILITARY_THREAT_PER_MINOR_CONQUE@ DB 'MILITARY_THREAT_'
	DB	'PER_MINOR_CONQUERED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EPKGKJDN@MILITARY_THREAT_PER_MINOR_ATTACK@
CONST	SEGMENT
??_C@_0CD@EPKGKJDN@MILITARY_THREAT_PER_MINOR_ATTACK@ DB 'MILITARY_THREAT_'
	DB	'PER_MINOR_ATTACKED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EDAPFJIA@MILITARY_THREAT_DISTANT?$AA@
CONST	SEGMENT
??_C@_0BI@EDAPFJIA@MILITARY_THREAT_DISTANT?$AA@ DB 'MILITARY_THREAT_DISTA'
	DB	'NT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ODOIHHKA@MILITARY_THREAT_FAR?$AA@
CONST	SEGMENT
??_C@_0BE@ODOIHHKA@MILITARY_THREAT_FAR?$AA@ DB 'MILITARY_THREAT_FAR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IJLMEKHH@MILITARY_THREAT_CLOSE?$AA@
CONST	SEGMENT
??_C@_0BG@IJLMEKHH@MILITARY_THREAT_CLOSE?$AA@ DB 'MILITARY_THREAT_CLOSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PICGGCGH@MILITARY_THREAT_NEIGHBORS?$AA@
CONST	SEGMENT
??_C@_0BK@PICGGCGH@MILITARY_THREAT_NEIGHBORS?$AA@ DB 'MILITARY_THREAT_NEI'
	DB	'GHBORS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JFLIMINA@MILITARY_THREAT_WAR_STATE_NEARLY@
CONST	SEGMENT
??_C@_0CK@JFLIMINA@MILITARY_THREAT_WAR_STATE_NEARLY@ DB 'MILITARY_THREAT_'
	DB	'WAR_STATE_NEARLY_DEFEATED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PACPPOAL@MILITARY_THREAT_WAR_STATE_DEFENS@
CONST	SEGMENT
??_C@_0CE@PACPPOAL@MILITARY_THREAT_WAR_STATE_DEFENS@ DB 'MILITARY_THREAT_'
	DB	'WAR_STATE_DEFENSIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GCJMFLMD@MILITARY_THREAT_WAR_STATE_STALEM@
CONST	SEGMENT
??_C@_0CE@GCJMFLMD@MILITARY_THREAT_WAR_STATE_STALEM@ DB 'MILITARY_THREAT_'
	DB	'WAR_STATE_STALEMATE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DBECDJDJ@MILITARY_THREAT_WAR_STATE_OFFENS@
CONST	SEGMENT
??_C@_0CE@DBECDJDJ@MILITARY_THREAT_WAR_STATE_OFFENS@ DB 'MILITARY_THREAT_'
	DB	'WAR_STATE_OFFENSIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GFOHCLFM@MILITARY_THREAT_WAR_STATE_NEARLY@
CONST	SEGMENT
??_C@_0CF@GFOHCLFM@MILITARY_THREAT_WAR_STATE_NEARLY@ DB 'MILITARY_THREAT_'
	DB	'WAR_STATE_NEARLY_WON', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HIEOGLLM@MILITARY_THREAT_WAR_STATE_CALM?$AA@
CONST	SEGMENT
??_C@_0BP@HIEOGLLM@MILITARY_THREAT_WAR_STATE_CALM?$AA@ DB 'MILITARY_THREA'
	DB	'T_WAR_STATE_CALM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CLKGICNF@MILITARY_THREAT_STRENGTH_PATHETI@
CONST	SEGMENT
??_C@_0CC@CLKGICNF@MILITARY_THREAT_STRENGTH_PATHETI@ DB 'MILITARY_THREAT_'
	DB	'STRENGTH_PATHETIC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JGDNDLMG@MILITARY_THREAT_STRENGTH_WEAK?$AA@
CONST	SEGMENT
??_C@_0BO@JGDNDLMG@MILITARY_THREAT_STRENGTH_WEAK?$AA@ DB 'MILITARY_THREAT'
	DB	'_STRENGTH_WEAK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NKDOIDKA@MILITARY_THREAT_STRENGTH_POOR?$AA@
CONST	SEGMENT
??_C@_0BO@NKDOIDKA@MILITARY_THREAT_STRENGTH_POOR?$AA@ DB 'MILITARY_THREAT'
	DB	'_STRENGTH_POOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DAAIFPAK@MILITARY_THREAT_STRENGTH_AVERAGE@
CONST	SEGMENT
??_C@_0CB@DAAIFPAK@MILITARY_THREAT_STRENGTH_AVERAGE@ DB 'MILITARY_THREAT_'
	DB	'STRENGTH_AVERAGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HNHAPJPB@MILITARY_THREAT_STRENGTH_STRONG?$AA@
CONST	SEGMENT
??_C@_0CA@HNHAPJPB@MILITARY_THREAT_STRENGTH_STRONG?$AA@ DB 'MILITARY_THRE'
	DB	'AT_STRENGTH_STRONG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JCOALPJ@MILITARY_THREAT_STRENGTH_POWERFU@
CONST	SEGMENT
??_C@_0CC@JCOALPJ@MILITARY_THREAT_STRENGTH_POWERFU@ DB 'MILITARY_THREAT_S'
	DB	'TRENGTH_POWERFUL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PLOLFOIO@MILITARY_THREAT_STRENGTH_IMMENSE@
CONST	SEGMENT
??_C@_0CB@PLOLFOIO@MILITARY_THREAT_STRENGTH_IMMENSE@ DB 'MILITARY_THREAT_'
	DB	'STRENGTH_IMMENSE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OIHBBGAA@MILITARY_THREAT_MINOR_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0CA@OIHBBGAA@MILITARY_THREAT_MINOR_THRESHOLD?$AA@ DB 'MILITARY_THRE'
	DB	'AT_MINOR_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DOFEFFJM@MILITARY_THREAT_MAJOR_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0CA@DOFEFFJM@MILITARY_THREAT_MAJOR_THRESHOLD?$AA@ DB 'MILITARY_THRE'
	DB	'AT_MAJOR_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EIODKKOP@MILITARY_THREAT_SEVERE_THRESHOLD@
CONST	SEGMENT
??_C@_0CB@EIODKKOP@MILITARY_THREAT_SEVERE_THRESHOLD@ DB 'MILITARY_THREAT_'
	DB	'SEVERE_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OBPGPMAK@MILITARY_THREAT_CRITICAL_THRESHO@
CONST	SEGMENT
??_C@_0CD@OBPGPMAK@MILITARY_THREAT_CRITICAL_THRESHO@ DB 'MILITARY_THREAT_'
	DB	'CRITICAL_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@NJJCPKOD@GAME_THREAT_GUESS_AT_WAR_MILITAR@
CONST	SEGMENT
??_C@_0DD@NJJCPKOD@GAME_THREAT_GUESS_AT_WAR_MILITAR@ DB 'GAME_THREAT_GUES'
	DB	'S_AT_WAR_MILITARY_STRENGTH_AVERAGE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@IEHACFPH@GAME_THREAT_GUESS_AT_WAR_MILITAR@
CONST	SEGMENT
??_C@_0DC@IEHACFPH@GAME_THREAT_GUESS_AT_WAR_MILITAR@ DB 'GAME_THREAT_GUES'
	DB	'S_AT_WAR_MILITARY_STRENGTH_STRONG', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@NABBMLIA@GAME_THREAT_GUESS_AT_WAR_MILITAR@
CONST	SEGMENT
??_C@_0DE@NABBMLIA@GAME_THREAT_GUESS_AT_WAR_MILITAR@ DB 'GAME_THREAT_GUES'
	DB	'S_AT_WAR_MILITARY_STRENGTH_POWERFUL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@BCHBPLGH@GAME_THREAT_GUESS_AT_WAR_MILITAR@
CONST	SEGMENT
??_C@_0DD@BCHBPLGH@GAME_THREAT_GUESS_AT_WAR_MILITAR@ DB 'GAME_THREAT_GUES'
	DB	'S_AT_WAR_MILITARY_STRENGTH_IMMENSE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MNHHHBP@GAME_THREAT_GUESS_AT_WAR?$AA@
CONST	SEGMENT
??_C@_0BJ@MNHHHBP@GAME_THREAT_GUESS_AT_WAR?$AA@ DB 'GAME_THREAT_GUESS_AT_'
	DB	'WAR', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@OMBIACGF@GAME_THREAT_AT_WAR_MILITARY_STRE@
CONST	SEGMENT
??_C@_0CN@OMBIACGF@GAME_THREAT_AT_WAR_MILITARY_STRE@ DB 'GAME_THREAT_AT_W'
	DB	'AR_MILITARY_STRENGTH_AVERAGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LLCAFJNP@GAME_THREAT_AT_WAR_MILITARY_STRE@
CONST	SEGMENT
??_C@_0CM@LLCAFJNP@GAME_THREAT_AT_WAR_MILITARY_STRE@ DB 'GAME_THREAT_AT_W'
	DB	'AR_MILITARY_STRENGTH_STRONG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NEPPGHGN@GAME_THREAT_AT_WAR_MILITARY_STRE@
CONST	SEGMENT
??_C@_0CO@NEPPGHGN@GAME_THREAT_AT_WAR_MILITARY_STRE@ DB 'GAME_THREAT_AT_W'
	DB	'AR_MILITARY_STRENGTH_POWERFUL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CHPLADOB@GAME_THREAT_AT_WAR_MILITARY_STRE@
CONST	SEGMENT
??_C@_0CN@CHPLADOB@GAME_THREAT_AT_WAR_MILITARY_STRE@ DB 'GAME_THREAT_AT_W'
	DB	'AR_MILITARY_STRENGTH_IMMENSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CEJOKHGM@GAME_THREAT_AT_WAR_NEARLY_DEFEAT@
CONST	SEGMENT
??_C@_0CD@CEJOKHGM@GAME_THREAT_AT_WAR_NEARLY_DEFEAT@ DB 'GAME_THREAT_AT_W'
	DB	'AR_NEARLY_DEFEATED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EJHIEFCJ@GAME_THREAT_AT_WAR_DEFENSIVE?$AA@
CONST	SEGMENT
??_C@_0BN@EJHIEFCJ@GAME_THREAT_AT_WAR_DEFENSIVE?$AA@ DB 'GAME_THREAT_AT_W'
	DB	'AR_DEFENSIVE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NLMLOAOB@GAME_THREAT_AT_WAR_STALEMATE?$AA@
CONST	SEGMENT
??_C@_0BN@NLMLOAOB@GAME_THREAT_AT_WAR_STALEMATE?$AA@ DB 'GAME_THREAT_AT_W'
	DB	'AR_STALEMATE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MKCMFBKB@GAME_THREAT_MINOR_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BM@MKCMFBKB@GAME_THREAT_MINOR_THRESHOLD?$AA@ DB 'GAME_THREAT_MINOR'
	DB	'_THRESHOLD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BMAJBCDN@GAME_THREAT_MAJOR_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BM@BMAJBCDN@GAME_THREAT_MAJOR_THRESHOLD?$AA@ DB 'GAME_THREAT_MAJOR'
	DB	'_THRESHOLD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OJBAGENG@GAME_THREAT_SEVERE_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BN@OJBAGENG@GAME_THREAT_SEVERE_THRESHOLD?$AA@ DB 'GAME_THREAT_SEVE'
	DB	'RE_THRESHOLD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JDKODPPE@GAME_THREAT_CRITICAL_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BP@JDKODPPE@GAME_THREAT_CRITICAL_THRESHOLD?$AA@ DB 'GAME_THREAT_CR'
	DB	'ITICAL_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EBCNBCOD@TARGET_MINOR_BACKUP_NEIGHBORS?$AA@
CONST	SEGMENT
??_C@_0BO@EBCNBCOD@TARGET_MINOR_BACKUP_NEIGHBORS?$AA@ DB 'TARGET_MINOR_BA'
	DB	'CKUP_NEIGHBORS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HMMCHCMK@TARGET_MINOR_BACKUP_CLOSE?$AA@
CONST	SEGMENT
??_C@_0BK@HMMCHCMK@TARGET_MINOR_BACKUP_CLOSE?$AA@ DB 'TARGET_MINOR_BACKUP'
	DB	'_CLOSE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KOIHKJOE@TARGET_MINOR_BACKUP_FAR?$AA@
CONST	SEGMENT
??_C@_0BI@KOIHKJOE@TARGET_MINOR_BACKUP_FAR?$AA@ DB 'TARGET_MINOR_BACKUP_F'
	DB	'AR', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DKGGMEJF@TARGET_MINOR_BACKUP_DISTANT?$AA@
CONST	SEGMENT
??_C@_0BM@DKGGMEJF@TARGET_MINOR_BACKUP_DISTANT?$AA@ DB 'TARGET_MINOR_BACK'
	DB	'UP_DISTANT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CODECLOL@TARGET_MINOR_BACKUP_IMMENSE?$AA@
CONST	SEGMENT
??_C@_0BM@CODECLOL@TARGET_MINOR_BACKUP_IMMENSE?$AA@ DB 'TARGET_MINOR_BACK'
	DB	'UP_IMMENSE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DECDEBFL@TARGET_MINOR_BACKUP_POWERFUL?$AA@
CONST	SEGMENT
??_C@_0BN@DECDEBFL@TARGET_MINOR_BACKUP_POWERFUL?$AA@ DB 'TARGET_MINOR_BAC'
	DB	'KUP_POWERFUL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MCEEHIND@TARGET_MINOR_BACKUP_STRONG?$AA@
CONST	SEGMENT
??_C@_0BL@MCEEHIND@TARGET_MINOR_BACKUP_STRONG?$AA@ DB 'TARGET_MINOR_BACKU'
	DB	'P_STRONG', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OFNHCKGP@TARGET_MINOR_BACKUP_AVERAGE?$AA@
CONST	SEGMENT
??_C@_0BM@OFNHCKGP@TARGET_MINOR_BACKUP_AVERAGE?$AA@ DB 'TARGET_MINOR_BACK'
	DB	'UP_AVERAGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DEMFLLCM@TARGET_MINOR_BACKUP_POOR?$AA@
CONST	SEGMENT
??_C@_0BJ@DEMFLLCM@TARGET_MINOR_BACKUP_POOR?$AA@ DB 'TARGET_MINOR_BACKUP_'
	DB	'POOR', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HIMGADEK@TARGET_MINOR_BACKUP_WEAK?$AA@
CONST	SEGMENT
??_C@_0BJ@HIMGADEK@TARGET_MINOR_BACKUP_WEAK?$AA@ DB 'TARGET_MINOR_BACKUP_'
	DB	'WEAK', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BGKLMIHH@TARGET_MINOR_BACKUP_PATHETIC?$AA@
CONST	SEGMENT
??_C@_0BN@BGKLMIHH@TARGET_MINOR_BACKUP_PATHETIC?$AA@ DB 'TARGET_MINOR_BAC'
	DB	'KUP_PATHETIC', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NLOPECJO@TARGET_DISTANT?$AA@
CONST	SEGMENT
??_C@_0P@NLOPECJO@TARGET_DISTANT?$AA@ DB 'TARGET_DISTANT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@COFOLJMK@TARGET_FAR?$AA@
CONST	SEGMENT
??_C@_0L@COFOLJMK@TARGET_FAR?$AA@ DB 'TARGET_FAR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GKHCOLFL@TARGET_CLOSE?$AA@
CONST	SEGMENT
??_C@_0N@GKHCOLFL@TARGET_CLOSE?$AA@ DB 'TARGET_CLOSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KGACAMLE@TARGET_NEIGHBORS?$AA@
CONST	SEGMENT
??_C@_0BB@KGACAMLE@TARGET_NEIGHBORS?$AA@ DB 'TARGET_NEIGHBORS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KGPKCNPO@TARGET_ALREADY_WAR_EACH_PLAYER?$AA@
CONST	SEGMENT
??_C@_0BP@KGPKCNPO@TARGET_ALREADY_WAR_EACH_PLAYER?$AA@ DB 'TARGET_ALREADY'
	DB	'_WAR_EACH_PLAYER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MDNJFFAA@TARGET_MILITARY_STRENGTH_PATHETI@
CONST	SEGMENT
??_C@_0CC@MDNJFFAA@TARGET_MILITARY_STRENGTH_PATHETI@ DB 'TARGET_MILITARY_'
	DB	'STRENGTH_PATHETIC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FKGAAPJB@TARGET_MILITARY_STRENGTH_WEAK?$AA@
CONST	SEGMENT
??_C@_0BO@FKGAAPJB@TARGET_MILITARY_STRENGTH_WEAK?$AA@ DB 'TARGET_MILITARY'
	DB	'_STRENGTH_WEAK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BGGDLHPH@TARGET_MILITARY_STRENGTH_POOR?$AA@
CONST	SEGMENT
??_C@_0BO@BGGDLHPH@TARGET_MILITARY_STRENGTH_POOR?$AA@ DB 'TARGET_MILITARY'
	DB	'_STRENGTH_POOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PHALLJEN@TARGET_MILITARY_STRENGTH_AVERAGE@
CONST	SEGMENT
??_C@_0CB@PHALLJEN@TARGET_MILITARY_STRENGTH_AVERAGE@ DB 'TARGET_MILITARY_'
	DB	'STRENGTH_AVERAGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KJDOAKIK@TARGET_MILITARY_STRENGTH_STRONG?$AA@
CONST	SEGMENT
??_C@_0CA@KJDOAKIK@TARGET_MILITARY_STRENGTH_STRONG?$AA@ DB 'TARGET_MILITA'
	DB	'RY_STRENGTH_STRONG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OBFBNMCM@TARGET_MILITARY_STRENGTH_POWERFU@
CONST	SEGMENT
??_C@_0CC@OBFBNMCM@TARGET_MILITARY_STRENGTH_POWERFU@ DB 'TARGET_MILITARY_'
	DB	'STRENGTH_POWERFUL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DMOILIMJ@TARGET_MILITARY_STRENGTH_IMMENSE@
CONST	SEGMENT
??_C@_0CB@DMOILIMJ@TARGET_MILITARY_STRENGTH_IMMENSE@ DB 'TARGET_MILITARY_'
	DB	'STRENGTH_IMMENSE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GCMLPJAM@TARGET_INCREASE_WAR_TURNS?$AA@
CONST	SEGMENT
??_C@_0BK@GCMLPJAM@TARGET_INCREASE_WAR_TURNS?$AA@ DB 'TARGET_INCREASE_WAR'
	DB	'_TURNS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KHGHPGJD@TARGET_FAVORABLE_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BL@KHGHPGJD@TARGET_FAVORABLE_THRESHOLD?$AA@ DB 'TARGET_FAVORABLE_T'
	DB	'HRESHOLD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JNMHMPKA@TARGET_AVERAGE_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BJ@JNMHMPKA@TARGET_AVERAGE_THRESHOLD?$AA@ DB 'TARGET_AVERAGE_THRES'
	DB	'HOLD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FNEFFDCJ@TARGET_BAD_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BF@FNEFFDCJ@TARGET_BAD_THRESHOLD?$AA@ DB 'TARGET_BAD_THRESHOLD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PPAFNFHP@TARGET_IMPOSSIBLE_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BM@PPAFNFHP@TARGET_IMPOSSIBLE_THRESHOLD?$AA@ DB 'TARGET_IMPOSSIBLE'
	DB	'_THRESHOLD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PCHBPGIJ@ECONOMIC_STRENGTH_WEAK_THRESHOLD@
CONST	SEGMENT
??_C@_0CB@PCHBPGIJ@ECONOMIC_STRENGTH_WEAK_THRESHOLD@ DB 'ECONOMIC_STRENGT'
	DB	'H_WEAK_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NABAPINF@ECONOMIC_STRENGTH_POOR_THRESHOLD@
CONST	SEGMENT
??_C@_0CB@NABAPINF@ECONOMIC_STRENGTH_POOR_THRESHOLD@ DB 'ECONOMIC_STRENGT'
	DB	'H_POOR_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EOIKIBOI@ECONOMIC_STRENGTH_AVERAGE_THRESH@
CONST	SEGMENT
??_C@_0CE@EOIKIBOI@ECONOMIC_STRENGTH_AVERAGE_THRESH@ DB 'ECONOMIC_STRENGT'
	DB	'H_AVERAGE_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LGJNAOGG@ECONOMIC_STRENGTH_STRONG_THRESHO@
CONST	SEGMENT
??_C@_0CD@LGJNAOGG@ECONOMIC_STRENGTH_STRONG_THRESHO@ DB 'ECONOMIC_STRENGT'
	DB	'H_STRONG_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GFBCLILP@ECONOMIC_STRENGTH_POWERFUL_THRES@
CONST	SEGMENT
??_C@_0CF@GFBCLILP@ECONOMIC_STRENGTH_POWERFUL_THRES@ DB 'ECONOMIC_STRENGT'
	DB	'H_POWERFUL_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HFFKNFCD@ECONOMIC_STRENGTH_IMMENSE_THRESH@
CONST	SEGMENT
??_C@_0CE@HFFKNFCD@ECONOMIC_STRENGTH_IMMENSE_THRESH@ DB 'ECONOMIC_STRENGT'
	DB	'H_IMMENSE_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KALCNKEP@ECONOMIC_STRENGTH_RATIO_MULTIPLI@
CONST	SEGMENT
??_C@_0CD@KALCNKEP@ECONOMIC_STRENGTH_RATIO_MULTIPLI@ DB 'ECONOMIC_STRENGT'
	DB	'H_RATIO_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KAHIIMLK@MILITARY_STRENGTH_WEAK_THRESHOLD@
CONST	SEGMENT
??_C@_0CB@KAHIIMLK@MILITARY_STRENGTH_WEAK_THRESHOLD@ DB 'MILITARY_STRENGT'
	DB	'H_WEAK_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@ICBJICOG@MILITARY_STRENGTH_POOR_THRESHOLD@
CONST	SEGMENT
??_C@_0CB@ICBJICOG@MILITARY_STRENGTH_POOR_THRESHOLD@ DB 'MILITARY_STRENGT'
	DB	'H_POOR_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MEKLPDKL@MILITARY_STRENGTH_AVERAGE_THRESH@
CONST	SEGMENT
??_C@_0CE@MEKLPDKL@MILITARY_STRENGTH_AVERAGE_THRESH@ DB 'MILITARY_STRENGT'
	DB	'H_AVERAGE_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PCCGKBHN@MILITARY_STRENGTH_STRONG_THRESHO@
CONST	SEGMENT
??_C@_0CD@PCCGKBHN@MILITARY_STRENGTH_STRONG_THRESHO@ DB 'MILITARY_STRENGT'
	DB	'H_STRONG_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IKENIJOH@MILITARY_STRENGTH_POWERFUL_THRES@
CONST	SEGMENT
??_C@_0CF@IKENIJOH@MILITARY_STRENGTH_POWERFUL_THRES@ DB 'MILITARY_STRENGT'
	DB	'H_POWERFUL_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PPHLKHGA@MILITARY_STRENGTH_IMMENSE_THRESH@
CONST	SEGMENT
??_C@_0CE@PPHLKHGA@MILITARY_STRENGTH_IMMENSE_THRESH@ DB 'MILITARY_STRENGT'
	DB	'H_IMMENSE_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OGMDLEEP@MILITARY_STRENGTH_CITY_MOD?$AA@
CONST	SEGMENT
??_C@_0BL@OGMDLEEP@MILITARY_STRENGTH_CITY_MOD?$AA@ DB 'MILITARY_STRENGTH_'
	DB	'CITY_MOD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OEAJHFFE@MILITARY_STRENGTH_RATIO_MULTIPLI@
CONST	SEGMENT
??_C@_0CD@OEAJHFFE@MILITARY_STRENGTH_RATIO_MULTIPLI@ DB 'MILITARY_STRENGT'
	DB	'H_RATIO_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KMNEMPLD@MILITARY_STRENGTH_BASE?$AA@
CONST	SEGMENT
??_C@_0BH@KMNEMPLD@MILITARY_STRENGTH_BASE?$AA@ DB 'MILITARY_STRENGTH_BASE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DIPEFBJJ@PLOT_BUYING_POSTURE_LOW_THRESHOL@
CONST	SEGMENT
??_C@_0CC@DIPEFBJJ@PLOT_BUYING_POSTURE_LOW_THRESHOL@ DB 'PLOT_BUYING_POST'
	DB	'URE_LOW_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GLAJGGBA@PLOT_BUYING_POSTURE_MEDIUM_THRES@
CONST	SEGMENT
??_C@_0CF@GLAJGGBA@PLOT_BUYING_POSTURE_MEDIUM_THRES@ DB 'PLOT_BUYING_POST'
	DB	'URE_MEDIUM_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DBHNLGNJ@PLOT_BUYING_POSTURE_HIGH_THRESHO@
CONST	SEGMENT
??_C@_0CD@DBHNLGNJ@PLOT_BUYING_POSTURE_HIGH_THRESHO@ DB 'PLOT_BUYING_POST'
	DB	'URE_HIGH_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KAMKGMDB@PLOT_BUYING_POSTURE_INCREDIBLE_T@
CONST	SEGMENT
??_C@_0CJ@KAMKGMDB@PLOT_BUYING_POSTURE_INCREDIBLE_T@ DB 'PLOT_BUYING_POST'
	DB	'URE_INCREDIBLE_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KGOMIFDJ@EXPANSION_CAPITAL_DISTANCE_AGGRE@
CONST	SEGMENT
??_C@_0DC@KGOMIFDJ@EXPANSION_CAPITAL_DISTANCE_AGGRE@ DB 'EXPANSION_CAPITA'
	DB	'L_DISTANCE_AGGRESSIVE_POSTURE_LOW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@CNOCBDMA@EXPANSION_CAPITAL_DISTANCE_AGGRE@
CONST	SEGMENT
??_C@_0DF@CNOCBDMA@EXPANSION_CAPITAL_DISTANCE_AGGRE@ DB 'EXPANSION_CAPITA'
	DB	'L_DISTANCE_AGGRESSIVE_POSTURE_MEDIUM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KLMOPLOM@EXPANSION_CAPITAL_DISTANCE_AGGRE@
CONST	SEGMENT
??_C@_0DD@KLMOPLOM@EXPANSION_CAPITAL_DISTANCE_AGGRE@ DB 'EXPANSION_CAPITA'
	DB	'L_DISTANCE_AGGRESSIVE_POSTURE_HIGH', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EGIJENJE@MILITARY_AGGRESSIVE_POSTURE_THRE@
CONST	SEGMENT
??_C@_0CK@EGIJENJE@MILITARY_AGGRESSIVE_POSTURE_THRE@ DB 'MILITARY_AGGRESS'
	DB	'IVE_POSTURE_THRESHOLD_LOW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MCLJBFIC@MILITARY_AGGRESSIVE_POSTURE_THRE@
CONST	SEGMENT
??_C@_0CN@MCLJBFIC@MILITARY_AGGRESSIVE_POSTURE_THRE@ DB 'MILITARY_AGGRESS'
	DB	'IVE_POSTURE_THRESHOLD_MEDIUM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DEJEBHB@MILITARY_AGGRESSIVE_POSTURE_THRE@
CONST	SEGMENT
??_C@_0CL@DEJEBHB@MILITARY_AGGRESSIVE_POSTURE_THRE@ DB 'MILITARY_AGGRESSI'
	DB	'VE_POSTURE_THRESHOLD_HIGH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MAPIMJOL@MILITARY_AGGRESSIVE_POSTURE_THRE@
CONST	SEGMENT
??_C@_0DB@MAPIMJOL@MILITARY_AGGRESSIVE_POSTURE_THRE@ DB 'MILITARY_AGGRESS'
	DB	'IVE_POSTURE_THRESHOLD_INCREDIBLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@MCOFBMNP@WAR_DAMAGE_LEVEL_UNINVOLVED_CITY@
CONST	SEGMENT
??_C@_0DA@MCOFBMNP@WAR_DAMAGE_LEVEL_UNINVOLVED_CITY@ DB 'WAR_DAMAGE_LEVEL'
	DB	'_UNINVOLVED_CITY_POP_MULTIPLIER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GHELGKPN@WAR_DAMAGE_LEVEL_INVOLVED_CITY_P@
CONST	SEGMENT
??_C@_0CO@GHELGKPN@WAR_DAMAGE_LEVEL_INVOLVED_CITY_P@ DB 'WAR_DAMAGE_LEVEL'
	DB	'_INVOLVED_CITY_POP_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@INGMEPD@WAR_DAMAGE_LEVEL_CITY_WEIGHT?$AA@
CONST	SEGMENT
??_C@_0BN@INGMEPD@WAR_DAMAGE_LEVEL_CITY_WEIGHT?$AA@ DB 'WAR_DAMAGE_LEVEL_'
	DB	'CITY_WEIGHT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BPGLJKAN@WAR_DAMAGE_LEVEL_THRESHOLD_MINOR@
CONST	SEGMENT
??_C@_0CB@BPGLJKAN@WAR_DAMAGE_LEVEL_THRESHOLD_MINOR@ DB 'WAR_DAMAGE_LEVEL'
	DB	'_THRESHOLD_MINOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KAHJEGJL@WAR_DAMAGE_LEVEL_THRESHOLD_MAJOR@
CONST	SEGMENT
??_C@_0CB@KAHJEGJL@WAR_DAMAGE_LEVEL_THRESHOLD_MAJOR@ DB 'WAR_DAMAGE_LEVEL'
	DB	'_THRESHOLD_MAJOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KJCDAINP@WAR_DAMAGE_LEVEL_THRESHOLD_SERIO@
CONST	SEGMENT
??_C@_0CD@KJCDAINP@WAR_DAMAGE_LEVEL_THRESHOLD_SERIO@ DB 'WAR_DAMAGE_LEVEL'
	DB	'_THRESHOLD_SERIOUS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MOGEEAOM@WAR_DAMAGE_LEVEL_THRESHOLD_CRIPP@
CONST	SEGMENT
??_C@_0CE@MOGEEAOM@WAR_DAMAGE_LEVEL_THRESHOLD_CRIPP@ DB 'WAR_DAMAGE_LEVEL'
	DB	'_THRESHOLD_CRIPPLED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KDPOLBGM@WAR_STATE_THRESHOLD_DEFENSIVE?$AA@
CONST	SEGMENT
??_C@_0BO@KDPOLBGM@WAR_STATE_THRESHOLD_DEFENSIVE?$AA@ DB 'WAR_STATE_THRES'
	DB	'HOLD_DEFENSIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DBENBEKE@WAR_STATE_THRESHOLD_STALEMATE?$AA@
CONST	SEGMENT
??_C@_0BO@DBENBEKE@WAR_STATE_THRESHOLD_STALEMATE?$AA@ DB 'WAR_STATE_THRES'
	DB	'HOLD_STALEMATE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GCJDHGFO@WAR_STATE_THRESHOLD_OFFENSIVE?$AA@
CONST	SEGMENT
??_C@_0BO@GCJDHGFO@WAR_STATE_THRESHOLD_OFFENSIVE?$AA@ DB 'WAR_STATE_THRES'
	DB	'HOLD_OFFENSIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LGGCAOOI@WAR_STATE_THRESHOLD_NEARLY_WON?$AA@
CONST	SEGMENT
??_C@_0BP@LGGCAOOI@WAR_STATE_THRESHOLD_NEARLY_WON?$AA@ DB 'WAR_STATE_THRE'
	DB	'SHOLD_NEARLY_WON', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FOBPGMAL@WAR_STATE_CALM_THRESHOLD_FOREIGN@
CONST	SEGMENT
??_C@_0CI@FOBPGMAL@WAR_STATE_CALM_THRESHOLD_FOREIGN@ DB 'WAR_STATE_CALM_T'
	DB	'HRESHOLD_FOREIGN_FORCES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IFICIBIH@WAR_PROJECTION_WAR_DURATION_SCOR@
CONST	SEGMENT
??_C@_0CG@IFICIBIH@WAR_PROJECTION_WAR_DURATION_SCOR@ DB 'WAR_PROJECTION_W'
	DB	'AR_DURATION_SCORE_CAP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LFIONLAH@WAR_PROJECTION_WAR_DAMAGE_THEM_C@
CONST	SEGMENT
??_C@_0CI@LFIONLAH@WAR_PROJECTION_WAR_DAMAGE_THEM_C@ DB 'WAR_PROJECTION_W'
	DB	'AR_DAMAGE_THEM_CRIPPLED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PCJDENBF@WAR_PROJECTION_WAR_DAMAGE_THEM_S@
CONST	SEGMENT
??_C@_0CH@PCJDENBF@WAR_PROJECTION_WAR_DAMAGE_THEM_S@ DB 'WAR_PROJECTION_W'
	DB	'AR_DAMAGE_THEM_SERIOUS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CAKIBOAM@WAR_PROJECTION_WAR_DAMAGE_THEM_M@
CONST	SEGMENT
??_C@_0CF@CAKIBOAM@WAR_PROJECTION_WAR_DAMAGE_THEM_M@ DB 'WAR_PROJECTION_W'
	DB	'AR_DAMAGE_THEM_MAJOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JPLKMCJK@WAR_PROJECTION_WAR_DAMAGE_THEM_M@
CONST	SEGMENT
??_C@_0CF@JPLKMCJK@WAR_PROJECTION_WAR_DAMAGE_THEM_M@ DB 'WAR_PROJECTION_W'
	DB	'AR_DAMAGE_THEM_MINOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BIGHMCBI@WAR_PROJECTION_WAR_DAMAGE_THEM_N@
CONST	SEGMENT
??_C@_0CE@BIGHMCBI@WAR_PROJECTION_WAR_DAMAGE_THEM_N@ DB 'WAR_PROJECTION_W'
	DB	'AR_DAMAGE_THEM_NONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PFPDNOKD@WAR_PROJECTION_WAR_DAMAGE_US_CRI@
CONST	SEGMENT
??_C@_0CG@PFPDNOKD@WAR_PROJECTION_WAR_DAMAGE_US_CRI@ DB 'WAR_PROJECTION_W'
	DB	'AR_DAMAGE_US_CRIPPLED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FAJNIPPP@WAR_PROJECTION_WAR_DAMAGE_US_SER@
CONST	SEGMENT
??_C@_0CF@FAJNIPPP@WAR_PROJECTION_WAR_DAMAGE_US_SER@ DB 'WAR_PROJECTION_W'
	DB	'AR_DAMAGE_US_SERIOUS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JFPCMDJP@WAR_PROJECTION_WAR_DAMAGE_US_MAJ@
CONST	SEGMENT
??_C@_0CD@JFPCMDJP@WAR_PROJECTION_WAR_DAMAGE_US_MAJ@ DB 'WAR_PROJECTION_W'
	DB	'AR_DAMAGE_US_MAJOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CKOABPAJ@WAR_PROJECTION_WAR_DAMAGE_US_MIN@
CONST	SEGMENT
??_C@_0CD@CKOABPAJ@WAR_PROJECTION_WAR_DAMAGE_US_MIN@ DB 'WAR_PROJECTION_W'
	DB	'AR_DAMAGE_US_MINOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JCHFGAKF@WAR_PROJECTION_WAR_DAMAGE_US_NON@
CONST	SEGMENT
??_C@_0CC@JCHFGAKF@WAR_PROJECTION_WAR_DAMAGE_US_NON@ DB 'WAR_PROJECTION_W'
	DB	'AR_DAMAGE_US_NONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NKMJIPHP@WAR_PROJECTION_THEIR_ECONOMIC_ST@
CONST	SEGMENT
??_C@_0CP@NKMJIPHP@WAR_PROJECTION_THEIR_ECONOMIC_ST@ DB 'WAR_PROJECTION_T'
	DB	'HEIR_ECONOMIC_STRENGTH_IMMENSE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@MDLFOLKC@WAR_PROJECTION_THEIR_ECONOMIC_ST@
CONST	SEGMENT
??_C@_0DA@MDLFOLKC@WAR_PROJECTION_THEIR_ECONOMIC_ST@ DB 'WAR_PROJECTION_T'
	DB	'HEIR_ECONOMIC_STRENGTH_POWERFUL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@OLFFLNMF@WAR_PROJECTION_THEIR_ECONOMIC_ST@
CONST	SEGMENT
??_C@_0CO@OLFFLNMF@WAR_PROJECTION_THEIR_ECONOMIC_ST@ DB 'WAR_PROJECTION_T'
	DB	'HEIR_ECONOMIC_STRENGTH_STRONG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BBCKIOPL@WAR_PROJECTION_THEIR_ECONOMIC_ST@
CONST	SEGMENT
??_C@_0CP@BBCKIOPL@WAR_PROJECTION_THEIR_ECONOMIC_ST@ DB 'WAR_PROJECTION_T'
	DB	'HEIR_ECONOMIC_STRENGTH_AVERAGE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OPBKECBO@WAR_PROJECTION_THEIR_ECONOMIC_ST@
CONST	SEGMENT
??_C@_0CM@OPBKECBO@WAR_PROJECTION_THEIR_ECONOMIC_ST@ DB 'WAR_PROJECTION_T'
	DB	'HEIR_ECONOMIC_STRENGTH_POOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@KDBJPKHI@WAR_PROJECTION_THEIR_ECONOMIC_ST@
CONST	SEGMENT
??_C@_0CM@KDBJPKHI@WAR_PROJECTION_THEIR_ECONOMIC_ST@ DB 'WAR_PROJECTION_T'
	DB	'HEIR_ECONOMIC_STRENGTH_WEAK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@OBDNGCIO@WAR_PROJECTION_THEIR_ECONOMIC_ST@
CONST	SEGMENT
??_C@_0DA@OBDNGCIO@WAR_PROJECTION_THEIR_ECONOMIC_ST@ DB 'WAR_PROJECTION_T'
	DB	'HEIR_ECONOMIC_STRENGTH_PATHETIC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@LPAOPKEA@WAR_PROJECTION_THEIR_MILITARY_ST@
CONST	SEGMENT
??_C@_0CP@LPAOPKEA@WAR_PROJECTION_THEIR_MILITARY_ST@ DB 'WAR_PROJECTION_T'
	DB	'HEIR_MILITARY_STRENGTH_IMMENSE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@HFLGABOK@WAR_PROJECTION_THEIR_MILITARY_ST@
CONST	SEGMENT
??_C@_0DA@HFLGABOK@WAR_PROJECTION_THEIR_MILITARY_ST@ DB 'WAR_PROJECTION_T'
	DB	'HEIR_MILITARY_STRENGTH_POWERFUL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@JMPJEEJN@WAR_PROJECTION_THEIR_MILITARY_ST@
CONST	SEGMENT
??_C@_0CO@JMPJEEJN@WAR_PROJECTION_THEIR_MILITARY_ST@ DB 'WAR_PROJECTION_T'
	DB	'HEIR_MILITARY_STRENGTH_STRONG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HEONPLME@WAR_PROJECTION_THEIR_MILITARY_ST@
CONST	SEGMENT
??_C@_0CP@HEONPLME@WAR_PROJECTION_THEIR_MILITARY_ST@ DB 'WAR_PROJECTION_T'
	DB	'HEIR_MILITARY_STRENGTH_AVERAGE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PHOJBKDB@WAR_PROJECTION_THEIR_MILITARY_ST@
CONST	SEGMENT
??_C@_0CM@PHOJBKDB@WAR_PROJECTION_THEIR_MILITARY_ST@ DB 'WAR_PROJECTION_T'
	DB	'HEIR_MILITARY_STRENGTH_POOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KLOPGNHP@WAR_PROJECTION_RECKLESS_EXPANDER@
CONST	SEGMENT
??_C@_0CB@KLOPGNHP@WAR_PROJECTION_RECKLESS_EXPANDER@ DB 'WAR_PROJECTION_R'
	DB	'ECKLESS_EXPANDER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LLOKKCFH@WAR_PROJECTION_THEIR_MILITARY_ST@
CONST	SEGMENT
??_C@_0CM@LLOKKCFH@WAR_PROJECTION_THEIR_MILITARY_ST@ DB 'WAR_PROJECTION_T'
	DB	'HEIR_MILITARY_STRENGTH_WEAK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@FHDOIIMG@WAR_PROJECTION_THEIR_MILITARY_ST@
CONST	SEGMENT
??_C@_0DA@FHDOIIMG@WAR_PROJECTION_THEIR_MILITARY_ST@ DB 'WAR_PROJECTION_T'
	DB	'HEIR_MILITARY_STRENGTH_PATHETIC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LPPBAKOG@WAR_PROJECTION_THRESHOLD_STALEMA@
CONST	SEGMENT
??_C@_0CD@LPPBAKOG@WAR_PROJECTION_THRESHOLD_STALEMA@ DB 'WAR_PROJECTION_T'
	DB	'HRESHOLD_STALEMATE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FMGACCNO@WAR_PROJECTION_THRESHOLD_DEFEAT?$AA@
CONST	SEGMENT
??_C@_0CA@FMGACCNO@WAR_PROJECTION_THRESHOLD_DEFEAT?$AA@ DB 'WAR_PROJECTIO'
	DB	'N_THRESHOLD_DEFEAT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PLCHPABP@WAR_PROJECTION_THRESHOLD_DESTRUC@
CONST	SEGMENT
??_C@_0CF@PLCHPABP@WAR_PROJECTION_THRESHOLD_DESTRUC@ DB 'WAR_PROJECTION_T'
	DB	'HRESHOLD_DESTRUCTION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KBCCKBEP@WAR_PROJECTION_THRESHOLD_GOOD?$AA@
CONST	SEGMENT
??_C@_0BO@KBCCKBEP@WAR_PROJECTION_THRESHOLD_GOOD?$AA@ DB 'WAR_PROJECTION_'
	DB	'THRESHOLD_GOOD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CEPLCBIO@WAR_PROJECTION_THRESHOLD_VERY_GO@
CONST	SEGMENT
??_C@_0CD@CEPLCBIO@WAR_PROJECTION_THRESHOLD_VERY_GO@ DB 'WAR_PROJECTION_T'
	DB	'HRESHOLD_VERY_GOOD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IBGDINCJ@WAR_GOAL_TARGET_IMPOSSIBLE?$AA@
CONST	SEGMENT
??_C@_0BL@IBGDINCJ@WAR_GOAL_TARGET_IMPOSSIBLE?$AA@ DB 'WAR_GOAL_TARGET_IM'
	DB	'POSSIBLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JCJDLFJJ@WAR_GOAL_TARGET_BAD?$AA@
CONST	SEGMENT
??_C@_0BE@JCJDLFJJ@WAR_GOAL_TARGET_BAD?$AA@ DB 'WAR_GOAL_TARGET_BAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DJLKEMJE@WAR_GOAL_TARGET_AVERAGE?$AA@
CONST	SEGMENT
??_C@_0BI@DJLKEMJE@WAR_GOAL_TARGET_AVERAGE?$AA@ DB 'WAR_GOAL_TARGET_AVERA'
	DB	'GE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NHFMPGNA@WAR_GOAL_TARGET_FAVORABLE?$AA@
CONST	SEGMENT
??_C@_0BK@NHFMPGNA@WAR_GOAL_TARGET_FAVORABLE?$AA@ DB 'WAR_GOAL_TARGET_FAV'
	DB	'ORABLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OJENDNGK@WAR_GOAL_TARGET_SOFT?$AA@
CONST	SEGMENT
??_C@_0BF@OJENDNGK@WAR_GOAL_TARGET_SOFT?$AA@ DB 'WAR_GOAL_TARGET_SOFT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MEKILFMG@WAR_GOAL_GAME_THREAT_NONE?$AA@
CONST	SEGMENT
??_C@_0BK@MEKILFMG@WAR_GOAL_GAME_THREAT_NONE?$AA@ DB 'WAR_GOAL_GAME_THREA'
	DB	'T_NONE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@POANPCDO@WAR_GOAL_GAME_THREAT_MINOR?$AA@
CONST	SEGMENT
??_C@_0BL@POANPCDO@WAR_GOAL_GAME_THREAT_MINOR?$AA@ DB 'WAR_GOAL_GAME_THRE'
	DB	'AT_MINOR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EBBPCOKI@WAR_GOAL_GAME_THREAT_MAJOR?$AA@
CONST	SEGMENT
??_C@_0BL@EBBPCOKI@WAR_GOAL_GAME_THREAT_MAJOR?$AA@ DB 'WAR_GOAL_GAME_THRE'
	DB	'AT_MAJOR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DDJPLANG@WAR_GOAL_GAME_THREAT_SEVERE?$AA@
CONST	SEGMENT
??_C@_0BM@DDJPLANG@WAR_GOAL_GAME_THREAT_SEVERE?$AA@ DB 'WAR_GOAL_GAME_THR'
	DB	'EAT_SEVERE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IAGOLLGB@WAR_GOAL_GAME_THREAT_CRITICAL?$AA@
CONST	SEGMENT
??_C@_0BO@IAGOLLGB@WAR_GOAL_GAME_THREAT_CRITICAL?$AA@ DB 'WAR_GOAL_GAME_T'
	DB	'HREAT_CRITICAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GNMMCOF@WAR_GOAL_DAMAGE_NONE?$AA@
CONST	SEGMENT
??_C@_0BF@GNMMCOF@WAR_GOAL_DAMAGE_NONE?$AA@ DB 'WAR_GOAL_DAMAGE_NONE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKIPHDL@WAR_GOAL_DAMAGE_MINOR?$AA@
CONST	SEGMENT
??_C@_0BG@FMKIPHDL@WAR_GOAL_DAMAGE_MINOR?$AA@ DB 'WAR_GOAL_DAMAGE_MINOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ODLKCLKN@WAR_GOAL_DAMAGE_MAJOR?$AA@
CONST	SEGMENT
??_C@_0BG@ODLKCLKN@WAR_GOAL_DAMAGE_MAJOR?$AA@ DB 'WAR_GOAL_DAMAGE_MAJOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BDDMMHIM@WAR_GOAL_DAMAGE_SERIOUS?$AA@
CONST	SEGMENT
??_C@_0BI@BDDMMHIM@WAR_GOAL_DAMAGE_SERIOUS?$AA@ DB 'WAR_GOAL_DAMAGE_SERIO'
	DB	'US', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DMLMFPGN@WAR_GOAL_DAMAGE_CRIPPLED?$AA@
CONST	SEGMENT
??_C@_0BJ@DMLMFPGN@WAR_GOAL_DAMAGE_CRIPPLED?$AA@ DB 'WAR_GOAL_DAMAGE_CRIP'
	DB	'PLED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@BEHAGIIA@WAR_GOAL_ANOTHER_PLAYER_STATE_NE@
CONST	SEGMENT
??_C@_0CO@BEHAGIIA@WAR_GOAL_ANOTHER_PLAYER_STATE_NE@ DB 'WAR_GOAL_ANOTHER'
	DB	'_PLAYER_STATE_NEARLY_DEFEATED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BOJJMBBF@WAR_GOAL_ANOTHER_PLAYER_STATE_DE@
CONST	SEGMENT
??_C@_0CI@BOJJMBBF@WAR_GOAL_ANOTHER_PLAYER_STATE_DE@ DB 'WAR_GOAL_ANOTHER'
	DB	'_PLAYER_STATE_DEFENSIVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IMCKGENN@WAR_GOAL_ANOTHER_PLAYER_STATE_ST@
CONST	SEGMENT
??_C@_0CI@IMCKGENN@WAR_GOAL_ANOTHER_PLAYER_STATE_ST@ DB 'WAR_GOAL_ANOTHER'
	DB	'_PLAYER_STATE_STALEMATE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NPPEAGCH@WAR_GOAL_ANOTHER_PLAYER_STATE_OF@
CONST	SEGMENT
??_C@_0CI@NPPEAGCH@WAR_GOAL_ANOTHER_PLAYER_STATE_OF@ DB 'WAR_GOAL_ANOTHER'
	DB	'_PLAYER_STATE_OFFENSIVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JPAGKAAA@WAR_GOAL_ANOTHER_PLAYER_STATE_NE@
CONST	SEGMENT
??_C@_0CJ@JPAGKAAA@WAR_GOAL_ANOTHER_PLAYER_STATE_NE@ DB 'WAR_GOAL_ANOTHER'
	DB	'_PLAYER_STATE_NEARLY_WON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OFBCIAJK@WAR_GOAL_ANOTHER_PLAYER_STATE_CA@
CONST	SEGMENT
??_C@_0CD@OFBCIAJK@WAR_GOAL_ANOTHER_PLAYER_STATE_CA@ DB 'WAR_GOAL_ANOTHER'
	DB	'_PLAYER_STATE_CALM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FNALNCDL@WAR_GOAL_STATE_NEARLY_DEFEATED?$AA@
CONST	SEGMENT
??_C@_0BP@FNALNCDL@WAR_GOAL_STATE_NEARLY_DEFEATED?$AA@ DB 'WAR_GOAL_STATE'
	DB	'_NEARLY_DEFEATED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KOOEKNCH@WAR_GOAL_STATE_DEFENSIVE?$AA@
CONST	SEGMENT
??_C@_0BJ@KOOEKNCH@WAR_GOAL_STATE_DEFENSIVE?$AA@ DB 'WAR_GOAL_STATE_DEFEN'
	DB	'SIVE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DMFHAIOP@WAR_GOAL_STATE_STALEMATE?$AA@
CONST	SEGMENT
??_C@_0BJ@DMFHAIOP@WAR_GOAL_STATE_STALEMATE?$AA@ DB 'WAR_GOAL_STATE_STALE'
	DB	'MATE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GPIJGKBF@WAR_GOAL_STATE_OFFENSIVE?$AA@
CONST	SEGMENT
??_C@_0BJ@GPIJGKBF@WAR_GOAL_STATE_OFFENSIVE?$AA@ DB 'WAR_GOAL_STATE_OFFEN'
	DB	'SIVE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FHGBIMOM@WAR_GOAL_STATE_NEARLY_WON?$AA@
CONST	SEGMENT
??_C@_0BK@FHGBIMOM@WAR_GOAL_STATE_NEARLY_WON?$AA@ DB 'WAR_GOAL_STATE_NEAR'
	DB	'LY_WON', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BJCOKPHO@WAR_GOAL_STATE_CALM?$AA@
CONST	SEGMENT
??_C@_0BE@BJCOKPHO@WAR_GOAL_STATE_CALM?$AA@ DB 'WAR_GOAL_STATE_CALM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JJMNFNKJ@WAR_GOAL_THRESHOLD_PEACE?$AA@
CONST	SEGMENT
??_C@_0BJ@JJMNFNKJ@WAR_GOAL_THRESHOLD_PEACE?$AA@ DB 'WAR_GOAL_THRESHOLD_P'
	DB	'EACE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EGOAGGHO@WAR_GOAL_THRESHOLD_DAMAGE?$AA@
CONST	SEGMENT
??_C@_0BK@EGOAGGHO@WAR_GOAL_THRESHOLD_DAMAGE?$AA@ DB 'WAR_GOAL_THRESHOLD_'
	DB	'DAMAGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PMLFHNFD@WAR_GOAL_THRESHOLD_CONQUEST?$AA@
CONST	SEGMENT
??_C@_0BM@PMLFHNFD@WAR_GOAL_THRESHOLD_CONQUEST?$AA@ DB 'WAR_GOAL_THRESHOL'
	DB	'D_CONQUEST', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JFGOMEDI@ARMISTICE_MIN_GOLD?$AA@
CONST	SEGMENT
??_C@_0BD@JFGOMEDI@ARMISTICE_MIN_GOLD?$AA@ DB 'ARMISTICE_MIN_GOLD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LNJFGLFE@ARMISTICE_GPT_DIVISOR?$AA@
CONST	SEGMENT
??_C@_0BG@LNJFGLFE@ARMISTICE_GPT_DIVISOR?$AA@ DB 'ARMISTICE_GPT_DIVISOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@PKNKMMHH@PEACE_WILLINGNESS_ACCEPT_THRESHO@
CONST	SEGMENT
??_C@_0CN@PKNKMMHH@PEACE_WILLINGNESS_ACCEPT_THRESHO@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_THRESHOLD_ARMISTICE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@EBNLLKKM@PEACE_WILLINGNESS_ACCEPT_THRESHO@
CONST	SEGMENT
??_C@_0CO@EBNLLKKM@PEACE_WILLINGNESS_ACCEPT_THRESHO@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_THRESHOLD_SETTLEMENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PDMHBKGB@PEACE_WILLINGNESS_ACCEPT_THRESHO@
CONST	SEGMENT
??_C@_0CM@PDMHBKGB@PEACE_WILLINGNESS_ACCEPT_THRESHO@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_THRESHOLD_BACKDOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HJAFOCCJ@PEACE_WILLINGNESS_ACCEPT_THRESHO@
CONST	SEGMENT
??_C@_0CO@HJAFOCCJ@PEACE_WILLINGNESS_ACCEPT_THRESHO@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_THRESHOLD_SUBMISSION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@HBBJFFIE@PEACE_WILLINGNESS_ACCEPT_THRESHO@
CONST	SEGMENT
??_C@_0CN@HBBJFFIE@PEACE_WILLINGNESS_ACCEPT_THRESHO@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_THRESHOLD_SURRENDER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@ONMGMOBF@PEACE_WILLINGNESS_ACCEPT_THRESHO@
CONST	SEGMENT
??_C@_0CL@ONMGMOBF@PEACE_WILLINGNESS_ACCEPT_THRESHO@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_THRESHOLD_CESSION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@DHNEDMCE@PEACE_WILLINGNESS_ACCEPT_THRESHO@
CONST	SEGMENT
??_C@_0DA@DHNEDMCE@PEACE_WILLINGNESS_ACCEPT_THRESHO@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_THRESHOLD_CAPITULATION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@HAMCAIBP@PEACE_WILLINGNESS_ACCEPT_THRESHO@
CONST	SEGMENT
??_C@_0DA@HAMCAIBP@PEACE_WILLINGNESS_ACCEPT_THRESHO@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_THRESHOLD_UN_SURRENDER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NDIHOEDH@PEACE_WILLINGNESS_ACCEPT_TARGET_@
CONST	SEGMENT
??_C@_0CF@NDIHOEDH@PEACE_WILLINGNESS_ACCEPT_TARGET_@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_TARGET_SOFT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PFBCMGFG@PEACE_WILLINGNESS_ACCEPT_TARGET_@
CONST	SEGMENT
??_C@_0CK@PFBCMGFG@PEACE_WILLINGNESS_ACCEPT_TARGET_@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_TARGET_FAVORABLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HGJFKELF@PEACE_WILLINGNESS_ACCEPT_TARGET_@
CONST	SEGMENT
??_C@_0CI@HGJFKELF@PEACE_WILLINGNESS_ACCEPT_TARGET_@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_TARGET_AVERAGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ONBLCGPI@PEACE_WILLINGNESS_ACCEPT_TARGET_@
CONST	SEGMENT
??_C@_0CE@ONBLCGPI@PEACE_WILLINGNESS_ACCEPT_TARGET_@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_TARGET_BAD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IFJKOFAM@PEACE_WILLINGNESS_ACCEPT_TARGET_@
CONST	SEGMENT
??_C@_0CL@IFJKOFAM@PEACE_WILLINGNESS_ACCEPT_TARGET_@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_TARGET_IMPOSSIBLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PAOJBDNL@PEACE_WILLINGNESS_ACCEPT_PROJECT@
CONST	SEGMENT
??_C@_0CO@PAOJBDNL@PEACE_WILLINGNESS_ACCEPT_PROJECT@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_PROJECTION_VERY_GOOD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GGNJHAEE@PEACE_WILLINGNESS_ACCEPT_PROJECT@
CONST	SEGMENT
??_C@_0CJ@GGNJHAEE@PEACE_WILLINGNESS_ACCEPT_PROJECT@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_PROJECTION_GOOD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CKBFEDHM@PEACE_WILLINGNESS_ACCEPT_PROJECT@
CONST	SEGMENT
??_C@_0CM@CKBFEDHM@PEACE_WILLINGNESS_ACCEPT_PROJECT@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_PROJECTION_UNKNOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GLODDILD@PEACE_WILLINGNESS_ACCEPT_PROJECT@
CONST	SEGMENT
??_C@_0CO@GLODDILD@PEACE_WILLINGNESS_ACCEPT_PROJECT@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_PROJECTION_STALEMATE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EOEANOKM@PEACE_WILLINGNESS_ACCEPT_PROJECT@
CONST	SEGMENT
??_C@_0CL@EOEANOKM@PEACE_WILLINGNESS_ACCEPT_PROJECT@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_PROJECTION_DEFEAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PEDMNMJM@PEACE_WILLINGNESS_ACCEPT_PROJECT@
CONST	SEGMENT
??_C@_0DA@PEDMNMJM@PEACE_WILLINGNESS_ACCEPT_PROJECT@ DB 'PEACE_WILLINGNES'
	DB	'S_ACCEPT_PROJECTION_DESTRUCTION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@NNNEPLBA@PEACE_WILLINGNESS_OFFER_THRESHOL@
CONST	SEGMENT
??_C@_0CM@NNNEPLBA@PEACE_WILLINGNESS_OFFER_THRESHOL@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_THRESHOLD_ARMISTICE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JCCKEAGA@PEACE_WILLINGNESS_OFFER_THRESHOL@
CONST	SEGMENT
??_C@_0CN@JCCKEAGA@PEACE_WILLINGNESS_OFFER_THRESHOL@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_THRESHOLD_SETTLEMENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PPLBNHBA@PEACE_WILLINGNESS_OFFER_THRESHOL@
CONST	SEGMENT
??_C@_0CL@PPLBNHBA@PEACE_WILLINGNESS_OFFER_THRESHOL@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_THRESHOLD_BACKDOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KKPEBIOF@PEACE_WILLINGNESS_OFFER_THRESHOL@
CONST	SEGMENT
??_C@_0CN@KKPEBIOF@PEACE_WILLINGNESS_OFFER_THRESHOL@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_THRESHOLD_SUBMISSION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@FGBHGCOD@PEACE_WILLINGNESS_OFFER_THRESHOL@
CONST	SEGMENT
??_C@_0CM@FGBHGCOD@PEACE_WILLINGNESS_OFFER_THRESHOL@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_THRESHOLD_SURRENDER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CNBAIHNO@PEACE_WILLINGNESS_OFFER_THRESHOL@
CONST	SEGMENT
??_C@_0CK@CNBAIHNO@PEACE_WILLINGNESS_OFFER_THRESHOL@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_THRESHOLD_CESSION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NPDGMJF@PEACE_WILLINGNESS_OFFER_THRESHOL@
CONST	SEGMENT
??_C@_0CP@NPDGMJF@PEACE_WILLINGNESS_OFFER_THRESHOL@ DB 'PEACE_WILLINGNESS'
	DB	'_OFFER_THRESHOLD_CAPITULATION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@EKOFFIKO@PEACE_WILLINGNESS_OFFER_THRESHOL@
CONST	SEGMENT
??_C@_0CP@EKOFFIKO@PEACE_WILLINGNESS_OFFER_THRESHOL@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_THRESHOLD_UN_SURRENDER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HHBPLIK@PEACE_WILLINGNESS_OFFER_WAR_DAMA@
CONST	SEGMENT
??_C@_0CM@HHBPLIK@PEACE_WILLINGNESS_OFFER_WAR_DAMA@ DB 'PEACE_WILLINGNESS'
	DB	'_OFFER_WAR_DAMAGE_CRIPPLED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LALIOIKM@PEACE_WILLINGNESS_OFFER_WAR_DAMA@
CONST	SEGMENT
??_C@_0CL@LALIOIKM@PEACE_WILLINGNESS_OFFER_WAR_DAMA@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_WAR_DAMAGE_SERIOUS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BECMINAP@PEACE_WILLINGNESS_OFFER_WAR_DAMA@
CONST	SEGMENT
??_C@_0CJ@BECMINAP@PEACE_WILLINGNESS_OFFER_WAR_DAMA@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_WAR_DAMAGE_MAJOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KLDOFBJJ@PEACE_WILLINGNESS_OFFER_WAR_DAMA@
CONST	SEGMENT
??_C@_0CJ@KLDOFBJJ@PEACE_WILLINGNESS_OFFER_WAR_DAMA@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_WAR_DAMAGE_MINOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@PCCNDNHB@PEACE_WILLINGNESS_OFFER_WAR_DAMA@
CONST	SEGMENT
??_C@_0CI@PCCNDNHB@PEACE_WILLINGNESS_OFFER_WAR_DAMA@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_WAR_DAMAGE_NONE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CDBIOJBH@PEACE_WILLINGNESS_OFFER_PROJECTI@
CONST	SEGMENT
??_C@_0CN@CDBIOJBH@PEACE_WILLINGNESS_OFFER_PROJECTI@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_PROJECTION_VERY_GOOD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EFCKOCBA@PEACE_WILLINGNESS_OFFER_PROJECTI@
CONST	SEGMENT
??_C@_0CI@EFCKOCBA@PEACE_WILLINGNESS_OFFER_PROJECTI@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_PROJECTION_GOOD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CGGDIOAN@PEACE_WILLINGNESS_OFFER_PROJECTI@
CONST	SEGMENT
??_C@_0CL@CGGDIOAN@PEACE_WILLINGNESS_OFFER_PROJECTI@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_PROJECTION_UNKNOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LIBCMCHP@PEACE_WILLINGNESS_OFFER_PROJECTI@
CONST	SEGMENT
??_C@_0CN@LIBCMCHP@PEACE_WILLINGNESS_OFFER_PROJECTI@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_PROJECTION_STALEMATE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@IOJGJHGH@PEACE_WILLINGNESS_OFFER_PROJECTI@
CONST	SEGMENT
??_C@_0CK@IOJGJHGH@PEACE_WILLINGNESS_OFFER_PROJECTI@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_PROJECTION_DEFEAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MOBLIMCN@PEACE_WILLINGNESS_OFFER_PROJECTI@
CONST	SEGMENT
??_C@_0CP@MOBLIMCN@PEACE_WILLINGNESS_OFFER_PROJECTI@ DB 'PEACE_WILLINGNES'
	DB	'S_OFFER_PROJECTION_DESTRUCTION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KGFDJFHM@REQUEST_PEACE_TURN_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BN@KGFDJFHM@REQUEST_PEACE_TURN_THRESHOLD?$AA@ DB 'REQUEST_PEACE_TU'
	DB	'RN_THRESHOLD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NBDOICHP@EVALUATE_WAR_IMPOSSIBLE_TARGET?$AA@
CONST	SEGMENT
??_C@_0BP@NBDOICHP@EVALUATE_WAR_IMPOSSIBLE_TARGET?$AA@ DB 'EVALUATE_WAR_I'
	DB	'MPOSSIBLE_TARGET', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JAIHEOCL@EVALUATE_WAR_BAD_TARGET?$AA@
CONST	SEGMENT
??_C@_0BI@JAIHEOCL@EVALUATE_WAR_BAD_TARGET?$AA@ DB 'EVALUATE_WAR_BAD_TARG'
	DB	'ET', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BDKFADGN@EVALUATE_WAR_AVERAGE_TARGET?$AA@
CONST	SEGMENT
??_C@_0BM@BDKFADGN@EVALUATE_WAR_AVERAGE_TARGET?$AA@ DB 'EVALUATE_WAR_AVER'
	DB	'AGE_TARGET', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KKPKNDFM@EVALUATE_WAR_FAVORABLE_TARGET?$AA@
CONST	SEGMENT
??_C@_0BO@KKPKNDFM@EVALUATE_WAR_FAVORABLE_TARGET?$AA@ DB 'EVALUATE_WAR_FA'
	DB	'VORABLE_TARGET', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MDLDOEBP@EVALUATE_WAR_SOFT_TARGET?$AA@
CONST	SEGMENT
??_C@_0BJ@MDLDOEBP@EVALUATE_WAR_SOFT_TARGET?$AA@ DB 'EVALUATE_WAR_SOFT_TA'
	DB	'RGET', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CGHDGBH@EVALUATE_WAR_GAME_THREAT_NONE?$AA@
CONST	SEGMENT
??_C@_0BO@CGHDGBH@EVALUATE_WAR_GAME_THREAT_NONE?$AA@ DB 'EVALUATE_WAR_GAM'
	DB	'E_THREAT_NONE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PBPNPPP@EVALUATE_WAR_GAME_THREAT_MINOR?$AA@
CONST	SEGMENT
??_C@_0BP@PBPNPPP@EVALUATE_WAR_GAME_THREAT_MINOR?$AA@ DB 'EVALUATE_WAR_GA'
	DB	'ME_THREAT_MINOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LAANADGJ@EVALUATE_WAR_GAME_THREAT_MAJOR?$AA@
CONST	SEGMENT
??_C@_0BP@LAANADGJ@EVALUATE_WAR_GAME_THREAT_MAJOR?$AA@ DB 'EVALUATE_WAR_G'
	DB	'AME_THREAT_MAJOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NPANFANN@EVALUATE_WAR_GAME_THREAT_SEVERE?$AA@
CONST	SEGMENT
??_C@_0CA@NPANFANN@EVALUATE_WAR_GAME_THREAT_SEVERE?$AA@ DB 'EVALUATE_WAR_'
	DB	'GAME_THREAT_SEVERE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MDJAGMEA@EVALUATE_WAR_GAME_THREAT_CRITICA@
CONST	SEGMENT
??_C@_0CC@MDJAGMEA@EVALUATE_WAR_GAME_THREAT_CRITICA@ DB 'EVALUATE_WAR_GAM'
	DB	'E_THREAT_CRITICAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PLAMGJME@EVALUATE_WAR_ALREADY_FIGHTING?$AA@
CONST	SEGMENT
??_C@_0BO@PLAMGJME@EVALUATE_WAR_ALREADY_FIGHTING?$AA@ DB 'EVALUATE_WAR_AL'
	DB	'READY_FIGHTING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BLLEGEMG@EVALUATE_WAR_NOT_PREPARED?$AA@
CONST	SEGMENT
??_C@_0BK@BLLEGEMG@EVALUATE_WAR_NOT_PREPARED?$AA@ DB 'EVALUATE_WAR_NOT_PR'
	DB	'EPARED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JOKJDFOC@EVALUATE_WAR_CONQUEST_GRAND_STRA@
CONST	SEGMENT
??_C@_0CF@JOKJDFOC@EVALUATE_WAR_CONQUEST_GRAND_STRA@ DB 'EVALUATE_WAR_CON'
	DB	'QUEST_GRAND_STRATEGY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BEHPIDFA@EVALUATE_WAR_WILLING_TO_DECLARE_@
CONST	SEGMENT
??_C@_0CK@BEHPIDFA@EVALUATE_WAR_WILLING_TO_DECLARE_@ DB 'EVALUATE_WAR_WIL'
	DB	'LING_TO_DECLARE_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@POCFMHNP@EVALUATE_WAR_PLAYER_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BO@POCFMHNP@EVALUATE_WAR_PLAYER_THRESHOLD?$AA@ DB 'EVALUATE_WAR_PL'
	DB	'AYER_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CIAODHOO@COOPERATION_DESIRE_THEM_US_SAME_@
CONST	SEGMENT
??_C@_0CG@CIAODHOO@COOPERATION_DESIRE_THEM_US_SAME_@ DB 'COOPERATION_DESI'
	DB	'RE_THEM_US_SAME_ENEMY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@MNEJLOIN@COOPERATION_DESIRE_THEM_US_ENEMY@
CONST	SEGMENT
??_C@_0CM@MNEJLOIN@COOPERATION_DESIRE_THEM_US_ENEMY@ DB 'COOPERATION_DESI'
	DB	'RE_THEM_US_ENEMY_COMPETITOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GFBIFNBK@COOPERATION_DESIRE_THEM_US_COMPE@
CONST	SEGMENT
??_C@_0CM@GFBIFNBK@COOPERATION_DESIRE_THEM_US_COMPE@ DB 'COOPERATION_DESI'
	DB	'RE_THEM_US_COMPETITOR_ENEMY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CDGMPGCE@COOPERATION_DESIRE_THEM_US_SAME_@
CONST	SEGMENT
??_C@_0CL@CDGMPGCE@COOPERATION_DESIRE_THEM_US_SAME_@ DB 'COOPERATION_DESI'
	DB	'RE_THEM_US_SAME_COMPETITOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KAGDKDE@COOPERATION_DESIRE_GAME_THREAT_N@
CONST	SEGMENT
??_C@_0CE@KAGDKDE@COOPERATION_DESIRE_GAME_THREAT_N@ DB 'COOPERATION_DESIR'
	DB	'E_GAME_THREAT_NONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KNHAMPIB@COOPERATION_DESIRE_GAME_THREAT_M@
CONST	SEGMENT
??_C@_0CF@KNHAMPIB@COOPERATION_DESIRE_GAME_THREAT_M@ DB 'COOPERATION_DESI'
	DB	'RE_GAME_THREAT_MINOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BCGCBDBH@COOPERATION_DESIRE_GAME_THREAT_M@
CONST	SEGMENT
??_C@_0CF@BCGCBDBH@COOPERATION_DESIRE_GAME_THREAT_M@ DB 'COOPERATION_DESI'
	DB	'RE_GAME_THREAT_MAJOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GIBCGDPG@COOPERATION_DESIRE_GAME_THREAT_S@
CONST	SEGMENT
??_C@_0CG@GIBCGDPG@COOPERATION_DESIRE_GAME_THREAT_S@ DB 'COOPERATION_DESI'
	DB	'RE_GAME_THREAT_SEVERE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KDAEHCA@COOPERATION_DESIRE_GAME_THREAT_C@
CONST	SEGMENT
??_C@_0CI@KDAEHCA@COOPERATION_DESIRE_GAME_THREAT_C@ DB 'COOPERATION_DESIR'
	DB	'E_GAME_THREAT_CRITICAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OLECCJEM@COOPERATION_DESIRE_OPINION_ENEMY@
CONST	SEGMENT
??_C@_0CB@OLECCJEM@COOPERATION_DESIRE_OPINION_ENEMY@ DB 'COOPERATION_DESI'
	DB	'RE_OPINION_ENEMY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BKOKFH@COOPERATION_DESIRE_OPINION_COMPE@
CONST	SEGMENT
??_C@_0CG@BKOKFH@COOPERATION_DESIRE_OPINION_COMPE@ DB 'COOPERATION_DESIRE'
	DB	'_OPINION_COMPETITOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@NFKAKMBM@COOPERATION_DESIRE_OPINION_NEUTR@
CONST	SEGMENT
??_C@_0CD@NFKAKMBM@COOPERATION_DESIRE_OPINION_NEUTR@ DB 'COOPERATION_DESI'
	DB	'RE_OPINION_NEUTRAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LHEFGNPF@COOPERATION_DESIRE_OPINION_FRIEN@
CONST	SEGMENT
??_C@_0CC@LHEFGNPF@COOPERATION_DESIRE_OPINION_FRIEN@ DB 'COOPERATION_DESI'
	DB	'RE_OPINION_FRIEND', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CAFOBIAE@COOPERATION_DESIRE_OPINION_ALLY?$AA@
CONST	SEGMENT
??_C@_0CA@CAFOBIAE@COOPERATION_DESIRE_OPINION_ALLY?$AA@ DB 'COOPERATION_D'
	DB	'ESIRE_OPINION_ALLY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CIBDDIFM@COOPERATION_DESIRE_MILITARY_STRE@
CONST	SEGMENT
??_C@_0CO@CIBDDIFM@COOPERATION_DESIRE_MILITARY_STRE@ DB 'COOPERATION_DESI'
	DB	'RE_MILITARY_STRENGTH_PATHETIC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@HPFBMHFF@COOPERATION_DESIRE_MILITARY_STRE@
CONST	SEGMENT
??_C@_0CK@HPFBMHFF@COOPERATION_DESIRE_MILITARY_STRE@ DB 'COOPERATION_DESI'
	DB	'RE_MILITARY_STRENGTH_WEAK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@DDFCHPDD@COOPERATION_DESIRE_MILITARY_STRE@
CONST	SEGMENT
??_C@_0CK@DDFCHPDD@COOPERATION_DESIRE_MILITARY_STRE@ DB 'COOPERATION_DESI'
	DB	'RE_MILITARY_STRENGTH_POOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DDFANKII@COOPERATION_DESIRE_MILITARY_STRE@
CONST	SEGMENT
??_C@_0CN@DDFANKII@COOPERATION_DESIRE_MILITARY_STRE@ DB 'COOPERATION_DESI'
	DB	'RE_MILITARY_STRENGTH_AVERAGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JDBHHHHD@COOPERATION_DESIRE_MILITARY_STRE@
CONST	SEGMENT
??_C@_0CM@JDBHHHHD@COOPERATION_DESIRE_MILITARY_STRE@ DB 'COOPERATION_DESI'
	DB	'RE_MILITARY_STRENGTH_STRONG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KJLLBHA@COOPERATION_DESIRE_MILITARY_STRE@
CONST	SEGMENT
??_C@_0CO@KJLLBHA@COOPERATION_DESIRE_MILITARY_STRE@ DB 'COOPERATION_DESIR'
	DB	'E_MILITARY_STRENGTH_POWERFUL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@PILDNLAM@COOPERATION_DESIRE_MILITARY_STRE@
CONST	SEGMENT
??_C@_0CN@PILDNLAM@COOPERATION_DESIRE_MILITARY_STRE@ DB 'COOPERATION_DESI'
	DB	'RE_MILITARY_STRENGTH_IMMENSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@GEGGKLOD@COOPERATION_DESIRE_WAR_STATE_NEA@
CONST	SEGMENT
??_C@_0CN@GEGGKLOD@COOPERATION_DESIRE_WAR_STATE_NEA@ DB 'COOPERATION_DESI'
	DB	'RE_WAR_STATE_NEARLY_DEFEATED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CCIIKOMI@COOPERATION_DESIRE_WAR_STATE_DEF@
CONST	SEGMENT
??_C@_0CH@CCIIKOMI@COOPERATION_DESIRE_WAR_STATE_DEF@ DB 'COOPERATION_DESI'
	DB	'RE_WAR_STATE_DEFENSIVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LADLALAA@COOPERATION_DESIRE_WAR_STATE_STA@
CONST	SEGMENT
??_C@_0CH@LADLALAA@COOPERATION_DESIRE_WAR_STATE_STA@ DB 'COOPERATION_DESI'
	DB	'RE_WAR_STATE_STALEMATE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@ODOFGJPK@COOPERATION_DESIRE_WAR_STATE_OFF@
CONST	SEGMENT
??_C@_0CH@ODOFGJPK@COOPERATION_DESIRE_WAR_STATE_OFF@ DB 'COOPERATION_DESI'
	DB	'RE_WAR_STATE_OFFENSIVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@GHFIBPAG@COOPERATION_DESIRE_WAR_STATE_NEA@
CONST	SEGMENT
??_C@_0CI@GHFIBPAG@COOPERATION_DESIRE_WAR_STATE_NEA@ DB 'COOPERATION_DESI'
	DB	'RE_WAR_STATE_NEARLY_WON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@IIEGIHII@COOPERATION_DESIRE_WAR_STATE_CAL@
CONST	SEGMENT
??_C@_0CC@IIEGIHII@COOPERATION_DESIRE_WAR_STATE_CAL@ DB 'COOPERATION_DESI'
	DB	'RE_WAR_STATE_CALM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GJLLBODC@COOPERATION_DESIRE_THRESHOLD_WEA@
CONST	SEGMENT
??_C@_0CC@GJLLBODC@COOPERATION_DESIRE_THRESHOLD_WEA@ DB 'COOPERATION_DESI'
	DB	'RE_THRESHOLD_WEAK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HPIFJKDD@COOPERATION_DESIRE_THRESHOLD_DEC@
CONST	SEGMENT
??_C@_0CE@HPIFJKDD@COOPERATION_DESIRE_THRESHOLD_DEC@ DB 'COOPERATION_DESI'
	DB	'RE_THRESHOLD_DECENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EGKEPGIJ@COOPERATION_DESIRE_THRESHOLD_STR@
CONST	SEGMENT
??_C@_0CE@EGKEPGIJ@COOPERATION_DESIRE_THRESHOLD_STR@ DB 'COOPERATION_DESI'
	DB	'RE_THRESHOLD_STRONG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@NEFIKCMO@COOPERATION_DESIRE_THRESHOLD_EAG@
CONST	SEGMENT
??_C@_0CD@NEFIKCMO@COOPERATION_DESIRE_THRESHOLD_EAG@ DB 'COOPERATION_DESI'
	DB	'RE_THRESHOLD_EAGER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NNJHBILF@MINOR_APPROACH_WAR_TARGET_SOFT?$AA@
CONST	SEGMENT
??_C@_0BP@NNJHBILF@MINOR_APPROACH_WAR_TARGET_SOFT?$AA@ DB 'MINOR_APPROACH'
	DB	'_WAR_TARGET_SOFT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HACBACEF@MINOR_APPROACH_WAR_TARGET_FAVORA@
CONST	SEGMENT
??_C@_0CE@HACBACEF@MINOR_APPROACH_WAR_TARGET_FAVORA@ DB 'MINOR_APPROACH_W'
	DB	'AR_TARGET_FAVORABLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DBJKNFIA@MINOR_APPROACH_WAR_TARGET_AVERAG@
CONST	SEGMENT
??_C@_0CC@DBJKNFIA@MINOR_APPROACH_WAR_TARGET_AVERAG@ DB 'MINOR_APPROACH_W'
	DB	'AR_TARGET_AVERAGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CGGPJGPA@MINOR_APPROACH_WAR_TARGET_BAD?$AA@
CONST	SEGMENT
??_C@_0BO@CGGPJGPA@MINOR_APPROACH_WAR_TARGET_BAD?$AA@ DB 'MINOR_APPROACH_'
	DB	'WAR_TARGET_BAD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BKBJHBG@MINOR_APPROACH_WAR_TARGET_IMPOSS@
CONST	SEGMENT
??_C@_0CF@BKBJHBG@MINOR_APPROACH_WAR_TARGET_IMPOSS@ DB 'MINOR_APPROACH_WA'
	DB	'R_TARGET_IMPOSSIBLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HHAHPLKN@MINOR_APPROACH_PROTECTIVE_WITH_A@
CONST	SEGMENT
??_C@_0CO@HHAHPLKN@MINOR_APPROACH_PROTECTIVE_WITH_A@ DB 'MINOR_APPROACH_P'
	DB	'ROTECTIVE_WITH_ANOTHER_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@FGCGCEHN@MINOR_APPROACH_WAR_PLANNING_WAR_@
CONST	SEGMENT
??_C@_0DE@FGCGCEHN@MINOR_APPROACH_WAR_PLANNING_WAR_@ DB 'MINOR_APPROACH_W'
	DB	'AR_PLANNING_WAR_WITH_ANOTHER_PLAYER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LPJOEAAC@MINOR_APPROACH_PROTECTIVE_PERSON@
CONST	SEGMENT
??_C@_0DB@LPJOEAAC@MINOR_APPROACH_PROTECTIVE_PERSON@ DB 'MINOR_APPROACH_P'
	DB	'ROTECTIVE_PERSONALITY_IRRATIONAL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MLNIEFIC@MINOR_APPROACH_FRIENDLY_PERSONAL@
CONST	SEGMENT
??_C@_0CP@MLNIEFIC@MINOR_APPROACH_FRIENDLY_PERSONAL@ DB 'MINOR_APPROACH_F'
	DB	'RIENDLY_PERSONALITY_IRRATIONAL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@DBOMLPBA@MINOR_APPROACH_CONQUEST_PERSONAL@
CONST	SEGMENT
??_C@_0CM@DBOMLPBA@MINOR_APPROACH_CONQUEST_PERSONAL@ DB 'MINOR_APPROACH_C'
	DB	'ONQUEST_PERSONALITY_HOSTILE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@JOHJPBIA@MINOR_APPROACH_PROTECTIVE_PERSON@
CONST	SEGMENT
??_C@_0CO@JOHJPBIA@MINOR_APPROACH_PROTECTIVE_PERSON@ DB 'MINOR_APPROACH_P'
	DB	'ROTECTIVE_PERSONALITY_HOSTILE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@DGIFEDN@MINOR_APPROACH_FRIENDLY_PERSONAL@
CONST	SEGMENT
??_C@_0CM@DGIFEDN@MINOR_APPROACH_FRIENDLY_PERSONAL@ DB 'MINOR_APPROACH_FR'
	DB	'IENDLY_PERSONALITY_HOSTILE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HEDNLMNA@MINOR_APPROACH_PROTECTIVE_PERSON@
CONST	SEGMENT
??_C@_0CO@HEDNLMNA@MINOR_APPROACH_PROTECTIVE_PERSON@ DB 'MINOR_APPROACH_P'
	DB	'ROTECTIVE_PERSONALITY_NEUTRAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OJCMBJGN@MINOR_APPROACH_FRIENDLY_PERSONAL@
CONST	SEGMENT
??_C@_0CM@OJCMBJGN@MINOR_APPROACH_FRIENDLY_PERSONAL@ DB 'MINOR_APPROACH_F'
	DB	'RIENDLY_PERSONALITY_NEUTRAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@CBIPAEKP@MINOR_APPROACH_PROTECTIVE_PERSON@
CONST	SEGMENT
??_C@_0DB@CBIPAEKP@MINOR_APPROACH_PROTECTIVE_PERSON@ DB 'MINOR_APPROACH_P'
	DB	'ROTECTIVE_PERSONALITY_PROTECTIVE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@GPAPOAPO@MINOR_APPROACH_FRIENDLY_PERSONAL@
CONST	SEGMENT
??_C@_0CN@GPAPOAPO@MINOR_APPROACH_FRIENDLY_PERSONAL@ DB 'MINOR_APPROACH_F'
	DB	'RIENDLY_PERSONALITY_FRIENDLY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@DLKNDKPB@MINOR_APPROACH_CONQUEST_PROXIMIT@
CONST	SEGMENT
??_C@_0CK@DLKNDKPB@MINOR_APPROACH_CONQUEST_PROXIMIT@ DB 'MINOR_APPROACH_C'
	DB	'ONQUEST_PROXIMITY_DISTANT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PAJBCEK@MINOR_APPROACH_FRIENDLY_PROXIMIT@
CONST	SEGMENT
??_C@_0CK@PAJBCEK@MINOR_APPROACH_FRIENDLY_PROXIMIT@ DB 'MINOR_APPROACH_FR'
	DB	'IENDLY_PROXIMITY_DISTANT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CECCHKPE@MINOR_APPROACH_CONQUEST_PROXIMIT@
CONST	SEGMENT
??_C@_0CG@CECCHKPE@MINOR_APPROACH_CONQUEST_PROXIMIT@ DB 'MINOR_APPROACH_C'
	DB	'ONQUEST_PROXIMITY_FAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KNICJCCA@MINOR_APPROACH_FRIENDLY_PROXIMIT@
CONST	SEGMENT
??_C@_0CG@KNICJCCA@MINOR_APPROACH_FRIENDLY_PROXIMIT@ DB 'MINOR_APPROACH_F'
	DB	'RIENDLY_PROXIMITY_FAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CJNKGJFA@MINOR_APPROACH_CONQUEST_PROXIMIT@
CONST	SEGMENT
??_C@_0CI@CJNKGJFA@MINOR_APPROACH_CONQUEST_PROXIMIT@ DB 'MINOR_APPROACH_C'
	DB	'ONQUEST_PROXIMITY_CLOSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NKCGMNNA@MINOR_APPROACH_PROTECTIVE_PROXIM@
CONST	SEGMENT
??_C@_0CK@NKCGMNNA@MINOR_APPROACH_PROTECTIVE_PROXIM@ DB 'MINOR_APPROACH_P'
	DB	'ROTECTIVE_PROXIMITY_CLOSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NIHHDDGL@MINOR_APPROACH_IGNORE_PROXIMITY_@
CONST	SEGMENT
??_C@_0CG@NIHHDDGL@MINOR_APPROACH_IGNORE_PROXIMITY_@ DB 'MINOR_APPROACH_I'
	DB	'GNORE_PROXIMITY_CLOSE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BKLJGCJA@MINOR_APPROACH_CONQUEST_PROXIMIT@
CONST	SEGMENT
??_C@_0CM@BKLJGCJA@MINOR_APPROACH_CONQUEST_PROXIMIT@ DB 'MINOR_APPROACH_C'
	DB	'ONQUEST_PROXIMITY_NEIGHBORS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@LFCMCMAA@MINOR_APPROACH_PROTECTIVE_PROXIM@
CONST	SEGMENT
??_C@_0CO@LFCMCMAA@MINOR_APPROACH_PROTECTIVE_PROXIM@ DB 'MINOR_APPROACH_P'
	DB	'ROTECTIVE_PROXIMITY_NEIGHBORS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CIDNIJLN@MINOR_APPROACH_FRIENDLY_PROXIMIT@
CONST	SEGMENT
??_C@_0CM@CIDNIJLN@MINOR_APPROACH_FRIENDLY_PROXIMIT@ DB 'MINOR_APPROACH_F'
	DB	'RIENDLY_PROXIMITY_NEIGHBORS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@INKLLGHI@MINOR_APPROACH_IGNORE_PROXIMITY_@
CONST	SEGMENT
??_C@_0CK@INKLLGHI@MINOR_APPROACH_IGNORE_PROXIMITY_@ DB 'MINOR_APPROACH_I'
	DB	'GNORE_PROXIMITY_NEIGHBORS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FHNLLHIN@MINOR_APPROACH_PROTECTIVE_FRIEND@
CONST	SEGMENT
??_C@_0CC@FHNLLHIN@MINOR_APPROACH_PROTECTIVE_FRIEND@ DB 'MINOR_APPROACH_P'
	DB	'ROTECTIVE_FRIENDS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NPJPBNFI@MINOR_APPROACH_FRIENDLY_FRIENDS?$AA@
CONST	SEGMENT
??_C@_0CA@NPJPBNFI@MINOR_APPROACH_FRIENDLY_FRIENDS?$AA@ DB 'MINOR_APPROAC'
	DB	'H_FRIENDLY_FRIENDS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EPFIIMMC@MINOR_APPROACH_WAR_FRIENDS?$AA@
CONST	SEGMENT
??_C@_0BL@EPFIIMMC@MINOR_APPROACH_WAR_FRIENDS?$AA@ DB 'MINOR_APPROACH_WAR'
	DB	'_FRIENDS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EFKIGNCM@MINOR_APPROACH_PROTECTIVE_RESOUR@
CONST	SEGMENT
??_C@_0CE@EFKIGNCM@MINOR_APPROACH_PROTECTIVE_RESOUR@ DB 'MINOR_APPROACH_P'
	DB	'ROTECTIVE_RESOURCES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@IPOEJOME@MINOR_APPROACH_FRIENDLY_RESOURCE@
CONST	SEGMENT
??_C@_0CC@IPOEJOME@MINOR_APPROACH_FRIENDLY_RESOURCE@ DB 'MINOR_APPROACH_F'
	DB	'RIENDLY_RESOURCES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MCKBCDLL@MINOR_APPROACH_FRIENDLY_CURRENTL@
CONST	SEGMENT
??_C@_0CG@MCKBCDLL@MINOR_APPROACH_FRIENDLY_CURRENTL@ DB 'MINOR_APPROACH_F'
	DB	'RIENDLY_CURRENTLY_WAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EBJFKMEC@MINOR_APPROACH_PROTECTIVE_CURREN@
CONST	SEGMENT
??_C@_0CI@EBJFKMEC@MINOR_APPROACH_PROTECTIVE_CURREN@ DB 'MINOR_APPROACH_P'
	DB	'ROTECTIVE_CURRENTLY_WAR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@LPAKOAGN@MINOR_APPROACH_PROTECTIVE_CURREN@
CONST	SEGMENT
??_C@_0CP@LPAKOAGN@MINOR_APPROACH_PROTECTIVE_CURREN@ DB 'MINOR_APPROACH_P'
	DB	'ROTECTIVE_CURRENTLY_PROTECTIVE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JKDGKEHL@MINOR_APPROACH_WAR_CURRENTLY_PRO@
CONST	SEGMENT
??_C@_0CI@JKDGKEHL@MINOR_APPROACH_WAR_CURRENTLY_PRO@ DB 'MINOR_APPROACH_W'
	DB	'AR_CURRENTLY_PROTECTIVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@OAHDKMFM@MINOR_APPROACH_PROTECTIVE_CULTUR@
CONST	SEGMENT
??_C@_0DF@OAHDKMFM@MINOR_APPROACH_PROTECTIVE_CULTUR@ DB 'MINOR_APPROACH_P'
	DB	'ROTECTIVE_CULTURE_GRAND_STRATEGY_CST', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@FHCDIOMO@MINOR_APPROACH_IGNORE_CULTURE_GR@
CONST	SEGMENT
??_C@_0CN@FHCDIOMO@MINOR_APPROACH_IGNORE_CULTURE_GR@ DB 'MINOR_APPROACH_I'
	DB	'GNORE_CULTURE_GRAND_STRATEGY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JIJKNGGP@MINOR_APPROACH_WAR_CULTURE_GRAND@
CONST	SEGMENT
??_C@_0CK@JIJKNGGP@MINOR_APPROACH_WAR_CULTURE_GRAND@ DB 'MINOR_APPROACH_W'
	DB	'AR_CULTURE_GRAND_STRATEGY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NCCCKKCN@MINOR_APPROACH_PROTECTIVE_DIPLO_@
CONST	SEGMENT
??_C@_0DJ@NCCCKKCN@MINOR_APPROACH_PROTECTIVE_DIPLO_@ DB 'MINOR_APPROACH_P'
	DB	'ROTECTIVE_DIPLO_GRAND_STRATEGY_NEIGHBORS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PMPMFLNC@MINOR_APPROACH_IGNORE_DIPLO_GRAN@
CONST	SEGMENT
??_C@_0CL@PMPMFLNC@MINOR_APPROACH_IGNORE_DIPLO_GRAN@ DB 'MINOR_APPROACH_I'
	DB	'GNORE_DIPLO_GRAND_STRATEGY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IHCGGBFA@MINOR_APPROACH_WAR_DIPLO_GRAND_S@
CONST	SEGMENT
??_C@_0CI@IHCGGBFA@MINOR_APPROACH_WAR_DIPLO_GRAND_S@ DB 'MINOR_APPROACH_W'
	DB	'AR_DIPLO_GRAND_STRATEGY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@NOEONLGG@MINOR_APPROACH_WAR_CONQUEST_GRAN@
CONST	SEGMENT
??_C@_0DF@NOEONLGG@MINOR_APPROACH_WAR_CONQUEST_GRAN@ DB 'MINOR_APPROACH_W'
	DB	'AR_CONQUEST_GRAND_STRATEGY_NEIGHBORS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@JPEKHOKH@MINOR_APPROACH_FRIENDLY_CONQUEST@
CONST	SEGMENT
??_C@_0DA@JPEKHOKH@MINOR_APPROACH_FRIENDLY_CONQUEST@ DB 'MINOR_APPROACH_F'
	DB	'RIENDLY_CONQUEST_GRAND_STRATEGY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@HCIGLLIC@MINOR_APPROACH_PROTECTIVE_CONQUE@
CONST	SEGMENT
??_C@_0DC@HCIGLLIC@MINOR_APPROACH_PROTECTIVE_CONQUE@ DB 'MINOR_APPROACH_P'
	DB	'ROTECTIVE_CONQUEST_GRAND_STRATEGY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NBFHJCOD@MINOR_APPROACH_WAR_CONQUEST_GRAN@
CONST	SEGMENT
??_C@_0CL@NBFHJCOD@MINOR_APPROACH_WAR_CONQUEST_GRAN@ DB 'MINOR_APPROACH_W'
	DB	'AR_CONQUEST_GRAND_STRATEGY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@CPMALOGG@MINOR_APPROACH_IGNORE_CURRENTLY_@
CONST	SEGMENT
??_C@_0CE@CPMALOGG@MINOR_APPROACH_IGNORE_CURRENTLY_@ DB 'MINOR_APPROACH_I'
	DB	'GNORE_CURRENTLY_WAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GHLPFOP@MINOR_APPROACH_BIAS_FOR_CURRENT?$AA@
CONST	SEGMENT
??_C@_0CA@GHLPFOP@MINOR_APPROACH_BIAS_FOR_CURRENT?$AA@ DB 'MINOR_APPROACH'
	DB	'_BIAS_FOR_CURRENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NFJNEGHL@MINOR_APPROACH_IGNORE_DEFAULT?$AA@
CONST	SEGMENT
??_C@_0BO@NFJNEGHL@MINOR_APPROACH_IGNORE_DEFAULT?$AA@ DB 'MINOR_APPROACH_'
	DB	'IGNORE_DEFAULT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EDMMIOIF@APPROACH_WAR_PROXIMITY_DISTANT?$AA@
CONST	SEGMENT
??_C@_0BP@EDMMIOIF@APPROACH_WAR_PROXIMITY_DISTANT?$AA@ DB 'APPROACH_WAR_P'
	DB	'ROXIMITY_DISTANT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DODMLEEP@APPROACH_WAR_PROXIMITY_FAR?$AA@
CONST	SEGMENT
??_C@_0BL@DODMLEEP@APPROACH_WAR_PROXIMITY_FAR?$AA@ DB 'APPROACH_WAR_PROXI'
	DB	'MITY_FAR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FCDHOLIK@APPROACH_WAR_PROXIMITY_CLOSE?$AA@
CONST	SEGMENT
??_C@_0BN@FCDHOLIK@APPROACH_WAR_PROXIMITY_CLOSE?$AA@ DB 'APPROACH_WAR_PRO'
	DB	'XIMITY_CLOSE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JNOGNBJG@APPROACH_WAR_PROXIMITY_NEIGHBORS@
CONST	SEGMENT
??_C@_0CB@JNOGNBJG@APPROACH_WAR_PROXIMITY_NEIGHBORS@ DB 'APPROACH_WAR_PRO'
	DB	'XIMITY_NEIGHBORS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HGGPFKOH@APPROACH_WAR_RECKLESS_EXPANDER?$AA@
CONST	SEGMENT
??_C@_0BP@HGGPFKOH@APPROACH_WAR_RECKLESS_EXPANDER?$AA@ DB 'APPROACH_WAR_R'
	DB	'ECKLESS_EXPANDER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IHHNMPNB@APPROACH_WAR_HAS_MADE_PEACE_BEFO@
CONST	SEGMENT
??_C@_0CL@IHHNMPNB@APPROACH_WAR_HAS_MADE_PEACE_BEFO@ DB 'APPROACH_WAR_HAS'
	DB	'_MADE_PEACE_BEFORE_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GLHBGGDH@TURNS_SINCE_PEACE_WEIGHT_DAMPENE@
CONST	SEGMENT
??_C@_0CC@GLHBGGDH@TURNS_SINCE_PEACE_WEIGHT_DAMPENE@ DB 'TURNS_SINCE_PEAC'
	DB	'E_WEIGHT_DAMPENER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@BBGIMJHE@APPROACH_GUARDED_PROJECTION_VERY@
CONST	SEGMENT
??_C@_0CO@BBGIMJHE@APPROACH_GUARDED_PROJECTION_VERY@ DB 'APPROACH_GUARDED'
	DB	'_PROJECTION_VERY_GOOD_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GIGIHKCN@APPROACH_GUARDED_PROJECTION_GOOD@
CONST	SEGMENT
??_C@_0CJ@GIGIHKCN@APPROACH_GUARDED_PROJECTION_GOOD@ DB 'APPROACH_GUARDED'
	DB	'_PROJECTION_GOOD_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CNNGEPBF@APPROACH_GUARDED_PROJECTION_UNKN@
CONST	SEGMENT
??_C@_0CM@CNNGEPBF@APPROACH_GUARDED_PROJECTION_UNKN@ DB 'APPROACH_GUARDED'
	DB	'_PROJECTION_UNKNOWN_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NIJBCKHL@APPROACH_GUARDED_PROJECTION_STAL@
CONST	SEGMENT
??_C@_0CO@NIJBCKHL@APPROACH_GUARDED_PROJECTION_STAL@ DB 'APPROACH_GUARDED'
	DB	'_PROJECTION_STALEMATE_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IMFBHCN@APPROACH_GUARDED_PROJECTION_DEFE@
CONST	SEGMENT
??_C@_0CL@IMFBHCN@APPROACH_GUARDED_PROJECTION_DEFE@ DB 'APPROACH_GUARDED_'
	DB	'PROJECTION_DEFEAT_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@FJIKILCD@APPROACH_GUARDED_PROJECTION_DEST@
CONST	SEGMENT
??_C@_0DA@FJIKILCD@APPROACH_GUARDED_PROJECTION_DEST@ DB 'APPROACH_GUARDED'
	DB	'_PROJECTION_DESTRUCTION_PERCENT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CHEGKFFB@APPROACH_WAR_PROJECTION_VERY_GOO@
CONST	SEGMENT
??_C@_0CK@CHEGKFFB@APPROACH_WAR_PROJECTION_VERY_GOO@ DB 'APPROACH_WAR_PRO'
	DB	'JECTION_VERY_GOOD_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LIABFBHD@APPROACH_WAR_PROJECTION_GOOD_PER@
CONST	SEGMENT
??_C@_0CF@LIABFBHD@APPROACH_WAR_PROJECTION_GOOD_PER@ DB 'APPROACH_WAR_PRO'
	DB	'JECTION_GOOD_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JOKGIOK@APPROACH_WAR_PROJECTION_UNKNOWN_@
CONST	SEGMENT
??_C@_0CI@JOKGIOK@APPROACH_WAR_PROJECTION_UNKNOWN_@ DB 'APPROACH_WAR_PROJ'
	DB	'ECTION_UNKNOWN_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OOLPEGFO@APPROACH_WAR_PROJECTION_STALEMAT@
CONST	SEGMENT
??_C@_0CK@OOLPEGFO@APPROACH_WAR_PROJECTION_STALEMAT@ DB 'APPROACH_WAR_PRO'
	DB	'JECTION_STALEMATE_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IAEBEONO@APPROACH_WAR_PROJECTION_DEFEAT_P@
CONST	SEGMENT
??_C@_0CH@IAEBEONO@APPROACH_WAR_PROJECTION_DEFEAT_P@ DB 'APPROACH_WAR_PRO'
	DB	'JECTION_DEFEAT_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PFHNEAJJ@APPROACH_WAR_PROJECTION_DESTRUCT@
CONST	SEGMENT
??_C@_0CM@PFHNEAJJ@APPROACH_WAR_PROJECTION_DESTRUCT@ DB 'APPROACH_WAR_PRO'
	DB	'JECTION_DESTRUCTION_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NEGLOGIE@APPROACH_FRIENDLY_AFRAID_WITH_AN@
CONST	SEGMENT
??_C@_0CN@NEGLOGIE@APPROACH_FRIENDLY_AFRAID_WITH_AN@ DB 'APPROACH_FRIENDL'
	DB	'Y_AFRAID_WITH_ANOTHER_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@EOOEDFKO@APPROACH_DECEPTIVE_AFRAID_WITH_A@
CONST	SEGMENT
??_C@_0CO@EOOEDFKO@APPROACH_DECEPTIVE_AFRAID_WITH_A@ DB 'APPROACH_DECEPTI'
	DB	'VE_AFRAID_WITH_ANOTHER_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LENDHHFO@APPROACH_HOSTILE_AFRAID_WITH_ANO@
CONST	SEGMENT
??_C@_0CM@LENDHHFO@APPROACH_HOSTILE_AFRAID_WITH_ANO@ DB 'APPROACH_HOSTILE'
	DB	'_AFRAID_WITH_ANOTHER_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BCAFLEHK@APPROACH_WAR_AFRAID_WITH_ANOTHER@
CONST	SEGMENT
??_C@_0CI@BCAFLEHK@APPROACH_WAR_AFRAID_WITH_ANOTHER@ DB 'APPROACH_WAR_AFR'
	DB	'AID_WITH_ANOTHER_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NMGEOBLL@APPROACH_FRIENDLY_HOSTILE_WITH_A@
CONST	SEGMENT
??_C@_0CO@NMGEOBLL@APPROACH_FRIENDLY_HOSTILE_WITH_A@ DB 'APPROACH_FRIENDL'
	DB	'Y_HOSTILE_WITH_ANOTHER_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HEFKHLO@APPROACH_DECEPTIVE_HOSTILE_WITH_@
CONST	SEGMENT
??_C@_0CP@HEFKHLO@APPROACH_DECEPTIVE_HOSTILE_WITH_@ DB 'APPROACH_DECEPTIV'
	DB	'E_HOSTILE_WITH_ANOTHER_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LKACGCOA@APPROACH_HOSTILE_HOSTILE_WITH_AN@
CONST	SEGMENT
??_C@_0CN@LKACGCOA@APPROACH_HOSTILE_HOSTILE_WITH_AN@ DB 'APPROACH_HOSTILE'
	DB	'_HOSTILE_WITH_ANOTHER_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IGKHFAPC@APPROACH_WAR_HOSTILE_WITH_ANOTHE@
CONST	SEGMENT
??_C@_0CJ@IGKHFAPC@APPROACH_WAR_HOSTILE_WITH_ANOTHE@ DB 'APPROACH_WAR_HOS'
	DB	'TILE_WITH_ANOTHER_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@DLINKJGM@APPROACH_FRIENDLY_PLANNING_WAR_W@
CONST	SEGMENT
??_C@_0DD@DLINKJGM@APPROACH_FRIENDLY_PLANNING_WAR_W@ DB 'APPROACH_FRIENDL'
	DB	'Y_PLANNING_WAR_WITH_ANOTHER_PLAYER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KIBNGJB@APPROACH_GUARDED_PLANNING_WAR_WI@
CONST	SEGMENT
??_C@_0DC@KIBNGJB@APPROACH_GUARDED_PLANNING_WAR_WI@ DB 'APPROACH_GUARDED_'
	DB	'PLANNING_WAR_WITH_ANOTHER_PLAYER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@BGFBBBPO@APPROACH_DECEPTIVE_PLANNING_WAR_@
CONST	SEGMENT
??_C@_0DE@BGFBBBPO@APPROACH_DECEPTIVE_PLANNING_WAR_@ DB 'APPROACH_DECEPTI'
	DB	'VE_PLANNING_WAR_WITH_ANOTHER_PLAYER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@PEFPDFNA@APPROACH_HOSTILE_PLANNING_WAR_WI@
CONST	SEGMENT
??_C@_0DC@PEFPDFNA@APPROACH_HOSTILE_PLANNING_WAR_WI@ DB 'APPROACH_HOSTILE'
	DB	'_PLANNING_WAR_WITH_ANOTHER_PLAYER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@BIBNCHGM@APPROACH_WAR_PLANNING_WAR_WITH_A@
CONST	SEGMENT
??_C@_0CO@BIBNCHGM@APPROACH_WAR_PLANNING_WAR_WITH_A@ DB 'APPROACH_WAR_PLA'
	DB	'NNING_WAR_WITH_ANOTHER_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FHMIKABK@APPROACH_FRIENDLY_AT_WAR_WITH_PL@
CONST	SEGMENT
??_C@_0CF@FHMIKABK@APPROACH_FRIENDLY_AT_WAR_WITH_PL@ DB 'APPROACH_FRIENDL'
	DB	'Y_AT_WAR_WITH_PLAYER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PBIBLAKO@APPROACH_GUARDED_AT_WAR_WITH_PLA@
CONST	SEGMENT
??_C@_0CE@PBIBLAKO@APPROACH_GUARDED_AT_WAR_WITH_PLA@ DB 'APPROACH_GUARDED'
	DB	'_AT_WAR_WITH_PLAYER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DPFPHELM@APPROACH_DECEPTIVE_AT_WAR_WITH_P@
CONST	SEGMENT
??_C@_0CG@DPFPHELM@APPROACH_DECEPTIVE_AT_WAR_WITH_P@ DB 'APPROACH_DECEPTI'
	DB	'VE_AT_WAR_WITH_PLAYER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NJIMIHFF@APPROACH_HOSTILE_AT_WAR_WITH_PLA@
CONST	SEGMENT
??_C@_0CE@NJIMIHFF@APPROACH_HOSTILE_AT_WAR_WITH_PLA@ DB 'APPROACH_HOSTILE'
	DB	'_AT_WAR_WITH_PLAYER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@MACAEGIN@APPROACH_WAR_AT_WAR_WITH_PLAYER_@
CONST	SEGMENT
??_C@_0CM@MACAEGIN@APPROACH_WAR_AT_WAR_WITH_PLAYER_@ DB 'APPROACH_WAR_AT_'
	DB	'WAR_WITH_PLAYER_WARS_LOSING', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@PBJONADN@APPROACH_WAR_AT_WAR_WITH_PLAYER_@
CONST	SEGMENT
??_C@_0CN@PBJONADN@APPROACH_WAR_AT_WAR_WITH_PLAYER_@ DB 'APPROACH_WAR_AT_'
	DB	'WAR_WITH_PLAYER_WARS_WINNING', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@HJDLKDFK@APPROACH_WAR_AT_WAR_WITH_PLAYER_@
CONST	SEGMENT
??_C@_0CN@HJDLKDFK@APPROACH_WAR_AT_WAR_WITH_PLAYER_@ DB 'APPROACH_WAR_AT_'
	DB	'WAR_WITH_PLAYER_WARS_NEUTRAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BEMLPIIN@APPROACH_HOSTILE_MILITARY_THREAT@
CONST	SEGMENT
??_C@_0CG@BEMLPIIN@APPROACH_HOSTILE_MILITARY_THREAT@ DB 'APPROACH_HOSTILE'
	DB	'_MILITARY_THREAT_NONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@MPGBPEPE@APPROACH_FRIENDLY_MILITARY_THREA@
CONST	SEGMENT
??_C@_0CI@MPGBPEPE@APPROACH_FRIENDLY_MILITARY_THREA@ DB 'APPROACH_FRIENDL'
	DB	'Y_MILITARY_THREAT_MINOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PJPOCFLH@APPROACH_AFRAID_MILITARY_THREAT_@
CONST	SEGMENT
??_C@_0CG@PJPOCFLH@APPROACH_AFRAID_MILITARY_THREAT_@ DB 'APPROACH_AFRAID_'
	DB	'MILITARY_THREAT_MINOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EIPEEJPL@APPROACH_GUARDED_MILITARY_THREAT@
CONST	SEGMENT
??_C@_0CH@EIPEEJPL@APPROACH_GUARDED_MILITARY_THREAT@ DB 'APPROACH_GUARDED'
	DB	'_MILITARY_THREAT_MINOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JJKLNDLC@APPROACH_DECEPTIVE_MILITARY_THRE@
CONST	SEGMENT
??_C@_0CJ@JJKLNDLC@APPROACH_DECEPTIVE_MILITARY_THRE@ DB 'APPROACH_DECEPTI'
	DB	'VE_MILITARY_THREAT_MINOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HAHDCIGC@APPROACH_FRIENDLY_MILITARY_THREA@
CONST	SEGMENT
??_C@_0CI@HAHDCIGC@APPROACH_FRIENDLY_MILITARY_THREA@ DB 'APPROACH_FRIENDL'
	DB	'Y_MILITARY_THREAT_MAJOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EGOMPJCB@APPROACH_AFRAID_MILITARY_THREAT_@
CONST	SEGMENT
??_C@_0CG@EGOMPJCB@APPROACH_AFRAID_MILITARY_THREAT_@ DB 'APPROACH_AFRAID_'
	DB	'MILITARY_THREAT_MAJOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PHOGJFGN@APPROACH_GUARDED_MILITARY_THREAT@
CONST	SEGMENT
??_C@_0CH@PHOGJFGN@APPROACH_GUARDED_MILITARY_THREAT@ DB 'APPROACH_GUARDED'
	DB	'_MILITARY_THREAT_MAJOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CGLJAPCE@APPROACH_DECEPTIVE_MILITARY_THRE@
CONST	SEGMENT
??_C@_0CJ@CGLJAPCE@APPROACH_DECEPTIVE_MILITARY_THRE@ DB 'APPROACH_DECEPTI'
	DB	'VE_MILITARY_THREAT_MAJOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@EIBPPHHO@APPROACH_FRIENDLY_MILITARY_THREA@
CONST	SEGMENT
??_C@_0CJ@EIBPPHHO@APPROACH_FRIENDLY_MILITARY_THREA@ DB 'APPROACH_FRIENDL'
	DB	'Y_MILITARY_THREAT_SEVERE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KHPMHIIF@APPROACH_AFRAID_MILITARY_THREAT_@
CONST	SEGMENT
??_C@_0CH@KHPMHIIF@APPROACH_AFRAID_MILITARY_THREAT_@ DB 'APPROACH_AFRAID_'
	DB	'MILITARY_THREAT_SEVERE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NICHHPFC@APPROACH_GUARDED_MILITARY_THREAT@
CONST	SEGMENT
??_C@_0CI@NICHHPFC@APPROACH_GUARDED_MILITARY_THREAT@ DB 'APPROACH_GUARDED'
	DB	'_MILITARY_THREAT_SEVERE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NHPGNJPM@APPROACH_DECEPTIVE_MILITARY_THRE@
CONST	SEGMENT
??_C@_0CK@NHPGNJPM@APPROACH_DECEPTIVE_MILITARY_THRE@ DB 'APPROACH_DECEPTI'
	DB	'VE_MILITARY_THREAT_SEVERE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@OAICCDD@APPROACH_FRIENDLY_MILITARY_THREA@
CONST	SEGMENT
??_C@_0CL@OAICCDD@APPROACH_FRIENDLY_MILITARY_THREA@ DB 'APPROACH_FRIENDLY'
	DB	'_MILITARY_THREAT_CRITICAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CPBAKIGE@APPROACH_FRIENDLY_IGNORED_CITY_S@
CONST	SEGMENT
??_C@_0CN@CPBAKIGE@APPROACH_FRIENDLY_IGNORED_CITY_S@ DB 'APPROACH_FRIENDL'
	DB	'Y_IGNORED_CITY_STATE_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@LFJPHLEO@APPROACH_DECEPTIVE_IGNORED_CITY_@
CONST	SEGMENT
??_C@_0CO@LFJPHLEO@APPROACH_DECEPTIVE_IGNORED_CITY_@ DB 'APPROACH_DECEPTI'
	DB	'VE_IGNORED_CITY_STATE_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OJHOPKJK@APPROACH_WAR_IGNORED_CITY_STATE_@
CONST	SEGMENT
??_C@_0CI@OJHOPKJK@APPROACH_WAR_IGNORED_CITY_STATE_@ DB 'APPROACH_WAR_IGN'
	DB	'ORED_CITY_STATE_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@CAOFKMPH@APPROACH_FRIENDLY_BROKEN_CITY_ST@
CONST	SEGMENT
??_C@_0DC@CAOFKMPH@APPROACH_FRIENDLY_BROKEN_CITY_ST@ DB 'APPROACH_FRIENDL'
	DB	'Y_BROKEN_CITY_STATE_PROMISE_WORLD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@POLCLDAI@APPROACH_DECEPTIVE_BROKEN_CITY_S@
CONST	SEGMENT
??_C@_0DD@POLCLDAI@APPROACH_DECEPTIVE_BROKEN_CITY_S@ DB 'APPROACH_DECEPTI'
	DB	'VE_BROKEN_CITY_STATE_PROMISE_WORLD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@GJAMBDAA@APPROACH_WAR_BROKEN_CITY_STATE_P@
CONST	SEGMENT
??_C@_0CN@GJAMBDAA@APPROACH_WAR_BROKEN_CITY_STATE_P@ DB 'APPROACH_WAR_BRO'
	DB	'KEN_CITY_STATE_PROMISE_WORLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@DCABCAAI@APPROACH_FRIENDLY_BROKEN_CITY_ST@
CONST	SEGMENT
??_C@_0CM@DCABCAAI@APPROACH_FRIENDLY_BROKEN_CITY_ST@ DB 'APPROACH_FRIENDL'
	DB	'Y_BROKEN_CITY_STATE_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CGBLMIJ@APPROACH_DECEPTIVE_BROKEN_CITY_S@
CONST	SEGMENT
??_C@_0CN@CGBLMIJ@APPROACH_DECEPTIVE_BROKEN_CITY_S@ DB 'APPROACH_DECEPTIV'
	DB	'E_BROKEN_CITY_STATE_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FAIKGMDC@APPROACH_WAR_BROKEN_CITY_STATE_P@
CONST	SEGMENT
??_C@_0CH@FAIKGMDC@APPROACH_WAR_BROKEN_CITY_STATE_P@ DB 'APPROACH_WAR_BRO'
	DB	'KEN_CITY_STATE_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KGCJKCDH@APPROACH_FRIENDLY_IGNORED_BORDER@
CONST	SEGMENT
??_C@_0CJ@KGCJKCDH@APPROACH_FRIENDLY_IGNORED_BORDER@ DB 'APPROACH_FRIENDL'
	DB	'Y_IGNORED_BORDER_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@DJMAIMLF@APPROACH_DECEPTIVE_IGNORED_BORDE@
CONST	SEGMENT
??_C@_0CK@DJMAIMLF@APPROACH_DECEPTIVE_IGNORED_BORDE@ DB 'APPROACH_DECEPTI'
	DB	'VE_IGNORED_BORDER_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DPCMIDPO@APPROACH_WAR_IGNORED_BORDER_PROM@
CONST	SEGMENT
??_C@_0CE@DPCMIDPO@APPROACH_WAR_IGNORED_BORDER_PROM@ DB 'APPROACH_WAR_IGN'
	DB	'ORED_BORDER_PROMISE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HMBMGOPC@APPROACH_FRIENDLY_BROKEN_BORDER_@
CONST	SEGMENT
??_C@_0CI@HMBMGOPC@APPROACH_FRIENDLY_BROKEN_BORDER_@ DB 'APPROACH_FRIENDL'
	DB	'Y_BROKEN_BORDER_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CKNGEJLE@APPROACH_DECEPTIVE_BROKEN_BORDER@
CONST	SEGMENT
??_C@_0CJ@CKNGEJLE@APPROACH_DECEPTIVE_BROKEN_BORDER@ DB 'APPROACH_DECEPTI'
	DB	'VE_BROKEN_BORDER_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HAGMBNPB@APPROACH_WAR_BROKEN_BORDER_PROMI@
CONST	SEGMENT
??_C@_0CD@HAGMBNPB@APPROACH_WAR_BROKEN_BORDER_PROMI@ DB 'APPROACH_WAR_BRO'
	DB	'KEN_BORDER_PROMISE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IDFBCBJB@APPROACH_FRIENDLY_IGNORED_EXPANS@
CONST	SEGMENT
??_C@_0CM@IDFBCBJB@APPROACH_FRIENDLY_IGNORED_EXPANS@ DB 'APPROACH_FRIENDL'
	DB	'Y_IGNORED_EXPANSION_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LDDBLNBA@APPROACH_DECEPTIVE_IGNORED_EXPAN@
CONST	SEGMENT
??_C@_0CN@LDDBLNBA@APPROACH_DECEPTIVE_IGNORED_EXPAN@ DB 'APPROACH_DECEPTI'
	DB	'VE_IGNORED_EXPANSION_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OBNKGNKL@APPROACH_WAR_IGNORED_EXPANSION_P@
CONST	SEGMENT
??_C@_0CH@OBNKGNKL@APPROACH_WAR_IGNORED_EXPANSION_P@ DB 'APPROACH_WAR_IGN'
	DB	'ORED_EXPANSION_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CFMJCJIB@APPROACH_FRIENDLY_BROKEN_EXPANSI@
CONST	SEGMENT
??_C@_0CL@CFMJCJIB@APPROACH_FRIENDLY_BROKEN_EXPANSI@ DB 'APPROACH_FRIENDL'
	DB	'Y_BROKEN_EXPANSION_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PAKKEBGO@APPROACH_DECEPTIVE_BROKEN_EXPANS@
CONST	SEGMENT
??_C@_0CM@PAKKEBGO@APPROACH_DECEPTIVE_BROKEN_EXPANS@ DB 'APPROACH_DECEPTI'
	DB	'VE_BROKEN_EXPANSION_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HDJIMMNN@APPROACH_WAR_BROKEN_EXPANSION_PR@
CONST	SEGMENT
??_C@_0CG@HDJIMMNN@APPROACH_WAR_BROKEN_EXPANSION_PR@ DB 'APPROACH_WAR_BRO'
	DB	'KEN_EXPANSION_PROMISE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GDFIDJAP@APPROACH_FRIENDLY_IGNORED_MILITA@
CONST	SEGMENT
??_C@_0CL@GDFIDJAP@APPROACH_FRIENDLY_IGNORED_MILITA@ DB 'APPROACH_FRIENDL'
	DB	'Y_IGNORED_MILITARY_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LGDLFBOA@APPROACH_DECEPTIVE_IGNORED_MILIT@
CONST	SEGMENT
??_C@_0CM@LGDLFBOA@APPROACH_DECEPTIVE_IGNORED_MILIT@ DB 'APPROACH_DECEPTI'
	DB	'VE_IGNORED_MILITARY_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CFGCCAFJ@APPROACH_FRIENDLY_BROKEN_MILITAR@
CONST	SEGMENT
??_C@_0DA@CFGCCAFJ@APPROACH_FRIENDLY_BROKEN_MILITAR@ DB 'APPROACH_FRIENDL'
	DB	'Y_BROKEN_MILITARY_PROMISE_WORLD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MHKKOLJI@APPROACH_DECEPTIVE_BROKEN_MILITA@
CONST	SEGMENT
??_C@_0DB@MHKKOLJI@APPROACH_DECEPTIVE_BROKEN_MILITA@ DB 'APPROACH_DECEPTI'
	DB	'VE_BROKEN_MILITARY_PROMISE_WORLD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LILPANMM@APPROACH_WAR_BROKEN_MILITARY_PRO@
CONST	SEGMENT
??_C@_0CL@LILPANMM@APPROACH_WAR_BROKEN_MILITARY_PRO@ DB 'APPROACH_WAR_BRO'
	DB	'KEN_MILITARY_PROMISE_WORLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EHAHEOKK@APPROACH_FRIENDLY_BROKEN_MILITAR@
CONST	SEGMENT
??_C@_0CK@EHAHEOKK@APPROACH_FRIENDLY_BROKEN_MILITAR@ DB 'APPROACH_FRIENDL'
	DB	'Y_BROKEN_MILITARY_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EECOEFII@APPROACH_DECEPTIVE_BROKEN_MILITA@
CONST	SEGMENT
??_C@_0CL@EECOEFII@APPROACH_DECEPTIVE_BROKEN_MILITA@ DB 'APPROACH_DECEPTI'
	DB	'VE_BROKEN_MILITARY_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KFCGDBJP@APPROACH_WAR_BROKEN_MILITARY_PRO@
CONST	SEGMENT
??_C@_0CF@KFCGDBJP@APPROACH_WAR_BROKEN_MILITARY_PRO@ DB 'APPROACH_WAR_BRO'
	DB	'KEN_MILITARY_PROMISE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MAAIDOML@APPROACH_FRIENDLY_DEMAND?$AA@
CONST	SEGMENT
??_C@_0BJ@MAAIDOML@APPROACH_FRIENDLY_DEMAND?$AA@ DB 'APPROACH_FRIENDLY_DE'
	DB	'MAND', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DADEBGKO@APPROACH_DECEPTIVE_DEMAND?$AA@
CONST	SEGMENT
??_C@_0BK@DADEBGKO@APPROACH_DECEPTIVE_DEMAND?$AA@ DB 'APPROACH_DECEPTIVE_'
	DB	'DEMAND', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IEEHGLBH@APPROACH_AFRAID_MILITARY_THREAT_@
CONST	SEGMENT
??_C@_0CJ@IEEHGLBH@APPROACH_AFRAID_MILITARY_THREAT_@ DB 'APPROACH_AFRAID_'
	DB	'MILITARY_THREAT_CRITICAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NEFKNCLH@APPROACH_GUARDED_MILITARY_THREAT@
CONST	SEGMENT
??_C@_0CK@NEFKNCLH@APPROACH_GUARDED_MILITARY_THREAT@ DB 'APPROACH_GUARDED'
	DB	'_MILITARY_THREAT_CRITICAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@NLGLEKNM@APPROACH_DECEPTIVE_MILITARY_THRE@
CONST	SEGMENT
??_C@_0CM@NLGLEKNM@APPROACH_DECEPTIVE_MILITARY_THRE@ DB 'APPROACH_DECEPTI'
	DB	'VE_MILITARY_THREAT_CRITICAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HEIHBCHL@APPROACH_ATTACKED_PROTECTED_MINO@
CONST	SEGMENT
??_C@_0CP@HEIHBCHL@APPROACH_ATTACKED_PROTECTED_MINO@ DB 'APPROACH_ATTACKE'
	DB	'D_PROTECTED_MINOR_PAST_GUARDED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@ELPHEHHE@APPROACH_ATTACKED_PROTECTED_MINO@
CONST	SEGMENT
??_C@_0CP@ELPHEHHE@APPROACH_ATTACKED_PROTECTED_MINO@ DB 'APPROACH_ATTACKE'
	DB	'D_PROTECTED_MINOR_PAST_HOSTILE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DDNFPENJ@APPROACH_ATTACKED_PROTECTED_MINO@
CONST	SEGMENT
??_C@_0CL@DDNFPENJ@APPROACH_ATTACKED_PROTECTED_MINO@ DB 'APPROACH_ATTACKE'
	DB	'D_PROTECTED_MINOR_PAST_WAR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JCPAIJKP@APPROACH_ATTACKED_PROTECTED_MINO@
CONST	SEGMENT
??_C@_0CK@JCPAIJKP@APPROACH_ATTACKED_PROTECTED_MINO@ DB 'APPROACH_ATTACKE'
	DB	'D_PROTECTED_MINOR_GUARDED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KNIANMKA@APPROACH_ATTACKED_PROTECTED_MINO@
CONST	SEGMENT
??_C@_0CK@KNIANMKA@APPROACH_ATTACKED_PROTECTED_MINO@ DB 'APPROACH_ATTACKE'
	DB	'D_PROTECTED_MINOR_HOSTILE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IPELBGIL@APPROACH_ATTACKED_PROTECTED_MINO@
CONST	SEGMENT
??_C@_0CG@IPELBGIL@APPROACH_ATTACKED_PROTECTED_MINO@ DB 'APPROACH_ATTACKE'
	DB	'D_PROTECTED_MINOR_WAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HIDOJFIG@APPROACH_DECEPTIVE_DENOUNCED?$AA@
CONST	SEGMENT
??_C@_0BN@HIDOJFIG@APPROACH_DECEPTIVE_DENOUNCED?$AA@ DB 'APPROACH_DECEPTI'
	DB	'VE_DENOUNCED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EEBAEOJA@APPROACH_FRIENDLY_DENOUNCED?$AA@
CONST	SEGMENT
??_C@_0BM@EEBAEOJA@APPROACH_FRIENDLY_DENOUNCED?$AA@ DB 'APPROACH_FRIENDLY'
	DB	'_DENOUNCED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IONDHHAI@APPROACH_GUARDED_DENOUNCED?$AA@
CONST	SEGMENT
??_C@_0BL@IONDHHAI@APPROACH_GUARDED_DENOUNCED?$AA@ DB 'APPROACH_GUARDED_D'
	DB	'ENOUNCED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LFGGGMJH@APPROACH_HOSTILE_DENOUNCED?$AA@
CONST	SEGMENT
??_C@_0BL@LFGGGMJH@APPROACH_HOSTILE_DENOUNCED?$AA@ DB 'APPROACH_HOSTILE_D'
	DB	'ENOUNCED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EGPMBCDM@APPROACH_WAR_DENOUNCED?$AA@
CONST	SEGMENT
??_C@_0BH@EGPMBCDM@APPROACH_WAR_DENOUNCED?$AA@ DB 'APPROACH_WAR_DENOUNCED'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PEIODDKJ@APPROACH_WAR_WORKING_AGAINST_PLA@
CONST	SEGMENT
??_C@_0CE@PEIODDKJ@APPROACH_WAR_WORKING_AGAINST_PLA@ DB 'APPROACH_WAR_WOR'
	DB	'KING_AGAINST_PLAYER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NOLCOEI@APPROACH_HOSTILE_WORKING_AGAINST@
CONST	SEGMENT
??_C@_0CI@NOLCOEI@APPROACH_HOSTILE_WORKING_AGAINST@ DB 'APPROACH_HOSTILE_'
	DB	'WORKING_AGAINST_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PCGCDMOC@APPROACH_DECEPTIVE_WORKING_AGAIN@
CONST	SEGMENT
??_C@_0CK@PCGCDMOC@APPROACH_DECEPTIVE_WORKING_AGAIN@ DB 'APPROACH_DECEPTI'
	DB	'VE_WORKING_AGAINST_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@ILECEPOC@APPROACH_GUARDED_WORKING_WITH_PL@
CONST	SEGMENT
??_C@_0CF@ILECEPOC@APPROACH_GUARDED_WORKING_WITH_PL@ DB 'APPROACH_GUARDED'
	DB	'_WORKING_WITH_PLAYER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KBAFGJEB@APPROACH_HOSTILE_WORKING_WITH_PL@
CONST	SEGMENT
??_C@_0CF@KBAFGJEB@APPROACH_HOSTILE_WORKING_WITH_PL@ DB 'APPROACH_HOSTILE'
	DB	'_WORKING_WITH_PLAYER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EHOIHBGH@APPROACH_FRIENDLY_WORKING_WITH_P@
CONST	SEGMENT
??_C@_0CG@EHOIHBGH@APPROACH_FRIENDLY_WORKING_WITH_P@ DB 'APPROACH_FRIENDL'
	DB	'Y_WORKING_WITH_PLAYER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HIDFOAGO@APPROACH_DECEPTIVE_WORKING_WITH_@
CONST	SEGMENT
??_C@_0CH@HIDFOAGO@APPROACH_DECEPTIVE_WORKING_WITH_@ DB 'APPROACH_DECEPTI'
	DB	'VE_WORKING_WITH_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DAOGNHJ@APPROACH_OPINION_ALLY_FRIENDLY?$AA@
CONST	SEGMENT
??_C@_0BP@DAOGNHJ@APPROACH_OPINION_ALLY_FRIENDLY?$AA@ DB 'APPROACH_OPINIO'
	DB	'N_ALLY_FRIENDLY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GEFBBFOG@APPROACH_OPINION_FRIEND_FRIENDLY@
CONST	SEGMENT
??_C@_0CB@GEFBBFOG@APPROACH_OPINION_FRIEND_FRIENDLY@ DB 'APPROACH_OPINION'
	DB	'_FRIEND_FRIENDLY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IGECGNPC@APPROACH_OPINION_FRIEND_HOSTILE?$AA@
CONST	SEGMENT
??_C@_0CA@IGECGNPC@APPROACH_OPINION_FRIEND_HOSTILE?$AA@ DB 'APPROACH_OPIN'
	DB	'ION_FRIEND_HOSTILE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NGKINCPC@APPROACH_OPINION_FAVORABLE_FRIEN@
CONST	SEGMENT
??_C@_0CE@NGKINCPC@APPROACH_OPINION_FAVORABLE_FRIEN@ DB 'APPROACH_OPINION'
	DB	'_FAVORABLE_FRIENDLY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OGEBCAIJ@APPROACH_OPINION_FAVORABLE_DECEP@
CONST	SEGMENT
??_C@_0CF@OGEBCAIJ@APPROACH_OPINION_FAVORABLE_DECEP@ DB 'APPROACH_OPINION'
	DB	'_FAVORABLE_DECEPTIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@MCIOFBEL@APPROACH_OPINION_FAVORABLE_HOSTI@
CONST	SEGMENT
??_C@_0CD@MCIOFBEL@APPROACH_OPINION_FAVORABLE_HOSTI@ DB 'APPROACH_OPINION'
	DB	'_FAVORABLE_HOSTILE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JHFCAHDK@APPROACH_OPINION_NEUTRAL_FRIENDL@
CONST	SEGMENT
??_C@_0CC@JHFCAHDK@APPROACH_OPINION_NEUTRAL_FRIENDL@ DB 'APPROACH_OPINION'
	DB	'_NEUTRAL_FRIENDLY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDLPJANO@APPROACH_OPINION_NEUTRAL_DECEPTI@
CONST	SEGMENT
??_C@_0CD@HDLPJANO@APPROACH_OPINION_NEUTRAL_DECEPTI@ DB 'APPROACH_OPINION'
	DB	'_NEUTRAL_DECEPTIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KGJNPOBK@APPROACH_OPINION_COMPETITOR_GUAR@
CONST	SEGMENT
??_C@_0CE@KGJNPOBK@APPROACH_OPINION_COMPETITOR_GUAR@ DB 'APPROACH_OPINION'
	DB	'_COMPETITOR_GUARDED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@JPBBBADC@APPROACH_OPINION_COMPETITOR_DECE@
CONST	SEGMENT
??_C@_0CG@JPBBBADC@APPROACH_OPINION_COMPETITOR_DECE@ DB 'APPROACH_OPINION'
	DB	'_COMPETITOR_DECEPTIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JJONKLBF@APPROACH_OPINION_COMPETITOR_HOST@
CONST	SEGMENT
??_C@_0CE@JJONKLBF@APPROACH_OPINION_COMPETITOR_HOST@ DB 'APPROACH_OPINION'
	DB	'_COMPETITOR_HOSTILE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MBNPKDNK@APPROACH_OPINION_COMPETITOR_WAR?$AA@
CONST	SEGMENT
??_C@_0CA@MBNPKDNK@APPROACH_OPINION_COMPETITOR_WAR?$AA@ DB 'APPROACH_OPIN'
	DB	'ION_COMPETITOR_WAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KOBMPIGP@APPROACH_OPINION_ENEMY_GUARDED?$AA@
CONST	SEGMENT
??_C@_0BP@KOBMPIGP@APPROACH_OPINION_ENEMY_GUARDED?$AA@ DB 'APPROACH_OPINI'
	DB	'ON_ENEMY_GUARDED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CEDKDADF@APPROACH_OPINION_ENEMY_DECEPTIVE@
CONST	SEGMENT
??_C@_0CB@CEDKDADF@APPROACH_OPINION_ENEMY_DECEPTIVE@ DB 'APPROACH_OPINION'
	DB	'_ENEMY_DECEPTIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JBGMKNGA@APPROACH_OPINION_ENEMY_HOSTILE?$AA@
CONST	SEGMENT
??_C@_0BP@JBGMKNGA@APPROACH_OPINION_ENEMY_HOSTILE?$AA@ DB 'APPROACH_OPINI'
	DB	'ON_ENEMY_HOSTILE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DBPADJGG@APPROACH_OPINION_ENEMY_WAR?$AA@
CONST	SEGMENT
??_C@_0BL@DBPADJGG@APPROACH_OPINION_ENEMY_WAR?$AA@ DB 'APPROACH_OPINION_E'
	DB	'NEMY_WAR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GKEPFGLN@APPROACH_OPINION_UNFORGIVABLE_GU@
CONST	SEGMENT
??_C@_0CG@GKEPFGLN@APPROACH_OPINION_UNFORGIVABLE_GU@ DB 'APPROACH_OPINION'
	DB	'_UNFORGIVABLE_GUARDED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KGFKNNBE@APPROACH_OPINION_UNFORGIVABLE_DE@
CONST	SEGMENT
??_C@_0CI@KGFKNNBE@APPROACH_OPINION_UNFORGIVABLE_DE@ DB 'APPROACH_OPINION'
	DB	'_UNFORGIVABLE_DECEPTIVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FFDPADLC@APPROACH_OPINION_UNFORGIVABLE_HO@
CONST	SEGMENT
??_C@_0CG@FFDPADLC@APPROACH_OPINION_UNFORGIVABLE_HO@ DB 'APPROACH_OPINION'
	DB	'_UNFORGIVABLE_HOSTILE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MPFKAOKB@APPROACH_OPINION_UNFORGIVABLE_WA@
CONST	SEGMENT
??_C@_0CC@MPFKAOKB@APPROACH_OPINION_UNFORGIVABLE_WA@ DB 'APPROACH_OPINION'
	DB	'_UNFORGIVABLE_WAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FDBBHCEH@APPROACH_WAR_CONQUEST_GRAND_STRA@
CONST	SEGMENT
??_C@_0CF@FDBBHCEH@APPROACH_WAR_CONQUEST_GRAND_STRA@ DB 'APPROACH_WAR_CON'
	DB	'QUEST_GRAND_STRATEGY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KBMFJJGA@APPROACH_RANDOM_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BI@KBMFJJGA@APPROACH_RANDOM_PERCENT?$AA@ DB 'APPROACH_RANDOM_PERCE'
	DB	'NT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FBBPAFNE@APPROACH_WAR_CURRENTLY_WAR?$AA@
CONST	SEGMENT
??_C@_0BL@FBBPAFNE@APPROACH_WAR_CURRENTLY_WAR?$AA@ DB 'APPROACH_WAR_CURRE'
	DB	'NTLY_WAR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@GHCLPGPK@APPROACH_HOSTILE_CURRENTLY_HOSTI@
CONST	SEGMENT
??_C@_0CD@GHCLPGPK@APPROACH_HOSTILE_CURRENTLY_HOSTI@ DB 'APPROACH_HOSTILE'
	DB	'_CURRENTLY_HOSTILE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NBCCENIC@APPROACH_WAR_CURRENTLY_DECEPTIVE@
CONST	SEGMENT
??_C@_0CB@NBCCENIC@APPROACH_WAR_CURRENTLY_DECEPTIVE@ DB 'APPROACH_WAR_CUR'
	DB	'RENTLY_DECEPTIVE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MKEJLEMN@APPROACH_BIAS_FOR_CURRENT?$AA@
CONST	SEGMENT
??_C@_0BK@MKEJLEMN@APPROACH_BIAS_FOR_CURRENT?$AA@ DB 'APPROACH_BIAS_FOR_C'
	DB	'URRENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BAAOCJOL@APPROACH_NEUTRAL_DEFAULT?$AA@
CONST	SEGMENT
??_C@_0BJ@BAAOCJOL@APPROACH_NEUTRAL_DEFAULT?$AA@ DB 'APPROACH_NEUTRAL_DEF'
	DB	'AULT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DFICOJOI@OPINION_THRESHOLD_ALLY?$AA@
CONST	SEGMENT
??_C@_0BH@DFICOJOI@OPINION_THRESHOLD_ALLY?$AA@ DB 'OPINION_THRESHOLD_ALLY'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IPDEAGED@OPINION_THRESHOLD_FRIEND?$AA@
CONST	SEGMENT
??_C@_0BJ@IPDEAGED@OPINION_THRESHOLD_FRIEND?$AA@ DB 'OPINION_THRESHOLD_FR'
	DB	'IEND', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OIPDHAJK@OPINION_THRESHOLD_FAVORABLE?$AA@
CONST	SEGMENT
??_C@_0BM@OIPDHAJK@OPINION_THRESHOLD_FAVORABLE?$AA@ DB 'OPINION_THRESHOLD'
	DB	'_FAVORABLE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GCKHCPPJ@OPINION_THRESHOLD_COMPETITOR?$AA@
CONST	SEGMENT
??_C@_0BN@GCKHCPPJ@OPINION_THRESHOLD_COMPETITOR?$AA@ DB 'OPINION_THRESHOL'
	DB	'D_COMPETITOR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ECOLFLOO@OPINION_THRESHOLD_ENEMY?$AA@
CONST	SEGMENT
??_C@_0BI@ECOLFLOO@OPINION_THRESHOLD_ENEMY?$AA@ DB 'OPINION_THRESHOLD_ENE'
	DB	'MY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HIJGPDCC@OPINION_THRESHOLD_UNFORGIVABLE?$AA@
CONST	SEGMENT
??_C@_0BP@HIJGPDCC@OPINION_THRESHOLD_UNFORGIVABLE?$AA@ DB 'OPINION_THRESH'
	DB	'OLD_UNFORGIVABLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@HJFNLFEG@OPINION_WEIGHT_THEY_SUPPORTED_OU@
CONST	SEGMENT
??_C@_0DE@HJFNLFEG@OPINION_WEIGHT_THEY_SUPPORTED_OU@ DB 'OPINION_WEIGHT_T'
	DB	'HEY_SUPPORTED_OUR_HOSTING_NUM_TURNS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CAMABMFF@OPINION_WEIGHT_THEY_SUPPORTED_OU@
CONST	SEGMENT
??_C@_0CK@CAMABMFF@OPINION_WEIGHT_THEY_SUPPORTED_OU@ DB 'OPINION_WEIGHT_T'
	DB	'HEY_SUPPORTED_OUR_HOSTING', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@JKJPKMBM@OPINION_WEIGHT_THEY_FOILED_OUR_P@
CONST	SEGMENT
??_C@_0DC@JKJPKMBM@OPINION_WEIGHT_THEY_FOILED_OUR_P@ DB 'OPINION_WEIGHT_T'
	DB	'HEY_FOILED_OUR_PROPOSAL_NUM_TURNS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@MKPGLGGL@OPINION_WEIGHT_THEY_FOILED_OUR_P@
CONST	SEGMENT
??_C@_0CI@MKPGLGGL@OPINION_WEIGHT_THEY_FOILED_OUR_P@ DB 'OPINION_WEIGHT_T'
	DB	'HEY_FOILED_OUR_PROPOSAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@FLOIPDCE@OPINION_WEIGHT_THEY_SUPPORTED_OU@
CONST	SEGMENT
??_C@_0DF@FLOIPDCE@OPINION_WEIGHT_THEY_SUPPORTED_OU@ DB 'OPINION_WEIGHT_T'
	DB	'HEY_SUPPORTED_OUR_PROPOSAL_NUM_TURNS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KFBKBDAB@OPINION_WEIGHT_THEY_SUPPORTED_OU@
CONST	SEGMENT
??_C@_0CL@KFBKBDAB@OPINION_WEIGHT_THEY_SUPPORTED_OU@ DB 'OPINION_WEIGHT_T'
	DB	'HEY_SUPPORTED_OUR_PROPOSAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@DACOLAJN@OPINION_WEIGHT_WE_DISLIKED_THEIR@
CONST	SEGMENT
??_C@_0DE@DACOLAJN@OPINION_WEIGHT_WE_DISLIKED_THEIR@ DB 'OPINION_WEIGHT_W'
	DB	'E_DISLIKED_THEIR_PROPOSAL_NUM_TURNS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PAONHNDJ@OPINION_WEIGHT_WE_DISLIKED_THEIR@
CONST	SEGMENT
??_C@_0CK@PAONHNDJ@OPINION_WEIGHT_WE_DISLIKED_THEIR@ DB 'OPINION_WEIGHT_W'
	DB	'E_DISLIKED_THEIR_PROPOSAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@EPFCNAPB@OPINION_WEIGHT_WE_LIKED_THEIR_PR@
CONST	SEGMENT
??_C@_0DB@EPFCNAPB@OPINION_WEIGHT_WE_LIKED_THEIR_PR@ DB 'OPINION_WEIGHT_W'
	DB	'E_LIKED_THEIR_PROPOSAL_NUM_TURNS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MFAFHNFL@OPINION_WEIGHT_WE_LIKED_THEIR_PR@
CONST	SEGMENT
??_C@_0CH@MFAFHNFL@OPINION_WEIGHT_WE_LIKED_THEIR_PR@ DB 'OPINION_WEIGHT_W'
	DB	'E_LIKED_THEIR_PROPOSAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GAAEDCJI@OPINION_WEIGHT_CAPTURED_CAPITAL?$AA@
CONST	SEGMENT
??_C@_0CA@GAAEDCJI@OPINION_WEIGHT_CAPTURED_CAPITAL?$AA@ DB 'OPINION_WEIGH'
	DB	'T_CAPTURED_CAPITAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BCPMJJAA@OPINION_WEIGHT_INTRIGUE_SHARED_B@
CONST	SEGMENT
??_C@_0CC@BCPMJJAA@OPINION_WEIGHT_INTRIGUE_SHARED_B@ DB 'OPINION_WEIGHT_I'
	DB	'NTRIGUE_SHARED_BY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NNGEGEDD@OPINION_WEIGHT_ROBBED_BY?$AA@
CONST	SEGMENT
??_C@_0BJ@NNGEGEDD@OPINION_WEIGHT_ROBBED_BY?$AA@ DB 'OPINION_WEIGHT_ROBBE'
	DB	'D_BY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DONBINCF@OPINION_WEIGHT_NUKED_MAX?$AA@
CONST	SEGMENT
??_C@_0BJ@DONBINCF@OPINION_WEIGHT_NUKED_MAX?$AA@ DB 'OPINION_WEIGHT_NUKED'
	DB	'_MAX', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IJCMMNEI@OPINION_WEIGHT_PAID_TRIBUTE?$AA@
CONST	SEGMENT
??_C@_0BM@IJCMMNEI@OPINION_WEIGHT_PAID_TRIBUTE?$AA@ DB 'OPINION_WEIGHT_PA'
	DB	'ID_TRIBUTE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@ICMFGNMG@OPINION_WEIGHT_GAVE_ASSISTANCE?$AA@
CONST	SEGMENT
??_C@_0BP@ICMFGNMG@OPINION_WEIGHT_GAVE_ASSISTANCE?$AA@ DB 'OPINION_WEIGHT'
	DB	'_GAVE_ASSISTANCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OHOAMABE@OPINION_WEIGHT_LIBERATED_CITY?$AA@
CONST	SEGMENT
??_C@_0BO@OHOAMABE@OPINION_WEIGHT_LIBERATED_CITY?$AA@ DB 'OPINION_WEIGHT_'
	DB	'LIBERATED_CITY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NBLKNKIF@OPINION_WEIGHT_LIBERATED_CAPITAL@
CONST	SEGMENT
??_C@_0CB@NBLKNKIF@OPINION_WEIGHT_LIBERATED_CAPITAL@ DB 'OPINION_WEIGHT_L'
	DB	'IBERATED_CAPITAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GMLGBCBH@OPINION_WEIGHT_ASSIST_MAX?$AA@
CONST	SEGMENT
??_C@_0BK@GMLGBCBH@OPINION_WEIGHT_ASSIST_MAX?$AA@ DB 'OPINION_WEIGHT_ASSI'
	DB	'ST_MAX', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HLKLGIIC@OPINION_WEIGHT_COMMON_FOE_MAX?$AA@
CONST	SEGMENT
??_C@_0BO@HLKLGIIC@OPINION_WEIGHT_COMMON_FOE_MAX?$AA@ DB 'OPINION_WEIGHT_'
	DB	'COMMON_FOE_MAX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JGNHDFBE@OPINION_WEIGHT_TRADE_MAX?$AA@
CONST	SEGMENT
??_C@_0BJ@JGNHDFBE@OPINION_WEIGHT_TRADE_MAX?$AA@ DB 'OPINION_WEIGHT_TRADE'
	DB	'_MAX', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JAFPFEJJ@OPINION_WEIGHT_RECKLESS_EXPANDER@
CONST	SEGMENT
??_C@_0CB@JAFPFEJJ@OPINION_WEIGHT_RECKLESS_EXPANDER@ DB 'OPINION_WEIGHT_R'
	DB	'ECKLESS_EXPANDER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OCOJJAID@OPINION_WEIGHT_DENOUNCED_ENEMY?$AA@
CONST	SEGMENT
??_C@_0BP@OCOJJAID@OPINION_WEIGHT_DENOUNCED_ENEMY?$AA@ DB 'OPINION_WEIGHT'
	DB	'_DENOUNCED_ENEMY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LMJHBJGN@OPINION_WEIGHT_DENOUNCED_FRIEND?$AA@
CONST	SEGMENT
??_C@_0CA@LMJHBJGN@OPINION_WEIGHT_DENOUNCED_FRIEND?$AA@ DB 'OPINION_WEIGH'
	DB	'T_DENOUNCED_FRIEND', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DLLGJPHH@OPINION_WEIGHT_DENOUNCED_THEM?$AA@
CONST	SEGMENT
??_C@_0BO@DLLGJPHH@OPINION_WEIGHT_DENOUNCED_THEM?$AA@ DB 'OPINION_WEIGHT_'
	DB	'DENOUNCED_THEM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BCHLKJEI@OPINION_WEIGHT_DENOUNCED_ME?$AA@
CONST	SEGMENT
??_C@_0BM@BCHLKJEI@OPINION_WEIGHT_DENOUNCED_ME?$AA@ DB 'OPINION_WEIGHT_DE'
	DB	'NOUNCED_ME', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OEBNOAAF@OPINION_WEIGHT_REFUSED_REQUEST_E@
CONST	SEGMENT
??_C@_0CE@OEBNOAAF@OPINION_WEIGHT_REFUSED_REQUEST_E@ DB 'OPINION_WEIGHT_R'
	DB	'EFUSED_REQUEST_EACH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BOHIDAM@OPINION_WEIGHT_WAR_ME_FRIENDS?$AA@
CONST	SEGMENT
??_C@_0BO@BOHIDAM@OPINION_WEIGHT_WAR_ME_FRIENDS?$AA@ DB 'OPINION_WEIGHT_W'
	DB	'AR_ME_FRIENDS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GANDNAID@OPINION_WEIGHT_WAR_FRIEND_EACH?$AA@
CONST	SEGMENT
??_C@_0BP@GANDNAID@OPINION_WEIGHT_WAR_FRIEND_EACH?$AA@ DB 'OPINION_WEIGHT'
	DB	'_WAR_FRIEND_EACH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@IAFHEDEO@OPINION_WEIGHT_DENOUNCED_ME_FRIE@
CONST	SEGMENT
??_C@_0CE@IAFHEDEO@OPINION_WEIGHT_DENOUNCED_ME_FRIE@ DB 'OPINION_WEIGHT_D'
	DB	'ENOUNCED_ME_FRIENDS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PIIAEAPP@OPINION_WEIGHT_DENOUNCED_FRIEND_@
CONST	SEGMENT
??_C@_0CF@PIIAEAPP@OPINION_WEIGHT_DENOUNCED_FRIEND_@ DB 'OPINION_WEIGHT_D'
	DB	'ENOUNCED_FRIEND_EACH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MGHPKADK@OPINION_WEIGHT_DENOUNCED_BY_FRIE@
CONST	SEGMENT
??_C@_0CN@MGHPKADK@OPINION_WEIGHT_DENOUNCED_BY_FRIE@ DB 'OPINION_WEIGHT_D'
	DB	'ENOUNCED_BY_FRIEND_DONT_LIKE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IHJPOEHG@OPINION_WEIGHT_DENOUNCED_BY_FRIE@
CONST	SEGMENT
??_C@_0CI@IHJPOEHG@OPINION_WEIGHT_DENOUNCED_BY_FRIE@ DB 'OPINION_WEIGHT_D'
	DB	'ENOUNCED_BY_FRIEND_EACH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GJJNNLHG@OPINION_WEIGHT_DOF_WITH_ENEMY?$AA@
CONST	SEGMENT
??_C@_0BO@GJJNNLHG@OPINION_WEIGHT_DOF_WITH_ENEMY?$AA@ DB 'OPINION_WEIGHT_'
	DB	'DOF_WITH_ENEMY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HBMLGLLF@OPINION_WEIGHT_DOF_WITH_FRIEND?$AA@
CONST	SEGMENT
??_C@_0BP@HBMLGLLF@OPINION_WEIGHT_DOF_WITH_FRIEND?$AA@ DB 'OPINION_WEIGHT'
	DB	'_DOF_WITH_FRIEND', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MEDGEIBP@OPINION_WEIGHT_DOF?$AA@
CONST	SEGMENT
??_C@_0BD@MEDGEIBP@OPINION_WEIGHT_DOF?$AA@ DB 'OPINION_WEIGHT_DOF', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MINIOCHN@OPINION_WEIGHT_SIDED_WITH_THEIR_@
CONST	SEGMENT
??_C@_0CG@MINIOCHN@OPINION_WEIGHT_SIDED_WITH_THEIR_@ DB 'OPINION_WEIGHT_S'
	DB	'IDED_WITH_THEIR_MINOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@MLAMFGPP@OPINION_WEIGHT_SIDED_WITH_THEIR_@
CONST	SEGMENT
??_C@_0DP@MLAMFGPP@OPINION_WEIGHT_SIDED_WITH_THEIR_@ DB 'OPINION_WEIGHT_S'
	DB	'IDED_WITH_THEIR_MINOR_NUM_TURNS_UNTIL_FORGIVEN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@POOJBOCH@OPINION_WEIGHT_BULLIED_MANY_PROT@
CONST	SEGMENT
??_C@_0CN@POOJBOCH@OPINION_WEIGHT_BULLIED_MANY_PROT@ DB 'OPINION_WEIGHT_B'
	DB	'ULLIED_MANY_PROTECTED_MINORS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@OKCABGCK@OPINION_WEIGHT_BULLIED_PROTECTED@
CONST	SEGMENT
??_C@_0DB@OKCABGCK@OPINION_WEIGHT_BULLIED_PROTECTED@ DB 'OPINION_WEIGHT_B'
	DB	'ULLIED_PROTECTED_MINOR_WHILE_AGO', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@DNJHALAB@OPINION_WEIGHT_BULLIED_PROTECTED@
CONST	SEGMENT
??_C@_0DA@DNJHALAB@OPINION_WEIGHT_BULLIED_PROTECTED@ DB 'OPINION_WEIGHT_B'
	DB	'ULLIED_PROTECTED_MINOR_RECENTLY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@FIOJLLBN@OPINION_WEIGHT_BULLIED_PROTECTED@
CONST	SEGMENT
??_C@_0DK@FIOJLLBN@OPINION_WEIGHT_BULLIED_PROTECTED@ DB 'OPINION_WEIGHT_B'
	DB	'ULLIED_PROTECTED_MINOR_RECENTLY_NUM_TURNS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@PECFNFCD@OPINION_WEIGHT_BULLIED_PROTECTED@
CONST	SEGMENT
??_C@_0EA@PECFNFCD@OPINION_WEIGHT_BULLIED_PROTECTED@ DB 'OPINION_WEIGHT_B'
	DB	'ULLIED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FGGKBHPN@OPINION_WEIGHT_ATTACKED_MANY_PRO@
CONST	SEGMENT
??_C@_0CO@FGGKBHPN@OPINION_WEIGHT_ATTACKED_MANY_PRO@ DB 'OPINION_WEIGHT_A'
	DB	'TTACKED_MANY_PROTECTED_MINORS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GELLJEAK@OPINION_WEIGHT_ATTACKED_PROTECTE@
CONST	SEGMENT
??_C@_0DC@GELLJEAK@OPINION_WEIGHT_ATTACKED_PROTECTE@ DB 'OPINION_WEIGHT_A'
	DB	'TTACKED_PROTECTED_MINOR_WHILE_AGO', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@BIPKNCJM@OPINION_WEIGHT_ATTACKED_PROTECTE@
CONST	SEGMENT
??_C@_0DB@BIPKNCJM@OPINION_WEIGHT_ATTACKED_PROTECTE@ DB 'OPINION_WEIGHT_A'
	DB	'TTACKED_PROTECTED_MINOR_RECENTLY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@CHDOMHH@OPINION_WEIGHT_ATTACKED_PROTECTE@
CONST	SEGMENT
??_C@_0DL@CHDOMHH@OPINION_WEIGHT_ATTACKED_PROTECTE@ DB 'OPINION_WEIGHT_AT'
	DB	'TACKED_PROTECTED_MINOR_RECENTLY_NUM_TURNS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@GEKPEAGC@OPINION_WEIGHT_ATTACKED_PROTECTE@
CONST	SEGMENT
??_C@_0EB@GEKPEAGC@OPINION_WEIGHT_ATTACKED_PROTECTE@ DB 'OPINION_WEIGHT_A'
	DB	'TTACKED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OLNPGDEE@OPINION_WEIGHT_KILLED_MANY_PROTE@
CONST	SEGMENT
??_C@_0CM@OLNPGDEE@OPINION_WEIGHT_KILLED_MANY_PROTE@ DB 'OPINION_WEIGHT_K'
	DB	'ILLED_MANY_PROTECTED_MINORS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@ENGJNFEN@OPINION_WEIGHT_KILLED_PROTECTED_@
CONST	SEGMENT
??_C@_0CG@ENGJNFEN@OPINION_WEIGHT_KILLED_PROTECTED_@ DB 'OPINION_WEIGHT_K'
	DB	'ILLED_PROTECTED_MINOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@EIEGNBC@OPINION_WEIGHT_KILLED_PROTECTED_@
CONST	SEGMENT
??_C@_0DP@EIEGNBC@OPINION_WEIGHT_KILLED_PROTECTED_@ DB 'OPINION_WEIGHT_KI'
	DB	'LLED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HGEOCBFJ@OPINION_WEIGHT_BROKEN_COOP_WAR_P@
CONST	SEGMENT
??_C@_0CH@HGEOCBFJ@OPINION_WEIGHT_BROKEN_COOP_WAR_P@ DB 'OPINION_WEIGHT_B'
	DB	'ROKEN_COOP_WAR_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HMBKAKGI@OPINION_WEIGHT_IGNORED_NO_DIG_PR@
CONST	SEGMENT
??_C@_0CG@HMBKAKGI@OPINION_WEIGHT_IGNORED_NO_DIG_PR@ DB 'OPINION_WEIGHT_I'
	DB	'GNORED_NO_DIG_PROMISE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KOHJIHBL@OPINION_WEIGHT_BROKEN_NO_DIG_PRO@
CONST	SEGMENT
??_C@_0CF@KOHJIHBL@OPINION_WEIGHT_BROKEN_NO_DIG_PRO@ DB 'OPINION_WEIGHT_B'
	DB	'ROKEN_NO_DIG_PROMISE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OEALGMOJ@OPINION_WEIGHT_IGNORED_NO_CONVER@
CONST	SEGMENT
??_C@_0CK@OEALGMOJ@OPINION_WEIGHT_IGNORED_NO_CONVER@ DB 'OPINION_WEIGHT_I'
	DB	'GNORED_NO_CONVERT_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FCGBGANE@OPINION_WEIGHT_BROKEN_NO_CONVERT@
CONST	SEGMENT
??_C@_0CJ@FCGBGANE@OPINION_WEIGHT_BROKEN_NO_CONVERT@ DB 'OPINION_WEIGHT_B'
	DB	'ROKEN_NO_CONVERT_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JOKECKPM@OPINION_WEIGHT_FORGAVE_FOR_SPYIN@
CONST	SEGMENT
??_C@_0CC@JOKECKPM@OPINION_WEIGHT_FORGAVE_FOR_SPYIN@ DB 'OPINION_WEIGHT_F'
	DB	'ORGAVE_FOR_SPYING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HBKCALNG@OPINION_WEIGHT_IGNORED_SPY_PROMI@
CONST	SEGMENT
??_C@_0CD@HBKCALNG@OPINION_WEIGHT_IGNORED_SPY_PROMI@ DB 'OPINION_WEIGHT_I'
	DB	'GNORED_SPY_PROMISE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PPAPEFML@OPINION_WEIGHT_BROKEN_SPY_PROMIS@
CONST	SEGMENT
??_C@_0CC@PPAPEFML@OPINION_WEIGHT_BROKEN_SPY_PROMIS@ DB 'OPINION_WEIGHT_B'
	DB	'ROKEN_SPY_PROMISE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KMOLKNCC@OPINION_WEIGHT_IGNORED_CITY_STAT@
CONST	SEGMENT
??_C@_0CK@KMOLKNCC@OPINION_WEIGHT_IGNORED_CITY_STAT@ DB 'OPINION_WEIGHT_I'
	DB	'GNORED_CITY_STATE_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@GJLHKGJF@OPINION_WEIGHT_BROKEN_CITY_STATE@
CONST	SEGMENT
??_C@_0CP@GJLHKGJF@OPINION_WEIGHT_BROKEN_CITY_STATE@ DB 'OPINION_WEIGHT_B'
	DB	'ROKEN_CITY_STATE_PROMISE_WORLD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BKIBKBBP@OPINION_WEIGHT_BROKEN_CITY_STATE@
CONST	SEGMENT
??_C@_0CJ@BKIBKBBP@OPINION_WEIGHT_BROKEN_CITY_STATE@ DB 'OPINION_WEIGHT_B'
	DB	'ROKEN_CITY_STATE_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LFFOBLJJ@OPINION_WEIGHT_IGNORED_BORDER_PR@
CONST	SEGMENT
??_C@_0CG@LFFOBLJJ@OPINION_WEIGHT_IGNORED_BORDER_PR@ DB 'OPINION_WEIGHT_I'
	DB	'GNORED_BORDER_PROMISE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GHDNJGOK@OPINION_WEIGHT_BROKEN_BORDER_PRO@
CONST	SEGMENT
??_C@_0CF@GHDNJGOK@OPINION_WEIGHT_BROKEN_BORDER_PRO@ DB 'OPINION_WEIGHT_B'
	DB	'ROKEN_BORDER_PROMISE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KLNBKAIG@OPINION_WEIGHT_IGNORED_EXPANSION@
CONST	SEGMENT
??_C@_0CJ@KLNBKAIG@OPINION_WEIGHT_IGNORED_EXPANSION@ DB 'OPINION_WEIGHT_I'
	DB	'GNORED_EXPANSION_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KHPAKALJ@OPINION_WEIGHT_BROKEN_EXPANSION_@
CONST	SEGMENT
??_C@_0CI@KHPAKALJ@OPINION_WEIGHT_BROKEN_EXPANSION_@ DB 'OPINION_WEIGHT_B'
	DB	'ROKEN_EXPANSION_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OBGBLADH@OPINION_WEIGHT_IGNORED_MILITARY_@
CONST	SEGMENT
??_C@_0CI@OBGBLADH@OPINION_WEIGHT_IGNORED_MILITARY_@ DB 'OPINION_WEIGHT_I'
	DB	'GNORED_MILITARY_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@GGNAOHJ@OPINION_WEIGHT_BROKEN_MILITARY_P@
CONST	SEGMENT
??_C@_0CN@GGNAOHJ@OPINION_WEIGHT_BROKEN_MILITARY_P@ DB 'OPINION_WEIGHT_BR'
	DB	'OKEN_MILITARY_PROMISE_WORLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HGHKLHPM@OPINION_WEIGHT_BROKEN_MILITARY_P@
CONST	SEGMENT
??_C@_0CH@HGHKLHPM@OPINION_WEIGHT_BROKEN_MILITARY_P@ DB 'OPINION_WEIGHT_B'
	DB	'ROKEN_MILITARY_PROMISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@ICOMMJAM@OPINION_WEIGHT_DIFFERENT_LATE_PO@
CONST	SEGMENT
??_C@_0CH@ICOMMJAM@OPINION_WEIGHT_DIFFERENT_LATE_PO@ DB 'OPINION_WEIGHT_D'
	DB	'IFFERENT_LATE_POLICIES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BGIFIPM@OPINION_WEIGHT_SAME_LATE_POLICIE@
CONST	SEGMENT
??_C@_0CC@BGIFIPM@OPINION_WEIGHT_SAME_LATE_POLICIE@ DB 'OPINION_WEIGHT_SA'
	DB	'ME_LATE_POLICIES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MBFDCBOD@OPINION_WEIGHT_ADOPTING_MY_RELIG@
CONST	SEGMENT
??_C@_0CE@MBFDCBOD@OPINION_WEIGHT_ADOPTING_MY_RELIG@ DB 'OPINION_WEIGHT_A'
	DB	'DOPTING_MY_RELIGION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JNKODEDO@OPINION_WEIGHT_ADOPTING_HIS_RELI@
CONST	SEGMENT
??_C@_0CF@JNKODEDO@OPINION_WEIGHT_ADOPTING_HIS_RELI@ DB 'OPINION_WEIGHT_A'
	DB	'DOPTING_HIS_RELIGION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PNOPKKKI@OPINION_WEIGHT_PER_NEGATIVE_CONV@
CONST	SEGMENT
??_C@_0CH@PNOPKKKI@OPINION_WEIGHT_PER_NEGATIVE_CONV@ DB 'OPINION_WEIGHT_P'
	DB	'ER_NEGATIVE_CONVERSION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MLKJPMMI@OPINION_WEIGHT_CULTURE_BOMBED?$AA@
CONST	SEGMENT
??_C@_0BO@MLKJPMMI@OPINION_WEIGHT_CULTURE_BOMBED?$AA@ DB 'OPINION_WEIGHT_'
	DB	'CULTURE_BOMBED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BKOKPIIN@OPINION_WEIGHT_EMBASSY?$AA@
CONST	SEGMENT
??_C@_0BH@BKOKPIIN@OPINION_WEIGHT_EMBASSY?$AA@ DB 'OPINION_WEIGHT_EMBASSY'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LGFFELLN@OPINION_WEIGHT_LIBERATED_THREE_C@
CONST	SEGMENT
??_C@_0CG@LGFFELLN@OPINION_WEIGHT_LIBERATED_THREE_C@ DB 'OPINION_WEIGHT_L'
	DB	'IBERATED_THREE_CITIES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MMCMJBDD@OPINION_WEIGHT_LIBERATED_TWO_CIT@
CONST	SEGMENT
??_C@_0CE@MMCMJBDD@OPINION_WEIGHT_LIBERATED_TWO_CIT@ DB 'OPINION_WEIGHT_L'
	DB	'IBERATED_TWO_CITIES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CMEGAJIK@OPINION_WEIGHT_LIBERATED_ONE_CIT@
CONST	SEGMENT
??_C@_0CC@CMEGAJIK@OPINION_WEIGHT_LIBERATED_ONE_CIT@ DB 'OPINION_WEIGHT_L'
	DB	'IBERATED_ONE_CITY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KBKFAEID@OPINION_WEIGHT_RESURRECTED?$AA@
CONST	SEGMENT
??_C@_0BL@KBKFAEID@OPINION_WEIGHT_RESURRECTED?$AA@ DB 'OPINION_WEIGHT_RES'
	DB	'URRECTED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LFKIFCGA@OPINION_WEIGHT_BUILT_LANDMARK?$AA@
CONST	SEGMENT
??_C@_0BO@LFKIFCGA@OPINION_WEIGHT_BUILT_LANDMARK?$AA@ DB 'OPINION_WEIGHT_'
	DB	'BUILT_LANDMARK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CJMENLAH@OPINION_WEIGHT_RETURNED_CIVILIAN@
CONST	SEGMENT
??_C@_0CB@CJMENLAH@OPINION_WEIGHT_RETURNED_CIVILIAN@ DB 'OPINION_WEIGHT_R'
	DB	'ETURNED_CIVILIAN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BNNABPNA@OPINION_WEIGHT_MADE_DEMAND_OF_US@
CONST	SEGMENT
??_C@_0CB@BNNABPNA@OPINION_WEIGHT_MADE_DEMAND_OF_US@ DB 'OPINION_WEIGHT_M'
	DB	'ADE_DEMAND_OF_US', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MHFBGJDD@OPINION_WEIGHT_ASKED_STOP_SPYING@
CONST	SEGMENT
??_C@_0CB@MHFBGJDD@OPINION_WEIGHT_ASKED_STOP_SPYING@ DB 'OPINION_WEIGHT_A'
	DB	'SKED_STOP_SPYING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BLPAHKGP@OPINION_WEIGHT_ASKED_NO_SETTLE?$AA@
CONST	SEGMENT
??_C@_0BP@BLPAHKGP@OPINION_WEIGHT_ASKED_NO_SETTLE?$AA@ DB 'OPINION_WEIGHT'
	DB	'_ASKED_NO_SETTLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NDDDNCCA@OPINION_WEIGHT_WARMONGER_NONE?$AA@
CONST	SEGMENT
??_C@_0BO@NDDDNCCA@OPINION_WEIGHT_WARMONGER_NONE?$AA@ DB 'OPINION_WEIGHT_'
	DB	'WARMONGER_NONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LHHDCOBE@OPINION_WEIGHT_WARMONGER_MINOR?$AA@
CONST	SEGMENT
??_C@_0BP@LHHDCOBE@OPINION_WEIGHT_WARMONGER_MINOR?$AA@ DB 'OPINION_WEIGHT'
	DB	'_WARMONGER_MINOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IGBPCIC@OPINION_WEIGHT_WARMONGER_MAJOR?$AA@
CONST	SEGMENT
??_C@_0BP@IGBPCIC@OPINION_WEIGHT_WARMONGER_MAJOR?$AA@ DB 'OPINION_WEIGHT_'
	DB	'WARMONGER_MAJOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OIGNAHNM@OPINION_WEIGHT_WARMONGER_SEVERE?$AA@
CONST	SEGMENT
??_C@_0CA@OIGNAHNM@OPINION_WEIGHT_WARMONGER_SEVERE?$AA@ DB 'OPINION_WEIGH'
	DB	'T_WARMONGER_SEVERE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CPIEKODG@OPINION_WEIGHT_WARMONGER_CRITICA@
CONST	SEGMENT
??_C@_0CC@CPIEKODG@OPINION_WEIGHT_WARMONGER_CRITICA@ DB 'OPINION_WEIGHT_W'
	DB	'ARMONGER_CRITICAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FCIDKMLL@OPINION_WEIGHT_MINOR_CIV_NONE?$AA@
CONST	SEGMENT
??_C@_0BO@FCIDKMLL@OPINION_WEIGHT_MINOR_CIV_NONE?$AA@ DB 'OPINION_WEIGHT_'
	DB	'MINOR_CIV_NONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MFBBNDJP@OPINION_WEIGHT_MINOR_CIV_WEAK?$AA@
CONST	SEGMENT
??_C@_0BO@MFBBNDJP@OPINION_WEIGHT_MINOR_CIV_WEAK?$AA@ DB 'OPINION_WEIGHT_'
	DB	'MINOR_CIV_WEAK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LINICGIK@OPINION_WEIGHT_MINOR_CIV_STRONG?$AA@
CONST	SEGMENT
??_C@_0CA@LINICGIK@OPINION_WEIGHT_MINOR_CIV_STRONG?$AA@ DB 'OPINION_WEIGH'
	DB	'T_MINOR_CIV_STRONG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HICLLBKH@OPINION_WEIGHT_MINOR_CIV_FIERCE?$AA@
CONST	SEGMENT
??_C@_0CA@HICLLBKH@OPINION_WEIGHT_MINOR_CIV_FIERCE?$AA@ DB 'OPINION_WEIGH'
	DB	'T_MINOR_CIV_FIERCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MLHKEDN@OPINION_WEIGHT_WONDER_NONE?$AA@
CONST	SEGMENT
??_C@_0BL@MLHKEDN@OPINION_WEIGHT_WONDER_NONE?$AA@ DB 'OPINION_WEIGHT_WOND'
	DB	'ER_NONE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JLCFNLBJ@OPINION_WEIGHT_WONDER_WEAK?$AA@
CONST	SEGMENT
??_C@_0BL@JLCFNLBJ@OPINION_WEIGHT_WONDER_WEAK?$AA@ DB 'OPINION_WEIGHT_WON'
	DB	'DER_WEAK', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NLNKMPEB@OPINION_WEIGHT_WONDER_STRONG?$AA@
CONST	SEGMENT
??_C@_0BN@NLNKMPEB@OPINION_WEIGHT_WONDER_STRONG?$AA@ DB 'OPINION_WEIGHT_W'
	DB	'ONDER_STRONG', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BLCJFIGM@OPINION_WEIGHT_WONDER_FIERCE?$AA@
CONST	SEGMENT
??_C@_0BN@BLCJFIGM@OPINION_WEIGHT_WONDER_FIERCE?$AA@ DB 'OPINION_WEIGHT_W'
	DB	'ONDER_FIERCE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LMAGDPNB@OPINION_WEIGHT_VICTORY_NONE?$AA@
CONST	SEGMENT
??_C@_0BM@LMAGDPNB@OPINION_WEIGHT_VICTORY_NONE?$AA@ DB 'OPINION_WEIGHT_VI'
	DB	'CTORY_NONE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CLJEEAPF@OPINION_WEIGHT_VICTORY_WEAK?$AA@
CONST	SEGMENT
??_C@_0BM@CLJEEAPF@OPINION_WEIGHT_VICTORY_WEAK?$AA@ DB 'OPINION_WEIGHT_VI'
	DB	'CTORY_WEAK', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EOMMIJNM@OPINION_WEIGHT_VICTORY_STRONG?$AA@
CONST	SEGMENT
??_C@_0BO@EOMMIJNM@OPINION_WEIGHT_VICTORY_STRONG?$AA@ DB 'OPINION_WEIGHT_'
	DB	'VICTORY_STRONG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IODPBOPB@OPINION_WEIGHT_VICTORY_FIERCE?$AA@
CONST	SEGMENT
??_C@_0BO@IODPBOPB@OPINION_WEIGHT_VICTORY_FIERCE?$AA@ DB 'OPINION_WEIGHT_'
	DB	'VICTORY_FIERCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EPDHOEHF@OPINION_WEIGHT_LAND_NONE?$AA@
CONST	SEGMENT
??_C@_0BJ@EPDHOEHF@OPINION_WEIGHT_LAND_NONE?$AA@ DB 'OPINION_WEIGHT_LAND_'
	DB	'NONE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NIKFJLFB@OPINION_WEIGHT_LAND_WEAK?$AA@
CONST	SEGMENT
??_C@_0BJ@NIKFJLFB@OPINION_WEIGHT_LAND_WEAK?$AA@ DB 'OPINION_WEIGHT_LAND_'
	DB	'WEAK', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JFKGAIFM@OPINION_WEIGHT_LAND_STRONG?$AA@
CONST	SEGMENT
??_C@_0BL@JFKGAIFM@OPINION_WEIGHT_LAND_STRONG?$AA@ DB 'OPINION_WEIGHT_LAN'
	DB	'D_STRONG', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FFFFJPHB@OPINION_WEIGHT_LAND_FIERCE?$AA@
CONST	SEGMENT
??_C@_0BL@FFFFJPHB@OPINION_WEIGHT_LAND_FIERCE?$AA@ DB 'OPINION_WEIGHT_LAN'
	DB	'D_FIERCE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BJANBLHN@MC_GIFT_WEIGHT_ALMOST_NOT_FRIEND@
CONST	SEGMENT
??_C@_0CC@BJANBLHN@MC_GIFT_WEIGHT_ALMOST_NOT_FRIEND@ DB 'MC_GIFT_WEIGHT_A'
	DB	'LMOST_NOT_FRIENDS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OENEAKAC@MC_GIFT_WEIGHT_ALMOST_NOT_ALLIES@
CONST	SEGMENT
??_C@_0CB@OENEAKAC@MC_GIFT_WEIGHT_ALMOST_NOT_ALLIES@ DB 'MC_GIFT_WEIGHT_A'
	DB	'LMOST_NOT_ALLIES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LHIOOCFH@MC_GIFT_WEIGHT_FAR?$AA@
CONST	SEGMENT
??_C@_0BD@LHIOOCFH@MC_GIFT_WEIGHT_FAR?$AA@ DB 'MC_GIFT_WEIGHT_FAR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FCCEAOKA@MC_GIFT_WEIGHT_CLOSE?$AA@
CONST	SEGMENT
??_C@_0BF@FCCEAOKA@MC_GIFT_WEIGHT_CLOSE?$AA@ DB 'MC_GIFT_WEIGHT_CLOSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JMKPMNBF@MC_GIFT_WEIGHT_NEIGHBORS?$AA@
CONST	SEGMENT
??_C@_0BJ@JMKPMNBF@MC_GIFT_WEIGHT_NEIGHBORS?$AA@ DB 'MC_GIFT_WEIGHT_NEIGH'
	DB	'BORS', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FNFBKLKN@MC_GIFT_WEIGHT_HOSTILE?$AA@
CONST	SEGMENT
??_C@_0BH@FNFBKLKN@MC_GIFT_WEIGHT_HOSTILE?$AA@ DB 'MC_GIFT_WEIGHT_HOSTILE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GEPLMMPL@MC_GIFT_WEIGHT_PROTECTIVE?$AA@
CONST	SEGMENT
??_C@_0BK@GEPLMMPL@MC_GIFT_WEIGHT_PROTECTIVE?$AA@ DB 'MC_GIFT_WEIGHT_PROT'
	DB	'ECTIVE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DKKLKKBA@MC_GIFT_WEIGHT_NEUTRAL_VICTORY_R@
CONST	SEGMENT
??_C@_0CE@DKKLKKBA@MC_GIFT_WEIGHT_NEUTRAL_VICTORY_R@ DB 'MC_GIFT_WEIGHT_N'
	DB	'EUTRAL_VICTORY_ROLL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MECGKECP@MC_GIFT_WEIGHT_RESOURCE_WE_NEED?$AA@
CONST	SEGMENT
??_C@_0CA@MECGKECP@MC_GIFT_WEIGHT_RESOURCE_WE_NEED?$AA@ DB 'MC_GIFT_WEIGH'
	DB	'T_RESOURCE_WE_NEED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LOJNEAGP@MC_GIFT_WEIGHT_MILITARISTIC?$AA@
CONST	SEGMENT
??_C@_0BM@LOJNEAGP@MC_GIFT_WEIGHT_MILITARISTIC?$AA@ DB 'MC_GIFT_WEIGHT_MI'
	DB	'LITARISTIC', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HHMLPMFI@MC_GIFT_WEIGHT_CONQUEST_VICTORY?$AA@
CONST	SEGMENT
??_C@_0CA@HHMLPMFI@MC_GIFT_WEIGHT_CONQUEST_VICTORY?$AA@ DB 'MC_GIFT_WEIGH'
	DB	'T_CONQUEST_VICTORY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KDOPKKAC@MC_GIFT_WEIGHT_CULTURE_VICTORY?$AA@
CONST	SEGMENT
??_C@_0BP@KDOPKKAC@MC_GIFT_WEIGHT_CULTURE_VICTORY?$AA@ DB 'MC_GIFT_WEIGHT'
	DB	'_CULTURE_VICTORY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GEIGINON@MC_GIFT_WEIGHT_DIPLO_VICTORY?$AA@
CONST	SEGMENT
??_C@_0BN@GEIGINON@MC_GIFT_WEIGHT_DIPLO_VICTORY?$AA@ DB 'MC_GIFT_WEIGHT_D'
	DB	'IPLO_VICTORY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HNAJLJDP@MC_GIFT_WEIGHT_MARITIME_GROWTH?$AA@
CONST	SEGMENT
??_C@_0BP@HNAJLJDP@MC_GIFT_WEIGHT_MARITIME_GROWTH?$AA@ DB 'MC_GIFT_WEIGHT'
	DB	'_MARITIME_GROWTH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@ELGIHDI@MC_GIFT_WEIGHT_PASS_OTHER_PLAYER@
CONST	SEGMENT
??_C@_0CB@ELGIHDI@MC_GIFT_WEIGHT_PASS_OTHER_PLAYER@ DB 'MC_GIFT_WEIGHT_PA'
	DB	'SS_OTHER_PLAYER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KJMLEFGJ@MC_SMALL_GIFT_WEIGHT_PASS_OTHER_@
CONST	SEGMENT
??_C@_0CH@KJMLEFGJ@MC_SMALL_GIFT_WEIGHT_PASS_OTHER_@ DB 'MC_SMALL_GIFT_WE'
	DB	'IGHT_PASS_OTHER_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PNIBBFHE@MC_SOMETIMES_GIFT_RAND_MULTIPLIE@
CONST	SEGMENT
??_C@_0CC@PNIBBFHE@MC_SOMETIMES_GIFT_RAND_MULTIPLIE@ DB 'MC_SOMETIMES_GIF'
	DB	'T_RAND_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@ENJMLGFD@MC_ALWAYS_GIFT_DIPLO_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BP@ENJMLGFD@MC_ALWAYS_GIFT_DIPLO_THRESHOLD?$AA@ DB 'MC_ALWAYS_GIFT'
	DB	'_DIPLO_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NLLIOHCC@MC_GIFT_WEIGHT_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BJ@NLLIOHCC@MC_GIFT_WEIGHT_THRESHOLD?$AA@ DB 'MC_GIFT_WEIGHT_THRES'
	DB	'HOLD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CJMLANJF@AGGRESSIVE_ANNEX?$AA@
CONST	SEGMENT
??_C@_0BB@CJMLANJF@AGGRESSIVE_ANNEX?$AA@ DB 'AGGRESSIVE_ANNEX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IAPIDFDC@NORMAL_ANNEX?$AA@
CONST	SEGMENT
??_C@_0N@IAPIDFDC@NORMAL_ANNEX?$AA@ DB 'NORMAL_ANNEX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NEMBJDLN@RELIGION_MAX_MISSIONARIES?$AA@
CONST	SEGMENT
??_C@_0BK@NEMBJDLN@RELIGION_MAX_MISSIONARIES?$AA@ DB 'RELIGION_MAX_MISSIO'
	DB	'NARIES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@ELKGCKAL@RELIGION_MISSIONARY_RANGE_IN_TUR@
CONST	SEGMENT
??_C@_0CD@ELKGCKAL@RELIGION_MISSIONARY_RANGE_IN_TUR@ DB 'RELIGION_MISSION'
	DB	'ARY_RANGE_IN_TURNS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@EEAEDMOM@RELIGION_BELIEF_SCORE_UNOWNED_PL@
CONST	SEGMENT
??_C@_0CO@EEAEDMOM@RELIGION_BELIEF_SCORE_UNOWNED_PL@ DB 'RELIGION_BELIEF_'
	DB	'SCORE_UNOWNED_PLOT_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@MLKMICPL@RELIGION_BELIEF_SCORE_OWNED_PLOT@
CONST	SEGMENT
??_C@_0CM@MLKMICPL@RELIGION_BELIEF_SCORE_OWNED_PLOT@ DB 'RELIGION_BELIEF_'
	DB	'SCORE_OWNED_PLOT_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@EIGIEAMH@RELIGION_BELIEF_SCORE_WORKED_PLO@
CONST	SEGMENT
??_C@_0CN@EIGIEAMH@RELIGION_BELIEF_SCORE_WORKED_PLO@ DB 'RELIGION_BELIEF_'
	DB	'SCORE_WORKED_PLOT_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IHCIFGIG@RELIGION_BELIEF_SCORE_CITY_MULTI@
CONST	SEGMENT
??_C@_0CG@IHCIFGIG@RELIGION_BELIEF_SCORE_CITY_MULTI@ DB 'RELIGION_BELIEF_'
	DB	'SCORE_CITY_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@NPONLKEP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DK@NPONLKEP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_OTHER_PLEDGE_TO_PROTECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@POKAPOIP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DN@POKAPOIP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_CULTURED_PLEDGE_TO_PROTECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@HNJOKHCC@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0EB@HNJOKHCC@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_MILITARISTIC_PLEDGE_TO_PROTECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KPEJBMAC@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DC@KPEJBMAC@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_OTHER_GIVE_GOLD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@OBKJCPJP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DH@OBKJCPJP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_MERCANTILE_GIVE_GOLD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FJLNHAEB@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DJ@FJLNHAEB@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_MILITARISTIC_GIVE_GOLD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@BOEKBJDM@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DO@BOEKBJDM@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_HOSTILE_FIND_NATURAL_WONDER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@JFBJHLLO@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0ED@JFBJHLLO@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_MILITARISTIC_FIND_NATURAL_WONDER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@GFHNDIPF@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DJ@GFHNDIPF@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_MERCANTILE_FIND_PLAYER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@MIPIOEPN@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DH@MIPIOEPN@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_MARITIME_FIND_PLAYER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@GJJNEALN@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DK@GJJNEALN@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_NEUTRAL_KILL_CITY_STATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@FLOCGACN@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DK@FLOCGACN@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_HOSTILE_KILL_CITY_STATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@DPPHMKIH@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DP@DPPHMKIH@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_MILITARISTIC_KILL_CITY_STATE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HGHFKHJE@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DI@HGHFKHJE@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_CULTURED_GREAT_PERSON', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@JECBIIAG@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DM@JECBIIAG@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_CULTURED_CONSTRUCT_WONDER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@OIGFHNMP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DO@OIGFHNMP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_MERCANTILE_CONNECT_RESOURCE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@EIMACLOA@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DM@EIMACLOA@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_MARITIME_CONNECT_RESOURCE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@BFBJEGO@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DJ@BFBJEGO@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_W'
	DB	'EIGHT_MULTIPLIER_MILITARISTIC_KILL_CAMP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@NGNFCMLI@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DD@NGNFCMLI@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_MERCANTILE_ROUTE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@CDPNIJEO@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DB@CDPNIJEO@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_MARITIME_ROUTE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@GDAHMKIF@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DA@GDAHMKIF@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_HOSTILE_ROUTE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DENGEFCH@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
CONST	SEGMENT
??_C@_0DB@DENGEFCH@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@ DB 'MINOR_CIV_QUEST_'
	DB	'WEIGHT_MULTIPLIER_FRIENDLY_ROUTE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KKICENCP@MINOR_CIV_QUEST_WEIGHT_DEFAULT?$AA@
CONST	SEGMENT
??_C@_0BP@KKICENCP@MINOR_CIV_QUEST_WEIGHT_DEFAULT?$AA@ DB 'MINOR_CIV_QUES'
	DB	'T_WEIGHT_DEFAULT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FPEEEOCN@QUEST_DISABLED_TRADE_ROUTE?$AA@
CONST	SEGMENT
??_C@_0BL@FPEEEOCN@QUEST_DISABLED_TRADE_ROUTE?$AA@ DB 'QUEST_DISABLED_TRA'
	DB	'DE_ROUTE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LFLMNGJM@QUEST_DISABLED_SPREAD_RELIGION?$AA@
CONST	SEGMENT
??_C@_0BP@LFLMNGJM@QUEST_DISABLED_SPREAD_RELIGION?$AA@ DB 'QUEST_DISABLED'
	DB	'_SPREAD_RELIGION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LMJHO@QUEST_DISABLED_DENOUNCE_MAJOR?$AA@
CONST	SEGMENT
??_C@_0BO@LMJHO@QUEST_DISABLED_DENOUNCE_MAJOR?$AA@ DB 'QUEST_DISABLED_DEN'
	DB	'OUNCE_MAJOR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LHALNFP@QUEST_DISABLED_BULLY_CITY_STATE?$AA@
CONST	SEGMENT
??_C@_0CA@LHALNFP@QUEST_DISABLED_BULLY_CITY_STATE?$AA@ DB 'QUEST_DISABLED'
	DB	'_BULLY_CITY_STATE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KEDPOCGP@QUEST_DISABLED_INVEST?$AA@
CONST	SEGMENT
??_C@_0BG@KEDPOCGP@QUEST_DISABLED_INVEST?$AA@ DB 'QUEST_DISABLED_INVEST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IGFFOEHH@QUEST_DISABLED_CONTEST_TECHS?$AA@
CONST	SEGMENT
??_C@_0BN@IGFFOEHH@QUEST_DISABLED_CONTEST_TECHS?$AA@ DB 'QUEST_DISABLED_C'
	DB	'ONTEST_TECHS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OOHMJAMN@QUEST_DISABLED_CONTEST_FAITH?$AA@
CONST	SEGMENT
??_C@_0BN@OOHMJAMN@QUEST_DISABLED_CONTEST_FAITH?$AA@ DB 'QUEST_DISABLED_C'
	DB	'ONTEST_FAITH', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EFKCDNON@QUEST_DISABLED_CONTEST_CULTURE?$AA@
CONST	SEGMENT
??_C@_0BP@EFKCDNON@QUEST_DISABLED_CONTEST_CULTURE?$AA@ DB 'QUEST_DISABLED'
	DB	'_CONTEST_CULTURE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NLFBHACE@QUEST_DISABLED_PLEDGE_TO_PROTECT@
CONST	SEGMENT
??_C@_0CB@NLFBHACE@QUEST_DISABLED_PLEDGE_TO_PROTECT@ DB 'QUEST_DISABLED_P'
	DB	'LEDGE_TO_PROTECT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JNGNPGHH@QUEST_DISABLED_GIVE_GOLD?$AA@
CONST	SEGMENT
??_C@_0BJ@JNGNPGHH@QUEST_DISABLED_GIVE_GOLD?$AA@ DB 'QUEST_DISABLED_GIVE_'
	DB	'GOLD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ONBCNIHG@QUEST_DISABLED_NATURAL_WONDER?$AA@
CONST	SEGMENT
??_C@_0BO@ONBCNIHG@QUEST_DISABLED_NATURAL_WONDER?$AA@ DB 'QUEST_DISABLED_'
	DB	'NATURAL_WONDER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MNFFHKF@QUEST_DISABLED_FIND_PLAYER?$AA@
CONST	SEGMENT
??_C@_0BL@MNFFHKF@QUEST_DISABLED_FIND_PLAYER?$AA@ DB 'QUEST_DISABLED_FIND'
	DB	'_PLAYER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GDIAOMAA@QUEST_DISABLED_KILL_CITY_STATE?$AA@
CONST	SEGMENT
??_C@_0BP@GDIAOMAA@QUEST_DISABLED_KILL_CITY_STATE?$AA@ DB 'QUEST_DISABLED'
	DB	'_KILL_CITY_STATE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NLJIANGA@QUEST_DISABLED_GREAT_PERSON?$AA@
CONST	SEGMENT
??_C@_0BM@NLJIANGA@QUEST_DISABLED_GREAT_PERSON?$AA@ DB 'QUEST_DISABLED_GR'
	DB	'EAT_PERSON', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KHNIDLE@QUEST_DISABLED_CONSTRUCT_WONDER?$AA@
CONST	SEGMENT
??_C@_0CA@KHNIDLE@QUEST_DISABLED_CONSTRUCT_WONDER?$AA@ DB 'QUEST_DISABLED'
	DB	'_CONSTRUCT_WONDER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NAGHIJGH@QUEST_DISABLED_CONNECT_RESOURCE?$AA@
CONST	SEGMENT
??_C@_0CA@NAGHIJGH@QUEST_DISABLED_CONNECT_RESOURCE?$AA@ DB 'QUEST_DISABLE'
	DB	'D_CONNECT_RESOURCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MFIBBCFI@QUEST_DISABLED_KILL_CAMP?$AA@
CONST	SEGMENT
??_C@_0BJ@MFIBBCFI@QUEST_DISABLED_KILL_CAMP?$AA@ DB 'QUEST_DISABLED_KILL_'
	DB	'CAMP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MFJIJPBN@QUEST_DISABLED_ROUTE?$AA@
CONST	SEGMENT
??_C@_0BF@MFJIJPBN@QUEST_DISABLED_ROUTE?$AA@ DB 'QUEST_DISABLED_ROUTE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@MMHPDPEB@MINOR_CIV_MERCANTILE_RESOURCES_K@
CONST	SEGMENT
??_C@_0DI@MMHPDPEB@MINOR_CIV_MERCANTILE_RESOURCES_K@ DB 'MINOR_CIV_MERCAN'
	DB	'TILE_RESOURCES_KEEP_ON_CAPTURE_DISABLED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BLPFJMGO@MINOR_CIV_MERCANTILE_RESOURCES_Q@
CONST	SEGMENT
??_C@_0CI@BLPFJMGO@MINOR_CIV_MERCANTILE_RESOURCES_Q@ DB 'MINOR_CIV_MERCAN'
	DB	'TILE_RESOURCES_QUANTITY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KJFHFCJO@MINOR_CIV_THREATENED_BY_BARBS_NO@
CONST	SEGMENT
??_C@_0CO@KJFHFCJO@MINOR_CIV_THREATENED_BY_BARBS_NO@ DB 'MINOR_CIV_THREAT'
	DB	'ENED_BY_BARBS_NOTIF_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CPPFBFOA@MINOR_CIV_QUEST_WONDER_COMPLETIO@
CONST	SEGMENT
??_C@_0CM@CPPFBFOA@MINOR_CIV_QUEST_WONDER_COMPLETIO@ DB 'MINOR_CIV_QUEST_'
	DB	'WONDER_COMPLETION_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EJDADBJE@MINOR_CIV_QUEST_KILL_CAMP_RANGE?$AA@
CONST	SEGMENT
??_C@_0CA@EJDADBJE@MINOR_CIV_QUEST_KILL_CAMP_RANGE?$AA@ DB 'MINOR_CIV_QUE'
	DB	'ST_KILL_CAMP_RANGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@GCHPEDKM@MINOR_CIV_PERSONAL_QUEST_RAND_TU@
CONST	SEGMENT
??_C@_0DP@GCHPEDKM@MINOR_CIV_PERSONAL_QUEST_RAND_TU@ DB 'MINOR_CIV_PERSON'
	DB	'AL_QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GIBMKAAN@MINOR_CIV_PERSONAL_QUEST_RAND_TU@
CONST	SEGMENT
??_C@_0CM@GIBMKAAN@MINOR_CIV_PERSONAL_QUEST_RAND_TU@ DB 'MINOR_CIV_PERSON'
	DB	'AL_QUEST_RAND_TURNS_BETWEEN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DGEEEEPI@MINOR_CIV_PERSONAL_QUEST_MIN_TUR@
CONST	SEGMENT
??_C@_0CL@DGEEEEPI@MINOR_CIV_PERSONAL_QUEST_MIN_TUR@ DB 'MINOR_CIV_PERSON'
	DB	'AL_QUEST_MIN_TURNS_BETWEEN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@EDBCDLJB@MINOR_CIV_PERSONAL_QUEST_FIRST_P@
CONST	SEGMENT
??_C@_0DC@EDBCDLJB@MINOR_CIV_PERSONAL_QUEST_FIRST_P@ DB 'MINOR_CIV_PERSON'
	DB	'AL_QUEST_FIRST_POSSIBLE_TURN_RAND', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NDIABKPJ@MINOR_CIV_PERSONAL_QUEST_FIRST_P@
CONST	SEGMENT
??_C@_0CN@NDIABKPJ@MINOR_CIV_PERSONAL_QUEST_FIRST_P@ DB 'MINOR_CIV_PERSON'
	DB	'AL_QUEST_FIRST_POSSIBLE_TURN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@HBDKHJK@MINOR_CIV_GLOBAL_QUEST_RAND_TURN@
CONST	SEGMENT
??_C@_0DN@HBDKHJK@MINOR_CIV_GLOBAL_QUEST_RAND_TURN@ DB 'MINOR_CIV_GLOBAL_'
	DB	'QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OFNPNGAC@MINOR_CIV_GLOBAL_QUEST_RAND_TURN@
CONST	SEGMENT
??_C@_0CK@OFNPNGAC@MINOR_CIV_GLOBAL_QUEST_RAND_TURN@ DB 'MINOR_CIV_GLOBAL'
	DB	'_QUEST_RAND_TURNS_BETWEEN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PNDPLOOH@MINOR_CIV_GLOBAL_QUEST_MIN_TURNS@
CONST	SEGMENT
??_C@_0CJ@PNDPLOOH@MINOR_CIV_GLOBAL_QUEST_MIN_TURNS@ DB 'MINOR_CIV_GLOBAL'
	DB	'_QUEST_MIN_TURNS_BETWEEN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@EJMDFFBA@MINOR_CIV_GLOBAL_QUEST_FIRST_POS@
CONST	SEGMENT
??_C@_0DA@EJMDFFBA@MINOR_CIV_GLOBAL_QUEST_FIRST_POS@ DB 'MINOR_CIV_GLOBAL'
	DB	'_QUEST_FIRST_POSSIBLE_TURN_RAND', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EDLCMEBO@MINOR_CIV_GLOBAL_QUEST_FIRST_POS@
CONST	SEGMENT
??_C@_0CL@EDLCMEBO@MINOR_CIV_GLOBAL_QUEST_FIRST_POS@ DB 'MINOR_CIV_GLOBAL'
	DB	'_QUEST_FIRST_POSSIBLE_TURN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FJFLIOKH@MINOR_CIV_MAX_PERSONAL_QUESTS_FO@
CONST	SEGMENT
??_C@_0CJ@FJFLIOKH@MINOR_CIV_MAX_PERSONAL_QUESTS_FO@ DB 'MINOR_CIV_MAX_PE'
	DB	'RSONAL_QUESTS_FOR_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LOKANOKP@MINOR_CIV_MAX_GLOBAL_QUESTS_FOR_@
CONST	SEGMENT
??_C@_0CH@LOKANOKP@MINOR_CIV_MAX_GLOBAL_QUESTS_FOR_@ DB 'MINOR_CIV_MAX_GL'
	DB	'OBAL_QUESTS_FOR_PLAYER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MENJPJCF@RETURN_CIVILIAN_FRIENDSHIP?$AA@
CONST	SEGMENT
??_C@_0BL@MENJPJCF@RETURN_CIVILIAN_FRIENDSHIP?$AA@ DB 'RETURN_CIVILIAN_FR'
	DB	'IENDSHIP', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PPDCEODI@MINOR_LIBERATION_FRIENDSHIP?$AA@
CONST	SEGMENT
??_C@_0BM@PPDCEODI@MINOR_LIBERATION_FRIENDSHIP?$AA@ DB 'MINOR_LIBERATION_'
	DB	'FRIENDSHIP', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DBNKPJAF@MAX_INFLUENCE_FROM_MINOR_GIFTS?$AA@
CONST	SEGMENT
??_C@_0BP@DBNKPJAF@MAX_INFLUENCE_FROM_MINOR_GIFTS?$AA@ DB 'MAX_INFLUENCE_'
	DB	'FROM_MINOR_GIFTS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FFJNGAL@FRIENDSHIP_PER_UNIT_GIFTED?$AA@
CONST	SEGMENT
??_C@_0BL@FFJNGAL@FRIENDSHIP_PER_UNIT_GIFTED?$AA@ DB 'FRIENDSHIP_PER_UNIT'
	DB	'_GIFTED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PGAIGKPP@FRIENDSHIP_PER_BARB_KILLED?$AA@
CONST	SEGMENT
??_C@_0BL@PGAIGKPP@FRIENDSHIP_PER_BARB_KILLED?$AA@ DB 'FRIENDSHIP_PER_BAR'
	DB	'B_KILLED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MOJAFGBP@FRIENDSHIP_PER_UNIT_INTRUDING?$AA@
CONST	SEGMENT
??_C@_0BO@MOJAFGBP@FRIENDSHIP_PER_UNIT_INTRUDING?$AA@ DB 'FRIENDSHIP_PER_'
	DB	'UNIT_INTRUDING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NNCLNFLL@MINOR_CIV_RESOURCE_SEARCH_RADIUS@
CONST	SEGMENT
??_C@_0CB@NNCLNFLL@MINOR_CIV_RESOURCE_SEARCH_RADIUS@ DB 'MINOR_CIV_RESOUR'
	DB	'CE_SEARCH_RADIUS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@MFMHLKNB@MINOR_CIV_BEST_RELATIONS_HAPPINE@
CONST	SEGMENT
??_C@_0CJ@MFMHLKNB@MINOR_CIV_BEST_RELATIONS_HAPPINE@ DB 'MINOR_CIV_BEST_R'
	DB	'ELATIONS_HAPPINESS_BONUS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KGEAHABH@MINOR_CIV_GOLD_GIFT_MINIMUM_FRIE@
CONST	SEGMENT
??_C@_0CO@KGEAHABH@MINOR_CIV_GOLD_GIFT_MINIMUM_FRIE@ DB 'MINOR_CIV_GOLD_G'
	DB	'IFT_MINIMUM_FRIENDSHIP_REWARD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DIGGGOGL@MINOR_CIV_GOLD_GIFT_VISIBLE_DIVI@
CONST	SEGMENT
??_C@_0CE@DIGGGOGL@MINOR_CIV_GOLD_GIFT_VISIBLE_DIVI@ DB 'MINOR_CIV_GOLD_G'
	DB	'IFT_VISIBLE_DIVISOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LAOHOCAH@MINOR_CIV_GOLD_GIFT_GAME_DIVISOR@
CONST	SEGMENT
??_C@_0CB@LAOHOCAH@MINOR_CIV_GOLD_GIFT_GAME_DIVISOR@ DB 'MINOR_CIV_GOLD_G'
	DB	'IFT_GAME_DIVISOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DJNIHOBB@MINOR_CIV_GOLD_GIFT_GAME_MULTIPL@
CONST	SEGMENT
??_C@_0CE@DJNIHOBB@MINOR_CIV_GOLD_GIFT_GAME_MULTIPL@ DB 'MINOR_CIV_GOLD_G'
	DB	'IFT_GAME_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GAKLKPAL@MINOR_QUEST_STANDARD_CONTEST_LEN@
CONST	SEGMENT
??_C@_0CE@GAKLKPAL@MINOR_QUEST_STANDARD_CONTEST_LEN@ DB 'MINOR_QUEST_STAN'
	DB	'DARD_CONTEST_LENGTH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CLCBGADE@MINOR_QUEST_FRIENDSHIP_TRADE_ROU@
CONST	SEGMENT
??_C@_0CD@CLCBGADE@MINOR_QUEST_FRIENDSHIP_TRADE_ROU@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_TRADE_ROUTE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OFJMIPKE@MINOR_QUEST_FRIENDSHIP_SPREAD_RE@
CONST	SEGMENT
??_C@_0CH@OFJMIPKE@MINOR_QUEST_FRIENDSHIP_SPREAD_RE@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_SPREAD_RELIGION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CFCDMNAO@MINOR_QUEST_FRIENDSHIP_DENOUNCE_@
CONST	SEGMENT
??_C@_0CG@CFCDMNAO@MINOR_QUEST_FRIENDSHIP_DENOUNCE_@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_DENOUNCE_MAJOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CDCCCFJI@MINOR_QUEST_FRIENDSHIP_BULLY_CIT@
CONST	SEGMENT
??_C@_0CI@CDCCCFJI@MINOR_QUEST_FRIENDSHIP_BULLY_CIT@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_BULLY_CITY_STATE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KDHEDPKN@MINOR_QUEST_FRIENDSHIP_INVEST?$AA@
CONST	SEGMENT
??_C@_0BO@KDHEDPKN@MINOR_QUEST_FRIENDSHIP_INVEST?$AA@ DB 'MINOR_QUEST_FRI'
	DB	'ENDSHIP_INVEST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MBIDDEMF@MINOR_QUEST_FRIENDSHIP_CONTEST_T@
CONST	SEGMENT
??_C@_0CF@MBIDDEMF@MINOR_QUEST_FRIENDSHIP_CONTEST_T@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_CONTEST_TECHS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KJKKEAHP@MINOR_QUEST_FRIENDSHIP_CONTEST_F@
CONST	SEGMENT
??_C@_0CF@KJKKEAHP@MINOR_QUEST_FRIENDSHIP_CONTEST_F@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_CONTEST_FAITH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BFICGENF@MINOR_QUEST_FRIENDSHIP_CONTEST_C@
CONST	SEGMENT
??_C@_0CH@BFICGENF@MINOR_QUEST_FRIENDSHIP_CONTEST_C@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_CONTEST_CULTURE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NOHJHFKP@MINOR_QUEST_FRIENDSHIP_PLEDGE_TO@
CONST	SEGMENT
??_C@_0CJ@NOHJHFKP@MINOR_QUEST_FRIENDSHIP_PLEDGE_TO@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_PLEDGE_TO_PROTECT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NKNOJHBE@MINOR_QUEST_FRIENDSHIP_GIVE_GOLD@
CONST	SEGMENT
??_C@_0CB@NKNOJHBE@MINOR_QUEST_FRIENDSHIP_GIVE_GOLD@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_GIVE_GOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HDOJINKH@MINOR_QUEST_FRIENDSHIP_FIND_NATU@
CONST	SEGMENT
??_C@_0CL@HDOJINKH@MINOR_QUEST_FRIENDSHIP_FIND_NATU@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_FIND_NATURAL_WONDER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HILAHJLM@MINOR_QUEST_FRIENDSHIP_FIND_PLAY@
CONST	SEGMENT
??_C@_0CD@HILAHJLM@MINOR_QUEST_FRIENDSHIP_FIND_PLAY@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_FIND_PLAYER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DDKALFDI@MINOR_QUEST_FRIENDSHIP_KILL_CITY@
CONST	SEGMENT
??_C@_0CH@DDKALFDI@MINOR_QUEST_FRIENDSHIP_KILL_CITY@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_KILL_CITY_STATE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LPIHMAIO@MINOR_QUEST_FRIENDSHIP_GREAT_PER@
CONST	SEGMENT
??_C@_0CE@LPIHMAIO@MINOR_QUEST_FRIENDSHIP_GREAT_PER@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_GREAT_PERSON', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CCCPBLHD@MINOR_QUEST_FRIENDSHIP_CONSTRUCT@
CONST	SEGMENT
??_C@_0CI@CCCPBLHD@MINOR_QUEST_FRIENDSHIP_CONSTRUCT@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_CONSTRUCT_WONDER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@PIDFBBKA@MINOR_QUEST_FRIENDSHIP_CONNECT_R@
CONST	SEGMENT
??_C@_0CI@PIDFBBKA@MINOR_QUEST_FRIENDSHIP_CONNECT_R@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_CONNECT_RESOURCE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@ICDCHDDL@MINOR_QUEST_FRIENDSHIP_KILL_CAMP@
CONST	SEGMENT
??_C@_0CB@ICDCHDDL@MINOR_QUEST_FRIENDSHIP_KILL_CAMP@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_KILL_CAMP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@ODIBEEBJ@MINOR_QUEST_FRIENDSHIP_ROUTE?$AA@
CONST	SEGMENT
??_C@_0BN@ODIBEEBJ@MINOR_QUEST_FRIENDSHIP_ROUTE?$AA@ DB 'MINOR_QUEST_FRIE'
	DB	'NDSHIP_ROUTE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JCOMPMIG@WAR_QUEST_MIN_UNITS_TO_KILL?$AA@
CONST	SEGMENT
??_C@_0BM@JCOMPMIG@WAR_QUEST_MIN_UNITS_TO_KILL?$AA@ DB 'WAR_QUEST_MIN_UNI'
	DB	'TS_TO_KILL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DNHNNLIA@WAR_QUEST_UNITS_TO_KILL_DIVISOR?$AA@
CONST	SEGMENT
??_C@_0CA@DNHNNLIA@WAR_QUEST_UNITS_TO_KILL_DIVISOR?$AA@ DB 'WAR_QUEST_UNI'
	DB	'TS_TO_KILL_DIVISOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CJMJMLIE@WAR_QUEST_COMPLETE_FRIENDSHIP?$AA@
CONST	SEGMENT
??_C@_0BO@CJMJMLIE@WAR_QUEST_COMPLETE_FRIENDSHIP?$AA@ DB 'WAR_QUEST_COMPL'
	DB	'ETE_FRIENDSHIP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CBKGAJFM@TXT_KEY_MINOR_GIFT_UNITS_REMINDE@
CONST	SEGMENT
??_C@_0CC@CBKGAJFM@TXT_KEY_MINOR_GIFT_UNITS_REMINDE@ DB 'TXT_KEY_MINOR_GI'
	DB	'FT_UNITS_REMINDER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HBNEFCKF@MAX_DISTANCE_MINORS_BARB_QUEST?$AA@
CONST	SEGMENT
??_C@_0BP@HBNEFCKF@MAX_DISTANCE_MINORS_BARB_QUEST?$AA@ DB 'MAX_DISTANCE_M'
	DB	'INORS_BARB_QUEST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HLPNMJNE@MAX_MINOR_ADDITIONAL_ALLIES_GP_C@
CONST	SEGMENT
??_C@_0CG@HLPNMJNE@MAX_MINOR_ADDITIONAL_ALLIES_GP_C@ DB 'MAX_MINOR_ADDITI'
	DB	'ONAL_ALLIES_GP_CHANGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GLGMKJLH@MINOR_ADDITIONAL_ALLIES_GP_CHANG@
CONST	SEGMENT
??_C@_0CC@GLGMKJLH@MINOR_ADDITIONAL_ALLIES_GP_CHANG@ DB 'MINOR_ADDITIONAL'
	DB	'_ALLIES_GP_CHANGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JLIBBBBL@MINOR_TURNS_GREAT_PEOPLE_SPAWN_B@
CONST	SEGMENT
??_C@_0CN@JLIBBBBL@MINOR_TURNS_GREAT_PEOPLE_SPAWN_B@ DB 'MINOR_TURNS_GREA'
	DB	'T_PEOPLE_SPAWN_BIAS_MULTIPLY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DOBHBNON@MINOR_TURNS_GREAT_PEOPLE_SPAWN_R@
CONST	SEGMENT
??_C@_0CE@DOBHBNON@MINOR_TURNS_GREAT_PEOPLE_SPAWN_R@ DB 'MINOR_TURNS_GREA'
	DB	'T_PEOPLE_SPAWN_RAND', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FDBCILAN@MINOR_TURNS_GREAT_PEOPLE_SPAWN_B@
CONST	SEGMENT
??_C@_0CE@FDBCILAN@MINOR_TURNS_GREAT_PEOPLE_SPAWN_B@ DB 'MINOR_TURNS_GREA'
	DB	'T_PEOPLE_SPAWN_BASE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CPJMOGLA@ALLIES_FAITH_FLAT_BONUS_AMOUNT_A@
CONST	SEGMENT
??_C@_0CH@CPJMOGLA@ALLIES_FAITH_FLAT_BONUS_AMOUNT_A@ DB 'ALLIES_FAITH_FLA'
	DB	'T_BONUS_AMOUNT_ANCIENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IBNBEPGB@ALLIES_FAITH_FLAT_BONUS_AMOUNT_C@
CONST	SEGMENT
??_C@_0CJ@IBNBEPGB@ALLIES_FAITH_FLAT_BONUS_AMOUNT_C@ DB 'ALLIES_FAITH_FLA'
	DB	'T_BONUS_AMOUNT_CLASSICAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@GGDLOAEE@ALLIES_FAITH_FLAT_BONUS_AMOUNT_M@
CONST	SEGMENT
??_C@_0CI@GGDLOAEE@ALLIES_FAITH_FLAT_BONUS_AMOUNT_M@ DB 'ALLIES_FAITH_FLA'
	DB	'T_BONUS_AMOUNT_MEDIEVAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HNJAIFPA@ALLIES_FAITH_FLAT_BONUS_AMOUNT_R@
CONST	SEGMENT
??_C@_0CL@HNJAIFPA@ALLIES_FAITH_FLAT_BONUS_AMOUNT_R@ DB 'ALLIES_FAITH_FLA'
	DB	'T_BONUS_AMOUNT_RENAISSANCE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CDPOFADC@ALLIES_FAITH_FLAT_BONUS_AMOUNT_I@
CONST	SEGMENT
??_C@_0CK@CDPOFADC@ALLIES_FAITH_FLAT_BONUS_AMOUNT_I@ DB 'ALLIES_FAITH_FLA'
	DB	'T_BONUS_AMOUNT_INDUSTRIAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IPOIHAMP@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@
CONST	SEGMENT
??_C@_0CI@IPOIHAMP@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@ DB 'FRIENDS_FAITH_FL'
	DB	'AT_BONUS_AMOUNT_ANCIENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@DABKLMFN@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@
CONST	SEGMENT
??_C@_0CK@DABKLMFN@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@ DB 'FRIENDS_FAITH_FL'
	DB	'AT_BONUS_AMOUNT_CLASSICAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KGCBPIHP@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@
CONST	SEGMENT
??_C@_0CJ@KGCBPIHP@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@ DB 'FRIENDS_FAITH_FL'
	DB	'AT_BONUS_AMOUNT_MEDIEVAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CKNHOOGC@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@
CONST	SEGMENT
??_C@_0CM@CKNHOOGC@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@ DB 'FRIENDS_FAITH_FL'
	DB	'AT_BONUS_AMOUNT_RENAISSANCE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MCAOHEG@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@
CONST	SEGMENT
??_C@_0CL@MCAOHEG@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@ DB 'FRIENDS_FAITH_FLA'
	DB	'T_BONUS_AMOUNT_INDUSTRIAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@EJBEJBLF@ALLIES_HAPPINESS_PER_LUXURY_BONU@
CONST	SEGMENT
??_C@_0DE@EJBEJBLF@ALLIES_HAPPINESS_PER_LUXURY_BONU@ DB 'ALLIES_HAPPINESS'
	DB	'_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@ICJBOKLK@ALLIES_HAPPINESS_PER_LUXURY_BONU@
CONST	SEGMENT
??_C@_0DC@ICJBOKLK@ALLIES_HAPPINESS_PER_LUXURY_BONU@ DB 'ALLIES_HAPPINESS'
	DB	'_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@ILFJBDDM@ALLIES_HAPPINESS_PER_LUXURY_BONU@
CONST	SEGMENT
??_C@_0DB@ILFJBDDM@ALLIES_HAPPINESS_PER_LUXURY_BONU@ DB 'ALLIES_HAPPINESS'
	DB	'_PER_LUXURY_BONUS_AMOUNT_ANCIENT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@LANBDEFI@FRIENDS_HAPPINESS_PER_LUXURY_BON@
CONST	SEGMENT
??_C@_0DF@LANBDEFI@FRIENDS_HAPPINESS_PER_LUXURY_BON@ DB 'FRIENDS_HAPPINES'
	DB	'S_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@CEPMMBHE@FRIENDS_HAPPINESS_PER_LUXURY_BON@
CONST	SEGMENT
??_C@_0DD@CEPMMBHE@FRIENDS_HAPPINESS_PER_LUXURY_BON@ DB 'FRIENDS_HAPPINES'
	DB	'S_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@FKCFLKJJ@FRIENDS_HAPPINESS_PER_LUXURY_BON@
CONST	SEGMENT
??_C@_0DC@FKCFLKJJ@FRIENDS_HAPPINESS_PER_LUXURY_BON@ DB 'FRIENDS_HAPPINES'
	DB	'S_PER_LUXURY_BONUS_AMOUNT_ANCIENT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GOCNNODM@ALLIES_HAPPINESS_FLAT_BONUS_AMOU@
CONST	SEGMENT
??_C@_0CO@GOCNNODM@ALLIES_HAPPINESS_FLAT_BONUS_AMOU@ DB 'ALLIES_HAPPINESS'
	DB	'_FLAT_BONUS_AMOUNT_INDUSTRIAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OCJCFDJK@ALLIES_HAPPINESS_FLAT_BONUS_AMOU@
CONST	SEGMENT
??_C@_0CM@OCJCFDJK@ALLIES_HAPPINESS_FLAT_BONUS_AMOU@ DB 'ALLIES_HAPPINESS'
	DB	'_FLAT_BONUS_AMOUNT_MEDIEVAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DIGOOGKD@ALLIES_HAPPINESS_FLAT_BONUS_AMOU@
CONST	SEGMENT
??_C@_0CL@DIGOOGKD@ALLIES_HAPPINESS_FLAT_BONUS_AMOU@ DB 'ALLIES_HAPPINESS'
	DB	'_FLAT_BONUS_AMOUNT_ANCIENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@POALNEKK@FRIENDS_HAPPINESS_FLAT_BONUS_AMO@
CONST	SEGMENT
??_C@_0CP@POALNEKK@FRIENDS_HAPPINESS_FLAT_BONUS_AMO@ DB 'FRIENDS_HAPPINES'
	DB	'S_FLAT_BONUS_AMOUNT_INDUSTRIAL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@PMMEOGJJ@FRIENDS_HAPPINESS_FLAT_BONUS_AMO@
CONST	SEGMENT
??_C@_0CN@PMMEOGJJ@FRIENDS_HAPPINESS_FLAT_BONUS_AMO@ DB 'FRIENDS_HAPPINES'
	DB	'S_FLAT_BONUS_AMOUNT_MEDIEVAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GPCJINDB@FRIENDS_HAPPINESS_FLAT_BONUS_AMO@
CONST	SEGMENT
??_C@_0CM@GPCJINDB@FRIENDS_HAPPINESS_FLAT_BONUS_AMO@ DB 'FRIENDS_HAPPINES'
	DB	'S_FLAT_BONUS_AMOUNT_ANCIENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NNHLCKHM@UNIT_SPAWN_NUM_CHOICES?$AA@
CONST	SEGMENT
??_C@_0BH@NNHLCKHM@UNIT_SPAWN_NUM_CHOICES?$AA@ DB 'UNIT_SPAWN_NUM_CHOICES'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IGLHLFEI@UNIT_SPAWN_BIAS_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BL@IGLHLFEI@UNIT_SPAWN_BIAS_MULTIPLIER?$AA@ DB 'UNIT_SPAWN_BIAS_MU'
	DB	'LTIPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ODACJMNB@ALLIES_EXTRA_TURNS_UNIT_SPAWN?$AA@
CONST	SEGMENT
??_C@_0BO@ODACJMNB@ALLIES_EXTRA_TURNS_UNIT_SPAWN?$AA@ DB 'ALLIES_EXTRA_TU'
	DB	'RNS_UNIT_SPAWN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HBDFNHKM@FRIENDS_RAND_TURNS_UNIT_SPAWN?$AA@
CONST	SEGMENT
??_C@_0BO@HBDFNHKM@FRIENDS_RAND_TURNS_UNIT_SPAWN?$AA@ DB 'FRIENDS_RAND_TU'
	DB	'RNS_UNIT_SPAWN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FJLHLADN@FRIENDS_BASE_TURNS_UNIT_SPAWN?$AA@
CONST	SEGMENT
??_C@_0BO@FJLHLADN@FRIENDS_BASE_TURNS_UNIT_SPAWN?$AA@ DB 'FRIENDS_BASE_TU'
	DB	'RNS_UNIT_SPAWN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LIMBJBGC@ALLIES_OTHER_CITIES_FOOD_BONUS_A@
CONST	SEGMENT
??_C@_0CG@LIMBJBGC@ALLIES_OTHER_CITIES_FOOD_BONUS_A@ DB 'ALLIES_OTHER_CIT'
	DB	'IES_FOOD_BONUS_AMOUNT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KOHFCGNJ@ALLIES_CAPITAL_FOOD_BONUS_AMOUNT@
CONST	SEGMENT
??_C@_0CB@KOHFCGNJ@ALLIES_CAPITAL_FOOD_BONUS_AMOUNT@ DB 'ALLIES_CAPITAL_F'
	DB	'OOD_BONUS_AMOUNT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HKIFEHMH@FRIENDS_OTHER_CITIES_FOOD_BONUS_@
CONST	SEGMENT
??_C@_0DI@HKIFEHMH@FRIENDS_OTHER_CITIES_FOOD_BONUS_@ DB 'FRIENDS_OTHER_CI'
	DB	'TIES_FOOD_BONUS_AMOUNT_POST_RENAISSANCE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@BKMPCDHK@FRIENDS_OTHER_CITIES_FOOD_BONUS_@
CONST	SEGMENT
??_C@_0DH@BKMPCDHK@FRIENDS_OTHER_CITIES_FOOD_BONUS_@ DB 'FRIENDS_OTHER_CI'
	DB	'TIES_FOOD_BONUS_AMOUNT_PRE_RENAISSANCE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LFGIDGFE@FRIENDS_CAPITAL_FOOD_BONUS_AMOUN@
CONST	SEGMENT
??_C@_0DD@LFGIDGFE@FRIENDS_CAPITAL_FOOD_BONUS_AMOUN@ DB 'FRIENDS_CAPITAL_'
	DB	'FOOD_BONUS_AMOUNT_POST_RENAISSANCE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@ENCLCJEM@FRIENDS_CAPITAL_FOOD_BONUS_AMOUN@
CONST	SEGMENT
??_C@_0DC@ENCLCJEM@FRIENDS_CAPITAL_FOOD_BONUS_AMOUN@ DB 'FRIENDS_CAPITAL_'
	DB	'FOOD_BONUS_AMOUNT_PRE_RENAISSANCE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CNHFIELJ@ALLIES_CULTURE_BONUS_AMOUNT_INDU@
CONST	SEGMENT
??_C@_0CH@CNHFIELJ@ALLIES_CULTURE_BONUS_AMOUNT_INDU@ DB 'ALLIES_CULTURE_B'
	DB	'ONUS_AMOUNT_INDUSTRIAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DPPDNEDE@ALLIES_CULTURE_BONUS_AMOUNT_MEDI@
CONST	SEGMENT
??_C@_0CF@DPPDNEDE@ALLIES_CULTURE_BONUS_AMOUNT_MEDI@ DB 'ALLIES_CULTURE_B'
	DB	'ONUS_AMOUNT_MEDIEVAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FEJFIBMM@ALLIES_CULTURE_BONUS_AMOUNT_ANCI@
CONST	SEGMENT
??_C@_0CE@FEJFIBMM@ALLIES_CULTURE_BONUS_AMOUNT_ANCI@ DB 'ALLIES_CULTURE_B'
	DB	'ONUS_AMOUNT_ANCIENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@INABBCMG@FRIENDS_CULTURE_BONUS_AMOUNT_IND@
CONST	SEGMENT
??_C@_0CI@INABBCMG@FRIENDS_CULTURE_BONUS_AMOUNT_IND@ DB 'FRIENDS_CULTURE_'
	DB	'BONUS_AMOUNT_INDUSTRIAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PKIIIJDJ@FRIENDS_CULTURE_BONUS_AMOUNT_MED@
CONST	SEGMENT
??_C@_0CG@PKIIIJDJ@FRIENDS_CULTURE_BONUS_AMOUNT_MED@ DB 'FRIENDS_CULTURE_'
	DB	'BONUS_AMOUNT_MEDIEVAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JFPDDCHE@FRIENDS_CULTURE_BONUS_AMOUNT_ANC@
CONST	SEGMENT
??_C@_0CF@JFPDDCHE@FRIENDS_CULTURE_BONUS_AMOUNT_ANC@ DB 'FRIENDS_CULTURE_'
	DB	'BONUS_AMOUNT_ANCIENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EAANANMJ@MINOR_CIV_SCIENCE_BONUS_MULTIPLI@
CONST	SEGMENT
??_C@_0CD@EAANANMJ@MINOR_CIV_SCIENCE_BONUS_MULTIPLI@ DB 'MINOR_CIV_SCIENC'
	DB	'E_BONUS_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MOOMLIJE@MINOR_FRIENDSHIP_CLOSE_AMOUNT?$AA@
CONST	SEGMENT
??_C@_0BO@MOOMLIJE@MINOR_FRIENDSHIP_CLOSE_AMOUNT?$AA@ DB 'MINOR_FRIENDSHI'
	DB	'P_CLOSE_AMOUNT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DLLOHKPA@FRIENDSHIP_THRESHOLD_CAN_PLEDGE_@
CONST	SEGMENT
??_C@_0CL@DLLOHKPA@FRIENDSHIP_THRESHOLD_CAN_PLEDGE_@ DB 'FRIENDSHIP_THRES'
	DB	'HOLD_CAN_PLEDGE_TO_PROTECT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KPLIMLMB@FRIENDSHIP_THRESHOLD_CAN_BULLY?$AA@
CONST	SEGMENT
??_C@_0BP@KPLIMLMB@FRIENDSHIP_THRESHOLD_CAN_BULLY?$AA@ DB 'FRIENDSHIP_THR'
	DB	'ESHOLD_CAN_BULLY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NFAJCECL@FRIENDSHIP_THRESHOLD_MAX?$AA@
CONST	SEGMENT
??_C@_0BJ@NFAJCECL@FRIENDSHIP_THRESHOLD_MAX?$AA@ DB 'FRIENDSHIP_THRESHOLD'
	DB	'_MAX', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FDKJOODF@FRIENDSHIP_THRESHOLD_ALLIES?$AA@
CONST	SEGMENT
??_C@_0BM@FDKJOODF@FRIENDSHIP_THRESHOLD_ALLIES?$AA@ DB 'FRIENDSHIP_THRESH'
	DB	'OLD_ALLIES', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CGHIJMEH@FRIENDSHIP_ALLIES_ON_DEATH?$AA@
CONST	SEGMENT
??_C@_0BL@CGHIJMEH@FRIENDSHIP_ALLIES_ON_DEATH?$AA@ DB 'FRIENDSHIP_ALLIES_'
	DB	'ON_DEATH', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KBAHMDJG@FRIENDSHIP_THRESHOLD_FRIENDS?$AA@
CONST	SEGMENT
??_C@_0BN@KBAHMDJG@FRIENDSHIP_THRESHOLD_FRIENDS?$AA@ DB 'FRIENDSHIP_THRES'
	DB	'HOLD_FRIENDS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BDBCDPJL@FRIENDSHIP_FRIENDS_ON_DEATH?$AA@
CONST	SEGMENT
??_C@_0BM@BDBCDPJL@FRIENDSHIP_FRIENDS_ON_DEATH?$AA@ DB 'FRIENDSHIP_FRIEND'
	DB	'S_ON_DEATH', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CIFBCCOD@FRIENDSHIP_THRESHOLD_NEUTRAL?$AA@
CONST	SEGMENT
??_C@_0BN@CIFBCCOD@FRIENDSHIP_THRESHOLD_NEUTRAL?$AA@ DB 'FRIENDSHIP_THRES'
	DB	'HOLD_NEUTRAL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JPOGAFGD@FRIENDSHIP_NEUTRAL_ON_DEATH?$AA@
CONST	SEGMENT
??_C@_0BM@JPOGAFGD@FRIENDSHIP_NEUTRAL_ON_DEATH?$AA@ DB 'FRIENDSHIP_NEUTRA'
	DB	'L_ON_DEATH', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NMFNFFFN@PERMANENT_WAR_OTHER_AT_WAR?$AA@
CONST	SEGMENT
??_C@_0BL@NMFNFFFN@PERMANENT_WAR_OTHER_AT_WAR?$AA@ DB 'PERMANENT_WAR_OTHE'
	DB	'R_AT_WAR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IONAPLNK@PERMANENT_WAR_OTHER_CHANCE_NEIGH@
CONST	SEGMENT
??_C@_0CF@IONAPLNK@PERMANENT_WAR_OTHER_CHANCE_NEIGH@ DB 'PERMANENT_WAR_OT'
	DB	'HER_CHANCE_NEIGHBORS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KDLDHMC@PERMANENT_WAR_OTHER_CHANCE_CLOSE@
CONST	SEGMENT
??_C@_0CB@KDLDHMC@PERMANENT_WAR_OTHER_CHANCE_CLOSE@ DB 'PERMANENT_WAR_OTH'
	DB	'ER_CHANCE_CLOSE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MFMNEJFG@PERMANENT_WAR_OTHER_CHANCE_FAR?$AA@
CONST	SEGMENT
??_C@_0BP@MFMNEJFG@PERMANENT_WAR_OTHER_CHANCE_FAR?$AA@ DB 'PERMANENT_WAR_'
	DB	'OTHER_CHANCE_FAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PEAJINHL@PERMANENT_WAR_OTHER_CHANCE_DISTA@
CONST	SEGMENT
??_C@_0CD@PEAJINHL@PERMANENT_WAR_OTHER_CHANCE_DISTA@ DB 'PERMANENT_WAR_OT'
	DB	'HER_CHANCE_DISTANT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@FODJABJA@PERMANENT_WAR_OTHER_WARMONGER_CH@
CONST	SEGMENT
??_C@_0CP@FODJABJA@PERMANENT_WAR_OTHER_WARMONGER_CH@ DB 'PERMANENT_WAR_OT'
	DB	'HER_WARMONGER_CHANCE_NEIGHBORS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NABICODF@PERMANENT_WAR_OTHER_WARMONGER_CH@
CONST	SEGMENT
??_C@_0CL@NABICODF@PERMANENT_WAR_OTHER_WARMONGER_CH@ DB 'PERMANENT_WAR_OT'
	DB	'HER_WARMONGER_CHANCE_CLOSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NADEIDO@PERMANENT_WAR_OTHER_WARMONGER_CH@
CONST	SEGMENT
??_C@_0CJ@NADEIDO@PERMANENT_WAR_OTHER_WARMONGER_CH@ DB 'PERMANENT_WAR_OTH'
	DB	'ER_WARMONGER_CHANCE_FAR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MLJPIIOC@PERMANENT_WAR_OTHER_WARMONGER_CH@
CONST	SEGMENT
??_C@_0CN@MLJPIIOC@PERMANENT_WAR_OTHER_WARMONGER_CH@ DB 'PERMANENT_WAR_OT'
	DB	'HER_WARMONGER_CHANCE_DISTANT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BJAEFBAH@PERMANENT_WAR_AGGRESSOR_CHANCE?$AA@
CONST	SEGMENT
??_C@_0BP@BJAEFBAH@PERMANENT_WAR_AGGRESSOR_CHANCE?$AA@ DB 'PERMANENT_WAR_'
	DB	'AGGRESSOR_CHANCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FGMEIMPI@MINOR_CIV_WARMONGER_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BO@FGMEIMPI@MINOR_CIV_WARMONGER_THRESHOLD?$AA@ DB 'MINOR_CIV_WARMO'
	DB	'NGER_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LNOJKEHC@MINOR_CIV_AGGRESSOR_THRESHOLD?$AA@
CONST	SEGMENT
??_C@_0BO@LNOJKEHC@MINOR_CIV_AGGRESSOR_THRESHOLD?$AA@ DB 'MINOR_CIV_AGGRE'
	DB	'SSOR_THRESHOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GJOOKCLM@MINOR_FRIENDSHIP_AT_WAR?$AA@
CONST	SEGMENT
??_C@_0BI@GJOOKCLM@MINOR_FRIENDSHIP_AT_WAR?$AA@ DB 'MINOR_FRIENDSHIP_AT_W'
	DB	'AR', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@MDMAEAFL@MINOR_FRIENDSHIP_NEGATIVE_INCREA@
CONST	SEGMENT
??_C@_0CM@MDMAEAFL@MINOR_FRIENDSHIP_NEGATIVE_INCREA@ DB 'MINOR_FRIENDSHIP'
	DB	'_NEGATIVE_INCREASE_PER_TURN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PABKIALB@MINOR_FRIENDSHIP_DROP_BULLY_WORK@
CONST	SEGMENT
??_C@_0CL@PABKIALB@MINOR_FRIENDSHIP_DROP_BULLY_WORK@ DB 'MINOR_FRIENDSHIP'
	DB	'_DROP_BULLY_WORKER_FAILURE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DJFIDLOL@MINOR_FRIENDSHIP_DROP_BULLY_WORK@
CONST	SEGMENT
??_C@_0CL@DJFIDLOL@MINOR_FRIENDSHIP_DROP_BULLY_WORK@ DB 'MINOR_FRIENDSHIP'
	DB	'_DROP_BULLY_WORKER_SUCCESS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@EMLMOJJP@MINOR_FRIENDSHIP_DROP_BULLY_GOLD@
CONST	SEGMENT
??_C@_0CJ@EMLMOJJP@MINOR_FRIENDSHIP_DROP_BULLY_GOLD@ DB 'MINOR_FRIENDSHIP'
	DB	'_DROP_BULLY_GOLD_FAILURE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IFPOFCMF@MINOR_FRIENDSHIP_DROP_BULLY_GOLD@
CONST	SEGMENT
??_C@_0CJ@IFPOFCMF@MINOR_FRIENDSHIP_DROP_BULLY_GOLD@ DB 'MINOR_FRIENDSHIP'
	DB	'_DROP_BULLY_GOLD_SUCCESS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@OGIDHCFA@MINOR_FRIENDSHIP_DROP_DISHONOR_P@
CONST	SEGMENT
??_C@_0DB@OGIDHCFA@MINOR_FRIENDSHIP_DROP_DISHONOR_P@ DB 'MINOR_FRIENDSHIP'
	DB	'_DROP_DISHONOR_PLEDGE_TO_PROTECT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HNBKLGKB@MINOR_FRIENDSHIP_DROP_PER_TURN_A@
CONST	SEGMENT
??_C@_0CJ@HNBKLGKB@MINOR_FRIENDSHIP_DROP_PER_TURN_A@ DB 'MINOR_FRIENDSHIP'
	DB	'_DROP_PER_TURN_AGGRESSOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DPALJAA@MINOR_FRIENDSHIP_DROP_PER_TURN_H@
CONST	SEGMENT
??_C@_0CH@DPALJAA@MINOR_FRIENDSHIP_DROP_PER_TURN_H@ DB 'MINOR_FRIENDSHIP_'
	DB	'DROP_PER_TURN_HOSTILE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GMFCAEOP@MINOR_FRIENDSHIP_DROP_PER_TURN?$AA@
CONST	SEGMENT
??_C@_0BP@GMFCAEOP@MINOR_FRIENDSHIP_DROP_PER_TURN?$AA@ DB 'MINOR_FRIENDSH'
	DB	'IP_DROP_PER_TURN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JEBBBPNF@MINOR_FRIENDSHIP_RATE_MOD_SHARED@
CONST	SEGMENT
??_C@_0CK@JEBBBPNF@MINOR_FRIENDSHIP_RATE_MOD_SHARED@ DB 'MINOR_FRIENDSHIP'
	DB	'_RATE_MOD_SHARED_RELIGION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LLBCNIOF@MINOR_FRIENDSHIP_RATE_MOD_MAXIMU@
CONST	SEGMENT
??_C@_0CC@LLBCNIOF@MINOR_FRIENDSHIP_RATE_MOD_MAXIMU@ DB 'MINOR_FRIENDSHIP'
	DB	'_RATE_MOD_MAXIMUM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IFFILJIK@MINOR_BULLY_GOLD?$AA@
CONST	SEGMENT
??_C@_0BB@IFFILJIK@MINOR_BULLY_GOLD?$AA@ DB 'MINOR_BULLY_GOLD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@COBAIHLB@AI_DIPLO_LAND_DISPUTE_WEIGHT_FIE@
CONST	SEGMENT
??_C@_0CE@COBAIHLB@AI_DIPLO_LAND_DISPUTE_WEIGHT_FIE@ DB 'AI_DIPLO_LAND_DI'
	DB	'SPUTE_WEIGHT_FIERCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OOODBAJM@AI_DIPLO_LAND_DISPUTE_WEIGHT_STR@
CONST	SEGMENT
??_C@_0CE@OOODBAJM@AI_DIPLO_LAND_DISPUTE_WEIGHT_STR@ DB 'AI_DIPLO_LAND_DI'
	DB	'SPUTE_WEIGHT_STRONG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DPHOAAEH@AI_DIPLO_LAND_DISPUTE_WEIGHT_WEA@
CONST	SEGMENT
??_C@_0CC@DPHOAAEH@AI_DIPLO_LAND_DISPUTE_WEIGHT_WEA@ DB 'AI_DIPLO_LAND_DI'
	DB	'SPUTE_WEIGHT_WEAK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BPFAGGFL@AI_DIPLO_PLOT_RANGE_FROM_CITY_HO@
CONST	SEGMENT
??_C@_0CJ@BPFAGGFL@AI_DIPLO_PLOT_RANGE_FROM_CITY_HO@ DB 'AI_DIPLO_PLOT_RA'
	DB	'NGE_FROM_CITY_HOME_FRONT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GEKHNEID@AI_HOMELAND_GREAT_PERSON_TURNS_T@
CONST	SEGMENT
??_C@_0CH@GEKHNEID@AI_HOMELAND_GREAT_PERSON_TURNS_T@ DB 'AI_HOMELAND_GREA'
	DB	'T_PERSON_TURNS_TO_WAIT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BCHLIFIP@AI_HOMELAND_MOVE_PRIORITY_AIRLIF@
CONST	SEGMENT
??_C@_0CC@BCHLIFIP@AI_HOMELAND_MOVE_PRIORITY_AIRLIF@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_AIRLIFT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@ILBKGPKL@AI_HOMELAND_MOVE_PRIORITY_ARCHAE@
CONST	SEGMENT
??_C@_0CI@ILBKGPKL@AI_HOMELAND_MOVE_PRIORITY_ARCHAE@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_ARCHAEOLOGIST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CJEDPOAE@AI_HOMELAND_MOVE_PRIORITY_TRADE_@
CONST	SEGMENT
??_C@_0CF@CJEDPOAE@AI_HOMELAND_MOVE_PRIORITY_TRADE_@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_TRADE_UNIT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EFALMOEJ@AI_HOMELAND_MOVE_PRIORITY_TREASU@
CONST	SEGMENT
??_C@_0CD@EFALMOEJ@AI_HOMELAND_MOVE_PRIORITY_TREASU@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_TREASURE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KFEJNHEN@AI_HOMELAND_MOVE_PRIORITY_ADD_SP@
CONST	SEGMENT
??_C@_0CN@KFEJNHEN@AI_HOMELAND_MOVE_PRIORITY_ADD_SP@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_ADD_SPACESHIP_PART', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NIIKJIGN@AI_HOMELAND_MOVE_PRIORITY_SPACES@
CONST	SEGMENT
??_C@_0CJ@NIIKJIGN@AI_HOMELAND_MOVE_PRIORITY_SPACES@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_SPACESHIP_PART', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@JCMFDOIB@AI_HOMELAND_MOVE_PRIORITY_AIRCRA@
CONST	SEGMENT
??_C@_0DA@JCMFDOIB@AI_HOMELAND_MOVE_PRIORITY_AIRCRA@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_AIRCRAFT_TO_THE_FRONT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BFGDNJCJ@AI_HOMELAND_MOVE_PRIORITY_INQUIS@
CONST	SEGMENT
??_C@_0CF@BFGDNJCJ@AI_HOMELAND_MOVE_PRIORITY_INQUIS@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_INQUISITOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PJAGMAGG@AI_HOMELAND_MOVE_PRIORITY_MISSIO@
CONST	SEGMENT
??_C@_0CF@PJAGMAGG@AI_HOMELAND_MOVE_PRIORITY_MISSIO@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_MISSIONARY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LHKHGIIG@AI_HOMELAND_MOVE_PRIORITY_PROPHE@
CONST	SEGMENT
??_C@_0CL@LHKHGIIG@AI_HOMELAND_MOVE_PRIORITY_PROPHE@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_PROPHET_RELIGION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NHJGNEOH@AI_HOMELAND_MOVE_PRIORITY_ADMIRA@
CONST	SEGMENT
??_C@_0CL@NHJGNEOH@AI_HOMELAND_MOVE_PRIORITY_ADMIRA@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_ADMIRAL_GARRISON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@OFECAJCK@AI_HOMELAND_MOVE_PRIORITY_GENERA@
CONST	SEGMENT
??_C@_0CL@OFECAJCK@AI_HOMELAND_MOVE_PRIORITY_GENERA@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_GENERAL_GARRISON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FHJPHKMH@AI_HOMELAND_MOVE_PRIORITY_ENGINE@
CONST	SEGMENT
??_C@_0CJ@FHJPHKMH@AI_HOMELAND_MOVE_PRIORITY_ENGINE@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_ENGINEER_HURRY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@LDDIJMOC@AI_HOMELAND_MOVE_PRIORITY_SCIENT@
CONST	SEGMENT
??_C@_0CO@LDDIJMOC@AI_HOMELAND_MOVE_PRIORITY_SCIENT@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_SCIENTIST_FREE_TECH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CAELKDKE@AI_HOMELAND_MOVE_PRIORITY_MUSICI@
CONST	SEGMENT
??_C@_0CD@CAELKDKE@AI_HOMELAND_MOVE_PRIORITY_MUSICI@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_MUSICIAN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BIKAOLAL@AI_HOMELAND_MOVE_PRIORITY_ARTIST@
CONST	SEGMENT
??_C@_0CB@BIKAOLAL@AI_HOMELAND_MOVE_PRIORITY_ARTIST@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_ARTIST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GIFMOGMK@AI_HOMELAND_MOVE_PRIORITY_WRITER@
CONST	SEGMENT
??_C@_0CB@GIFMOGMK@AI_HOMELAND_MOVE_PRIORITY_WRITER@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_WRITER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@LLDMBCH@AI_HOMELAND_MOVE_PRIORITY_GARRIS@
CONST	SEGMENT
??_C@_0CO@LLDMBCH@AI_HOMELAND_MOVE_PRIORITY_GARRIS@ DB 'AI_HOMELAND_MOVE_'
	DB	'PRIORITY_GARRISON_CITY_STATE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@GGKHEJIA@AI_HOMELAND_MOVE_PRIORITY_ANCIEN@
CONST	SEGMENT
??_C@_0CI@GGKHEJIA@AI_HOMELAND_MOVE_PRIORITY_ANCIEN@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_ANCIENT_RUINS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BOOAGBJ@AI_HOMELAND_MOVE_PRIORITY_UPGRAD@
CONST	SEGMENT
??_C@_0CC@BOOAGBJ@AI_HOMELAND_MOVE_PRIORITY_UPGRAD@ DB 'AI_HOMELAND_MOVE_'
	DB	'PRIORITY_UPGRADE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EMHEBOJH@AI_HOMELAND_MOVE_PRIORITY_PATROL@
CONST	SEGMENT
??_C@_0CB@EMHEBOJH@AI_HOMELAND_MOVE_PRIORITY_PATROL@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_PATROL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PNHIGNFH@AI_HOMELAND_MOVE_PRIORITY_GARRIS@
CONST	SEGMENT
??_C@_0CD@PNHIGNFH@AI_HOMELAND_MOVE_PRIORITY_GARRIS@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_GARRISON', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FCJFMGNA@AI_HOMELAND_MOVE_PRIORITY_MOBILE@
CONST	SEGMENT
??_C@_0CJ@FCJFMGNA@AI_HOMELAND_MOVE_PRIORITY_MOBILE@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_MOBILE_RESERVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MKHNEANE@AI_HOMELAND_MOVE_PRIORITY_SENTRY@
CONST	SEGMENT
??_C@_0CB@MKHNEANE@AI_HOMELAND_MOVE_PRIORITY_SENTRY@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_SENTRY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GEIBPHGH@AI_HOMELAND_MOVE_PRIORITY_EXPLOR@
CONST	SEGMENT
??_C@_0CG@GEIBPHGH@AI_HOMELAND_MOVE_PRIORITY_EXPLOR@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_EXPLORE_SEA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HHMNMKGE@AI_HOMELAND_MOVE_PRIORITY_EXPLOR@
CONST	SEGMENT
??_C@_0CC@HHMNMKGE@AI_HOMELAND_MOVE_PRIORITY_EXPLOR@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_EXPLORE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@EEGOGFAI@AI_HOMELAND_MOVE_PRIORITY_WORKER@
CONST	SEGMENT
??_C@_0CF@EEGOGFAI@AI_HOMELAND_MOVE_PRIORITY_WORKER@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_WORKER_SEA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MIFOBGNF@AI_HOMELAND_MOVE_PRIORITY_WORKER@
CONST	SEGMENT
??_C@_0CB@MIFOBGNF@AI_HOMELAND_MOVE_PRIORITY_WORKER@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_WORKER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JNPNPJGG@AI_HOMELAND_MOVE_PRIORITY_TO_SAF@
CONST	SEGMENT
??_C@_0CE@JNPNPJGG@AI_HOMELAND_MOVE_PRIORITY_TO_SAF@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_TO_SAFETY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EOOEAMAN@AI_HOMELAND_MOVE_PRIORITY_HEAL?$AA@
CONST	SEGMENT
??_C@_0BP@EOOEAMAN@AI_HOMELAND_MOVE_PRIORITY_HEAL?$AA@ DB 'AI_HOMELAND_MO'
	DB	'VE_PRIORITY_HEAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BAOCBMNA@AI_HOMELAND_MOVE_PRIORITY_SETTLE@
CONST	SEGMENT
??_C@_0CB@BAOCBMNA@AI_HOMELAND_MOVE_PRIORITY_SETTLE@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_SETTLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HBFAKEBA@AI_HOMELAND_ESTIMATE_TURNS_DISTA@
CONST	SEGMENT
??_C@_0CE@HBFAKEBA@AI_HOMELAND_ESTIMATE_TURNS_DISTA@ DB 'AI_HOMELAND_ESTI'
	DB	'MATE_TURNS_DISTANCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LMCGKMJO@AI_HOMELAND_MAX_DEFENSIVE_MOVE_T@
CONST	SEGMENT
??_C@_0CF@LMCGKMJO@AI_HOMELAND_MAX_DEFENSIVE_MOVE_T@ DB 'AI_HOMELAND_MAX_'
	DB	'DEFENSIVE_MOVE_TURNS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LKBHOIPJ@AI_HOMELAND_MAX_UPGRADE_MOVE_TUR@
CONST	SEGMENT
??_C@_0CD@LKBHOIPJ@AI_HOMELAND_MAX_UPGRADE_MOVE_TUR@ DB 'AI_HOMELAND_MAX_'
	DB	'UPGRADE_MOVE_TURNS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KGHJKMFA@AI_HOMELAND_MOVE_PRIORITY_RANDOM@
CONST	SEGMENT
??_C@_0CF@KGHJKMFA@AI_HOMELAND_MOVE_PRIORITY_RANDOM@ DB 'AI_HOMELAND_MOVE'
	DB	'_PRIORITY_RANDOMNESS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@HBDGLOOD@AI_TACTICAL_BARBARIAN_PRIORITY_P@
CONST	SEGMENT
??_C@_0DC@HBDGLOOD@AI_TACTICAL_BARBARIAN_PRIORITY_P@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_PLUNDER_TRADE_UNIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@JNEAAHGJ@AI_TACTICAL_BARBARIAN_PRIORITY_E@
CONST	SEGMENT
??_C@_0CP@JNEAAHGJ@AI_TACTICAL_BARBARIAN_PRIORITY_E@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_ESCORT_CIVILIAN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GKMDNPFK@AI_TACTICAL_BARBARIAN_PRIORITY_C@
CONST	SEGMENT
??_C@_0CM@GKMDNPFK@AI_TACTICAL_BARBARIAN_PRIORITY_C@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_CAMP_DEFENSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HHPFNNJN@AI_TACTICAL_BARBARIAN_PRIORITY_A@
CONST	SEGMENT
??_C@_0CP@HHPFNNJN@AI_TACTICAL_BARBARIAN_PRIORITY_A@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_AGGRESSIVE_MOVE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@DPCDPBDB@AI_TACTICAL_BARBARIAN_PRIORITY_P@
CONST	SEGMENT
??_C@_0CM@DPCDPBDB@AI_TACTICAL_BARBARIAN_PRIORITY_P@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_PASSIVE_MOVE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@KLBJLPAE@AI_TACTICAL_BARBARIAN_PRIORITY_C@
CONST	SEGMENT
??_C@_0CP@KLBJLPAE@AI_TACTICAL_BARBARIAN_PRIORITY_C@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_CIVILIAN_ATTACK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@BLMDLMND@AI_TACTICAL_BARBARIAN_PRIORITY_B@
CONST	SEGMENT
??_C@_0DB@BLMDLMND@AI_TACTICAL_BARBARIAN_PRIORITY_B@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_BLOCKADE_RESOURCE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@GDNBBJMJ@AI_TACTICAL_BARBARIAN_PRIORITY_P@
CONST	SEGMENT
??_C@_0DB@GDNBBJMJ@AI_TACTICAL_BARBARIAN_PRIORITY_P@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_PILLAGE_NEXT_TURN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HPDMNEJK@AI_TACTICAL_BARBARIAN_PRIORITY_P@
CONST	SEGMENT
??_C@_0CP@HPDMNEJK@AI_TACTICAL_BARBARIAN_PRIORITY_P@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_PILLAGE_CITADEL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LHHIOAKE@AI_TACTICAL_BARBARIAN_PRIORITY_P@
CONST	SEGMENT
??_C@_0CH@LHHIOAKE@AI_TACTICAL_BARBARIAN_PRIORITY_P@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_PILLAGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@MLCIBCCJ@AI_TACTICAL_BARBARIAN_PRIORITY_D@
CONST	SEGMENT
??_C@_0DA@MLCIBCCJ@AI_TACTICAL_BARBARIAN_PRIORITY_D@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_DESPERATE_ATTACK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HLJJBHED@AI_TACTICAL_BARBARIAN_PRIORITY_A@
CONST	SEGMENT
??_C@_0CP@HLJJBHED@AI_TACTICAL_BARBARIAN_PRIORITY_A@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_ATTRIT_LOW_UNIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@JHJFFKNF@AI_TACTICAL_BARBARIAN_PRIORITY_A@
CONST	SEGMENT
??_C@_0DC@JHJFFKNF@AI_TACTICAL_BARBARIAN_PRIORITY_A@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_ATTRIT_MEDIUM_UNIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@KKMINGJJ@AI_TACTICAL_BARBARIAN_PRIORITY_A@
CONST	SEGMENT
??_C@_0DA@KKMINGJJ@AI_TACTICAL_BARBARIAN_PRIORITY_A@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_ATTRIT_HIGH_UNIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@EOJOGGDD@AI_TACTICAL_BARBARIAN_PRIORITY_T@
CONST	SEGMENT
??_C@_0CJ@EOJOGGDD@AI_TACTICAL_BARBARIAN_PRIORITY_T@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_TO_SAFETY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@HOINGDDC@AI_TACTICAL_BARBARIAN_PRIORITY_D@
CONST	SEGMENT
??_C@_0DA@HOINGDDC@AI_TACTICAL_BARBARIAN_PRIORITY_D@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_DESTROY_LOW_UNIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@JDCPDADI@AI_TACTICAL_BARBARIAN_PRIORITY_D@
CONST	SEGMENT
??_C@_0DD@JDCPDADI@AI_TACTICAL_BARBARIAN_PRIORITY_D@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_DESTROY_MEDIUM_UNIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@INMPIDEH@AI_TACTICAL_BARBARIAN_PRIORITY_D@
CONST	SEGMENT
??_C@_0DB@INMPIDEH@AI_TACTICAL_BARBARIAN_PRIORITY_D@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_DESTROY_HIGH_UNIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HIGGFMIA@AI_TACTICAL_BARBARIAN_PRIORITY_D@
CONST	SEGMENT
??_C@_0CL@HIGGFMIA@AI_TACTICAL_BARBARIAN_PRIORITY_D@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_DAMAGE_CITY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PMMGJBEM@AI_TACTICAL_BARBARIAN_PRIORITY_C@
CONST	SEGMENT
??_C@_0CM@PMMGJBEM@AI_TACTICAL_BARBARIAN_PRIORITY_C@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_PRIORITY_CAPTURE_CITY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LOGFMLNC@AI_TACTICAL_MOVE_PRIORITY_RANDOM@
CONST	SEGMENT
??_C@_0CF@LOGFMLNC@AI_TACTICAL_MOVE_PRIORITY_RANDOM@ DB 'AI_TACTICAL_MOVE'
	DB	'_PRIORITY_RANDOMNESS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LGKFGHFP@AI_TACTICAL_BARBARIAN_RELEASE_VA@
CONST	SEGMENT
??_C@_0CI@LGKFGHFP@AI_TACTICAL_BARBARIAN_RELEASE_VA@ DB 'AI_TACTICAL_BARB'
	DB	'ARIAN_RELEASE_VARIATION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BAAMFMIO@AI_TACTICAL_OVERKILL_PERCENT?$AA@
CONST	SEGMENT
??_C@_0BN@BAAMFMIO@AI_TACTICAL_OVERKILL_PERCENT?$AA@ DB 'AI_TACTICAL_OVER'
	DB	'KILL_PERCENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JHCPHEBF@AI_TACTICAL_REPOSITION_RANGE?$AA@
CONST	SEGMENT
??_C@_0BN@JHCPHEBF@AI_TACTICAL_REPOSITION_RANGE?$AA@ DB 'AI_TACTICAL_REPO'
	DB	'SITION_RANGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PDEINHGE@AI_TACTICAL_RECRUIT_RANGE?$AA@
CONST	SEGMENT
??_C@_0BK@PDEINHGE@AI_TACTICAL_RECRUIT_RANGE?$AA@ DB 'AI_TACTICAL_RECRUIT'
	DB	'_RANGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OFKGHNKP@AI_TACTICAL_MAP_BOMBARDMENT_ZONE@
CONST	SEGMENT
??_C@_0CH@OFKGHNKP@AI_TACTICAL_MAP_BOMBARDMENT_ZONE@ DB 'AI_TACTICAL_MAP_'
	DB	'BOMBARDMENT_ZONE_TURNS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IOMPOMMI@AI_TACTICAL_MAP_TEMP_ZONE_TURNS?$AA@
CONST	SEGMENT
??_C@_0CA@IOMPOMMI@AI_TACTICAL_MAP_TEMP_ZONE_TURNS?$AA@ DB 'AI_TACTICAL_M'
	DB	'AP_TEMP_ZONE_TURNS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IJMKNIGH@AI_TACTICAL_MAP_TEMP_ZONE_RADIUS@
CONST	SEGMENT
??_C@_0CB@IJMKNIGH@AI_TACTICAL_MAP_TEMP_ZONE_RADIUS@ DB 'AI_TACTICAL_MAP_'
	DB	'TEMP_ZONE_RADIUS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LJKKHAKO@AI_TACTICAL_MAP_DOMINANCE_PERCEN@
CONST	SEGMENT
??_C@_0CF@LJKKHAKO@AI_TACTICAL_MAP_DOMINANCE_PERCEN@ DB 'AI_TACTICAL_MAP_'
	DB	'DOMINANCE_PERCENTAGE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@ECKKMLOO@AI_TACTICAL_MAP_UNIT_STRENGTH_MU@
CONST	SEGMENT
??_C@_0CJ@ECKKMLOO@AI_TACTICAL_MAP_UNIT_STRENGTH_MU@ DB 'AI_TACTICAL_MAP_'
	DB	'UNIT_STRENGTH_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@ENEPHICP@AI_OPERATIONAL_PERCENT_HEALTH_FO@
CONST	SEGMENT
??_C@_0CM@ENEPHICP@AI_OPERATIONAL_PERCENT_HEALTH_FO@ DB 'AI_OPERATIONAL_P'
	DB	'ERCENT_HEALTH_FOR_OPERATION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MJINEPKI@AI_OPERATIONAL_PERCENT_DANGER_FO@
CONST	SEGMENT
??_C@_0DB@MJINEPKI@AI_OPERATIONAL_PERCENT_DANGER_FO@ DB 'AI_OPERATIONAL_P'
	DB	'ERCENT_DANGER_FOR_FORWARD_MUSTER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@OLABBHMN@AI_OPERATIONAL_NAVAL_BOMBARDMENT@
CONST	SEGMENT
??_C@_0CO@OLABBHMN@AI_OPERATIONAL_NAVAL_BOMBARDMENT@ DB 'AI_OPERATIONAL_N'
	DB	'AVAL_BOMBARDMENT_DEPLOY_RANGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JPCGDAOG@AI_OPERATIONAL_PILLAGE_ENEMY_DEP@
CONST	SEGMENT
??_C@_0CK@JPCGDAOG@AI_OPERATIONAL_PILLAGE_ENEMY_DEP@ DB 'AI_OPERATIONAL_P'
	DB	'ILLAGE_ENEMY_DEPLOY_RANGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BBBEOKNB@AI_OPERATIONAL_CITY_ATTACK_DEPLO@
CONST	SEGMENT
??_C@_0CI@BBBEOKNB@AI_OPERATIONAL_CITY_ATTACK_DEPLO@ DB 'AI_OPERATIONAL_C'
	DB	'ITY_ATTACK_DEPLOY_RANGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FLAHNGEP@AI_OPERATIONAL_BARBARIAN_CAMP_DE@
CONST	SEGMENT
??_C@_0CL@FLAHNGEP@AI_OPERATIONAL_BARBARIAN_CAMP_DE@ DB 'AI_OPERATIONAL_B'
	DB	'ARBARIAN_CAMP_DEPLOY_RANGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CEECGEIA@AI_CITIZEN_MOD_PRODUCTION_DEFICI@
CONST	SEGMENT
??_C@_0CC@CEECGEIA@AI_CITIZEN_MOD_PRODUCTION_DEFICI@ DB 'AI_CITIZEN_MOD_P'
	DB	'RODUCTION_DEFICIT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FPMALCDH@AI_CITIZEN_MOD_FOOD_DEFICIT?$AA@
CONST	SEGMENT
??_C@_0BM@FPMALCDH@AI_CITIZEN_MOD_FOOD_DEFICIT?$AA@ DB 'AI_CITIZEN_MOD_FO'
	DB	'OD_DEFICIT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HEMBFKAO@AI_CITIZEN_FOOD_MOD_SIZE_EXPONEN@
CONST	SEGMENT
??_C@_0CC@HEMBFKAO@AI_CITIZEN_FOOD_MOD_SIZE_EXPONEN@ DB 'AI_CITIZEN_FOOD_'
	DB	'MOD_SIZE_EXPONENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HMPEOCJJ@AI_CITIZEN_FOOD_MOD_SIZE_CUTOFF?$AA@
CONST	SEGMENT
??_C@_0CA@HMPEOCJJ@AI_CITIZEN_FOOD_MOD_SIZE_CUTOFF?$AA@ DB 'AI_CITIZEN_FO'
	DB	'OD_MOD_SIZE_CUTOFF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IKEJKLMD@AI_CITIZEN_VALUE_FAITH?$AA@
CONST	SEGMENT
??_C@_0BH@IKEJKLMD@AI_CITIZEN_VALUE_FAITH?$AA@ DB 'AI_CITIZEN_VALUE_FAITH'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GKCKJNHC@AI_CITIZEN_VALUE_CULTURE?$AA@
CONST	SEGMENT
??_C@_0BJ@GKCKJNHC@AI_CITIZEN_VALUE_CULTURE?$AA@ DB 'AI_CITIZEN_VALUE_CUL'
	DB	'TURE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IFCODDPF@AI_CITIZEN_VALUE_SCIENCE?$AA@
CONST	SEGMENT
??_C@_0BJ@IFCODDPF@AI_CITIZEN_VALUE_SCIENCE?$AA@ DB 'AI_CITIZEN_VALUE_SCI'
	DB	'ENCE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MFNDGIIA@AI_CITIZEN_VALUE_GOLD?$AA@
CONST	SEGMENT
??_C@_0BG@MFNDGIIA@AI_CITIZEN_VALUE_GOLD?$AA@ DB 'AI_CITIZEN_VALUE_GOLD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LOPFOFEF@AI_CITIZEN_VALUE_PRODUCTION?$AA@
CONST	SEGMENT
??_C@_0BM@LOPFOFEF@AI_CITIZEN_VALUE_PRODUCTION?$AA@ DB 'AI_CITIZEN_VALUE_'
	DB	'PRODUCTION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PKPFPPGJ@AI_CITIZEN_VALUE_FOOD?$AA@
CONST	SEGMENT
??_C@_0BG@PKPFPPGJ@AI_CITIZEN_VALUE_FOOD?$AA@ DB 'AI_CITIZEN_VALUE_FOOD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LDNKOAGG@AI_CITYSTRATEGY_ARMY_UNIT_BASE_W@
CONST	SEGMENT
??_C@_0CG@LDNKOAGG@AI_CITYSTRATEGY_ARMY_UNIT_BASE_W@ DB 'AI_CITYSTRATEGY_'
	DB	'ARMY_UNIT_BASE_WEIGHT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@PMFIMDBA@AI_CITYSTRATEGY_OPERATION_UNIT_F@
CONST	SEGMENT
??_C@_0DB@PMFIMDBA@AI_CITYSTRATEGY_OPERATION_UNIT_F@ DB 'AI_CITYSTRATEGY_'
	DB	'OPERATION_UNIT_FLAVOR_MULTIPLIER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IKFEGKAK@AI_CITYSTRATEGY_OPERATION_UNIT_B@
CONST	SEGMENT
??_C@_0CL@IKFEGKAK@AI_CITYSTRATEGY_OPERATION_UNIT_B@ DB 'AI_CITYSTRATEGY_'
	DB	'OPERATION_UNIT_BASE_WEIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EBDKBOIE@AI_CITYSTRATEGY_YIELD_DEFICIENT_@
CONST	SEGMENT
??_C@_0CI@EBDKBOIE@AI_CITYSTRATEGY_YIELD_DEFICIENT_@ DB 'AI_CITYSTRATEGY_'
	DB	'YIELD_DEFICIENT_SCIENCE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MCNMJEAK@AI_CITYSTRATEGY_YIELD_DEFICIENT_@
CONST	SEGMENT
??_C@_0CF@MCNMJEAK@AI_CITYSTRATEGY_YIELD_DEFICIENT_@ DB 'AI_CITYSTRATEGY_'
	DB	'YIELD_DEFICIENT_GOLD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NBDGGJHE@AI_CITYSTRATEGY_YIELD_DEFICIENT_@
CONST	SEGMENT
??_C@_0CL@NBDGGJHE@AI_CITYSTRATEGY_YIELD_DEFICIENT_@ DB 'AI_CITYSTRATEGY_'
	DB	'YIELD_DEFICIENT_PRODUCTION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PNPKADOD@AI_CITYSTRATEGY_YIELD_DEFICIENT_@
CONST	SEGMENT
??_C@_0CF@PNPKADOD@AI_CITYSTRATEGY_YIELD_DEFICIENT_@ DB 'AI_CITYSTRATEGY_'
	DB	'YIELD_DEFICIENT_FOOD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@GLEKLGPK@AI_CITYSTRATEGY_WANT_TILE_IMPROV@
CONST	SEGMENT
??_C@_0DB@GLEKLGPK@AI_CITYSTRATEGY_WANT_TILE_IMPROV@ DB 'AI_CITYSTRATEGY_'
	DB	'WANT_TILE_IMPROVERS_MINIMUM_SIZE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@NMOECHJD@AI_CITYSTRATEGY_NEED_TILE_IMPROV@
CONST	SEGMENT
??_C@_0DD@NMOECHJD@AI_CITYSTRATEGY_NEED_TILE_IMPROV@ DB 'AI_CITYSTRATEGY_'
	DB	'NEED_TILE_IMPROVERS_DESPERATE_TURN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@IJDENGIM@AI_CITYSTRATEGY_NEED_TILE_IMPROV@
CONST	SEGMENT
??_C@_0CP@IJDENGIM@AI_CITYSTRATEGY_NEED_TILE_IMPROV@ DB 'AI_CITYSTRATEGY_'
	DB	'NEED_TILE_IMPROVERS_WORKER_MOD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KHGALNEK@AI_CITYSTRATEGY_NEED_TILE_IMPROV@
CONST	SEGMENT
??_C@_0DD@KHGALNEK@AI_CITYSTRATEGY_NEED_TILE_IMPROV@ DB 'AI_CITYSTRATEGY_'
	DB	'NEED_TILE_IMPROVERS_CITY_THRESHOLD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@DKCCCDNG@AI_CITYSTRATEGY_LARGE_CITY_POP_T@
CONST	SEGMENT
??_C@_0CJ@DKCCCDNG@AI_CITYSTRATEGY_LARGE_CITY_POP_T@ DB 'AI_CITYSTRATEGY_'
	DB	'LARGE_CITY_POP_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@GPIGKHN@AI_CITYSTRATEGY_MEDIUM_CITY_POP_@
CONST	SEGMENT
??_C@_0CK@GPIGKHN@AI_CITYSTRATEGY_MEDIUM_CITY_POP_@ DB 'AI_CITYSTRATEGY_M'
	DB	'EDIUM_CITY_POP_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HGOBHHJP@AI_CITYSTRATEGY_SMALL_CITY_POP_T@
CONST	SEGMENT
??_C@_0CJ@HGOBHHJP@AI_CITYSTRATEGY_SMALL_CITY_POP_T@ DB 'AI_CITYSTRATEGY_'
	DB	'SMALL_CITY_POP_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@DOBJCOHL@AI_CITY_SPECIALIZATION_YIELD_NUM@
CONST	SEGMENT
??_C@_0DC@DOBJCOHL@AI_CITY_SPECIALIZATION_YIELD_NUM@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_YIELD_NUM_TILES_CONSIDERED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@IGJNMNLB@AI_CITY_SPECIALIZATION_YIELD_WEI@
CONST	SEGMENT
??_C@_0CP@IGJNMNLB@AI_CITY_SPECIALIZATION_YIELD_WEI@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_YIELD_WEIGHT_THIRD_RING', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@DLMIDEPF@AI_CITY_SPECIALIZATION_YIELD_WEI@
CONST	SEGMENT
??_C@_0DA@DLMIDEPF@AI_CITY_SPECIALIZATION_YIELD_WEI@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_YIELD_WEIGHT_SECOND_RING', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BKCEJLHJ@AI_CITY_SPECIALIZATION_YIELD_WEI@
CONST	SEGMENT
??_C@_0CP@BKCEJLHJ@AI_CITY_SPECIALIZATION_YIELD_WEI@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_YIELD_WEIGHT_FIRST_RING', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@CHFMPFPN@AI_CITY_SPECIALIZATION_SCIENCE_W@
CONST	SEGMENT
??_C@_0DH@CHFMPFPN@AI_CITY_SPECIALIZATION_SCIENCE_W@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@COACCNLO@AI_CITY_SPECIALIZATION_SCIENCE_W@
CONST	SEGMENT
??_C@_0DF@COACCNLO@AI_CITY_SPECIALIZATION_SCIENCE_W@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@IEIIINND@AI_CITY_SPECIALIZATION_GOLD_WEIG@
CONST	SEGMENT
??_C@_0DA@IEIIINND@AI_CITY_SPECIALIZATION_GOLD_WEIG@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_GOLD_WEIGHT_LAND_DISPUTE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@LPBKJGM@AI_CITY_SPECIALIZATION_GOLD_WEIG@
CONST	SEGMENT
??_C@_0CP@LPBKJGM@AI_CITY_SPECIALIZATION_GOLD_WEIG@ DB 'AI_CITY_SPECIALIZ'
	DB	'ATION_GOLD_WEIGHT_FLAVOR_GOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@PICJMLCD@AI_CITY_SPECIALIZATION_PRODUCTIO@
CONST	SEGMENT
??_C@_0DL@PICJMLCD@AI_CITY_SPECIALIZATION_PRODUCTIO@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_PRODUCTION_TRAINING_PER_PERSONALITY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@DOLLFJFC@AI_CITY_SPECIALIZATION_PRODUCTIO@
CONST	SEGMENT
??_C@_0DH@DOLLFJFC@AI_CITY_SPECIALIZATION_PRODUCTIO@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_PRODUCTION_TRAINING_PER_OFFENSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@EKNOCOCE@AI_CITY_SPECIALIZATION_PRODUCTIO@
CONST	SEGMENT
??_C@_0DK@EKNOCOCE@AI_CITY_SPECIALIZATION_PRODUCTIO@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@GJEHOOOP@AI_CITY_SPECIALIZATION_PRODUCTIO@
CONST	SEGMENT
??_C@_0DH@GJEHOOOP@AI_CITY_SPECIALIZATION_PRODUCTIO@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@PDMDENAP@AI_CITY_SPECIALIZATION_PRODUCTIO@
CONST	SEGMENT
??_C@_0ED@PDMDENAP@AI_CITY_SPECIALIZATION_PRODUCTIO@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@EHKADAJM@AI_CITY_SPECIALIZATION_PRODUCTIO@
CONST	SEGMENT
??_C@_0DK@EHKADAJM@AI_CITY_SPECIALIZATION_PRODUCTIO@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@DIMNKLBC@AI_CITY_SPECIALIZATION_PRODUCTIO@
CONST	SEGMENT
??_C@_0DI@DIMNKLBC@AI_CITY_SPECIALIZATION_PRODUCTIO@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@EKBHHGJG@AI_CITY_SPECIALIZATION_PRODUCTIO@
CONST	SEGMENT
??_C@_0EB@EKBHHGJG@AI_CITY_SPECIALIZATION_PRODUCTIO@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@NHBJLJKK@AI_CITY_SPECIALIZATION_PRODUCTIO@
CONST	SEGMENT
??_C@_0DI@NHBJLJKK@AI_CITY_SPECIALIZATION_PRODUCTIO@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@KFLJDMEC@AI_CITY_SPECIALIZATION_PRODUCTIO@
CONST	SEGMENT
??_C@_0DK@KFLJDMEC@AI_CITY_SPECIALIZATION_PRODUCTIO@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@LFCJKNAL@AI_CITY_SPECIALIZATION_PRODUCTIO@
CONST	SEGMENT
??_C@_0DK@LFCJKNAL@AI_CITY_SPECIALIZATION_PRODUCTIO@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@HHBLGFHI@AI_CITY_SPECIALIZATION_PRODUCTIO@
CONST	SEGMENT
??_C@_0EF@HHBLGFHI@AI_CITY_SPECIALIZATION_PRODUCTIO@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@NIDNKBB@AI_CITY_SPECIALIZATION_FOOD_WEIG@
CONST	SEGMENT
??_C@_0DD@NIDNKBB@AI_CITY_SPECIALIZATION_FOOD_WEIG@ DB 'AI_CITY_SPECIALIZ'
	DB	'ATION_FOOD_WEIGHT_EARLY_EXPANSION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@KCIGIBHD@AI_CITY_SPECIALIZATION_FOOD_WEIG@
CONST	SEGMENT
??_C@_0DA@KCIGIBHD@AI_CITY_SPECIALIZATION_FOOD_WEIG@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_FOOD_WEIGHT_NUM_SETTLERS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NKNKFGGP@AI_CITY_SPECIALIZATION_FOOD_WEIG@
CONST	SEGMENT
??_C@_0CO@NKNKFGGP@AI_CITY_SPECIALIZATION_FOOD_WEIG@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_FOOD_WEIGHT_NUM_CITIES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@IHJKGOBA@AI_CITY_SPECIALIZATION_FOOD_WEIG@
CONST	SEGMENT
??_C@_0DN@IHJKGOBA@AI_CITY_SPECIALIZATION_FOOD_WEIG@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@OHHJGNII@AI_CITY_SPECIALIZATION_FOOD_WEIG@
CONST	SEGMENT
??_C@_0DE@OHHJGNII@AI_CITY_SPECIALIZATION_FOOD_WEIG@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_FOOD_WEIGHT_FLAVOR_EXPANSION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@CMJEDJDL@AI_CITY_SPECIALIZATION_GENERAL_E@
CONST	SEGMENT
??_C@_0CP@CMJEDJDL@AI_CITY_SPECIALIZATION_GENERAL_E@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_GENERAL_ECONOMIC_WEIGHT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JPOCDPNA@AI_CITY_SPECIALIZATION_REEVALUAT@
CONST	SEGMENT
??_C@_0CN@JPOCDPNA@AI_CITY_SPECIALIZATION_REEVALUAT@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_REEVALUATION_INTERVAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OOOEEHOO@AI_CITY_SPECIALIZATION_EARLIEST_@
CONST	SEGMENT
??_C@_0CF@OOOEEHOO@AI_CITY_SPECIALIZATION_EARLIEST_@ DB 'AI_CITY_SPECIALI'
	DB	'ZATION_EARLIEST_TURN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@ECHLHNGC@AI_MILITARY_CAPTURING_ORIGINAL_C@
CONST	SEGMENT
??_C@_0CH@ECHLHNGC@AI_MILITARY_CAPTURING_ORIGINAL_C@ DB 'AI_MILITARY_CAPT'
	DB	'URING_ORIGINAL_CAPITAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LGLONFKM@AI_MILITARY_RECAPTURING_OWN_CITY@
CONST	SEGMENT
??_C@_0CB@LGLONFKM@AI_MILITARY_RECAPTURING_OWN_CITY@ DB 'AI_MILITARY_RECA'
	DB	'PTURING_OWN_CITY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OJDONADJ@AI_MILITARY_IGNORE_BAD_ODDS?$AA@
CONST	SEGMENT
??_C@_0BM@OJDONADJ@AI_MILITARY_IGNORE_BAD_ODDS?$AA@ DB 'AI_MILITARY_IGNOR'
	DB	'E_BAD_ODDS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@MJIOABEM@AI_MILITARY_BARBARIANS_FOR_MINOR@
CONST	SEGMENT
??_C@_0CI@MJIOABEM@AI_MILITARY_BARBARIANS_FOR_MINOR@ DB 'AI_MILITARY_BARB'
	DB	'ARIANS_FOR_MINOR_THREAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JHHMADDN@AI_MILITARY_CITY_THREAT_WEIGHT_C@
CONST	SEGMENT
??_C@_0CH@JHHMADDN@AI_MILITARY_CITY_THREAT_WEIGHT_C@ DB 'AI_MILITARY_CITY'
	DB	'_THREAT_WEIGHT_CAPITAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LIJLIPEB@AI_STRATEGY_MILITARY_RESERVE_PER@
CONST	SEGMENT
??_C@_0CI@LIJLIPEB@AI_STRATEGY_MILITARY_RESERVE_PER@ DB 'AI_STRATEGY_MILI'
	DB	'TARY_RESERVE_PERCENTAGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LBJHCEOK@AI_STRATEGY_DEFEND_MY_LANDS_BASE@
CONST	SEGMENT
??_C@_0CH@LBJHCEOK@AI_STRATEGY_DEFEND_MY_LANDS_BASE@ DB 'AI_STRATEGY_DEFE'
	DB	'ND_MY_LANDS_BASE_UNITS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@MAIHLIBL@AI_MILITARY_THREAT_WEIGHT_CRITIC@
CONST	SEGMENT
??_C@_0CD@MAIHLIBL@AI_MILITARY_THREAT_WEIGHT_CRITIC@ DB 'AI_MILITARY_THRE'
	DB	'AT_WEIGHT_CRITICAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DIMJKMHM@AI_MILITARY_THREAT_WEIGHT_SEVERE@
CONST	SEGMENT
??_C@_0CB@DIMJKMHM@AI_MILITARY_THREAT_WEIGHT_SEVERE@ DB 'AI_MILITARY_THRE'
	DB	'AT_WEIGHT_SEVERE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MMNMKFGH@AI_MILITARY_THREAT_WEIGHT_MAJOR?$AA@
CONST	SEGMENT
??_C@_0CA@MMNMKFGH@AI_MILITARY_THREAT_WEIGHT_MAJOR?$AA@ DB 'AI_MILITARY_T'
	DB	'HREAT_WEIGHT_MAJOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HDMOHJPB@AI_MILITARY_THREAT_WEIGHT_MINOR?$AA@
CONST	SEGMENT
??_C@_0CA@HDMOHJPB@AI_MILITARY_THREAT_WEIGHT_MINOR?$AA@ DB 'AI_MILITARY_T'
	DB	'HREAT_WEIGHT_MINOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IMMCEDME@BUILDER_TASKING_BASELINE_ADDS_CU@
CONST	SEGMENT
??_C@_0CG@IMMCEDME@BUILDER_TASKING_BASELINE_ADDS_CU@ DB 'BUILDER_TASKING_'
	DB	'BASELINE_ADDS_CULTURE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IEAKJFHO@BUILDER_TASKING_BASELINE_SCRUB_F@
CONST	SEGMENT
??_C@_0CH@IEAKJFHO@BUILDER_TASKING_BASELINE_SCRUB_F@ DB 'BUILDER_TASKING_'
	DB	'BASELINE_SCRUB_FALLOUT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OLJBLMNP@BUILDER_TASKING_BASELINE_REPAIR?$AA@
CONST	SEGMENT
??_C@_0CA@OLJBLMNP@BUILDER_TASKING_BASELINE_REPAIR?$AA@ DB 'BUILDER_TASKI'
	DB	'NG_BASELINE_REPAIR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HNBLODOE@BUILDER_TASKING_BASELINE_BUILD_R@
CONST	SEGMENT
??_C@_0CG@HNBLODOE@BUILDER_TASKING_BASELINE_BUILD_R@ DB 'BUILDER_TASKING_'
	DB	'BASELINE_BUILD_ROUTES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@LBDGPFEF@BUILDER_TASKING_BASELINE_BUILD_R@
CONST	SEGMENT
??_C@_0DF@LBDGPFEF@BUILDER_TASKING_BASELINE_BUILD_R@ DB 'BUILDER_TASKING_'
	DB	'BASELINE_BUILD_RESOURCE_IMPROVEMENTS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JDOMCDLP@BUILDER_TASKING_BASELINE_BUILD_I@
CONST	SEGMENT
??_C@_0CM@JDOMCDLP@BUILDER_TASKING_BASELINE_BUILD_I@ DB 'BUILDER_TASKING_'
	DB	'BASELINE_BUILD_IMPROVEMENTS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@NIDGENCM@BUILDER_TASKING_DIRECTIVES_TO_EV@
CONST	SEGMENT
??_C@_0CH@NIDGENCM@BUILDER_TASKING_DIRECTIVES_TO_EV@ DB 'BUILDER_TASKING_'
	DB	'DIRECTIVES_TO_EVALUATE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PGHIHEDI@BUILDER_TASKING_BUILD_ROUTE_TEND@
CONST	SEGMENT
??_C@_0CF@PGHIHEDI@BUILDER_TASKING_BUILD_ROUTE_TEND@ DB 'BUILDER_TASKING_'
	DB	'BUILD_ROUTE_TENDENCY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NGGMHBBH@BUILDER_TASKING_IMPROVE_RESOURCE@
CONST	SEGMENT
??_C@_0CK@NGGMHBBH@BUILDER_TASKING_IMPROVE_RESOURCE@ DB 'BUILDER_TASKING_'
	DB	'IMPROVE_RESOURCE_TENDENCY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@NFIMNIO@BUILDER_TASKING_PLOT_EVAL_MULTIP@
CONST	SEGMENT
??_C@_0DF@NFIMNIO@BUILDER_TASKING_PLOT_EVAL_MULTIP@ DB 'BUILDER_TASKING_P'
	DB	'LOT_EVAL_MULTIPLIER_LUXURY_RESOURCE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DCMDEKFA@BUILDER_TASKING_PLOT_EVAL_MULTIP@
CONST	SEGMENT
??_C@_0CN@DCMDEKFA@BUILDER_TASKING_PLOT_EVAL_MULTIP@ DB 'BUILDER_TASKING_'
	DB	'PLOT_EVAL_MULTIPLIER_CULTURE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NNMHOENH@BUILDER_TASKING_PLOT_EVAL_MULTIP@
CONST	SEGMENT
??_C@_0CN@NNMHOENH@BUILDER_TASKING_PLOT_EVAL_MULTIP@ DB 'BUILDER_TASKING_'
	DB	'PLOT_EVAL_MULTIPLIER_SCIENCE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@IPPBBMDC@BUILDER_TASKING_PLOT_EVAL_MULTIP@
CONST	SEGMENT
??_C@_0CK@IPPBBMDC@BUILDER_TASKING_PLOT_EVAL_MULTIP@ DB 'BUILDER_TASKING_'
	DB	'PLOT_EVAL_MULTIPLIER_GOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@JCJDHOJH@BUILDER_TASKING_PLOT_EVAL_MULTIP@
CONST	SEGMENT
??_C@_0DA@JCJDHOJH@BUILDER_TASKING_PLOT_EVAL_MULTIP@ DB 'BUILDER_TASKING_'
	DB	'PLOT_EVAL_MULTIPLIER_PRODUCTION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@LANHILNL@BUILDER_TASKING_PLOT_EVAL_MULTIP@
CONST	SEGMENT
??_C@_0CK@LANHILNL@BUILDER_TASKING_PLOT_EVAL_MULTIP@ DB 'BUILDER_TASKING_'
	DB	'PLOT_EVAL_MULTIPLIER_FOOD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LHMJDODN@AI_GOLD_PRIORITY_BUYOUT_CITY_STA@
CONST	SEGMENT
??_C@_0CD@LHMJDODN@AI_GOLD_PRIORITY_BUYOUT_CITY_STA@ DB 'AI_GOLD_PRIORITY'
	DB	'_BUYOUT_CITY_STATE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JLIGOAJ@AI_GOLD_PRIORITY_DEFENSIVE_BUILD@
CONST	SEGMENT
??_C@_0CE@JLIGOAJ@AI_GOLD_PRIORITY_DEFENSIVE_BUILD@ DB 'AI_GOLD_PRIORITY_'
	DB	'DEFENSIVE_BUILDING', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BHDGPGBJ@AI_GOLD_PRIORITY_UNIT?$AA@
CONST	SEGMENT
??_C@_0BG@BHDGPGBJ@AI_GOLD_PRIORITY_UNIT?$AA@ DB 'AI_GOLD_PRIORITY_UNIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JFCGHBOF@AI_GOLD_PRIORITY_DIPLOMACY_PER_F@
CONST	SEGMENT
??_C@_0CM@JFCGHBOF@AI_GOLD_PRIORITY_DIPLOMACY_PER_F@ DB 'AI_GOLD_PRIORITY'
	DB	'_DIPLOMACY_PER_FLAVOR_POINT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JHKLILDC@AI_GOLD_PRIORITY_DIPLOMACY_BASE?$AA@
CONST	SEGMENT
??_C@_0CA@JHKLILDC@AI_GOLD_PRIORITY_DIPLOMACY_BASE?$AA@ DB 'AI_GOLD_PRIOR'
	DB	'ITY_DIPLOMACY_BASE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@DLCNKPGJ@AI_GOLD_PRIORITY_UPGRADE_PER_FLA@
CONST	SEGMENT
??_C@_0CK@DLCNKPGJ@AI_GOLD_PRIORITY_UPGRADE_PER_FLA@ DB 'AI_GOLD_PRIORITY'
	DB	'_UPGRADE_PER_FLAVOR_POINT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LDECMLBF@AI_GOLD_PRIORITY_UPGRADE_BASE?$AA@
CONST	SEGMENT
??_C@_0BO@LDECMLBF@AI_GOLD_PRIORITY_UPGRADE_BASE?$AA@ DB 'AI_GOLD_PRIORIT'
	DB	'Y_UPGRADE_BASE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BHDCHEFJ@AI_GOLD_BALANCE_TO_HALVE_PLOT_BU@
CONST	SEGMENT
??_C@_0CK@BHDCHEFJ@AI_GOLD_BALANCE_TO_HALVE_PLOT_BU@ DB 'AI_GOLD_BALANCE_'
	DB	'TO_HALVE_PLOT_BUY_MINIMUM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JFAKMEIF@AI_GOLD_PRIORITY_MINIMUM_PLOT_BU@
CONST	SEGMENT
??_C@_0CI@JFAKMEIF@AI_GOLD_PRIORITY_MINIMUM_PLOT_BU@ DB 'AI_GOLD_PRIORITY'
	DB	'_MINIMUM_PLOT_BUY_VALUE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KAKLDBNJ@AI_PLOT_VALUE_WEAK_DISPUTE?$AA@
CONST	SEGMENT
??_C@_0BL@KAKLDBNJ@AI_PLOT_VALUE_WEAK_DISPUTE?$AA@ DB 'AI_PLOT_VALUE_WEAK'
	DB	'_DISPUTE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DAPIMCGH@AI_PLOT_VALUE_STRONG_DISPUTE?$AA@
CONST	SEGMENT
??_C@_0BN@DAPIMCGH@AI_PLOT_VALUE_STRONG_DISPUTE?$AA@ DB 'AI_PLOT_VALUE_ST'
	DB	'RONG_DISPUTE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CPHHODO@AI_PLOT_VALUE_FIERCE_DISPUTE?$AA@
CONST	SEGMENT
??_C@_0BN@CPHHODO@AI_PLOT_VALUE_FIERCE_DISPUTE?$AA@ DB 'AI_PLOT_VALUE_FIE'
	DB	'RCE_DISPUTE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FMPNDNMP@AI_PLOT_VALUE_DEFICIENT_YIELD_MU@
CONST	SEGMENT
??_C@_0CJ@FMPNDNMP@AI_PLOT_VALUE_DEFICIENT_YIELD_MU@ DB 'AI_PLOT_VALUE_DE'
	DB	'FICIENT_YIELD_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CJGLAFBC@AI_PLOT_VALUE_YIELD_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BP@CJGLAFBC@AI_PLOT_VALUE_YIELD_MULTIPLIER?$AA@ DB 'AI_PLOT_VALUE_'
	DB	'YIELD_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FCHKLDKN@AI_PLOT_VALUE_SPECIALIZATION_MUL@
CONST	SEGMENT
??_C@_0CI@FCHKLDKN@AI_PLOT_VALUE_SPECIALIZATION_MUL@ DB 'AI_PLOT_VALUE_SP'
	DB	'ECIALIZATION_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HNDANNHG@AI_PLOT_VALUE_LUXURY_RESOURCE?$AA@
CONST	SEGMENT
??_C@_0BO@HNDANNHG@AI_PLOT_VALUE_LUXURY_RESOURCE?$AA@ DB 'AI_PLOT_VALUE_L'
	DB	'UXURY_RESOURCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PMILMBIP@AI_PLOT_VALUE_STRATEGIC_RESOURCE@
CONST	SEGMENT
??_C@_0CB@PMILMBIP@AI_PLOT_VALUE_STRATEGIC_RESOURCE@ DB 'AI_PLOT_VALUE_ST'
	DB	'RATEGIC_RESOURCE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JMFLLPMD@AI_BUY_PLOT_TEST_PROBES?$AA@
CONST	SEGMENT
??_C@_0BI@JMFLLPMD@AI_BUY_PLOT_TEST_PROBES?$AA@ DB 'AI_BUY_PLOT_TEST_PROB'
	DB	'ES', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OMPGEHHB@AI_STRATEGY_MINIMUM_SETTLE_FERTI@
CONST	SEGMENT
??_C@_0CF@OMPGEHHB@AI_STRATEGY_MINIMUM_SETTLE_FERTI@ DB 'AI_STRATEGY_MINI'
	DB	'MUM_SETTLE_FERTILITY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IFHMNGOJ@AI_STRATEGY_AREA_IS_FULL_PERCENT@
CONST	SEGMENT
??_C@_0CB@IFHMNGOJ@AI_STRATEGY_AREA_IS_FULL_PERCENT@ DB 'AI_STRATEGY_AREA'
	DB	'_IS_FULL_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CHHLLEMC@AI_STRATEGY_ISLAND_START_COAST_R@
CONST	SEGMENT
??_C@_0CO@CHHLLEMC@AI_STRATEGY_ISLAND_START_COAST_R@ DB 'AI_STRATEGY_ISLA'
	DB	'ND_START_COAST_REVEAL_PERCENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NBFHMEID@AI_STRATEGY_NEED_IMPROVEMENT_CIT@
CONST	SEGMENT
??_C@_0CI@NBFHMEID@AI_STRATEGY_NEED_IMPROVEMENT_CIT@ DB 'AI_STRATEGY_NEED'
	DB	'_IMPROVEMENT_CITY_RATIO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@GMGIACCI@AI_STRATEGY_EARLY_EXPANSION_NUM_@
CONST	SEGMENT
??_C@_0CN@GMGIACCI@AI_STRATEGY_EARLY_EXPANSION_NUM_@ DB 'AI_STRATEGY_EARL'
	DB	'Y_EXPANSION_NUM_CITIES_LIMIT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@PKFMJPH@AI_STRATEGY_EARLY_EXPANSION_NUM_@
CONST	SEGMENT
??_C@_0DH@PKFMJPH@AI_STRATEGY_EARLY_EXPANSION_NUM_@ DB 'AI_STRATEGY_EARLY'
	DB	'_EXPANSION_NUM_UNOWNED_TILES_REQUIRED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PHFEEGOJ@AI_STRATEGY_EARLY_EXPLORATION_WE@
CONST	SEGMENT
??_C@_0DA@PHFEEGOJ@AI_STRATEGY_EARLY_EXPLORATION_WE@ DB 'AI_STRATEGY_EARL'
	DB	'Y_EXPLORATION_WEIGHT_PER_FLAVOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HLDMJJOI@AI_STRATEGY_EARLY_EXPLORATION_EX@
CONST	SEGMENT
??_C@_0DH@HLDMJJOI@AI_STRATEGY_EARLY_EXPLORATION_EX@ DB 'AI_STRATEGY_EARL'
	DB	'Y_EXPLORATION_EXPLORERS_WEIGHT_DIVISOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FOEBLLJN@AI_STRATEGY_EARLY_EXPLORATION_ST@
CONST	SEGMENT
??_C@_0CO@FOEBLLJN@AI_STRATEGY_EARLY_EXPLORATION_ST@ DB 'AI_STRATEGY_EARL'
	DB	'Y_EXPLORATION_STARTING_WEIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BLPPKMLH@AI_GS_SS_TECH_PROGRESS_MOD?$AA@
CONST	SEGMENT
??_C@_0BL@BLPPKMLH@AI_GS_SS_TECH_PROGRESS_MOD?$AA@ DB 'AI_GS_SS_TECH_PROG'
	DB	'RESS_MOD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MEHIMGGP@AI_GS_SS_HAS_APOLLO_PROGRAM?$AA@
CONST	SEGMENT
??_C@_0BM@MEHIMGGP@AI_GS_SS_HAS_APOLLO_PROGRAM?$AA@ DB 'AI_GS_SS_HAS_APOL'
	DB	'LO_PROGRAM', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PLOBEBDG@AI_GS_UN_SECURED_VOTE_MOD?$AA@
CONST	SEGMENT
??_C@_0BK@PLOBEBDG@AI_GS_UN_SECURED_VOTE_MOD?$AA@ DB 'AI_GS_UN_SECURED_VO'
	DB	'TE_MOD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@JKKNIIHP@AI_GRAND_STRATEGY_UN_EACH_MINOR_@
CONST	SEGMENT
??_C@_0DA@JKKNIIHP@AI_GRAND_STRATEGY_UN_EACH_MINOR_@ DB 'AI_GRAND_STRATEG'
	DB	'Y_UN_EACH_MINOR_ATTACKED_WEIGHT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GFEMKHDG@AI_GS_CULTURE_INFLUENTIAL_CIV_MO@
CONST	SEGMENT
??_C@_0CC@GFEMKHDG@AI_GS_CULTURE_INFLUENTIAL_CIV_MO@ DB 'AI_GS_CULTURE_IN'
	DB	'FLUENTIAL_CIV_MOD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BPFLIMCC@AI_GS_CULTURE_TOURISM_AHEAD_WEIG@
CONST	SEGMENT
??_C@_0CD@BPFLIMCC@AI_GS_CULTURE_TOURISM_AHEAD_WEIG@ DB 'AI_GS_CULTURE_TO'
	DB	'URISM_AHEAD_WEIGHT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HLMCNNEN@AI_GS_CULTURE_AHEAD_WEIGHT?$AA@
CONST	SEGMENT
??_C@_0BL@HLMCNNEN@AI_GS_CULTURE_AHEAD_WEIGHT?$AA@ DB 'AI_GS_CULTURE_AHEA'
	DB	'D_WEIGHT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BDIGPPPI@AI_GS_TOURISM_RATIO_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BP@BDIGPPPI@AI_GS_TOURISM_RATIO_MULTIPLIER?$AA@ DB 'AI_GS_TOURISM_'
	DB	'RATIO_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JPMOHGO@AI_GS_CULTURE_RATIO_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BP@JPMOHGO@AI_GS_CULTURE_RATIO_MULTIPLIER?$AA@ DB 'AI_GS_CULTURE_R'
	DB	'ATIO_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@PCCGGDN@AI_GRAND_STRATEGY_CONQUEST_WEIGH@
CONST	SEGMENT
??_C@_0DG@PCCGGDN@AI_GRAND_STRATEGY_CONQUEST_WEIGH@ DB 'AI_GRAND_STRATEGY'
	DB	'_CONQUEST_WEIGHT_PER_MAJOR_CONQUERED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@JDHMNJIF@AI_GRAND_STRATEGY_CONQUEST_WEIGH@
CONST	SEGMENT
??_C@_0DF@JDHMNJIF@AI_GRAND_STRATEGY_CONQUEST_WEIGH@ DB 'AI_GRAND_STRATEG'
	DB	'Y_CONQUEST_WEIGHT_PER_MAJOR_ATTACKED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NJAHCFKB@AI_GRAND_STRATEGY_CONQUEST_WEIGH@
CONST	SEGMENT
??_C@_0DG@NJAHCFKB@AI_GRAND_STRATEGY_CONQUEST_WEIGH@ DB 'AI_GRAND_STRATEG'
	DB	'Y_CONQUEST_WEIGHT_PER_MINOR_CONQUERED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@GAJMKNCF@AI_GRAND_STRATEGY_CONQUEST_WEIGH@
CONST	SEGMENT
??_C@_0DF@GAJMKNCF@AI_GRAND_STRATEGY_CONQUEST_WEIGH@ DB 'AI_GRAND_STRATEG'
	DB	'Y_CONQUEST_WEIGHT_PER_MINOR_ATTACKED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OCHIKJEC@AI_GRAND_STRATEGY_CONQUEST_CRAMP@
CONST	SEGMENT
??_C@_0CK@OCHIKJEC@AI_GRAND_STRATEGY_CONQUEST_CRAMP@ DB 'AI_GRAND_STRATEG'
	DB	'Y_CONQUEST_CRAMPED_WEIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@IAOMELPH@AI_GRAND_STRATEGY_CONQUEST_POWER@
CONST	SEGMENT
??_C@_0DC@IAOMELPH@AI_GRAND_STRATEGY_CONQUEST_POWER@ DB 'AI_GRAND_STRATEG'
	DB	'Y_CONQUEST_POWER_RATIO_MULTIPLIER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@MOHGLHDE@AI_GS_CONQUEST_MILITARY_STRENGTH@
CONST	SEGMENT
??_C@_0CM@MOHGLHDE@AI_GS_CONQUEST_MILITARY_STRENGTH@ DB 'AI_GS_CONQUEST_M'
	DB	'ILITARY_STRENGTH_FIRST_TURN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NAMHPPEP@AI_GRAND_STRATEGY_CONQUEST_AT_WA@
CONST	SEGMENT
??_C@_0CJ@NAMHPPEP@AI_GRAND_STRATEGY_CONQUEST_AT_WA@ DB 'AI_GRAND_STRATEG'
	DB	'Y_CONQUEST_AT_WAR_WEIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DICFAIGP@AI_GRAND_STRATEGY_CONQUEST_NOBOD@
CONST	SEGMENT
??_C@_0CN@DICFAIGP@AI_GRAND_STRATEGY_CONQUEST_NOBOD@ DB 'AI_GRAND_STRATEG'
	DB	'Y_CONQUEST_NOBODY_MET_WEIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@ENGGCOEC@AI_GS_CONQUEST_NOBODY_MET_FIRST_@
CONST	SEGMENT
??_C@_0CF@ENGGCOEC@AI_GS_CONQUEST_NOBODY_MET_FIRST_@ DB 'AI_GS_CONQUEST_N'
	DB	'OBODY_MET_FIRST_TURN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@LBHKCDMH@AI_GRAND_STRATEGY_OTHER_PLAYERS_@
CONST	SEGMENT
??_C@_0CO@LBHKCDMH@AI_GRAND_STRATEGY_OTHER_PLAYERS_@ DB 'AI_GRAND_STRATEG'
	DB	'Y_OTHER_PLAYERS_GS_MULTIPLIER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HKOMEGOL@AI_GRAND_STRATEGY_GUESS_LIKELY_T@
CONST	SEGMENT
??_C@_0CJ@HKOMEGOL@AI_GRAND_STRATEGY_GUESS_LIKELY_T@ DB 'AI_GRAND_STRATEG'
	DB	'Y_GUESS_LIKELY_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BJDBNIPA@AI_GRAND_STRATEGY_GUESS_POSITIVE@
CONST	SEGMENT
??_C@_0CL@BJDBNIPA@AI_GRAND_STRATEGY_GUESS_POSITIVE@ DB 'AI_GRAND_STRATEG'
	DB	'Y_GUESS_POSITIVE_THRESHOLD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DJHMMNME@AI_GRAND_STRATEGY_GUESS_NO_CLUE_@
CONST	SEGMENT
??_C@_0CH@DJHMMNME@AI_GRAND_STRATEGY_GUESS_NO_CLUE_@ DB 'AI_GRAND_STRATEG'
	DB	'Y_GUESS_NO_CLUE_WEIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EIJAGFHG@AI_GRAND_STRATEGY_CURRENT_STRATE@
CONST	SEGMENT
??_C@_0CK@EIJAGFHG@AI_GRAND_STRATEGY_CURRENT_STRATE@ DB 'AI_GRAND_STRATEG'
	DB	'Y_CURRENT_STRATEGY_WEIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JPHCCMJO@AI_GS_RAND_ROLL?$AA@
CONST	SEGMENT
??_C@_0BA@JPHCCMJO@AI_GS_RAND_ROLL?$AA@ DB 'AI_GS_RAND_ROLL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@CKDAPPFM@AI_GRAND_STRATEGY_NUM_TURNS_STRA@
CONST	SEGMENT
??_C@_0DE@CKDAPPFM@AI_GRAND_STRATEGY_NUM_TURNS_STRA@ DB 'AI_GRAND_STRATEG'
	DB	'Y_NUM_TURNS_STRATEGY_MUST_BE_ACTIVE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HDEHHKLF@FLAVOR_EXPANDGROW_COEFFICIENT?$AA@
CONST	SEGMENT
??_C@_0BO@HDEHHKLF@FLAVOR_EXPANDGROW_COEFFICIENT?$AA@ DB 'FLAVOR_EXPANDGR'
	DB	'OW_COEFFICIENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HGMCDCDN@FLAVOR_RANDOMIZATION_RANGE?$AA@
CONST	SEGMENT
??_C@_0BL@HGMCDCDN@FLAVOR_RANDOMIZATION_RANGE?$AA@ DB 'FLAVOR_RANDOMIZATI'
	DB	'ON_RANGE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DAAALACJ@FLAVOR_MAX_VALUE?$AA@
CONST	SEGMENT
??_C@_0BB@DAAALACJ@FLAVOR_MAX_VALUE?$AA@ DB 'FLAVOR_MAX_VALUE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DBAMCKJN@FLAVOR_MIN_VALUE?$AA@
CONST	SEGMENT
??_C@_0BB@DBAMCKJN@FLAVOR_MIN_VALUE?$AA@ DB 'FLAVOR_MIN_VALUE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EPAOOEJO@PERSONALITY_FLAVOR_MIN_VALUE?$AA@
CONST	SEGMENT
??_C@_0BN@EPAOOEJO@PERSONALITY_FLAVOR_MIN_VALUE?$AA@ DB 'PERSONALITY_FLAV'
	DB	'OR_MIN_VALUE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EOACHOCK@PERSONALITY_FLAVOR_MAX_VALUE?$AA@
CONST	SEGMENT
??_C@_0BN@EOACHOCK@PERSONALITY_FLAVOR_MAX_VALUE?$AA@ DB 'PERSONALITY_FLAV'
	DB	'OR_MAX_VALUE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EAICOGBJ@DEFAULT_FLAVOR_VALUE?$AA@
CONST	SEGMENT
??_C@_0BF@EAICOGBJ@DEFAULT_FLAVOR_VALUE?$AA@ DB 'DEFAULT_FLAVOR_VALUE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LAACNNNL@AI_VALUE_OF_YIELD_SCIENCE?$AA@
CONST	SEGMENT
??_C@_0BK@LAACNNNL@AI_VALUE_OF_YIELD_SCIENCE?$AA@ DB 'AI_VALUE_OF_YIELD_S'
	DB	'CIENCE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HOADDMBL@AI_VALUE_OF_YIELD_PRODUCTION?$AA@
CONST	SEGMENT
??_C@_0BN@HOADDMBL@AI_VALUE_OF_YIELD_PRODUCTION?$AA@ DB 'AI_VALUE_OF_YIEL'
	DB	'D_PRODUCTION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JPLDDJCD@AI_VALUE_OF_YIELD_GOLD?$AA@
CONST	SEGMENT
??_C@_0BH@JPLDDJCD@AI_VALUE_OF_YIELD_GOLD?$AA@ DB 'AI_VALUE_OF_YIELD_GOLD'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BNOBOLDM@TECH_PRIORITY_MAYA_CALENDAR_BONU@
CONST	SEGMENT
??_C@_0CC@BNOBOLDM@TECH_PRIORITY_MAYA_CALENDAR_BONU@ DB 'TECH_PRIORITY_MA'
	DB	'YA_CALENDAR_BONUS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HHOBDBKO@TECH_PRIORITY_UNIQUE_ITEM?$AA@
CONST	SEGMENT
??_C@_0BK@HHOBDBKO@TECH_PRIORITY_UNIQUE_ITEM?$AA@ DB 'TECH_PRIORITY_UNIQU'
	DB	'E_ITEM', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HCPEDAP@TECH_WEIGHT_PROPAGATION_LEVELS?$AA@
CONST	SEGMENT
??_C@_0BP@HCPEDAP@TECH_WEIGHT_PROPAGATION_LEVELS?$AA@ DB 'TECH_WEIGHT_PRO'
	DB	'PAGATION_LEVELS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BIFMEGPJ@TECH_WEIGHT_PROPAGATION_PERCENT?$AA@
CONST	SEGMENT
??_C@_0CA@BIFMEGPJ@TECH_WEIGHT_PROPAGATION_PERCENT?$AA@ DB 'TECH_WEIGHT_P'
	DB	'ROPAGATION_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MEMIHBMJ@POLICY_WEIGHT_PERCENT_DROP_NEW_B@
CONST	SEGMENT
??_C@_0CG@MEMIHBMJ@POLICY_WEIGHT_PERCENT_DROP_NEW_B@ DB 'POLICY_WEIGHT_PE'
	DB	'RCENT_DROP_NEW_BRANCH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HIOFDMNL@POLICY_WEIGHT_PROPAGATION_LEVELS@
CONST	SEGMENT
??_C@_0CB@HIOFDMNL@POLICY_WEIGHT_PROPAGATION_LEVELS@ DB 'POLICY_WEIGHT_PR'
	DB	'OPAGATION_LEVELS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JJJNJKEL@POLICY_WEIGHT_PROPAGATION_PERCEN@
CONST	SEGMENT
??_C@_0CC@JJJNJKEL@POLICY_WEIGHT_PROPAGATION_PERCEN@ DB 'POLICY_WEIGHT_PR'
	DB	'OPAGATION_PERCENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EHPMHLLG@AI_SHOULDNT_MANAGE_PLOT_ASSIGNME@
CONST	SEGMENT
??_C@_0CD@EHPMHLLG@AI_SHOULDNT_MANAGE_PLOT_ASSIGNME@ DB 'AI_SHOULDNT_MANA'
	DB	'GE_PLOT_ASSIGNMENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EEEGBGEH@AI_CAN_DISBAND_UNITS?$AA@
CONST	SEGMENT
??_C@_0BF@EEEGBGEH@AI_CAN_DISBAND_UNITS?$AA@ DB 'AI_CAN_DISBAND_UNITS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NAJMKJJB@INITIAL_AI_CITY_PRODUCTION?$AA@
CONST	SEGMENT
??_C@_0BL@NAJMKJJB@INITIAL_AI_CITY_PRODUCTION?$AA@ DB 'INITIAL_AI_CITY_PR'
	DB	'ODUCTION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@ENMFICBA@AI_ATTEMPT_RUSH_OVER_X_TURNS_TO_@
CONST	SEGMENT
??_C@_0CG@ENMFICBA@AI_ATTEMPT_RUSH_OVER_X_TURNS_TO_@ DB 'AI_ATTEMPT_RUSH_'
	DB	'OVER_X_TURNS_TO_BUILD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HKJPAJAD@NEW_SCORE_BELIEF_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BM@HKJPAJAD@NEW_SCORE_BELIEF_MULTIPLIER?$AA@ DB 'NEW_SCORE_BELIEF_'
	DB	'MULTIPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HILAFNMD@NEW_SCORE_GREAT_WORK_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0CA@HILAFNMD@NEW_SCORE_GREAT_WORK_MULTIPLIER?$AA@ DB 'NEW_SCORE_GRE'
	DB	'AT_WORK_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IHBNJJI@NEW_SCORE_POLICY_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BM@IHBNJJI@NEW_SCORE_POLICY_MULTIPLIER?$AA@ DB 'NEW_SCORE_POLICY_M'
	DB	'ULTIPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BCHJFJFP@NEW_SCORE_FUTURE_TECH_MULTIPLIER@
CONST	SEGMENT
??_C@_0CB@BCHJFJFP@NEW_SCORE_FUTURE_TECH_MULTIPLIER@ DB 'NEW_SCORE_FUTURE'
	DB	'_TECH_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OHCPFPBP@NEW_SCORE_TECH_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BK@OHCPFPBP@NEW_SCORE_TECH_MULTIPLIER?$AA@ DB 'NEW_SCORE_TECH_MULT'
	DB	'IPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@INPKHAIG@NEW_SCORE_WONDER_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BM@INPKHAIG@NEW_SCORE_WONDER_MULTIPLIER?$AA@ DB 'NEW_SCORE_WONDER_'
	DB	'MULTIPLIER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MOBPPEHE@NEW_SCORE_POPULATION_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0CA@MOBPPEHE@NEW_SCORE_POPULATION_MULTIPLIER?$AA@ DB 'NEW_SCORE_POP'
	DB	'ULATION_MULTIPLIER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NDOKNJOD@NEW_SCORE_CITY_MULTIPLIER?$AA@
CONST	SEGMENT
??_C@_0BK@NDOKNJOD@NEW_SCORE_CITY_MULTIPLIER?$AA@ DB 'NEW_SCORE_CITY_MULT'
	DB	'IPLIER', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?cacheGlobals@CvGlobals@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?cacheGlobals@CvGlobals@@QAEXXZ PROC			; CvGlobals::cacheGlobals, COMDAT
; _this$ = ecx

; 4953 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4954 : 
; 4955 : #ifdef AUI_DIPLOMACY_AI_LEADERHEAD_DEALS_IN_MULTIPLAYER
; 4956 : 	GD_INT_CACHE(MULTIPLAYER_AI_DIPLOMACY_NOTIFICATIONS_ONLY_SIMULTANEOUS);
; 4957 : #endif
; 4958 : #ifdef AUI_UNIT_PRODUCTION_AI_LUA_FLAVOR_WEIGHTS
; 4959 : 	GD_INT_CACHE(DISABLE_UNIT_AI_FLAVOR_LUA_MODDING);
; 4960 : #endif
; 4961 : #ifdef AUI_BUILDING_PRODUCTION_AI_LUA_FLAVOR_WEIGHTS
; 4962 : 	GD_INT_CACHE(DISABLE_BUILDING_AI_FLAVOR_LUA_MODDING);
; 4963 : #endif
; 4964 : #ifdef AUI_PROJECT_PRODUCTION_AI_LUA_FLAVOR_WEIGHTS
; 4965 : 	GD_INT_CACHE(DISABLE_PROJECT_AI_FLAVOR_LUA_MODDING);
; 4966 : #endif
; 4967 : #ifdef AUI_PROCESS_PRODUCTION_AI_LUA_FLAVOR_WEIGHTS
; 4968 : 	GD_INT_CACHE(DISABLE_PROCESS_AI_FLAVOR_LUA_MODDING);
; 4969 : #endif
; 4970 : #ifdef NQM_OPTIONAL_SCORING_TWEAKS
; 4971 : 	GD_INT_CACHE(NEW_SCORE_CITY_MULTIPLIER);

	push	1
	push	OFFSET ??_C@_0BK@NDOKNJOD@NEW_SCORE_CITY_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1776], eax

; 4972 : 	GD_INT_CACHE(NEW_SCORE_POPULATION_MULTIPLIER);

	push	1
	push	OFFSET ??_C@_0CA@MOBPPEHE@NEW_SCORE_POPULATION_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1780], eax

; 4973 : 	GD_INT_CACHE(NEW_SCORE_WONDER_MULTIPLIER);

	push	1
	push	OFFSET ??_C@_0BM@INPKHAIG@NEW_SCORE_WONDER_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1784], eax

; 4974 : 	GD_INT_CACHE(NEW_SCORE_TECH_MULTIPLIER);

	push	1
	push	OFFSET ??_C@_0BK@OHCPFPBP@NEW_SCORE_TECH_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1788], eax

; 4975 : 	GD_INT_CACHE(NEW_SCORE_FUTURE_TECH_MULTIPLIER);

	push	1
	push	OFFSET ??_C@_0CB@BCHJFJFP@NEW_SCORE_FUTURE_TECH_MULTIPLIER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1792], eax

; 4976 : 	GD_INT_CACHE(NEW_SCORE_POLICY_MULTIPLIER);

	push	1
	push	OFFSET ??_C@_0BM@IHBNJJI@NEW_SCORE_POLICY_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1796], eax

; 4977 : 	GD_INT_CACHE(NEW_SCORE_GREAT_WORK_MULTIPLIER);

	push	1
	push	OFFSET ??_C@_0CA@HILAFNMD@NEW_SCORE_GREAT_WORK_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1800], eax

; 4978 : 	GD_INT_CACHE(NEW_SCORE_BELIEF_MULTIPLIER);

	push	1
	push	OFFSET ??_C@_0BM@HKJPAJAD@NEW_SCORE_BELIEF_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1804], eax

; 4979 : #endif
; 4980 : 	// -- ints --
; 4981 : 
; 4982 : 	m_iAI_ATTEMPT_RUSH_OVER_X_TURNS_TO_BUILD = getDefineINT("AI_ATTEMPT_RUSH_OVER_X_TURNS_TO_BUILD");

	push	1
	push	OFFSET ??_C@_0CG@ENMFICBA@AI_ATTEMPT_RUSH_OVER_X_TURNS_TO_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1808], eax

; 4983 : 	m_iINITIAL_AI_CITY_PRODUCTION = getDefineINT("INITIAL_AI_CITY_PRODUCTION");

	push	1
	push	OFFSET ??_C@_0BL@NAJMKJJB@INITIAL_AI_CITY_PRODUCTION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1812], eax

; 4984 : 	m_iAI_CAN_DISBAND_UNITS = getDefineINT("AI_CAN_DISBAND_UNITS");

	push	1
	push	OFFSET ??_C@_0BF@EEEGBGEH@AI_CAN_DISBAND_UNITS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1816], eax

; 4985 : 	m_iAI_SHOULDNT_MANAGE_PLOT_ASSIGNMENT = getDefineINT("AI_SHOULDNT_MANAGE_PLOT_ASSIGNMENT");

	push	1
	push	OFFSET ??_C@_0CD@EHPMHLLG@AI_SHOULDNT_MANAGE_PLOT_ASSIGNME@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1820], eax

; 4986 : 	m_iPOLICY_WEIGHT_PROPAGATION_PERCENT = getDefineINT("POLICY_WEIGHT_PROPAGATION_PERCENT");

	push	1
	push	OFFSET ??_C@_0CC@JJJNJKEL@POLICY_WEIGHT_PROPAGATION_PERCEN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1824], eax

; 4987 : 	m_iPOLICY_WEIGHT_PROPAGATION_LEVELS = getDefineINT("POLICY_WEIGHT_PROPAGATION_LEVELS");

	push	1
	push	OFFSET ??_C@_0CB@HIOFDMNL@POLICY_WEIGHT_PROPAGATION_LEVELS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1828], eax

; 4988 : 	m_iPOLICY_WEIGHT_PERCENT_DROP_NEW_BRANCH = getDefineINT("POLICY_WEIGHT_PERCENT_DROP_NEW_BRANCH");

	push	1
	push	OFFSET ??_C@_0CG@MEMIHBMJ@POLICY_WEIGHT_PERCENT_DROP_NEW_B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1832], eax

; 4989 : 	m_iTECH_WEIGHT_PROPAGATION_PERCENT = getDefineINT("TECH_WEIGHT_PROPAGATION_PERCENT");

	push	1
	push	OFFSET ??_C@_0CA@BIFMEGPJ@TECH_WEIGHT_PROPAGATION_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1836], eax

; 4990 : 	m_iTECH_WEIGHT_PROPAGATION_LEVELS = getDefineINT("TECH_WEIGHT_PROPAGATION_LEVELS");

	push	1
	push	OFFSET ??_C@_0BP@HCPEDAP@TECH_WEIGHT_PROPAGATION_LEVELS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1840], eax

; 4991 : 	m_iTECH_PRIORITY_UNIQUE_ITEM = getDefineINT("TECH_PRIORITY_UNIQUE_ITEM");

	push	1
	push	OFFSET ??_C@_0BK@HHOBDBKO@TECH_PRIORITY_UNIQUE_ITEM?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1844], eax

; 4992 : 	m_iTECH_PRIORITY_MAYA_CALENDAR_BONUS = getDefineINT("TECH_PRIORITY_MAYA_CALENDAR_BONUS");

	push	1
	push	OFFSET ??_C@_0CC@BNOBOLDM@TECH_PRIORITY_MAYA_CALENDAR_BONU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1848], eax

; 4993 : 	m_iAI_VALUE_OF_YIELD_GOLD = getDefineINT("AI_VALUE_OF_YIELD_GOLD");

	push	1
	push	OFFSET ??_C@_0BH@JPLDDJCD@AI_VALUE_OF_YIELD_GOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1852], eax

; 4994 : 	m_iAI_VALUE_OF_YIELD_PRODUCTION = getDefineINT("AI_VALUE_OF_YIELD_PRODUCTION");

	push	1
	push	OFFSET ??_C@_0BN@HOADDMBL@AI_VALUE_OF_YIELD_PRODUCTION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1856], eax

; 4995 : 	m_iAI_VALUE_OF_YIELD_SCIENCE = getDefineINT("AI_VALUE_OF_YIELD_SCIENCE");

	push	1
	push	OFFSET ??_C@_0BK@LAACNNNL@AI_VALUE_OF_YIELD_SCIENCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1860], eax

; 4996 : 	m_iDEFAULT_FLAVOR_VALUE = getDefineINT("DEFAULT_FLAVOR_VALUE");

	push	1
	push	OFFSET ??_C@_0BF@EAICOGBJ@DEFAULT_FLAVOR_VALUE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1864], eax

; 4997 : 	m_iPERSONALITY_FLAVOR_MAX_VALUE = getDefineINT("PERSONALITY_FLAVOR_MAX_VALUE");

	push	1
	push	OFFSET ??_C@_0BN@EOACHOCK@PERSONALITY_FLAVOR_MAX_VALUE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1868], eax

; 4998 : 	m_iPERSONALITY_FLAVOR_MIN_VALUE = getDefineINT("PERSONALITY_FLAVOR_MIN_VALUE");

	push	1
	push	OFFSET ??_C@_0BN@EPAOOEJO@PERSONALITY_FLAVOR_MIN_VALUE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1872], eax

; 4999 : 	m_iFLAVOR_MIN_VALUE = getDefineINT("FLAVOR_MIN_VALUE");

	push	1
	push	OFFSET ??_C@_0BB@DBAMCKJN@FLAVOR_MIN_VALUE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1876], eax

; 5000 : 	m_iFLAVOR_MAX_VALUE = getDefineINT("FLAVOR_MAX_VALUE");

	push	1
	push	OFFSET ??_C@_0BB@DAAALACJ@FLAVOR_MAX_VALUE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1880], eax

; 5001 : 	m_iFLAVOR_RANDOMIZATION_RANGE = getDefineINT("FLAVOR_RANDOMIZATION_RANGE");

	push	1
	push	OFFSET ??_C@_0BL@HGMCDCDN@FLAVOR_RANDOMIZATION_RANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1884], eax

; 5002 : 	m_iFLAVOR_EXPANDGROW_COEFFICIENT = getDefineINT("FLAVOR_EXPANDGROW_COEFFICIENT");

	push	1
	push	OFFSET ??_C@_0BO@HDEHHKLF@FLAVOR_EXPANDGROW_COEFFICIENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1888], eax

; 5003 : 	m_iAI_GRAND_STRATEGY_NUM_TURNS_STRATEGY_MUST_BE_ACTIVE = getDefineINT("AI_GRAND_STRATEGY_NUM_TURNS_STRATEGY_MUST_BE_ACTIVE");

	push	1
	push	OFFSET ??_C@_0DE@CKDAPPFM@AI_GRAND_STRATEGY_NUM_TURNS_STRA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1892], eax

; 5004 : 	m_iAI_GS_RAND_ROLL = getDefineINT("AI_GS_RAND_ROLL");

	push	1
	push	OFFSET ??_C@_0BA@JPHCCMJO@AI_GS_RAND_ROLL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1896], eax

; 5005 : 	m_iAI_GRAND_STRATEGY_CURRENT_STRATEGY_WEIGHT = getDefineINT("AI_GRAND_STRATEGY_CURRENT_STRATEGY_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CK@EIJAGFHG@AI_GRAND_STRATEGY_CURRENT_STRATE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1900], eax

; 5006 : 	m_iAI_GRAND_STRATEGY_GUESS_NO_CLUE_WEIGHT = getDefineINT("AI_GRAND_STRATEGY_GUESS_NO_CLUE_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CH@DJHMMNME@AI_GRAND_STRATEGY_GUESS_NO_CLUE_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1904], eax

; 5007 : 	m_iAI_GRAND_STRATEGY_GUESS_POSITIVE_THRESHOLD = getDefineINT("AI_GRAND_STRATEGY_GUESS_POSITIVE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CL@BJDBNIPA@AI_GRAND_STRATEGY_GUESS_POSITIVE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1908], eax

; 5008 : 	m_iAI_GRAND_STRATEGY_GUESS_LIKELY_THRESHOLD = getDefineINT("AI_GRAND_STRATEGY_GUESS_LIKELY_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CJ@HKOMEGOL@AI_GRAND_STRATEGY_GUESS_LIKELY_T@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1912], eax

; 5009 : 	m_iAI_GRAND_STRATEGY_OTHER_PLAYERS_GS_MULTIPLIER = getDefineINT("AI_GRAND_STRATEGY_OTHER_PLAYERS_GS_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CO@LBHKCDMH@AI_GRAND_STRATEGY_OTHER_PLAYERS_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1916], eax

; 5010 : 	m_iAI_GS_CONQUEST_NOBODY_MET_FIRST_TURN = getDefineINT("AI_GS_CONQUEST_NOBODY_MET_FIRST_TURN");

	push	1
	push	OFFSET ??_C@_0CF@ENGGCOEC@AI_GS_CONQUEST_NOBODY_MET_FIRST_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1920], eax

; 5011 : 	m_iAI_GRAND_STRATEGY_CONQUEST_NOBODY_MET_WEIGHT = getDefineINT("AI_GRAND_STRATEGY_CONQUEST_NOBODY_MET_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CN@DICFAIGP@AI_GRAND_STRATEGY_CONQUEST_NOBOD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1924], eax

; 5012 : 	m_iAI_GRAND_STRATEGY_CONQUEST_AT_WAR_WEIGHT = getDefineINT("AI_GRAND_STRATEGY_CONQUEST_AT_WAR_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CJ@NAMHPPEP@AI_GRAND_STRATEGY_CONQUEST_AT_WA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1928], eax

; 5013 : 	m_iAI_GS_CONQUEST_MILITARY_STRENGTH_FIRST_TURN = getDefineINT("AI_GS_CONQUEST_MILITARY_STRENGTH_FIRST_TURN");

	push	1
	push	OFFSET ??_C@_0CM@MOHGLHDE@AI_GS_CONQUEST_MILITARY_STRENGTH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1932], eax

; 5014 : 	m_iAI_GRAND_STRATEGY_CONQUEST_POWER_RATIO_MULTIPLIER = getDefineINT("AI_GRAND_STRATEGY_CONQUEST_POWER_RATIO_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0DC@IAOMELPH@AI_GRAND_STRATEGY_CONQUEST_POWER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1936], eax

; 5015 : 	m_iAI_GRAND_STRATEGY_CONQUEST_CRAMPED_WEIGHT = getDefineINT("AI_GRAND_STRATEGY_CONQUEST_CRAMPED_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CK@OCHIKJEC@AI_GRAND_STRATEGY_CONQUEST_CRAMP@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1940], eax

; 5016 : 	m_iAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_ATTACKED = getDefineINT("AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_ATTACKED");

	push	1
	push	OFFSET ??_C@_0DF@GAJMKNCF@AI_GRAND_STRATEGY_CONQUEST_WEIGH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1944], eax

; 5017 : 	m_iAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_CONQUERED = getDefineINT("AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_CONQUERED");

	push	1
	push	OFFSET ??_C@_0DG@NJAHCFKB@AI_GRAND_STRATEGY_CONQUEST_WEIGH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1948], eax

; 5018 : 	m_iAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_ATTACKED = getDefineINT("AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_ATTACKED");

	push	1
	push	OFFSET ??_C@_0DF@JDHMNJIF@AI_GRAND_STRATEGY_CONQUEST_WEIGH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1952], eax

; 5019 : 	m_iAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_CONQUERED = getDefineINT("AI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_CONQUERED");

	push	1
	push	OFFSET ??_C@_0DG@PCCGGDN@AI_GRAND_STRATEGY_CONQUEST_WEIGH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1956], eax

; 5020 : 	m_iAI_GS_CULTURE_RATIO_MULTIPLIER = getDefineINT("AI_GS_CULTURE_RATIO_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BP@JPMOHGO@AI_GS_CULTURE_RATIO_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1960], eax

; 5021 : 	m_iAI_GS_TOURISM_RATIO_MULTIPLIER = getDefineINT("AI_GS_TOURISM_RATIO_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BP@BDIGPPPI@AI_GS_TOURISM_RATIO_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1964], eax

; 5022 : 	m_iAI_GS_CULTURE_AHEAD_WEIGHT = getDefineINT("AI_GS_CULTURE_AHEAD_WEIGHT");

	push	1
	push	OFFSET ??_C@_0BL@HLMCNNEN@AI_GS_CULTURE_AHEAD_WEIGHT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1968], eax

; 5023 : 	m_iAI_GS_CULTURE_TOURISM_AHEAD_WEIGHT = getDefineINT("AI_GS_CULTURE_TOURISM_AHEAD_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CD@BPFLIMCC@AI_GS_CULTURE_TOURISM_AHEAD_WEIG@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1972], eax

; 5024 : 	m_iAI_GS_CULTURE_INFLUENTIAL_CIV_MOD = getDefineINT("AI_GS_CULTURE_INFLUENTIAL_CIV_MOD");

	push	1
	push	OFFSET ??_C@_0CC@GFEMKHDG@AI_GS_CULTURE_INFLUENTIAL_CIV_MO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1976], eax

; 5025 : 	m_iAI_GRAND_STRATEGY_UN_EACH_MINOR_ATTACKED_WEIGHT = getDefineINT("AI_GRAND_STRATEGY_UN_EACH_MINOR_ATTACKED_WEIGHT");

	push	1
	push	OFFSET ??_C@_0DA@JKKNIIHP@AI_GRAND_STRATEGY_UN_EACH_MINOR_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1980], eax

; 5026 : 	m_iAI_GS_UN_SECURED_VOTE_MOD = getDefineINT("AI_GS_UN_SECURED_VOTE_MOD");

	push	1
	push	OFFSET ??_C@_0BK@PLOBEBDG@AI_GS_UN_SECURED_VOTE_MOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1984], eax

; 5027 : 	m_iAI_GS_SS_HAS_APOLLO_PROGRAM = getDefineINT("AI_GS_SS_HAS_APOLLO_PROGRAM");

	push	1
	push	OFFSET ??_C@_0BM@MEHIMGGP@AI_GS_SS_HAS_APOLLO_PROGRAM?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1988], eax

; 5028 : 	m_iAI_GS_SS_TECH_PROGRESS_MOD = getDefineINT("AI_GS_SS_TECH_PROGRESS_MOD");

	push	1
	push	OFFSET ??_C@_0BL@BLPPKMLH@AI_GS_SS_TECH_PROGRESS_MOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1992], eax

; 5029 : 	m_iAI_STRATEGY_EARLY_EXPLORATION_STARTING_WEIGHT = getDefineINT("AI_STRATEGY_EARLY_EXPLORATION_STARTING_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CO@FOEBLLJN@AI_STRATEGY_EARLY_EXPLORATION_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1996], eax

; 5030 : 	m_iAI_STRATEGY_EARLY_EXPLORATION_EXPLORERS_WEIGHT_DIVISOR = getDefineINT("AI_STRATEGY_EARLY_EXPLORATION_EXPLORERS_WEIGHT_DIVISOR");

	push	1
	push	OFFSET ??_C@_0DH@HLDMJJOI@AI_STRATEGY_EARLY_EXPLORATION_EX@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2000], eax

; 5031 : 	m_iAI_STRATEGY_EARLY_EXPLORATION_WEIGHT_PER_FLAVOR = getDefineINT("AI_STRATEGY_EARLY_EXPLORATION_WEIGHT_PER_FLAVOR");

	push	1
	push	OFFSET ??_C@_0DA@PHFEEGOJ@AI_STRATEGY_EARLY_EXPLORATION_WE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2004], eax

; 5032 : 	m_iAI_STRATEGY_EARLY_EXPANSION_NUM_UNOWNED_TILES_REQUIRED = getDefineINT("AI_STRATEGY_EARLY_EXPANSION_NUM_UNOWNED_TILES_REQUIRED");

	push	1
	push	OFFSET ??_C@_0DH@PKFMJPH@AI_STRATEGY_EARLY_EXPANSION_NUM_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2008], eax

; 5033 : 	m_iAI_STRATEGY_EARLY_EXPANSION_NUM_CITIES_LIMIT = getDefineINT("AI_STRATEGY_EARLY_EXPANSION_NUM_CITIES_LIMIT");

	push	1
	push	OFFSET ??_C@_0CN@GMGIACCI@AI_STRATEGY_EARLY_EXPANSION_NUM_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2012], eax

; 5034 : 	m_fAI_STRATEGY_NEED_IMPROVEMENT_CITY_RATIO = getDefineFLOAT("AI_STRATEGY_NEED_IMPROVEMENT_CITY_RATIO");

	push	1
	push	OFFSET ??_C@_0CI@NBFHMEID@AI_STRATEGY_NEED_IMPROVEMENT_CIT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+2016]

; 5035 : 	m_iAI_STRATEGY_ISLAND_START_COAST_REVEAL_PERCENT = getDefineINT("AI_STRATEGY_ISLAND_START_COAST_REVEAL_PERCENT");

	push	1
	push	OFFSET ??_C@_0CO@CHHLLEMC@AI_STRATEGY_ISLAND_START_COAST_R@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2020], eax

; 5036 : 	m_iAI_STRATEGY_AREA_IS_FULL_PERCENT = getDefineINT("AI_STRATEGY_AREA_IS_FULL_PERCENT");

	push	1
	push	OFFSET ??_C@_0CB@IFHMNGOJ@AI_STRATEGY_AREA_IS_FULL_PERCENT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2024], eax

; 5037 : 	m_iAI_STRATEGY_MINIMUM_SETTLE_FERTILITY = getDefineINT("AI_STRATEGY_MINIMUM_SETTLE_FERTILITY");

	push	1
	push	OFFSET ??_C@_0CF@OMPGEHHB@AI_STRATEGY_MINIMUM_SETTLE_FERTI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2028], eax

; 5038 : 	m_iAI_BUY_PLOT_TEST_PROBES = getDefineINT("AI_BUY_PLOT_TEST_PROBES");

	push	1
	push	OFFSET ??_C@_0BI@JMFLLPMD@AI_BUY_PLOT_TEST_PROBES?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2032], eax

; 5039 : 	m_iAI_PLOT_VALUE_STRATEGIC_RESOURCE = getDefineINT("AI_PLOT_VALUE_STRATEGIC_RESOURCE");

	push	1
	push	OFFSET ??_C@_0CB@PMILMBIP@AI_PLOT_VALUE_STRATEGIC_RESOURCE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2036], eax

; 5040 : 	m_iAI_PLOT_VALUE_LUXURY_RESOURCE = getDefineINT("AI_PLOT_VALUE_LUXURY_RESOURCE");

	push	1
	push	OFFSET ??_C@_0BO@HNDANNHG@AI_PLOT_VALUE_LUXURY_RESOURCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2040], eax

; 5041 : 	m_iAI_PLOT_VALUE_SPECIALIZATION_MULTIPLIER = getDefineINT("AI_PLOT_VALUE_SPECIALIZATION_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CI@FCHKLDKN@AI_PLOT_VALUE_SPECIALIZATION_MUL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2044], eax

; 5042 : 	m_iAI_PLOT_VALUE_YIELD_MULTIPLIER = getDefineINT("AI_PLOT_VALUE_YIELD_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BP@CJGLAFBC@AI_PLOT_VALUE_YIELD_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2048], eax

; 5043 : 	m_iAI_PLOT_VALUE_DEFICIENT_YIELD_MULTIPLIER = getDefineINT("AI_PLOT_VALUE_DEFICIENT_YIELD_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CJ@FMPNDNMP@AI_PLOT_VALUE_DEFICIENT_YIELD_MU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2052], eax

; 5044 : 	m_iAI_PLOT_VALUE_FIERCE_DISPUTE = getDefineINT("AI_PLOT_VALUE_FIERCE_DISPUTE");

	push	1
	push	OFFSET ??_C@_0BN@CPHHODO@AI_PLOT_VALUE_FIERCE_DISPUTE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2056], eax

; 5045 : 	m_iAI_PLOT_VALUE_STRONG_DISPUTE = getDefineINT("AI_PLOT_VALUE_STRONG_DISPUTE");

	push	1
	push	OFFSET ??_C@_0BN@DAPIMCGH@AI_PLOT_VALUE_STRONG_DISPUTE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2060], eax

; 5046 : 	m_iAI_PLOT_VALUE_WEAK_DISPUTE = getDefineINT("AI_PLOT_VALUE_WEAK_DISPUTE");

	push	1
	push	OFFSET ??_C@_0BL@KAKLDBNJ@AI_PLOT_VALUE_WEAK_DISPUTE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2064], eax

; 5047 : 	m_iAI_GOLD_PRIORITY_MINIMUM_PLOT_BUY_VALUE = getDefineINT("AI_GOLD_PRIORITY_MINIMUM_PLOT_BUY_VALUE");

	push	1
	push	OFFSET ??_C@_0CI@JFAKMEIF@AI_GOLD_PRIORITY_MINIMUM_PLOT_BU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2068], eax

; 5048 : 	m_iAI_GOLD_BALANCE_TO_HALVE_PLOT_BUY_MINIMUM = getDefineINT("AI_GOLD_BALANCE_TO_HALVE_PLOT_BUY_MINIMUM");

	push	1
	push	OFFSET ??_C@_0CK@BHDCHEFJ@AI_GOLD_BALANCE_TO_HALVE_PLOT_BU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2072], eax

; 5049 : 	m_iAI_GOLD_PRIORITY_UPGRADE_BASE = getDefineINT("AI_GOLD_PRIORITY_UPGRADE_BASE");

	push	1
	push	OFFSET ??_C@_0BO@LDECMLBF@AI_GOLD_PRIORITY_UPGRADE_BASE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2076], eax

; 5050 : 	m_iAI_GOLD_PRIORITY_UPGRADE_PER_FLAVOR_POINT = getDefineINT("AI_GOLD_PRIORITY_UPGRADE_PER_FLAVOR_POINT");

	push	1
	push	OFFSET ??_C@_0CK@DLCNKPGJ@AI_GOLD_PRIORITY_UPGRADE_PER_FLA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2080], eax

; 5051 : 	m_iAI_GOLD_PRIORITY_DIPLOMACY_BASE = getDefineINT("AI_GOLD_PRIORITY_DIPLOMACY_BASE");

	push	1
	push	OFFSET ??_C@_0CA@JHKLILDC@AI_GOLD_PRIORITY_DIPLOMACY_BASE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2084], eax

; 5052 : 	m_iAI_GOLD_PRIORITY_DIPLOMACY_PER_FLAVOR_POINT = getDefineINT("AI_GOLD_PRIORITY_DIPLOMACY_PER_FLAVOR_POINT");

	push	1
	push	OFFSET ??_C@_0CM@JFCGHBOF@AI_GOLD_PRIORITY_DIPLOMACY_PER_F@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2088], eax

; 5053 : 	m_iAI_GOLD_PRIORITY_UNIT = getDefineINT("AI_GOLD_PRIORITY_UNIT");

	push	1
	push	OFFSET ??_C@_0BG@BHDGPGBJ@AI_GOLD_PRIORITY_UNIT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2092], eax

; 5054 : 	m_iAI_GOLD_PRIORITY_DEFENSIVE_BUILDING = getDefineINT("AI_GOLD_PRIORITY_DEFENSIVE_BUILDING");

	push	1
	push	OFFSET ??_C@_0CE@JLIGOAJ@AI_GOLD_PRIORITY_DEFENSIVE_BUILD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2096], eax

; 5055 : 	m_iAI_GOLD_PRIORITY_BUYOUT_CITY_STATE = getDefineINT("AI_GOLD_PRIORITY_BUYOUT_CITY_STATE");

	push	1
	push	OFFSET ??_C@_0CD@LHMJDODN@AI_GOLD_PRIORITY_BUYOUT_CITY_STA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2100], eax

; 5056 : 	m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_FOOD = getDefineINT("BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_FOOD");

	push	1
	push	OFFSET ??_C@_0CK@LANHILNL@BUILDER_TASKING_PLOT_EVAL_MULTIP@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2104], eax

; 5057 : 	m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_PRODUCTION = getDefineINT("BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_PRODUCTION");

	push	1
	push	OFFSET ??_C@_0DA@JCJDHOJH@BUILDER_TASKING_PLOT_EVAL_MULTIP@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2108], eax

; 5058 : 	m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_GOLD = getDefineINT("BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_GOLD");

	push	1
	push	OFFSET ??_C@_0CK@IPPBBMDC@BUILDER_TASKING_PLOT_EVAL_MULTIP@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2112], eax

; 5059 : 	m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_SCIENCE = getDefineINT("BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_SCIENCE");

	push	1
	push	OFFSET ??_C@_0CN@NNMHOENH@BUILDER_TASKING_PLOT_EVAL_MULTIP@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2116], eax

; 5060 : 	m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_CULTURE = getDefineINT("BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_CULTURE");

	push	1
	push	OFFSET ??_C@_0CN@DCMDEKFA@BUILDER_TASKING_PLOT_EVAL_MULTIP@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2120], eax

; 5061 : 	m_iBUILDER_TASKING_PLOT_EVAL_MULTIPLIER_LUXURY_RESOURCE = getDefineINT("BUILDER_TASKING_PLOT_EVAL_MULTIPLIER_LUXURY_RESOURCE");

	push	1
	push	OFFSET ??_C@_0DF@NFIMNIO@BUILDER_TASKING_PLOT_EVAL_MULTIP@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2124], eax

; 5062 : 	m_iBUILDER_TASKING_IMPROVE_RESOURCE_TENDENCY = getDefineINT("BUILDER_TASKING_IMPROVE_RESOURCE_TENDENCY");

	push	1
	push	OFFSET ??_C@_0CK@NGGMHBBH@BUILDER_TASKING_IMPROVE_RESOURCE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2128], eax

; 5063 : 	m_iBUILDER_TASKING_BUILD_ROUTE_TENDENCY = getDefineINT("BUILDER_TASKING_BUILD_ROUTE_TENDENCY");

	push	1
	push	OFFSET ??_C@_0CF@PGHIHEDI@BUILDER_TASKING_BUILD_ROUTE_TEND@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2132], eax

; 5064 : 	m_iBUILDER_TASKING_DIRECTIVES_TO_EVALUATE = getDefineINT("BUILDER_TASKING_DIRECTIVES_TO_EVALUATE");

	push	1
	push	OFFSET ??_C@_0CH@NIDGENCM@BUILDER_TASKING_DIRECTIVES_TO_EV@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2136], eax

; 5065 : 	m_iBUILDER_TASKING_BASELINE_BUILD_IMPROVEMENTS = getDefineINT("BUILDER_TASKING_BASELINE_BUILD_IMPROVEMENTS");

	push	1
	push	OFFSET ??_C@_0CM@JDOMCDLP@BUILDER_TASKING_BASELINE_BUILD_I@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2140], eax

; 5066 : 	m_iBUILDER_TASKING_BASELINE_BUILD_RESOURCE_IMPROVEMENTS = getDefineINT("BUILDER_TASKING_BASELINE_BUILD_RESOURCE_IMPROVEMENTS");

	push	1
	push	OFFSET ??_C@_0DF@LBDGPFEF@BUILDER_TASKING_BASELINE_BUILD_R@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2144], eax

; 5067 : 	m_iBUILDER_TASKING_BASELINE_BUILD_ROUTES = getDefineINT("BUILDER_TASKING_BASELINE_BUILD_ROUTES");

	push	1
	push	OFFSET ??_C@_0CG@HNBLODOE@BUILDER_TASKING_BASELINE_BUILD_R@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2148], eax

; 5068 : 	m_iBUILDER_TASKING_BASELINE_REPAIR = getDefineINT("BUILDER_TASKING_BASELINE_REPAIR");

	push	1
	push	OFFSET ??_C@_0CA@OLJBLMNP@BUILDER_TASKING_BASELINE_REPAIR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2152], eax

; 5069 : 	m_iBUILDER_TASKING_BASELINE_SCRUB_FALLOUT = getDefineINT("BUILDER_TASKING_BASELINE_SCRUB_FALLOUT");

	push	1
	push	OFFSET ??_C@_0CH@IEAKJFHO@BUILDER_TASKING_BASELINE_SCRUB_F@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2156], eax

; 5070 : 	m_iBUILDER_TASKING_BASELINE_ADDS_CULTURE = getDefineINT("BUILDER_TASKING_BASELINE_ADDS_CULTURE");

	push	1
	push	OFFSET ??_C@_0CG@IMMCEDME@BUILDER_TASKING_BASELINE_ADDS_CU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2160], eax

; 5071 : 	m_iAI_MILITARY_THREAT_WEIGHT_MINOR = getDefineINT("AI_MILITARY_THREAT_WEIGHT_MINOR");

	push	1
	push	OFFSET ??_C@_0CA@HDMOHJPB@AI_MILITARY_THREAT_WEIGHT_MINOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2164], eax

; 5072 : 	m_iAI_MILITARY_THREAT_WEIGHT_MAJOR = getDefineINT("AI_MILITARY_THREAT_WEIGHT_MAJOR");

	push	1
	push	OFFSET ??_C@_0CA@MMNMKFGH@AI_MILITARY_THREAT_WEIGHT_MAJOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2168], eax

; 5073 : 	m_iAI_MILITARY_THREAT_WEIGHT_SEVERE = getDefineINT("AI_MILITARY_THREAT_WEIGHT_SEVERE");

	push	1
	push	OFFSET ??_C@_0CB@DIMJKMHM@AI_MILITARY_THREAT_WEIGHT_SEVERE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2172], eax

; 5074 : 	m_iAI_MILITARY_THREAT_WEIGHT_CRITICAL = getDefineINT("AI_MILITARY_THREAT_WEIGHT_CRITICAL");

	push	1
	push	OFFSET ??_C@_0CD@MAIHLIBL@AI_MILITARY_THREAT_WEIGHT_CRITIC@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2176], eax

; 5075 : 	m_iAI_STRATEGY_DEFEND_MY_LANDS_BASE_UNITS = getDefineINT("AI_STRATEGY_DEFEND_MY_LANDS_BASE_UNITS");

	push	1
	push	OFFSET ??_C@_0CH@LBJHCEOK@AI_STRATEGY_DEFEND_MY_LANDS_BASE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2180], eax

; 5076 : 	m_iAI_STRATEGY_MILITARY_RESERVE_PERCENTAGE = getDefineINT("AI_STRATEGY_MILITARY_RESERVE_PERCENTAGE");

	push	1
	push	OFFSET ??_C@_0CI@LIJLIPEB@AI_STRATEGY_MILITARY_RESERVE_PER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2184], eax

; 5077 : 	m_iAI_MILITARY_CITY_THREAT_WEIGHT_CAPITAL = getDefineINT("AI_MILITARY_CITY_THREAT_WEIGHT_CAPITAL");

	push	1
	push	OFFSET ??_C@_0CH@JHHMADDN@AI_MILITARY_CITY_THREAT_WEIGHT_C@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2188], eax

; 5078 : 	m_iAI_MILITARY_BARBARIANS_FOR_MINOR_THREAT = getDefineINT("AI_MILITARY_BARBARIANS_FOR_MINOR_THREAT");

	push	1
	push	OFFSET ??_C@_0CI@MJIOABEM@AI_MILITARY_BARBARIANS_FOR_MINOR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2192], eax

; 5079 : 	m_iAI_MILITARY_IGNORE_BAD_ODDS = getDefineINT("AI_MILITARY_IGNORE_BAD_ODDS");

	push	1
	push	OFFSET ??_C@_0BM@OJDONADJ@AI_MILITARY_IGNORE_BAD_ODDS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2196], eax

; 5080 : 	m_iAI_MILITARY_RECAPTURING_OWN_CITY = getDefineINT("AI_MILITARY_RECAPTURING_OWN_CITY");

	push	1
	push	OFFSET ??_C@_0CB@LGLONFKM@AI_MILITARY_RECAPTURING_OWN_CITY@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2200], eax

; 5081 : 	m_iAI_MILITARY_CAPTURING_ORIGINAL_CAPITAL = getDefineINT("AI_MILITARY_CAPTURING_ORIGINAL_CAPITAL");

	push	1
	push	OFFSET ??_C@_0CH@ECHLHNGC@AI_MILITARY_CAPTURING_ORIGINAL_C@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2204], eax

; 5082 : 	m_iAI_CITY_SPECIALIZATION_EARLIEST_TURN = getDefineINT("AI_CITY_SPECIALIZATION_EARLIEST_TURN");

	push	1
	push	OFFSET ??_C@_0CF@OOOEEHOO@AI_CITY_SPECIALIZATION_EARLIEST_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2208], eax

; 5083 : 	m_iAI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL = getDefineINT("AI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL");

	push	1
	push	OFFSET ??_C@_0CN@JPOCDPNA@AI_CITY_SPECIALIZATION_REEVALUAT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2212], eax

; 5084 : 	m_iAI_CITY_SPECIALIZATION_GENERAL_ECONOMIC_WEIGHT = getDefineINT("AI_CITY_SPECIALIZATION_GENERAL_ECONOMIC_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CP@CMJEDJDL@AI_CITY_SPECIALIZATION_GENERAL_E@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2216], eax

; 5085 : 	m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_FLAVOR_EXPANSION = getDefineINT("AI_CITY_SPECIALIZATION_FOOD_WEIGHT_FLAVOR_EXPANSION");

	push	1
	push	OFFSET ??_C@_0DE@OHHJGNII@AI_CITY_SPECIALIZATION_FOOD_WEIG@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2220], eax

; 5086 : 	m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED = getDefineINT("AI_CITY_SPECIALIZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED");

	push	1
	push	OFFSET ??_C@_0DN@IHJKGOBA@AI_CITY_SPECIALIZATION_FOOD_WEIG@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2224], eax

; 5087 : 	m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_CITIES = getDefineINT("AI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_CITIES");

	push	1
	push	OFFSET ??_C@_0CO@NKNKFGGP@AI_CITY_SPECIALIZATION_FOOD_WEIG@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2228], eax

; 5088 : 	m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_SETTLERS = getDefineINT("AI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_SETTLERS");

	push	1
	push	OFFSET ??_C@_0DA@KCIGIBHD@AI_CITY_SPECIALIZATION_FOOD_WEIG@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2232], eax

; 5089 : 	m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_EARLY_EXPANSION = getDefineINT("AI_CITY_SPECIALIZATION_FOOD_WEIGHT_EARLY_EXPANSION");

	push	1
	push	OFFSET ??_C@_0DD@NIDNKBB@AI_CITY_SPECIALIZATION_FOOD_WEIG@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2236], eax

; 5090 : 	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED = getDefineINT("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED");

	push	1
	push	OFFSET ??_C@_0EF@HHBLGFHI@AI_CITY_SPECIALIZATION_PRODUCTIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2240], eax

; 5091 : 	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH = getDefineINT("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH");

	push	1
	push	OFFSET ??_C@_0DK@LFCJKNAL@AI_CITY_SPECIALIZATION_PRODUCTIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2244], eax

; 5092 : 	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION = getDefineINT("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION");

	push	1
	push	OFFSET ??_C@_0DK@KFLJDMEC@AI_CITY_SPECIALIZATION_PRODUCTIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2248], eax

; 5093 : 	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE = getDefineINT("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE");

	push	1
	push	OFFSET ??_C@_0DI@NHBJLJKK@AI_CITY_SPECIALIZATION_PRODUCTIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2252], eax

; 5094 : 	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL = getDefineINT("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL");

	push	1
	push	OFFSET ??_C@_0EB@EKBHHGJG@AI_CITY_SPECIALIZATION_PRODUCTIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2256], eax

; 5095 : 	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT = getDefineINT("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT");

	push	1
	push	OFFSET ??_C@_0DI@DIMNKLBC@AI_CITY_SPECIALIZATION_PRODUCTIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2260], eax

; 5096 : 	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS = getDefineINT("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS");

	push	1
	push	OFFSET ??_C@_0DK@EHKADAJM@AI_CITY_SPECIALIZATION_PRODUCTIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2264], eax

; 5097 : 	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL = getDefineINT("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL");

	push	1
	push	OFFSET ??_C@_0ED@PDMDENAP@AI_CITY_SPECIALIZATION_PRODUCTIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2268], eax

; 5098 : 	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER = getDefineINT("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER");

	push	1
	push	OFFSET ??_C@_0DH@GJEHOOOP@AI_CITY_SPECIALIZATION_PRODUCTIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2272], eax

; 5099 : 	m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP = getDefineINT("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP");

	push	1
	push	OFFSET ??_C@_0DK@EKNOCOCE@AI_CITY_SPECIALIZATION_PRODUCTIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2276], eax

; 5100 : 	m_iAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE = getDefineINT("AI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE");

	push	1
	push	OFFSET ??_C@_0DH@DOLLFJFC@AI_CITY_SPECIALIZATION_PRODUCTIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2280], eax

; 5101 : 	m_iAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY = getDefineINT("AI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY");

	push	1
	push	OFFSET ??_C@_0DL@PICJMLCD@AI_CITY_SPECIALIZATION_PRODUCTIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2284], eax

; 5102 : 	m_iAI_CITY_SPECIALIZATION_GOLD_WEIGHT_FLAVOR_GOLD = getDefineINT("AI_CITY_SPECIALIZATION_GOLD_WEIGHT_FLAVOR_GOLD");

	push	1
	push	OFFSET ??_C@_0CP@LPBKJGM@AI_CITY_SPECIALIZATION_GOLD_WEIG@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2288], eax

; 5103 : 	m_iAI_CITY_SPECIALIZATION_GOLD_WEIGHT_LAND_DISPUTE = getDefineINT("AI_CITY_SPECIALIZATION_GOLD_WEIGHT_LAND_DISPUTE");

	push	1
	push	OFFSET ??_C@_0DA@IEIIINND@AI_CITY_SPECIALIZATION_GOLD_WEIG@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2292], eax

; 5104 : 	m_iAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE = getDefineINT("AI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE");

	push	1
	push	OFFSET ??_C@_0DF@COACCNLO@AI_CITY_SPECIALIZATION_SCIENCE_W@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2296], eax

; 5105 : 	m_iAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP = getDefineINT("AI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP");

	push	1
	push	OFFSET ??_C@_0DH@CHFMPFPN@AI_CITY_SPECIALIZATION_SCIENCE_W@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2300], eax

; 5106 : 	m_iAI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING = getDefineINT("AI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING");

	push	1
	push	OFFSET ??_C@_0CP@BKCEJLHJ@AI_CITY_SPECIALIZATION_YIELD_WEI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2304], eax

; 5107 : 	m_iAI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING = getDefineINT("AI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING");

	push	1
	push	OFFSET ??_C@_0DA@DLMIDEPF@AI_CITY_SPECIALIZATION_YIELD_WEI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2308], eax

; 5108 : 	m_iAI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING = getDefineINT("AI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING");

	push	1
	push	OFFSET ??_C@_0CP@IGJNMNLB@AI_CITY_SPECIALIZATION_YIELD_WEI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2312], eax

; 5109 : 	m_iAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED = getDefineINT("AI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED");

	push	1
	push	OFFSET ??_C@_0DC@DOBJCOHL@AI_CITY_SPECIALIZATION_YIELD_NUM@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2316], eax

; 5110 : 	m_iAI_CITYSTRATEGY_SMALL_CITY_POP_THRESHOLD = getDefineINT("AI_CITYSTRATEGY_SMALL_CITY_POP_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CJ@HGOBHHJP@AI_CITYSTRATEGY_SMALL_CITY_POP_T@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2320], eax

; 5111 : 	m_iAI_CITYSTRATEGY_MEDIUM_CITY_POP_THRESHOLD = getDefineINT("AI_CITYSTRATEGY_MEDIUM_CITY_POP_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CK@GPIGKHN@AI_CITYSTRATEGY_MEDIUM_CITY_POP_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2324], eax

; 5112 : 	m_iAI_CITYSTRATEGY_LARGE_CITY_POP_THRESHOLD = getDefineINT("AI_CITYSTRATEGY_LARGE_CITY_POP_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CJ@DKCCCDNG@AI_CITYSTRATEGY_LARGE_CITY_POP_T@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2328], eax

; 5113 : 	m_iAI_CITYSTRATEGY_NEED_TILE_IMPROVERS_CITY_THRESHOLD = getDefineINT("AI_CITYSTRATEGY_NEED_TILE_IMPROVERS_CITY_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0DD@KHGALNEK@AI_CITYSTRATEGY_NEED_TILE_IMPROV@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2332], eax

; 5114 : 	m_iAI_CITYSTRATEGY_NEED_TILE_IMPROVERS_WORKER_MOD = getDefineINT("AI_CITYSTRATEGY_NEED_TILE_IMPROVERS_WORKER_MOD");

	push	1
	push	OFFSET ??_C@_0CP@IJDENGIM@AI_CITYSTRATEGY_NEED_TILE_IMPROV@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2336], eax

; 5115 : 	m_iAI_CITYSTRATEGY_NEED_TILE_IMPROVERS_DESPERATE_TURN = getDefineINT("AI_CITYSTRATEGY_NEED_TILE_IMPROVERS_DESPERATE_TURN");

	push	1
	push	OFFSET ??_C@_0DD@NMOECHJD@AI_CITYSTRATEGY_NEED_TILE_IMPROV@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2340], eax

; 5116 : 	m_iAI_CITYSTRATEGY_WANT_TILE_IMPROVERS_MINIMUM_SIZE = getDefineINT("AI_CITYSTRATEGY_WANT_TILE_IMPROVERS_MINIMUM_SIZE");

	push	1
	push	OFFSET ??_C@_0DB@GLEKLGPK@AI_CITYSTRATEGY_WANT_TILE_IMPROV@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2344], eax

; 5117 : 	m_fAI_CITYSTRATEGY_YIELD_DEFICIENT_FOOD = getDefineFLOAT("AI_CITYSTRATEGY_YIELD_DEFICIENT_FOOD");

	push	1
	push	OFFSET ??_C@_0CF@PNPKADOD@AI_CITYSTRATEGY_YIELD_DEFICIENT_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+2348]

; 5118 : 	m_fAI_CITYSTRATEGY_YIELD_DEFICIENT_PRODUCTION = getDefineFLOAT("AI_CITYSTRATEGY_YIELD_DEFICIENT_PRODUCTION");

	push	1
	push	OFFSET ??_C@_0CL@NBDGGJHE@AI_CITYSTRATEGY_YIELD_DEFICIENT_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+2352]

; 5119 : 	m_fAI_CITYSTRATEGY_YIELD_DEFICIENT_GOLD = getDefineFLOAT("AI_CITYSTRATEGY_YIELD_DEFICIENT_GOLD");

	push	1
	push	OFFSET ??_C@_0CF@MCNMJEAK@AI_CITYSTRATEGY_YIELD_DEFICIENT_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+2356]

; 5120 : 	m_fAI_CITYSTRATEGY_YIELD_DEFICIENT_SCIENCE = getDefineFLOAT("AI_CITYSTRATEGY_YIELD_DEFICIENT_SCIENCE");

	push	1
	push	OFFSET ??_C@_0CI@EBDKBOIE@AI_CITYSTRATEGY_YIELD_DEFICIENT_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+2360]

; 5121 : 	m_iAI_CITYSTRATEGY_OPERATION_UNIT_BASE_WEIGHT = getDefineINT("AI_CITYSTRATEGY_OPERATION_UNIT_BASE_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CL@IKFEGKAK@AI_CITYSTRATEGY_OPERATION_UNIT_B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2364], eax

; 5122 : 	m_iAI_CITYSTRATEGY_OPERATION_UNIT_FLAVOR_MULTIPLIER = getDefineINT("AI_CITYSTRATEGY_OPERATION_UNIT_FLAVOR_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0DB@PMFIMDBA@AI_CITYSTRATEGY_OPERATION_UNIT_F@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2368], eax

; 5123 : 	m_iAI_CITYSTRATEGY_ARMY_UNIT_BASE_WEIGHT = getDefineINT("AI_CITYSTRATEGY_ARMY_UNIT_BASE_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CG@LDNKOAGG@AI_CITYSTRATEGY_ARMY_UNIT_BASE_W@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2372], eax

; 5124 : 	m_iAI_CITIZEN_VALUE_FOOD = getDefineINT("AI_CITIZEN_VALUE_FOOD");

	push	1
	push	OFFSET ??_C@_0BG@PKPFPPGJ@AI_CITIZEN_VALUE_FOOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2376], eax

; 5125 : 	m_iAI_CITIZEN_VALUE_PRODUCTION = getDefineINT("AI_CITIZEN_VALUE_PRODUCTION");

	push	1
	push	OFFSET ??_C@_0BM@LOPFOFEF@AI_CITIZEN_VALUE_PRODUCTION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2380], eax

; 5126 : 	m_iAI_CITIZEN_VALUE_GOLD = getDefineINT("AI_CITIZEN_VALUE_GOLD");

	push	1
	push	OFFSET ??_C@_0BG@MFNDGIIA@AI_CITIZEN_VALUE_GOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2384], eax

; 5127 : 	m_iAI_CITIZEN_VALUE_SCIENCE = getDefineINT("AI_CITIZEN_VALUE_SCIENCE");

	push	1
	push	OFFSET ??_C@_0BJ@IFCODDPF@AI_CITIZEN_VALUE_SCIENCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2388], eax

; 5128 : 	m_iAI_CITIZEN_VALUE_CULTURE = getDefineINT("AI_CITIZEN_VALUE_CULTURE");

	push	1
	push	OFFSET ??_C@_0BJ@GKCKJNHC@AI_CITIZEN_VALUE_CULTURE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2392], eax

; 5129 : 	m_iAI_CITIZEN_VALUE_FAITH = getDefineINT("AI_CITIZEN_VALUE_FAITH");

	push	1
	push	OFFSET ??_C@_0BH@IKEJKLMD@AI_CITIZEN_VALUE_FAITH?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2396], eax

; 5130 : 	m_iAI_CITIZEN_FOOD_MOD_SIZE_CUTOFF = getDefineINT("AI_CITIZEN_FOOD_MOD_SIZE_CUTOFF");

	push	1
	push	OFFSET ??_C@_0CA@HMPEOCJJ@AI_CITIZEN_FOOD_MOD_SIZE_CUTOFF?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2400], eax

; 5131 : 	m_iAI_CITIZEN_FOOD_MOD_SIZE_EXPONENT = getDefineINT("AI_CITIZEN_FOOD_MOD_SIZE_EXPONENT");

	push	1
	push	OFFSET ??_C@_0CC@HEMBFKAO@AI_CITIZEN_FOOD_MOD_SIZE_EXPONEN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2404], eax

; 5132 : 	m_iAI_CITIZEN_MOD_FOOD_DEFICIT = getDefineINT("AI_CITIZEN_MOD_FOOD_DEFICIT");

	push	1
	push	OFFSET ??_C@_0BM@FPMALCDH@AI_CITIZEN_MOD_FOOD_DEFICIT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2408], eax

; 5133 : 	m_iAI_CITIZEN_MOD_PRODUCTION_DEFICIT = getDefineINT("AI_CITIZEN_MOD_PRODUCTION_DEFICIT");

	push	1
	push	OFFSET ??_C@_0CC@CEECGEIA@AI_CITIZEN_MOD_PRODUCTION_DEFICI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2412], eax

; 5134 : 	m_iAI_OPERATIONAL_BARBARIAN_CAMP_DEPLOY_RANGE = getDefineINT("AI_OPERATIONAL_BARBARIAN_CAMP_DEPLOY_RANGE");

	push	1
	push	OFFSET ??_C@_0CL@FLAHNGEP@AI_OPERATIONAL_BARBARIAN_CAMP_DE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2416], eax

; 5135 : 	m_iAI_OPERATIONAL_CITY_ATTACK_DEPLOY_RANGE = getDefineINT("AI_OPERATIONAL_CITY_ATTACK_DEPLOY_RANGE");

	push	1
	push	OFFSET ??_C@_0CI@BBBEOKNB@AI_OPERATIONAL_CITY_ATTACK_DEPLO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2420], eax

; 5136 : 	m_iAI_OPERATIONAL_PILLAGE_ENEMY_DEPLOY_RANGE = getDefineINT("AI_OPERATIONAL_PILLAGE_ENEMY_DEPLOY_RANGE");

	push	1
	push	OFFSET ??_C@_0CK@JPCGDAOG@AI_OPERATIONAL_PILLAGE_ENEMY_DEP@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2424], eax

; 5137 : 	m_iAI_OPERATIONAL_NAVAL_BOMBARDMENT_DEPLOY_RANGE = getDefineINT("AI_OPERATIONAL_NAVAL_BOMBARDMENT_DEPLOY_RANGE");

	push	1
	push	OFFSET ??_C@_0CO@OLABBHMN@AI_OPERATIONAL_NAVAL_BOMBARDMENT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2428], eax

; 5138 : 	m_iAI_OPERATIONAL_PERCENT_DANGER_FOR_FORWARD_MUSTER = getDefineINT("AI_OPERATIONAL_PERCENT_DANGER_FOR_FORWARD_MUSTER");

	push	1
	push	OFFSET ??_C@_0DB@MJINEPKI@AI_OPERATIONAL_PERCENT_DANGER_FO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2432], eax

; 5139 : 	m_iAI_OPERATIONAL_PERCENT_HEALTH_FOR_OPERATION = getDefineINT("AI_OPERATIONAL_PERCENT_HEALTH_FOR_OPERATION");

	push	1
	push	OFFSET ??_C@_0CM@ENEPHICP@AI_OPERATIONAL_PERCENT_HEALTH_FO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2436], eax

; 5140 : 	m_iAI_TACTICAL_MAP_UNIT_STRENGTH_MULTIPLIER = getDefineINT("AI_TACTICAL_MAP_UNIT_STRENGTH_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CJ@ECKKMLOO@AI_TACTICAL_MAP_UNIT_STRENGTH_MU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2440], eax

; 5141 : 	m_iAI_TACTICAL_MAP_DOMINANCE_PERCENTAGE = getDefineINT("AI_TACTICAL_MAP_DOMINANCE_PERCENTAGE");

	push	1
	push	OFFSET ??_C@_0CF@LJKKHAKO@AI_TACTICAL_MAP_DOMINANCE_PERCEN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2444], eax

; 5142 : 	m_iAI_TACTICAL_MAP_TEMP_ZONE_RADIUS = getDefineINT("AI_TACTICAL_MAP_TEMP_ZONE_RADIUS");

	push	1
	push	OFFSET ??_C@_0CB@IJMKNIGH@AI_TACTICAL_MAP_TEMP_ZONE_RADIUS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2448], eax

; 5143 : 	m_iAI_TACTICAL_MAP_TEMP_ZONE_TURNS = getDefineINT("AI_TACTICAL_MAP_TEMP_ZONE_TURNS");

	push	1
	push	OFFSET ??_C@_0CA@IOMPOMMI@AI_TACTICAL_MAP_TEMP_ZONE_TURNS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2452], eax

; 5144 : 	m_iAI_TACTICAL_MAP_BOMBARDMENT_ZONE_TURNS = getDefineINT("AI_TACTICAL_MAP_BOMBARDMENT_ZONE_TURNS");

	push	1
	push	OFFSET ??_C@_0CH@OFKGHNKP@AI_TACTICAL_MAP_BOMBARDMENT_ZONE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2456], eax

; 5145 : 	m_iAI_TACTICAL_RECRUIT_RANGE = getDefineINT("AI_TACTICAL_RECRUIT_RANGE");

	push	1
	push	OFFSET ??_C@_0BK@PDEINHGE@AI_TACTICAL_RECRUIT_RANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2460], eax

; 5146 : 	m_iAI_TACTICAL_REPOSITION_RANGE = getDefineINT("AI_TACTICAL_REPOSITION_RANGE");

	push	1
	push	OFFSET ??_C@_0BN@JHCPHEBF@AI_TACTICAL_REPOSITION_RANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2464], eax

; 5147 : 	m_iAI_TACTICAL_OVERKILL_PERCENT = getDefineINT("AI_TACTICAL_OVERKILL_PERCENT");

	push	1
	push	OFFSET ??_C@_0BN@BAAMFMIO@AI_TACTICAL_OVERKILL_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2468], eax

; 5148 : 	m_iAI_TACTICAL_BARBARIAN_RELEASE_VARIATION = getDefineINT("AI_TACTICAL_BARBARIAN_RELEASE_VARIATION");

	push	1
	push	OFFSET ??_C@_0CI@LGKFGHFP@AI_TACTICAL_BARBARIAN_RELEASE_VA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2472], eax

; 5149 : 	m_iAI_TACTICAL_MOVE_PRIORITY_RANDOMNESS = getDefineINT("AI_TACTICAL_MOVE_PRIORITY_RANDOMNESS");

	push	1
	push	OFFSET ??_C@_0CF@LOGFMLNC@AI_TACTICAL_MOVE_PRIORITY_RANDOM@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2476], eax

; 5150 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_CAPTURE_CITY = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_CAPTURE_CITY");

	push	1
	push	OFFSET ??_C@_0CM@PMMGJBEM@AI_TACTICAL_BARBARIAN_PRIORITY_C@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2480], eax

; 5151 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_DAMAGE_CITY = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_DAMAGE_CITY");

	push	1
	push	OFFSET ??_C@_0CL@HIGGFMIA@AI_TACTICAL_BARBARIAN_PRIORITY_D@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2484], eax

; 5152 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_DESTROY_HIGH_UNIT = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_DESTROY_HIGH_UNIT");

	push	1
	push	OFFSET ??_C@_0DB@INMPIDEH@AI_TACTICAL_BARBARIAN_PRIORITY_D@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2488], eax

; 5153 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_DESTROY_MEDIUM_UNIT = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_DESTROY_MEDIUM_UNIT");

	push	1
	push	OFFSET ??_C@_0DD@JDCPDADI@AI_TACTICAL_BARBARIAN_PRIORITY_D@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2492], eax

; 5154 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_DESTROY_LOW_UNIT = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_DESTROY_LOW_UNIT");

	push	1
	push	OFFSET ??_C@_0DA@HOINGDDC@AI_TACTICAL_BARBARIAN_PRIORITY_D@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2496], eax

; 5155 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_TO_SAFETY = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_TO_SAFETY");

	push	1
	push	OFFSET ??_C@_0CJ@EOJOGGDD@AI_TACTICAL_BARBARIAN_PRIORITY_T@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2500], eax

; 5156 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_ATTRIT_HIGH_UNIT = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_ATTRIT_HIGH_UNIT");

	push	1
	push	OFFSET ??_C@_0DA@KKMINGJJ@AI_TACTICAL_BARBARIAN_PRIORITY_A@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2504], eax

; 5157 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_ATTRIT_MEDIUM_UNIT = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_ATTRIT_MEDIUM_UNIT");

	push	1
	push	OFFSET ??_C@_0DC@JHJFFKNF@AI_TACTICAL_BARBARIAN_PRIORITY_A@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2508], eax

; 5158 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_ATTRIT_LOW_UNIT = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_ATTRIT_LOW_UNIT");

	push	1
	push	OFFSET ??_C@_0CP@HLJJBHED@AI_TACTICAL_BARBARIAN_PRIORITY_A@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2512], eax

; 5159 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_DESPERATE_ATTACK = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_DESPERATE_ATTACK");

	push	1
	push	OFFSET ??_C@_0DA@MLCIBCCJ@AI_TACTICAL_BARBARIAN_PRIORITY_D@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2516], eax

; 5160 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_PILLAGE = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_PILLAGE");

	push	1
	push	OFFSET ??_C@_0CH@LHHIOAKE@AI_TACTICAL_BARBARIAN_PRIORITY_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2520], eax

; 5161 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_PILLAGE_CITADEL = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_PILLAGE_CITADEL");

	push	1
	push	OFFSET ??_C@_0CP@HPDMNEJK@AI_TACTICAL_BARBARIAN_PRIORITY_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2524], eax

; 5162 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_PILLAGE_NEXT_TURN = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_PILLAGE_NEXT_TURN");

	push	1
	push	OFFSET ??_C@_0DB@GDNBBJMJ@AI_TACTICAL_BARBARIAN_PRIORITY_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2528], eax

; 5163 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_BLOCKADE_RESOURCE = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_BLOCKADE_RESOURCE");

	push	1
	push	OFFSET ??_C@_0DB@BLMDLMND@AI_TACTICAL_BARBARIAN_PRIORITY_B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2532], eax

; 5164 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_CIVILIAN_ATTACK = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_CIVILIAN_ATTACK");

	push	1
	push	OFFSET ??_C@_0CP@KLBJLPAE@AI_TACTICAL_BARBARIAN_PRIORITY_C@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2536], eax

; 5165 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_PASSIVE_MOVE = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_PASSIVE_MOVE");

	push	1
	push	OFFSET ??_C@_0CM@DPCDPBDB@AI_TACTICAL_BARBARIAN_PRIORITY_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2540], eax

; 5166 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_AGGRESSIVE_MOVE = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_AGGRESSIVE_MOVE");

	push	1
	push	OFFSET ??_C@_0CP@HHPFNNJN@AI_TACTICAL_BARBARIAN_PRIORITY_A@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2544], eax

; 5167 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_CAMP_DEFENSE = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_CAMP_DEFENSE");

	push	1
	push	OFFSET ??_C@_0CM@GKMDNPFK@AI_TACTICAL_BARBARIAN_PRIORITY_C@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2548], eax

; 5168 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_ESCORT_CIVILIAN = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_ESCORT_CIVILIAN");

	push	1
	push	OFFSET ??_C@_0CP@JNEAAHGJ@AI_TACTICAL_BARBARIAN_PRIORITY_E@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2552], eax

; 5169 : 	m_iAI_TACTICAL_BARBARIAN_PRIORITY_PLUNDER_TRADE_UNIT = getDefineINT("AI_TACTICAL_BARBARIAN_PRIORITY_PLUNDER_TRADE_UNIT");

	push	1
	push	OFFSET ??_C@_0DC@HBDGLOOD@AI_TACTICAL_BARBARIAN_PRIORITY_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2556], eax

; 5170 : 	m_iAI_HOMELAND_MOVE_PRIORITY_RANDOMNESS = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_RANDOMNESS");

	push	1
	push	OFFSET ??_C@_0CF@KGHJKMFA@AI_HOMELAND_MOVE_PRIORITY_RANDOM@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2560], eax

; 5171 : 	m_iAI_HOMELAND_MAX_UPGRADE_MOVE_TURNS = getDefineINT("AI_HOMELAND_MAX_UPGRADE_MOVE_TURNS");

	push	1
	push	OFFSET ??_C@_0CD@LKBHOIPJ@AI_HOMELAND_MAX_UPGRADE_MOVE_TUR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2564], eax

; 5172 : 	m_iAI_HOMELAND_MAX_DEFENSIVE_MOVE_TURNS = getDefineINT("AI_HOMELAND_MAX_DEFENSIVE_MOVE_TURNS");

	push	1
	push	OFFSET ??_C@_0CF@LMCGKMJO@AI_HOMELAND_MAX_DEFENSIVE_MOVE_T@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2568], eax

; 5173 : 	m_iAI_HOMELAND_ESTIMATE_TURNS_DISTANCE = getDefineINT("AI_HOMELAND_ESTIMATE_TURNS_DISTANCE");

	push	1
	push	OFFSET ??_C@_0CE@HBFAKEBA@AI_HOMELAND_ESTIMATE_TURNS_DISTA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2572], eax

; 5174 : 	m_iAI_HOMELAND_MOVE_PRIORITY_SETTLE = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_SETTLE");

	push	1
	push	OFFSET ??_C@_0CB@BAOCBMNA@AI_HOMELAND_MOVE_PRIORITY_SETTLE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2576], eax

; 5175 : 	m_iAI_HOMELAND_MOVE_PRIORITY_HEAL = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_HEAL");

	push	1
	push	OFFSET ??_C@_0BP@EOOEAMAN@AI_HOMELAND_MOVE_PRIORITY_HEAL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2580], eax

; 5176 : 	m_iAI_HOMELAND_MOVE_PRIORITY_TO_SAFETY = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_TO_SAFETY");

	push	1
	push	OFFSET ??_C@_0CE@JNPNPJGG@AI_HOMELAND_MOVE_PRIORITY_TO_SAF@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2584], eax

; 5177 : 	m_iAI_HOMELAND_MOVE_PRIORITY_WORKER = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_WORKER");

	push	1
	push	OFFSET ??_C@_0CB@MIFOBGNF@AI_HOMELAND_MOVE_PRIORITY_WORKER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2588], eax

; 5178 : 	m_iAI_HOMELAND_MOVE_PRIORITY_WORKER_SEA = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_WORKER_SEA");

	push	1
	push	OFFSET ??_C@_0CF@EEGOGFAI@AI_HOMELAND_MOVE_PRIORITY_WORKER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2592], eax

; 5179 : 	m_iAI_HOMELAND_MOVE_PRIORITY_EXPLORE = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_EXPLORE");

	push	1
	push	OFFSET ??_C@_0CC@HHMNMKGE@AI_HOMELAND_MOVE_PRIORITY_EXPLOR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2596], eax

; 5180 : 	m_iAI_HOMELAND_MOVE_PRIORITY_EXPLORE_SEA = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_EXPLORE_SEA");

	push	1
	push	OFFSET ??_C@_0CG@GEIBPHGH@AI_HOMELAND_MOVE_PRIORITY_EXPLOR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2600], eax

; 5181 : 	m_iAI_HOMELAND_MOVE_PRIORITY_SENTRY = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_SENTRY");

	push	1
	push	OFFSET ??_C@_0CB@MKHNEANE@AI_HOMELAND_MOVE_PRIORITY_SENTRY@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2604], eax

; 5182 : 	m_iAI_HOMELAND_MOVE_PRIORITY_MOBILE_RESERVE = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_MOBILE_RESERVE");

	push	1
	push	OFFSET ??_C@_0CJ@FCJFMGNA@AI_HOMELAND_MOVE_PRIORITY_MOBILE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2608], eax

; 5183 : 	m_iAI_HOMELAND_MOVE_PRIORITY_GARRISON = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_GARRISON");

	push	1
	push	OFFSET ??_C@_0CD@PNHIGNFH@AI_HOMELAND_MOVE_PRIORITY_GARRIS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2612], eax

; 5184 : 	m_iAI_HOMELAND_MOVE_PRIORITY_PATROL = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_PATROL");

	push	1
	push	OFFSET ??_C@_0CB@EMHEBOJH@AI_HOMELAND_MOVE_PRIORITY_PATROL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2616], eax

; 5185 : 	m_iAI_HOMELAND_MOVE_PRIORITY_UPGRADE = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_UPGRADE");

	push	1
	push	OFFSET ??_C@_0CC@BOOAGBJ@AI_HOMELAND_MOVE_PRIORITY_UPGRAD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2620], eax

; 5186 : 	m_iAI_HOMELAND_MOVE_PRIORITY_ANCIENT_RUINS = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_ANCIENT_RUINS");

	push	1
	push	OFFSET ??_C@_0CI@GGKHEJIA@AI_HOMELAND_MOVE_PRIORITY_ANCIEN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2624], eax

; 5187 : 	m_iAI_HOMELAND_MOVE_PRIORITY_GARRISON_CITY_STATE = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_GARRISON_CITY_STATE");

	push	1
	push	OFFSET ??_C@_0CO@LLDMBCH@AI_HOMELAND_MOVE_PRIORITY_GARRIS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2628], eax

; 5188 : 	m_iAI_HOMELAND_MOVE_PRIORITY_WRITER = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_WRITER");

	push	1
	push	OFFSET ??_C@_0CB@GIFMOGMK@AI_HOMELAND_MOVE_PRIORITY_WRITER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2632], eax

; 5189 : 	m_iAI_HOMELAND_MOVE_PRIORITY_ARTIST = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_ARTIST");

	push	1
	push	OFFSET ??_C@_0CB@BIKAOLAL@AI_HOMELAND_MOVE_PRIORITY_ARTIST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2636], eax

; 5190 : 	m_iAI_HOMELAND_MOVE_PRIORITY_MUSICIAN = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_MUSICIAN");

	push	1
	push	OFFSET ??_C@_0CD@CAELKDKE@AI_HOMELAND_MOVE_PRIORITY_MUSICI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2640], eax

; 5191 : 	m_iAI_HOMELAND_MOVE_PRIORITY_SCIENTIST_FREE_TECH = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_SCIENTIST_FREE_TECH");

	push	1
	push	OFFSET ??_C@_0CO@LDDIJMOC@AI_HOMELAND_MOVE_PRIORITY_SCIENT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2644], eax

; 5192 : 	m_iAI_HOMELAND_MOVE_PRIORITY_ENGINEER_HURRY = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_ENGINEER_HURRY");

	push	1
	push	OFFSET ??_C@_0CJ@FHJPHKMH@AI_HOMELAND_MOVE_PRIORITY_ENGINE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2648], eax

; 5193 : 	m_iAI_HOMELAND_MOVE_PRIORITY_GENERAL_GARRISON = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_GENERAL_GARRISON");

	push	1
	push	OFFSET ??_C@_0CL@OFECAJCK@AI_HOMELAND_MOVE_PRIORITY_GENERA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2652], eax

; 5194 : 	m_iAI_HOMELAND_MOVE_PRIORITY_ADMIRAL_GARRISON = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_ADMIRAL_GARRISON");

	push	1
	push	OFFSET ??_C@_0CL@NHJGNEOH@AI_HOMELAND_MOVE_PRIORITY_ADMIRA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2656], eax

; 5195 : 	m_iAI_HOMELAND_MOVE_PRIORITY_PROPHET_RELIGION = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_PROPHET_RELIGION");

	push	1
	push	OFFSET ??_C@_0CL@LHKHGIIG@AI_HOMELAND_MOVE_PRIORITY_PROPHE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2660], eax

; 5196 : 	m_iAI_HOMELAND_MOVE_PRIORITY_MISSIONARY = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_MISSIONARY");

	push	1
	push	OFFSET ??_C@_0CF@PJAGMAGG@AI_HOMELAND_MOVE_PRIORITY_MISSIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2664], eax

; 5197 : 	m_iAI_HOMELAND_MOVE_PRIORITY_INQUISITOR = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_INQUISITOR");

	push	1
	push	OFFSET ??_C@_0CF@BFGDNJCJ@AI_HOMELAND_MOVE_PRIORITY_INQUIS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2668], eax

; 5198 : 	m_iAI_HOMELAND_MOVE_PRIORITY_AIRCRAFT_TO_THE_FRONT = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_AIRCRAFT_TO_THE_FRONT");

	push	1
	push	OFFSET ??_C@_0DA@JCMFDOIB@AI_HOMELAND_MOVE_PRIORITY_AIRCRA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2680], eax

; 5199 : 	m_iAI_HOMELAND_MOVE_PRIORITY_SPACESHIP_PART = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_SPACESHIP_PART");

	push	1
	push	OFFSET ??_C@_0CJ@NIIKJIGN@AI_HOMELAND_MOVE_PRIORITY_SPACES@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2672], eax

; 5200 : 	m_iAI_HOMELAND_MOVE_PRIORITY_ADD_SPACESHIP_PART = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_ADD_SPACESHIP_PART");

	push	1
	push	OFFSET ??_C@_0CN@KFEJNHEN@AI_HOMELAND_MOVE_PRIORITY_ADD_SP@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2676], eax

; 5201 : 	m_iAI_HOMELAND_MOVE_PRIORITY_TREASURE = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_TREASURE");

	push	1
	push	OFFSET ??_C@_0CD@EFALMOEJ@AI_HOMELAND_MOVE_PRIORITY_TREASU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2684], eax

; 5202 : 	m_iAI_HOMELAND_MOVE_PRIORITY_TRADE_UNIT = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_TRADE_UNIT");

	push	1
	push	OFFSET ??_C@_0CF@CJEDPOAE@AI_HOMELAND_MOVE_PRIORITY_TRADE_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2688], eax

; 5203 : 	m_iAI_HOMELAND_MOVE_PRIORITY_ARCHAEOLOGIST = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_ARCHAEOLOGIST");

	push	1
	push	OFFSET ??_C@_0CI@ILBKGPKL@AI_HOMELAND_MOVE_PRIORITY_ARCHAE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2692], eax

; 5204 : 	m_iAI_HOMELAND_MOVE_PRIORITY_AIRLIFT = getDefineINT("AI_HOMELAND_MOVE_PRIORITY_AIRLIFT");

	push	1
	push	OFFSET ??_C@_0CC@BCHLIFIP@AI_HOMELAND_MOVE_PRIORITY_AIRLIF@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2696], eax

; 5205 : 	m_iAI_HOMELAND_GREAT_PERSON_TURNS_TO_WAIT = getDefineINT("AI_HOMELAND_GREAT_PERSON_TURNS_TO_WAIT");

	push	1
	push	OFFSET ??_C@_0CH@GEKHNEID@AI_HOMELAND_GREAT_PERSON_TURNS_T@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2700], eax

; 5206 : 	m_iAI_DIPLO_PLOT_RANGE_FROM_CITY_HOME_FRONT = getDefineINT("AI_DIPLO_PLOT_RANGE_FROM_CITY_HOME_FRONT");

	push	1
	push	OFFSET ??_C@_0CJ@BPFAGGFL@AI_DIPLO_PLOT_RANGE_FROM_CITY_HO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2704], eax

; 5207 : 	m_iAI_DIPLO_LAND_DISPUTE_WEIGHT_WEAK = getDefineINT("AI_DIPLO_LAND_DISPUTE_WEIGHT_WEAK");

	push	1
	push	OFFSET ??_C@_0CC@DPHOAAEH@AI_DIPLO_LAND_DISPUTE_WEIGHT_WEA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2708], eax

; 5208 : 	m_iAI_DIPLO_LAND_DISPUTE_WEIGHT_STRONG = getDefineINT("AI_DIPLO_LAND_DISPUTE_WEIGHT_STRONG");

	push	1
	push	OFFSET ??_C@_0CE@OOODBAJM@AI_DIPLO_LAND_DISPUTE_WEIGHT_STR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2712], eax

; 5209 : 	m_iAI_DIPLO_LAND_DISPUTE_WEIGHT_FIERCE = getDefineINT("AI_DIPLO_LAND_DISPUTE_WEIGHT_FIERCE");

	push	1
	push	OFFSET ??_C@_0CE@COBAIHLB@AI_DIPLO_LAND_DISPUTE_WEIGHT_FIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2716], eax

; 5210 : 	m_iMINOR_BULLY_GOLD = getDefineINT("MINOR_BULLY_GOLD");

	push	1
	push	OFFSET ??_C@_0BB@IFFILJIK@MINOR_BULLY_GOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2720], eax

; 5211 : 	m_iMINOR_FRIENDSHIP_RATE_MOD_MAXIMUM = getDefineINT("MINOR_FRIENDSHIP_RATE_MOD_MAXIMUM");

	push	1
	push	OFFSET ??_C@_0CC@LLBCNIOF@MINOR_FRIENDSHIP_RATE_MOD_MAXIMU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2724], eax

; 5212 : 	m_iMINOR_FRIENDSHIP_RATE_MOD_SHARED_RELIGION = getDefineINT("MINOR_FRIENDSHIP_RATE_MOD_SHARED_RELIGION");

	push	1
	push	OFFSET ??_C@_0CK@JEBBBPNF@MINOR_FRIENDSHIP_RATE_MOD_SHARED@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2728], eax

; 5213 : 	m_iMINOR_FRIENDSHIP_DROP_PER_TURN = getDefineINT("MINOR_FRIENDSHIP_DROP_PER_TURN");

	push	1
	push	OFFSET ??_C@_0BP@GMFCAEOP@MINOR_FRIENDSHIP_DROP_PER_TURN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2732], eax

; 5214 : 	m_iMINOR_FRIENDSHIP_DROP_PER_TURN_HOSTILE = getDefineINT("MINOR_FRIENDSHIP_DROP_PER_TURN_HOSTILE");

	push	1
	push	OFFSET ??_C@_0CH@DPALJAA@MINOR_FRIENDSHIP_DROP_PER_TURN_H@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2736], eax

; 5215 : 	m_iMINOR_FRIENDSHIP_DROP_PER_TURN_AGGRESSOR = getDefineINT("MINOR_FRIENDSHIP_DROP_PER_TURN_AGGRESSOR");

	push	1
	push	OFFSET ??_C@_0CJ@HNBKLGKB@MINOR_FRIENDSHIP_DROP_PER_TURN_A@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2740], eax

; 5216 : 	m_iMINOR_FRIENDSHIP_DROP_DISHONOR_PLEDGE_TO_PROTECT = getDefineINT("MINOR_FRIENDSHIP_DROP_DISHONOR_PLEDGE_TO_PROTECT");

	push	1
	push	OFFSET ??_C@_0DB@OGIDHCFA@MINOR_FRIENDSHIP_DROP_DISHONOR_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2744], eax

; 5217 : 	m_iMINOR_FRIENDSHIP_DROP_BULLY_GOLD_SUCCESS = getDefineINT("MINOR_FRIENDSHIP_DROP_BULLY_GOLD_SUCCESS");

	push	1
	push	OFFSET ??_C@_0CJ@IFPOFCMF@MINOR_FRIENDSHIP_DROP_BULLY_GOLD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2748], eax

; 5218 : 	m_iMINOR_FRIENDSHIP_DROP_BULLY_GOLD_FAILURE = getDefineINT("MINOR_FRIENDSHIP_DROP_BULLY_GOLD_FAILURE");

	push	1
	push	OFFSET ??_C@_0CJ@EMLMOJJP@MINOR_FRIENDSHIP_DROP_BULLY_GOLD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2752], eax

; 5219 : 	m_iMINOR_FRIENDSHIP_DROP_BULLY_WORKER_SUCCESS = getDefineINT("MINOR_FRIENDSHIP_DROP_BULLY_WORKER_SUCCESS");

	push	1
	push	OFFSET ??_C@_0CL@DJFIDLOL@MINOR_FRIENDSHIP_DROP_BULLY_WORK@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2756], eax

; 5220 : 	m_iMINOR_FRIENDSHIP_DROP_BULLY_WORKER_FAILURE = getDefineINT("MINOR_FRIENDSHIP_DROP_BULLY_WORKER_FAILURE");

	push	1
	push	OFFSET ??_C@_0CL@PABKIALB@MINOR_FRIENDSHIP_DROP_BULLY_WORK@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2760], eax

; 5221 : 	m_iMINOR_FRIENDSHIP_NEGATIVE_INCREASE_PER_TURN = getDefineINT("MINOR_FRIENDSHIP_NEGATIVE_INCREASE_PER_TURN");

	push	1
	push	OFFSET ??_C@_0CM@MDMAEAFL@MINOR_FRIENDSHIP_NEGATIVE_INCREA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2764], eax

; 5222 : 	m_iMINOR_FRIENDSHIP_AT_WAR = getDefineINT("MINOR_FRIENDSHIP_AT_WAR");

	push	1
	push	OFFSET ??_C@_0BI@GJOOKCLM@MINOR_FRIENDSHIP_AT_WAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2768], eax

; 5223 : 	m_iMINOR_CIV_AGGRESSOR_THRESHOLD = getDefineINT("MINOR_CIV_AGGRESSOR_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BO@LNOJKEHC@MINOR_CIV_AGGRESSOR_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2772], eax

; 5224 : 	m_iMINOR_CIV_WARMONGER_THRESHOLD = getDefineINT("MINOR_CIV_WARMONGER_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BO@FGMEIMPI@MINOR_CIV_WARMONGER_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2776], eax

; 5225 : 	m_iPERMANENT_WAR_AGGRESSOR_CHANCE = getDefineINT("PERMANENT_WAR_AGGRESSOR_CHANCE");

	push	1
	push	OFFSET ??_C@_0BP@BJAEFBAH@PERMANENT_WAR_AGGRESSOR_CHANCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2780], eax

; 5226 : 	m_iPERMANENT_WAR_OTHER_WARMONGER_CHANCE_DISTANT = getDefineINT("PERMANENT_WAR_OTHER_WARMONGER_CHANCE_DISTANT");

	push	1
	push	OFFSET ??_C@_0CN@MLJPIIOC@PERMANENT_WAR_OTHER_WARMONGER_CH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2784], eax

; 5227 : 	m_iPERMANENT_WAR_OTHER_WARMONGER_CHANCE_FAR = getDefineINT("PERMANENT_WAR_OTHER_WARMONGER_CHANCE_FAR");

	push	1
	push	OFFSET ??_C@_0CJ@NADEIDO@PERMANENT_WAR_OTHER_WARMONGER_CH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2788], eax

; 5228 : 	m_iPERMANENT_WAR_OTHER_WARMONGER_CHANCE_CLOSE = getDefineINT("PERMANENT_WAR_OTHER_WARMONGER_CHANCE_CLOSE");

	push	1
	push	OFFSET ??_C@_0CL@NABICODF@PERMANENT_WAR_OTHER_WARMONGER_CH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2792], eax

; 5229 : 	m_iPERMANENT_WAR_OTHER_WARMONGER_CHANCE_NEIGHBORS = getDefineINT("PERMANENT_WAR_OTHER_WARMONGER_CHANCE_NEIGHBORS");

	push	1
	push	OFFSET ??_C@_0CP@FODJABJA@PERMANENT_WAR_OTHER_WARMONGER_CH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2796], eax

; 5230 : 	m_iPERMANENT_WAR_OTHER_CHANCE_DISTANT = getDefineINT("PERMANENT_WAR_OTHER_CHANCE_DISTANT");

	push	1
	push	OFFSET ??_C@_0CD@PEAJINHL@PERMANENT_WAR_OTHER_CHANCE_DISTA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2800], eax

; 5231 : 	m_iPERMANENT_WAR_OTHER_CHANCE_FAR = getDefineINT("PERMANENT_WAR_OTHER_CHANCE_FAR");

	push	1
	push	OFFSET ??_C@_0BP@MFMNEJFG@PERMANENT_WAR_OTHER_CHANCE_FAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2804], eax

; 5232 : 	m_iPERMANENT_WAR_OTHER_CHANCE_CLOSE = getDefineINT("PERMANENT_WAR_OTHER_CHANCE_CLOSE");

	push	1
	push	OFFSET ??_C@_0CB@KDLDHMC@PERMANENT_WAR_OTHER_CHANCE_CLOSE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2808], eax

; 5233 : 	m_iPERMANENT_WAR_OTHER_CHANCE_NEIGHBORS = getDefineINT("PERMANENT_WAR_OTHER_CHANCE_NEIGHBORS");

	push	1
	push	OFFSET ??_C@_0CF@IONAPLNK@PERMANENT_WAR_OTHER_CHANCE_NEIGH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2812], eax

; 5234 : 	m_iPERMANENT_WAR_OTHER_AT_WAR = getDefineINT("PERMANENT_WAR_OTHER_AT_WAR");

	push	1
	push	OFFSET ??_C@_0BL@NMFNFFFN@PERMANENT_WAR_OTHER_AT_WAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2816], eax

; 5235 : 	m_iFRIENDSHIP_NEUTRAL_ON_DEATH = getDefineINT("FRIENDSHIP_NEUTRAL_ON_DEATH");

	push	1
	push	OFFSET ??_C@_0BM@JPOGAFGD@FRIENDSHIP_NEUTRAL_ON_DEATH?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2820], eax

; 5236 : 	m_iFRIENDSHIP_THRESHOLD_NEUTRAL = getDefineINT("FRIENDSHIP_THRESHOLD_NEUTRAL");

	push	1
	push	OFFSET ??_C@_0BN@CIFBCCOD@FRIENDSHIP_THRESHOLD_NEUTRAL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2824], eax

; 5237 : 	m_iFRIENDSHIP_FRIENDS_ON_DEATH = getDefineINT("FRIENDSHIP_FRIENDS_ON_DEATH");

	push	1
	push	OFFSET ??_C@_0BM@BDBCDPJL@FRIENDSHIP_FRIENDS_ON_DEATH?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2828], eax

; 5238 : 	m_iFRIENDSHIP_THRESHOLD_FRIENDS = getDefineINT("FRIENDSHIP_THRESHOLD_FRIENDS");

	push	1
	push	OFFSET ??_C@_0BN@KBAHMDJG@FRIENDSHIP_THRESHOLD_FRIENDS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2832], eax

; 5239 : 	m_iFRIENDSHIP_ALLIES_ON_DEATH = getDefineINT("FRIENDSHIP_ALLIES_ON_DEATH");

	push	1
	push	OFFSET ??_C@_0BL@CGHIJMEH@FRIENDSHIP_ALLIES_ON_DEATH?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2836], eax

; 5240 : 	m_iFRIENDSHIP_THRESHOLD_ALLIES = getDefineINT("FRIENDSHIP_THRESHOLD_ALLIES");

	push	1
	push	OFFSET ??_C@_0BM@FDKJOODF@FRIENDSHIP_THRESHOLD_ALLIES?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2840], eax

; 5241 : 	m_iFRIENDSHIP_THRESHOLD_MAX = getDefineINT("FRIENDSHIP_THRESHOLD_MAX");

	push	1
	push	OFFSET ??_C@_0BJ@NFAJCECL@FRIENDSHIP_THRESHOLD_MAX?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2844], eax

; 5242 : 	m_iFRIENDSHIP_THRESHOLD_CAN_BULLY = getDefineINT("FRIENDSHIP_THRESHOLD_CAN_BULLY");

	push	1
	push	OFFSET ??_C@_0BP@KPLIMLMB@FRIENDSHIP_THRESHOLD_CAN_BULLY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2848], eax

; 5243 : 	m_iFRIENDSHIP_THRESHOLD_CAN_PLEDGE_TO_PROTECT = getDefineINT("FRIENDSHIP_THRESHOLD_CAN_PLEDGE_TO_PROTECT");

	push	1
	push	OFFSET ??_C@_0CL@DLLOHKPA@FRIENDSHIP_THRESHOLD_CAN_PLEDGE_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2852], eax

; 5244 : 	m_iMINOR_FRIENDSHIP_CLOSE_AMOUNT = getDefineINT("MINOR_FRIENDSHIP_CLOSE_AMOUNT");

	push	1
	push	OFFSET ??_C@_0BO@MOOMLIJE@MINOR_FRIENDSHIP_CLOSE_AMOUNT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2856], eax

; 5245 : 	m_iMINOR_CIV_SCIENCE_BONUS_MULTIPLIER = getDefineINT("MINOR_CIV_SCIENCE_BONUS_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CD@EAANANMJ@MINOR_CIV_SCIENCE_BONUS_MULTIPLI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2860], eax

; 5246 : 	m_iFRIENDS_CULTURE_BONUS_AMOUNT_ANCIENT = getDefineINT("FRIENDS_CULTURE_BONUS_AMOUNT_ANCIENT");

	push	1
	push	OFFSET ??_C@_0CF@JFPDDCHE@FRIENDS_CULTURE_BONUS_AMOUNT_ANC@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2864], eax

; 5247 : 	m_iFRIENDS_CULTURE_BONUS_AMOUNT_MEDIEVAL = getDefineINT("FRIENDS_CULTURE_BONUS_AMOUNT_MEDIEVAL");

	push	1
	push	OFFSET ??_C@_0CG@PKIIIJDJ@FRIENDS_CULTURE_BONUS_AMOUNT_MED@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2868], eax

; 5248 : 	m_iFRIENDS_CULTURE_BONUS_AMOUNT_INDUSTRIAL = getDefineINT("FRIENDS_CULTURE_BONUS_AMOUNT_INDUSTRIAL");

	push	1
	push	OFFSET ??_C@_0CI@INABBCMG@FRIENDS_CULTURE_BONUS_AMOUNT_IND@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2872], eax

; 5249 : 	m_iALLIES_CULTURE_BONUS_AMOUNT_ANCIENT = getDefineINT("ALLIES_CULTURE_BONUS_AMOUNT_ANCIENT");

	push	1
	push	OFFSET ??_C@_0CE@FEJFIBMM@ALLIES_CULTURE_BONUS_AMOUNT_ANCI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2876], eax

; 5250 : 	m_iALLIES_CULTURE_BONUS_AMOUNT_MEDIEVAL = getDefineINT("ALLIES_CULTURE_BONUS_AMOUNT_MEDIEVAL");

	push	1
	push	OFFSET ??_C@_0CF@DPPDNEDE@ALLIES_CULTURE_BONUS_AMOUNT_MEDI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2880], eax

; 5251 : 	m_iALLIES_CULTURE_BONUS_AMOUNT_INDUSTRIAL = getDefineINT("ALLIES_CULTURE_BONUS_AMOUNT_INDUSTRIAL");

	push	1
	push	OFFSET ??_C@_0CH@CNHFIELJ@ALLIES_CULTURE_BONUS_AMOUNT_INDU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2884], eax

; 5252 : 	m_iFRIENDS_CAPITAL_FOOD_BONUS_AMOUNT_PRE_RENAISSANCE = getDefineINT("FRIENDS_CAPITAL_FOOD_BONUS_AMOUNT_PRE_RENAISSANCE");

	push	1
	push	OFFSET ??_C@_0DC@ENCLCJEM@FRIENDS_CAPITAL_FOOD_BONUS_AMOUN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2888], eax

; 5253 : 	m_iFRIENDS_CAPITAL_FOOD_BONUS_AMOUNT_POST_RENAISSANCE = getDefineINT("FRIENDS_CAPITAL_FOOD_BONUS_AMOUNT_POST_RENAISSANCE");

	push	1
	push	OFFSET ??_C@_0DD@LFGIDGFE@FRIENDS_CAPITAL_FOOD_BONUS_AMOUN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2892], eax

; 5254 : 	m_iFRIENDS_OTHER_CITIES_FOOD_BONUS_AMOUNT_PRE_RENAISSANCE = getDefineINT("FRIENDS_OTHER_CITIES_FOOD_BONUS_AMOUNT_PRE_RENAISSANCE");

	push	1
	push	OFFSET ??_C@_0DH@BKMPCDHK@FRIENDS_OTHER_CITIES_FOOD_BONUS_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2896], eax

; 5255 : 	m_iFRIENDS_OTHER_CITIES_FOOD_BONUS_AMOUNT_POST_RENAISSANCE = getDefineINT("FRIENDS_OTHER_CITIES_FOOD_BONUS_AMOUNT_POST_RENAISSANCE");

	push	1
	push	OFFSET ??_C@_0DI@HKIFEHMH@FRIENDS_OTHER_CITIES_FOOD_BONUS_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2900], eax

; 5256 : 	m_iALLIES_CAPITAL_FOOD_BONUS_AMOUNT = getDefineINT("ALLIES_CAPITAL_FOOD_BONUS_AMOUNT");

	push	1
	push	OFFSET ??_C@_0CB@KOHFCGNJ@ALLIES_CAPITAL_FOOD_BONUS_AMOUNT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2904], eax

; 5257 : 	m_iALLIES_OTHER_CITIES_FOOD_BONUS_AMOUNT = getDefineINT("ALLIES_OTHER_CITIES_FOOD_BONUS_AMOUNT");

	push	1
	push	OFFSET ??_C@_0CG@LIMBJBGC@ALLIES_OTHER_CITIES_FOOD_BONUS_A@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2908], eax

; 5258 : 	m_iFRIENDS_BASE_TURNS_UNIT_SPAWN = getDefineINT("FRIENDS_BASE_TURNS_UNIT_SPAWN");

	push	1
	push	OFFSET ??_C@_0BO@FJLHLADN@FRIENDS_BASE_TURNS_UNIT_SPAWN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2912], eax

; 5259 : 	m_iFRIENDS_RAND_TURNS_UNIT_SPAWN = getDefineINT("FRIENDS_RAND_TURNS_UNIT_SPAWN");

	push	1
	push	OFFSET ??_C@_0BO@HBDFNHKM@FRIENDS_RAND_TURNS_UNIT_SPAWN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2916], eax

; 5260 : 	m_iALLIES_EXTRA_TURNS_UNIT_SPAWN = getDefineINT("ALLIES_EXTRA_TURNS_UNIT_SPAWN");

	push	1
	push	OFFSET ??_C@_0BO@ODACJMNB@ALLIES_EXTRA_TURNS_UNIT_SPAWN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2920], eax

; 5261 : 	m_iUNIT_SPAWN_BIAS_MULTIPLIER = getDefineINT("UNIT_SPAWN_BIAS_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BL@IGLHLFEI@UNIT_SPAWN_BIAS_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2924], eax

; 5262 : 	m_iUNIT_SPAWN_NUM_CHOICES = getDefineINT("UNIT_SPAWN_NUM_CHOICES");

	push	1
	push	OFFSET ??_C@_0BH@NNHLCKHM@UNIT_SPAWN_NUM_CHOICES?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2928], eax

; 5263 : 	m_iFRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_ANCIENT = getDefineINT("FRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_ANCIENT");

	push	1
	push	OFFSET ??_C@_0CM@GPCJINDB@FRIENDS_HAPPINESS_FLAT_BONUS_AMO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2932], eax

; 5264 : 	m_iFRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_MEDIEVAL = getDefineINT("FRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_MEDIEVAL");

	push	1
	push	OFFSET ??_C@_0CN@PMMEOGJJ@FRIENDS_HAPPINESS_FLAT_BONUS_AMO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2936], eax

; 5265 : 	m_iFRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_INDUSTRIAL = getDefineINT("FRIENDS_HAPPINESS_FLAT_BONUS_AMOUNT_INDUSTRIAL");

	push	1
	push	OFFSET ??_C@_0CP@POALNEKK@FRIENDS_HAPPINESS_FLAT_BONUS_AMO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2940], eax

; 5266 : 	m_iALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_ANCIENT = getDefineINT("ALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_ANCIENT");

	push	1
	push	OFFSET ??_C@_0CL@DIGOOGKD@ALLIES_HAPPINESS_FLAT_BONUS_AMOU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2944], eax

; 5267 : 	m_iALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_MEDIEVAL = getDefineINT("ALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_MEDIEVAL");

	push	1
	push	OFFSET ??_C@_0CM@OCJCFDJK@ALLIES_HAPPINESS_FLAT_BONUS_AMOU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2948], eax

; 5268 : 	m_iALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_INDUSTRIAL = getDefineINT("ALLIES_HAPPINESS_FLAT_BONUS_AMOUNT_INDUSTRIAL");

	push	1
	push	OFFSET ??_C@_0CO@GOCNNODM@ALLIES_HAPPINESS_FLAT_BONUS_AMOU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2952], eax

; 5269 : 	m_iFRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_ANCIENT = getDefineINT("FRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_ANCIENT");

	push	1
	push	OFFSET ??_C@_0DC@FKCFLKJJ@FRIENDS_HAPPINESS_PER_LUXURY_BON@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2956], eax

; 5270 : 	m_iFRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL = getDefineINT("FRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL");

	push	1
	push	OFFSET ??_C@_0DD@CEPMMBHE@FRIENDS_HAPPINESS_PER_LUXURY_BON@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2960], eax

; 5271 : 	m_iFRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL = getDefineINT("FRIENDS_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL");

	push	1
	push	OFFSET ??_C@_0DF@LANBDEFI@FRIENDS_HAPPINESS_PER_LUXURY_BON@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2964], eax

; 5272 : 	m_iALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_ANCIENT = getDefineINT("ALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_ANCIENT");

	push	1
	push	OFFSET ??_C@_0DB@ILFJBDDM@ALLIES_HAPPINESS_PER_LUXURY_BONU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2968], eax

; 5273 : 	m_iALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL = getDefineINT("ALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_MEDIEVAL");

	push	1
	push	OFFSET ??_C@_0DC@ICJBOKLK@ALLIES_HAPPINESS_PER_LUXURY_BONU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2972], eax

; 5274 : 	m_iALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL = getDefineINT("ALLIES_HAPPINESS_PER_LUXURY_BONUS_AMOUNT_INDUSTRIAL");

	push	1
	push	OFFSET ??_C@_0DE@EJBEJBLF@ALLIES_HAPPINESS_PER_LUXURY_BONU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2976], eax

; 5275 : 	m_iFRIENDS_FAITH_FLAT_BONUS_AMOUNT_INDUSTRIAL = getDefineINT("FRIENDS_FAITH_FLAT_BONUS_AMOUNT_INDUSTRIAL");

	push	1
	push	OFFSET ??_C@_0CL@MCAOHEG@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2980], eax

; 5276 : 	m_iFRIENDS_FAITH_FLAT_BONUS_AMOUNT_RENAISSANCE = getDefineINT("FRIENDS_FAITH_FLAT_BONUS_AMOUNT_RENAISSANCE");

	push	1
	push	OFFSET ??_C@_0CM@CKNHOOGC@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2984], eax

; 5277 : 	m_iFRIENDS_FAITH_FLAT_BONUS_AMOUNT_MEDIEVAL = getDefineINT("FRIENDS_FAITH_FLAT_BONUS_AMOUNT_MEDIEVAL");

	push	1
	push	OFFSET ??_C@_0CJ@KGCBPIHP@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2988], eax

; 5278 : 	m_iFRIENDS_FAITH_FLAT_BONUS_AMOUNT_CLASSICAL = getDefineINT("FRIENDS_FAITH_FLAT_BONUS_AMOUNT_CLASSICAL");

	push	1
	push	OFFSET ??_C@_0CK@DABKLMFN@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+2992], eax

; 5279 : 	m_iFRIENDS_FAITH_FLAT_BONUS_AMOUNT_ANCIENT = getDefineINT("FRIENDS_FAITH_FLAT_BONUS_AMOUNT_ANCIENT");

	push	1
	push	OFFSET ??_C@_0CI@IPOIHAMP@FRIENDS_FAITH_FLAT_BONUS_AMOUNT_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2996], eax

; 5280 : 	m_iALLIES_FAITH_FLAT_BONUS_AMOUNT_INDUSTRIAL = getDefineINT("ALLIES_FAITH_FLAT_BONUS_AMOUNT_INDUSTRIAL");

	push	1
	push	OFFSET ??_C@_0CK@CDPOFADC@ALLIES_FAITH_FLAT_BONUS_AMOUNT_I@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3000], eax

; 5281 : 	m_iALLIES_FAITH_FLAT_BONUS_AMOUNT_RENAISSANCE = getDefineINT("ALLIES_FAITH_FLAT_BONUS_AMOUNT_RENAISSANCE");

	push	1
	push	OFFSET ??_C@_0CL@HNJAIFPA@ALLIES_FAITH_FLAT_BONUS_AMOUNT_R@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3004], eax

; 5282 : 	m_iALLIES_FAITH_FLAT_BONUS_AMOUNT_MEDIEVAL = getDefineINT("ALLIES_FAITH_FLAT_BONUS_AMOUNT_MEDIEVAL");

	push	1
	push	OFFSET ??_C@_0CI@GGDLOAEE@ALLIES_FAITH_FLAT_BONUS_AMOUNT_M@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3008], eax

; 5283 : 	m_iALLIES_FAITH_FLAT_BONUS_AMOUNT_CLASSICAL = getDefineINT("ALLIES_FAITH_FLAT_BONUS_AMOUNT_CLASSICAL");

	push	1
	push	OFFSET ??_C@_0CJ@IBNBEPGB@ALLIES_FAITH_FLAT_BONUS_AMOUNT_C@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3012], eax

; 5284 : 	m_iALLIES_FAITH_FLAT_BONUS_AMOUNT_ANCIENT = getDefineINT("ALLIES_FAITH_FLAT_BONUS_AMOUNT_ANCIENT");

	push	1
	push	OFFSET ??_C@_0CH@CPJMOGLA@ALLIES_FAITH_FLAT_BONUS_AMOUNT_A@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3016], eax

; 5285 : 	m_iMINOR_TURNS_GREAT_PEOPLE_SPAWN_BASE = getDefineINT("MINOR_TURNS_GREAT_PEOPLE_SPAWN_BASE");

	push	1
	push	OFFSET ??_C@_0CE@FDBCILAN@MINOR_TURNS_GREAT_PEOPLE_SPAWN_B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3020], eax

; 5286 : 	m_iMINOR_TURNS_GREAT_PEOPLE_SPAWN_RAND = getDefineINT("MINOR_TURNS_GREAT_PEOPLE_SPAWN_RAND");

	push	1
	push	OFFSET ??_C@_0CE@DOBHBNON@MINOR_TURNS_GREAT_PEOPLE_SPAWN_R@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3024], eax

; 5287 : 	m_iMINOR_TURNS_GREAT_PEOPLE_SPAWN_BIAS_MULTIPLY = getDefineINT("MINOR_TURNS_GREAT_PEOPLE_SPAWN_BIAS_MULTIPLY");

	push	1
	push	OFFSET ??_C@_0CN@JLIBBBBL@MINOR_TURNS_GREAT_PEOPLE_SPAWN_B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3028], eax

; 5288 : 	m_iMINOR_ADDITIONAL_ALLIES_GP_CHANGE = getDefineINT("MINOR_ADDITIONAL_ALLIES_GP_CHANGE");

	push	1
	push	OFFSET ??_C@_0CC@GLGMKJLH@MINOR_ADDITIONAL_ALLIES_GP_CHANG@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3032], eax

; 5289 : 	m_iMAX_MINOR_ADDITIONAL_ALLIES_GP_CHANGE = getDefineINT("MAX_MINOR_ADDITIONAL_ALLIES_GP_CHANGE");

	push	1
	push	OFFSET ??_C@_0CG@HLPNMJNE@MAX_MINOR_ADDITIONAL_ALLIES_GP_C@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3036], eax

; 5290 : 	m_iMAX_DISTANCE_MINORS_BARB_QUEST = getDefineINT("MAX_DISTANCE_MINORS_BARB_QUEST");

	push	1
	push	OFFSET ??_C@_0BP@HBNEFCKF@MAX_DISTANCE_MINORS_BARB_QUEST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3040], eax

; 5291 : 	m_iTXT_KEY_MINOR_GIFT_UNITS_REMINDER = getDefineINT("TXT_KEY_MINOR_GIFT_UNITS_REMINDER");

	push	1
	push	OFFSET ??_C@_0CC@CBKGAJFM@TXT_KEY_MINOR_GIFT_UNITS_REMINDE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3044], eax

; 5292 : 	m_iWAR_QUEST_COMPLETE_FRIENDSHIP = getDefineINT("WAR_QUEST_COMPLETE_FRIENDSHIP");

	push	1
	push	OFFSET ??_C@_0BO@CJMJMLIE@WAR_QUEST_COMPLETE_FRIENDSHIP?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3048], eax

; 5293 : 	m_iWAR_QUEST_UNITS_TO_KILL_DIVISOR = getDefineINT("WAR_QUEST_UNITS_TO_KILL_DIVISOR");

	push	1
	push	OFFSET ??_C@_0CA@DNHNNLIA@WAR_QUEST_UNITS_TO_KILL_DIVISOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3052], eax

; 5294 : 	m_iWAR_QUEST_MIN_UNITS_TO_KILL = getDefineINT("WAR_QUEST_MIN_UNITS_TO_KILL");

	push	1
	push	OFFSET ??_C@_0BM@JCOMPMIG@WAR_QUEST_MIN_UNITS_TO_KILL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3056], eax

; 5295 : 	m_iMINOR_QUEST_FRIENDSHIP_ROUTE = getDefineINT("MINOR_QUEST_FRIENDSHIP_ROUTE");

	push	1
	push	OFFSET ??_C@_0BN@ODIBEEBJ@MINOR_QUEST_FRIENDSHIP_ROUTE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3060], eax

; 5296 : 	m_iMINOR_QUEST_FRIENDSHIP_KILL_CAMP = getDefineINT("MINOR_QUEST_FRIENDSHIP_KILL_CAMP");

	push	1
	push	OFFSET ??_C@_0CB@ICDCHDDL@MINOR_QUEST_FRIENDSHIP_KILL_CAMP@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3064], eax

; 5297 : 	m_iMINOR_QUEST_FRIENDSHIP_CONNECT_RESOURCE = getDefineINT("MINOR_QUEST_FRIENDSHIP_CONNECT_RESOURCE");

	push	1
	push	OFFSET ??_C@_0CI@PIDFBBKA@MINOR_QUEST_FRIENDSHIP_CONNECT_R@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3068], eax

; 5298 : 	m_iMINOR_QUEST_FRIENDSHIP_CONSTRUCT_WONDER = getDefineINT("MINOR_QUEST_FRIENDSHIP_CONSTRUCT_WONDER");

	push	1
	push	OFFSET ??_C@_0CI@CCCPBLHD@MINOR_QUEST_FRIENDSHIP_CONSTRUCT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3072], eax

; 5299 : 	m_iMINOR_QUEST_FRIENDSHIP_GREAT_PERSON = getDefineINT("MINOR_QUEST_FRIENDSHIP_GREAT_PERSON");

	push	1
	push	OFFSET ??_C@_0CE@LPIHMAIO@MINOR_QUEST_FRIENDSHIP_GREAT_PER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3076], eax

; 5300 : 	m_iMINOR_QUEST_FRIENDSHIP_KILL_CITY_STATE = getDefineINT("MINOR_QUEST_FRIENDSHIP_KILL_CITY_STATE");

	push	1
	push	OFFSET ??_C@_0CH@DDKALFDI@MINOR_QUEST_FRIENDSHIP_KILL_CITY@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3080], eax

; 5301 : 	m_iMINOR_QUEST_FRIENDSHIP_FIND_PLAYER = getDefineINT("MINOR_QUEST_FRIENDSHIP_FIND_PLAYER");

	push	1
	push	OFFSET ??_C@_0CD@HILAHJLM@MINOR_QUEST_FRIENDSHIP_FIND_PLAY@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3084], eax

; 5302 : 	m_iMINOR_QUEST_FRIENDSHIP_FIND_NATURAL_WONDER = getDefineINT("MINOR_QUEST_FRIENDSHIP_FIND_NATURAL_WONDER");

	push	1
	push	OFFSET ??_C@_0CL@HDOJINKH@MINOR_QUEST_FRIENDSHIP_FIND_NATU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3088], eax

; 5303 : 	m_iMINOR_QUEST_FRIENDSHIP_GIVE_GOLD = getDefineINT("MINOR_QUEST_FRIENDSHIP_GIVE_GOLD");

	push	1
	push	OFFSET ??_C@_0CB@NKNOJHBE@MINOR_QUEST_FRIENDSHIP_GIVE_GOLD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3092], eax

; 5304 : 	m_iMINOR_QUEST_FRIENDSHIP_PLEDGE_TO_PROTECT = getDefineINT("MINOR_QUEST_FRIENDSHIP_PLEDGE_TO_PROTECT");

	push	1
	push	OFFSET ??_C@_0CJ@NOHJHFKP@MINOR_QUEST_FRIENDSHIP_PLEDGE_TO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3096], eax

; 5305 : 	m_iMINOR_QUEST_FRIENDSHIP_CONTEST_CULTURE = getDefineINT("MINOR_QUEST_FRIENDSHIP_CONTEST_CULTURE");

	push	1
	push	OFFSET ??_C@_0CH@BFICGENF@MINOR_QUEST_FRIENDSHIP_CONTEST_C@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3100], eax

; 5306 : 	m_iMINOR_QUEST_FRIENDSHIP_CONTEST_FAITH = getDefineINT("MINOR_QUEST_FRIENDSHIP_CONTEST_FAITH");

	push	1
	push	OFFSET ??_C@_0CF@KJKKEAHP@MINOR_QUEST_FRIENDSHIP_CONTEST_F@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3104], eax

; 5307 : 	m_iMINOR_QUEST_FRIENDSHIP_CONTEST_TECHS = getDefineINT("MINOR_QUEST_FRIENDSHIP_CONTEST_TECHS");

	push	1
	push	OFFSET ??_C@_0CF@MBIDDEMF@MINOR_QUEST_FRIENDSHIP_CONTEST_T@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3108], eax

; 5308 : 	m_iMINOR_QUEST_FRIENDSHIP_INVEST = getDefineINT("MINOR_QUEST_FRIENDSHIP_INVEST");

	push	1
	push	OFFSET ??_C@_0BO@KDHEDPKN@MINOR_QUEST_FRIENDSHIP_INVEST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3112], eax

; 5309 : 	m_iMINOR_QUEST_FRIENDSHIP_BULLY_CITY_STATE = getDefineINT("MINOR_QUEST_FRIENDSHIP_BULLY_CITY_STATE");

	push	1
	push	OFFSET ??_C@_0CI@CDCCCFJI@MINOR_QUEST_FRIENDSHIP_BULLY_CIT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3116], eax

; 5310 : 	m_iMINOR_QUEST_FRIENDSHIP_DENOUNCE_MAJOR = getDefineINT("MINOR_QUEST_FRIENDSHIP_DENOUNCE_MAJOR");

	push	1
	push	OFFSET ??_C@_0CG@CFCDMNAO@MINOR_QUEST_FRIENDSHIP_DENOUNCE_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3120], eax

; 5311 : 	m_iMINOR_QUEST_FRIENDSHIP_SPREAD_RELIGION = getDefineINT("MINOR_QUEST_FRIENDSHIP_SPREAD_RELIGION");

	push	1
	push	OFFSET ??_C@_0CH@OFJMIPKE@MINOR_QUEST_FRIENDSHIP_SPREAD_RE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3124], eax

; 5312 : 	m_iMINOR_QUEST_FRIENDSHIP_TRADE_ROUTE = getDefineINT("MINOR_QUEST_FRIENDSHIP_TRADE_ROUTE");

	push	1
	push	OFFSET ??_C@_0CD@CLCBGADE@MINOR_QUEST_FRIENDSHIP_TRADE_ROU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3128], eax

; 5313 : 	m_iMINOR_QUEST_STANDARD_CONTEST_LENGTH = getDefineINT("MINOR_QUEST_STANDARD_CONTEST_LENGTH");

	push	1
	push	OFFSET ??_C@_0CE@GAKLKPAL@MINOR_QUEST_STANDARD_CONTEST_LEN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3132], eax

; 5314 : 	m_iMINOR_CIV_GOLD_GIFT_GAME_MULTIPLIER = getDefineINT("MINOR_CIV_GOLD_GIFT_GAME_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CE@DJNIHOBB@MINOR_CIV_GOLD_GIFT_GAME_MULTIPL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3136], eax

; 5315 : 	m_iMINOR_CIV_GOLD_GIFT_GAME_DIVISOR = getDefineINT("MINOR_CIV_GOLD_GIFT_GAME_DIVISOR");

	push	1
	push	OFFSET ??_C@_0CB@LAOHOCAH@MINOR_CIV_GOLD_GIFT_GAME_DIVISOR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3140], eax

; 5316 : 	m_iMINOR_CIV_GOLD_GIFT_VISIBLE_DIVISOR = getDefineINT("MINOR_CIV_GOLD_GIFT_VISIBLE_DIVISOR");

	push	1
	push	OFFSET ??_C@_0CE@DIGGGOGL@MINOR_CIV_GOLD_GIFT_VISIBLE_DIVI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3144], eax

; 5317 : 	m_iMINOR_CIV_GOLD_GIFT_MINIMUM_FRIENDSHIP_REWARD = getDefineINT("MINOR_CIV_GOLD_GIFT_MINIMUM_FRIENDSHIP_REWARD");

	push	1
	push	OFFSET ??_C@_0CO@KGEAHABH@MINOR_CIV_GOLD_GIFT_MINIMUM_FRIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3148], eax

; 5318 : 	m_iMINOR_CIV_BEST_RELATIONS_HAPPINESS_BONUS = getDefineINT("MINOR_CIV_BEST_RELATIONS_HAPPINESS_BONUS");

	push	1
	push	OFFSET ??_C@_0CJ@MFMHLKNB@MINOR_CIV_BEST_RELATIONS_HAPPINE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3152], eax

; 5319 : 	m_iMINOR_CIV_RESOURCE_SEARCH_RADIUS = getDefineINT("MINOR_CIV_RESOURCE_SEARCH_RADIUS");

	push	1
	push	OFFSET ??_C@_0CB@NNCLNFLL@MINOR_CIV_RESOURCE_SEARCH_RADIUS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3156], eax

; 5320 : 	m_iFRIENDSHIP_PER_UNIT_INTRUDING = getDefineINT("FRIENDSHIP_PER_UNIT_INTRUDING");

	push	1
	push	OFFSET ??_C@_0BO@MOJAFGBP@FRIENDSHIP_PER_UNIT_INTRUDING?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3160], eax

; 5321 : 	m_iFRIENDSHIP_PER_BARB_KILLED = getDefineINT("FRIENDSHIP_PER_BARB_KILLED");

	push	1
	push	OFFSET ??_C@_0BL@PGAIGKPP@FRIENDSHIP_PER_BARB_KILLED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3164], eax

; 5322 : 	m_iFRIENDSHIP_PER_UNIT_GIFTED = getDefineINT("FRIENDSHIP_PER_UNIT_GIFTED");

	push	1
	push	OFFSET ??_C@_0BL@FFJNGAL@FRIENDSHIP_PER_UNIT_GIFTED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3168], eax

; 5323 : 	m_iMAX_INFLUENCE_FROM_MINOR_GIFTS = getDefineINT("MAX_INFLUENCE_FROM_MINOR_GIFTS");

	push	1
	push	OFFSET ??_C@_0BP@DBNKPJAF@MAX_INFLUENCE_FROM_MINOR_GIFTS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3172], eax

; 5324 : 	m_iMINOR_LIBERATION_FRIENDSHIP = getDefineINT("MINOR_LIBERATION_FRIENDSHIP");

	push	1
	push	OFFSET ??_C@_0BM@PPDCEODI@MINOR_LIBERATION_FRIENDSHIP?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3176], eax

; 5325 : 	m_iRETURN_CIVILIAN_FRIENDSHIP = getDefineINT("RETURN_CIVILIAN_FRIENDSHIP");

	push	1
	push	OFFSET ??_C@_0BL@MENJPJCF@RETURN_CIVILIAN_FRIENDSHIP?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3180], eax

; 5326 : 	m_iMINOR_CIV_MAX_GLOBAL_QUESTS_FOR_PLAYER = getDefineINT("MINOR_CIV_MAX_GLOBAL_QUESTS_FOR_PLAYER");

	push	1
	push	OFFSET ??_C@_0CH@LOKANOKP@MINOR_CIV_MAX_GLOBAL_QUESTS_FOR_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3184], eax

; 5327 : 	m_iMINOR_CIV_MAX_PERSONAL_QUESTS_FOR_PLAYER = getDefineINT("MINOR_CIV_MAX_PERSONAL_QUESTS_FOR_PLAYER");

	push	1
	push	OFFSET ??_C@_0CJ@FJFLIOKH@MINOR_CIV_MAX_PERSONAL_QUESTS_FO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3188], eax

; 5328 : 	m_iMINOR_CIV_GLOBAL_QUEST_FIRST_POSSIBLE_TURN = getDefineINT("MINOR_CIV_GLOBAL_QUEST_FIRST_POSSIBLE_TURN");

	push	1
	push	OFFSET ??_C@_0CL@EDLCMEBO@MINOR_CIV_GLOBAL_QUEST_FIRST_POS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3192], eax

; 5329 : 	m_iMINOR_CIV_GLOBAL_QUEST_FIRST_POSSIBLE_TURN_RAND = getDefineINT("MINOR_CIV_GLOBAL_QUEST_FIRST_POSSIBLE_TURN_RAND");

	push	1
	push	OFFSET ??_C@_0DA@EJMDFFBA@MINOR_CIV_GLOBAL_QUEST_FIRST_POS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3196], eax

; 5330 : 	m_iMINOR_CIV_GLOBAL_QUEST_MIN_TURNS_BETWEEN = getDefineINT("MINOR_CIV_GLOBAL_QUEST_MIN_TURNS_BETWEEN");

	push	1
	push	OFFSET ??_C@_0CJ@PNDPLOOH@MINOR_CIV_GLOBAL_QUEST_MIN_TURNS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3200], eax

; 5331 : 	m_iMINOR_CIV_GLOBAL_QUEST_RAND_TURNS_BETWEEN = getDefineINT("MINOR_CIV_GLOBAL_QUEST_RAND_TURNS_BETWEEN");

	push	1
	push	OFFSET ??_C@_0CK@OFNPNGAC@MINOR_CIV_GLOBAL_QUEST_RAND_TURN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3204], eax

; 5332 : 	m_iMINOR_CIV_GLOBAL_QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER = getDefineINT("MINOR_CIV_GLOBAL_QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0DN@HBDKHJK@MINOR_CIV_GLOBAL_QUEST_RAND_TURN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3208], eax

; 5333 : 	m_iMINOR_CIV_PERSONAL_QUEST_FIRST_POSSIBLE_TURN = getDefineINT("MINOR_CIV_PERSONAL_QUEST_FIRST_POSSIBLE_TURN");

	push	1
	push	OFFSET ??_C@_0CN@NDIABKPJ@MINOR_CIV_PERSONAL_QUEST_FIRST_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3212], eax

; 5334 : 	m_iMINOR_CIV_PERSONAL_QUEST_FIRST_POSSIBLE_TURN_RAND = getDefineINT("MINOR_CIV_PERSONAL_QUEST_FIRST_POSSIBLE_TURN_RAND");

	push	1
	push	OFFSET ??_C@_0DC@EDBCDLJB@MINOR_CIV_PERSONAL_QUEST_FIRST_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3216], eax

; 5335 : 	m_iMINOR_CIV_PERSONAL_QUEST_MIN_TURNS_BETWEEN = getDefineINT("MINOR_CIV_PERSONAL_QUEST_MIN_TURNS_BETWEEN");

	push	1
	push	OFFSET ??_C@_0CL@DGEEEEPI@MINOR_CIV_PERSONAL_QUEST_MIN_TUR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3220], eax

; 5336 : 	m_iMINOR_CIV_PERSONAL_QUEST_RAND_TURNS_BETWEEN = getDefineINT("MINOR_CIV_PERSONAL_QUEST_RAND_TURNS_BETWEEN");

	push	1
	push	OFFSET ??_C@_0CM@GIBMKAAN@MINOR_CIV_PERSONAL_QUEST_RAND_TU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3224], eax

; 5337 : 	m_iMINOR_CIV_PERSONAL_QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER = getDefineINT("MINOR_CIV_PERSONAL_QUEST_RAND_TURNS_BETWEEN_HOSTILE_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0DP@GCHPEDKM@MINOR_CIV_PERSONAL_QUEST_RAND_TU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3228], eax

; 5338 : 	m_iMINOR_CIV_QUEST_KILL_CAMP_RANGE = getDefineINT("MINOR_CIV_QUEST_KILL_CAMP_RANGE");

	push	1
	push	OFFSET ??_C@_0CA@EJDADBJE@MINOR_CIV_QUEST_KILL_CAMP_RANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3232], eax

; 5339 : 	m_iMINOR_CIV_QUEST_WONDER_COMPLETION_THRESHOLD = getDefineINT("MINOR_CIV_QUEST_WONDER_COMPLETION_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CM@CPPFBFOA@MINOR_CIV_QUEST_WONDER_COMPLETIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3236], eax

; 5340 : 	m_iMINOR_CIV_THREATENED_BY_BARBS_NOTIF_THRESHOLD = getDefineINT("MINOR_CIV_THREATENED_BY_BARBS_NOTIF_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CO@KJFHFCJO@MINOR_CIV_THREATENED_BY_BARBS_NO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3240], eax

; 5341 : 	m_iMINOR_CIV_MERCANTILE_RESOURCES_QUANTITY = getDefineINT("MINOR_CIV_MERCANTILE_RESOURCES_QUANTITY");

	push	1
	push	OFFSET ??_C@_0CI@BLPFJMGO@MINOR_CIV_MERCANTILE_RESOURCES_Q@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3244], eax

; 5342 : 	m_iMINOR_CIV_MERCANTILE_RESOURCES_KEEP_ON_CAPTURE_DISABLED = getDefineINT("MINOR_CIV_MERCANTILE_RESOURCES_KEEP_ON_CAPTURE_DISABLED");

	push	1
	push	OFFSET ??_C@_0DI@MMHPDPEB@MINOR_CIV_MERCANTILE_RESOURCES_K@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3248], eax

; 5343 : 	m_iQUEST_DISABLED_ROUTE = getDefineINT("QUEST_DISABLED_ROUTE");

	push	1
	push	OFFSET ??_C@_0BF@MFJIJPBN@QUEST_DISABLED_ROUTE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3252], eax

; 5344 : 	m_iQUEST_DISABLED_KILL_CAMP = getDefineINT("QUEST_DISABLED_KILL_CAMP");

	push	1
	push	OFFSET ??_C@_0BJ@MFIBBCFI@QUEST_DISABLED_KILL_CAMP?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3256], eax

; 5345 : 	m_iQUEST_DISABLED_CONNECT_RESOURCE = getDefineINT("QUEST_DISABLED_CONNECT_RESOURCE");

	push	1
	push	OFFSET ??_C@_0CA@NAGHIJGH@QUEST_DISABLED_CONNECT_RESOURCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3260], eax

; 5346 : 	m_iQUEST_DISABLED_CONSTRUCT_WONDER = getDefineINT("QUEST_DISABLED_CONSTRUCT_WONDER");

	push	1
	push	OFFSET ??_C@_0CA@KHNIDLE@QUEST_DISABLED_CONSTRUCT_WONDER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3264], eax

; 5347 : 	m_iQUEST_DISABLED_GREAT_PERSON = getDefineINT("QUEST_DISABLED_GREAT_PERSON");

	push	1
	push	OFFSET ??_C@_0BM@NLJIANGA@QUEST_DISABLED_GREAT_PERSON?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3268], eax

; 5348 : 	m_iQUEST_DISABLED_KILL_CITY_STATE = getDefineINT("QUEST_DISABLED_KILL_CITY_STATE");

	push	1
	push	OFFSET ??_C@_0BP@GDIAOMAA@QUEST_DISABLED_KILL_CITY_STATE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3272], eax

; 5349 : 	m_iQUEST_DISABLED_FIND_PLAYER = getDefineINT("QUEST_DISABLED_FIND_PLAYER");

	push	1
	push	OFFSET ??_C@_0BL@MNFFHKF@QUEST_DISABLED_FIND_PLAYER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3276], eax

; 5350 : 	m_iQUEST_DISABLED_NATURAL_WONDER = getDefineINT("QUEST_DISABLED_NATURAL_WONDER");

	push	1
	push	OFFSET ??_C@_0BO@ONBCNIHG@QUEST_DISABLED_NATURAL_WONDER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3280], eax

; 5351 : 	m_iQUEST_DISABLED_GIVE_GOLD = getDefineINT("QUEST_DISABLED_GIVE_GOLD");

	push	1
	push	OFFSET ??_C@_0BJ@JNGNPGHH@QUEST_DISABLED_GIVE_GOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3284], eax

; 5352 : 	m_iQUEST_DISABLED_PLEDGE_TO_PROTECT = getDefineINT("QUEST_DISABLED_PLEDGE_TO_PROTECT");

	push	1
	push	OFFSET ??_C@_0CB@NLFBHACE@QUEST_DISABLED_PLEDGE_TO_PROTECT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3288], eax

; 5353 : 	m_iQUEST_DISABLED_CONTEST_CULTURE = getDefineINT("QUEST_DISABLED_CONTEST_CULTURE");

	push	1
	push	OFFSET ??_C@_0BP@EFKCDNON@QUEST_DISABLED_CONTEST_CULTURE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3292], eax

; 5354 : 	m_iQUEST_DISABLED_CONTEST_FAITH = getDefineINT("QUEST_DISABLED_CONTEST_FAITH");

	push	1
	push	OFFSET ??_C@_0BN@OOHMJAMN@QUEST_DISABLED_CONTEST_FAITH?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3296], eax

; 5355 : 	m_iQUEST_DISABLED_CONTEST_TECHS = getDefineINT("QUEST_DISABLED_CONTEST_TECHS");

	push	1
	push	OFFSET ??_C@_0BN@IGFFOEHH@QUEST_DISABLED_CONTEST_TECHS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3300], eax

; 5356 : 	m_iQUEST_DISABLED_INVEST = getDefineINT("QUEST_DISABLED_INVEST");

	push	1
	push	OFFSET ??_C@_0BG@KEDPOCGP@QUEST_DISABLED_INVEST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3304], eax

; 5357 : 	m_iQUEST_DISABLED_BULLY_CITY_STATE = getDefineINT("QUEST_DISABLED_BULLY_CITY_STATE");

	push	1
	push	OFFSET ??_C@_0CA@LHALNFP@QUEST_DISABLED_BULLY_CITY_STATE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3308], eax

; 5358 : 	m_iQUEST_DISABLED_DENOUNCE_MAJOR = getDefineINT("QUEST_DISABLED_DENOUNCE_MAJOR");

	push	1
	push	OFFSET ??_C@_0BO@LMJHO@QUEST_DISABLED_DENOUNCE_MAJOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3312], eax

; 5359 : 	m_iQUEST_DISABLED_SPREAD_RELIGION = getDefineINT("QUEST_DISABLED_SPREAD_RELIGION");

	push	1
	push	OFFSET ??_C@_0BP@LFLMNGJM@QUEST_DISABLED_SPREAD_RELIGION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3316], eax

; 5360 : 	m_iQUEST_DISABLED_TRADE_ROUTE = getDefineINT("QUEST_DISABLED_TRADE_ROUTE");

	push	1
	push	OFFSET ??_C@_0BL@FPEEEOCN@QUEST_DISABLED_TRADE_ROUTE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3320], eax

; 5361 : 	m_iMINOR_CIV_QUEST_WEIGHT_DEFAULT = getDefineINT("MINOR_CIV_QUEST_WEIGHT_DEFAULT");

	push	1
	push	OFFSET ??_C@_0BP@KKICENCP@MINOR_CIV_QUEST_WEIGHT_DEFAULT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3324], eax

; 5362 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_FRIENDLY_ROUTE = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_FRIENDLY_ROUTE");

	push	1
	push	OFFSET ??_C@_0DB@DENGEFCH@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3328], eax

; 5363 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_HOSTILE_ROUTE = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_HOSTILE_ROUTE");

	push	1
	push	OFFSET ??_C@_0DA@GDAHMKIF@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3332], eax

; 5364 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MARITIME_ROUTE = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MARITIME_ROUTE");

	push	1
	push	OFFSET ??_C@_0DB@CDPNIJEO@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3336], eax

; 5365 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_ROUTE = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_ROUTE");

	push	1
	push	OFFSET ??_C@_0DD@NGNFCMLI@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3340], eax

; 5366 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_KILL_CAMP = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_KILL_CAMP");

	push	1
	push	OFFSET ??_C@_0DJ@BFBJEGO@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3344], eax

; 5367 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MARITIME_CONNECT_RESOURCE = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MARITIME_CONNECT_RESOURCE");

	push	1
	push	OFFSET ??_C@_0DM@EIMACLOA@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3348], eax

; 5368 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_CONNECT_RESOURCE = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_CONNECT_RESOURCE");

	push	1
	push	OFFSET ??_C@_0DO@OIGFHNMP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3352], eax

; 5369 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_CULTURED_CONSTRUCT_WONDER = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_CULTURED_CONSTRUCT_WONDER");

	push	1
	push	OFFSET ??_C@_0DM@JECBIIAG@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3356], eax

; 5370 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_CULTURED_GREAT_PERSON = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_CULTURED_GREAT_PERSON");

	push	1
	push	OFFSET ??_C@_0DI@HGHFKHJE@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3360], eax

; 5371 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_KILL_CITY_STATE = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_KILL_CITY_STATE");

	push	1
	push	OFFSET ??_C@_0DP@DPPHMKIH@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3364], eax

; 5372 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_HOSTILE_KILL_CITY_STATE = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_HOSTILE_KILL_CITY_STATE");

	push	1
	push	OFFSET ??_C@_0DK@FLOCGACN@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3368], eax

; 5373 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_NEUTRAL_KILL_CITY_STATE = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_NEUTRAL_KILL_CITY_STATE");

	push	1
	push	OFFSET ??_C@_0DK@GJJNEALN@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3372], eax

; 5374 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MARITIME_FIND_PLAYER = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MARITIME_FIND_PLAYER");

	push	1
	push	OFFSET ??_C@_0DH@MIPIOEPN@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3376], eax

; 5375 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_FIND_PLAYER = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_FIND_PLAYER");

	push	1
	push	OFFSET ??_C@_0DJ@GFHNDIPF@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3380], eax

; 5376 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_FIND_NATURAL_WONDER = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_FIND_NATURAL_WONDER");

	push	1
	push	OFFSET ??_C@_0ED@JFBJHLLO@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3384], eax

; 5377 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_HOSTILE_FIND_NATURAL_WONDER = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_HOSTILE_FIND_NATURAL_WONDER");

	push	1
	push	OFFSET ??_C@_0DO@BOEKBJDM@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3388], eax

; 5378 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_GIVE_GOLD = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_GIVE_GOLD");

	push	1
	push	OFFSET ??_C@_0DJ@FJLNHAEB@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3392], eax

; 5379 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_GIVE_GOLD = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MERCANTILE_GIVE_GOLD");

	push	1
	push	OFFSET ??_C@_0DH@OBKJCPJP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3396], eax

; 5380 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_OTHER_GIVE_GOLD = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_OTHER_GIVE_GOLD");

	push	1
	push	OFFSET ??_C@_0DC@KPEJBMAC@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3400], eax

; 5381 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_PLEDGE_TO_PROTECT = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_MILITARISTIC_PLEDGE_TO_PROTECT");

	push	1
	push	OFFSET ??_C@_0EB@HNJOKHCC@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3404], eax

; 5382 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_CULTURED_PLEDGE_TO_PROTECT = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_CULTURED_PLEDGE_TO_PROTECT");

	push	1
	push	OFFSET ??_C@_0DN@POKAPOIP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3408], eax

; 5383 : 	m_iMINOR_CIV_QUEST_WEIGHT_MULTIPLIER_OTHER_PLEDGE_TO_PROTECT = getDefineINT("MINOR_CIV_QUEST_WEIGHT_MULTIPLIER_OTHER_PLEDGE_TO_PROTECT");

	push	1
	push	OFFSET ??_C@_0DK@NPONLKEP@MINOR_CIV_QUEST_WEIGHT_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3412], eax

; 5384 : 	m_iRELIGION_BELIEF_SCORE_CITY_MULTIPLIER = getDefineINT("RELIGION_BELIEF_SCORE_CITY_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CG@IHCIFGIG@RELIGION_BELIEF_SCORE_CITY_MULTI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3416], eax

; 5385 : 	m_iRELIGION_BELIEF_SCORE_WORKED_PLOT_MULTIPLIER = getDefineINT("RELIGION_BELIEF_SCORE_WORKED_PLOT_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CN@EIGIEAMH@RELIGION_BELIEF_SCORE_WORKED_PLO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3420], eax

; 5386 : 	m_iRELIGION_BELIEF_SCORE_OWNED_PLOT_MULTIPLIER = getDefineINT("RELIGION_BELIEF_SCORE_OWNED_PLOT_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CM@MLKMICPL@RELIGION_BELIEF_SCORE_OWNED_PLOT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3424], eax

; 5387 : 	m_iRELIGION_BELIEF_SCORE_UNOWNED_PLOT_MULTIPLIER = getDefineINT("RELIGION_BELIEF_SCORE_UNOWNED_PLOT_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CO@EEAEDMOM@RELIGION_BELIEF_SCORE_UNOWNED_PL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3428], eax

; 5388 : 	m_iRELIGION_MISSIONARY_RANGE_IN_TURNS = getDefineINT("RELIGION_MISSIONARY_RANGE_IN_TURNS");

	push	1
	push	OFFSET ??_C@_0CD@ELKGCKAL@RELIGION_MISSIONARY_RANGE_IN_TUR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3432], eax

; 5389 : 	m_iRELIGION_MAX_MISSIONARIES = getDefineINT("RELIGION_MAX_MISSIONARIES");

	push	1
	push	OFFSET ??_C@_0BK@NEMBJDLN@RELIGION_MAX_MISSIONARIES?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3436], eax

; 5390 : 	m_fNORMAL_ANNEX = getDefineFLOAT("NORMAL_ANNEX");

	push	1
	push	OFFSET ??_C@_0N@IAPIDFDC@NORMAL_ANNEX?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8192]

; 5391 : 	m_fAGGRESSIVE_ANNEX = getDefineFLOAT("AGGRESSIVE_ANNEX");

	push	1
	push	OFFSET ??_C@_0BB@CJMLANJF@AGGRESSIVE_ANNEX?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8196]

; 5392 : 	m_iMC_GIFT_WEIGHT_THRESHOLD = getDefineINT("MC_GIFT_WEIGHT_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BJ@NLLIOHCC@MC_GIFT_WEIGHT_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3440], eax

; 5393 : 	m_iMC_ALWAYS_GIFT_DIPLO_THRESHOLD = getDefineINT("MC_ALWAYS_GIFT_DIPLO_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BP@ENJMLGFD@MC_ALWAYS_GIFT_DIPLO_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3444], eax

; 5394 : 	m_iMC_SOMETIMES_GIFT_RAND_MULTIPLIER = getDefineINT("MC_SOMETIMES_GIFT_RAND_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CC@PNIBBFHE@MC_SOMETIMES_GIFT_RAND_MULTIPLIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3448], eax

; 5395 : 	m_iMC_SMALL_GIFT_WEIGHT_PASS_OTHER_PLAYER = getDefineINT("MC_SMALL_GIFT_WEIGHT_PASS_OTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0CH@KJMLEFGJ@MC_SMALL_GIFT_WEIGHT_PASS_OTHER_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3452], eax

; 5396 : 	m_iMC_GIFT_WEIGHT_PASS_OTHER_PLAYER = getDefineINT("MC_GIFT_WEIGHT_PASS_OTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0CB@ELGIHDI@MC_GIFT_WEIGHT_PASS_OTHER_PLAYER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3456], eax

; 5397 : 	m_iMC_GIFT_WEIGHT_MARITIME_GROWTH = getDefineINT("MC_GIFT_WEIGHT_MARITIME_GROWTH");

	push	1
	push	OFFSET ??_C@_0BP@HNAJLJDP@MC_GIFT_WEIGHT_MARITIME_GROWTH?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3460], eax

; 5398 : 	m_iMC_GIFT_WEIGHT_DIPLO_VICTORY = getDefineINT("MC_GIFT_WEIGHT_DIPLO_VICTORY");

	push	1
	push	OFFSET ??_C@_0BN@GEIGINON@MC_GIFT_WEIGHT_DIPLO_VICTORY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3464], eax

; 5399 : 	m_iMC_GIFT_WEIGHT_CULTURE_VICTORY = getDefineINT("MC_GIFT_WEIGHT_CULTURE_VICTORY");

	push	1
	push	OFFSET ??_C@_0BP@KDOPKKAC@MC_GIFT_WEIGHT_CULTURE_VICTORY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3468], eax

; 5400 : 	m_iMC_GIFT_WEIGHT_CONQUEST_VICTORY = getDefineINT("MC_GIFT_WEIGHT_CONQUEST_VICTORY");

	push	1
	push	OFFSET ??_C@_0CA@HHMLPMFI@MC_GIFT_WEIGHT_CONQUEST_VICTORY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3472], eax

; 5401 : 	m_iMC_GIFT_WEIGHT_MILITARISTIC = getDefineINT("MC_GIFT_WEIGHT_MILITARISTIC");

	push	1
	push	OFFSET ??_C@_0BM@LOJNEAGP@MC_GIFT_WEIGHT_MILITARISTIC?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3476], eax

; 5402 : 	m_iMC_GIFT_WEIGHT_RESOURCE_WE_NEED = getDefineINT("MC_GIFT_WEIGHT_RESOURCE_WE_NEED");

	push	1
	push	OFFSET ??_C@_0CA@MECGKECP@MC_GIFT_WEIGHT_RESOURCE_WE_NEED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3480], eax

; 5403 : 	m_iMC_GIFT_WEIGHT_NEUTRAL_VICTORY_ROLL = getDefineINT("MC_GIFT_WEIGHT_NEUTRAL_VICTORY_ROLL");

	push	1
	push	OFFSET ??_C@_0CE@DKKLKKBA@MC_GIFT_WEIGHT_NEUTRAL_VICTORY_R@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3484], eax

; 5404 : 	m_iMC_GIFT_WEIGHT_PROTECTIVE = getDefineINT("MC_GIFT_WEIGHT_PROTECTIVE");

	push	1
	push	OFFSET ??_C@_0BK@GEPLMMPL@MC_GIFT_WEIGHT_PROTECTIVE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3488], eax

; 5405 : 	m_iMC_GIFT_WEIGHT_HOSTILE = getDefineINT("MC_GIFT_WEIGHT_HOSTILE");

	push	1
	push	OFFSET ??_C@_0BH@FNFBKLKN@MC_GIFT_WEIGHT_HOSTILE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3492], eax

; 5406 : 	m_iMC_GIFT_WEIGHT_NEIGHBORS = getDefineINT("MC_GIFT_WEIGHT_NEIGHBORS");

	push	1
	push	OFFSET ??_C@_0BJ@JMKPMNBF@MC_GIFT_WEIGHT_NEIGHBORS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3496], eax

; 5407 : 	m_iMC_GIFT_WEIGHT_CLOSE = getDefineINT("MC_GIFT_WEIGHT_CLOSE");

	push	1
	push	OFFSET ??_C@_0BF@FCCEAOKA@MC_GIFT_WEIGHT_CLOSE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3500], eax

; 5408 : 	m_iMC_GIFT_WEIGHT_FAR = getDefineINT("MC_GIFT_WEIGHT_FAR");

	push	1
	push	OFFSET ??_C@_0BD@LHIOOCFH@MC_GIFT_WEIGHT_FAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3504], eax

; 5409 : 	m_iMC_GIFT_WEIGHT_ALMOST_NOT_ALLIES = getDefineINT("MC_GIFT_WEIGHT_ALMOST_NOT_ALLIES");

	push	1
	push	OFFSET ??_C@_0CB@OENEAKAC@MC_GIFT_WEIGHT_ALMOST_NOT_ALLIES@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3508], eax

; 5410 : 	m_iMC_GIFT_WEIGHT_ALMOST_NOT_FRIENDS = getDefineINT("MC_GIFT_WEIGHT_ALMOST_NOT_FRIENDS");

	push	1
	push	OFFSET ??_C@_0CC@BJANBLHN@MC_GIFT_WEIGHT_ALMOST_NOT_FRIEND@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3512], eax

; 5411 : 	m_iOPINION_WEIGHT_LAND_FIERCE = getDefineINT("OPINION_WEIGHT_LAND_FIERCE");

	push	1
	push	OFFSET ??_C@_0BL@FFFFJPHB@OPINION_WEIGHT_LAND_FIERCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3516], eax

; 5412 : 	m_iOPINION_WEIGHT_LAND_STRONG = getDefineINT("OPINION_WEIGHT_LAND_STRONG");

	push	1
	push	OFFSET ??_C@_0BL@JFKGAIFM@OPINION_WEIGHT_LAND_STRONG?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3520], eax

; 5413 : 	m_iOPINION_WEIGHT_LAND_WEAK = getDefineINT("OPINION_WEIGHT_LAND_WEAK");

	push	1
	push	OFFSET ??_C@_0BJ@NIKFJLFB@OPINION_WEIGHT_LAND_WEAK?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3524], eax

; 5414 : 	m_iOPINION_WEIGHT_LAND_NONE = getDefineINT("OPINION_WEIGHT_LAND_NONE");

	push	1
	push	OFFSET ??_C@_0BJ@EPDHOEHF@OPINION_WEIGHT_LAND_NONE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3528], eax

; 5415 : 	m_iOPINION_WEIGHT_VICTORY_FIERCE = getDefineINT("OPINION_WEIGHT_VICTORY_FIERCE");

	push	1
	push	OFFSET ??_C@_0BO@IODPBOPB@OPINION_WEIGHT_VICTORY_FIERCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3532], eax

; 5416 : 	m_iOPINION_WEIGHT_VICTORY_STRONG = getDefineINT("OPINION_WEIGHT_VICTORY_STRONG");

	push	1
	push	OFFSET ??_C@_0BO@EOMMIJNM@OPINION_WEIGHT_VICTORY_STRONG?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3536], eax

; 5417 : 	m_iOPINION_WEIGHT_VICTORY_WEAK = getDefineINT("OPINION_WEIGHT_VICTORY_WEAK");

	push	1
	push	OFFSET ??_C@_0BM@CLJEEAPF@OPINION_WEIGHT_VICTORY_WEAK?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3540], eax

; 5418 : 	m_iOPINION_WEIGHT_VICTORY_NONE = getDefineINT("OPINION_WEIGHT_VICTORY_NONE");

	push	1
	push	OFFSET ??_C@_0BM@LMAGDPNB@OPINION_WEIGHT_VICTORY_NONE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3544], eax

; 5419 : 	m_iOPINION_WEIGHT_WONDER_FIERCE = getDefineINT("OPINION_WEIGHT_WONDER_FIERCE");

	push	1
	push	OFFSET ??_C@_0BN@BLCJFIGM@OPINION_WEIGHT_WONDER_FIERCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3548], eax

; 5420 : 	m_iOPINION_WEIGHT_WONDER_STRONG = getDefineINT("OPINION_WEIGHT_WONDER_STRONG");

	push	1
	push	OFFSET ??_C@_0BN@NLNKMPEB@OPINION_WEIGHT_WONDER_STRONG?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3552], eax

; 5421 : 	m_iOPINION_WEIGHT_WONDER_WEAK = getDefineINT("OPINION_WEIGHT_WONDER_WEAK");

	push	1
	push	OFFSET ??_C@_0BL@JLCFNLBJ@OPINION_WEIGHT_WONDER_WEAK?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3556], eax

; 5422 : 	m_iOPINION_WEIGHT_WONDER_NONE = getDefineINT("OPINION_WEIGHT_WONDER_NONE");

	push	1
	push	OFFSET ??_C@_0BL@MLHKEDN@OPINION_WEIGHT_WONDER_NONE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3560], eax

; 5423 : 	m_iOPINION_WEIGHT_MINOR_CIV_FIERCE = getDefineINT("OPINION_WEIGHT_MINOR_CIV_FIERCE");

	push	1
	push	OFFSET ??_C@_0CA@HICLLBKH@OPINION_WEIGHT_MINOR_CIV_FIERCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3564], eax

; 5424 : 	m_iOPINION_WEIGHT_MINOR_CIV_STRONG = getDefineINT("OPINION_WEIGHT_MINOR_CIV_STRONG");

	push	1
	push	OFFSET ??_C@_0CA@LINICGIK@OPINION_WEIGHT_MINOR_CIV_STRONG?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3568], eax

; 5425 : 	m_iOPINION_WEIGHT_MINOR_CIV_WEAK = getDefineINT("OPINION_WEIGHT_MINOR_CIV_WEAK");

	push	1
	push	OFFSET ??_C@_0BO@MFBBNDJP@OPINION_WEIGHT_MINOR_CIV_WEAK?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3572], eax

; 5426 : 	m_iOPINION_WEIGHT_MINOR_CIV_NONE = getDefineINT("OPINION_WEIGHT_MINOR_CIV_NONE");

	push	1
	push	OFFSET ??_C@_0BO@FCIDKMLL@OPINION_WEIGHT_MINOR_CIV_NONE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3576], eax

; 5427 : 	m_iOPINION_WEIGHT_WARMONGER_CRITICAL = getDefineINT("OPINION_WEIGHT_WARMONGER_CRITICAL");

	push	1
	push	OFFSET ??_C@_0CC@CPIEKODG@OPINION_WEIGHT_WARMONGER_CRITICA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3580], eax

; 5428 : 	m_iOPINION_WEIGHT_WARMONGER_SEVERE = getDefineINT("OPINION_WEIGHT_WARMONGER_SEVERE");

	push	1
	push	OFFSET ??_C@_0CA@OIGNAHNM@OPINION_WEIGHT_WARMONGER_SEVERE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3584], eax

; 5429 : 	m_iOPINION_WEIGHT_WARMONGER_MAJOR = getDefineINT("OPINION_WEIGHT_WARMONGER_MAJOR");

	push	1
	push	OFFSET ??_C@_0BP@IGBPCIC@OPINION_WEIGHT_WARMONGER_MAJOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3588], eax

; 5430 : 	m_iOPINION_WEIGHT_WARMONGER_MINOR = getDefineINT("OPINION_WEIGHT_WARMONGER_MINOR");

	push	1
	push	OFFSET ??_C@_0BP@LHHDCOBE@OPINION_WEIGHT_WARMONGER_MINOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3592], eax

; 5431 : 	m_iOPINION_WEIGHT_WARMONGER_NONE = getDefineINT("OPINION_WEIGHT_WARMONGER_NONE");

	push	1
	push	OFFSET ??_C@_0BO@NDDDNCCA@OPINION_WEIGHT_WARMONGER_NONE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3596], eax

; 5432 : 	m_iOPINION_WEIGHT_ASKED_NO_SETTLE = getDefineINT("OPINION_WEIGHT_ASKED_NO_SETTLE");

	push	1
	push	OFFSET ??_C@_0BP@BLPAHKGP@OPINION_WEIGHT_ASKED_NO_SETTLE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3600], eax

; 5433 : 	m_iOPINION_WEIGHT_ASKED_STOP_SPYING = getDefineINT("OPINION_WEIGHT_ASKED_STOP_SPYING");

	push	1
	push	OFFSET ??_C@_0CB@MHFBGJDD@OPINION_WEIGHT_ASKED_STOP_SPYING@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3604], eax

; 5434 : 	m_iOPINION_WEIGHT_MADE_DEMAND_OF_US = getDefineINT("OPINION_WEIGHT_MADE_DEMAND_OF_US");

	push	1
	push	OFFSET ??_C@_0CB@BNNABPNA@OPINION_WEIGHT_MADE_DEMAND_OF_US@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3608], eax

; 5435 : 	m_iOPINION_WEIGHT_RETURNED_CIVILIAN = getDefineINT("OPINION_WEIGHT_RETURNED_CIVILIAN");

	push	1
	push	OFFSET ??_C@_0CB@CJMENLAH@OPINION_WEIGHT_RETURNED_CIVILIAN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3612], eax

; 5436 : 	m_iOPINION_WEIGHT_BUILT_LANDMARK = getDefineINT("OPINION_WEIGHT_BUILT_LANDMARK");

	push	1
	push	OFFSET ??_C@_0BO@LFKIFCGA@OPINION_WEIGHT_BUILT_LANDMARK?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3616], eax

; 5437 : 	m_iOPINION_WEIGHT_RESURRECTED = getDefineINT("OPINION_WEIGHT_RESURRECTED");

	push	1
	push	OFFSET ??_C@_0BL@KBKFAEID@OPINION_WEIGHT_RESURRECTED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3620], eax

; 5438 : 	m_iOPINION_WEIGHT_LIBERATED_ONE_CITY = getDefineINT("OPINION_WEIGHT_LIBERATED_ONE_CITY");

	push	1
	push	OFFSET ??_C@_0CC@CMEGAJIK@OPINION_WEIGHT_LIBERATED_ONE_CIT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3624], eax

; 5439 : 	m_iOPINION_WEIGHT_LIBERATED_TWO_CITIES = getDefineINT("OPINION_WEIGHT_LIBERATED_TWO_CITIES");

	push	1
	push	OFFSET ??_C@_0CE@MMCMJBDD@OPINION_WEIGHT_LIBERATED_TWO_CIT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3628], eax

; 5440 : 	m_iOPINION_WEIGHT_LIBERATED_THREE_CITIES = getDefineINT("OPINION_WEIGHT_LIBERATED_THREE_CITIES");

	push	1
	push	OFFSET ??_C@_0CG@LGFFELLN@OPINION_WEIGHT_LIBERATED_THREE_C@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3632], eax

; 5441 : 	m_iOPINION_WEIGHT_EMBASSY = getDefineINT("OPINION_WEIGHT_EMBASSY");

	push	1
	push	OFFSET ??_C@_0BH@BKOKPIIN@OPINION_WEIGHT_EMBASSY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3636], eax

; 5442 : 	m_iOPINION_WEIGHT_CULTURE_BOMBED = getDefineINT("OPINION_WEIGHT_CULTURE_BOMBED");

	push	1
	push	OFFSET ??_C@_0BO@MLKJPMMI@OPINION_WEIGHT_CULTURE_BOMBED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3640], eax

; 5443 : 	m_iOPINION_WEIGHT_PER_NEGATIVE_CONVERSION = getDefineINT("OPINION_WEIGHT_PER_NEGATIVE_CONVERSION");

	push	1
	push	OFFSET ??_C@_0CH@PNOPKKKI@OPINION_WEIGHT_PER_NEGATIVE_CONV@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3644], eax

; 5444 : 	m_iOPINION_WEIGHT_ADOPTING_HIS_RELIGION = getDefineINT("OPINION_WEIGHT_ADOPTING_HIS_RELIGION");

	push	1
	push	OFFSET ??_C@_0CF@JNKODEDO@OPINION_WEIGHT_ADOPTING_HIS_RELI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3648], eax

; 5445 : 	m_iOPINION_WEIGHT_ADOPTING_MY_RELIGION = getDefineINT("OPINION_WEIGHT_ADOPTING_MY_RELIGION");

	push	1
	push	OFFSET ??_C@_0CE@MBFDCBOD@OPINION_WEIGHT_ADOPTING_MY_RELIG@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3652], eax

; 5446 : 	m_iOPINION_WEIGHT_SAME_LATE_POLICIES = getDefineINT("OPINION_WEIGHT_SAME_LATE_POLICIES");

	push	1
	push	OFFSET ??_C@_0CC@BGIFIPM@OPINION_WEIGHT_SAME_LATE_POLICIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3656], eax

; 5447 : 	m_iOPINION_WEIGHT_DIFFERENT_LATE_POLICIES = getDefineINT("OPINION_WEIGHT_DIFFERENT_LATE_POLICIES");

	push	1
	push	OFFSET ??_C@_0CH@ICOMMJAM@OPINION_WEIGHT_DIFFERENT_LATE_PO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3660], eax

; 5448 : 	m_iOPINION_WEIGHT_BROKEN_MILITARY_PROMISE = getDefineINT("OPINION_WEIGHT_BROKEN_MILITARY_PROMISE");

	push	1
	push	OFFSET ??_C@_0CH@HGHKLHPM@OPINION_WEIGHT_BROKEN_MILITARY_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3664], eax

; 5449 : 	m_iOPINION_WEIGHT_BROKEN_MILITARY_PROMISE_WORLD = getDefineINT("OPINION_WEIGHT_BROKEN_MILITARY_PROMISE_WORLD");

	push	1
	push	OFFSET ??_C@_0CN@GGNAOHJ@OPINION_WEIGHT_BROKEN_MILITARY_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3668], eax

; 5450 : 	m_iOPINION_WEIGHT_IGNORED_MILITARY_PROMISE = getDefineINT("OPINION_WEIGHT_IGNORED_MILITARY_PROMISE");

	push	1
	push	OFFSET ??_C@_0CI@OBGBLADH@OPINION_WEIGHT_IGNORED_MILITARY_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3672], eax

; 5451 : 	m_iOPINION_WEIGHT_BROKEN_EXPANSION_PROMISE = getDefineINT("OPINION_WEIGHT_BROKEN_EXPANSION_PROMISE");

	push	1
	push	OFFSET ??_C@_0CI@KHPAKALJ@OPINION_WEIGHT_BROKEN_EXPANSION_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3676], eax

; 5452 : 	m_iOPINION_WEIGHT_IGNORED_EXPANSION_PROMISE = getDefineINT("OPINION_WEIGHT_IGNORED_EXPANSION_PROMISE");

	push	1
	push	OFFSET ??_C@_0CJ@KLNBKAIG@OPINION_WEIGHT_IGNORED_EXPANSION@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3680], eax

; 5453 : 	m_iOPINION_WEIGHT_BROKEN_BORDER_PROMISE = getDefineINT("OPINION_WEIGHT_BROKEN_BORDER_PROMISE");

	push	1
	push	OFFSET ??_C@_0CF@GHDNJGOK@OPINION_WEIGHT_BROKEN_BORDER_PRO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3684], eax

; 5454 : 	m_iOPINION_WEIGHT_IGNORED_BORDER_PROMISE = getDefineINT("OPINION_WEIGHT_IGNORED_BORDER_PROMISE");

	push	1
	push	OFFSET ??_C@_0CG@LFFOBLJJ@OPINION_WEIGHT_IGNORED_BORDER_PR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3688], eax

; 5455 : 	m_iOPINION_WEIGHT_BROKEN_CITY_STATE_PROMISE = getDefineINT("OPINION_WEIGHT_BROKEN_CITY_STATE_PROMISE");

	push	1
	push	OFFSET ??_C@_0CJ@BKIBKBBP@OPINION_WEIGHT_BROKEN_CITY_STATE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3692], eax

; 5456 : 	m_iOPINION_WEIGHT_BROKEN_CITY_STATE_PROMISE_WORLD = getDefineINT("OPINION_WEIGHT_BROKEN_CITY_STATE_PROMISE_WORLD");

	push	1
	push	OFFSET ??_C@_0CP@GJLHKGJF@OPINION_WEIGHT_BROKEN_CITY_STATE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3696], eax

; 5457 : 	m_iOPINION_WEIGHT_IGNORED_CITY_STATE_PROMISE = getDefineINT("OPINION_WEIGHT_IGNORED_CITY_STATE_PROMISE");

	push	1
	push	OFFSET ??_C@_0CK@KMOLKNCC@OPINION_WEIGHT_IGNORED_CITY_STAT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3700], eax

; 5458 : 	m_iOPINION_WEIGHT_BROKEN_SPY_PROMISE = getDefineINT("OPINION_WEIGHT_BROKEN_SPY_PROMISE");

	push	1
	push	OFFSET ??_C@_0CC@PPAPEFML@OPINION_WEIGHT_BROKEN_SPY_PROMIS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3704], eax

; 5459 : 	m_iOPINION_WEIGHT_IGNORED_SPY_PROMISE = getDefineINT("OPINION_WEIGHT_IGNORED_SPY_PROMISE");

	push	1
	push	OFFSET ??_C@_0CD@HBKCALNG@OPINION_WEIGHT_IGNORED_SPY_PROMI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3708], eax

; 5460 : 	m_iOPINION_WEIGHT_FORGAVE_FOR_SPYING = getDefineINT("OPINION_WEIGHT_FORGAVE_FOR_SPYING");

	push	1
	push	OFFSET ??_C@_0CC@JOKECKPM@OPINION_WEIGHT_FORGAVE_FOR_SPYIN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3712], eax

; 5461 : 	m_iOPINION_WEIGHT_BROKEN_NO_CONVERT_PROMISE = getDefineINT("OPINION_WEIGHT_BROKEN_NO_CONVERT_PROMISE");

	push	1
	push	OFFSET ??_C@_0CJ@FCGBGANE@OPINION_WEIGHT_BROKEN_NO_CONVERT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3716], eax

; 5462 : 	m_iOPINION_WEIGHT_IGNORED_NO_CONVERT_PROMISE = getDefineINT("OPINION_WEIGHT_IGNORED_NO_CONVERT_PROMISE");

	push	1
	push	OFFSET ??_C@_0CK@OEALGMOJ@OPINION_WEIGHT_IGNORED_NO_CONVER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3720], eax

; 5463 : 	m_iOPINION_WEIGHT_BROKEN_NO_DIG_PROMISE = getDefineINT("OPINION_WEIGHT_BROKEN_NO_DIG_PROMISE");

	push	1
	push	OFFSET ??_C@_0CF@KOHJIHBL@OPINION_WEIGHT_BROKEN_NO_DIG_PRO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3724], eax

; 5464 : 	m_iOPINION_WEIGHT_IGNORED_NO_DIG_PROMISE = getDefineINT("OPINION_WEIGHT_IGNORED_NO_DIG_PROMISE");

	push	1
	push	OFFSET ??_C@_0CG@HMBKAKGI@OPINION_WEIGHT_IGNORED_NO_DIG_PR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3728], eax

; 5465 : 	m_iOPINION_WEIGHT_BROKEN_COOP_WAR_PROMISE = getDefineINT("OPINION_WEIGHT_BROKEN_COOP_WAR_PROMISE");

	push	1
	push	OFFSET ??_C@_0CH@HGEOCBFJ@OPINION_WEIGHT_BROKEN_COOP_WAR_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3732], eax

; 5466 : 	m_iOPINION_WEIGHT_KILLED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN = getDefineINT("OPINION_WEIGHT_KILLED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN");

	push	1
	push	OFFSET ??_C@_0DP@EIEGNBC@OPINION_WEIGHT_KILLED_PROTECTED_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3736], eax

; 5467 : 	m_iOPINION_WEIGHT_KILLED_PROTECTED_MINOR = getDefineINT("OPINION_WEIGHT_KILLED_PROTECTED_MINOR");

	push	1
	push	OFFSET ??_C@_0CG@ENGJNFEN@OPINION_WEIGHT_KILLED_PROTECTED_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3740], eax

; 5468 : 	m_iOPINION_WEIGHT_KILLED_MANY_PROTECTED_MINORS = getDefineINT("OPINION_WEIGHT_KILLED_MANY_PROTECTED_MINORS");

	push	1
	push	OFFSET ??_C@_0CM@OLNPGDEE@OPINION_WEIGHT_KILLED_MANY_PROTE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3744], eax

; 5469 : 	m_iOPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN = getDefineINT("OPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN");

	push	1
	push	OFFSET ??_C@_0EB@GEKPEAGC@OPINION_WEIGHT_ATTACKED_PROTECTE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3748], eax

; 5470 : 	m_iOPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_RECENTLY_NUM_TURNS = getDefineINT("OPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_RECENTLY_NUM_TURNS");

	push	1
	push	OFFSET ??_C@_0DL@CHDOMHH@OPINION_WEIGHT_ATTACKED_PROTECTE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3752], eax

; 5471 : 	m_iOPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_RECENTLY = getDefineINT("OPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_RECENTLY");

	push	1
	push	OFFSET ??_C@_0DB@BIPKNCJM@OPINION_WEIGHT_ATTACKED_PROTECTE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3756], eax

; 5472 : 	m_iOPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_WHILE_AGO = getDefineINT("OPINION_WEIGHT_ATTACKED_PROTECTED_MINOR_WHILE_AGO");

	push	1
	push	OFFSET ??_C@_0DC@GELLJEAK@OPINION_WEIGHT_ATTACKED_PROTECTE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3760], eax

; 5473 : 	m_iOPINION_WEIGHT_ATTACKED_MANY_PROTECTED_MINORS = getDefineINT("OPINION_WEIGHT_ATTACKED_MANY_PROTECTED_MINORS");

	push	1
	push	OFFSET ??_C@_0CO@FGGKBHPN@OPINION_WEIGHT_ATTACKED_MANY_PRO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3764], eax

; 5474 : 	m_iOPINION_WEIGHT_BULLIED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN = getDefineINT("OPINION_WEIGHT_BULLIED_PROTECTED_MINOR_NUM_TURNS_UNTIL_FORGIVEN");

	push	1
	push	OFFSET ??_C@_0EA@PECFNFCD@OPINION_WEIGHT_BULLIED_PROTECTED@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3768], eax

; 5475 : 	m_iOPINION_WEIGHT_BULLIED_PROTECTED_MINOR_RECENTLY_NUM_TURNS = getDefineINT("OPINION_WEIGHT_BULLIED_PROTECTED_MINOR_RECENTLY_NUM_TURNS");

	push	1
	push	OFFSET ??_C@_0DK@FIOJLLBN@OPINION_WEIGHT_BULLIED_PROTECTED@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3772], eax

; 5476 : 	m_iOPINION_WEIGHT_BULLIED_PROTECTED_MINOR_RECENTLY = getDefineINT("OPINION_WEIGHT_BULLIED_PROTECTED_MINOR_RECENTLY");

	push	1
	push	OFFSET ??_C@_0DA@DNJHALAB@OPINION_WEIGHT_BULLIED_PROTECTED@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3776], eax

; 5477 : 	m_iOPINION_WEIGHT_BULLIED_PROTECTED_MINOR_WHILE_AGO = getDefineINT("OPINION_WEIGHT_BULLIED_PROTECTED_MINOR_WHILE_AGO");

	push	1
	push	OFFSET ??_C@_0DB@OKCABGCK@OPINION_WEIGHT_BULLIED_PROTECTED@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3780], eax

; 5478 : 	m_iOPINION_WEIGHT_BULLIED_MANY_PROTECTED_MINORS = getDefineINT("OPINION_WEIGHT_BULLIED_MANY_PROTECTED_MINORS");

	push	1
	push	OFFSET ??_C@_0CN@POOJBOCH@OPINION_WEIGHT_BULLIED_MANY_PROT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3784], eax

; 5479 : 	m_iOPINION_WEIGHT_SIDED_WITH_THEIR_MINOR_NUM_TURNS_UNTIL_FORGIVEN = getDefineINT("OPINION_WEIGHT_SIDED_WITH_THEIR_MINOR_NUM_TURNS_UNTIL_FORGIVEN");

	push	1
	push	OFFSET ??_C@_0DP@MLAMFGPP@OPINION_WEIGHT_SIDED_WITH_THEIR_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3788], eax

; 5480 : 	m_iOPINION_WEIGHT_SIDED_WITH_THEIR_MINOR = getDefineINT("OPINION_WEIGHT_SIDED_WITH_THEIR_MINOR");

	push	1
	push	OFFSET ??_C@_0CG@MINIOCHN@OPINION_WEIGHT_SIDED_WITH_THEIR_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3792], eax

; 5481 : 	m_iOPINION_WEIGHT_DOF = getDefineINT("OPINION_WEIGHT_DOF");

	push	1
	push	OFFSET ??_C@_0BD@MEDGEIBP@OPINION_WEIGHT_DOF?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3796], eax

; 5482 : 	m_iOPINION_WEIGHT_DOF_WITH_FRIEND = getDefineINT("OPINION_WEIGHT_DOF_WITH_FRIEND");

	push	1
	push	OFFSET ??_C@_0BP@HBMLGLLF@OPINION_WEIGHT_DOF_WITH_FRIEND?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3800], eax

; 5483 : 	m_iOPINION_WEIGHT_DOF_WITH_ENEMY = getDefineINT("OPINION_WEIGHT_DOF_WITH_ENEMY");

	push	1
	push	OFFSET ??_C@_0BO@GJJNNLHG@OPINION_WEIGHT_DOF_WITH_ENEMY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3804], eax

; 5484 : 	m_iOPINION_WEIGHT_DENOUNCED_BY_FRIEND_EACH = getDefineINT("OPINION_WEIGHT_DENOUNCED_BY_FRIEND_EACH");

	push	1
	push	OFFSET ??_C@_0CI@IHJPOEHG@OPINION_WEIGHT_DENOUNCED_BY_FRIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3808], eax

; 5485 : 	m_iOPINION_WEIGHT_DENOUNCED_BY_FRIEND_DONT_LIKE = getDefineINT("OPINION_WEIGHT_DENOUNCED_BY_FRIEND_DONT_LIKE");

	push	1
	push	OFFSET ??_C@_0CN@MGHPKADK@OPINION_WEIGHT_DENOUNCED_BY_FRIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3812], eax

; 5486 : 	m_iOPINION_WEIGHT_DENOUNCED_FRIEND_EACH = getDefineINT("OPINION_WEIGHT_DENOUNCED_FRIEND_EACH");

	push	1
	push	OFFSET ??_C@_0CF@PIIAEAPP@OPINION_WEIGHT_DENOUNCED_FRIEND_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3816], eax

; 5487 : 	m_iOPINION_WEIGHT_DENOUNCED_ME_FRIENDS = getDefineINT("OPINION_WEIGHT_DENOUNCED_ME_FRIENDS");

	push	1
	push	OFFSET ??_C@_0CE@IAFHEDEO@OPINION_WEIGHT_DENOUNCED_ME_FRIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3820], eax

; 5488 : 	m_iOPINION_WEIGHT_WAR_FRIEND_EACH = getDefineINT("OPINION_WEIGHT_WAR_FRIEND_EACH");

	push	1
	push	OFFSET ??_C@_0BP@GANDNAID@OPINION_WEIGHT_WAR_FRIEND_EACH?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3824], eax

; 5489 : 	m_iOPINION_WEIGHT_WAR_ME_FRIENDS = getDefineINT("OPINION_WEIGHT_WAR_ME_FRIENDS");

	push	1
	push	OFFSET ??_C@_0BO@BOHIDAM@OPINION_WEIGHT_WAR_ME_FRIENDS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3828], eax

; 5490 : 	m_iOPINION_WEIGHT_REFUSED_REQUEST_EACH = getDefineINT("OPINION_WEIGHT_REFUSED_REQUEST_EACH");

	push	1
	push	OFFSET ??_C@_0CE@OEBNOAAF@OPINION_WEIGHT_REFUSED_REQUEST_E@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3832], eax

; 5491 : 	m_iOPINION_WEIGHT_DENOUNCED_ME = getDefineINT("OPINION_WEIGHT_DENOUNCED_ME");

	push	1
	push	OFFSET ??_C@_0BM@BCHLKJEI@OPINION_WEIGHT_DENOUNCED_ME?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3836], eax

; 5492 : 	m_iOPINION_WEIGHT_DENOUNCED_THEM = getDefineINT("OPINION_WEIGHT_DENOUNCED_THEM");

	push	1
	push	OFFSET ??_C@_0BO@DLLGJPHH@OPINION_WEIGHT_DENOUNCED_THEM?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3840], eax

; 5493 : 	m_iOPINION_WEIGHT_DENOUNCED_FRIEND = getDefineINT("OPINION_WEIGHT_DENOUNCED_FRIEND");

	push	1
	push	OFFSET ??_C@_0CA@LMJHBJGN@OPINION_WEIGHT_DENOUNCED_FRIEND?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3844], eax

; 5494 : 	m_iOPINION_WEIGHT_DENOUNCED_ENEMY = getDefineINT("OPINION_WEIGHT_DENOUNCED_ENEMY");

	push	1
	push	OFFSET ??_C@_0BP@OCOJJAID@OPINION_WEIGHT_DENOUNCED_ENEMY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3848], eax

; 5495 : 	m_iOPINION_WEIGHT_RECKLESS_EXPANDER = getDefineINT("OPINION_WEIGHT_RECKLESS_EXPANDER");

	push	1
	push	OFFSET ??_C@_0CB@JAFPFEJJ@OPINION_WEIGHT_RECKLESS_EXPANDER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3852], eax

; 5496 : 	m_iOPINION_WEIGHT_TRADE_MAX = getDefineINT("OPINION_WEIGHT_TRADE_MAX");

	push	1
	push	OFFSET ??_C@_0BJ@JGNHDFBE@OPINION_WEIGHT_TRADE_MAX?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3856], eax

; 5497 : 	m_iOPINION_WEIGHT_COMMON_FOE_MAX = getDefineINT("OPINION_WEIGHT_COMMON_FOE_MAX");

	push	1
	push	OFFSET ??_C@_0BO@HLKLGIIC@OPINION_WEIGHT_COMMON_FOE_MAX?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3860], eax

; 5498 : 	m_iOPINION_WEIGHT_ASSIST_MAX = getDefineINT("OPINION_WEIGHT_ASSIST_MAX");

	push	1
	push	OFFSET ??_C@_0BK@GMLGBCBH@OPINION_WEIGHT_ASSIST_MAX?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3864], eax

; 5499 : 	m_iOPINION_WEIGHT_LIBERATED_CAPITAL = getDefineINT("OPINION_WEIGHT_LIBERATED_CAPITAL");

	push	1
	push	OFFSET ??_C@_0CB@NBLKNKIF@OPINION_WEIGHT_LIBERATED_CAPITAL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3868], eax

; 5500 : 	m_iOPINION_WEIGHT_LIBERATED_CITY = getDefineINT("OPINION_WEIGHT_LIBERATED_CITY");

	push	1
	push	OFFSET ??_C@_0BO@OHOAMABE@OPINION_WEIGHT_LIBERATED_CITY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3872], eax

; 5501 : 	m_iOPINION_WEIGHT_GAVE_ASSISTANCE = getDefineINT("OPINION_WEIGHT_GAVE_ASSISTANCE");

	push	1
	push	OFFSET ??_C@_0BP@ICMFGNMG@OPINION_WEIGHT_GAVE_ASSISTANCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3876], eax

; 5502 : 	m_iOPINION_WEIGHT_PAID_TRIBUTE = getDefineINT("OPINION_WEIGHT_PAID_TRIBUTE");

	push	1
	push	OFFSET ??_C@_0BM@IJCMMNEI@OPINION_WEIGHT_PAID_TRIBUTE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3880], eax

; 5503 : 	m_iOPINION_WEIGHT_NUKED_MAX = getDefineINT("OPINION_WEIGHT_NUKED_MAX");

	push	1
	push	OFFSET ??_C@_0BJ@DONBINCF@OPINION_WEIGHT_NUKED_MAX?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3884], eax

; 5504 : 	m_iOPINION_WEIGHT_ROBBED_BY = getDefineINT("OPINION_WEIGHT_ROBBED_BY");

	push	1
	push	OFFSET ??_C@_0BJ@NNGEGEDD@OPINION_WEIGHT_ROBBED_BY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3888], eax

; 5505 : 	m_iOPINION_WEIGHT_INTRIGUE_SHARED_BY = getDefineINT("OPINION_WEIGHT_INTRIGUE_SHARED_BY");

	push	1
	push	OFFSET ??_C@_0CC@BCPMJJAA@OPINION_WEIGHT_INTRIGUE_SHARED_B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3892], eax

; 5506 : 	m_iOPINION_WEIGHT_CAPTURED_CAPITAL = getDefineINT("OPINION_WEIGHT_CAPTURED_CAPITAL");

	push	1
	push	OFFSET ??_C@_0CA@GAAEDCJI@OPINION_WEIGHT_CAPTURED_CAPITAL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3896], eax

; 5507 : 	m_iOPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL = getDefineINT("OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL");

	push	1
	push	OFFSET ??_C@_0CH@MFAFHNFL@OPINION_WEIGHT_WE_LIKED_THEIR_PR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3900], eax

; 5508 : 	m_iOPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_NUM_TURNS = getDefineINT("OPINION_WEIGHT_WE_LIKED_THEIR_PROPOSAL_NUM_TURNS");

	push	1
	push	OFFSET ??_C@_0DB@EPFCNAPB@OPINION_WEIGHT_WE_LIKED_THEIR_PR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3904], eax

; 5509 : 	m_iOPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL = getDefineINT("OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL");

	push	1
	push	OFFSET ??_C@_0CK@PAONHNDJ@OPINION_WEIGHT_WE_DISLIKED_THEIR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3908], eax

; 5510 : 	m_iOPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_NUM_TURNS = getDefineINT("OPINION_WEIGHT_WE_DISLIKED_THEIR_PROPOSAL_NUM_TURNS");

	push	1
	push	OFFSET ??_C@_0DE@DACOLAJN@OPINION_WEIGHT_WE_DISLIKED_THEIR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3912], eax

; 5511 : 	m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL = getDefineINT("OPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL");

	push	1
	push	OFFSET ??_C@_0CL@KFBKBDAB@OPINION_WEIGHT_THEY_SUPPORTED_OU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3916], eax

; 5512 : 	m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_NUM_TURNS = getDefineINT("OPINION_WEIGHT_THEY_SUPPORTED_OUR_PROPOSAL_NUM_TURNS");

	push	1
	push	OFFSET ??_C@_0DF@FLOIPDCE@OPINION_WEIGHT_THEY_SUPPORTED_OU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3920], eax

; 5513 : 	m_iOPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL = getDefineINT("OPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL");

	push	1
	push	OFFSET ??_C@_0CI@MKPGLGGL@OPINION_WEIGHT_THEY_FOILED_OUR_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3924], eax

; 5514 : 	m_iOPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_NUM_TURNS = getDefineINT("OPINION_WEIGHT_THEY_FOILED_OUR_PROPOSAL_NUM_TURNS");

	push	1
	push	OFFSET ??_C@_0DC@JKJPKMBM@OPINION_WEIGHT_THEY_FOILED_OUR_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3928], eax

; 5515 : 	m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING = getDefineINT("OPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING");

	push	1
	push	OFFSET ??_C@_0CK@CAMABMFF@OPINION_WEIGHT_THEY_SUPPORTED_OU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3932], eax

; 5516 : 	m_iOPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_NUM_TURNS = getDefineINT("OPINION_WEIGHT_THEY_SUPPORTED_OUR_HOSTING_NUM_TURNS");

	push	1
	push	OFFSET ??_C@_0DE@HJFNLFEG@OPINION_WEIGHT_THEY_SUPPORTED_OU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3936], eax

; 5517 : 	m_iOPINION_THRESHOLD_UNFORGIVABLE = getDefineINT("OPINION_THRESHOLD_UNFORGIVABLE");

	push	1
	push	OFFSET ??_C@_0BP@HIJGPDCC@OPINION_THRESHOLD_UNFORGIVABLE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3940], eax

; 5518 : 	m_iOPINION_THRESHOLD_ENEMY = getDefineINT("OPINION_THRESHOLD_ENEMY");

	push	1
	push	OFFSET ??_C@_0BI@ECOLFLOO@OPINION_THRESHOLD_ENEMY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3944], eax

; 5519 : 	m_iOPINION_THRESHOLD_COMPETITOR = getDefineINT("OPINION_THRESHOLD_COMPETITOR");

	push	1
	push	OFFSET ??_C@_0BN@GCKHCPPJ@OPINION_THRESHOLD_COMPETITOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3948], eax

; 5520 : 	m_iOPINION_THRESHOLD_FAVORABLE = getDefineINT("OPINION_THRESHOLD_FAVORABLE");

	push	1
	push	OFFSET ??_C@_0BM@OIPDHAJK@OPINION_THRESHOLD_FAVORABLE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3952], eax

; 5521 : 	m_iOPINION_THRESHOLD_FRIEND = getDefineINT("OPINION_THRESHOLD_FRIEND");

	push	1
	push	OFFSET ??_C@_0BJ@IPDEAGED@OPINION_THRESHOLD_FRIEND?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3956], eax

; 5522 : 	m_iOPINION_THRESHOLD_ALLY = getDefineINT("OPINION_THRESHOLD_ALLY");

	push	1
	push	OFFSET ??_C@_0BH@DFICOJOI@OPINION_THRESHOLD_ALLY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3960], eax

; 5523 : 	m_iAPPROACH_NEUTRAL_DEFAULT = getDefineINT("APPROACH_NEUTRAL_DEFAULT");

	push	1
	push	OFFSET ??_C@_0BJ@BAAOCJOL@APPROACH_NEUTRAL_DEFAULT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3964], eax

; 5524 : 	m_iAPPROACH_BIAS_FOR_CURRENT = getDefineINT("APPROACH_BIAS_FOR_CURRENT");

	push	1
	push	OFFSET ??_C@_0BK@MKEJLEMN@APPROACH_BIAS_FOR_CURRENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3968], eax

; 5525 : 	m_iAPPROACH_WAR_CURRENTLY_DECEPTIVE = getDefineINT("APPROACH_WAR_CURRENTLY_DECEPTIVE");

	push	1
	push	OFFSET ??_C@_0CB@NBCCENIC@APPROACH_WAR_CURRENTLY_DECEPTIVE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3972], eax

; 5526 : 	m_iAPPROACH_HOSTILE_CURRENTLY_HOSTILE = getDefineINT("APPROACH_HOSTILE_CURRENTLY_HOSTILE");

	push	1
	push	OFFSET ??_C@_0CD@GHCLPGPK@APPROACH_HOSTILE_CURRENTLY_HOSTI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3976], eax

; 5527 : 	m_iAPPROACH_WAR_CURRENTLY_WAR = getDefineINT("APPROACH_WAR_CURRENTLY_WAR");

	push	1
	push	OFFSET ??_C@_0BL@FBBPAFNE@APPROACH_WAR_CURRENTLY_WAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3980], eax

; 5528 : 	m_iAPPROACH_RANDOM_PERCENT = getDefineINT("APPROACH_RANDOM_PERCENT");

	push	1
	push	OFFSET ??_C@_0BI@KBMFJJGA@APPROACH_RANDOM_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3984], eax

; 5529 : 	m_iAPPROACH_WAR_CONQUEST_GRAND_STRATEGY = getDefineINT("APPROACH_WAR_CONQUEST_GRAND_STRATEGY");

	push	1
	push	OFFSET ??_C@_0CF@FDBBHCEH@APPROACH_WAR_CONQUEST_GRAND_STRA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3988], eax

; 5530 : 	m_iAPPROACH_OPINION_UNFORGIVABLE_WAR = getDefineINT("APPROACH_OPINION_UNFORGIVABLE_WAR");

	push	1
	push	OFFSET ??_C@_0CC@MPFKAOKB@APPROACH_OPINION_UNFORGIVABLE_WA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3992], eax

; 5531 : 	m_iAPPROACH_OPINION_UNFORGIVABLE_HOSTILE = getDefineINT("APPROACH_OPINION_UNFORGIVABLE_HOSTILE");

	push	1
	push	OFFSET ??_C@_0CG@FFDPADLC@APPROACH_OPINION_UNFORGIVABLE_HO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3996], eax

; 5532 : 	m_iAPPROACH_OPINION_UNFORGIVABLE_DECEPTIVE = getDefineINT("APPROACH_OPINION_UNFORGIVABLE_DECEPTIVE");

	push	1
	push	OFFSET ??_C@_0CI@KGFKNNBE@APPROACH_OPINION_UNFORGIVABLE_DE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4000], eax

; 5533 : 	m_iAPPROACH_OPINION_UNFORGIVABLE_GUARDED = getDefineINT("APPROACH_OPINION_UNFORGIVABLE_GUARDED");

	push	1
	push	OFFSET ??_C@_0CG@GKEPFGLN@APPROACH_OPINION_UNFORGIVABLE_GU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4004], eax

; 5534 : 	m_iAPPROACH_OPINION_ENEMY_WAR = getDefineINT("APPROACH_OPINION_ENEMY_WAR");

	push	1
	push	OFFSET ??_C@_0BL@DBPADJGG@APPROACH_OPINION_ENEMY_WAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4008], eax

; 5535 : 	m_iAPPROACH_OPINION_ENEMY_HOSTILE = getDefineINT("APPROACH_OPINION_ENEMY_HOSTILE");

	push	1
	push	OFFSET ??_C@_0BP@JBGMKNGA@APPROACH_OPINION_ENEMY_HOSTILE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4012], eax

; 5536 : 	m_iAPPROACH_OPINION_ENEMY_DECEPTIVE = getDefineINT("APPROACH_OPINION_ENEMY_DECEPTIVE");

	push	1
	push	OFFSET ??_C@_0CB@CEDKDADF@APPROACH_OPINION_ENEMY_DECEPTIVE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4016], eax

; 5537 : 	m_iAPPROACH_OPINION_ENEMY_GUARDED = getDefineINT("APPROACH_OPINION_ENEMY_GUARDED");

	push	1
	push	OFFSET ??_C@_0BP@KOBMPIGP@APPROACH_OPINION_ENEMY_GUARDED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4020], eax

; 5538 : 	m_iAPPROACH_OPINION_COMPETITOR_WAR = getDefineINT("APPROACH_OPINION_COMPETITOR_WAR");

	push	1
	push	OFFSET ??_C@_0CA@MBNPKDNK@APPROACH_OPINION_COMPETITOR_WAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4024], eax

; 5539 : 	m_iAPPROACH_OPINION_COMPETITOR_HOSTILE = getDefineINT("APPROACH_OPINION_COMPETITOR_HOSTILE");

	push	1
	push	OFFSET ??_C@_0CE@JJONKLBF@APPROACH_OPINION_COMPETITOR_HOST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4028], eax

; 5540 : 	m_iAPPROACH_OPINION_COMPETITOR_DECEPTIVE = getDefineINT("APPROACH_OPINION_COMPETITOR_DECEPTIVE");

	push	1
	push	OFFSET ??_C@_0CG@JPBBBADC@APPROACH_OPINION_COMPETITOR_DECE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4032], eax

; 5541 : 	m_iAPPROACH_OPINION_COMPETITOR_GUARDED = getDefineINT("APPROACH_OPINION_COMPETITOR_GUARDED");

	push	1
	push	OFFSET ??_C@_0CE@KGJNPOBK@APPROACH_OPINION_COMPETITOR_GUAR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4036], eax

; 5542 : 	m_iAPPROACH_OPINION_NEUTRAL_DECEPTIVE = getDefineINT("APPROACH_OPINION_NEUTRAL_DECEPTIVE");

	push	1
	push	OFFSET ??_C@_0CD@HDLPJANO@APPROACH_OPINION_NEUTRAL_DECEPTI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4040], eax

; 5543 : 	m_iAPPROACH_OPINION_NEUTRAL_FRIENDLY = getDefineINT("APPROACH_OPINION_NEUTRAL_FRIENDLY");

	push	1
	push	OFFSET ??_C@_0CC@JHFCAHDK@APPROACH_OPINION_NEUTRAL_FRIENDL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4044], eax

; 5544 : 	m_iAPPROACH_OPINION_FAVORABLE_HOSTILE = getDefineINT("APPROACH_OPINION_FAVORABLE_HOSTILE");

	push	1
	push	OFFSET ??_C@_0CD@MCIOFBEL@APPROACH_OPINION_FAVORABLE_HOSTI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4048], eax

; 5545 : 	m_iAPPROACH_OPINION_FAVORABLE_DECEPTIVE = getDefineINT("APPROACH_OPINION_FAVORABLE_DECEPTIVE");

	push	1
	push	OFFSET ??_C@_0CF@OGEBCAIJ@APPROACH_OPINION_FAVORABLE_DECEP@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4052], eax

; 5546 : 	m_iAPPROACH_OPINION_FAVORABLE_FRIENDLY = getDefineINT("APPROACH_OPINION_FAVORABLE_FRIENDLY");

	push	1
	push	OFFSET ??_C@_0CE@NGKINCPC@APPROACH_OPINION_FAVORABLE_FRIEN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4056], eax

; 5547 : 	m_iAPPROACH_OPINION_FRIEND_HOSTILE = getDefineINT("APPROACH_OPINION_FRIEND_HOSTILE");

	push	1
	push	OFFSET ??_C@_0CA@IGECGNPC@APPROACH_OPINION_FRIEND_HOSTILE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4060], eax

; 5548 : 	m_iAPPROACH_OPINION_FRIEND_FRIENDLY = getDefineINT("APPROACH_OPINION_FRIEND_FRIENDLY");

	push	1
	push	OFFSET ??_C@_0CB@GEFBBFOG@APPROACH_OPINION_FRIEND_FRIENDLY@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4064], eax

; 5549 : 	m_iAPPROACH_OPINION_ALLY_FRIENDLY = getDefineINT("APPROACH_OPINION_ALLY_FRIENDLY");

	push	1
	push	OFFSET ??_C@_0BP@DAOGNHJ@APPROACH_OPINION_ALLY_FRIENDLY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4068], eax

; 5550 : 	m_iAPPROACH_DECEPTIVE_WORKING_WITH_PLAYER = getDefineINT("APPROACH_DECEPTIVE_WORKING_WITH_PLAYER");

	push	1
	push	OFFSET ??_C@_0CH@HIDFOAGO@APPROACH_DECEPTIVE_WORKING_WITH_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4072], eax

; 5551 : 	m_iAPPROACH_FRIENDLY_WORKING_WITH_PLAYER = getDefineINT("APPROACH_FRIENDLY_WORKING_WITH_PLAYER");

	push	1
	push	OFFSET ??_C@_0CG@EHOIHBGH@APPROACH_FRIENDLY_WORKING_WITH_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4076], eax

; 5552 : 	m_iAPPROACH_HOSTILE_WORKING_WITH_PLAYER = getDefineINT("APPROACH_HOSTILE_WORKING_WITH_PLAYER");

	push	1
	push	OFFSET ??_C@_0CF@KBAFGJEB@APPROACH_HOSTILE_WORKING_WITH_PL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4080], eax

; 5553 : 	m_iAPPROACH_GUARDED_WORKING_WITH_PLAYER = getDefineINT("APPROACH_GUARDED_WORKING_WITH_PLAYER");

	push	1
	push	OFFSET ??_C@_0CF@ILECEPOC@APPROACH_GUARDED_WORKING_WITH_PL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4084], eax

; 5554 : 	m_iAPPROACH_DECEPTIVE_WORKING_AGAINST_PLAYER = getDefineINT("APPROACH_DECEPTIVE_WORKING_AGAINST_PLAYER");

	push	1
	push	OFFSET ??_C@_0CK@PCGCDMOC@APPROACH_DECEPTIVE_WORKING_AGAIN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4088], eax

; 5555 : 	m_iAPPROACH_HOSTILE_WORKING_AGAINST_PLAYER = getDefineINT("APPROACH_HOSTILE_WORKING_AGAINST_PLAYER");

	push	1
	push	OFFSET ??_C@_0CI@NOLCOEI@APPROACH_HOSTILE_WORKING_AGAINST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4092], eax

; 5556 : 	m_iAPPROACH_WAR_WORKING_AGAINST_PLAYER = getDefineINT("APPROACH_WAR_WORKING_AGAINST_PLAYER");

	push	1
	push	OFFSET ??_C@_0CE@PEIODDKJ@APPROACH_WAR_WORKING_AGAINST_PLA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4096], eax

; 5557 : 	m_iAPPROACH_WAR_DENOUNCED = getDefineINT("APPROACH_WAR_DENOUNCED");

	push	1
	push	OFFSET ??_C@_0BH@EGPMBCDM@APPROACH_WAR_DENOUNCED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4100], eax

; 5558 : 	m_iAPPROACH_HOSTILE_DENOUNCED = getDefineINT("APPROACH_HOSTILE_DENOUNCED");

	push	1
	push	OFFSET ??_C@_0BL@LFGGGMJH@APPROACH_HOSTILE_DENOUNCED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4104], eax

; 5559 : 	m_iAPPROACH_GUARDED_DENOUNCED = getDefineINT("APPROACH_GUARDED_DENOUNCED");

	push	1
	push	OFFSET ??_C@_0BL@IONDHHAI@APPROACH_GUARDED_DENOUNCED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4108], eax

; 5560 : 	m_iAPPROACH_FRIENDLY_DENOUNCED = getDefineINT("APPROACH_FRIENDLY_DENOUNCED");

	push	1
	push	OFFSET ??_C@_0BM@EEBAEOJA@APPROACH_FRIENDLY_DENOUNCED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4112], eax

; 5561 : 	m_iAPPROACH_DECEPTIVE_DENOUNCED = getDefineINT("APPROACH_DECEPTIVE_DENOUNCED");

	push	1
	push	OFFSET ??_C@_0BN@HIDOJFIG@APPROACH_DECEPTIVE_DENOUNCED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4116], eax

; 5562 : 	m_iAPPROACH_ATTACKED_PROTECTED_MINOR_WAR = getDefineINT("APPROACH_ATTACKED_PROTECTED_MINOR_WAR");

	push	1
	push	OFFSET ??_C@_0CG@IPELBGIL@APPROACH_ATTACKED_PROTECTED_MINO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4120], eax

; 5563 : 	m_iAPPROACH_ATTACKED_PROTECTED_MINOR_HOSTILE = getDefineINT("APPROACH_ATTACKED_PROTECTED_MINOR_HOSTILE");

	push	1
	push	OFFSET ??_C@_0CK@KNIANMKA@APPROACH_ATTACKED_PROTECTED_MINO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4124], eax

; 5564 : 	m_iAPPROACH_ATTACKED_PROTECTED_MINOR_GUARDED = getDefineINT("APPROACH_ATTACKED_PROTECTED_MINOR_GUARDED");

	push	1
	push	OFFSET ??_C@_0CK@JCPAIJKP@APPROACH_ATTACKED_PROTECTED_MINO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4128], eax

; 5565 : 	m_iAPPROACH_ATTACKED_PROTECTED_MINOR_PAST_WAR = getDefineINT("APPROACH_ATTACKED_PROTECTED_MINOR_PAST_WAR");

	push	1
	push	OFFSET ??_C@_0CL@DDNFPENJ@APPROACH_ATTACKED_PROTECTED_MINO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4132], eax

; 5566 : 	m_iAPPROACH_ATTACKED_PROTECTED_MINOR_PAST_HOSTILE = getDefineINT("APPROACH_ATTACKED_PROTECTED_MINOR_PAST_HOSTILE");

	push	1
	push	OFFSET ??_C@_0CP@ELPHEHHE@APPROACH_ATTACKED_PROTECTED_MINO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4136], eax

; 5567 : 	m_iAPPROACH_ATTACKED_PROTECTED_MINOR_PAST_GUARDED = getDefineINT("APPROACH_ATTACKED_PROTECTED_MINOR_PAST_GUARDED");

	push	1
	push	OFFSET ??_C@_0CP@HEIHBCHL@APPROACH_ATTACKED_PROTECTED_MINO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4140], eax

; 5568 : 	m_iAPPROACH_DECEPTIVE_MILITARY_THREAT_CRITICAL = getDefineINT("APPROACH_DECEPTIVE_MILITARY_THREAT_CRITICAL");

	push	1
	push	OFFSET ??_C@_0CM@NLGLEKNM@APPROACH_DECEPTIVE_MILITARY_THRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4144], eax

; 5569 : 	m_iAPPROACH_GUARDED_MILITARY_THREAT_CRITICAL = getDefineINT("APPROACH_GUARDED_MILITARY_THREAT_CRITICAL");

	push	1
	push	OFFSET ??_C@_0CK@NEFKNCLH@APPROACH_GUARDED_MILITARY_THREAT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4148], eax

; 5570 : 	m_iAPPROACH_AFRAID_MILITARY_THREAT_CRITICAL = getDefineINT("APPROACH_AFRAID_MILITARY_THREAT_CRITICAL");

	push	1
	push	OFFSET ??_C@_0CJ@IEEHGLBH@APPROACH_AFRAID_MILITARY_THREAT_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4152], eax

; 5571 : 	m_iAPPROACH_DECEPTIVE_DEMAND = getDefineINT("APPROACH_DECEPTIVE_DEMAND");

	push	1
	push	OFFSET ??_C@_0BK@DADEBGKO@APPROACH_DECEPTIVE_DEMAND?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4156], eax

; 5572 : 	m_iAPPROACH_FRIENDLY_DEMAND = getDefineINT("APPROACH_FRIENDLY_DEMAND");

	push	1
	push	OFFSET ??_C@_0BJ@MAAIDOML@APPROACH_FRIENDLY_DEMAND?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4160], eax

; 5573 : 	m_iAPPROACH_WAR_BROKEN_MILITARY_PROMISE = getDefineINT("APPROACH_WAR_BROKEN_MILITARY_PROMISE");

	push	1
	push	OFFSET ??_C@_0CF@KFCGDBJP@APPROACH_WAR_BROKEN_MILITARY_PRO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4164], eax

; 5574 : 	m_iAPPROACH_DECEPTIVE_BROKEN_MILITARY_PROMISE = getDefineINT("APPROACH_DECEPTIVE_BROKEN_MILITARY_PROMISE");

	push	1
	push	OFFSET ??_C@_0CL@EECOEFII@APPROACH_DECEPTIVE_BROKEN_MILITA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4168], eax

; 5575 : 	m_iAPPROACH_FRIENDLY_BROKEN_MILITARY_PROMISE = getDefineINT("APPROACH_FRIENDLY_BROKEN_MILITARY_PROMISE");

	push	1
	push	OFFSET ??_C@_0CK@EHAHEOKK@APPROACH_FRIENDLY_BROKEN_MILITAR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4172], eax

; 5576 : 	m_iAPPROACH_WAR_BROKEN_MILITARY_PROMISE_WORLD = getDefineINT("APPROACH_WAR_BROKEN_MILITARY_PROMISE_WORLD");

	push	1
	push	OFFSET ??_C@_0CL@LILPANMM@APPROACH_WAR_BROKEN_MILITARY_PRO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4176], eax

; 5577 : 	m_iAPPROACH_DECEPTIVE_BROKEN_MILITARY_PROMISE_WORLD = getDefineINT("APPROACH_DECEPTIVE_BROKEN_MILITARY_PROMISE_WORLD");

	push	1
	push	OFFSET ??_C@_0DB@MHKKOLJI@APPROACH_DECEPTIVE_BROKEN_MILITA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4180], eax

; 5578 : 	m_iAPPROACH_FRIENDLY_BROKEN_MILITARY_PROMISE_WORLD = getDefineINT("APPROACH_FRIENDLY_BROKEN_MILITARY_PROMISE_WORLD");

	push	1
	push	OFFSET ??_C@_0DA@CFGCCAFJ@APPROACH_FRIENDLY_BROKEN_MILITAR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4184], eax

; 5579 : 	m_iAPPROACH_DECEPTIVE_IGNORED_MILITARY_PROMISE = getDefineINT("APPROACH_DECEPTIVE_IGNORED_MILITARY_PROMISE");

	push	1
	push	OFFSET ??_C@_0CM@LGDLFBOA@APPROACH_DECEPTIVE_IGNORED_MILIT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4188], eax

; 5580 : 	m_iAPPROACH_FRIENDLY_IGNORED_MILITARY_PROMISE = getDefineINT("APPROACH_FRIENDLY_IGNORED_MILITARY_PROMISE");

	push	1
	push	OFFSET ??_C@_0CL@GDFIDJAP@APPROACH_FRIENDLY_IGNORED_MILITA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4192], eax

; 5581 : 	m_iAPPROACH_WAR_BROKEN_EXPANSION_PROMISE = getDefineINT("APPROACH_WAR_BROKEN_EXPANSION_PROMISE");

	push	1
	push	OFFSET ??_C@_0CG@HDJIMMNN@APPROACH_WAR_BROKEN_EXPANSION_PR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4196], eax

; 5582 : 	m_iAPPROACH_DECEPTIVE_BROKEN_EXPANSION_PROMISE = getDefineINT("APPROACH_DECEPTIVE_BROKEN_EXPANSION_PROMISE");

	push	1
	push	OFFSET ??_C@_0CM@PAKKEBGO@APPROACH_DECEPTIVE_BROKEN_EXPANS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4200], eax

; 5583 : 	m_iAPPROACH_FRIENDLY_BROKEN_EXPANSION_PROMISE = getDefineINT("APPROACH_FRIENDLY_BROKEN_EXPANSION_PROMISE");

	push	1
	push	OFFSET ??_C@_0CL@CFMJCJIB@APPROACH_FRIENDLY_BROKEN_EXPANSI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4204], eax

; 5584 : 	m_iAPPROACH_WAR_IGNORED_EXPANSION_PROMISE = getDefineINT("APPROACH_WAR_IGNORED_EXPANSION_PROMISE");

	push	1
	push	OFFSET ??_C@_0CH@OBNKGNKL@APPROACH_WAR_IGNORED_EXPANSION_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4208], eax

; 5585 : 	m_iAPPROACH_DECEPTIVE_IGNORED_EXPANSION_PROMISE = getDefineINT("APPROACH_DECEPTIVE_IGNORED_EXPANSION_PROMISE");

	push	1
	push	OFFSET ??_C@_0CN@LDDBLNBA@APPROACH_DECEPTIVE_IGNORED_EXPAN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4212], eax

; 5586 : 	m_iAPPROACH_FRIENDLY_IGNORED_EXPANSION_PROMISE = getDefineINT("APPROACH_FRIENDLY_IGNORED_EXPANSION_PROMISE");

	push	1
	push	OFFSET ??_C@_0CM@IDFBCBJB@APPROACH_FRIENDLY_IGNORED_EXPANS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4216], eax

; 5587 : 	m_iAPPROACH_WAR_BROKEN_BORDER_PROMISE = getDefineINT("APPROACH_WAR_BROKEN_BORDER_PROMISE");

	push	1
	push	OFFSET ??_C@_0CD@HAGMBNPB@APPROACH_WAR_BROKEN_BORDER_PROMI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4220], eax

; 5588 : 	m_iAPPROACH_DECEPTIVE_BROKEN_BORDER_PROMISE = getDefineINT("APPROACH_DECEPTIVE_BROKEN_BORDER_PROMISE");

	push	1
	push	OFFSET ??_C@_0CJ@CKNGEJLE@APPROACH_DECEPTIVE_BROKEN_BORDER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4224], eax

; 5589 : 	m_iAPPROACH_FRIENDLY_BROKEN_BORDER_PROMISE = getDefineINT("APPROACH_FRIENDLY_BROKEN_BORDER_PROMISE");

	push	1
	push	OFFSET ??_C@_0CI@HMBMGOPC@APPROACH_FRIENDLY_BROKEN_BORDER_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4228], eax

; 5590 : 	m_iAPPROACH_WAR_IGNORED_BORDER_PROMISE = getDefineINT("APPROACH_WAR_IGNORED_BORDER_PROMISE");

	push	1
	push	OFFSET ??_C@_0CE@DPCMIDPO@APPROACH_WAR_IGNORED_BORDER_PROM@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4232], eax

; 5591 : 	m_iAPPROACH_DECEPTIVE_IGNORED_BORDER_PROMISE = getDefineINT("APPROACH_DECEPTIVE_IGNORED_BORDER_PROMISE");

	push	1
	push	OFFSET ??_C@_0CK@DJMAIMLF@APPROACH_DECEPTIVE_IGNORED_BORDE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4236], eax

; 5592 : 	m_iAPPROACH_FRIENDLY_IGNORED_BORDER_PROMISE = getDefineINT("APPROACH_FRIENDLY_IGNORED_BORDER_PROMISE");

	push	1
	push	OFFSET ??_C@_0CJ@KGCJKCDH@APPROACH_FRIENDLY_IGNORED_BORDER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4240], eax

; 5593 : 	m_iAPPROACH_WAR_BROKEN_CITY_STATE_PROMISE = getDefineINT("APPROACH_WAR_BROKEN_CITY_STATE_PROMISE");

	push	1
	push	OFFSET ??_C@_0CH@FAIKGMDC@APPROACH_WAR_BROKEN_CITY_STATE_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4244], eax

; 5594 : 	m_iAPPROACH_DECEPTIVE_BROKEN_CITY_STATE_PROMISE = getDefineINT("APPROACH_DECEPTIVE_BROKEN_CITY_STATE_PROMISE");

	push	1
	push	OFFSET ??_C@_0CN@CGBLMIJ@APPROACH_DECEPTIVE_BROKEN_CITY_S@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4248], eax

; 5595 : 	m_iAPPROACH_FRIENDLY_BROKEN_CITY_STATE_PROMISE = getDefineINT("APPROACH_FRIENDLY_BROKEN_CITY_STATE_PROMISE");

	push	1
	push	OFFSET ??_C@_0CM@DCABCAAI@APPROACH_FRIENDLY_BROKEN_CITY_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4252], eax

; 5596 : 	m_iAPPROACH_WAR_BROKEN_CITY_STATE_PROMISE_WORLD = getDefineINT("APPROACH_WAR_BROKEN_CITY_STATE_PROMISE_WORLD");

	push	1
	push	OFFSET ??_C@_0CN@GJAMBDAA@APPROACH_WAR_BROKEN_CITY_STATE_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4256], eax

; 5597 : 	m_iAPPROACH_DECEPTIVE_BROKEN_CITY_STATE_PROMISE_WORLD = getDefineINT("APPROACH_DECEPTIVE_BROKEN_CITY_STATE_PROMISE_WORLD");

	push	1
	push	OFFSET ??_C@_0DD@POLCLDAI@APPROACH_DECEPTIVE_BROKEN_CITY_S@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4260], eax

; 5598 : 	m_iAPPROACH_FRIENDLY_BROKEN_CITY_STATE_PROMISE_WORLD = getDefineINT("APPROACH_FRIENDLY_BROKEN_CITY_STATE_PROMISE_WORLD");

	push	1
	push	OFFSET ??_C@_0DC@CAOFKMPH@APPROACH_FRIENDLY_BROKEN_CITY_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4264], eax

; 5599 : 	m_iAPPROACH_WAR_IGNORED_CITY_STATE_PROMISE = getDefineINT("APPROACH_WAR_IGNORED_CITY_STATE_PROMISE");

	push	1
	push	OFFSET ??_C@_0CI@OJHOPKJK@APPROACH_WAR_IGNORED_CITY_STATE_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4268], eax

; 5600 : 	m_iAPPROACH_DECEPTIVE_IGNORED_CITY_STATE_PROMISE = getDefineINT("APPROACH_DECEPTIVE_IGNORED_CITY_STATE_PROMISE");

	push	1
	push	OFFSET ??_C@_0CO@LFJPHLEO@APPROACH_DECEPTIVE_IGNORED_CITY_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4272], eax

; 5601 : 	m_iAPPROACH_FRIENDLY_IGNORED_CITY_STATE_PROMISE = getDefineINT("APPROACH_FRIENDLY_IGNORED_CITY_STATE_PROMISE");

	push	1
	push	OFFSET ??_C@_0CN@CPBAKIGE@APPROACH_FRIENDLY_IGNORED_CITY_S@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4276], eax

; 5602 : 	m_iAPPROACH_FRIENDLY_MILITARY_THREAT_CRITICAL = getDefineINT("APPROACH_FRIENDLY_MILITARY_THREAT_CRITICAL");

	push	1
	push	OFFSET ??_C@_0CL@OAICCDD@APPROACH_FRIENDLY_MILITARY_THREA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4280], eax

; 5603 : 	m_iAPPROACH_DECEPTIVE_MILITARY_THREAT_SEVERE = getDefineINT("APPROACH_DECEPTIVE_MILITARY_THREAT_SEVERE");

	push	1
	push	OFFSET ??_C@_0CK@NHPGNJPM@APPROACH_DECEPTIVE_MILITARY_THRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4284], eax

; 5604 : 	m_iAPPROACH_GUARDED_MILITARY_THREAT_SEVERE = getDefineINT("APPROACH_GUARDED_MILITARY_THREAT_SEVERE");

	push	1
	push	OFFSET ??_C@_0CI@NICHHPFC@APPROACH_GUARDED_MILITARY_THREAT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4288], eax

; 5605 : 	m_iAPPROACH_AFRAID_MILITARY_THREAT_SEVERE = getDefineINT("APPROACH_AFRAID_MILITARY_THREAT_SEVERE");

	push	1
	push	OFFSET ??_C@_0CH@KHPMHIIF@APPROACH_AFRAID_MILITARY_THREAT_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4292], eax

; 5606 : 	m_iAPPROACH_FRIENDLY_MILITARY_THREAT_SEVERE = getDefineINT("APPROACH_FRIENDLY_MILITARY_THREAT_SEVERE");

	push	1
	push	OFFSET ??_C@_0CJ@EIBPPHHO@APPROACH_FRIENDLY_MILITARY_THREA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4296], eax

; 5607 : 	m_iAPPROACH_DECEPTIVE_MILITARY_THREAT_MAJOR = getDefineINT("APPROACH_DECEPTIVE_MILITARY_THREAT_MAJOR");

	push	1
	push	OFFSET ??_C@_0CJ@CGLJAPCE@APPROACH_DECEPTIVE_MILITARY_THRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4300], eax

; 5608 : 	m_iAPPROACH_GUARDED_MILITARY_THREAT_MAJOR = getDefineINT("APPROACH_GUARDED_MILITARY_THREAT_MAJOR");

	push	1
	push	OFFSET ??_C@_0CH@PHOGJFGN@APPROACH_GUARDED_MILITARY_THREAT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4304], eax

; 5609 : 	m_iAPPROACH_AFRAID_MILITARY_THREAT_MAJOR = getDefineINT("APPROACH_AFRAID_MILITARY_THREAT_MAJOR");

	push	1
	push	OFFSET ??_C@_0CG@EGOMPJCB@APPROACH_AFRAID_MILITARY_THREAT_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4308], eax

; 5610 : 	m_iAPPROACH_FRIENDLY_MILITARY_THREAT_MAJOR = getDefineINT("APPROACH_FRIENDLY_MILITARY_THREAT_MAJOR");

	push	1
	push	OFFSET ??_C@_0CI@HAHDCIGC@APPROACH_FRIENDLY_MILITARY_THREA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4312], eax

; 5611 : 	m_iAPPROACH_DECEPTIVE_MILITARY_THREAT_MINOR = getDefineINT("APPROACH_DECEPTIVE_MILITARY_THREAT_MINOR");

	push	1
	push	OFFSET ??_C@_0CJ@JJKLNDLC@APPROACH_DECEPTIVE_MILITARY_THRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4316], eax

; 5612 : 	m_iAPPROACH_GUARDED_MILITARY_THREAT_MINOR = getDefineINT("APPROACH_GUARDED_MILITARY_THREAT_MINOR");

	push	1
	push	OFFSET ??_C@_0CH@EIPEEJPL@APPROACH_GUARDED_MILITARY_THREAT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4320], eax

; 5613 : 	m_iAPPROACH_AFRAID_MILITARY_THREAT_MINOR = getDefineINT("APPROACH_AFRAID_MILITARY_THREAT_MINOR");

	push	1
	push	OFFSET ??_C@_0CG@PJPOCFLH@APPROACH_AFRAID_MILITARY_THREAT_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4324], eax

; 5614 : 	m_iAPPROACH_FRIENDLY_MILITARY_THREAT_MINOR = getDefineINT("APPROACH_FRIENDLY_MILITARY_THREAT_MINOR");

	push	1
	push	OFFSET ??_C@_0CI@MPGBPEPE@APPROACH_FRIENDLY_MILITARY_THREA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4328], eax

; 5615 : 	m_iAPPROACH_HOSTILE_MILITARY_THREAT_NONE = getDefineINT("APPROACH_HOSTILE_MILITARY_THREAT_NONE");

	push	1
	push	OFFSET ??_C@_0CG@BEMLPIIN@APPROACH_HOSTILE_MILITARY_THREAT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4332], eax

; 5616 : 	m_iAPPROACH_WAR_AT_WAR_WITH_PLAYER_WARS_NEUTRAL = getDefineINT("APPROACH_WAR_AT_WAR_WITH_PLAYER_WARS_NEUTRAL");

	push	1
	push	OFFSET ??_C@_0CN@HJDLKDFK@APPROACH_WAR_AT_WAR_WITH_PLAYER_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4336], eax

; 5617 : 	m_iAPPROACH_WAR_AT_WAR_WITH_PLAYER_WARS_WINNING = getDefineINT("APPROACH_WAR_AT_WAR_WITH_PLAYER_WARS_WINNING");

	push	1
	push	OFFSET ??_C@_0CN@PBJONADN@APPROACH_WAR_AT_WAR_WITH_PLAYER_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4340], eax

; 5618 : 	m_iAPPROACH_WAR_AT_WAR_WITH_PLAYER_WARS_LOSING = getDefineINT("APPROACH_WAR_AT_WAR_WITH_PLAYER_WARS_LOSING");

	push	1
	push	OFFSET ??_C@_0CM@MACAEGIN@APPROACH_WAR_AT_WAR_WITH_PLAYER_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4344], eax

; 5619 : 	m_iAPPROACH_HOSTILE_AT_WAR_WITH_PLAYER = getDefineINT("APPROACH_HOSTILE_AT_WAR_WITH_PLAYER");

	push	1
	push	OFFSET ??_C@_0CE@NJIMIHFF@APPROACH_HOSTILE_AT_WAR_WITH_PLA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4348], eax

; 5620 : 	m_iAPPROACH_DECEPTIVE_AT_WAR_WITH_PLAYER = getDefineINT("APPROACH_DECEPTIVE_AT_WAR_WITH_PLAYER");

	push	1
	push	OFFSET ??_C@_0CG@DPFPHELM@APPROACH_DECEPTIVE_AT_WAR_WITH_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4352], eax

; 5621 : 	m_iAPPROACH_GUARDED_AT_WAR_WITH_PLAYER = getDefineINT("APPROACH_GUARDED_AT_WAR_WITH_PLAYER");

	push	1
	push	OFFSET ??_C@_0CE@PBIBLAKO@APPROACH_GUARDED_AT_WAR_WITH_PLA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4356], eax

; 5622 : 	m_iAPPROACH_FRIENDLY_AT_WAR_WITH_PLAYER = getDefineINT("APPROACH_FRIENDLY_AT_WAR_WITH_PLAYER");

	push	1
	push	OFFSET ??_C@_0CF@FHMIKABK@APPROACH_FRIENDLY_AT_WAR_WITH_PL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4360], eax

; 5623 : 	m_iAPPROACH_WAR_PLANNING_WAR_WITH_ANOTHER_PLAYER = getDefineINT("APPROACH_WAR_PLANNING_WAR_WITH_ANOTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0CO@BIBNCHGM@APPROACH_WAR_PLANNING_WAR_WITH_A@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4364], eax

; 5624 : 	m_iAPPROACH_HOSTILE_PLANNING_WAR_WITH_ANOTHER_PLAYER = getDefineINT("APPROACH_HOSTILE_PLANNING_WAR_WITH_ANOTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0DC@PEFPDFNA@APPROACH_HOSTILE_PLANNING_WAR_WI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4368], eax

; 5625 : 	m_iAPPROACH_DECEPTIVE_PLANNING_WAR_WITH_ANOTHER_PLAYER = getDefineINT("APPROACH_DECEPTIVE_PLANNING_WAR_WITH_ANOTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0DE@BGFBBBPO@APPROACH_DECEPTIVE_PLANNING_WAR_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4372], eax

; 5626 : 	m_iAPPROACH_GUARDED_PLANNING_WAR_WITH_ANOTHER_PLAYER = getDefineINT("APPROACH_GUARDED_PLANNING_WAR_WITH_ANOTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0DC@KIBNGJB@APPROACH_GUARDED_PLANNING_WAR_WI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4376], eax

; 5627 : 	m_iAPPROACH_FRIENDLY_PLANNING_WAR_WITH_ANOTHER_PLAYER = getDefineINT("APPROACH_FRIENDLY_PLANNING_WAR_WITH_ANOTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0DD@DLINKJGM@APPROACH_FRIENDLY_PLANNING_WAR_W@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4380], eax

; 5628 : 	m_iAPPROACH_WAR_HOSTILE_WITH_ANOTHER_PLAYER = getDefineINT("APPROACH_WAR_HOSTILE_WITH_ANOTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0CJ@IGKHFAPC@APPROACH_WAR_HOSTILE_WITH_ANOTHE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4384], eax

; 5629 : 	m_iAPPROACH_HOSTILE_HOSTILE_WITH_ANOTHER_PLAYER = getDefineINT("APPROACH_HOSTILE_HOSTILE_WITH_ANOTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0CN@LKACGCOA@APPROACH_HOSTILE_HOSTILE_WITH_AN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4388], eax

; 5630 : 	m_iAPPROACH_DECEPTIVE_HOSTILE_WITH_ANOTHER_PLAYER = getDefineINT("APPROACH_DECEPTIVE_HOSTILE_WITH_ANOTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0CP@HEFKHLO@APPROACH_DECEPTIVE_HOSTILE_WITH_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4392], eax

; 5631 : 	m_iAPPROACH_FRIENDLY_HOSTILE_WITH_ANOTHER_PLAYER = getDefineINT("APPROACH_FRIENDLY_HOSTILE_WITH_ANOTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0CO@NMGEOBLL@APPROACH_FRIENDLY_HOSTILE_WITH_A@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4396], eax

; 5632 : 	m_iAPPROACH_WAR_AFRAID_WITH_ANOTHER_PLAYER = getDefineINT("APPROACH_WAR_AFRAID_WITH_ANOTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0CI@BCAFLEHK@APPROACH_WAR_AFRAID_WITH_ANOTHER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4400], eax

; 5633 : 	m_iAPPROACH_HOSTILE_AFRAID_WITH_ANOTHER_PLAYER = getDefineINT("APPROACH_HOSTILE_AFRAID_WITH_ANOTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0CM@LENDHHFO@APPROACH_HOSTILE_AFRAID_WITH_ANO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4404], eax

; 5634 : 	m_iAPPROACH_DECEPTIVE_AFRAID_WITH_ANOTHER_PLAYER = getDefineINT("APPROACH_DECEPTIVE_AFRAID_WITH_ANOTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0CO@EOOEDFKO@APPROACH_DECEPTIVE_AFRAID_WITH_A@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4408], eax

; 5635 : 	m_iAPPROACH_FRIENDLY_AFRAID_WITH_ANOTHER_PLAYER = getDefineINT("APPROACH_FRIENDLY_AFRAID_WITH_ANOTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0CN@NEGLOGIE@APPROACH_FRIENDLY_AFRAID_WITH_AN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4412], eax

; 5636 : 	m_iAPPROACH_WAR_PROJECTION_DESTRUCTION_PERCENT = getDefineINT("APPROACH_WAR_PROJECTION_DESTRUCTION_PERCENT");

	push	1
	push	OFFSET ??_C@_0CM@PFHNEAJJ@APPROACH_WAR_PROJECTION_DESTRUCT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4416], eax

; 5637 : 	m_iAPPROACH_WAR_PROJECTION_DEFEAT_PERCENT = getDefineINT("APPROACH_WAR_PROJECTION_DEFEAT_PERCENT");

	push	1
	push	OFFSET ??_C@_0CH@IAEBEONO@APPROACH_WAR_PROJECTION_DEFEAT_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4420], eax

; 5638 : 	m_iAPPROACH_WAR_PROJECTION_STALEMATE_PERCENT = getDefineINT("APPROACH_WAR_PROJECTION_STALEMATE_PERCENT");

	push	1
	push	OFFSET ??_C@_0CK@OOLPEGFO@APPROACH_WAR_PROJECTION_STALEMAT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4424], eax

; 5639 : 	m_iAPPROACH_WAR_PROJECTION_UNKNOWN_PERCENT = getDefineINT("APPROACH_WAR_PROJECTION_UNKNOWN_PERCENT");

	push	1
	push	OFFSET ??_C@_0CI@JOKGIOK@APPROACH_WAR_PROJECTION_UNKNOWN_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4428], eax

; 5640 : 	m_iAPPROACH_WAR_PROJECTION_GOOD_PERCENT = getDefineINT("APPROACH_WAR_PROJECTION_GOOD_PERCENT");

	push	1
	push	OFFSET ??_C@_0CF@LIABFBHD@APPROACH_WAR_PROJECTION_GOOD_PER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4432], eax

; 5641 : 	m_iAPPROACH_WAR_PROJECTION_VERY_GOOD_PERCENT = getDefineINT("APPROACH_WAR_PROJECTION_VERY_GOOD_PERCENT");

	push	1
	push	OFFSET ??_C@_0CK@CHEGKFFB@APPROACH_WAR_PROJECTION_VERY_GOO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4436], eax

; 5642 : 	m_iAPPROACH_GUARDED_PROJECTION_DESTRUCTION_PERCENT = getDefineINT("APPROACH_GUARDED_PROJECTION_DESTRUCTION_PERCENT");

	push	1
	push	OFFSET ??_C@_0DA@FJIKILCD@APPROACH_GUARDED_PROJECTION_DEST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4440], eax

; 5643 : 	m_iAPPROACH_GUARDED_PROJECTION_DEFEAT_PERCENT = getDefineINT("APPROACH_GUARDED_PROJECTION_DEFEAT_PERCENT");

	push	1
	push	OFFSET ??_C@_0CL@IMFBHCN@APPROACH_GUARDED_PROJECTION_DEFE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4444], eax

; 5644 : 	m_iAPPROACH_GUARDED_PROJECTION_STALEMATE_PERCENT = getDefineINT("APPROACH_GUARDED_PROJECTION_STALEMATE_PERCENT");

	push	1
	push	OFFSET ??_C@_0CO@NIJBCKHL@APPROACH_GUARDED_PROJECTION_STAL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4448], eax

; 5645 : 	m_iAPPROACH_GUARDED_PROJECTION_UNKNOWN_PERCENT = getDefineINT("APPROACH_GUARDED_PROJECTION_UNKNOWN_PERCENT");

	push	1
	push	OFFSET ??_C@_0CM@CNNGEPBF@APPROACH_GUARDED_PROJECTION_UNKN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4452], eax

; 5646 : 	m_iAPPROACH_GUARDED_PROJECTION_GOOD_PERCENT = getDefineINT("APPROACH_GUARDED_PROJECTION_GOOD_PERCENT");

	push	1
	push	OFFSET ??_C@_0CJ@GIGIHKCN@APPROACH_GUARDED_PROJECTION_GOOD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4456], eax

; 5647 : 	m_iAPPROACH_GUARDED_PROJECTION_VERY_GOOD_PERCENT = getDefineINT("APPROACH_GUARDED_PROJECTION_VERY_GOOD_PERCENT");

	push	1
	push	OFFSET ??_C@_0CO@BBGIMJHE@APPROACH_GUARDED_PROJECTION_VERY@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4460], eax

; 5648 : 	m_iTURNS_SINCE_PEACE_WEIGHT_DAMPENER = getDefineINT("TURNS_SINCE_PEACE_WEIGHT_DAMPENER");

	push	1
	push	OFFSET ??_C@_0CC@GLHBGGDH@TURNS_SINCE_PEACE_WEIGHT_DAMPENE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4464], eax

; 5649 : 	m_iAPPROACH_WAR_HAS_MADE_PEACE_BEFORE_PERCENT = getDefineINT("APPROACH_WAR_HAS_MADE_PEACE_BEFORE_PERCENT");

	push	1
	push	OFFSET ??_C@_0CL@IHHNMPNB@APPROACH_WAR_HAS_MADE_PEACE_BEFO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4468], eax

; 5650 : 	m_iAPPROACH_WAR_RECKLESS_EXPANDER = getDefineINT("APPROACH_WAR_RECKLESS_EXPANDER");

	push	1
	push	OFFSET ??_C@_0BP@HGGPFKOH@APPROACH_WAR_RECKLESS_EXPANDER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4472], eax

; 5651 : 	m_iAPPROACH_WAR_PROXIMITY_NEIGHBORS = getDefineINT("APPROACH_WAR_PROXIMITY_NEIGHBORS");

	push	1
	push	OFFSET ??_C@_0CB@JNOGNBJG@APPROACH_WAR_PROXIMITY_NEIGHBORS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4476], eax

; 5652 : 	m_iAPPROACH_WAR_PROXIMITY_CLOSE = getDefineINT("APPROACH_WAR_PROXIMITY_CLOSE");

	push	1
	push	OFFSET ??_C@_0BN@FCDHOLIK@APPROACH_WAR_PROXIMITY_CLOSE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4480], eax

; 5653 : 	m_iAPPROACH_WAR_PROXIMITY_FAR = getDefineINT("APPROACH_WAR_PROXIMITY_FAR");

	push	1
	push	OFFSET ??_C@_0BL@DODMLEEP@APPROACH_WAR_PROXIMITY_FAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4484], eax

; 5654 : 	m_iAPPROACH_WAR_PROXIMITY_DISTANT = getDefineINT("APPROACH_WAR_PROXIMITY_DISTANT");

	push	1
	push	OFFSET ??_C@_0BP@EDMMIOIF@APPROACH_WAR_PROXIMITY_DISTANT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4488], eax

; 5655 : 	m_iMINOR_APPROACH_IGNORE_DEFAULT = getDefineINT("MINOR_APPROACH_IGNORE_DEFAULT");

	push	1
	push	OFFSET ??_C@_0BO@NFJNEGHL@MINOR_APPROACH_IGNORE_DEFAULT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4492], eax

; 5656 : 	m_iMINOR_APPROACH_BIAS_FOR_CURRENT = getDefineINT("MINOR_APPROACH_BIAS_FOR_CURRENT");

	push	1
	push	OFFSET ??_C@_0CA@GHLPFOP@MINOR_APPROACH_BIAS_FOR_CURRENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4496], eax

; 5657 : 	m_iMINOR_APPROACH_IGNORE_CURRENTLY_WAR = getDefineINT("MINOR_APPROACH_IGNORE_CURRENTLY_WAR");

	push	1
	push	OFFSET ??_C@_0CE@CPMALOGG@MINOR_APPROACH_IGNORE_CURRENTLY_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4500], eax

; 5658 : 	m_iMINOR_APPROACH_WAR_CONQUEST_GRAND_STRATEGY = getDefineINT("MINOR_APPROACH_WAR_CONQUEST_GRAND_STRATEGY");

	push	1
	push	OFFSET ??_C@_0CL@NBFHJCOD@MINOR_APPROACH_WAR_CONQUEST_GRAN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4504], eax

; 5659 : 	m_iMINOR_APPROACH_PROTECTIVE_CONQUEST_GRAND_STRATEGY = getDefineINT("MINOR_APPROACH_PROTECTIVE_CONQUEST_GRAND_STRATEGY");

	push	1
	push	OFFSET ??_C@_0DC@HCIGLLIC@MINOR_APPROACH_PROTECTIVE_CONQUE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4508], eax

; 5660 : 	m_iMINOR_APPROACH_FRIENDLY_CONQUEST_GRAND_STRATEGY = getDefineINT("MINOR_APPROACH_FRIENDLY_CONQUEST_GRAND_STRATEGY");

	push	1
	push	OFFSET ??_C@_0DA@JPEKHOKH@MINOR_APPROACH_FRIENDLY_CONQUEST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4512], eax

; 5661 : 	m_iMINOR_APPROACH_WAR_CONQUEST_GRAND_STRATEGY_NEIGHBORS = getDefineINT("MINOR_APPROACH_WAR_CONQUEST_GRAND_STRATEGY_NEIGHBORS");

	push	1
	push	OFFSET ??_C@_0DF@NOEONLGG@MINOR_APPROACH_WAR_CONQUEST_GRAN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4516], eax

; 5662 : 	m_iMINOR_APPROACH_WAR_DIPLO_GRAND_STRATEGY = getDefineINT("MINOR_APPROACH_WAR_DIPLO_GRAND_STRATEGY");

	push	1
	push	OFFSET ??_C@_0CI@IHCGGBFA@MINOR_APPROACH_WAR_DIPLO_GRAND_S@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4520], eax

; 5663 : 	m_iMINOR_APPROACH_IGNORE_DIPLO_GRAND_STRATEGY = getDefineINT("MINOR_APPROACH_IGNORE_DIPLO_GRAND_STRATEGY");

	push	1
	push	OFFSET ??_C@_0CL@PMPMFLNC@MINOR_APPROACH_IGNORE_DIPLO_GRAN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4524], eax

; 5664 : 	m_iMINOR_APPROACH_PROTECTIVE_DIPLO_GRAND_STRATEGY_NEIGHBORS = getDefineINT("MINOR_APPROACH_PROTECTIVE_DIPLO_GRAND_STRATEGY_NEIGHBORS");

	push	1
	push	OFFSET ??_C@_0DJ@NCCCKKCN@MINOR_APPROACH_PROTECTIVE_DIPLO_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4528], eax

; 5665 : 	m_iMINOR_APPROACH_WAR_CULTURE_GRAND_STRATEGY = getDefineINT("MINOR_APPROACH_WAR_CULTURE_GRAND_STRATEGY");

	push	1
	push	OFFSET ??_C@_0CK@JIJKNGGP@MINOR_APPROACH_WAR_CULTURE_GRAND@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4532], eax

; 5666 : 	m_iMINOR_APPROACH_IGNORE_CULTURE_GRAND_STRATEGY = getDefineINT("MINOR_APPROACH_IGNORE_CULTURE_GRAND_STRATEGY");

	push	1
	push	OFFSET ??_C@_0CN@FHCDIOMO@MINOR_APPROACH_IGNORE_CULTURE_GR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4536], eax

; 5667 : 	m_iMINOR_APPROACH_PROTECTIVE_CULTURE_GRAND_STRATEGY_CST = getDefineINT("MINOR_APPROACH_PROTECTIVE_CULTURE_GRAND_STRATEGY_CST");

	push	1
	push	OFFSET ??_C@_0DF@OAHDKMFM@MINOR_APPROACH_PROTECTIVE_CULTUR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4540], eax

; 5668 : 	m_iMINOR_APPROACH_WAR_CURRENTLY_PROTECTIVE = getDefineINT("MINOR_APPROACH_WAR_CURRENTLY_PROTECTIVE");

	push	1
	push	OFFSET ??_C@_0CI@JKDGKEHL@MINOR_APPROACH_WAR_CURRENTLY_PRO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4544], eax

; 5669 : 	m_iMINOR_APPROACH_PROTECTIVE_CURRENTLY_PROTECTIVE = getDefineINT("MINOR_APPROACH_PROTECTIVE_CURRENTLY_PROTECTIVE");

	push	1
	push	OFFSET ??_C@_0CP@LPAKOAGN@MINOR_APPROACH_PROTECTIVE_CURREN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4548], eax

; 5670 : 	m_iMINOR_APPROACH_PROTECTIVE_CURRENTLY_WAR = getDefineINT("MINOR_APPROACH_PROTECTIVE_CURRENTLY_WAR");

	push	1
	push	OFFSET ??_C@_0CI@EBJFKMEC@MINOR_APPROACH_PROTECTIVE_CURREN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4552], eax

; 5671 : 	m_iMINOR_APPROACH_FRIENDLY_CURRENTLY_WAR = getDefineINT("MINOR_APPROACH_FRIENDLY_CURRENTLY_WAR");

	push	1
	push	OFFSET ??_C@_0CG@MCKBCDLL@MINOR_APPROACH_FRIENDLY_CURRENTL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4556], eax

; 5672 : 	m_iMINOR_APPROACH_FRIENDLY_RESOURCES = getDefineINT("MINOR_APPROACH_FRIENDLY_RESOURCES");

	push	1
	push	OFFSET ??_C@_0CC@IPOEJOME@MINOR_APPROACH_FRIENDLY_RESOURCE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4560], eax

; 5673 : 	m_iMINOR_APPROACH_PROTECTIVE_RESOURCES = getDefineINT("MINOR_APPROACH_PROTECTIVE_RESOURCES");

	push	1
	push	OFFSET ??_C@_0CE@EFKIGNCM@MINOR_APPROACH_PROTECTIVE_RESOUR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4564], eax

; 5674 : 	m_iMINOR_APPROACH_WAR_FRIENDS = getDefineINT("MINOR_APPROACH_WAR_FRIENDS");

	push	1
	push	OFFSET ??_C@_0BL@EPFIIMMC@MINOR_APPROACH_WAR_FRIENDS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4568], eax

; 5675 : 	m_iMINOR_APPROACH_FRIENDLY_FRIENDS = getDefineINT("MINOR_APPROACH_FRIENDLY_FRIENDS");

	push	1
	push	OFFSET ??_C@_0CA@NPJPBNFI@MINOR_APPROACH_FRIENDLY_FRIENDS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4572], eax

; 5676 : 	m_iMINOR_APPROACH_PROTECTIVE_FRIENDS = getDefineINT("MINOR_APPROACH_PROTECTIVE_FRIENDS");

	push	1
	push	OFFSET ??_C@_0CC@FHNLLHIN@MINOR_APPROACH_PROTECTIVE_FRIEND@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4576], eax

; 5677 : 	m_iMINOR_APPROACH_IGNORE_PROXIMITY_NEIGHBORS = getDefineINT("MINOR_APPROACH_IGNORE_PROXIMITY_NEIGHBORS");

	push	1
	push	OFFSET ??_C@_0CK@INKLLGHI@MINOR_APPROACH_IGNORE_PROXIMITY_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4580], eax

; 5678 : 	m_iMINOR_APPROACH_FRIENDLY_PROXIMITY_NEIGHBORS = getDefineINT("MINOR_APPROACH_FRIENDLY_PROXIMITY_NEIGHBORS");

	push	1
	push	OFFSET ??_C@_0CM@CIDNIJLN@MINOR_APPROACH_FRIENDLY_PROXIMIT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4584], eax

; 5679 : 	m_iMINOR_APPROACH_PROTECTIVE_PROXIMITY_NEIGHBORS = getDefineINT("MINOR_APPROACH_PROTECTIVE_PROXIMITY_NEIGHBORS");

	push	1
	push	OFFSET ??_C@_0CO@LFCMCMAA@MINOR_APPROACH_PROTECTIVE_PROXIM@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4588], eax

; 5680 : 	m_iMINOR_APPROACH_CONQUEST_PROXIMITY_NEIGHBORS = getDefineINT("MINOR_APPROACH_CONQUEST_PROXIMITY_NEIGHBORS");

	push	1
	push	OFFSET ??_C@_0CM@BKLJGCJA@MINOR_APPROACH_CONQUEST_PROXIMIT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4592], eax

; 5681 : 	m_iMINOR_APPROACH_IGNORE_PROXIMITY_CLOSE = getDefineINT("MINOR_APPROACH_IGNORE_PROXIMITY_CLOSE");

	push	1
	push	OFFSET ??_C@_0CG@NIHHDDGL@MINOR_APPROACH_IGNORE_PROXIMITY_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4596], eax

; 5682 : 	m_iMINOR_APPROACH_PROTECTIVE_PROXIMITY_CLOSE = getDefineINT("MINOR_APPROACH_PROTECTIVE_PROXIMITY_CLOSE");

	push	1
	push	OFFSET ??_C@_0CK@NKCGMNNA@MINOR_APPROACH_PROTECTIVE_PROXIM@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4600], eax

; 5683 : 	m_iMINOR_APPROACH_CONQUEST_PROXIMITY_CLOSE = getDefineINT("MINOR_APPROACH_CONQUEST_PROXIMITY_CLOSE");

	push	1
	push	OFFSET ??_C@_0CI@CJNKGJFA@MINOR_APPROACH_CONQUEST_PROXIMIT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4604], eax

; 5684 : 	m_iMINOR_APPROACH_FRIENDLY_PROXIMITY_FAR = getDefineINT("MINOR_APPROACH_FRIENDLY_PROXIMITY_FAR");

	push	1
	push	OFFSET ??_C@_0CG@KNICJCCA@MINOR_APPROACH_FRIENDLY_PROXIMIT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4608], eax

; 5685 : 	m_iMINOR_APPROACH_CONQUEST_PROXIMITY_FAR = getDefineINT("MINOR_APPROACH_CONQUEST_PROXIMITY_FAR");

	push	1
	push	OFFSET ??_C@_0CG@CECCHKPE@MINOR_APPROACH_CONQUEST_PROXIMIT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4612], eax

; 5686 : 	m_iMINOR_APPROACH_FRIENDLY_PROXIMITY_DISTANT = getDefineINT("MINOR_APPROACH_FRIENDLY_PROXIMITY_DISTANT");

	push	1
	push	OFFSET ??_C@_0CK@PAJBCEK@MINOR_APPROACH_FRIENDLY_PROXIMIT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4616], eax

; 5687 : 	m_iMINOR_APPROACH_CONQUEST_PROXIMITY_DISTANT = getDefineINT("MINOR_APPROACH_CONQUEST_PROXIMITY_DISTANT");

	push	1
	push	OFFSET ??_C@_0CK@DLKNDKPB@MINOR_APPROACH_CONQUEST_PROXIMIT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4620], eax

; 5688 : 	m_iMINOR_APPROACH_FRIENDLY_PERSONALITY_FRIENDLY = getDefineINT("MINOR_APPROACH_FRIENDLY_PERSONALITY_FRIENDLY");

	push	1
	push	OFFSET ??_C@_0CN@GPAPOAPO@MINOR_APPROACH_FRIENDLY_PERSONAL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4624], eax

; 5689 : 	m_iMINOR_APPROACH_PROTECTIVE_PERSONALITY_PROTECTIVE = getDefineINT("MINOR_APPROACH_PROTECTIVE_PERSONALITY_PROTECTIVE");

	push	1
	push	OFFSET ??_C@_0DB@CBIPAEKP@MINOR_APPROACH_PROTECTIVE_PERSON@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4628], eax

; 5690 : 	m_iMINOR_APPROACH_FRIENDLY_PERSONALITY_NEUTRAL = getDefineINT("MINOR_APPROACH_FRIENDLY_PERSONALITY_NEUTRAL");

	push	1
	push	OFFSET ??_C@_0CM@OJCMBJGN@MINOR_APPROACH_FRIENDLY_PERSONAL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4632], eax

; 5691 : 	m_iMINOR_APPROACH_PROTECTIVE_PERSONALITY_NEUTRAL = getDefineINT("MINOR_APPROACH_PROTECTIVE_PERSONALITY_NEUTRAL");

	push	1
	push	OFFSET ??_C@_0CO@HEDNLMNA@MINOR_APPROACH_PROTECTIVE_PERSON@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4636], eax

; 5692 : 	m_iMINOR_APPROACH_FRIENDLY_PERSONALITY_HOSTILE = getDefineINT("MINOR_APPROACH_FRIENDLY_PERSONALITY_HOSTILE");

	push	1
	push	OFFSET ??_C@_0CM@DGIFEDN@MINOR_APPROACH_FRIENDLY_PERSONAL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4640], eax

; 5693 : 	m_iMINOR_APPROACH_PROTECTIVE_PERSONALITY_HOSTILE = getDefineINT("MINOR_APPROACH_PROTECTIVE_PERSONALITY_HOSTILE");

	push	1
	push	OFFSET ??_C@_0CO@JOHJPBIA@MINOR_APPROACH_PROTECTIVE_PERSON@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4644], eax

; 5694 : 	m_iMINOR_APPROACH_CONQUEST_PERSONALITY_HOSTILE = getDefineINT("MINOR_APPROACH_CONQUEST_PERSONALITY_HOSTILE");

	push	1
	push	OFFSET ??_C@_0CM@DBOMLPBA@MINOR_APPROACH_CONQUEST_PERSONAL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4648], eax

; 5695 : 	m_iMINOR_APPROACH_FRIENDLY_PERSONALITY_IRRATIONAL = getDefineINT("MINOR_APPROACH_FRIENDLY_PERSONALITY_IRRATIONAL");

	push	1
	push	OFFSET ??_C@_0CP@MLNIEFIC@MINOR_APPROACH_FRIENDLY_PERSONAL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4652], eax

; 5696 : 	m_iMINOR_APPROACH_PROTECTIVE_PERSONALITY_IRRATIONAL = getDefineINT("MINOR_APPROACH_PROTECTIVE_PERSONALITY_IRRATIONAL");

	push	1
	push	OFFSET ??_C@_0DB@LPJOEAAC@MINOR_APPROACH_PROTECTIVE_PERSON@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4656], eax

; 5697 : 	m_iMINOR_APPROACH_WAR_PLANNING_WAR_WITH_ANOTHER_PLAYER = getDefineINT("MINOR_APPROACH_WAR_PLANNING_WAR_WITH_ANOTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0DE@FGCGCEHN@MINOR_APPROACH_WAR_PLANNING_WAR_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4660], eax

; 5698 : 	m_iMINOR_APPROACH_PROTECTIVE_WITH_ANOTHER_PLAYER = getDefineINT("MINOR_APPROACH_PROTECTIVE_WITH_ANOTHER_PLAYER");

	push	1
	push	OFFSET ??_C@_0CO@HHAHPLKN@MINOR_APPROACH_PROTECTIVE_WITH_A@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4664], eax

; 5699 : 	m_iMINOR_APPROACH_WAR_TARGET_IMPOSSIBLE = getDefineINT("MINOR_APPROACH_WAR_TARGET_IMPOSSIBLE");

	push	1
	push	OFFSET ??_C@_0CF@BKBJHBG@MINOR_APPROACH_WAR_TARGET_IMPOSS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4668], eax

; 5700 : 	m_iMINOR_APPROACH_WAR_TARGET_BAD = getDefineINT("MINOR_APPROACH_WAR_TARGET_BAD");

	push	1
	push	OFFSET ??_C@_0BO@CGGPJGPA@MINOR_APPROACH_WAR_TARGET_BAD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4672], eax

; 5701 : 	m_iMINOR_APPROACH_WAR_TARGET_AVERAGE = getDefineINT("MINOR_APPROACH_WAR_TARGET_AVERAGE");

	push	1
	push	OFFSET ??_C@_0CC@DBJKNFIA@MINOR_APPROACH_WAR_TARGET_AVERAG@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4676], eax

; 5702 : 	m_iMINOR_APPROACH_WAR_TARGET_FAVORABLE = getDefineINT("MINOR_APPROACH_WAR_TARGET_FAVORABLE");

	push	1
	push	OFFSET ??_C@_0CE@HACBACEF@MINOR_APPROACH_WAR_TARGET_FAVORA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4680], eax

; 5703 : 	m_iMINOR_APPROACH_WAR_TARGET_SOFT = getDefineINT("MINOR_APPROACH_WAR_TARGET_SOFT");

	push	1
	push	OFFSET ??_C@_0BP@NNJHBILF@MINOR_APPROACH_WAR_TARGET_SOFT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4684], eax

; 5704 : 	m_iCOOPERATION_DESIRE_THRESHOLD_EAGER = getDefineINT("COOPERATION_DESIRE_THRESHOLD_EAGER");

	push	1
	push	OFFSET ??_C@_0CD@NEFIKCMO@COOPERATION_DESIRE_THRESHOLD_EAG@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4688], eax

; 5705 : 	m_iCOOPERATION_DESIRE_THRESHOLD_STRONG = getDefineINT("COOPERATION_DESIRE_THRESHOLD_STRONG");

	push	1
	push	OFFSET ??_C@_0CE@EGKEPGIJ@COOPERATION_DESIRE_THRESHOLD_STR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4692], eax

; 5706 : 	m_iCOOPERATION_DESIRE_THRESHOLD_DECENT = getDefineINT("COOPERATION_DESIRE_THRESHOLD_DECENT");

	push	1
	push	OFFSET ??_C@_0CE@HPIFJKDD@COOPERATION_DESIRE_THRESHOLD_DEC@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4696], eax

; 5707 : 	m_iCOOPERATION_DESIRE_THRESHOLD_WEAK = getDefineINT("COOPERATION_DESIRE_THRESHOLD_WEAK");

	push	1
	push	OFFSET ??_C@_0CC@GJLLBODC@COOPERATION_DESIRE_THRESHOLD_WEA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4700], eax

; 5708 : 	m_iCOOPERATION_DESIRE_WAR_STATE_CALM = getDefineINT("COOPERATION_DESIRE_WAR_STATE_CALM");

	push	1
	push	OFFSET ??_C@_0CC@IIEGIHII@COOPERATION_DESIRE_WAR_STATE_CAL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4704], eax

; 5709 : 	m_iCOOPERATION_DESIRE_WAR_STATE_NEARLY_WON = getDefineINT("COOPERATION_DESIRE_WAR_STATE_NEARLY_WON");

	push	1
	push	OFFSET ??_C@_0CI@GHFIBPAG@COOPERATION_DESIRE_WAR_STATE_NEA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4708], eax

; 5710 : 	m_iCOOPERATION_DESIRE_WAR_STATE_OFFENSIVE = getDefineINT("COOPERATION_DESIRE_WAR_STATE_OFFENSIVE");

	push	1
	push	OFFSET ??_C@_0CH@ODOFGJPK@COOPERATION_DESIRE_WAR_STATE_OFF@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4712], eax

; 5711 : 	m_iCOOPERATION_DESIRE_WAR_STATE_STALEMATE = getDefineINT("COOPERATION_DESIRE_WAR_STATE_STALEMATE");

	push	1
	push	OFFSET ??_C@_0CH@LADLALAA@COOPERATION_DESIRE_WAR_STATE_STA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4716], eax

; 5712 : 	m_iCOOPERATION_DESIRE_WAR_STATE_DEFENSIVE = getDefineINT("COOPERATION_DESIRE_WAR_STATE_DEFENSIVE");

	push	1
	push	OFFSET ??_C@_0CH@CCIIKOMI@COOPERATION_DESIRE_WAR_STATE_DEF@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4720], eax

; 5713 : 	m_iCOOPERATION_DESIRE_WAR_STATE_NEARLY_DEFEATED = getDefineINT("COOPERATION_DESIRE_WAR_STATE_NEARLY_DEFEATED");

	push	1
	push	OFFSET ??_C@_0CN@GEGGKLOD@COOPERATION_DESIRE_WAR_STATE_NEA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4724], eax

; 5714 : 	m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_IMMENSE = getDefineINT("COOPERATION_DESIRE_MILITARY_STRENGTH_IMMENSE");

	push	1
	push	OFFSET ??_C@_0CN@PILDNLAM@COOPERATION_DESIRE_MILITARY_STRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4728], eax

; 5715 : 	m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_POWERFUL = getDefineINT("COOPERATION_DESIRE_MILITARY_STRENGTH_POWERFUL");

	push	1
	push	OFFSET ??_C@_0CO@KJLLBHA@COOPERATION_DESIRE_MILITARY_STRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4732], eax

; 5716 : 	m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_STRONG = getDefineINT("COOPERATION_DESIRE_MILITARY_STRENGTH_STRONG");

	push	1
	push	OFFSET ??_C@_0CM@JDBHHHHD@COOPERATION_DESIRE_MILITARY_STRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4736], eax

; 5717 : 	m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_AVERAGE = getDefineINT("COOPERATION_DESIRE_MILITARY_STRENGTH_AVERAGE");

	push	1
	push	OFFSET ??_C@_0CN@DDFANKII@COOPERATION_DESIRE_MILITARY_STRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4740], eax

; 5718 : 	m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_POOR = getDefineINT("COOPERATION_DESIRE_MILITARY_STRENGTH_POOR");

	push	1
	push	OFFSET ??_C@_0CK@DDFCHPDD@COOPERATION_DESIRE_MILITARY_STRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4744], eax

; 5719 : 	m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_WEAK = getDefineINT("COOPERATION_DESIRE_MILITARY_STRENGTH_WEAK");

	push	1
	push	OFFSET ??_C@_0CK@HPFBMHFF@COOPERATION_DESIRE_MILITARY_STRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4748], eax

; 5720 : 	m_iCOOPERATION_DESIRE_MILITARY_STRENGTH_PATHETIC = getDefineINT("COOPERATION_DESIRE_MILITARY_STRENGTH_PATHETIC");

	push	1
	push	OFFSET ??_C@_0CO@CIBDDIFM@COOPERATION_DESIRE_MILITARY_STRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4752], eax

; 5721 : 	m_iCOOPERATION_DESIRE_OPINION_ALLY = getDefineINT("COOPERATION_DESIRE_OPINION_ALLY");

	push	1
	push	OFFSET ??_C@_0CA@CAFOBIAE@COOPERATION_DESIRE_OPINION_ALLY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4756], eax

; 5722 : 	m_iCOOPERATION_DESIRE_OPINION_FRIEND = getDefineINT("COOPERATION_DESIRE_OPINION_FRIEND");

	push	1
	push	OFFSET ??_C@_0CC@LHEFGNPF@COOPERATION_DESIRE_OPINION_FRIEN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4760], eax

; 5723 : 	m_iCOOPERATION_DESIRE_OPINION_NEUTRAL = getDefineINT("COOPERATION_DESIRE_OPINION_NEUTRAL");

	push	1
	push	OFFSET ??_C@_0CD@NFKAKMBM@COOPERATION_DESIRE_OPINION_NEUTR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4764], eax

; 5724 : 	m_iCOOPERATION_DESIRE_OPINION_COMPETITOR = getDefineINT("COOPERATION_DESIRE_OPINION_COMPETITOR");

	push	1
	push	OFFSET ??_C@_0CG@BKOKFH@COOPERATION_DESIRE_OPINION_COMPE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4768], eax

; 5725 : 	m_iCOOPERATION_DESIRE_OPINION_ENEMY = getDefineINT("COOPERATION_DESIRE_OPINION_ENEMY");

	push	1
	push	OFFSET ??_C@_0CB@OLECCJEM@COOPERATION_DESIRE_OPINION_ENEMY@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4772], eax

; 5726 : 	m_iCOOPERATION_DESIRE_GAME_THREAT_CRITICAL = getDefineINT("COOPERATION_DESIRE_GAME_THREAT_CRITICAL");

	push	1
	push	OFFSET ??_C@_0CI@KDAEHCA@COOPERATION_DESIRE_GAME_THREAT_C@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4776], eax

; 5727 : 	m_iCOOPERATION_DESIRE_GAME_THREAT_SEVERE = getDefineINT("COOPERATION_DESIRE_GAME_THREAT_SEVERE");

	push	1
	push	OFFSET ??_C@_0CG@GIBCGDPG@COOPERATION_DESIRE_GAME_THREAT_S@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4780], eax

; 5728 : 	m_iCOOPERATION_DESIRE_GAME_THREAT_MAJOR = getDefineINT("COOPERATION_DESIRE_GAME_THREAT_MAJOR");

	push	1
	push	OFFSET ??_C@_0CF@BCGCBDBH@COOPERATION_DESIRE_GAME_THREAT_M@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4784], eax

; 5729 : 	m_iCOOPERATION_DESIRE_GAME_THREAT_MINOR = getDefineINT("COOPERATION_DESIRE_GAME_THREAT_MINOR");

	push	1
	push	OFFSET ??_C@_0CF@KNHAMPIB@COOPERATION_DESIRE_GAME_THREAT_M@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4788], eax

; 5730 : 	m_iCOOPERATION_DESIRE_GAME_THREAT_NONE = getDefineINT("COOPERATION_DESIRE_GAME_THREAT_NONE");

	push	1
	push	OFFSET ??_C@_0CE@KAGDKDE@COOPERATION_DESIRE_GAME_THREAT_N@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4792], eax

; 5731 : 	m_iCOOPERATION_DESIRE_THEM_US_SAME_COMPETITOR = getDefineINT("COOPERATION_DESIRE_THEM_US_SAME_COMPETITOR");

	push	1
	push	OFFSET ??_C@_0CL@CDGMPGCE@COOPERATION_DESIRE_THEM_US_SAME_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4796], eax

; 5732 : 	m_iCOOPERATION_DESIRE_THEM_US_COMPETITOR_ENEMY = getDefineINT("COOPERATION_DESIRE_THEM_US_COMPETITOR_ENEMY");

	push	1
	push	OFFSET ??_C@_0CM@GFBIFNBK@COOPERATION_DESIRE_THEM_US_COMPE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4800], eax

; 5733 : 	m_iCOOPERATION_DESIRE_THEM_US_ENEMY_COMPETITOR = getDefineINT("COOPERATION_DESIRE_THEM_US_ENEMY_COMPETITOR");

	push	1
	push	OFFSET ??_C@_0CM@MNEJLOIN@COOPERATION_DESIRE_THEM_US_ENEMY@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4804], eax

; 5734 : 	m_iCOOPERATION_DESIRE_THEM_US_SAME_ENEMY = getDefineINT("COOPERATION_DESIRE_THEM_US_SAME_ENEMY");

	push	1
	push	OFFSET ??_C@_0CG@CIAODHOO@COOPERATION_DESIRE_THEM_US_SAME_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4808], eax

; 5735 : 	m_iEVALUATE_WAR_PLAYER_THRESHOLD = getDefineINT("EVALUATE_WAR_PLAYER_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BO@POCFMHNP@EVALUATE_WAR_PLAYER_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4812], eax

; 5736 : 	m_iEVALUATE_WAR_WILLING_TO_DECLARE_THRESHOLD = getDefineINT("EVALUATE_WAR_WILLING_TO_DECLARE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CK@BEHPIDFA@EVALUATE_WAR_WILLING_TO_DECLARE_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4816], eax

; 5737 : 	m_iEVALUATE_WAR_CONQUEST_GRAND_STRATEGY = getDefineINT("EVALUATE_WAR_CONQUEST_GRAND_STRATEGY");

	push	1
	push	OFFSET ??_C@_0CF@JOKJDFOC@EVALUATE_WAR_CONQUEST_GRAND_STRA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4820], eax

; 5738 : 	m_iEVALUATE_WAR_NOT_PREPARED = getDefineINT("EVALUATE_WAR_NOT_PREPARED");

	push	1
	push	OFFSET ??_C@_0BK@BLLEGEMG@EVALUATE_WAR_NOT_PREPARED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4824], eax

; 5739 : 	m_iEVALUATE_WAR_ALREADY_FIGHTING = getDefineINT("EVALUATE_WAR_ALREADY_FIGHTING");

	push	1
	push	OFFSET ??_C@_0BO@PLAMGJME@EVALUATE_WAR_ALREADY_FIGHTING?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4828], eax

; 5740 : 	m_iEVALUATE_WAR_GAME_THREAT_CRITICAL = getDefineINT("EVALUATE_WAR_GAME_THREAT_CRITICAL");

	push	1
	push	OFFSET ??_C@_0CC@MDJAGMEA@EVALUATE_WAR_GAME_THREAT_CRITICA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4832], eax

; 5741 : 	m_iEVALUATE_WAR_GAME_THREAT_SEVERE = getDefineINT("EVALUATE_WAR_GAME_THREAT_SEVERE");

	push	1
	push	OFFSET ??_C@_0CA@NPANFANN@EVALUATE_WAR_GAME_THREAT_SEVERE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4836], eax

; 5742 : 	m_iEVALUATE_WAR_GAME_THREAT_MAJOR = getDefineINT("EVALUATE_WAR_GAME_THREAT_MAJOR");

	push	1
	push	OFFSET ??_C@_0BP@LAANADGJ@EVALUATE_WAR_GAME_THREAT_MAJOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4840], eax

; 5743 : 	m_iEVALUATE_WAR_GAME_THREAT_MINOR = getDefineINT("EVALUATE_WAR_GAME_THREAT_MINOR");

	push	1
	push	OFFSET ??_C@_0BP@PBPNPPP@EVALUATE_WAR_GAME_THREAT_MINOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4844], eax

; 5744 : 	m_iEVALUATE_WAR_GAME_THREAT_NONE = getDefineINT("EVALUATE_WAR_GAME_THREAT_NONE");

	push	1
	push	OFFSET ??_C@_0BO@CGHDGBH@EVALUATE_WAR_GAME_THREAT_NONE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4848], eax

; 5745 : 	m_iEVALUATE_WAR_SOFT_TARGET = getDefineINT("EVALUATE_WAR_SOFT_TARGET");

	push	1
	push	OFFSET ??_C@_0BJ@MDLDOEBP@EVALUATE_WAR_SOFT_TARGET?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4852], eax

; 5746 : 	m_iEVALUATE_WAR_FAVORABLE_TARGET = getDefineINT("EVALUATE_WAR_FAVORABLE_TARGET");

	push	1
	push	OFFSET ??_C@_0BO@KKPKNDFM@EVALUATE_WAR_FAVORABLE_TARGET?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4856], eax

; 5747 : 	m_iEVALUATE_WAR_AVERAGE_TARGET = getDefineINT("EVALUATE_WAR_AVERAGE_TARGET");

	push	1
	push	OFFSET ??_C@_0BM@BDKFADGN@EVALUATE_WAR_AVERAGE_TARGET?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4860], eax

; 5748 : 	m_iEVALUATE_WAR_BAD_TARGET = getDefineINT("EVALUATE_WAR_BAD_TARGET");

	push	1
	push	OFFSET ??_C@_0BI@JAIHEOCL@EVALUATE_WAR_BAD_TARGET?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4864], eax

; 5749 : 	m_iEVALUATE_WAR_IMPOSSIBLE_TARGET = getDefineINT("EVALUATE_WAR_IMPOSSIBLE_TARGET");

	push	1
	push	OFFSET ??_C@_0BP@NBDOICHP@EVALUATE_WAR_IMPOSSIBLE_TARGET?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4868], eax

; 5750 : 	m_iREQUEST_PEACE_TURN_THRESHOLD = getDefineINT("REQUEST_PEACE_TURN_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BN@KGFDJFHM@REQUEST_PEACE_TURN_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4872], eax

; 5751 : 	m_iPEACE_WILLINGNESS_OFFER_PROJECTION_DESTRUCTION = getDefineINT("PEACE_WILLINGNESS_OFFER_PROJECTION_DESTRUCTION");

	push	1
	push	OFFSET ??_C@_0CP@MOBLIMCN@PEACE_WILLINGNESS_OFFER_PROJECTI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4876], eax

; 5752 : 	m_iPEACE_WILLINGNESS_OFFER_PROJECTION_DEFEAT = getDefineINT("PEACE_WILLINGNESS_OFFER_PROJECTION_DEFEAT");

	push	1
	push	OFFSET ??_C@_0CK@IOJGJHGH@PEACE_WILLINGNESS_OFFER_PROJECTI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4880], eax

; 5753 : 	m_iPEACE_WILLINGNESS_OFFER_PROJECTION_STALEMATE = getDefineINT("PEACE_WILLINGNESS_OFFER_PROJECTION_STALEMATE");

	push	1
	push	OFFSET ??_C@_0CN@LIBCMCHP@PEACE_WILLINGNESS_OFFER_PROJECTI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4884], eax

; 5754 : 	m_iPEACE_WILLINGNESS_OFFER_PROJECTION_UNKNOWN = getDefineINT("PEACE_WILLINGNESS_OFFER_PROJECTION_UNKNOWN");

	push	1
	push	OFFSET ??_C@_0CL@CGGDIOAN@PEACE_WILLINGNESS_OFFER_PROJECTI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4888], eax

; 5755 : 	m_iPEACE_WILLINGNESS_OFFER_PROJECTION_GOOD = getDefineINT("PEACE_WILLINGNESS_OFFER_PROJECTION_GOOD");

	push	1
	push	OFFSET ??_C@_0CI@EFCKOCBA@PEACE_WILLINGNESS_OFFER_PROJECTI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4892], eax

; 5756 : 	m_iPEACE_WILLINGNESS_OFFER_PROJECTION_VERY_GOOD = getDefineINT("PEACE_WILLINGNESS_OFFER_PROJECTION_VERY_GOOD");

	push	1
	push	OFFSET ??_C@_0CN@CDBIOJBH@PEACE_WILLINGNESS_OFFER_PROJECTI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4896], eax

; 5757 : 	m_iPEACE_WILLINGNESS_OFFER_WAR_DAMAGE_NONE = getDefineINT("PEACE_WILLINGNESS_OFFER_WAR_DAMAGE_NONE");

	push	1
	push	OFFSET ??_C@_0CI@PCCNDNHB@PEACE_WILLINGNESS_OFFER_WAR_DAMA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4900], eax

; 5758 : 	m_iPEACE_WILLINGNESS_OFFER_WAR_DAMAGE_MINOR = getDefineINT("PEACE_WILLINGNESS_OFFER_WAR_DAMAGE_MINOR");

	push	1
	push	OFFSET ??_C@_0CJ@KLDOFBJJ@PEACE_WILLINGNESS_OFFER_WAR_DAMA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4904], eax

; 5759 : 	m_iPEACE_WILLINGNESS_OFFER_WAR_DAMAGE_MAJOR = getDefineINT("PEACE_WILLINGNESS_OFFER_WAR_DAMAGE_MAJOR");

	push	1
	push	OFFSET ??_C@_0CJ@BECMINAP@PEACE_WILLINGNESS_OFFER_WAR_DAMA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4908], eax

; 5760 : 	m_iPEACE_WILLINGNESS_OFFER_WAR_DAMAGE_SERIOUS = getDefineINT("PEACE_WILLINGNESS_OFFER_WAR_DAMAGE_SERIOUS");

	push	1
	push	OFFSET ??_C@_0CL@LALIOIKM@PEACE_WILLINGNESS_OFFER_WAR_DAMA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4912], eax

; 5761 : 	m_iPEACE_WILLINGNESS_OFFER_WAR_DAMAGE_CRIPPLED = getDefineINT("PEACE_WILLINGNESS_OFFER_WAR_DAMAGE_CRIPPLED");

	push	1
	push	OFFSET ??_C@_0CM@HHBPLIK@PEACE_WILLINGNESS_OFFER_WAR_DAMA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4916], eax

; 5762 : 	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_UN_SURRENDER = getDefineINT("PEACE_WILLINGNESS_OFFER_THRESHOLD_UN_SURRENDER");

	push	1
	push	OFFSET ??_C@_0CP@EKOFFIKO@PEACE_WILLINGNESS_OFFER_THRESHOL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4920], eax

; 5763 : 	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_CAPITULATION = getDefineINT("PEACE_WILLINGNESS_OFFER_THRESHOLD_CAPITULATION");

	push	1
	push	OFFSET ??_C@_0CP@NPDGMJF@PEACE_WILLINGNESS_OFFER_THRESHOL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4924], eax

; 5764 : 	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_CESSION = getDefineINT("PEACE_WILLINGNESS_OFFER_THRESHOLD_CESSION");

	push	1
	push	OFFSET ??_C@_0CK@CNBAIHNO@PEACE_WILLINGNESS_OFFER_THRESHOL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4928], eax

; 5765 : 	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_SURRENDER = getDefineINT("PEACE_WILLINGNESS_OFFER_THRESHOLD_SURRENDER");

	push	1
	push	OFFSET ??_C@_0CM@FGBHGCOD@PEACE_WILLINGNESS_OFFER_THRESHOL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4932], eax

; 5766 : 	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_SUBMISSION = getDefineINT("PEACE_WILLINGNESS_OFFER_THRESHOLD_SUBMISSION");

	push	1
	push	OFFSET ??_C@_0CN@KKPEBIOF@PEACE_WILLINGNESS_OFFER_THRESHOL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4936], eax

; 5767 : 	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_BACKDOWN = getDefineINT("PEACE_WILLINGNESS_OFFER_THRESHOLD_BACKDOWN");

	push	1
	push	OFFSET ??_C@_0CL@PPLBNHBA@PEACE_WILLINGNESS_OFFER_THRESHOL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4940], eax

; 5768 : 	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_SETTLEMENT = getDefineINT("PEACE_WILLINGNESS_OFFER_THRESHOLD_SETTLEMENT");

	push	1
	push	OFFSET ??_C@_0CN@JCCKEAGA@PEACE_WILLINGNESS_OFFER_THRESHOL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4944], eax

; 5769 : 	m_iPEACE_WILLINGNESS_OFFER_THRESHOLD_ARMISTICE = getDefineINT("PEACE_WILLINGNESS_OFFER_THRESHOLD_ARMISTICE");

	push	1
	push	OFFSET ??_C@_0CM@NNNEPLBA@PEACE_WILLINGNESS_OFFER_THRESHOL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4948], eax

; 5770 : 	m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_DESTRUCTION = getDefineINT("PEACE_WILLINGNESS_ACCEPT_PROJECTION_DESTRUCTION");

	push	1
	push	OFFSET ??_C@_0DA@PEDMNMJM@PEACE_WILLINGNESS_ACCEPT_PROJECT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4952], eax

; 5771 : 	m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_DEFEAT = getDefineINT("PEACE_WILLINGNESS_ACCEPT_PROJECTION_DEFEAT");

	push	1
	push	OFFSET ??_C@_0CL@EOEANOKM@PEACE_WILLINGNESS_ACCEPT_PROJECT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4956], eax

; 5772 : 	m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_STALEMATE = getDefineINT("PEACE_WILLINGNESS_ACCEPT_PROJECTION_STALEMATE");

	push	1
	push	OFFSET ??_C@_0CO@GLODDILD@PEACE_WILLINGNESS_ACCEPT_PROJECT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4960], eax

; 5773 : 	m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_UNKNOWN = getDefineINT("PEACE_WILLINGNESS_ACCEPT_PROJECTION_UNKNOWN");

	push	1
	push	OFFSET ??_C@_0CM@CKBFEDHM@PEACE_WILLINGNESS_ACCEPT_PROJECT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4964], eax

; 5774 : 	m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_GOOD = getDefineINT("PEACE_WILLINGNESS_ACCEPT_PROJECTION_GOOD");

	push	1
	push	OFFSET ??_C@_0CJ@GGNJHAEE@PEACE_WILLINGNESS_ACCEPT_PROJECT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4968], eax

; 5775 : 	m_iPEACE_WILLINGNESS_ACCEPT_PROJECTION_VERY_GOOD = getDefineINT("PEACE_WILLINGNESS_ACCEPT_PROJECTION_VERY_GOOD");

	push	1
	push	OFFSET ??_C@_0CO@PAOJBDNL@PEACE_WILLINGNESS_ACCEPT_PROJECT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4972], eax

; 5776 : 	m_iPEACE_WILLINGNESS_ACCEPT_TARGET_IMPOSSIBLE = getDefineINT("PEACE_WILLINGNESS_ACCEPT_TARGET_IMPOSSIBLE");

	push	1
	push	OFFSET ??_C@_0CL@IFJKOFAM@PEACE_WILLINGNESS_ACCEPT_TARGET_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4976], eax

; 5777 : 	m_iPEACE_WILLINGNESS_ACCEPT_TARGET_BAD = getDefineINT("PEACE_WILLINGNESS_ACCEPT_TARGET_BAD");

	push	1
	push	OFFSET ??_C@_0CE@ONBLCGPI@PEACE_WILLINGNESS_ACCEPT_TARGET_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4980], eax

; 5778 : 	m_iPEACE_WILLINGNESS_ACCEPT_TARGET_AVERAGE = getDefineINT("PEACE_WILLINGNESS_ACCEPT_TARGET_AVERAGE");

	push	1
	push	OFFSET ??_C@_0CI@HGJFKELF@PEACE_WILLINGNESS_ACCEPT_TARGET_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4984], eax

; 5779 : 	m_iPEACE_WILLINGNESS_ACCEPT_TARGET_FAVORABLE = getDefineINT("PEACE_WILLINGNESS_ACCEPT_TARGET_FAVORABLE");

	push	1
	push	OFFSET ??_C@_0CK@PFBCMGFG@PEACE_WILLINGNESS_ACCEPT_TARGET_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4988], eax

; 5780 : 	m_iPEACE_WILLINGNESS_ACCEPT_TARGET_SOFT = getDefineINT("PEACE_WILLINGNESS_ACCEPT_TARGET_SOFT");

	push	1
	push	OFFSET ??_C@_0CF@NDIHOEDH@PEACE_WILLINGNESS_ACCEPT_TARGET_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4992], eax

; 5781 : 	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_UN_SURRENDER = getDefineINT("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_UN_SURRENDER");

	push	1
	push	OFFSET ??_C@_0DA@HAMCAIBP@PEACE_WILLINGNESS_ACCEPT_THRESHO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4996], eax

; 5782 : 	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_CAPITULATION = getDefineINT("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_CAPITULATION");

	push	1
	push	OFFSET ??_C@_0DA@DHNEDMCE@PEACE_WILLINGNESS_ACCEPT_THRESHO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5000], eax

; 5783 : 	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_CESSION = getDefineINT("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_CESSION");

	push	1
	push	OFFSET ??_C@_0CL@ONMGMOBF@PEACE_WILLINGNESS_ACCEPT_THRESHO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5004], eax

; 5784 : 	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_SURRENDER = getDefineINT("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_SURRENDER");

	push	1
	push	OFFSET ??_C@_0CN@HBBJFFIE@PEACE_WILLINGNESS_ACCEPT_THRESHO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5008], eax

; 5785 : 	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_SUBMISSION = getDefineINT("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_SUBMISSION");

	push	1
	push	OFFSET ??_C@_0CO@HJAFOCCJ@PEACE_WILLINGNESS_ACCEPT_THRESHO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5012], eax

; 5786 : 	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_BACKDOWN = getDefineINT("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_BACKDOWN");

	push	1
	push	OFFSET ??_C@_0CM@PDMHBKGB@PEACE_WILLINGNESS_ACCEPT_THRESHO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5016], eax

; 5787 : 	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_SETTLEMENT = getDefineINT("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_SETTLEMENT");

	push	1
	push	OFFSET ??_C@_0CO@EBNLLKKM@PEACE_WILLINGNESS_ACCEPT_THRESHO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5020], eax

; 5788 : 	m_iPEACE_WILLINGNESS_ACCEPT_THRESHOLD_ARMISTICE = getDefineINT("PEACE_WILLINGNESS_ACCEPT_THRESHOLD_ARMISTICE");

	push	1
	push	OFFSET ??_C@_0CN@PKNKMMHH@PEACE_WILLINGNESS_ACCEPT_THRESHO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5024], eax

; 5789 : 	m_iARMISTICE_GPT_DIVISOR = getDefineINT("ARMISTICE_GPT_DIVISOR");

	push	1
	push	OFFSET ??_C@_0BG@LNJFGLFE@ARMISTICE_GPT_DIVISOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5028], eax

; 5790 : 	m_iARMISTICE_MIN_GOLD = getDefineINT("ARMISTICE_MIN_GOLD");

	push	1
	push	OFFSET ??_C@_0BD@JFGOMEDI@ARMISTICE_MIN_GOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5032], eax

; 5791 : 	m_iWAR_GOAL_THRESHOLD_CONQUEST = getDefineINT("WAR_GOAL_THRESHOLD_CONQUEST");

	push	1
	push	OFFSET ??_C@_0BM@PMLFHNFD@WAR_GOAL_THRESHOLD_CONQUEST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5036], eax

; 5792 : 	m_iWAR_GOAL_THRESHOLD_DAMAGE = getDefineINT("WAR_GOAL_THRESHOLD_DAMAGE");

	push	1
	push	OFFSET ??_C@_0BK@EGOAGGHO@WAR_GOAL_THRESHOLD_DAMAGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5040], eax

; 5793 : 	m_iWAR_GOAL_THRESHOLD_PEACE = getDefineINT("WAR_GOAL_THRESHOLD_PEACE");

	push	1
	push	OFFSET ??_C@_0BJ@JJMNFNKJ@WAR_GOAL_THRESHOLD_PEACE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5044], eax

; 5794 : 	m_iWAR_GOAL_STATE_CALM = getDefineINT("WAR_GOAL_STATE_CALM");

	push	1
	push	OFFSET ??_C@_0BE@BJCOKPHO@WAR_GOAL_STATE_CALM?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5048], eax

; 5795 : 	m_iWAR_GOAL_STATE_NEARLY_WON = getDefineINT("WAR_GOAL_STATE_NEARLY_WON");

	push	1
	push	OFFSET ??_C@_0BK@FHGBIMOM@WAR_GOAL_STATE_NEARLY_WON?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5052], eax

; 5796 : 	m_iWAR_GOAL_STATE_OFFENSIVE = getDefineINT("WAR_GOAL_STATE_OFFENSIVE");

	push	1
	push	OFFSET ??_C@_0BJ@GPIJGKBF@WAR_GOAL_STATE_OFFENSIVE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5056], eax

; 5797 : 	m_iWAR_GOAL_STATE_STALEMATE = getDefineINT("WAR_GOAL_STATE_STALEMATE");

	push	1
	push	OFFSET ??_C@_0BJ@DMFHAIOP@WAR_GOAL_STATE_STALEMATE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5060], eax

; 5798 : 	m_iWAR_GOAL_STATE_DEFENSIVE = getDefineINT("WAR_GOAL_STATE_DEFENSIVE");

	push	1
	push	OFFSET ??_C@_0BJ@KOOEKNCH@WAR_GOAL_STATE_DEFENSIVE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5064], eax

; 5799 : 	m_iWAR_GOAL_STATE_NEARLY_DEFEATED = getDefineINT("WAR_GOAL_STATE_NEARLY_DEFEATED");

	push	1
	push	OFFSET ??_C@_0BP@FNALNCDL@WAR_GOAL_STATE_NEARLY_DEFEATED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5068], eax

; 5800 : 	m_iWAR_GOAL_ANOTHER_PLAYER_STATE_CALM = getDefineINT("WAR_GOAL_ANOTHER_PLAYER_STATE_CALM");

	push	1
	push	OFFSET ??_C@_0CD@OFBCIAJK@WAR_GOAL_ANOTHER_PLAYER_STATE_CA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5072], eax

; 5801 : 	m_iWAR_GOAL_ANOTHER_PLAYER_STATE_NEARLY_WON = getDefineINT("WAR_GOAL_ANOTHER_PLAYER_STATE_NEARLY_WON");

	push	1
	push	OFFSET ??_C@_0CJ@JPAGKAAA@WAR_GOAL_ANOTHER_PLAYER_STATE_NE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5076], eax

; 5802 : 	m_iWAR_GOAL_ANOTHER_PLAYER_STATE_OFFENSIVE = getDefineINT("WAR_GOAL_ANOTHER_PLAYER_STATE_OFFENSIVE");

	push	1
	push	OFFSET ??_C@_0CI@NPPEAGCH@WAR_GOAL_ANOTHER_PLAYER_STATE_OF@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5080], eax

; 5803 : 	m_iWAR_GOAL_ANOTHER_PLAYER_STATE_STALEMATE = getDefineINT("WAR_GOAL_ANOTHER_PLAYER_STATE_STALEMATE");

	push	1
	push	OFFSET ??_C@_0CI@IMCKGENN@WAR_GOAL_ANOTHER_PLAYER_STATE_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5084], eax

; 5804 : 	m_iWAR_GOAL_ANOTHER_PLAYER_STATE_DEFENSIVE = getDefineINT("WAR_GOAL_ANOTHER_PLAYER_STATE_DEFENSIVE");

	push	1
	push	OFFSET ??_C@_0CI@BOJJMBBF@WAR_GOAL_ANOTHER_PLAYER_STATE_DE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5088], eax

; 5805 : 	m_iWAR_GOAL_ANOTHER_PLAYER_STATE_NEARLY_DEFEATED = getDefineINT("WAR_GOAL_ANOTHER_PLAYER_STATE_NEARLY_DEFEATED");

	push	1
	push	OFFSET ??_C@_0CO@BEHAGIIA@WAR_GOAL_ANOTHER_PLAYER_STATE_NE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5092], eax

; 5806 : 	m_iWAR_GOAL_DAMAGE_CRIPPLED = getDefineINT("WAR_GOAL_DAMAGE_CRIPPLED");

	push	1
	push	OFFSET ??_C@_0BJ@DMLMFPGN@WAR_GOAL_DAMAGE_CRIPPLED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5096], eax

; 5807 : 	m_iWAR_GOAL_DAMAGE_SERIOUS = getDefineINT("WAR_GOAL_DAMAGE_SERIOUS");

	push	1
	push	OFFSET ??_C@_0BI@BDDMMHIM@WAR_GOAL_DAMAGE_SERIOUS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5100], eax

; 5808 : 	m_iWAR_GOAL_DAMAGE_MAJOR = getDefineINT("WAR_GOAL_DAMAGE_MAJOR");

	push	1
	push	OFFSET ??_C@_0BG@ODLKCLKN@WAR_GOAL_DAMAGE_MAJOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5104], eax

; 5809 : 	m_iWAR_GOAL_DAMAGE_MINOR = getDefineINT("WAR_GOAL_DAMAGE_MINOR");

	push	1
	push	OFFSET ??_C@_0BG@FMKIPHDL@WAR_GOAL_DAMAGE_MINOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5108], eax

; 5810 : 	m_iWAR_GOAL_DAMAGE_NONE = getDefineINT("WAR_GOAL_DAMAGE_NONE");

	push	1
	push	OFFSET ??_C@_0BF@GNMMCOF@WAR_GOAL_DAMAGE_NONE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5112], eax

; 5811 : 	m_iWAR_GOAL_GAME_THREAT_CRITICAL = getDefineINT("WAR_GOAL_GAME_THREAT_CRITICAL");

	push	1
	push	OFFSET ??_C@_0BO@IAGOLLGB@WAR_GOAL_GAME_THREAT_CRITICAL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5116], eax

; 5812 : 	m_iWAR_GOAL_GAME_THREAT_SEVERE = getDefineINT("WAR_GOAL_GAME_THREAT_SEVERE");

	push	1
	push	OFFSET ??_C@_0BM@DDJPLANG@WAR_GOAL_GAME_THREAT_SEVERE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5120], eax

; 5813 : 	m_iWAR_GOAL_GAME_THREAT_MAJOR = getDefineINT("WAR_GOAL_GAME_THREAT_MAJOR");

	push	1
	push	OFFSET ??_C@_0BL@EBBPCOKI@WAR_GOAL_GAME_THREAT_MAJOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5124], eax

; 5814 : 	m_iWAR_GOAL_GAME_THREAT_MINOR = getDefineINT("WAR_GOAL_GAME_THREAT_MINOR");

	push	1
	push	OFFSET ??_C@_0BL@POANPCDO@WAR_GOAL_GAME_THREAT_MINOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5128], eax

; 5815 : 	m_iWAR_GOAL_GAME_THREAT_NONE = getDefineINT("WAR_GOAL_GAME_THREAT_NONE");

	push	1
	push	OFFSET ??_C@_0BK@MEKILFMG@WAR_GOAL_GAME_THREAT_NONE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5132], eax

; 5816 : 	m_iWAR_GOAL_TARGET_SOFT = getDefineINT("WAR_GOAL_TARGET_SOFT");

	push	1
	push	OFFSET ??_C@_0BF@OJENDNGK@WAR_GOAL_TARGET_SOFT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5136], eax

; 5817 : 	m_iWAR_GOAL_TARGET_FAVORABLE = getDefineINT("WAR_GOAL_TARGET_FAVORABLE");

	push	1
	push	OFFSET ??_C@_0BK@NHFMPGNA@WAR_GOAL_TARGET_FAVORABLE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5140], eax

; 5818 : 	m_iWAR_GOAL_TARGET_AVERAGE = getDefineINT("WAR_GOAL_TARGET_AVERAGE");

	push	1
	push	OFFSET ??_C@_0BI@DJLKEMJE@WAR_GOAL_TARGET_AVERAGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5144], eax

; 5819 : 	m_iWAR_GOAL_TARGET_BAD = getDefineINT("WAR_GOAL_TARGET_BAD");

	push	1
	push	OFFSET ??_C@_0BE@JCJDLFJJ@WAR_GOAL_TARGET_BAD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5148], eax

; 5820 : 	m_iWAR_GOAL_TARGET_IMPOSSIBLE = getDefineINT("WAR_GOAL_TARGET_IMPOSSIBLE");

	push	1
	push	OFFSET ??_C@_0BL@IBGDINCJ@WAR_GOAL_TARGET_IMPOSSIBLE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5152], eax

; 5821 : 	m_iWAR_PROJECTION_THRESHOLD_VERY_GOOD = getDefineINT("WAR_PROJECTION_THRESHOLD_VERY_GOOD");

	push	1
	push	OFFSET ??_C@_0CD@CEPLCBIO@WAR_PROJECTION_THRESHOLD_VERY_GO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5156], eax

; 5822 : 	m_iWAR_PROJECTION_THRESHOLD_GOOD = getDefineINT("WAR_PROJECTION_THRESHOLD_GOOD");

	push	1
	push	OFFSET ??_C@_0BO@KBCCKBEP@WAR_PROJECTION_THRESHOLD_GOOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5160], eax

; 5823 : 	m_iWAR_PROJECTION_THRESHOLD_DESTRUCTION = getDefineINT("WAR_PROJECTION_THRESHOLD_DESTRUCTION");

	push	1
	push	OFFSET ??_C@_0CF@PLCHPABP@WAR_PROJECTION_THRESHOLD_DESTRUC@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5164], eax

; 5824 : 	m_iWAR_PROJECTION_THRESHOLD_DEFEAT = getDefineINT("WAR_PROJECTION_THRESHOLD_DEFEAT");

	push	1
	push	OFFSET ??_C@_0CA@FMGACCNO@WAR_PROJECTION_THRESHOLD_DEFEAT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5168], eax

; 5825 : 	m_iWAR_PROJECTION_THRESHOLD_STALEMATE = getDefineINT("WAR_PROJECTION_THRESHOLD_STALEMATE");

	push	1
	push	OFFSET ??_C@_0CD@LPPBAKOG@WAR_PROJECTION_THRESHOLD_STALEMA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5172], eax

; 5826 : 	m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_PATHETIC = getDefineINT("WAR_PROJECTION_THEIR_MILITARY_STRENGTH_PATHETIC");

	push	1
	push	OFFSET ??_C@_0DA@FHDOIIMG@WAR_PROJECTION_THEIR_MILITARY_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5176], eax

; 5827 : 	m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_WEAK = getDefineINT("WAR_PROJECTION_THEIR_MILITARY_STRENGTH_WEAK");

	push	1
	push	OFFSET ??_C@_0CM@LLOKKCFH@WAR_PROJECTION_THEIR_MILITARY_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5180], eax

; 5828 : 	m_iWAR_PROJECTION_RECKLESS_EXPANDER = getDefineINT("WAR_PROJECTION_RECKLESS_EXPANDER");

	push	1
	push	OFFSET ??_C@_0CB@KLOPGNHP@WAR_PROJECTION_RECKLESS_EXPANDER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5184], eax

; 5829 : 	m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_POOR = getDefineINT("WAR_PROJECTION_THEIR_MILITARY_STRENGTH_POOR");

	push	1
	push	OFFSET ??_C@_0CM@PHOJBKDB@WAR_PROJECTION_THEIR_MILITARY_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5188], eax

; 5830 : 	m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_AVERAGE = getDefineINT("WAR_PROJECTION_THEIR_MILITARY_STRENGTH_AVERAGE");

	push	1
	push	OFFSET ??_C@_0CP@HEONPLME@WAR_PROJECTION_THEIR_MILITARY_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5192], eax

; 5831 : 	m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_STRONG = getDefineINT("WAR_PROJECTION_THEIR_MILITARY_STRENGTH_STRONG");

	push	1
	push	OFFSET ??_C@_0CO@JMPJEEJN@WAR_PROJECTION_THEIR_MILITARY_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5196], eax

; 5832 : 	m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_POWERFUL = getDefineINT("WAR_PROJECTION_THEIR_MILITARY_STRENGTH_POWERFUL");

	push	1
	push	OFFSET ??_C@_0DA@HFLGABOK@WAR_PROJECTION_THEIR_MILITARY_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5200], eax

; 5833 : 	m_iWAR_PROJECTION_THEIR_MILITARY_STRENGTH_IMMENSE = getDefineINT("WAR_PROJECTION_THEIR_MILITARY_STRENGTH_IMMENSE");

	push	1
	push	OFFSET ??_C@_0CP@LPAOPKEA@WAR_PROJECTION_THEIR_MILITARY_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5204], eax

; 5834 : 	m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_PATHETIC = getDefineINT("WAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_PATHETIC");

	push	1
	push	OFFSET ??_C@_0DA@OBDNGCIO@WAR_PROJECTION_THEIR_ECONOMIC_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5208], eax

; 5835 : 	m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_WEAK = getDefineINT("WAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_WEAK");

	push	1
	push	OFFSET ??_C@_0CM@KDBJPKHI@WAR_PROJECTION_THEIR_ECONOMIC_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5212], eax

; 5836 : 	m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_POOR = getDefineINT("WAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_POOR");

	push	1
	push	OFFSET ??_C@_0CM@OPBKECBO@WAR_PROJECTION_THEIR_ECONOMIC_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5216], eax

; 5837 : 	m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_AVERAGE = getDefineINT("WAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_AVERAGE");

	push	1
	push	OFFSET ??_C@_0CP@BBCKIOPL@WAR_PROJECTION_THEIR_ECONOMIC_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5220], eax

; 5838 : 	m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_STRONG = getDefineINT("WAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_STRONG");

	push	1
	push	OFFSET ??_C@_0CO@OLFFLNMF@WAR_PROJECTION_THEIR_ECONOMIC_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5224], eax

; 5839 : 	m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_POWERFUL = getDefineINT("WAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_POWERFUL");

	push	1
	push	OFFSET ??_C@_0DA@MDLFOLKC@WAR_PROJECTION_THEIR_ECONOMIC_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5228], eax

; 5840 : 	m_iWAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_IMMENSE = getDefineINT("WAR_PROJECTION_THEIR_ECONOMIC_STRENGTH_IMMENSE");

	push	1
	push	OFFSET ??_C@_0CP@NKMJIPHP@WAR_PROJECTION_THEIR_ECONOMIC_ST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5232], eax

; 5841 : 	m_iWAR_PROJECTION_WAR_DAMAGE_US_NONE = getDefineINT("WAR_PROJECTION_WAR_DAMAGE_US_NONE");

	push	1
	push	OFFSET ??_C@_0CC@JCHFGAKF@WAR_PROJECTION_WAR_DAMAGE_US_NON@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5236], eax

; 5842 : 	m_iWAR_PROJECTION_WAR_DAMAGE_US_MINOR = getDefineINT("WAR_PROJECTION_WAR_DAMAGE_US_MINOR");

	push	1
	push	OFFSET ??_C@_0CD@CKOABPAJ@WAR_PROJECTION_WAR_DAMAGE_US_MIN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5240], eax

; 5843 : 	m_iWAR_PROJECTION_WAR_DAMAGE_US_MAJOR = getDefineINT("WAR_PROJECTION_WAR_DAMAGE_US_MAJOR");

	push	1
	push	OFFSET ??_C@_0CD@JFPCMDJP@WAR_PROJECTION_WAR_DAMAGE_US_MAJ@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5244], eax

; 5844 : 	m_iWAR_PROJECTION_WAR_DAMAGE_US_SERIOUS = getDefineINT("WAR_PROJECTION_WAR_DAMAGE_US_SERIOUS");

	push	1
	push	OFFSET ??_C@_0CF@FAJNIPPP@WAR_PROJECTION_WAR_DAMAGE_US_SER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5248], eax

; 5845 : 	m_iWAR_PROJECTION_WAR_DAMAGE_US_CRIPPLED = getDefineINT("WAR_PROJECTION_WAR_DAMAGE_US_CRIPPLED");

	push	1
	push	OFFSET ??_C@_0CG@PFPDNOKD@WAR_PROJECTION_WAR_DAMAGE_US_CRI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5252], eax

; 5846 : 	m_iWAR_PROJECTION_WAR_DAMAGE_THEM_NONE = getDefineINT("WAR_PROJECTION_WAR_DAMAGE_THEM_NONE");

	push	1
	push	OFFSET ??_C@_0CE@BIGHMCBI@WAR_PROJECTION_WAR_DAMAGE_THEM_N@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5256], eax

; 5847 : 	m_iWAR_PROJECTION_WAR_DAMAGE_THEM_MINOR = getDefineINT("WAR_PROJECTION_WAR_DAMAGE_THEM_MINOR");

	push	1
	push	OFFSET ??_C@_0CF@JPLKMCJK@WAR_PROJECTION_WAR_DAMAGE_THEM_M@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5260], eax

; 5848 : 	m_iWAR_PROJECTION_WAR_DAMAGE_THEM_MAJOR = getDefineINT("WAR_PROJECTION_WAR_DAMAGE_THEM_MAJOR");

	push	1
	push	OFFSET ??_C@_0CF@CAKIBOAM@WAR_PROJECTION_WAR_DAMAGE_THEM_M@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5264], eax

; 5849 : 	m_iWAR_PROJECTION_WAR_DAMAGE_THEM_SERIOUS = getDefineINT("WAR_PROJECTION_WAR_DAMAGE_THEM_SERIOUS");

	push	1
	push	OFFSET ??_C@_0CH@PCJDENBF@WAR_PROJECTION_WAR_DAMAGE_THEM_S@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5268], eax

; 5850 : 	m_iWAR_PROJECTION_WAR_DAMAGE_THEM_CRIPPLED = getDefineINT("WAR_PROJECTION_WAR_DAMAGE_THEM_CRIPPLED");

	push	1
	push	OFFSET ??_C@_0CI@LFIONLAH@WAR_PROJECTION_WAR_DAMAGE_THEM_C@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5272], eax

; 5851 : 	m_iWAR_PROJECTION_WAR_DURATION_SCORE_CAP = getDefineINT("WAR_PROJECTION_WAR_DURATION_SCORE_CAP");

	push	1
	push	OFFSET ??_C@_0CG@IFICIBIH@WAR_PROJECTION_WAR_DURATION_SCOR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5276], eax

; 5852 : 	m_iWAR_STATE_CALM_THRESHOLD_FOREIGN_FORCES = getDefineINT("WAR_STATE_CALM_THRESHOLD_FOREIGN_FORCES");

	push	1
	push	OFFSET ??_C@_0CI@FOBPGMAL@WAR_STATE_CALM_THRESHOLD_FOREIGN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5280], eax

; 5853 : 	m_iWAR_STATE_THRESHOLD_NEARLY_WON = getDefineINT("WAR_STATE_THRESHOLD_NEARLY_WON");

	push	1
	push	OFFSET ??_C@_0BP@LGGCAOOI@WAR_STATE_THRESHOLD_NEARLY_WON?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5284], eax

; 5854 : 	m_iWAR_STATE_THRESHOLD_OFFENSIVE = getDefineINT("WAR_STATE_THRESHOLD_OFFENSIVE");

	push	1
	push	OFFSET ??_C@_0BO@GCJDHGFO@WAR_STATE_THRESHOLD_OFFENSIVE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5288], eax

; 5855 : 	m_iWAR_STATE_THRESHOLD_STALEMATE = getDefineINT("WAR_STATE_THRESHOLD_STALEMATE");

	push	1
	push	OFFSET ??_C@_0BO@DBENBEKE@WAR_STATE_THRESHOLD_STALEMATE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5292], eax

; 5856 : 	m_iWAR_STATE_THRESHOLD_DEFENSIVE = getDefineINT("WAR_STATE_THRESHOLD_DEFENSIVE");

	push	1
	push	OFFSET ??_C@_0BO@KDPOLBGM@WAR_STATE_THRESHOLD_DEFENSIVE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5296], eax

; 5857 : 	m_iWAR_DAMAGE_LEVEL_THRESHOLD_CRIPPLED = getDefineINT("WAR_DAMAGE_LEVEL_THRESHOLD_CRIPPLED");

	push	1
	push	OFFSET ??_C@_0CE@MOGEEAOM@WAR_DAMAGE_LEVEL_THRESHOLD_CRIPP@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5300], eax

; 5858 : 	m_iWAR_DAMAGE_LEVEL_THRESHOLD_SERIOUS = getDefineINT("WAR_DAMAGE_LEVEL_THRESHOLD_SERIOUS");

	push	1
	push	OFFSET ??_C@_0CD@KJCDAINP@WAR_DAMAGE_LEVEL_THRESHOLD_SERIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5304], eax

; 5859 : 	m_iWAR_DAMAGE_LEVEL_THRESHOLD_MAJOR = getDefineINT("WAR_DAMAGE_LEVEL_THRESHOLD_MAJOR");

	push	1
	push	OFFSET ??_C@_0CB@KAHJEGJL@WAR_DAMAGE_LEVEL_THRESHOLD_MAJOR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5308], eax

; 5860 : 	m_iWAR_DAMAGE_LEVEL_THRESHOLD_MINOR = getDefineINT("WAR_DAMAGE_LEVEL_THRESHOLD_MINOR");

	push	1
	push	OFFSET ??_C@_0CB@BPGLJKAN@WAR_DAMAGE_LEVEL_THRESHOLD_MINOR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5312], eax

; 5861 : 	m_iWAR_DAMAGE_LEVEL_CITY_WEIGHT = getDefineINT("WAR_DAMAGE_LEVEL_CITY_WEIGHT");

	push	1
	push	OFFSET ??_C@_0BN@INGMEPD@WAR_DAMAGE_LEVEL_CITY_WEIGHT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5316], eax

; 5862 : 	m_iWAR_DAMAGE_LEVEL_INVOLVED_CITY_POP_MULTIPLIER = getDefineINT("WAR_DAMAGE_LEVEL_INVOLVED_CITY_POP_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CO@GHELGKPN@WAR_DAMAGE_LEVEL_INVOLVED_CITY_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5320], eax

; 5863 : 	m_iWAR_DAMAGE_LEVEL_UNINVOLVED_CITY_POP_MULTIPLIER = getDefineINT("WAR_DAMAGE_LEVEL_UNINVOLVED_CITY_POP_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0DA@MCOFBMNP@WAR_DAMAGE_LEVEL_UNINVOLVED_CITY@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5324], eax

; 5864 : 	m_iMILITARY_AGGRESSIVE_POSTURE_THRESHOLD_INCREDIBLE = getDefineINT("MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_INCREDIBLE");

	push	1
	push	OFFSET ??_C@_0DB@MAPIMJOL@MILITARY_AGGRESSIVE_POSTURE_THRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5328], eax

; 5865 : 	m_iMILITARY_AGGRESSIVE_POSTURE_THRESHOLD_HIGH = getDefineINT("MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_HIGH");

	push	1
	push	OFFSET ??_C@_0CL@DEJEBHB@MILITARY_AGGRESSIVE_POSTURE_THRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5332], eax

; 5866 : 	m_iMILITARY_AGGRESSIVE_POSTURE_THRESHOLD_MEDIUM = getDefineINT("MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_MEDIUM");

	push	1
	push	OFFSET ??_C@_0CN@MCLJBFIC@MILITARY_AGGRESSIVE_POSTURE_THRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5336], eax

; 5867 : 	m_iMILITARY_AGGRESSIVE_POSTURE_THRESHOLD_LOW = getDefineINT("MILITARY_AGGRESSIVE_POSTURE_THRESHOLD_LOW");

	push	1
	push	OFFSET ??_C@_0CK@EGIJENJE@MILITARY_AGGRESSIVE_POSTURE_THRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5340], eax

; 5868 : 	m_iEXPANSION_CAPITAL_DISTANCE_AGGRESSIVE_POSTURE_HIGH = getDefineINT("EXPANSION_CAPITAL_DISTANCE_AGGRESSIVE_POSTURE_HIGH");

	push	1
	push	OFFSET ??_C@_0DD@KLMOPLOM@EXPANSION_CAPITAL_DISTANCE_AGGRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5344], eax

; 5869 : 	m_iEXPANSION_CAPITAL_DISTANCE_AGGRESSIVE_POSTURE_MEDIUM = getDefineINT("EXPANSION_CAPITAL_DISTANCE_AGGRESSIVE_POSTURE_MEDIUM");

	push	1
	push	OFFSET ??_C@_0DF@CNOCBDMA@EXPANSION_CAPITAL_DISTANCE_AGGRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5348], eax

; 5870 : 	m_iEXPANSION_CAPITAL_DISTANCE_AGGRESSIVE_POSTURE_LOW = getDefineINT("EXPANSION_CAPITAL_DISTANCE_AGGRESSIVE_POSTURE_LOW");

	push	1
	push	OFFSET ??_C@_0DC@KGOMIFDJ@EXPANSION_CAPITAL_DISTANCE_AGGRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5352], eax

; 5871 : 	m_iPLOT_BUYING_POSTURE_INCREDIBLE_THRESHOLD = getDefineINT("PLOT_BUYING_POSTURE_INCREDIBLE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CJ@KAMKGMDB@PLOT_BUYING_POSTURE_INCREDIBLE_T@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5356], eax

; 5872 : 	m_iPLOT_BUYING_POSTURE_HIGH_THRESHOLD = getDefineINT("PLOT_BUYING_POSTURE_HIGH_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CD@DBHNLGNJ@PLOT_BUYING_POSTURE_HIGH_THRESHO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5360], eax

; 5873 : 	m_iPLOT_BUYING_POSTURE_MEDIUM_THRESHOLD = getDefineINT("PLOT_BUYING_POSTURE_MEDIUM_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CF@GLAJGGBA@PLOT_BUYING_POSTURE_MEDIUM_THRES@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5364], eax

; 5874 : 	m_iPLOT_BUYING_POSTURE_LOW_THRESHOLD = getDefineINT("PLOT_BUYING_POSTURE_LOW_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CC@DIPEFBJJ@PLOT_BUYING_POSTURE_LOW_THRESHOL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5368], eax

; 5875 : 	m_iMILITARY_STRENGTH_BASE = getDefineINT("MILITARY_STRENGTH_BASE");

	push	1
	push	OFFSET ??_C@_0BH@KMNEMPLD@MILITARY_STRENGTH_BASE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5372], eax

; 5876 : 	m_iMILITARY_STRENGTH_RATIO_MULTIPLIER = getDefineINT("MILITARY_STRENGTH_RATIO_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CD@OEAJHFFE@MILITARY_STRENGTH_RATIO_MULTIPLI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5376], eax

; 5877 : 	m_iMILITARY_STRENGTH_CITY_MOD = getDefineINT("MILITARY_STRENGTH_CITY_MOD");

	push	1
	push	OFFSET ??_C@_0BL@OGMDLEEP@MILITARY_STRENGTH_CITY_MOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5380], eax

; 5878 : 	m_iMILITARY_STRENGTH_IMMENSE_THRESHOLD = getDefineINT("MILITARY_STRENGTH_IMMENSE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CE@PPHLKHGA@MILITARY_STRENGTH_IMMENSE_THRESH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5384], eax

; 5879 : 	m_iMILITARY_STRENGTH_POWERFUL_THRESHOLD = getDefineINT("MILITARY_STRENGTH_POWERFUL_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CF@IKENIJOH@MILITARY_STRENGTH_POWERFUL_THRES@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5388], eax

; 5880 : 	m_iMILITARY_STRENGTH_STRONG_THRESHOLD = getDefineINT("MILITARY_STRENGTH_STRONG_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CD@PCCGKBHN@MILITARY_STRENGTH_STRONG_THRESHO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5392], eax

; 5881 : 	m_iMILITARY_STRENGTH_AVERAGE_THRESHOLD = getDefineINT("MILITARY_STRENGTH_AVERAGE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CE@MEKLPDKL@MILITARY_STRENGTH_AVERAGE_THRESH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5396], eax

; 5882 : 	m_iMILITARY_STRENGTH_POOR_THRESHOLD = getDefineINT("MILITARY_STRENGTH_POOR_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CB@ICBJICOG@MILITARY_STRENGTH_POOR_THRESHOLD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5400], eax

; 5883 : 	m_iMILITARY_STRENGTH_WEAK_THRESHOLD = getDefineINT("MILITARY_STRENGTH_WEAK_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CB@KAHIIMLK@MILITARY_STRENGTH_WEAK_THRESHOLD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5404], eax

; 5884 : 	m_iECONOMIC_STRENGTH_RATIO_MULTIPLIER = getDefineINT("ECONOMIC_STRENGTH_RATIO_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CD@KALCNKEP@ECONOMIC_STRENGTH_RATIO_MULTIPLI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5408], eax

; 5885 : 	m_iECONOMIC_STRENGTH_IMMENSE_THRESHOLD = getDefineINT("ECONOMIC_STRENGTH_IMMENSE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CE@HFFKNFCD@ECONOMIC_STRENGTH_IMMENSE_THRESH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5412], eax

; 5886 : 	m_iECONOMIC_STRENGTH_POWERFUL_THRESHOLD = getDefineINT("ECONOMIC_STRENGTH_POWERFUL_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CF@GFBCLILP@ECONOMIC_STRENGTH_POWERFUL_THRES@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5416], eax

; 5887 : 	m_iECONOMIC_STRENGTH_STRONG_THRESHOLD = getDefineINT("ECONOMIC_STRENGTH_STRONG_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CD@LGJNAOGG@ECONOMIC_STRENGTH_STRONG_THRESHO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5420], eax

; 5888 : 	m_iECONOMIC_STRENGTH_AVERAGE_THRESHOLD = getDefineINT("ECONOMIC_STRENGTH_AVERAGE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CE@EOIKIBOI@ECONOMIC_STRENGTH_AVERAGE_THRESH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5424], eax

; 5889 : 	m_iECONOMIC_STRENGTH_POOR_THRESHOLD = getDefineINT("ECONOMIC_STRENGTH_POOR_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CB@NABAPINF@ECONOMIC_STRENGTH_POOR_THRESHOLD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5428], eax

; 5890 : 	m_iECONOMIC_STRENGTH_WEAK_THRESHOLD = getDefineINT("ECONOMIC_STRENGTH_WEAK_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CB@PCHBPGIJ@ECONOMIC_STRENGTH_WEAK_THRESHOLD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5432], eax

; 5891 : 	m_iTARGET_IMPOSSIBLE_THRESHOLD = getDefineINT("TARGET_IMPOSSIBLE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BM@PPAFNFHP@TARGET_IMPOSSIBLE_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5436], eax

; 5892 : 	m_iTARGET_BAD_THRESHOLD = getDefineINT("TARGET_BAD_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BF@FNEFFDCJ@TARGET_BAD_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5440], eax

; 5893 : 	m_iTARGET_AVERAGE_THRESHOLD = getDefineINT("TARGET_AVERAGE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BJ@JNMHMPKA@TARGET_AVERAGE_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5444], eax

; 5894 : 	m_iTARGET_FAVORABLE_THRESHOLD = getDefineINT("TARGET_FAVORABLE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BL@KHGHPGJD@TARGET_FAVORABLE_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5448], eax

; 5895 : 	m_iTARGET_INCREASE_WAR_TURNS = getDefineINT("TARGET_INCREASE_WAR_TURNS");

	push	1
	push	OFFSET ??_C@_0BK@GCMLPJAM@TARGET_INCREASE_WAR_TURNS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5452], eax

; 5896 : 	m_iTARGET_MILITARY_STRENGTH_IMMENSE = getDefineINT("TARGET_MILITARY_STRENGTH_IMMENSE");

	push	1
	push	OFFSET ??_C@_0CB@DMOILIMJ@TARGET_MILITARY_STRENGTH_IMMENSE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5456], eax

; 5897 : 	m_iTARGET_MILITARY_STRENGTH_POWERFUL = getDefineINT("TARGET_MILITARY_STRENGTH_POWERFUL");

	push	1
	push	OFFSET ??_C@_0CC@OBFBNMCM@TARGET_MILITARY_STRENGTH_POWERFU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5460], eax

; 5898 : 	m_iTARGET_MILITARY_STRENGTH_STRONG = getDefineINT("TARGET_MILITARY_STRENGTH_STRONG");

	push	1
	push	OFFSET ??_C@_0CA@KJDOAKIK@TARGET_MILITARY_STRENGTH_STRONG?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5464], eax

; 5899 : 	m_iTARGET_MILITARY_STRENGTH_AVERAGE = getDefineINT("TARGET_MILITARY_STRENGTH_AVERAGE");

	push	1
	push	OFFSET ??_C@_0CB@PHALLJEN@TARGET_MILITARY_STRENGTH_AVERAGE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5468], eax

; 5900 : 	m_iTARGET_MILITARY_STRENGTH_POOR = getDefineINT("TARGET_MILITARY_STRENGTH_POOR");

	push	1
	push	OFFSET ??_C@_0BO@BGGDLHPH@TARGET_MILITARY_STRENGTH_POOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5472], eax

; 5901 : 	m_iTARGET_MILITARY_STRENGTH_WEAK = getDefineINT("TARGET_MILITARY_STRENGTH_WEAK");

	push	1
	push	OFFSET ??_C@_0BO@FKGAAPJB@TARGET_MILITARY_STRENGTH_WEAK?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5476], eax

; 5902 : 	m_iTARGET_MILITARY_STRENGTH_PATHETIC = getDefineINT("TARGET_MILITARY_STRENGTH_PATHETIC");

	push	1
	push	OFFSET ??_C@_0CC@MDNJFFAA@TARGET_MILITARY_STRENGTH_PATHETI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5480], eax

; 5903 : 	m_iTARGET_ALREADY_WAR_EACH_PLAYER = getDefineINT("TARGET_ALREADY_WAR_EACH_PLAYER");

	push	1
	push	OFFSET ??_C@_0BP@KGPKCNPO@TARGET_ALREADY_WAR_EACH_PLAYER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5484], eax

; 5904 : 	m_iTARGET_NEIGHBORS = getDefineINT("TARGET_NEIGHBORS");

	push	1
	push	OFFSET ??_C@_0BB@KGACAMLE@TARGET_NEIGHBORS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5488], eax

; 5905 : 	m_iTARGET_CLOSE = getDefineINT("TARGET_CLOSE");

	push	1
	push	OFFSET ??_C@_0N@GKHCOLFL@TARGET_CLOSE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5492], eax

; 5906 : 	m_iTARGET_FAR = getDefineINT("TARGET_FAR");

	push	1
	push	OFFSET ??_C@_0L@COFOLJMK@TARGET_FAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5496], eax

; 5907 : 	m_iTARGET_DISTANT = getDefineINT("TARGET_DISTANT");

	push	1
	push	OFFSET ??_C@_0P@NLOPECJO@TARGET_DISTANT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5500], eax

; 5908 : 	m_iTARGET_MINOR_BACKUP_PATHETIC = getDefineINT("TARGET_MINOR_BACKUP_PATHETIC");

	push	1
	push	OFFSET ??_C@_0BN@BGKLMIHH@TARGET_MINOR_BACKUP_PATHETIC?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5504], eax

; 5909 : 	m_iTARGET_MINOR_BACKUP_WEAK = getDefineINT("TARGET_MINOR_BACKUP_WEAK");

	push	1
	push	OFFSET ??_C@_0BJ@HIMGADEK@TARGET_MINOR_BACKUP_WEAK?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5508], eax

; 5910 : 	m_iTARGET_MINOR_BACKUP_POOR = getDefineINT("TARGET_MINOR_BACKUP_POOR");

	push	1
	push	OFFSET ??_C@_0BJ@DEMFLLCM@TARGET_MINOR_BACKUP_POOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5512], eax

; 5911 : 	m_iTARGET_MINOR_BACKUP_AVERAGE = getDefineINT("TARGET_MINOR_BACKUP_AVERAGE");

	push	1
	push	OFFSET ??_C@_0BM@OFNHCKGP@TARGET_MINOR_BACKUP_AVERAGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5516], eax

; 5912 : 	m_iTARGET_MINOR_BACKUP_STRONG = getDefineINT("TARGET_MINOR_BACKUP_STRONG");

	push	1
	push	OFFSET ??_C@_0BL@MCEEHIND@TARGET_MINOR_BACKUP_STRONG?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5520], eax

; 5913 : 	m_iTARGET_MINOR_BACKUP_POWERFUL = getDefineINT("TARGET_MINOR_BACKUP_POWERFUL");

	push	1
	push	OFFSET ??_C@_0BN@DECDEBFL@TARGET_MINOR_BACKUP_POWERFUL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5524], eax

; 5914 : 	m_iTARGET_MINOR_BACKUP_IMMENSE = getDefineINT("TARGET_MINOR_BACKUP_IMMENSE");

	push	1
	push	OFFSET ??_C@_0BM@CODECLOL@TARGET_MINOR_BACKUP_IMMENSE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5528], eax

; 5915 : 	m_iTARGET_MINOR_BACKUP_DISTANT = getDefineINT("TARGET_MINOR_BACKUP_DISTANT");

	push	1
	push	OFFSET ??_C@_0BM@DKGGMEJF@TARGET_MINOR_BACKUP_DISTANT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5532], eax

; 5916 : 	m_iTARGET_MINOR_BACKUP_FAR = getDefineINT("TARGET_MINOR_BACKUP_FAR");

	push	1
	push	OFFSET ??_C@_0BI@KOIHKJOE@TARGET_MINOR_BACKUP_FAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5536], eax

; 5917 : 	m_iTARGET_MINOR_BACKUP_CLOSE = getDefineINT("TARGET_MINOR_BACKUP_CLOSE");

	push	1
	push	OFFSET ??_C@_0BK@HMMCHCMK@TARGET_MINOR_BACKUP_CLOSE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5540], eax

; 5918 : 	m_iTARGET_MINOR_BACKUP_NEIGHBORS = getDefineINT("TARGET_MINOR_BACKUP_NEIGHBORS");

	push	1
	push	OFFSET ??_C@_0BO@EBCNBCOD@TARGET_MINOR_BACKUP_NEIGHBORS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5544], eax

; 5919 : 	m_iGAME_THREAT_CRITICAL_THRESHOLD = getDefineINT("GAME_THREAT_CRITICAL_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BP@JDKODPPE@GAME_THREAT_CRITICAL_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5548], eax

; 5920 : 	m_iGAME_THREAT_SEVERE_THRESHOLD = getDefineINT("GAME_THREAT_SEVERE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BN@OJBAGENG@GAME_THREAT_SEVERE_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5552], eax

; 5921 : 	m_iGAME_THREAT_MAJOR_THRESHOLD = getDefineINT("GAME_THREAT_MAJOR_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BM@BMAJBCDN@GAME_THREAT_MAJOR_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5556], eax

; 5922 : 	m_iGAME_THREAT_MINOR_THRESHOLD = getDefineINT("GAME_THREAT_MINOR_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BM@MKCMFBKB@GAME_THREAT_MINOR_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5560], eax

; 5923 : 	m_iGAME_THREAT_AT_WAR_STALEMATE = getDefineINT("GAME_THREAT_AT_WAR_STALEMATE");

	push	1
	push	OFFSET ??_C@_0BN@NLMLOAOB@GAME_THREAT_AT_WAR_STALEMATE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5564], eax

; 5924 : 	m_iGAME_THREAT_AT_WAR_DEFENSIVE = getDefineINT("GAME_THREAT_AT_WAR_DEFENSIVE");

	push	1
	push	OFFSET ??_C@_0BN@EJHIEFCJ@GAME_THREAT_AT_WAR_DEFENSIVE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5568], eax

; 5925 : 	m_iGAME_THREAT_AT_WAR_NEARLY_DEFEATED = getDefineINT("GAME_THREAT_AT_WAR_NEARLY_DEFEATED");

	push	1
	push	OFFSET ??_C@_0CD@CEJOKHGM@GAME_THREAT_AT_WAR_NEARLY_DEFEAT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5572], eax

; 5926 : 	m_iGAME_THREAT_AT_WAR_MILITARY_STRENGTH_IMMENSE = getDefineINT("GAME_THREAT_AT_WAR_MILITARY_STRENGTH_IMMENSE");

	push	1
	push	OFFSET ??_C@_0CN@CHPLADOB@GAME_THREAT_AT_WAR_MILITARY_STRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5576], eax

; 5927 : 	m_iGAME_THREAT_AT_WAR_MILITARY_STRENGTH_POWERFUL = getDefineINT("GAME_THREAT_AT_WAR_MILITARY_STRENGTH_POWERFUL");

	push	1
	push	OFFSET ??_C@_0CO@NEPPGHGN@GAME_THREAT_AT_WAR_MILITARY_STRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5580], eax

; 5928 : 	m_iGAME_THREAT_AT_WAR_MILITARY_STRENGTH_STRONG = getDefineINT("GAME_THREAT_AT_WAR_MILITARY_STRENGTH_STRONG");

	push	1
	push	OFFSET ??_C@_0CM@LLCAFJNP@GAME_THREAT_AT_WAR_MILITARY_STRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5584], eax

; 5929 : 	m_iGAME_THREAT_AT_WAR_MILITARY_STRENGTH_AVERAGE = getDefineINT("GAME_THREAT_AT_WAR_MILITARY_STRENGTH_AVERAGE");

	push	1
	push	OFFSET ??_C@_0CN@OMBIACGF@GAME_THREAT_AT_WAR_MILITARY_STRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5588], eax

; 5930 : 	m_iGAME_THREAT_GUESS_AT_WAR = getDefineINT("GAME_THREAT_GUESS_AT_WAR");

	push	1
	push	OFFSET ??_C@_0BJ@MNHHHBP@GAME_THREAT_GUESS_AT_WAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5592], eax

; 5931 : 	m_iGAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_IMMENSE = getDefineINT("GAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_IMMENSE");

	push	1
	push	OFFSET ??_C@_0DD@BCHBPLGH@GAME_THREAT_GUESS_AT_WAR_MILITAR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5596], eax

; 5932 : 	m_iGAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_POWERFUL = getDefineINT("GAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_POWERFUL");

	push	1
	push	OFFSET ??_C@_0DE@NABBMLIA@GAME_THREAT_GUESS_AT_WAR_MILITAR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5600], eax

; 5933 : 	m_iGAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_STRONG = getDefineINT("GAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_STRONG");

	push	1
	push	OFFSET ??_C@_0DC@IEHACFPH@GAME_THREAT_GUESS_AT_WAR_MILITAR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5604], eax

; 5934 : 	m_iGAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_AVERAGE = getDefineINT("GAME_THREAT_GUESS_AT_WAR_MILITARY_STRENGTH_AVERAGE");

	push	1
	push	OFFSET ??_C@_0DD@NJJCPKOD@GAME_THREAT_GUESS_AT_WAR_MILITAR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5608], eax

; 5935 : 	m_iMILITARY_THREAT_CRITICAL_THRESHOLD = getDefineINT("MILITARY_THREAT_CRITICAL_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CD@OBPGPMAK@MILITARY_THREAT_CRITICAL_THRESHO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5612], eax

; 5936 : 	m_iMILITARY_THREAT_SEVERE_THRESHOLD = getDefineINT("MILITARY_THREAT_SEVERE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CB@EIODKKOP@MILITARY_THREAT_SEVERE_THRESHOLD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5616], eax

; 5937 : 	m_iMILITARY_THREAT_MAJOR_THRESHOLD = getDefineINT("MILITARY_THREAT_MAJOR_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CA@DOFEFFJM@MILITARY_THREAT_MAJOR_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5620], eax

; 5938 : 	m_iMILITARY_THREAT_MINOR_THRESHOLD = getDefineINT("MILITARY_THREAT_MINOR_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CA@OIHBBGAA@MILITARY_THREAT_MINOR_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5624], eax

; 5939 : 	m_iMILITARY_THREAT_STRENGTH_IMMENSE = getDefineINT("MILITARY_THREAT_STRENGTH_IMMENSE");

	push	1
	push	OFFSET ??_C@_0CB@PLOLFOIO@MILITARY_THREAT_STRENGTH_IMMENSE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5628], eax

; 5940 : 	m_iMILITARY_THREAT_STRENGTH_POWERFUL = getDefineINT("MILITARY_THREAT_STRENGTH_POWERFUL");

	push	1
	push	OFFSET ??_C@_0CC@JCOALPJ@MILITARY_THREAT_STRENGTH_POWERFU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5632], eax

; 5941 : 	m_iMILITARY_THREAT_STRENGTH_STRONG = getDefineINT("MILITARY_THREAT_STRENGTH_STRONG");

	push	1
	push	OFFSET ??_C@_0CA@HNHAPJPB@MILITARY_THREAT_STRENGTH_STRONG?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5636], eax

; 5942 : 	m_iMILITARY_THREAT_STRENGTH_AVERAGE = getDefineINT("MILITARY_THREAT_STRENGTH_AVERAGE");

	push	1
	push	OFFSET ??_C@_0CB@DAAIFPAK@MILITARY_THREAT_STRENGTH_AVERAGE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5640], eax

; 5943 : 	m_iMILITARY_THREAT_STRENGTH_POOR = getDefineINT("MILITARY_THREAT_STRENGTH_POOR");

	push	1
	push	OFFSET ??_C@_0BO@NKDOIDKA@MILITARY_THREAT_STRENGTH_POOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5644], eax

; 5944 : 	m_iMILITARY_THREAT_STRENGTH_WEAK = getDefineINT("MILITARY_THREAT_STRENGTH_WEAK");

	push	1
	push	OFFSET ??_C@_0BO@JGDNDLMG@MILITARY_THREAT_STRENGTH_WEAK?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5648], eax

; 5945 : 	m_iMILITARY_THREAT_STRENGTH_PATHETIC = getDefineINT("MILITARY_THREAT_STRENGTH_PATHETIC");

	push	1
	push	OFFSET ??_C@_0CC@CLKGICNF@MILITARY_THREAT_STRENGTH_PATHETI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5652], eax

; 5946 : 	m_iMILITARY_THREAT_WAR_STATE_CALM = getDefineINT("MILITARY_THREAT_WAR_STATE_CALM");

	push	1
	push	OFFSET ??_C@_0BP@HIEOGLLM@MILITARY_THREAT_WAR_STATE_CALM?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5656], eax

; 5947 : 	m_iMILITARY_THREAT_WAR_STATE_NEARLY_WON = getDefineINT("MILITARY_THREAT_WAR_STATE_NEARLY_WON");

	push	1
	push	OFFSET ??_C@_0CF@GFOHCLFM@MILITARY_THREAT_WAR_STATE_NEARLY@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5660], eax

; 5948 : 	m_iMILITARY_THREAT_WAR_STATE_OFFENSIVE = getDefineINT("MILITARY_THREAT_WAR_STATE_OFFENSIVE");

	push	1
	push	OFFSET ??_C@_0CE@DBECDJDJ@MILITARY_THREAT_WAR_STATE_OFFENS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5664], eax

; 5949 : 	m_iMILITARY_THREAT_WAR_STATE_STALEMATE = getDefineINT("MILITARY_THREAT_WAR_STATE_STALEMATE");

	push	1
	push	OFFSET ??_C@_0CE@GCJMFLMD@MILITARY_THREAT_WAR_STATE_STALEM@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5668], eax

; 5950 : 	m_iMILITARY_THREAT_WAR_STATE_DEFENSIVE = getDefineINT("MILITARY_THREAT_WAR_STATE_DEFENSIVE");

	push	1
	push	OFFSET ??_C@_0CE@PACPPOAL@MILITARY_THREAT_WAR_STATE_DEFENS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5672], eax

; 5951 : 	m_iMILITARY_THREAT_WAR_STATE_NEARLY_DEFEATED = getDefineINT("MILITARY_THREAT_WAR_STATE_NEARLY_DEFEATED");

	push	1
	push	OFFSET ??_C@_0CK@JFLIMINA@MILITARY_THREAT_WAR_STATE_NEARLY@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5676], eax

; 5952 : 	m_iMILITARY_THREAT_NEIGHBORS = getDefineINT("MILITARY_THREAT_NEIGHBORS");

	push	1
	push	OFFSET ??_C@_0BK@PICGGCGH@MILITARY_THREAT_NEIGHBORS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5680], eax

; 5953 : 	m_iMILITARY_THREAT_CLOSE = getDefineINT("MILITARY_THREAT_CLOSE");

	push	1
	push	OFFSET ??_C@_0BG@IJLMEKHH@MILITARY_THREAT_CLOSE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5684], eax

; 5954 : 	m_iMILITARY_THREAT_FAR = getDefineINT("MILITARY_THREAT_FAR");

	push	1
	push	OFFSET ??_C@_0BE@ODOIHHKA@MILITARY_THREAT_FAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5688], eax

; 5955 : 	m_iMILITARY_THREAT_DISTANT = getDefineINT("MILITARY_THREAT_DISTANT");

	push	1
	push	OFFSET ??_C@_0BI@EDAPFJIA@MILITARY_THREAT_DISTANT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5692], eax

; 5956 : 	m_iMILITARY_THREAT_PER_MINOR_ATTACKED = getDefineINT("MILITARY_THREAT_PER_MINOR_ATTACKED");

	push	1
	push	OFFSET ??_C@_0CD@EPKGKJDN@MILITARY_THREAT_PER_MINOR_ATTACK@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5696], eax

; 5957 : 	m_iMILITARY_THREAT_PER_MINOR_CONQUERED = getDefineINT("MILITARY_THREAT_PER_MINOR_CONQUERED");

	push	1
	push	OFFSET ??_C@_0CE@MKEEIHPD@MILITARY_THREAT_PER_MINOR_CONQUE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5700], eax

; 5958 : 	m_iMILITARY_THREAT_PER_MAJOR_ATTACKED = getDefineINT("MILITARY_THREAT_PER_MAJOR_ATTACKED");

	push	1
	push	OFFSET ??_C@_0CD@LMEGNNJN@MILITARY_THREAT_PER_MAJOR_ATTACK@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5704], eax

; 5959 : 	m_iMILITARY_THREAT_PER_MAJOR_CONQUERED = getDefineINT("MILITARY_THREAT_PER_MAJOR_CONQUERED");

	push	1
	push	OFFSET ??_C@_0CE@BMGBMEGP@MILITARY_THREAT_PER_MAJOR_CONQUE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5708], eax

; 5960 : 	m_iMILITARY_THREAT_ALREADY_WAR_EACH_PLAYER_MULTIPLIER = getDefineINT("MILITARY_THREAT_ALREADY_WAR_EACH_PLAYER_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0DD@NIIDLBLH@MILITARY_THREAT_ALREADY_WAR_EACH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5712], eax

; 5961 : 	m_iWARMONGER_THREAT_CRITICAL_THRESHOLD = getDefineINT("WARMONGER_THREAT_CRITICAL_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CE@PAIMPGDB@WARMONGER_THREAT_CRITICAL_THRESH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5716], eax

; 5962 : 	m_iWARMONGER_THREAT_SEVERE_THRESHOLD = getDefineINT("WARMONGER_THREAT_SEVERE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CC@PIKPNPCF@WARMONGER_THREAT_SEVERE_THRESHOL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5720], eax

; 5963 : 	m_iWARMONGER_THREAT_MAJOR_THRESHOLD = getDefineINT("WARMONGER_THREAT_MAJOR_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CB@KCLJLNOG@WARMONGER_THREAT_MAJOR_THRESHOLD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5724], eax

; 5964 : 	m_iWARMONGER_THREAT_MINOR_THRESHOLD = getDefineINT("WARMONGER_THREAT_MINOR_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CB@HEJMPOHK@WARMONGER_THREAT_MINOR_THRESHOLD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5728], eax

; 5965 : 	m_iWARMONGER_THREAT_MINOR_ATTACKED_WEIGHT = getDefineINT("WARMONGER_THREAT_MINOR_ATTACKED_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CH@OAJGMCL@WARMONGER_THREAT_MINOR_ATTACKED_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5732], eax

; 5966 : 	m_iWARMONGER_THREAT_MINOR_CONQUERED_WEIGHT = getDefineINT("WARMONGER_THREAT_MINOR_CONQUERED_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CI@ECDKFNGE@WARMONGER_THREAT_MINOR_CONQUERED@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5736], eax

; 5967 : 	m_iWARMONGER_THREAT_MAJOR_ATTACKED_WEIGHT = getDefineINT("WARMONGER_THREAT_MAJOR_ATTACKED_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CH@GFBGIOAE@WARMONGER_THREAT_MAJOR_ATTACKED_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5740], eax

; 5968 : 	m_iWARMONGER_THREAT_MAJOR_CONQUERED_WEIGHT = getDefineINT("WARMONGER_THREAT_MAJOR_CONQUERED_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CI@OJIAHPNP@WARMONGER_THREAT_MAJOR_CONQUERED@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5744], eax

; 5969 : 	m_iWARMONGER_THREAT_PER_TURN_DECAY = getDefineINT("WARMONGER_THREAT_PER_TURN_DECAY");

	push	1
	push	OFFSET ??_C@_0CA@JECFNGG@WARMONGER_THREAT_PER_TURN_DECAY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5748], eax

; 5970 : 	m_iWARMONGER_THREAT_PERSONALITY_MOD = getDefineINT("WARMONGER_THREAT_PERSONALITY_MOD");

	push	1
	push	OFFSET ??_C@_0CB@OGDGNBKB@WARMONGER_THREAT_PERSONALITY_MOD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5752], eax

; 5971 : 	m_iWARMONGER_THREAT_CRITICAL_PERCENT_THRESHOLD = getDefineINT("WARMONGER_THREAT_CRITICAL_PERCENT_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CM@KPMHGKKK@WARMONGER_THREAT_CRITICAL_PERCEN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5756], eax

; 5972 : 	m_iWARMONGER_THREAT_SEVERE_PERCENT_THRESHOLD = getDefineINT("WARMONGER_THREAT_SEVERE_PERCENT_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CK@LMFLBFGN@WARMONGER_THREAT_SEVERE_PERCENT_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5760], eax

; 5973 : 	m_iWARMONGER_ON_CITY_STATE_MULTIPLIER = getDefineINT("WARMONGER_ON_CITY_STATE_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CD@LEBJODDK@WARMONGER_ON_CITY_STATE_MULTIPLI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5764], eax

; 5974 : 	m_iLAND_DISPUTE_FIERCE_THRESHOLD = getDefineINT("LAND_DISPUTE_FIERCE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BO@IPGCCHLB@LAND_DISPUTE_FIERCE_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5768], eax

; 5975 : 	m_iLAND_DISPUTE_STRONG_THRESHOLD = getDefineINT("LAND_DISPUTE_STRONG_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BO@CGMMAMAE@LAND_DISPUTE_STRONG_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5772], eax

; 5976 : 	m_iLAND_DISPUTE_WEAK_THRESHOLD = getDefineINT("LAND_DISPUTE_WEAK_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BM@ODODNFIL@LAND_DISPUTE_WEAK_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5776], eax

; 5977 : 	m_iVICTORY_DISPUTE_FIERCE_THRESHOLD = getDefineINT("VICTORY_DISPUTE_FIERCE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CB@MEJADMBP@VICTORY_DISPUTE_FIERCE_THRESHOLD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5780], eax

; 5978 : 	m_iVICTORY_DISPUTE_STRONG_THRESHOLD = getDefineINT("VICTORY_DISPUTE_STRONG_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CB@GNDOBHKK@VICTORY_DISPUTE_STRONG_THRESHOLD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5784], eax

; 5979 : 	m_iVICTORY_DISPUTE_WEAK_THRESHOLD = getDefineINT("VICTORY_DISPUTE_WEAK_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BP@JFCMKLFO@VICTORY_DISPUTE_WEAK_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5788], eax

; 5980 : 	m_iWONDER_DISPUTE_FIERCE_THRESHOLD = getDefineINT("WONDER_DISPUTE_FIERCE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CA@LHKBALLE@WONDER_DISPUTE_FIERCE_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5792], eax

; 5981 : 	m_iWONDER_DISPUTE_STRONG_THRESHOLD = getDefineINT("WONDER_DISPUTE_STRONG_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CA@BOAPCAAB@WONDER_DISPUTE_STRONG_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5796], eax

; 5982 : 	m_iWONDER_DISPUTE_WEAK_THRESHOLD = getDefineINT("WONDER_DISPUTE_WEAK_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BO@MIHAMNO@WONDER_DISPUTE_WEAK_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5800], eax

; 5983 : 	m_iMINOR_CIV_DISPUTE_FIERCE_THRESHOLD = getDefineINT("MINOR_CIV_DISPUTE_FIERCE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CD@OBANJAA@MINOR_CIV_DISPUTE_FIERCE_THRESHO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5804], eax

; 5984 : 	m_iMINOR_CIV_DISPUTE_STRONG_THRESHOLD = getDefineINT("MINOR_CIV_DISPUTE_STRONG_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CD@KHLOPCLF@MINOR_CIV_DISPUTE_STRONG_THRESHO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5808], eax

; 5985 : 	m_iMINOR_CIV_DISPUTE_WEAK_THRESHOLD = getDefineINT("MINOR_CIV_DISPUTE_WEAK_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CB@HOIJEDP@MINOR_CIV_DISPUTE_WEAK_THRESHOLD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5812], eax

; 5986 : 	m_iMINOR_CIV_DISPUTE_ALLIES_WEIGHT = getDefineINT("MINOR_CIV_DISPUTE_ALLIES_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CA@KOALBMEE@MINOR_CIV_DISPUTE_ALLIES_WEIGHT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5816], eax

; 5987 : 	m_iMINOR_CIV_DISPUTE_FRIENDS_WEIGHT = getDefineINT("MINOR_CIV_DISPUTE_FRIENDS_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CB@CHKLMCGK@MINOR_CIV_DISPUTE_FRIENDS_WEIGHT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5820], eax

; 5988 : 	m_iLAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_NONE = getDefineINT("LAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_NONE");

	push	1
	push	OFFSET ??_C@_0CJ@JBPPDECK@LAND_DISPUTE_EXP_AGGRESSIVE_POST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5824], eax

; 5989 : 	m_iLAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_LOW = getDefineINT("LAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_LOW");

	push	1
	push	OFFSET ??_C@_0CI@KMOHGJMC@LAND_DISPUTE_EXP_AGGRESSIVE_POST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5828], eax

; 5990 : 	m_iLAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_MEDIUM = getDefineINT("LAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_MEDIUM");

	push	1
	push	OFFSET ??_C@_0CL@PBGKOKJD@LAND_DISPUTE_EXP_AGGRESSIVE_POST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5832], eax

; 5991 : 	m_iLAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_HIGH = getDefineINT("LAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_HIGH");

	push	1
	push	OFFSET ??_C@_0CJ@IBKLNLJE@LAND_DISPUTE_EXP_AGGRESSIVE_POST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5836], eax

; 5992 : 	m_iLAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_INCREDIBLE = getDefineINT("LAND_DISPUTE_EXP_AGGRESSIVE_POSTURE_INCREDIBLE");

	push	1
	push	OFFSET ??_C@_0CP@IDAADKDG@LAND_DISPUTE_EXP_AGGRESSIVE_POST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5840], eax

; 5993 : 	m_iLAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_NONE = getDefineINT("LAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_NONE");

	push	1
	push	OFFSET ??_C@_0CO@MDFMKPAA@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5844], eax

; 5994 : 	m_iLAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_LOW = getDefineINT("LAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_LOW");

	push	1
	push	OFFSET ??_C@_0CN@GHJOHFHB@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5848], eax

; 5995 : 	m_iLAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_MEDIUM = getDefineINT("LAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_MEDIUM");

	push	1
	push	OFFSET ??_C@_0DA@PJNMDONE@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5852], eax

; 5996 : 	m_iLAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_HIGH = getDefineINT("LAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_HIGH");

	push	1
	push	OFFSET ??_C@_0CO@NDAIEALO@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5856], eax

; 5997 : 	m_iLAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_INCREDIBLE = getDefineINT("LAND_DISPUTE_PLOT_BUY_AGGRESSIVE_POSTURE_INCREDIBLE");

	push	1
	push	OFFSET ??_C@_0DE@LDAHEGFC@LAND_DISPUTE_PLOT_BUY_AGGRESSIVE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5860], eax

; 5998 : 	m_iLAND_DISPUTE_DISTANT = getDefineINT("LAND_DISPUTE_DISTANT");

	push	1
	push	OFFSET ??_C@_0BF@NIBMFFBA@LAND_DISPUTE_DISTANT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5864], eax

; 5999 : 	m_iLAND_DISPUTE_FAR = getDefineINT("LAND_DISPUTE_FAR");

	push	1
	push	OFFSET ??_C@_0BB@PJAOGGPB@LAND_DISPUTE_FAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5868], eax

; 6000 : 	m_iLAND_DISPUTE_CLOSE = getDefineINT("LAND_DISPUTE_CLOSE");

	push	1
	push	OFFSET ??_C@_0BD@EAKMBMHG@LAND_DISPUTE_CLOSE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5872], eax

; 6001 : 	m_iLAND_DISPUTE_NEIGHBORS = getDefineINT("LAND_DISPUTE_NEIGHBORS");

	push	1
	push	OFFSET ??_C@_0BH@IANBDPEF@LAND_DISPUTE_NEIGHBORS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5876], eax

; 6002 : 	m_iLAND_DISPUTE_CRAMPED_MULTIPLIER = getDefineINT("LAND_DISPUTE_CRAMPED_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CA@LEAACKLF@LAND_DISPUTE_CRAMPED_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5880], eax

; 6003 : 	m_iLAND_DISPUTE_NO_EXPANSION_STRATEGY = getDefineINT("LAND_DISPUTE_NO_EXPANSION_STRATEGY");

	push	1
	push	OFFSET ??_C@_0CD@PJKOHHMA@LAND_DISPUTE_NO_EXPANSION_STRATE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5884], eax

; 6004 : 	m_iVICTORY_DISPUTE_GRAND_STRATEGY_MATCH_POSITIVE = getDefineINT("VICTORY_DISPUTE_GRAND_STRATEGY_MATCH_POSITIVE");

	push	1
	push	OFFSET ??_C@_0CO@BNMGBJGJ@VICTORY_DISPUTE_GRAND_STRATEGY_M@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5888], eax

; 6005 : 	m_iVICTORY_DISPUTE_GRAND_STRATEGY_MATCH_LIKELY = getDefineINT("VICTORY_DISPUTE_GRAND_STRATEGY_MATCH_LIKELY");

	push	1
	push	OFFSET ??_C@_0CM@OBGPLAF@VICTORY_DISPUTE_GRAND_STRATEGY_M@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5892], eax

; 6006 : 	m_iVICTORY_DISPUTE_GRAND_STRATEGY_MATCH_UNSURE = getDefineINT("VICTORY_DISPUTE_GRAND_STRATEGY_MATCH_UNSURE");

	push	1
	push	OFFSET ??_C@_0CM@BBBDEKFL@VICTORY_DISPUTE_GRAND_STRATEGY_M@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5896], eax

; 6007 : 	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_10 = getDefineINT("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_10");

	push	1
	push	OFFSET ??_C@_0CL@GPJJNEGG@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5900], eax

; 6008 : 	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_9 = getDefineINT("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_9");

	push	1
	push	OFFSET ??_C@_0CK@MHKDDNHC@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5904], eax

; 6009 : 	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_8 = getDefineINT("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_8");

	push	1
	push	OFFSET ??_C@_0CK@NOLIAMDD@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5908], eax

; 6010 : 	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_7 = getDefineINT("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_7");

	push	1
	push	OFFSET ??_C@_0CK@FJCABAPM@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5912], eax

; 6011 : 	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_6 = getDefineINT("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_6");

	push	1
	push	OFFSET ??_C@_0CK@EADLCBLN@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5916], eax

; 6012 : 	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_5 = getDefineINT("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_5");

	push	1
	push	OFFSET ??_C@_0CK@GLBGHCHO@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5920], eax

; 6013 : 	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_4 = getDefineINT("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_4");

	push	1
	push	OFFSET ??_C@_0CK@HCANEDDP@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5924], eax

; 6014 : 	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_3 = getDefineINT("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_3");

	push	1
	push	OFFSET ??_C@_0CK@DNEMNFPI@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5928], eax

; 6015 : 	m_iLAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_2 = getDefineINT("LAND_DISPUTE_CITY_RATIO_EXPANSION_GUESS_2");

	push	1
	push	OFFSET ??_C@_0CK@CEFHOELJ@LAND_DISPUTE_CITY_RATIO_EXPANSIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5932], eax

; 6016 : 	m_iVICTORY_DISPUTE_OTHER_PLAYER_FIERCE_THRESHOLD = getDefineINT("VICTORY_DISPUTE_OTHER_PLAYER_FIERCE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CO@CIFNIEHG@VICTORY_DISPUTE_OTHER_PLAYER_FIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5936], eax

; 6017 : 	m_iVICTORY_DISPUTE_OTHER_PLAYER_STRONG_THRESHOLD = getDefineINT("VICTORY_DISPUTE_OTHER_PLAYER_STRONG_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CO@IBPDKPMD@VICTORY_DISPUTE_OTHER_PLAYER_STR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5940], eax

; 6018 : 	m_iVICTORY_DISPUTE_OTHER_PLAYER_WEAK_THRESHOLD = getDefineINT("VICTORY_DISPUTE_OTHER_PLAYER_WEAK_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CM@OAJCALG@VICTORY_DISPUTE_OTHER_PLAYER_WEA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5944], eax

; 6019 : 	m_iVICTORY_DISPUTE_OTHER_PLAYER_GRAND_STRATEGY_MATCH_POSITIVE = getDefineINT("VICTORY_DISPUTE_OTHER_PLAYER_GRAND_STRATEGY_MATCH_POSITIVE");

	push	1
	push	OFFSET ??_C@_0DL@KBKBGKEN@VICTORY_DISPUTE_OTHER_PLAYER_GRA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5948], eax

; 6020 : 	m_iVICTORY_DISPUTE_OTHER_PLAYER_GRAND_STRATEGY_MATCH_LIKELY = getDefineINT("VICTORY_DISPUTE_OTHER_PLAYER_GRAND_STRATEGY_MATCH_LIKELY");

	push	1
	push	OFFSET ??_C@_0DJ@CFFJEMEE@VICTORY_DISPUTE_OTHER_PLAYER_GRA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5952], eax

; 6021 : 	m_iVICTORY_DISPUTE_OTHER_PLAYER_GRAND_STRATEGY_MATCH_UNSURE = getDefineINT("VICTORY_DISPUTE_OTHER_PLAYER_GRAND_STRATEGY_MATCH_UNSURE");

	push	1
	push	OFFSET ??_C@_0DJ@DKFMPNBK@VICTORY_DISPUTE_OTHER_PLAYER_GRA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5956], eax

; 6022 : 	m_iIC_MEMORY_TURN_EXPIRATION = getDefineINT("IC_MEMORY_TURN_EXPIRATION");

	push	1
	push	OFFSET ??_C@_0BK@LLCDGHMH@IC_MEMORY_TURN_EXPIRATION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5960], eax

; 6023 : 	m_iSTOP_SPYING_MEMORY_TURN_EXPIRATION = getDefineINT("STOP_SPYING_MEMORY_TURN_EXPIRATION");

	push	1
	push	OFFSET ??_C@_0CD@HMNJJNIH@STOP_SPYING_MEMORY_TURN_EXPIRATI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5964], eax

; 6024 : 	m_iCOOP_WAR_SOON_COUNTER = getDefineINT("COOP_WAR_SOON_COUNTER");

	push	1
	push	OFFSET ??_C@_0BG@FOIGDAHK@COOP_WAR_SOON_COUNTER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5968], eax

; 6025 : 	m_iCOOP_WAR_LOCKED_TURNS = getDefineINT("COOP_WAR_LOCKED_TURNS");

	push	1
	push	OFFSET ??_C@_0BG@JJHOLDGE@COOP_WAR_LOCKED_TURNS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5972], eax

; 6026 : 	m_iCOOP_WAR_LOCKED_TURNS_WAR_WEIGHT = getDefineINT("COOP_WAR_LOCKED_TURNS_WAR_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CB@HJELNJLB@COOP_WAR_LOCKED_TURNS_WAR_WEIGHT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5976], eax

; 6027 : 	m_iDEMAND_TURN_LIMIT_MIN = getDefineINT("DEMAND_TURN_LIMIT_MIN");

	push	1
	push	OFFSET ??_C@_0BG@FGEFGJOH@DEMAND_TURN_LIMIT_MIN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5980], eax

; 6028 : 	m_iDEMAND_TURN_LIMIT_RAND = getDefineINT("DEMAND_TURN_LIMIT_RAND");

	push	1
	push	OFFSET ??_C@_0BH@INCJJAAP@DEMAND_TURN_LIMIT_RAND?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5984], eax

; 6029 : 	m_iDONT_SETTLE_RAND = getDefineINT("DONT_SETTLE_RAND");

	push	1
	push	OFFSET ??_C@_0BB@OGBHKNAM@DONT_SETTLE_RAND?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5988], eax

; 6030 : 	m_iDONT_SETTLE_FLAVOR_BASE = getDefineINT("DONT_SETTLE_FLAVOR_BASE");

	push	1
	push	OFFSET ??_C@_0BI@KPABBKOJ@DONT_SETTLE_FLAVOR_BASE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5992], eax

; 6031 : 	m_iDONT_SETTLE_FLAVOR_MULTIPLIER = getDefineINT("DONT_SETTLE_FLAVOR_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BO@FHIIDLEP@DONT_SETTLE_FLAVOR_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5996], eax

; 6032 : 	m_iDONT_SETTLE_FRIENDLY = getDefineINT("DONT_SETTLE_FRIENDLY");

	push	1
	push	OFFSET ??_C@_0BF@DLDDMBDF@DONT_SETTLE_FRIENDLY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6000], eax

; 6033 : 	m_iDONT_SETTLE_STRENGTH_PATHETIC = getDefineINT("DONT_SETTLE_STRENGTH_PATHETIC");

	push	1
	push	OFFSET ??_C@_0BO@LHCDAHKG@DONT_SETTLE_STRENGTH_PATHETIC?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6004], eax

; 6034 : 	m_iDONT_SETTLE_STRENGTH_WEAK = getDefineINT("DONT_SETTLE_STRENGTH_WEAK");

	push	1
	push	OFFSET ??_C@_0BK@GMFPDPKE@DONT_SETTLE_STRENGTH_WEAK?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6008], eax

; 6035 : 	m_iDONT_SETTLE_STRENGTH_POOR = getDefineINT("DONT_SETTLE_STRENGTH_POOR");

	push	1
	push	OFFSET ??_C@_0BK@CAFMIHMC@DONT_SETTLE_STRENGTH_POOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6012], eax

; 6036 : 	m_iDONT_SETTLE_STRENGTH_AVERAGE = getDefineINT("DONT_SETTLE_STRENGTH_AVERAGE");

	push	1
	push	OFFSET ??_C@_0BN@LMILIFMO@DONT_SETTLE_STRENGTH_AVERAGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6016], eax

; 6037 : 	m_iDONT_SETTLE_STRENGTH_STRONG = getDefineINT("DONT_SETTLE_STRENGTH_STRONG");

	push	1
	push	OFFSET ??_C@_0BM@CNNGMOKP@DONT_SETTLE_STRENGTH_STRONG?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6020], eax

; 6038 : 	m_iDONT_SETTLE_STRENGTH_POWERFUL = getDefineINT("DONT_SETTLE_STRENGTH_POWERFUL");

	push	1
	push	OFFSET ??_C@_0BO@JFKLIOIK@DONT_SETTLE_STRENGTH_POWERFUL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6024], eax

; 6039 : 	m_iDONT_SETTLE_STRENGTH_IMMENSE = getDefineINT("DONT_SETTLE_STRENGTH_IMMENSE");

	push	1
	push	OFFSET ??_C@_0BN@HHGIIEEK@DONT_SETTLE_STRENGTH_IMMENSE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6028], eax

; 6040 : 	m_iDONT_SETTLE_MOD_MILITARY_POSTURE_NONE = getDefineINT("DONT_SETTLE_MOD_MILITARY_POSTURE_NONE");

	push	1
	push	OFFSET ??_C@_0CG@HPOJANPJ@DONT_SETTLE_MOD_MILITARY_POSTURE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6032], eax

; 6041 : 	m_iDONT_SETTLE_MOD_MILITARY_POSTURE_LOW = getDefineINT("DONT_SETTLE_MOD_MILITARY_POSTURE_LOW");

	push	1
	push	OFFSET ??_C@_0CF@LELPJGMA@DONT_SETTLE_MOD_MILITARY_POSTURE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6036], eax

; 6042 : 	m_iDONT_SETTLE_MOD_MILITARY_POSTURE_MEDIUM = getDefineINT("DONT_SETTLE_MOD_MILITARY_POSTURE_MEDIUM");

	push	1
	push	OFFSET ??_C@_0CI@EHKBKFB@DONT_SETTLE_MOD_MILITARY_POSTURE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6040], eax

; 6043 : 	m_iDONT_SETTLE_MOD_MILITARY_POSTURE_HIGH = getDefineINT("DONT_SETTLE_MOD_MILITARY_POSTURE_HIGH");

	push	1
	push	OFFSET ??_C@_0CG@GPLNOCEH@DONT_SETTLE_MOD_MILITARY_POSTURE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6044], eax

; 6044 : 	m_iDONT_SETTLE_MOD_MILITARY_POSTURE_INCREDIBLE = getDefineINT("DONT_SETTLE_MOD_MILITARY_POSTURE_INCREDIBLE");

	push	1
	push	OFFSET ??_C@_0CM@GNJFHLKJ@DONT_SETTLE_MOD_MILITARY_POSTURE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6048], eax

; 6045 : 	m_iDOF_TURN_BUFFER = getDefineINT("DOF_TURN_BUFFER");

	push	1
	push	OFFSET ??_C@_0BA@OJBNLAEK@DOF_TURN_BUFFER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6052], eax

; 6046 : 	m_iDOF_THRESHOLD = getDefineINT("DOF_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0O@MAEKHHOJ@DOF_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6056], eax

; 6047 : 	m_iDENUNCIATION_EXPIRATION_TIME = getDefineINT("DENUNCIATION_EXPIRATION_TIME");

	push	1
	push	OFFSET ??_C@_0BN@IKKNHIGG@DENUNCIATION_EXPIRATION_TIME?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6060], eax

; 6048 : 	m_iDOF_EXPIRATION_TIME = getDefineINT("DOF_EXPIRATION_TIME");

	push	1
	push	OFFSET ??_C@_0BE@HHDCCLBP@DOF_EXPIRATION_TIME?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6064], eax

; 6049 : 	m_iEACH_GOLD_VALUE_PERCENT = getDefineINT("EACH_GOLD_VALUE_PERCENT");

	push	1
	push	OFFSET ??_C@_0BI@GHALOGEB@EACH_GOLD_VALUE_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6068], eax

; 6050 : 	m_iEACH_GOLD_PER_TURN_VALUE_PERCENT = getDefineINT("EACH_GOLD_PER_TURN_VALUE_PERCENT");

	push	1
	push	OFFSET ??_C@_0CB@IOEFDBGK@EACH_GOLD_PER_TURN_VALUE_PERCENT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6072], eax

; 6051 : 
; 6052 : 	m_iEXPANSION_BICKER_TIMEOUT = getDefineINT("EXPANSION_BICKER_TIMEOUT");

	push	1
	push	OFFSET ??_C@_0BJ@FGFCDPIM@EXPANSION_BICKER_TIMEOUT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6076], eax

; 6053 : 	m_iEXPANSION_PROMISE_TURNS_EFFECTIVE = getDefineINT("EXPANSION_PROMISE_TURNS_EFFECTIVE");

	push	1
	push	OFFSET ??_C@_0CC@OABNOEAA@EXPANSION_PROMISE_TURNS_EFFECTIV@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6080], eax

; 6054 : 	m_iEXPANSION_PROMISE_BROKEN_PER_TURN_DECAY = getDefineINT("EXPANSION_PROMISE_BROKEN_PER_TURN_DECAY");

	push	1
	push	OFFSET ??_C@_0CI@LMJAMMG@EXPANSION_PROMISE_BROKEN_PER_TUR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6084], eax

; 6055 : 	m_iBROKEN_EXPANSION_PROMISE_PER_OPINION_WEIGHT = getDefineINT("BROKEN_EXPANSION_PROMISE_PER_OPINION_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CM@IIHPPALO@BROKEN_EXPANSION_PROMISE_PER_OPI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6088], eax

; 6056 : 	m_iOPINION_WEIGHT_EXPANSION_PROMISE_BROKE_MAX = getDefineINT("OPINION_WEIGHT_EXPANSION_PROMISE_BROKE_MAX");

	push	1
	push	OFFSET ??_C@_0CL@LIDBIAAM@OPINION_WEIGHT_EXPANSION_PROMISE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6092], eax

; 6057 : 	m_iEXPANSION_PROMISE_IGNORED_PER_TURN_DECAY = getDefineINT("EXPANSION_PROMISE_IGNORED_PER_TURN_DECAY");

	push	1
	push	OFFSET ??_C@_0CJ@NGJACNLI@EXPANSION_PROMISE_IGNORED_PER_TU@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6096], eax

; 6058 : 	m_iIGNORED_EXPANSION_PROMISE_PER_OPINION_WEIGHT = getDefineINT("IGNORED_EXPANSION_PROMISE_PER_OPINION_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CN@DEGNECND@IGNORED_EXPANSION_PROMISE_PER_OP@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6100], eax

; 6059 : 	m_iOPINION_WEIGHT_EXPANSION_PROMISE_IGNORED_MAX = getDefineINT("OPINION_WEIGHT_EXPANSION_PROMISE_IGNORED_MAX");

	push	1
	push	OFFSET ??_C@_0CN@HEOCJGDH@OPINION_WEIGHT_EXPANSION_PROMISE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6104], eax

; 6060 : 
; 6061 : 	m_iBORDER_PROMISE_TURNS_EFFECTIVE = getDefineINT("BORDER_PROMISE_TURNS_EFFECTIVE");

	push	1
	push	OFFSET ??_C@_0BP@GIBNOAFI@BORDER_PROMISE_TURNS_EFFECTIVE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6108], eax

; 6062 : 	m_iBORDER_PROMISE_BROKEN_PER_TURN_DECAY = getDefineINT("BORDER_PROMISE_BROKEN_PER_TURN_DECAY");

	push	1
	push	OFFSET ??_C@_0CF@PBLCGKKE@BORDER_PROMISE_BROKEN_PER_TURN_D@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6112], eax

; 6063 : 	m_iBROKEN_BORDER_PROMISE_PER_OPINION_WEIGHT = getDefineINT("BROKEN_BORDER_PROMISE_PER_OPINION_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CJ@JDHFBGPC@BROKEN_BORDER_PROMISE_PER_OPINIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6116], eax

; 6064 : 	m_iOPINION_WEIGHT_BORDER_PROMISE_BROKE_MAX = getDefineINT("OPINION_WEIGHT_BORDER_PROMISE_BROKE_MAX");

	push	1
	push	OFFSET ??_C@_0CI@OEPOLPBP@OPINION_WEIGHT_BORDER_PROMISE_BR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6120], eax

; 6065 : 	m_iBORDER_PROMISE_IGNORED_PER_TURN_DECAY = getDefineINT("BORDER_PROMISE_IGNORED_PER_TURN_DECAY");

	push	1
	push	OFFSET ??_C@_0CG@HFNGFGKK@BORDER_PROMISE_IGNORED_PER_TURN_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6124], eax

; 6066 : 	m_iIGNORED_BORDER_PROMISE_PER_OPINION_WEIGHT = getDefineINT("IGNORED_BORDER_PROMISE_PER_OPINION_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CK@FDDJFOGH@IGNORED_BORDER_PROMISE_PER_OPINI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6128], eax

; 6067 : 	m_iOPINION_WEIGHT_BORDER_PROMISE_IGNORED_MAX = getDefineINT("OPINION_WEIGHT_BORDER_PROMISE_IGNORED_MAX");

	push	1
	push	OFFSET ??_C@_0CK@KDGLKGFH@OPINION_WEIGHT_BORDER_PROMISE_IG@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6132], eax

; 6068 : 	m_iDECLARED_WAR_ON_FRIEND_PER_TURN_DECAY = getDefineINT("DECLARED_WAR_ON_FRIEND_PER_TURN_DECAY");

	push	1
	push	OFFSET ??_C@_0CG@LENHEJDM@DECLARED_WAR_ON_FRIEND_PER_TURN_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6136], eax

; 6069 : 	m_iDECLARED_WAR_ON_FRIEND_PER_OPINION_WEIGHT = getDefineINT("DECLARED_WAR_ON_FRIEND_PER_OPINION_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CK@BOLOKBPI@DECLARED_WAR_ON_FRIEND_PER_OPINI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6140], eax

; 6070 : 
; 6071 : 	m_iDEAL_VALUE_PER_TURN_DECAY = getDefineINT("DEAL_VALUE_PER_TURN_DECAY");

	push	1
	push	OFFSET ??_C@_0BK@LEMOCCNI@DEAL_VALUE_PER_TURN_DECAY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6144], eax

; 6072 : 	m_iDEAL_VALUE_PER_OPINION_WEIGHT = getDefineINT("DEAL_VALUE_PER_OPINION_WEIGHT");

	push	1
	push	OFFSET ??_C@_0BO@JICBPKEO@DEAL_VALUE_PER_OPINION_WEIGHT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6148], eax

; 6073 : 	m_iCOMMON_FOE_VALUE_PER_TURN_DECAY = getDefineINT("COMMON_FOE_VALUE_PER_TURN_DECAY");

	push	1
	push	OFFSET ??_C@_0CA@JGAIMPBB@COMMON_FOE_VALUE_PER_TURN_DECAY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6152], eax

; 6074 : 	m_iCOMMON_FOE_VALUE_PER_OPINION_WEIGHT = getDefineINT("COMMON_FOE_VALUE_PER_OPINION_WEIGHT");

	push	1
	push	OFFSET ??_C@_0CE@HKJOCJBN@COMMON_FOE_VALUE_PER_OPINION_WEI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6156], eax

; 6075 : 	m_iWANT_RESEARCH_AGREEMENT_RAND = getDefineINT("WANT_RESEARCH_AGREEMENT_RAND");

	push	1
	push	OFFSET ??_C@_0BN@LOJNPKAD@WANT_RESEARCH_AGREEMENT_RAND?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6160], eax

; 6076 : 	m_iDEMAND_RAND = getDefineINT("DEMAND_RAND");

	push	1
	push	OFFSET ??_C@_0M@EMBMCJEJ@DEMAND_RAND?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6164], eax

; 6077 : 	m_iCAN_WORK_WATER_FROM_GAME_START = getDefineINT("CAN_WORK_WATER_FROM_GAME_START");

	push	1
	push	OFFSET ??_C@_0BP@PCPKJFAP@CAN_WORK_WATER_FROM_GAME_START?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6168], eax

; 6078 : 	m_iNAVAL_PLOT_BLOCKADE_RANGE = getDefineINT("NAVAL_PLOT_BLOCKADE_RANGE");

	push	1
	push	OFFSET ??_C@_0BK@MAMNEHPJ@NAVAL_PLOT_BLOCKADE_RANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6172], eax

; 6079 : 	m_iEVENT_MESSAGE_TIME = getDefineINT("EVENT_MESSAGE_TIME");

	push	1
	push	OFFSET ??_C@_0BD@CAMOOAJE@EVENT_MESSAGE_TIME?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6176], eax

; 6080 : 	m_iSTART_YEAR = getDefineINT("START_YEAR");

	push	1
	push	OFFSET ??_C@_0L@FBGPJKOJ@START_YEAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6180], eax

; 6081 : 	m_iWEEKS_PER_MONTHS = getDefineINT("WEEKS_PER_MONTHS");

	push	1
	push	OFFSET ??_C@_0BB@ECAOKLCM@WEEKS_PER_MONTHS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6184], eax

; 6082 : 	m_iHIDDEN_START_TURN_OFFSET = getDefineINT("HIDDEN_START_TURN_OFFSET");

	push	1
	push	OFFSET ??_C@_0BJ@CIDMFMJ@HIDDEN_START_TURN_OFFSET?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6188], eax

; 6083 : 	m_iRECON_VISIBILITY_RANGE = getDefineINT("RECON_VISIBILITY_RANGE");

	push	1
	push	OFFSET ??_C@_0BH@CPEOKDPJ@RECON_VISIBILITY_RANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6192], eax

; 6084 : 	m_iPLOT_VISIBILITY_RANGE = getDefineINT("PLOT_VISIBILITY_RANGE");

	push	1
	push	OFFSET ??_C@_0BG@NMNFGIBJ@PLOT_VISIBILITY_RANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6196], eax

; 6085 : 	m_iUNIT_VISIBILITY_RANGE = getDefineINT("UNIT_VISIBILITY_RANGE");

	push	1
	push	OFFSET ??_C@_0BG@PHLLADHB@UNIT_VISIBILITY_RANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6200], eax

; 6086 : 	m_iAIR_UNIT_REBASE_RANGE_MULTIPLIER = getDefineINT("AIR_UNIT_REBASE_RANGE_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CB@MBJMOGP@AIR_UNIT_REBASE_RANGE_MULTIPLIER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6204], eax

; 6087 : 	m_iMOUNTAIN_SEE_FROM_CHANGE = getDefineINT("MOUNTAIN_SEE_FROM_CHANGE");

	push	1
	push	OFFSET ??_C@_0BJ@HFBPDBDA@MOUNTAIN_SEE_FROM_CHANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6208], eax

; 6088 : 	m_iMOUNTAIN_SEE_THROUGH_CHANGE = getDefineINT("MOUNTAIN_SEE_THROUGH_CHANGE");

	push	1
	push	OFFSET ??_C@_0BM@EMCLNOIJ@MOUNTAIN_SEE_THROUGH_CHANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6212], eax

; 6089 : 	m_iHILLS_SEE_FROM_CHANGE = getDefineINT("HILLS_SEE_FROM_CHANGE");

	push	1
	push	OFFSET ??_C@_0BG@GDKAKHHI@HILLS_SEE_FROM_CHANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6216], eax

; 6090 : 	m_iHILLS_SEE_THROUGH_CHANGE = getDefineINT("HILLS_SEE_THROUGH_CHANGE");

	push	1
	push	OFFSET ??_C@_0BJ@EOGHIBGG@HILLS_SEE_THROUGH_CHANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6220], eax

; 6091 : 	m_iSEAWATER_SEE_FROM_CHANGE = getDefineINT("SEAWATER_SEE_FROM_CHANGE");

	push	1
	push	OFFSET ??_C@_0BJ@LIEEONCG@SEAWATER_SEE_FROM_CHANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6224], eax

; 6092 : 	m_iSEAWATER_SEE_THROUGH_CHANGE = getDefineINT("SEAWATER_SEE_THROUGH_CHANGE");

	push	1
	push	OFFSET ??_C@_0BM@IFLEADOJ@SEAWATER_SEE_THROUGH_CHANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6228], eax

; 6093 : 	m_iMAX_YIELD_STACK = getDefineINT("MAX_YIELD_STACK");

	push	1
	push	OFFSET ??_C@_0BA@EMAADAGH@MAX_YIELD_STACK?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6232], eax

; 6094 : 	m_iMOVE_DENOMINATOR = getDefineINT("MOVE_DENOMINATOR");

	push	1
	push	OFFSET ??_C@_0BB@PDDEADG@MOVE_DENOMINATOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6236], eax

; 6095 : 	m_iSTARTING_DISTANCE_PERCENT = getDefineINT("STARTING_DISTANCE_PERCENT");

	push	1
	push	OFFSET ??_C@_0BK@OIKAFPMP@STARTING_DISTANCE_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6240], eax

; 6096 : 	m_iMIN_CIV_STARTING_DISTANCE = getDefineINT("MIN_CIV_STARTING_DISTANCE");

	push	1
	push	OFFSET ??_C@_0BK@KDJMHLFO@MIN_CIV_STARTING_DISTANCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6244], eax

; 6097 : 	m_iMIN_CITY_RANGE = getDefineINT("MIN_CITY_RANGE");

	push	1
	push	OFFSET ??_C@_0P@MCDIEAPN@MIN_CITY_RANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6248], eax

; 6098 : 	m_iOWNERSHIP_SCORE_DURATION_THRESHOLD = getDefineINT("OWNERSHIP_SCORE_DURATION_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CD@MIBKONDN@OWNERSHIP_SCORE_DURATION_THRESHO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6252], eax

; 6099 : 	m_iNUM_POLICY_BRANCHES_ALLOWED = getDefineINT("NUM_POLICY_BRANCHES_ALLOWED");

	push	1
	push	OFFSET ??_C@_0BM@KGJGMDAN@NUM_POLICY_BRANCHES_ALLOWED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6256], eax

; 6100 : 	m_iVICTORY_POINTS_NEEDED_TO_WIN = getDefineINT("VICTORY_POINTS_NEEDED_TO_WIN");

	push	1
	push	OFFSET ??_C@_0BN@NLMGFKAN@VICTORY_POINTS_NEEDED_TO_WIN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6260], eax

; 6101 : 	m_iNUM_VICTORY_POINT_AWARDS = getDefineINT("NUM_VICTORY_POINT_AWARDS");

	push	1
	push	OFFSET ??_C@_0BJ@GBNBPGJ@NUM_VICTORY_POINT_AWARDS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6264], eax

; 6102 : 	m_iNUM_OR_TECH_PREREQS = getDefineINT("NUM_OR_TECH_PREREQS");

	push	1
	push	OFFSET ??_C@_0BE@CMJKNLGN@NUM_OR_TECH_PREREQS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6268], eax

; 6103 : 	m_iNUM_AND_TECH_PREREQS = getDefineINT("NUM_AND_TECH_PREREQS");

	push	1
	push	OFFSET ??_C@_0BF@DIMAFOKE@NUM_AND_TECH_PREREQS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6272], eax

; 6104 : 	m_iNUM_UNIT_AND_TECH_PREREQS = getDefineINT("NUM_UNIT_AND_TECH_PREREQS");

	push	1
	push	OFFSET ??_C@_0BK@HNICADIJ@NUM_UNIT_AND_TECH_PREREQS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6276], eax

; 6105 : 	m_iNUM_BUILDING_AND_TECH_PREREQS = getDefineINT("NUM_BUILDING_AND_TECH_PREREQS");

	push	1
	push	OFFSET ??_C@_0BO@NDPJDGHJ@NUM_BUILDING_AND_TECH_PREREQS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6280], eax

; 6106 : 	m_iNUM_BUILDING_RESOURCE_PREREQS = getDefineINT("NUM_BUILDING_RESOURCE_PREREQS");

	push	1
	push	OFFSET ??_C@_0BO@CENACFEC@NUM_BUILDING_RESOURCE_PREREQS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6284], eax

; 6107 : 	m_iBASE_RESEARCH_RATE = getDefineINT("BASE_RESEARCH_RATE");

	push	1
	push	OFFSET ??_C@_0BD@NDCAHONM@BASE_RESEARCH_RATE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6288], eax

; 6108 : 	m_iMAX_WORLD_WONDERS_PER_CITY = getDefineINT("MAX_WORLD_WONDERS_PER_CITY");

	push	1
	push	OFFSET ??_C@_0BL@MMFEGCH@MAX_WORLD_WONDERS_PER_CITY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6292], eax

; 6109 : 	m_iMAX_TEAM_WONDERS_PER_CITY = getDefineINT("MAX_TEAM_WONDERS_PER_CITY");

	push	1
	push	OFFSET ??_C@_0BK@CKOJICBM@MAX_TEAM_WONDERS_PER_CITY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6296], eax

; 6110 : 	m_iMAX_NATIONAL_WONDERS_PER_CITY = getDefineINT("MAX_NATIONAL_WONDERS_PER_CITY");

	push	1
	push	OFFSET ??_C@_0BO@OPMKPNNP@MAX_NATIONAL_WONDERS_PER_CITY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6300], eax

; 6111 : 	m_iMAX_NATIONAL_WONDERS_PER_CITY_FOR_OCC = getDefineINT("MAX_NATIONAL_WONDERS_PER_CITY_FOR_OCC");

	push	1
	push	OFFSET ??_C@_0CG@KBMDIEPK@MAX_NATIONAL_WONDERS_PER_CITY_FO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6304], eax

; 6112 : 	m_iMAX_BUILDINGS_PER_CITY = getDefineINT("MAX_BUILDINGS_PER_CITY");

	push	1
	push	OFFSET ??_C@_0BH@KHHCOKPO@MAX_BUILDINGS_PER_CITY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6308], eax

; 6113 : 	m_iINITIAL_CITY_POPULATION = getDefineINT("INITIAL_CITY_POPULATION");

	push	1
	push	OFFSET ??_C@_0BI@DBAKNMDB@INITIAL_CITY_POPULATION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6312], eax

; 6114 : 	m_iBASE_CITY_AIR_STACKING = getDefineINT("BASE_CITY_AIR_STACKING");

	push	1
	push	OFFSET ??_C@_0BH@NOCCADII@BASE_CITY_AIR_STACKING?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6316], eax

; 6115 : 	m_iCITY_CAPTURE_POPULATION_PERCENT = getDefineINT("CITY_CAPTURE_POPULATION_PERCENT");

	push	1
	push	OFFSET ??_C@_0CA@LEHMNGCD@CITY_CAPTURE_POPULATION_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6320], eax

; 6116 : 	m_iBASE_CITY_GROWTH_THRESHOLD = getDefineINT("BASE_CITY_GROWTH_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BL@PFGBLLNA@BASE_CITY_GROWTH_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6324], eax

; 6117 : 	m_iFOOD_CONSUMPTION_PER_POPULATION = getDefineINT("FOOD_CONSUMPTION_PER_POPULATION");

	push	1
	push	OFFSET ??_C@_0CA@IPEAJEHO@FOOD_CONSUMPTION_PER_POPULATION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6328], eax

; 6118 : 	m_iHAPPINESS_PER_CITY_WITH_STATE_RELIGION = getDefineINT("HAPPINESS_PER_CITY_WITH_STATE_RELIGION");

	push	1
	push	OFFSET ??_C@_0CH@GGKLFPEJ@HAPPINESS_PER_CITY_WITH_STATE_RE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6332], eax

; 6119 : 	m_iHAPPINESS_PER_NATURAL_WONDER = getDefineINT("HAPPINESS_PER_NATURAL_WONDER");

	push	1
	push	OFFSET ??_C@_0BN@LDODFEFA@HAPPINESS_PER_NATURAL_WONDER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6336], eax

; 6120 : 	m_iHAPPINESS_PER_EXTRA_LUXURY = getDefineINT("HAPPINESS_PER_EXTRA_LUXURY");

	push	1
	push	OFFSET ??_C@_0BL@NDBPIOEB@HAPPINESS_PER_EXTRA_LUXURY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6340], eax

; 6121 : 	m_iUNHAPPINESS_PER_POPULATION = getDefineINT("UNHAPPINESS_PER_POPULATION");

	push	1
	push	OFFSET ??_C@_0BL@LCIMIIIJ@UNHAPPINESS_PER_POPULATION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6344], eax

; 6122 : 	m_fUNHAPPINESS_PER_OCCUPIED_POPULATION = getDefineFLOAT("UNHAPPINESS_PER_OCCUPIED_POPULATION");

	push	1
	push	OFFSET ??_C@_0CE@FBJFDOOJ@UNHAPPINESS_PER_OCCUPIED_POPULAT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+6348]

; 6123 : 	m_iUNHAPPINESS_PER_CITY = getDefineINT("UNHAPPINESS_PER_CITY");

	push	1
	push	OFFSET ??_C@_0BF@OEHEJCCH@UNHAPPINESS_PER_CITY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6352], eax

; 6124 : 	m_iUNHAPPINESS_PER_CAPTURED_CITY = getDefineINT("UNHAPPINESS_PER_CAPTURED_CITY");

	push	1
	push	OFFSET ??_C@_0BO@FKKNACDN@UNHAPPINESS_PER_CAPTURED_CITY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6356], eax

; 6125 : 	m_iUNHAPPY_GROWTH_PENALTY = getDefineINT("UNHAPPY_GROWTH_PENALTY");

	push	1
	push	OFFSET ??_C@_0BH@FKHEHMFG@UNHAPPY_GROWTH_PENALTY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6360], eax

; 6126 : 	m_iVERY_UNHAPPY_GROWTH_PENALTY = getDefineINT("VERY_UNHAPPY_GROWTH_PENALTY");

	push	1
	push	OFFSET ??_C@_0BM@NNIMCKGP@VERY_UNHAPPY_GROWTH_PENALTY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6364], eax

; 6127 : 	m_iVERY_UNHAPPY_CANT_TRAIN_SETTLERS = getDefineINT("VERY_UNHAPPY_CANT_TRAIN_SETTLERS");

	push	1
	push	OFFSET ??_C@_0CB@JOINNBN@VERY_UNHAPPY_CANT_TRAIN_SETTLERS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6368], eax

; 6128 : 	m_iVERY_UNHAPPY_THRESHOLD = getDefineINT("VERY_UNHAPPY_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BH@LAEMEBOI@VERY_UNHAPPY_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6372], eax

; 6129 : 	m_iSUPER_UNHAPPY_THRESHOLD = getDefineINT("SUPER_UNHAPPY_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BI@OEGOAIFM@SUPER_UNHAPPY_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6376], eax

; 6130 : 	m_iUPRISING_COUNTER_MIN = getDefineINT("UPRISING_COUNTER_MIN");

	push	1
	push	OFFSET ??_C@_0BF@PJKIMMOF@UPRISING_COUNTER_MIN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6380], eax

; 6131 : 	m_iUPRISING_COUNTER_POSSIBLE = getDefineINT("UPRISING_COUNTER_POSSIBLE");

	push	1
	push	OFFSET ??_C@_0BK@EJDJABKB@UPRISING_COUNTER_POSSIBLE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6384], eax

; 6132 : 	m_iUPRISING_NUM_BASE = getDefineINT("UPRISING_NUM_BASE");

	push	1
	push	OFFSET ??_C@_0BC@GPOGFEIH@UPRISING_NUM_BASE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6388], eax

; 6133 : 	m_iUPRISING_NUM_CITY_COUNT = getDefineINT("UPRISING_NUM_CITY_COUNT");

	push	1
	push	OFFSET ??_C@_0BI@DNGHOAAF@UPRISING_NUM_CITY_COUNT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6392], eax

; 6134 : 	m_iREVOLT_COUNTER_MIN = getDefineINT("REVOLT_COUNTER_MIN");

	push	1
	push	OFFSET ??_C@_0BD@IMCPEHEO@REVOLT_COUNTER_MIN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6396], eax

; 6135 : 	m_iVERY_UNHAPPY_COMBAT_PENALTY_PER_UNHAPPY = getDefineINT("VERY_UNHAPPY_COMBAT_PENALTY_PER_UNHAPPY");

	push	1
	push	OFFSET ??_C@_0CI@EDGHMOBH@VERY_UNHAPPY_COMBAT_PENALTY_PER_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6400], eax

; 6136 : 	m_iVERY_UNHAPPY_MAX_COMBAT_PENALTY = getDefineINT("VERY_UNHAPPY_MAX_COMBAT_PENALTY");

	push	1
	push	OFFSET ??_C@_0CA@OOFJGLCN@VERY_UNHAPPY_MAX_COMBAT_PENALTY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6404], eax

; 6137 : 	m_iSTRATEGIC_RESOURCE_EXHAUSTED_PENALTY = getDefineINT("STRATEGIC_RESOURCE_EXHAUSTED_PENALTY");

	push	1
	push	OFFSET ??_C@_0CF@HIJOLODN@STRATEGIC_RESOURCE_EXHAUSTED_PEN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6408], eax

; 6138 : 	m_iVERY_UNHAPPY_PRODUCTION_PENALTY_PER_UNHAPPY = getDefineINT("VERY_UNHAPPY_PRODUCTION_PENALTY_PER_UNHAPPY");

	push	1
	push	OFFSET ??_C@_0CM@EJNPGPEL@VERY_UNHAPPY_PRODUCTION_PENALTY_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6412], eax

; 6139 : 	m_iVERY_UNHAPPY_MAX_PRODUCTION_PENALTY = getDefineINT("VERY_UNHAPPY_MAX_PRODUCTION_PENALTY");

	push	1
	push	OFFSET ??_C@_0CE@KNOHBPCK@VERY_UNHAPPY_MAX_PRODUCTION_PENA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6416], eax

; 6140 : 	m_iVERY_UNHAPPY_GOLD_PENALTY_PER_UNHAPPY = getDefineINT("VERY_UNHAPPY_GOLD_PENALTY_PER_UNHAPPY");

	push	1
	push	OFFSET ??_C@_0CG@MPDPAPKP@VERY_UNHAPPY_GOLD_PENALTY_PER_UN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6420], eax

; 6141 : 	m_iVERY_UNHAPPY_MAX_GOLD_PENALTY = getDefineINT("VERY_UNHAPPY_MAX_GOLD_PENALTY");

	push	1
	push	OFFSET ??_C@_0BO@GKHAKJGH@VERY_UNHAPPY_MAX_GOLD_PENALTY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6424], eax

; 6142 : 	m_iWLTKD_GROWTH_MULTIPLIER = getDefineINT("WLTKD_GROWTH_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BI@NGNMBLOP@WLTKD_GROWTH_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6428], eax

; 6143 : 	m_iINDUSTRIAL_ROUTE_PRODUCTION_MOD = getDefineINT("INDUSTRIAL_ROUTE_PRODUCTION_MOD");

	push	1
	push	OFFSET ??_C@_0CA@HCKBIGIK@INDUSTRIAL_ROUTE_PRODUCTION_MOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6432], eax

; 6144 : 	m_iRESOURCE_DEMAND_COUNTDOWN_BASE = getDefineINT("RESOURCE_DEMAND_COUNTDOWN_BASE");

	push	1
	push	OFFSET ??_C@_0BP@CJIFMII@RESOURCE_DEMAND_COUNTDOWN_BASE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6436], eax

; 6145 : 	m_iRESOURCE_DEMAND_COUNTDOWN_CAPITAL_ADD = getDefineINT("RESOURCE_DEMAND_COUNTDOWN_CAPITAL_ADD");

	push	1
	push	OFFSET ??_C@_0CG@CMILENIC@RESOURCE_DEMAND_COUNTDOWN_CAPITA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6440], eax

; 6146 : 	m_iRESOURCE_DEMAND_COUNTDOWN_RAND = getDefineINT("RESOURCE_DEMAND_COUNTDOWN_RAND");

	push	1
	push	OFFSET ??_C@_0BP@GPJNMKGI@RESOURCE_DEMAND_COUNTDOWN_RAND?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6444], eax

; 6147 : 	m_iNEW_HURRY_MODIFIER = getDefineINT("NEW_HURRY_MODIFIER");

	push	1
	push	OFFSET ??_C@_0BD@FCGDGMIO@NEW_HURRY_MODIFIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6448], eax

; 6148 : 	m_iGREAT_GENERAL_RANGE = getDefineINT("GREAT_GENERAL_RANGE");

	push	1
	push	OFFSET ??_C@_0BE@MOHPNJFB@GREAT_GENERAL_RANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6452], eax

; 6149 : 	m_iGREAT_GENERAL_STRENGTH_MOD = getDefineINT("GREAT_GENERAL_STRENGTH_MOD");

	push	1
	push	OFFSET ??_C@_0BL@BNMFAMBN@GREAT_GENERAL_STRENGTH_MOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6456], eax

; 6150 : 	m_iBONUS_PER_ADJACENT_FRIEND = getDefineINT("BONUS_PER_ADJACENT_FRIEND");

	push	1
	push	OFFSET ??_C@_0BK@JAAEHECI@BONUS_PER_ADJACENT_FRIEND?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6460], eax

; 6151 : 	m_iPOLICY_ATTACK_BONUS_MOD = getDefineINT("POLICY_ATTACK_BONUS_MOD");

	push	1
	push	OFFSET ??_C@_0BI@LLGOJJCC@POLICY_ATTACK_BONUS_MOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6464], eax

; 6152 : 	m_iCONSCRIPT_MIN_CITY_POPULATION = getDefineINT("CONSCRIPT_MIN_CITY_POPULATION");

	push	1
	push	OFFSET ??_C@_0BO@CABCKPBC@CONSCRIPT_MIN_CITY_POPULATION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6468], eax

; 6153 : 	m_iCONSCRIPT_POPULATION_PER_COST = getDefineINT("CONSCRIPT_POPULATION_PER_COST");

	push	1
	push	OFFSET ??_C@_0BO@OMJFBHCN@CONSCRIPT_POPULATION_PER_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6472], eax

; 6154 : 	m_iMIN_TIMER_UNIT_DOUBLE_MOVES = getDefineINT("MIN_TIMER_UNIT_DOUBLE_MOVES");

	push	1
	push	OFFSET ??_C@_0BM@POCAGCLC@MIN_TIMER_UNIT_DOUBLE_MOVES?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6476], eax

; 6155 : 	m_iCOMBAT_DAMAGE = getDefineINT("COMBAT_DAMAGE");

	push	1
	push	OFFSET ??_C@_0O@HEBJJADE@COMBAT_DAMAGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6480], eax

; 6156 : 	m_iNONCOMBAT_UNIT_RANGED_DAMAGE = getDefineINT("NONCOMBAT_UNIT_RANGED_DAMAGE");

	push	1
	push	OFFSET ??_C@_0BN@IGGFKCLJ@NONCOMBAT_UNIT_RANGED_DAMAGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6484], eax

; 6157 : 	m_iNAVAL_COMBAT_DEFENDER_STRENGTH_MULTIPLIER = getDefineINT("NAVAL_COMBAT_DEFENDER_STRENGTH_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CK@BPGAHJPD@NAVAL_COMBAT_DEFENDER_STRENGTH_M@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6488], eax

; 6158 : 	m_iLAKE_PLOT_RAND = getDefineINT("LAKE_PLOT_RAND");

	push	1
	push	OFFSET ??_C@_0P@LGHBKHKI@LAKE_PLOT_RAND?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6492], eax

; 6159 : 	m_iPLOTS_PER_RIVER_EDGE = getDefineINT("PLOTS_PER_RIVER_EDGE");

	push	1
	push	OFFSET ??_C@_0BF@FCMBINKG@PLOTS_PER_RIVER_EDGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6496], eax

; 6160 : 	m_iRIVER_SOURCE_MIN_RIVER_RANGE = getDefineINT("RIVER_SOURCE_MIN_RIVER_RANGE");

	push	1
	push	OFFSET ??_C@_0BN@FBAMIKFK@RIVER_SOURCE_MIN_RIVER_RANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6500], eax

; 6161 : 	m_iRIVER_SOURCE_MIN_SEAWATER_RANGE = getDefineINT("RIVER_SOURCE_MIN_SEAWATER_RANGE");

	push	1
	push	OFFSET ??_C@_0CA@COLODCN@RIVER_SOURCE_MIN_SEAWATER_RANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6504], eax

; 6162 : 	m_iLAKE_MAX_AREA_SIZE = getDefineINT("LAKE_MAX_AREA_SIZE");

	push	1
	push	OFFSET ??_C@_0BD@NKPFAEOF@LAKE_MAX_AREA_SIZE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6508], eax

; 6163 : 	m_iINITIAL_GOLD_PER_UNIT_TIMES_100 = getDefineINT("INITIAL_GOLD_PER_UNIT_TIMES_100");

	push	1
	push	OFFSET ??_C@_0CA@JDICOOON@INITIAL_GOLD_PER_UNIT_TIMES_100?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6512], eax

; 6164 : 	m_iINITIAL_FREE_OUTSIDE_UNITS = getDefineINT("INITIAL_FREE_OUTSIDE_UNITS");

	push	1
	push	OFFSET ??_C@_0BL@CHODOAJO@INITIAL_FREE_OUTSIDE_UNITS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6516], eax

; 6165 : 	m_iINITIAL_OUTSIDE_UNIT_GOLD_PERCENT = getDefineINT("INITIAL_OUTSIDE_UNIT_GOLD_PERCENT");

	push	1
	push	OFFSET ??_C@_0CC@GKHMPLAB@INITIAL_OUTSIDE_UNIT_GOLD_PERCEN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6520], eax

; 6166 : 	m_iUNIT_MAINTENANCE_GAME_MULTIPLIER = getDefineINT("UNIT_MAINTENANCE_GAME_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CB@ECPAAJHA@UNIT_MAINTENANCE_GAME_MULTIPLIER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6524], eax

; 6167 : 	m_iUNIT_MAINTENANCE_GAME_EXPONENT_DIVISOR = getDefineINT("UNIT_MAINTENANCE_GAME_EXPONENT_DIVISOR");

	push	1
	push	OFFSET ??_C@_0CH@KAJHHHCF@UNIT_MAINTENANCE_GAME_EXPONENT_D@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6528], eax

; 6168 : 	m_iFREE_UNIT_HAPPINESS = getDefineINT("FREE_UNIT_HAPPINESS");

	push	1
	push	OFFSET ??_C@_0BE@KNHJFFEF@FREE_UNIT_HAPPINESS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6532], eax

; 6169 : 	m_iTRADE_ROUTE_BASE_GOLD = getDefineINT("TRADE_ROUTE_BASE_GOLD");

	push	1
	push	OFFSET ??_C@_0BG@EKFAOMNN@TRADE_ROUTE_BASE_GOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6536], eax

; 6170 : 	m_iTRADE_ROUTE_CAPITAL_POP_GOLD_MULTIPLIER = getDefineINT("TRADE_ROUTE_CAPITAL_POP_GOLD_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CI@OEKMOFHJ@TRADE_ROUTE_CAPITAL_POP_GOLD_MUL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6540], eax

; 6171 : 	m_iTRADE_ROUTE_CITY_POP_GOLD_MULTIPLIER = getDefineINT("TRADE_ROUTE_CITY_POP_GOLD_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CF@PACKIBHI@TRADE_ROUTE_CITY_POP_GOLD_MULTIP@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6544], eax

; 6172 : 	m_iDEFICIT_UNIT_DISBANDING_THRESHOLD = getDefineINT("DEFICIT_UNIT_DISBANDING_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CC@MELEDHPL@DEFICIT_UNIT_DISBANDING_THRESHOL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6548], eax

; 6173 : 	m_iGOLDEN_AGE_BASE_THRESHOLD_HAPPINESS = getDefineINT("GOLDEN_AGE_BASE_THRESHOLD_HAPPINESS");

	push	1
	push	OFFSET ??_C@_0CE@JDAEHAEG@GOLDEN_AGE_BASE_THRESHOLD_HAPPIN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6552], eax

; 6174 : 	m_fGOLDEN_AGE_THRESHOLD_CITY_MULTIPLIER = getDefineFLOAT("GOLDEN_AGE_THRESHOLD_CITY_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CF@FDDKIAJH@GOLDEN_AGE_THRESHOLD_CITY_MULTIP@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+6556]

; 6175 : 	m_iGOLDEN_AGE_EACH_GA_ADDITIONAL_HAPPINESS = getDefineINT("GOLDEN_AGE_EACH_GA_ADDITIONAL_HAPPINESS");

	push	1
	push	OFFSET ??_C@_0CI@JNEMLIPP@GOLDEN_AGE_EACH_GA_ADDITIONAL_HA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6560], eax

; 6176 : 	m_iGOLDEN_AGE_VISIBLE_THRESHOLD_DIVISOR = getDefineINT("GOLDEN_AGE_VISIBLE_THRESHOLD_DIVISOR");

	push	1
	push	OFFSET ??_C@_0CF@PBBMEIKM@GOLDEN_AGE_VISIBLE_THRESHOLD_DIV@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6564], eax

; 6177 : 	m_iBASE_GOLDEN_AGE_UNITS = getDefineINT("BASE_GOLDEN_AGE_UNITS");

	push	1
	push	OFFSET ??_C@_0BG@PDIODPFD@BASE_GOLDEN_AGE_UNITS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6568], eax

; 6178 : 	m_iGOLDEN_AGE_UNITS_MULTIPLIER = getDefineINT("GOLDEN_AGE_UNITS_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BM@FDPKCLMG@GOLDEN_AGE_UNITS_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6572], eax

; 6179 : 	m_iGOLDEN_AGE_LENGTH = getDefineINT("GOLDEN_AGE_LENGTH");

	push	1
	push	OFFSET ??_C@_0BC@EAEONKIK@GOLDEN_AGE_LENGTH?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6576], eax

; 6180 : 	m_iGOLDEN_AGE_GREAT_PEOPLE_MODIFIER = getDefineINT("GOLDEN_AGE_GREAT_PEOPLE_MODIFIER");

	push	1
	push	OFFSET ??_C@_0CB@GPHBCMIK@GOLDEN_AGE_GREAT_PEOPLE_MODIFIER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6580], eax

; 6181 : 	m_iMIN_UNIT_GOLDEN_AGE_TURNS = getDefineINT("MIN_UNIT_GOLDEN_AGE_TURNS");

	push	1
	push	OFFSET ??_C@_0BK@BFEFMKNA@MIN_UNIT_GOLDEN_AGE_TURNS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6584], eax

; 6182 : 	m_iGOLDEN_AGE_CULTURE_MODIFIER = getDefineINT("GOLDEN_AGE_CULTURE_MODIFIER");

	push	1
	push	OFFSET ??_C@_0BM@MGFLBCKI@GOLDEN_AGE_CULTURE_MODIFIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6588], eax

; 6183 : 	m_iHILLS_EXTRA_MOVEMENT = getDefineINT("HILLS_EXTRA_MOVEMENT");

	push	1
	push	OFFSET ??_C@_0BF@DFCJCDIK@HILLS_EXTRA_MOVEMENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6592], eax

; 6184 : 	m_iRIVER_EXTRA_MOVEMENT = getDefineINT("RIVER_EXTRA_MOVEMENT");

	push	1
	push	OFFSET ??_C@_0BF@KOAJMKLN@RIVER_EXTRA_MOVEMENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6596], eax

; 6185 : 	m_iFEATURE_GROWTH_MODIFIER = getDefineINT("FEATURE_GROWTH_MODIFIER");

	push	1
	push	OFFSET ??_C@_0BI@CHKNJOKK@FEATURE_GROWTH_MODIFIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6600], eax

; 6186 : 	m_iROUTE_FEATURE_GROWTH_MODIFIER = getDefineINT("ROUTE_FEATURE_GROWTH_MODIFIER");

	push	1
	push	OFFSET ??_C@_0BO@FKGJOELC@ROUTE_FEATURE_GROWTH_MODIFIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6604], eax

; 6187 : 	m_iEXTRA_YIELD = getDefineINT("EXTRA_YIELD");

	push	1
	push	OFFSET ??_C@_0M@NFLOEFD@EXTRA_YIELD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6608], eax

; 6188 : 	m_iFORTIFY_MODIFIER_PER_TURN = getDefineINT("FORTIFY_MODIFIER_PER_TURN");

	push	1
	push	OFFSET ??_C@_0BK@JNNCFGEG@FORTIFY_MODIFIER_PER_TURN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6612], eax

; 6189 : 	m_iMAX_FORTIFY_TURNS = getDefineINT("MAX_FORTIFY_TURNS");

	push	1
	push	OFFSET ??_C@_0BC@OMHBIHJM@MAX_FORTIFY_TURNS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6616], eax

; 6190 : 	m_iNUKE_FALLOUT_PROB = getDefineINT("NUKE_FALLOUT_PROB");

	push	1
	push	OFFSET ??_C@_0BC@EBPAFFAB@NUKE_FALLOUT_PROB?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6620], eax

; 6191 : 	m_iNUKE_UNIT_DAMAGE_BASE = getDefineINT("NUKE_UNIT_DAMAGE_BASE");

	push	1
	push	OFFSET ??_C@_0BG@MCBGCECM@NUKE_UNIT_DAMAGE_BASE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6624], eax

; 6192 : 	m_iNUKE_UNIT_DAMAGE_RAND_1 = getDefineINT("NUKE_UNIT_DAMAGE_RAND_1");

	push	1
	push	OFFSET ??_C@_0BI@ODJNILMO@NUKE_UNIT_DAMAGE_RAND_1?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6628], eax

; 6193 : 	m_iNUKE_UNIT_DAMAGE_RAND_2 = getDefineINT("NUKE_UNIT_DAMAGE_RAND_2");

	push	1
	push	OFFSET ??_C@_0BI@MILANIAN@NUKE_UNIT_DAMAGE_RAND_2?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6632], eax

; 6194 : 	m_iNUKE_NON_COMBAT_DEATH_THRESHOLD = getDefineINT("NUKE_NON_COMBAT_DEATH_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CA@PLOPIOHL@NUKE_NON_COMBAT_DEATH_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6636], eax

; 6195 : 	m_iNUKE_LEVEL1_POPULATION_DEATH_BASE = getDefineINT("NUKE_LEVEL1_POPULATION_DEATH_BASE");

	push	1
	push	OFFSET ??_C@_0CC@BJLBIEFK@NUKE_LEVEL1_POPULATION_DEATH_BAS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6640], eax

; 6196 : 	m_iNUKE_LEVEL1_POPULATION_DEATH_RAND_1 = getDefineINT("NUKE_LEVEL1_POPULATION_DEATH_RAND_1");

	push	1
	push	OFFSET ??_C@_0CE@EMCOCNPB@NUKE_LEVEL1_POPULATION_DEATH_RAN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6644], eax

; 6197 : 	m_iNUKE_LEVEL1_POPULATION_DEATH_RAND_2 = getDefineINT("NUKE_LEVEL1_POPULATION_DEATH_RAND_2");

	push	1
	push	OFFSET ??_C@_0CE@GHADHODC@NUKE_LEVEL1_POPULATION_DEATH_RAN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6648], eax

; 6198 : 	m_iNUKE_LEVEL2_POPULATION_DEATH_BASE = getDefineINT("NUKE_LEVEL2_POPULATION_DEATH_BASE");

	push	1
	push	OFFSET ??_C@_0CC@EBKPCNHC@NUKE_LEVEL2_POPULATION_DEATH_BAS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6652], eax

; 6199 : 	m_iNUKE_LEVEL2_POPULATION_DEATH_RAND_1 = getDefineINT("NUKE_LEVEL2_POPULATION_DEATH_RAND_1");

	push	1
	push	OFFSET ??_C@_0CE@LOHJMAAJ@NUKE_LEVEL2_POPULATION_DEATH_RAN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6656], eax

; 6200 : 	m_iNUKE_LEVEL2_POPULATION_DEATH_RAND_2 = getDefineINT("NUKE_LEVEL2_POPULATION_DEATH_RAND_2");

	push	1
	push	OFFSET ??_C@_0CE@JFFEJDMK@NUKE_LEVEL2_POPULATION_DEATH_RAN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6660], eax

; 6201 : 	m_iNUKE_LEVEL2_ELIM_POPULATION_THRESHOLD = getDefineINT("NUKE_LEVEL2_ELIM_POPULATION_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CG@COGLAPCG@NUKE_LEVEL2_ELIM_POPULATION_THRE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6664], eax

; 6202 : 	m_iNUKE_CITY_HIT_POINT_DAMAGE = getDefineINT("NUKE_CITY_HIT_POINT_DAMAGE");

	push	1
	push	OFFSET ??_C@_0BL@LHMOMINC@NUKE_CITY_HIT_POINT_DAMAGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6668], eax

; 6203 : 	m_iNUKE_BLAST_RADIUS = getDefineINT("NUKE_BLAST_RADIUS");

	push	1
	push	OFFSET ??_C@_0BC@LHJONLME@NUKE_BLAST_RADIUS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6672], eax

; 6204 : 	m_iTECH_COST_EXTRA_TEAM_MEMBER_MODIFIER = getDefineINT("TECH_COST_EXTRA_TEAM_MEMBER_MODIFIER");

	push	1
	push	OFFSET ??_C@_0CF@JOGCDOKE@TECH_COST_EXTRA_TEAM_MEMBER_MODI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6676], eax

; 6205 : 	m_iTECH_COST_TOTAL_KNOWN_TEAM_MODIFIER = getDefineINT("TECH_COST_TOTAL_KNOWN_TEAM_MODIFIER");

	push	1
	push	OFFSET ??_C@_0CE@ECPDIMLK@TECH_COST_TOTAL_KNOWN_TEAM_MODIF@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6680], eax

; 6206 : 	m_iTECH_COST_KNOWN_PREREQ_MODIFIER = getDefineINT("TECH_COST_KNOWN_PREREQ_MODIFIER");

	push	1
	push	OFFSET ??_C@_0CA@HOGJPEBE@TECH_COST_KNOWN_PREREQ_MODIFIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6684], eax

; 6207 : 	m_iPEACE_TREATY_LENGTH = getDefineINT("PEACE_TREATY_LENGTH");

	push	1
	push	OFFSET ??_C@_0BE@OHPHELHI@PEACE_TREATY_LENGTH?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6688], eax

; 6208 : 	m_iCOOP_WAR_LOCKED_LENGTH = getDefineINT("COOP_WAR_LOCKED_LENGTH");

	push	1
	push	OFFSET ??_C@_0BH@PIFGONEB@COOP_WAR_LOCKED_LENGTH?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6692], eax

; 6209 : 	m_iBASE_FEATURE_PRODUCTION_PERCENT = getDefineINT("BASE_FEATURE_PRODUCTION_PERCENT");

	push	1
	push	OFFSET ??_C@_0CA@LHOOJNCM@BASE_FEATURE_PRODUCTION_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6696], eax

; 6210 : 	m_iFEATURE_PRODUCTION_PERCENT_MULTIPLIER = getDefineINT("FEATURE_PRODUCTION_PERCENT_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CG@CIIAHFPM@FEATURE_PRODUCTION_PERCENT_MULTI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6700], eax

; 6211 : 	m_iDIFFERENT_TEAM_FEATURE_PRODUCTION_PERCENT = getDefineINT("DIFFERENT_TEAM_FEATURE_PRODUCTION_PERCENT");

	push	1
	push	OFFSET ??_C@_0CK@OOMFPJNP@DIFFERENT_TEAM_FEATURE_PRODUCTIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6704], eax

; 6212 : 	m_iDEFAULT_WAR_VALUE_FOR_UNIT = getDefineINT("DEFAULT_WAR_VALUE_FOR_UNIT");

	push	1
	push	OFFSET ??_C@_0BL@FHFHILLC@DEFAULT_WAR_VALUE_FOR_UNIT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6708], eax

; 6213 : 	m_iUNIT_PRODUCTION_PERCENT = getDefineINT("UNIT_PRODUCTION_PERCENT");

	push	1
	push	OFFSET ??_C@_0BI@FCFOOABF@UNIT_PRODUCTION_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6712], eax

; 6214 : 	m_iMAX_UNIT_SUPPLY_PRODMOD = getDefineINT("MAX_UNIT_SUPPLY_PRODMOD");

	push	1
	push	OFFSET ??_C@_0BI@OEMFDKEF@MAX_UNIT_SUPPLY_PRODMOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6716], eax

; 6215 : 	m_iBUILDING_PRODUCTION_PERCENT = getDefineINT("BUILDING_PRODUCTION_PERCENT");

	push	1
	push	OFFSET ??_C@_0BM@CLEABCKE@BUILDING_PRODUCTION_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6720], eax

; 6216 : 	m_iPROJECT_PRODUCTION_PERCENT = getDefineINT("PROJECT_PRODUCTION_PERCENT");

	push	1
	push	OFFSET ??_C@_0BL@EILHBKHL@PROJECT_PRODUCTION_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6724], eax

; 6217 : 	m_iMAXED_UNIT_GOLD_PERCENT = getDefineINT("MAXED_UNIT_GOLD_PERCENT");

	push	1
	push	OFFSET ??_C@_0BI@IALMANJF@MAXED_UNIT_GOLD_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6728], eax

; 6218 : 	m_iMAXED_BUILDING_GOLD_PERCENT = getDefineINT("MAXED_BUILDING_GOLD_PERCENT");

	push	1
	push	OFFSET ??_C@_0BM@FDMDIPHJ@MAXED_BUILDING_GOLD_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6732], eax

; 6219 : 	m_iMAXED_PROJECT_GOLD_PERCENT = getDefineINT("MAXED_PROJECT_GOLD_PERCENT");

	push	1
	push	OFFSET ??_C@_0BL@LOGDPBMF@MAXED_PROJECT_GOLD_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6736], eax

; 6220 : 	m_iMAX_CITY_DEFENSE_DAMAGE = getDefineINT("MAX_CITY_DEFENSE_DAMAGE");

	push	1
	push	OFFSET ??_C@_0BI@PNGKHODC@MAX_CITY_DEFENSE_DAMAGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6740], eax

; 6221 : 	m_iCIRCUMNAVIGATE_FREE_MOVES = getDefineINT("CIRCUMNAVIGATE_FREE_MOVES");

	push	1
	push	OFFSET ??_C@_0BK@HAIIMNBK@CIRCUMNAVIGATE_FREE_MOVES?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6744], eax

; 6222 : 	m_iBASE_CAPTURE_GOLD = getDefineINT("BASE_CAPTURE_GOLD");

	push	1
	push	OFFSET ??_C@_0BC@PHPDJMOI@BASE_CAPTURE_GOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6748], eax

; 6223 : 	m_iCAPTURE_GOLD_PER_POPULATION = getDefineINT("CAPTURE_GOLD_PER_POPULATION");

	push	1
	push	OFFSET ??_C@_0BM@PJPMALBF@CAPTURE_GOLD_PER_POPULATION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6752], eax

; 6224 : 	m_iCAPTURE_GOLD_RAND1 = getDefineINT("CAPTURE_GOLD_RAND1");

	push	1
	push	OFFSET ??_C@_0BD@GDMBHAAI@CAPTURE_GOLD_RAND1?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6756], eax

; 6225 : 	m_iCAPTURE_GOLD_RAND2 = getDefineINT("CAPTURE_GOLD_RAND2");

	push	1
	push	OFFSET ??_C@_0BD@EIOMCDML@CAPTURE_GOLD_RAND2?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6760], eax

; 6226 : 	m_iCAPTURE_GOLD_MAX_TURNS = getDefineINT("CAPTURE_GOLD_MAX_TURNS");

	push	1
	push	OFFSET ??_C@_0BH@LMOLALIJ@CAPTURE_GOLD_MAX_TURNS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6764], eax

; 6227 : 	m_iBARBARIAN_CITY_ATTACK_MODIFIER = getDefineINT("BARBARIAN_CITY_ATTACK_MODIFIER");

	push	1
	push	OFFSET ??_C@_0BP@DACEBBOP@BARBARIAN_CITY_ATTACK_MODIFIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6768], eax

; 6228 : 	m_iBUILDING_PRODUCTION_DECAY_TIME = getDefineINT("BUILDING_PRODUCTION_DECAY_TIME");

	push	1
	push	OFFSET ??_C@_0BP@EMEMLHDC@BUILDING_PRODUCTION_DECAY_TIME?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6772], eax

; 6229 : 	m_iBUILDING_PRODUCTION_DECAY_PERCENT = getDefineINT("BUILDING_PRODUCTION_DECAY_PERCENT");

	push	1
	push	OFFSET ??_C@_0CC@MFDCLFID@BUILDING_PRODUCTION_DECAY_PERCEN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6776], eax

; 6230 : 	m_iUNIT_PRODUCTION_DECAY_TIME = getDefineINT("UNIT_PRODUCTION_DECAY_TIME");

	push	1
	push	OFFSET ??_C@_0BL@FEFFJNDA@UNIT_PRODUCTION_DECAY_TIME?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6780], eax

; 6231 : 	m_iUNIT_PRODUCTION_DECAY_PERCENT = getDefineINT("UNIT_PRODUCTION_DECAY_PERCENT");

	push	1
	push	OFFSET ??_C@_0BO@MNLGAFBN@UNIT_PRODUCTION_DECAY_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6784], eax

; 6232 : 	m_iBASE_UNIT_UPGRADE_COST = getDefineINT("BASE_UNIT_UPGRADE_COST");

	push	1
	push	OFFSET ??_C@_0BH@BMIALBAO@BASE_UNIT_UPGRADE_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6788], eax

; 6233 : 	m_iUNIT_UPGRADE_COST_PER_PRODUCTION = getDefineINT("UNIT_UPGRADE_COST_PER_PRODUCTION");

	push	1
	push	OFFSET ??_C@_0CB@JIAMNBGN@UNIT_UPGRADE_COST_PER_PRODUCTION@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6792], eax

; 6234 : 	m_iUNIT_UPGRADE_COST_VISIBLE_DIVISOR = getDefineINT("UNIT_UPGRADE_COST_VISIBLE_DIVISOR");

	push	1
	push	OFFSET ??_C@_0CC@EDCPOLLI@UNIT_UPGRADE_COST_VISIBLE_DIVISO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6796], eax

; 6235 : 	m_iUNIT_UPGRADE_COST_DISCOUNT_MAX = getDefineINT("UNIT_UPGRADE_COST_DISCOUNT_MAX");

	push	1
	push	OFFSET ??_C@_0BP@BOMCEEEG@UNIT_UPGRADE_COST_DISCOUNT_MAX?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6800], eax

; 6236 : 	m_iWAR_SUCCESS_UNIT_CAPTURING = getDefineINT("WAR_SUCCESS_UNIT_CAPTURING");

	push	1
	push	OFFSET ??_C@_0BL@OGBOGJGI@WAR_SUCCESS_UNIT_CAPTURING?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6804], eax

; 6237 : 	m_iWAR_SUCCESS_CITY_CAPTURING = getDefineINT("WAR_SUCCESS_CITY_CAPTURING");

	push	1
	push	OFFSET ??_C@_0BL@IIMPEPFP@WAR_SUCCESS_CITY_CAPTURING?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6808], eax

; 6238 : 	m_iDIPLO_VOTE_SECRETARY_GENERAL_INTERVAL = getDefineINT("DIPLO_VOTE_SECRETARY_GENERAL_INTERVAL");

	push	1
	push	OFFSET ??_C@_0CG@POMFOOPM@DIPLO_VOTE_SECRETARY_GENERAL_INT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6812], eax

; 6239 : 	m_iTEAM_VOTE_MIN_CANDIDATES = getDefineINT("TEAM_VOTE_MIN_CANDIDATES");

	push	1
	push	OFFSET ??_C@_0BJ@GMJIGIGN@TEAM_VOTE_MIN_CANDIDATES?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6816], eax

; 6240 : 	m_iRESEARCH_AGREEMENT_TIMER = getDefineINT("RESEARCH_AGREEMENT_TIMER");

	push	1
	push	OFFSET ??_C@_0BJ@NOIOIKAL@RESEARCH_AGREEMENT_TIMER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6820], eax

; 6241 : 	m_iRESEARCH_AGREEMENT_BOOST_DIVISOR = getDefineINT("RESEARCH_AGREEMENT_BOOST_DIVISOR");

	push	1
	push	OFFSET ??_C@_0CB@IOOIKDIC@RESEARCH_AGREEMENT_BOOST_DIVISOR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6824], eax

; 6242 : 	m_iSCORE_POPULATION_FACTOR = getDefineINT("SCORE_POPULATION_FACTOR");

	push	1
	push	OFFSET ??_C@_0BI@DNMHFOAA@SCORE_POPULATION_FACTOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6828], eax

; 6243 : 	m_iSCORE_LAND_FACTOR = getDefineINT("SCORE_LAND_FACTOR");

	push	1
	push	OFFSET ??_C@_0BC@GDPHCOIC@SCORE_LAND_FACTOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6832], eax

; 6244 : 	m_iSCORE_WONDER_FACTOR = getDefineINT("SCORE_WONDER_FACTOR");

	push	1
	push	OFFSET ??_C@_0BE@LMGNEFPM@SCORE_WONDER_FACTOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6836], eax

; 6245 : 	m_iSCORE_TECH_FACTOR = getDefineINT("SCORE_TECH_FACTOR");

	push	1
	push	OFFSET ??_C@_0BC@MKPALOKG@SCORE_TECH_FACTOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6840], eax

; 6246 : 	m_iSCORE_FREE_PERCENT = getDefineINT("SCORE_FREE_PERCENT");

	push	1
	push	OFFSET ??_C@_0BD@HOGIAEEB@SCORE_FREE_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6844], eax

; 6247 : 	m_iSCORE_VICTORY_PERCENT = getDefineINT("SCORE_VICTORY_PERCENT");

	push	1
	push	OFFSET ??_C@_0BG@HPOPAFAC@SCORE_VICTORY_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6848], eax

; 6248 : 	m_iSCORE_HANDICAP_PERCENT_OFFSET = getDefineINT("SCORE_HANDICAP_PERCENT_OFFSET");

	push	1
	push	OFFSET ??_C@_0BO@JGLENLKL@SCORE_HANDICAP_PERCENT_OFFSET?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6852], eax

; 6249 : 	m_iSCORE_HANDICAP_PERCENT_PER = getDefineINT("SCORE_HANDICAP_PERCENT_PER");

	push	1
	push	OFFSET ??_C@_0BL@GAECBFLJ@SCORE_HANDICAP_PERCENT_PER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6856], eax

; 6250 : 	m_iMINIMAP_RENDER_SIZE = getDefineINT("MINIMAP_RENDER_SIZE");

	push	1
	push	OFFSET ??_C@_0BE@LGKCFIK@MINIMAP_RENDER_SIZE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6860], eax

; 6251 : 	m_iMAX_INTERCEPTION_PROBABILITY = getDefineINT("MAX_INTERCEPTION_PROBABILITY");

	push	1
	push	OFFSET ??_C@_0BN@GKOGMJFB@MAX_INTERCEPTION_PROBABILITY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6864], eax

; 6252 : 	m_iMAX_EVASION_PROBABILITY = getDefineINT("MAX_EVASION_PROBABILITY");

	push	1
	push	OFFSET ??_C@_0BI@EJNMNPPE@MAX_EVASION_PROBABILITY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6868], eax

; 6253 : 	m_iPLAYER_ALWAYS_RAZES_CITIES = getDefineINT("PLAYER_ALWAYS_RAZES_CITIES");

	push	1
	push	OFFSET ??_C@_0BL@EJEAPLLP@PLAYER_ALWAYS_RAZES_CITIES?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6872], eax

; 6254 : 	m_iMIN_WATER_SIZE_FOR_OCEAN = getDefineINT("MIN_WATER_SIZE_FOR_OCEAN");

	push	1
	push	OFFSET ??_C@_0BJ@EIICMMCH@MIN_WATER_SIZE_FOR_OCEAN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6876], eax

; 6255 : 	m_iCITY_SCREEN_CLICK_WILL_EXIT = getDefineINT("CITY_SCREEN_CLICK_WILL_EXIT");

	push	1
	push	OFFSET ??_C@_0BM@MJMBCEBP@CITY_SCREEN_CLICK_WILL_EXIT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6880], eax

; 6256 : 	m_iWATER_POTENTIAL_CITY_WORK_FOR_AREA = getDefineINT("WATER_POTENTIAL_CITY_WORK_FOR_AREA");

	push	1
	push	OFFSET ??_C@_0CD@FGKKMLMB@WATER_POTENTIAL_CITY_WORK_FOR_AR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6884], eax

; 6257 : 	m_iLAND_UNITS_CAN_ATTACK_WATER_CITIES = getDefineINT("LAND_UNITS_CAN_ATTACK_WATER_CITIES");

	push	1
	push	OFFSET ??_C@_0CD@CCGPBGGM@LAND_UNITS_CAN_ATTACK_WATER_CITI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6888], eax

; 6258 : 	m_iCITY_MAX_NUM_BUILDINGS = getDefineINT("CITY_MAX_NUM_BUILDINGS");

	push	1
	push	OFFSET ??_C@_0BH@GHDPGDJK@CITY_MAX_NUM_BUILDINGS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6892], eax

; 6259 : 	m_iCITY_MIN_SIZE_FOR_SETTLERS = getDefineINT("CITY_MIN_SIZE_FOR_SETTLERS");

	push	1
	push	OFFSET ??_C@_0BL@MBCHOONI@CITY_MIN_SIZE_FOR_SETTLERS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6896], eax

; 6260 : 	m_iRANGED_ATTACKS_USE_MOVES = getDefineINT("RANGED_ATTACKS_USE_MOVES");

	push	1
	push	OFFSET ??_C@_0BJ@JOOIMHLJ@RANGED_ATTACKS_USE_MOVES?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6900], eax

; 6261 : 	m_iADVANCED_START_ALLOW_UNITS_OUTSIDE_CITIES = getDefineINT("ADVANCED_START_ALLOW_UNITS_OUTSIDE_CITIES");

	push	1
	push	OFFSET ??_C@_0CK@BKOIPHOD@ADVANCED_START_ALLOW_UNITS_OUTSI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6904], eax

; 6262 : 	m_iADVANCED_START_MAX_UNITS_PER_CITY = getDefineINT("ADVANCED_START_MAX_UNITS_PER_CITY");

	push	1
	push	OFFSET ??_C@_0CC@NKIKNOGN@ADVANCED_START_MAX_UNITS_PER_CIT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6908], eax

; 6263 : 	m_iADVANCED_START_CITY_COST = getDefineINT("ADVANCED_START_CITY_COST");

	push	1
	push	OFFSET ??_C@_0BJ@PFHGDAHM@ADVANCED_START_CITY_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6912], eax

; 6264 : 	m_iADVANCED_START_CITY_COST_INCREASE = getDefineINT("ADVANCED_START_CITY_COST_INCREASE");

	push	1
	push	OFFSET ??_C@_0CC@DLGOLDJB@ADVANCED_START_CITY_COST_INCREAS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6916], eax

; 6265 : 	m_iADVANCED_START_POPULATION_COST = getDefineINT("ADVANCED_START_POPULATION_COST");

	push	1
	push	OFFSET ??_C@_0BP@CPOHJMDE@ADVANCED_START_POPULATION_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6920], eax

; 6266 : 	m_iADVANCED_START_POPULATION_COST_INCREASE = getDefineINT("ADVANCED_START_POPULATION_COST_INCREASE");

	push	1
	push	OFFSET ??_C@_0CI@FJNMKCIM@ADVANCED_START_POPULATION_COST_I@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6924], eax

; 6267 : 	m_iADVANCED_START_VISIBILITY_COST = getDefineINT("ADVANCED_START_VISIBILITY_COST");

	push	1
	push	OFFSET ??_C@_0BP@OIHDGHKC@ADVANCED_START_VISIBILITY_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6928], eax

; 6268 : 	m_iADVANCED_START_VISIBILITY_COST_INCREASE = getDefineINT("ADVANCED_START_VISIBILITY_COST_INCREASE");

	push	1
	push	OFFSET ??_C@_0CI@FFDIONAH@ADVANCED_START_VISIBILITY_COST_I@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6932], eax

; 6269 : 	m_iADVANCED_START_CITY_PLACEMENT_MAX_RANGE = getDefineINT("ADVANCED_START_CITY_PLACEMENT_MAX_RANGE");

	push	1
	push	OFFSET ??_C@_0CI@LMGDOMLG@ADVANCED_START_CITY_PLACEMENT_MA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6936], eax

; 6270 : 	m_iNEW_CITY_BUILDING_VALUE_MODIFIER = getDefineINT("NEW_CITY_BUILDING_VALUE_MODIFIER");

	push	1
	push	OFFSET ??_C@_0CB@IGJBEIJM@NEW_CITY_BUILDING_VALUE_MODIFIER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6940], eax

; 6271 : 	m_iPATH_DAMAGE_WEIGHT = getDefineINT("PATH_DAMAGE_WEIGHT");

	push	1
	push	OFFSET ??_C@_0BD@DPPJBLBD@PATH_DAMAGE_WEIGHT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6944], eax

; 6272 : 	m_iPUPPET_SCIENCE_MODIFIER = getDefineINT("PUPPET_SCIENCE_MODIFIER");

	push	1
	push	OFFSET ??_C@_0BI@INJNAEKK@PUPPET_SCIENCE_MODIFIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6948], eax

; 6273 : 	m_iPUPPET_CULTURE_MODIFIER = getDefineINT("PUPPET_CULTURE_MODIFIER");

	push	1
	push	OFFSET ??_C@_0BI@CDDDBBNG@PUPPET_CULTURE_MODIFIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6952], eax

; 6274 : 	m_iPUPPET_GOLD_MODIFIER = getDefineINT("PUPPET_GOLD_MODIFIER");

	push	1
	push	OFFSET ??_C@_0BF@HHNBMPCB@PUPPET_GOLD_MODIFIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6956], eax

; 6275 : 	m_iPUPPET_FAITH_MODIFIER = getDefineINT("PUPPET_FAITH_MODIFIER");

	push	1
	push	OFFSET ??_C@_0BG@DBKANEAE@PUPPET_FAITH_MODIFIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6960], eax

; 6276 : 	m_iBASE_POLICY_COST = getDefineINT("BASE_POLICY_COST");

	push	1
	push	OFFSET ??_C@_0BB@EEIKDNNN@BASE_POLICY_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6964], eax

; 6277 : 	m_iPOLICY_COST_INCREASE_TO_BE_EXPONENTED = getDefineINT("POLICY_COST_INCREASE_TO_BE_EXPONENTED");

	push	1
	push	OFFSET ??_C@_0CG@IGMDGGJH@POLICY_COST_INCREASE_TO_BE_EXPON@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6968], eax

; 6278 : 	m_iPOLICY_COST_VISIBLE_DIVISOR = getDefineINT("POLICY_COST_VISIBLE_DIVISOR");

	push	1
	push	OFFSET ??_C@_0BM@OFHCPFM@POLICY_COST_VISIBLE_DIVISOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6972], eax

; 6279 : 	m_iSWITCH_POLICY_BRANCHES_ANARCHY_TURNS = getDefineINT("SWITCH_POLICY_BRANCHES_ANARCHY_TURNS");

	push	1
	push	OFFSET ??_C@_0CF@NBHKBADO@SWITCH_POLICY_BRANCHES_ANARCHY_T@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6976], eax

; 6280 : 	m_iSWITCH_POLICY_BRANCHES_TENETS_LOST = getDefineINT("SWITCH_POLICY_BRANCHES_TENETS_LOST");

	push	1
	push	OFFSET ??_C@_0CD@DOPHPPIE@SWITCH_POLICY_BRANCHES_TENETS_LO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6980], eax

; 6281 : 	m_iPOLICY_COST_DISCOUNT_MAX = getDefineINT("POLICY_COST_DISCOUNT_MAX");

	push	1
	push	OFFSET ??_C@_0BJ@LKKLNLJF@POLICY_COST_DISCOUNT_MAX?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6984], eax

; 6282 : 	m_iGOLD_PURCHASE_GOLD_PER_PRODUCTION = getDefineINT("GOLD_PURCHASE_GOLD_PER_PRODUCTION");

	push	1
	push	OFFSET ??_C@_0CC@KNCPKECJ@GOLD_PURCHASE_GOLD_PER_PRODUCTIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6988], eax

; 6283 : 	m_iGOLD_PURCHASE_VISIBLE_DIVISOR = getDefineINT("GOLD_PURCHASE_VISIBLE_DIVISOR");

	push	1
	push	OFFSET ??_C@_0BO@JCJCONNH@GOLD_PURCHASE_VISIBLE_DIVISOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6992], eax

; 6284 : 	m_iPROJECT_PURCHASING_DISABLED = getDefineINT("PROJECT_PURCHASING_DISABLED");

	push	1
	push	OFFSET ??_C@_0BM@GOBBJFHB@PROJECT_PURCHASING_DISABLED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+6996], eax

; 6285 : 	m_iINFLUENCE_MOUNTAIN_COST = getDefineINT("INFLUENCE_MOUNTAIN_COST");

	push	1
	push	OFFSET ??_C@_0BI@JCCDIPLM@INFLUENCE_MOUNTAIN_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7000], eax

; 6286 : 	m_iINFLUENCE_HILL_COST = getDefineINT("INFLUENCE_HILL_COST");

	push	1
	push	OFFSET ??_C@_0BE@IJDPJGDC@INFLUENCE_HILL_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7004], eax

; 6287 : 	m_iINFLUENCE_RIVER_COST = getDefineINT("INFLUENCE_RIVER_COST");

	push	1
	push	OFFSET ??_C@_0BF@LDMCAJEO@INFLUENCE_RIVER_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7008], eax

; 6288 : 	m_iUSE_FIRST_RING_INFLUENCE_TERRAIN_COST = getDefineINT("USE_FIRST_RING_INFLUENCE_TERRAIN_COST");

	push	1
	push	OFFSET ??_C@_0CG@DDBCPIEN@USE_FIRST_RING_INFLUENCE_TERRAIN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7012], eax

; 6289 : 	m_iNUM_RESOURCE_QUANTITY_TYPES = getDefineINT("NUM_RESOURCE_QUANTITY_TYPES");

	push	1
	push	OFFSET ??_C@_0BM@JKHDJAHC@NUM_RESOURCE_QUANTITY_TYPES?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7016], eax

; 6290 : 	m_iSPECIALISTS_DIVERT_POPULATION_ENABLED = getDefineINT("SPECIALISTS_DIVERT_POPULATION_ENABLED");

	push	1
	push	OFFSET ??_C@_0CG@DLOJLKDD@SPECIALISTS_DIVERT_POPULATION_EN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7020], eax

; 6291 : 	m_iSCIENCE_PER_POPULATION = getDefineINT("SCIENCE_PER_POPULATION");

	push	1
	push	OFFSET ??_C@_0BH@FHJHCCMN@SCIENCE_PER_POPULATION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7024], eax

; 6292 : 	m_iRESEARCH_AGREEMENT_MOD = getDefineINT("RESEARCH_AGREEMENT_MOD");

	push	1
	push	OFFSET ??_C@_0BH@FPIOHNIL@RESEARCH_AGREEMENT_MOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7028], eax

; 6293 : 	m_iBARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD = getDefineINT("BARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD");

	push	1
	push	OFFSET ??_C@_0DD@PNOPPLKJ@BARBARIAN_CAMP_FIRST_TURN_PERCEN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7032], eax

; 6294 : 	m_iBARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING = getDefineINT("BARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING");

	push	1
	push	OFFSET ??_C@_0CJ@LOHCJBNK@BARBARIAN_CAMP_ODDS_OF_NEW_CAMP_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7036], eax

; 6295 : 	m_iBARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL = getDefineINT("BARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL");

	push	1
	push	OFFSET ??_C@_0CI@CCAEIKLA@BARBARIAN_CAMP_MINIMUM_DISTANCE_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7040], eax

; 6296 : 	m_iBARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP = getDefineINT("BARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP");

	push	1
	push	OFFSET ??_C@_0CN@DFILBMPA@BARBARIAN_CAMP_MINIMUM_DISTANCE_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7044], eax

; 6297 : 	m_iBARBARIAN_CAMP_COASTAL_SPAWN_ROLL = getDefineINT("BARBARIAN_CAMP_COASTAL_SPAWN_ROLL");

	push	1
	push	OFFSET ??_C@_0CC@LBNKOCJH@BARBARIAN_CAMP_COASTAL_SPAWN_ROL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7048], eax

; 6298 : 	m_iBARBARIAN_EXTRA_RAGING_UNIT_SPAWN_CHANCE = getDefineINT("BARBARIAN_EXTRA_RAGING_UNIT_SPAWN_CHANCE");

	push	1
	push	OFFSET ??_C@_0CJ@BJFFBJFG@BARBARIAN_EXTRA_RAGING_UNIT_SPAW@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7052], eax

; 6299 : 	m_iBARBARIAN_NAVAL_UNIT_START_TURN_SPAWN = getDefineINT("BARBARIAN_NAVAL_UNIT_START_TURN_SPAWN");

	push	1
	push	OFFSET ??_C@_0CG@GFAAPLHB@BARBARIAN_NAVAL_UNIT_START_TURN_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7056], eax

; 6300 : 	m_iMAX_BARBARIANS_FROM_CAMP_NEARBY = getDefineINT("MAX_BARBARIANS_FROM_CAMP_NEARBY");

	push	1
	push	OFFSET ??_C@_0CA@GMLODJMD@MAX_BARBARIANS_FROM_CAMP_NEARBY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7060], eax

; 6301 : 	m_iMAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE = getDefineINT("MAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE");

	push	1
	push	OFFSET ??_C@_0CG@PFHFPDFA@MAX_BARBARIANS_FROM_CAMP_NEARBY_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7064], eax

; 6302 : 	m_iGOLD_FROM_BARBARIAN_CONVERSION = getDefineINT("GOLD_FROM_BARBARIAN_CONVERSION");

	push	1
	push	OFFSET ??_C@_0BP@BHFCDPOF@GOLD_FROM_BARBARIAN_CONVERSION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7068], eax

; 6303 : 	m_iBARBARIAN_CITY_GOLD_RANSOM = getDefineINT("BARBARIAN_CITY_GOLD_RANSOM");

	push	1
	push	OFFSET ??_C@_0BL@OHGKMKBJ@BARBARIAN_CITY_GOLD_RANSOM?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7072], eax

; 6304 : 	m_iBARBARIAN_UNIT_GOLD_RANSOM = getDefineINT("BARBARIAN_UNIT_GOLD_RANSOM");

	push	1
	push	OFFSET ??_C@_0BL@KFGAIBAB@BARBARIAN_UNIT_GOLD_RANSOM?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7076], eax

; 6305 : 	m_iEMBARKED_UNIT_MOVEMENT = getDefineINT("EMBARKED_UNIT_MOVEMENT");

	push	1
	push	OFFSET ??_C@_0BH@COGNNDKH@EMBARKED_UNIT_MOVEMENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7080], eax

; 6306 : 	m_iEMBARKED_VISIBILITY_RANGE = getDefineINT("EMBARKED_VISIBILITY_RANGE");

	push	1
	push	OFFSET ??_C@_0BK@HJONPDKI@EMBARKED_VISIBILITY_RANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7084], eax

; 6307 : 	m_iDEFAULT_MAX_NUM_BUILDERS = getDefineINT("DEFAULT_MAX_NUM_BUILDERS");

	push	1
	push	OFFSET ??_C@_0BJ@FOAPFLMP@DEFAULT_MAX_NUM_BUILDERS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7088], eax

; 6308 : 	m_iBARBARIAN_TECH_PERCENT = getDefineINT("BARBARIAN_TECH_PERCENT");

	push	1
	push	OFFSET ??_C@_0BH@OGLFPGMH@BARBARIAN_TECH_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7092], eax

; 6309 : 	m_iCITY_RESOURCE_WLTKD_TURNS = getDefineINT("CITY_RESOURCE_WLTKD_TURNS");

	push	1
	push	OFFSET ??_C@_0BK@JMBBIGNJ@CITY_RESOURCE_WLTKD_TURNS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7096], eax

; 6310 : 	m_iMAX_SPECIALISTS_FROM_BUILDING = getDefineINT("MAX_SPECIALISTS_FROM_BUILDING");

	push	1
	push	OFFSET ??_C@_0BO@FJOOBCGF@MAX_SPECIALISTS_FROM_BUILDING?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7100], eax

; 6311 : 	m_iGREAT_PERSON_THRESHOLD_BASE = getDefineINT("GREAT_PERSON_THRESHOLD_BASE");

	push	1
	push	OFFSET ??_C@_0BM@IHLGFJPC@GREAT_PERSON_THRESHOLD_BASE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7104], eax

; 6312 : 	m_iGREAT_PERSON_THRESHOLD_INCREASE = getDefineINT("GREAT_PERSON_THRESHOLD_INCREASE");

	push	1
	push	OFFSET ??_C@_0CA@PMHGDFPK@GREAT_PERSON_THRESHOLD_INCREASE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7108], eax

; 6313 : 	m_iCULTURE_BOMB_COOLDOWN = getDefineINT("CULTURE_BOMB_COOLDOWN");

	push	1
	push	OFFSET ??_C@_0BG@EBEIACGA@CULTURE_BOMB_COOLDOWN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7112], eax

; 6314 : 	m_iCULTURE_BOMB_MINOR_FRIENDSHIP_CHANGE = getDefineINT("CULTURE_BOMB_MINOR_FRIENDSHIP_CHANGE");

	push	1
	push	OFFSET ??_C@_0CF@OFKNFCG@CULTURE_BOMB_MINOR_FRIENDSHIP_CH@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7116], eax

; 6315 : 	m_iLANDMARK_MINOR_FRIENDSHIP_CHANGE = getDefineINT("LANDMARK_MINOR_FRIENDSHIP_CHANGE");

	push	1
	push	OFFSET ??_C@_0CB@DGLIPIGO@LANDMARK_MINOR_FRIENDSHIP_CHANGE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7120], eax

; 6316 : 	m_iUNIT_AUTO_EXPLORE_DISABLED = getDefineINT("UNIT_AUTO_EXPLORE_DISABLED");

	push	1
	push	OFFSET ??_C@_0BL@PAKJDMJG@UNIT_AUTO_EXPLORE_DISABLED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7124], eax

; 6317 : 	m_iUNIT_AUTO_EXPLORE_FULL_DISABLED = getDefineINT("UNIT_AUTO_EXPLORE_FULL_DISABLED");

	push	1
	push	OFFSET ??_C@_0CA@BFIKBJPN@UNIT_AUTO_EXPLORE_FULL_DISABLED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7128], eax

; 6318 : 	m_iUNIT_WORKER_AUTOMATION_DISABLED = getDefineINT("UNIT_WORKER_AUTOMATION_DISABLED");

	push	1
	push	OFFSET ??_C@_0CA@JEHFHDOO@UNIT_WORKER_AUTOMATION_DISABLED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7132], eax

; 6319 : 	m_iUNIT_DELETE_DISABLED = getDefineINT("UNIT_DELETE_DISABLED");

	push	1
	push	OFFSET ??_C@_0BF@EKAFPGLG@UNIT_DELETE_DISABLED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7136], eax

; 6320 : 	m_iMIN_START_AREA_TILES = getDefineINT("MIN_START_AREA_TILES");

	push	1
	push	OFFSET ??_C@_0BF@FJIGIJJE@MIN_START_AREA_TILES?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7140], eax

; 6321 : 	m_iMIN_DISTANCE_OTHER_AREA_PERCENT = getDefineINT("MIN_DISTANCE_OTHER_AREA_PERCENT");

	push	1
	push	OFFSET ??_C@_0CA@PJEEMIIB@MIN_DISTANCE_OTHER_AREA_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7144], eax

; 6322 : 	m_iMINOR_CIV_FOOD_REQUIREMENT = getDefineINT("MINOR_CIV_FOOD_REQUIREMENT");

	push	1
	push	OFFSET ??_C@_0BL@KOIDHNCA@MINOR_CIV_FOOD_REQUIREMENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7148], eax

; 6323 : 	m_iMAJOR_CIV_FOOD_REQUIREMENT = getDefineINT("MAJOR_CIV_FOOD_REQUIREMENT");

	push	1
	push	OFFSET ??_C@_0BL@BHBKGH@MAJOR_CIV_FOOD_REQUIREMENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7152], eax

; 6324 : 	m_iMIN_START_FOUND_VALUE_AS_PERCENT_OF_BEST = getDefineINT("MIN_START_FOUND_VALUE_AS_PERCENT_OF_BEST");

	push	1
	push	OFFSET ??_C@_0CJ@KDOIANKG@MIN_START_FOUND_VALUE_AS_PERCENT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7156], eax

; 6325 : 	m_iSTART_AREA_FOOD_MULTIPLIER = getDefineINT("START_AREA_FOOD_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BL@CBKLFIKB@START_AREA_FOOD_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7160], eax

; 6326 : 	m_iSTART_AREA_HAPPINESS_MULTIPLIER = getDefineINT("START_AREA_HAPPINESS_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CA@HONJNBMH@START_AREA_HAPPINESS_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7164], eax

; 6327 : 	m_iSTART_AREA_PRODUCTION_MULTIPLIER = getDefineINT("START_AREA_PRODUCTION_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CB@GHNIBPGC@START_AREA_PRODUCTION_MULTIPLIER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7168], eax

; 6328 : 	m_iSTART_AREA_GOLD_MULTIPLIER = getDefineINT("START_AREA_GOLD_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BL@PDKCOMOL@START_AREA_GOLD_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7172], eax

; 6329 : 	m_iSTART_AREA_SCIENCE_MULTIPLIER = getDefineINT("START_AREA_SCIENCE_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BO@LDLKCGMK@START_AREA_SCIENCE_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7176], eax

; 6330 : #ifdef AUI_SITE_EVALUATION_PLOT_FOUND_VALUE_CONSIDER_CULTURE
; 6331 : 	GD_INT_CACHE(START_AREA_CULTURE_MULTIPLIER);
; 6332 : #endif
; 6333 : 	m_iSTART_AREA_FAITH_MULTIPLIER = getDefineINT("START_AREA_FAITH_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BM@EGMFBPNL@START_AREA_FAITH_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7180], eax

; 6334 : 	m_iSTART_AREA_RESOURCE_MULTIPLIER = getDefineINT("START_AREA_RESOURCE_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BP@PAMHKEJH@START_AREA_RESOURCE_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7184], eax

; 6335 : 	m_iSTART_AREA_STRATEGIC_MULTIPLIER = getDefineINT("START_AREA_STRATEGIC_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CA@OCOIDPOC@START_AREA_STRATEGIC_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7188], eax

; 6336 : 	m_iSTART_AREA_BUILD_ON_COAST_PERCENT = getDefineINT("START_AREA_BUILD_ON_COAST_PERCENT");

	push	1
	push	OFFSET ??_C@_0CC@BKEBDKAC@START_AREA_BUILD_ON_COAST_PERCEN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7192], eax

; 6337 : 	m_iSETTLER_FOOD_MULTIPLIER = getDefineINT("SETTLER_FOOD_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BI@ONCKDKMN@SETTLER_FOOD_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7196], eax

; 6338 : 	m_iSETTLER_HAPPINESS_MULTIPLIER = getDefineINT("SETTLER_HAPPINESS_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BN@DEIMJNPG@SETTLER_HAPPINESS_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7200], eax

; 6339 : 	m_iSETTLER_PRODUCTION_MULTIPLIER = getDefineINT("SETTLER_PRODUCTION_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BO@DGEMEKBE@SETTLER_PRODUCTION_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7204], eax

; 6340 : 	m_iSETTLER_GOLD_MULTIPLIER = getDefineINT("SETTLER_GOLD_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BI@DPCDIOIH@SETTLER_GOLD_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7208], eax

; 6341 : 	m_iSETTLER_SCIENCE_MULTIPLIER = getDefineINT("SETTLER_SCIENCE_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BL@DPADKONB@SETTLER_SCIENCE_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7212], eax

; 6342 : #ifdef AUI_SITE_EVALUATION_PLOT_FOUND_VALUE_CONSIDER_CULTURE
; 6343 : 	GD_INT_CACHE(SETTLER_CULTURE_MULTIPLIER);
; 6344 : #endif
; 6345 : 	m_iSETTLER_FAITH_MULTIPLIER = getDefineINT("SETTLER_FAITH_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BJ@CANLDMK@SETTLER_FAITH_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7216], eax

; 6346 : 	m_iSETTLER_RESOURCE_MULTIPLIER = getDefineINT("SETTLER_RESOURCE_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BM@HKCONEPD@SETTLER_RESOURCE_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7220], eax

; 6347 : 	m_iSETTLER_STRATEGIC_MULTIPLIER = getDefineINT("SETTLER_STRATEGIC_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BN@KILNHDND@SETTLER_STRATEGIC_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7224], eax

; 6348 : 	m_iSETTLER_BUILD_ON_COAST_PERCENT = getDefineINT("SETTLER_BUILD_ON_COAST_PERCENT");

	push	1
	push	OFFSET ??_C@_0BP@KDHGHKFO@SETTLER_BUILD_ON_COAST_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7228], eax

; 6349 : #ifdef AUI_SITE_EVALUATION_PLOT_FOUND_VALUE_CONSIDER_CULTURE
; 6350 : 	GD_INT_CACHE(CITY_RING_0_MULTIPLIER);
; 6351 : #endif
; 6352 : 	m_iCITY_RING_1_MULTIPLIER = getDefineINT("CITY_RING_1_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BH@ODJIMEPA@CITY_RING_1_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7232], eax

; 6353 : 	m_iCITY_RING_2_MULTIPLIER = getDefineINT("CITY_RING_2_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BH@FOFCKIDO@CITY_RING_2_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7236], eax

; 6354 : 	m_iCITY_RING_3_MULTIPLIER = getDefineINT("CITY_RING_3_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BH@IDMEHBLL@CITY_RING_3_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7240], eax

; 6355 : 	m_iCITY_RING_4_MULTIPLIER = getDefineINT("CITY_RING_4_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BH@POLHHHOD@CITY_RING_4_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7244], eax

; 6356 : 	m_iCITY_RING_5_MULTIPLIER = getDefineINT("CITY_RING_5_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BH@CDCBKOGG@CITY_RING_5_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7248], eax

; 6357 : #ifdef AUI_SITE_EVALUATION_YIELD_MULTIPLIER_DISTANCE_DECAY
; 6358 : 	GD_INT_CACHE(SETTLER_FOOD_RING_0_DIVIDER);
; 6359 : 	GD_INT_CACHE(SETTLER_PRODUCTION_RING_0_DIVIDER);
; 6360 : 	GD_INT_CACHE(SETTLER_GOLD_RING_0_DIVIDER);
; 6361 : 	GD_INT_CACHE(SETTLER_SCIENCE_RING_0_DIVIDER);
; 6362 : 	GD_INT_CACHE(SETTLER_CULTURE_RING_0_DIVIDER);
; 6363 : 	GD_INT_CACHE(SETTLER_FAITH_RING_0_DIVIDER);
; 6364 : 	GD_INT_CACHE(SETTLER_HAPPINESS_RING_0_DIVIDER);
; 6365 : 	GD_INT_CACHE(SETTLER_RESOURCES_RING_0_DIVIDER);
; 6366 : 	GD_INT_CACHE(SETTLER_STRATEGIC_RING_0_DIVIDER);
; 6367 : 	GD_INT_CACHE(SETTLER_FOOD_RING_1_DIVIDER);
; 6368 : 	GD_INT_CACHE(SETTLER_PRODUCTION_RING_1_DIVIDER);
; 6369 : 	GD_INT_CACHE(SETTLER_GOLD_RING_1_DIVIDER);
; 6370 : 	GD_INT_CACHE(SETTLER_SCIENCE_RING_1_DIVIDER);
; 6371 : 	GD_INT_CACHE(SETTLER_CULTURE_RING_1_DIVIDER);
; 6372 : 	GD_INT_CACHE(SETTLER_FAITH_RING_1_DIVIDER);
; 6373 : 	GD_INT_CACHE(SETTLER_HAPPINESS_RING_1_DIVIDER);
; 6374 : 	GD_INT_CACHE(SETTLER_RESOURCES_RING_1_DIVIDER);
; 6375 : 	GD_INT_CACHE(SETTLER_STRATEGIC_RING_1_DIVIDER);
; 6376 : 	GD_INT_CACHE(SETTLER_FOOD_RING_2_DIVIDER);
; 6377 : 	GD_INT_CACHE(SETTLER_PRODUCTION_RING_2_DIVIDER);
; 6378 : 	GD_INT_CACHE(SETTLER_GOLD_RING_2_DIVIDER);
; 6379 : 	GD_INT_CACHE(SETTLER_SCIENCE_RING_2_DIVIDER);
; 6380 : 	GD_INT_CACHE(SETTLER_CULTURE_RING_2_DIVIDER);
; 6381 : 	GD_INT_CACHE(SETTLER_FAITH_RING_2_DIVIDER);
; 6382 : 	GD_INT_CACHE(SETTLER_HAPPINESS_RING_2_DIVIDER);
; 6383 : 	GD_INT_CACHE(SETTLER_RESOURCES_RING_2_DIVIDER);
; 6384 : 	GD_INT_CACHE(SETTLER_STRATEGIC_RING_2_DIVIDER);
; 6385 : 	GD_INT_CACHE(SETTLER_FOOD_RING_3_DIVIDER);
; 6386 : 	GD_INT_CACHE(SETTLER_PRODUCTION_RING_3_DIVIDER);
; 6387 : 	GD_INT_CACHE(SETTLER_GOLD_RING_3_DIVIDER);
; 6388 : 	GD_INT_CACHE(SETTLER_SCIENCE_RING_3_DIVIDER);
; 6389 : 	GD_INT_CACHE(SETTLER_CULTURE_RING_3_DIVIDER);
; 6390 : 	GD_INT_CACHE(SETTLER_FAITH_RING_3_DIVIDER);
; 6391 : 	GD_INT_CACHE(SETTLER_HAPPINESS_RING_3_DIVIDER);
; 6392 : 	GD_INT_CACHE(SETTLER_RESOURCES_RING_3_DIVIDER);
; 6393 : 	GD_INT_CACHE(SETTLER_STRATEGIC_RING_3_DIVIDER);
; 6394 : 	GD_INT_CACHE(SETTLER_HAPPINESS_RING_4_DIVIDER);
; 6395 : 	GD_INT_CACHE(SETTLER_RESOURCES_RING_4_DIVIDER);
; 6396 : 	GD_INT_CACHE(SETTLER_STRATEGIC_RING_4_DIVIDER);
; 6397 : 	GD_INT_CACHE(SETTLER_HAPPINESS_RING_5_DIVIDER);
; 6398 : 	GD_INT_CACHE(SETTLER_RESOURCES_RING_5_DIVIDER);
; 6399 : 	GD_INT_CACHE(SETTLER_STRATEGIC_RING_5_DIVIDER);
; 6400 : #endif
; 6401 : 	m_iSETTLER_EVALUATION_DISTANCE = getDefineINT("SETTLER_EVALUATION_DISTANCE");

	push	1
	push	OFFSET ??_C@_0BM@JNEHMKPE@SETTLER_EVALUATION_DISTANCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7252], eax

; 6402 : 	m_iSETTLER_DISTANCE_DROPOFF_MODIFIER = getDefineINT("SETTLER_DISTANCE_DROPOFF_MODIFIER");

	push	1
	push	OFFSET ??_C@_0CC@FOBCADLI@SETTLER_DISTANCE_DROPOFF_MODIFIE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7256], eax

; 6403 : 	m_iBUILD_ON_RESOURCE_PERCENT = getDefineINT("BUILD_ON_RESOURCE_PERCENT");

	push	1
	push	OFFSET ??_C@_0BK@NCADNEHN@BUILD_ON_RESOURCE_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7260], eax

; 6404 : 	m_iBUILD_ON_RIVER_PERCENT = getDefineINT("BUILD_ON_RIVER_PERCENT");

	push	1
	push	OFFSET ??_C@_0BH@OBBLHJMN@BUILD_ON_RIVER_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7264], eax

; 6405 : 	m_iCHOKEPOINT_STRATEGIC_VALUE = getDefineINT("CHOKEPOINT_STRATEGIC_VALUE");

	push	1
	push	OFFSET ??_C@_0BL@PMDNDBMP@CHOKEPOINT_STRATEGIC_VALUE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7268], eax

; 6406 : 	m_iHILL_STRATEGIC_VALUE = getDefineINT("HILL_STRATEGIC_VALUE");

	push	1
	push	OFFSET ??_C@_0BF@LMDLIDH@HILL_STRATEGIC_VALUE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7272], eax

; 6407 : 	m_iALREADY_OWNED_STRATEGIC_VALUE = getDefineINT("ALREADY_OWNED_STRATEGIC_VALUE");

	push	1
	push	OFFSET ??_C@_0BO@BLEHMDAD@ALREADY_OWNED_STRATEGIC_VALUE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7276], eax

; 6408 : 	m_iMINOR_CIV_CONTACT_GOLD_FIRST = getDefineINT("MINOR_CIV_CONTACT_GOLD_FIRST");

	push	1
	push	OFFSET ??_C@_0BN@DEKIOJKK@MINOR_CIV_CONTACT_GOLD_FIRST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7280], eax

; 6409 : 	m_iMINOR_CIV_CONTACT_GOLD_OTHER = getDefineINT("MINOR_CIV_CONTACT_GOLD_OTHER");

	push	1
	push	OFFSET ??_C@_0BN@PKICCEOO@MINOR_CIV_CONTACT_GOLD_OTHER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7284], eax

; 6410 : 	m_iMINOR_CIV_GROWTH_PERCENT = getDefineINT("MINOR_CIV_GROWTH_PERCENT");

	push	1
	push	OFFSET ??_C@_0BJ@BJOAAJFK@MINOR_CIV_GROWTH_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7288], eax

; 6411 : 	m_iMINOR_CIV_PRODUCTION_PERCENT = getDefineINT("MINOR_CIV_PRODUCTION_PERCENT");

	push	1
	push	OFFSET ??_C@_0BN@OFNKIPKA@MINOR_CIV_PRODUCTION_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7292], eax

; 6412 : 	m_iMINOR_CIV_GOLD_PERCENT = getDefineINT("MINOR_CIV_GOLD_PERCENT");

	push	1
	push	OFFSET ??_C@_0BH@BNEFGI@MINOR_CIV_GOLD_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7296], eax

; 6413 : 	m_iMINOR_CIV_TECH_PERCENT = getDefineINT("MINOR_CIV_TECH_PERCENT");

	push	1
	push	OFFSET ??_C@_0BH@GKCDHDFF@MINOR_CIV_TECH_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7300], eax

; 6414 : 	m_iMINOR_POLICY_RESOURCE_MULTIPLIER = getDefineINT("MINOR_POLICY_RESOURCE_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CB@OMCNOFEN@MINOR_POLICY_RESOURCE_MULTIPLIER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7304], eax

; 6415 : 	m_iMINOR_POLICY_RESOURCE_HAPPINESS_MULTIPLIER = getDefineINT("MINOR_POLICY_RESOURCE_HAPPINESS_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CL@BLFHHHLC@MINOR_POLICY_RESOURCE_HAPPINESS_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7308], eax

; 6416 : 	m_iMINOR_GOLD_GIFT_LARGE = getDefineINT("MINOR_GOLD_GIFT_LARGE");

	push	1
	push	OFFSET ??_C@_0BG@LLHDOOOJ@MINOR_GOLD_GIFT_LARGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7312], eax

; 6417 : 	m_iMINOR_GOLD_GIFT_MEDIUM = getDefineINT("MINOR_GOLD_GIFT_MEDIUM");

	push	1
	push	OFFSET ??_C@_0BH@LCAFOHLJ@MINOR_GOLD_GIFT_MEDIUM?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7316], eax

; 6418 : 	m_iMINOR_GOLD_GIFT_SMALL = getDefineINT("MINOR_GOLD_GIFT_SMALL");

	push	1
	push	OFFSET ??_C@_0BG@BDDIBPHP@MINOR_GOLD_GIFT_SMALL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7320], eax

; 6419 : 	m_iMINOR_CIV_TILE_IMPROVEMENT_GIFT_COST = getDefineINT("MINOR_CIV_TILE_IMPROVEMENT_GIFT_COST");

	push	1
	push	OFFSET ??_C@_0CF@JOFACDLK@MINOR_CIV_TILE_IMPROVEMENT_GIFT_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7324], eax

; 6420 : 	m_iMINOR_CIV_BUYOUT_COST = getDefineINT("MINOR_CIV_BUYOUT_COST");

	push	1
	push	OFFSET ??_C@_0BG@JOHJPPHG@MINOR_CIV_BUYOUT_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7328], eax

; 6421 : 	m_iMINOR_CIV_BUYOUT_TURNS = getDefineINT("MINOR_CIV_BUYOUT_TURNS");

	push	1
	push	OFFSET ??_C@_0BH@LFOAFPKC@MINOR_CIV_BUYOUT_TURNS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7332], eax

; 6422 : 	m_iMINOR_FRIENDSHIP_FROM_TRADE_MISSION = getDefineINT("MINOR_FRIENDSHIP_FROM_TRADE_MISSION");

	push	1
	push	OFFSET ??_C@_0CE@FDBDNMC@MINOR_FRIENDSHIP_FROM_TRADE_MISS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7336], eax

; 6423 : 	m_iMINOR_FRIENDSHIP_ANCHOR_DEFAULT = getDefineINT("MINOR_FRIENDSHIP_ANCHOR_DEFAULT");

	push	1
	push	OFFSET ??_C@_0CA@KONKFNLO@MINOR_FRIENDSHIP_ANCHOR_DEFAULT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7340], eax

; 6424 : 	m_iMINOR_FRIENDSHIP_ANCHOR_MOD_PROTECTED = getDefineINT("MINOR_FRIENDSHIP_ANCHOR_MOD_PROTECTED");

	push	1
	push	OFFSET ??_C@_0CG@GMHDOODL@MINOR_FRIENDSHIP_ANCHOR_MOD_PROT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7344], eax

; 6425 : 	m_iMINOR_FRIENDSHIP_ANCHOR_MOD_WARY_OF = getDefineINT("MINOR_FRIENDSHIP_ANCHOR_MOD_WARY_OF");

	push	1
	push	OFFSET ??_C@_0CE@ECKCBJGL@MINOR_FRIENDSHIP_ANCHOR_MOD_WARY@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7348], eax

; 6426 : 	m_iMINOR_UNIT_GIFT_TRAVEL_TURNS = getDefineINT("MINOR_UNIT_GIFT_TRAVEL_TURNS");

	push	1
	push	OFFSET ??_C@_0BN@HEHBPIKC@MINOR_UNIT_GIFT_TRAVEL_TURNS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7352], eax

; 6427 : 	m_iPLOT_UNIT_LIMIT = getDefineINT("PLOT_UNIT_LIMIT");

	push	1
	push	OFFSET ??_C@_0BA@NOCDLMFB@PLOT_UNIT_LIMIT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7356], eax

; 6428 : 	m_iZONE_OF_CONTROL_ENABLED = getDefineINT("ZONE_OF_CONTROL_ENABLED");

	push	1
	push	OFFSET ??_C@_0BI@FMKIGCCP@ZONE_OF_CONTROL_ENABLED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7360], eax

; 6429 : 	m_iFIRE_SUPPORT_DISABLED = getDefineINT("FIRE_SUPPORT_DISABLED");

	push	1
	push	OFFSET ??_C@_0BG@BFHJICGK@FIRE_SUPPORT_DISABLED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7364], eax

; 6430 : 	m_iMAX_HIT_POINTS = getDefineINT("MAX_HIT_POINTS");

	push	1
	push	OFFSET ??_C@_0P@HLEFCLJM@MAX_HIT_POINTS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7368], eax

; 6431 : 	m_iMAX_CITY_HIT_POINTS = getDefineINT("MAX_CITY_HIT_POINTS");

	push	1
	push	OFFSET ??_C@_0BE@HKHJIPK@MAX_CITY_HIT_POINTS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7372], eax

; 6432 : 	m_iCITY_HIT_POINTS_HEALED_PER_TURN = getDefineINT("CITY_HIT_POINTS_HEALED_PER_TURN");

	push	1
	push	OFFSET ??_C@_0CA@MFHEEKDI@CITY_HIT_POINTS_HEALED_PER_TURN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7376], eax

; 6433 : 	m_iFLAT_LAND_EXTRA_DEFENSE = getDefineINT("FLAT_LAND_EXTRA_DEFENSE");

	push	1
	push	OFFSET ??_C@_0BI@ONIPANHL@FLAT_LAND_EXTRA_DEFENSE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7380], eax

; 6434 : 	m_iHILLS_EXTRA_DEFENSE = getDefineINT("HILLS_EXTRA_DEFENSE");

	push	1
	push	OFFSET ??_C@_0BE@KBIOAKNM@HILLS_EXTRA_DEFENSE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7384], eax

; 6435 : 	m_iRIVER_ATTACK_MODIFIER = getDefineINT("RIVER_ATTACK_MODIFIER");

	push	1
	push	OFFSET ??_C@_0BG@MDMCGOFD@RIVER_ATTACK_MODIFIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7388], eax

; 6436 : 	m_iAMPHIB_ATTACK_MODIFIER = getDefineINT("AMPHIB_ATTACK_MODIFIER");

	push	1
	push	OFFSET ??_C@_0BH@DEAHGOCL@AMPHIB_ATTACK_MODIFIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7392], eax

; 6437 : 	m_iENEMY_HEAL_RATE = getDefineINT("ENEMY_HEAL_RATE");

	push	1
	push	OFFSET ??_C@_0BA@BACICFOH@ENEMY_HEAL_RATE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7396], eax

; 6438 : 	m_iNEUTRAL_HEAL_RATE = getDefineINT("NEUTRAL_HEAL_RATE");

	push	1
	push	OFFSET ??_C@_0BC@FJPECDBC@NEUTRAL_HEAL_RATE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7400], eax

; 6439 : 	m_iFRIENDLY_HEAL_RATE = getDefineINT("FRIENDLY_HEAL_RATE");

	push	1
	push	OFFSET ??_C@_0BD@BLNMNOMH@FRIENDLY_HEAL_RATE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7404], eax

; 6440 : 	m_iINSTA_HEAL_RATE = getDefineINT("INSTA_HEAL_RATE");

	push	1
	push	OFFSET ??_C@_0BA@BAPMLGMF@INSTA_HEAL_RATE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7408], eax

; 6441 : 	m_iCITY_HEAL_RATE = getDefineINT("CITY_HEAL_RATE");

	push	1
	push	OFFSET ??_C@_0P@JKAOAJKK@CITY_HEAL_RATE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7412], eax

; 6442 : 	m_iATTACK_SAME_STRENGTH_MIN_DAMAGE = getDefineINT("ATTACK_SAME_STRENGTH_MIN_DAMAGE");

	push	1
	push	OFFSET ??_C@_0CA@CBGKPGFB@ATTACK_SAME_STRENGTH_MIN_DAMAGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7416], eax

; 6443 : 	m_iRANGE_ATTACK_RANGED_DEFENDER_MOD = getDefineINT("RANGE_ATTACK_RANGED_DEFENDER_MOD");

	push	1
	push	OFFSET ??_C@_0CB@CKMGFABD@RANGE_ATTACK_RANGED_DEFENDER_MOD@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7420], eax

; 6444 : 	m_iATTACK_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE = getDefineINT("ATTACK_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE");

	push	1
	push	OFFSET ??_C@_0CL@JHCNNPKO@ATTACK_SAME_STRENGTH_POSSIBLE_EX@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7424], eax

; 6445 : 	m_iRANGE_ATTACK_SAME_STRENGTH_MIN_DAMAGE = getDefineINT("RANGE_ATTACK_SAME_STRENGTH_MIN_DAMAGE");

	push	1
	push	OFFSET ??_C@_0CG@BEFLCKBG@RANGE_ATTACK_SAME_STRENGTH_MIN_D@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7428], eax

; 6446 : 	m_iRANGE_ATTACK_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE = getDefineINT("RANGE_ATTACK_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE");

	push	1
	push	OFFSET ??_C@_0DB@NJBEDFIN@RANGE_ATTACK_SAME_STRENGTH_POSSI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7432], eax

; 6447 : 	m_iAIR_STRIKE_SAME_STRENGTH_MIN_DEFENSE_DAMAGE = getDefineINT("AIR_STRIKE_SAME_STRENGTH_MIN_DEFENSE_DAMAGE");

	push	1
	push	OFFSET ??_C@_0CM@NJPHNFMD@AIR_STRIKE_SAME_STRENGTH_MIN_DEF@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7436], eax

; 6448 : 	m_iAIR_STRIKE_SAME_STRENGTH_POSSIBLE_EXTRA_DEFENSE_DAMAGE = getDefineINT("AIR_STRIKE_SAME_STRENGTH_POSSIBLE_EXTRA_DEFENSE_DAMAGE");

	push	1
	push	OFFSET ??_C@_0DH@CJKKENDJ@AIR_STRIKE_SAME_STRENGTH_POSSIBL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7440], eax

; 6449 : 	m_iINTERCEPTION_SAME_STRENGTH_MIN_DAMAGE = getDefineINT("INTERCEPTION_SAME_STRENGTH_MIN_DAMAGE");

	push	1
	push	OFFSET ??_C@_0CG@MDGJMNDB@INTERCEPTION_SAME_STRENGTH_MIN_D@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7444], eax

; 6450 : 	m_iINTERCEPTION_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE = getDefineINT("INTERCEPTION_SAME_STRENGTH_POSSIBLE_EXTRA_DAMAGE");

	push	1
	push	OFFSET ??_C@_0DB@KPJCCOIA@INTERCEPTION_SAME_STRENGTH_POSSI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7448], eax

; 6451 : 	m_iAIR_SWEEP_INTERCEPTION_DAMAGE_MOD = getDefineINT("AIR_SWEEP_INTERCEPTION_DAMAGE_MOD");

	push	1
	push	OFFSET ??_C@_0CC@FANGPDKB@AIR_SWEEP_INTERCEPTION_DAMAGE_MO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7452], eax

; 6452 : 	m_iWOUNDED_DAMAGE_MULTIPLIER = getDefineINT("WOUNDED_DAMAGE_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BK@GJNDINPN@WOUNDED_DAMAGE_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7456], eax

; 6453 : 	m_iTRAIT_WOUNDED_DAMAGE_MOD = getDefineINT("TRAIT_WOUNDED_DAMAGE_MOD");

	push	1
	push	OFFSET ??_C@_0BJ@BBKLLFMF@TRAIT_WOUNDED_DAMAGE_MOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7460], eax

; 6454 : 	m_iCITY_STRENGTH_DEFAULT = getDefineINT("CITY_STRENGTH_DEFAULT");

	push	1
	push	OFFSET ??_C@_0BG@MCMBHDMB@CITY_STRENGTH_DEFAULT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7464], eax

; 6455 : 	m_iCITY_STRENGTH_POPULATION_CHANGE = getDefineINT("CITY_STRENGTH_POPULATION_CHANGE");

	push	1
	push	OFFSET ??_C@_0CA@HIBDNCGI@CITY_STRENGTH_POPULATION_CHANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7468], eax

; 6456 : 	m_iCITY_STRENGTH_UNIT_DIVISOR = getDefineINT("CITY_STRENGTH_UNIT_DIVISOR");

	push	1
	push	OFFSET ??_C@_0BL@GLCHAKAJ@CITY_STRENGTH_UNIT_DIVISOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7472], eax

; 6457 : 	m_iCITY_STRENGTH_HILL_CHANGE = getDefineINT("CITY_STRENGTH_HILL_CHANGE");

	push	1
	push	OFFSET ??_C@_0BK@CDKPGCBC@CITY_STRENGTH_HILL_CHANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7476], eax

; 6458 : 	m_iCITY_ATTACKING_DAMAGE_MOD = getDefineINT("CITY_ATTACKING_DAMAGE_MOD");

	push	1
	push	OFFSET ??_C@_0BK@KLNBCKKJ@CITY_ATTACKING_DAMAGE_MOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7480], eax

; 6459 : 	m_iATTACKING_CITY_MELEE_DAMAGE_MOD = getDefineINT("ATTACKING_CITY_MELEE_DAMAGE_MOD");

	push	1
	push	OFFSET ??_C@_0CA@CDPGPAJA@ATTACKING_CITY_MELEE_DAMAGE_MOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7484], eax

; 6460 : 	m_iCITY_ATTACK_RANGE = getDefineINT("CITY_ATTACK_RANGE");

	push	1
	push	OFFSET ??_C@_0BC@GGMKDAAA@CITY_ATTACK_RANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7488], eax

; 6461 : 	m_iCAN_CITY_USE_INDIRECT_FIRE = getDefineINT("CAN_CITY_USE_INDIRECT_FIRE");

	push	1
	push	OFFSET ??_C@_0BL@LNCNDMOL@CAN_CITY_USE_INDIRECT_FIRE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7492], eax

; 6462 : 	m_iCITY_RANGED_ATTACK_STRENGTH_MULTIPLIER = getDefineINT("CITY_RANGED_ATTACK_STRENGTH_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CH@LECDAFHK@CITY_RANGED_ATTACK_STRENGTH_MULT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7496], eax

; 6463 : 	m_iMIN_CITY_STRIKE_DAMAGE = getDefineINT("MIN_CITY_STRIKE_DAMAGE");

	push	1
	push	OFFSET ??_C@_0BH@DNEAKJMK@MIN_CITY_STRIKE_DAMAGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7500], eax

; 6464 : 	m_iCITY_CAPTURE_DAMAGE_PERCENT = getDefineINT("CITY_CAPTURE_DAMAGE_PERCENT");

	push	1
	push	OFFSET ??_C@_0BM@OMDNCIGJ@CITY_CAPTURE_DAMAGE_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7504], eax

; 6465 : 	m_iEXPERIENCE_PER_LEVEL = getDefineINT("EXPERIENCE_PER_LEVEL");

	push	1
	push	OFFSET ??_C@_0BF@BBKNKDJJ@EXPERIENCE_PER_LEVEL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7508], eax

; 6466 : 	m_iEXPERIENCE_ATTACKING_UNIT_MELEE = getDefineINT("EXPERIENCE_ATTACKING_UNIT_MELEE");

	push	1
	push	OFFSET ??_C@_0CA@FIOEPMCP@EXPERIENCE_ATTACKING_UNIT_MELEE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7512], eax

; 6467 : 	m_iEXPERIENCE_DEFENDING_UNIT_MELEE = getDefineINT("EXPERIENCE_DEFENDING_UNIT_MELEE");

	push	1
	push	OFFSET ??_C@_0CA@KAGMMFLM@EXPERIENCE_DEFENDING_UNIT_MELEE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7516], eax

; 6468 : 	m_iEXPERIENCE_ATTACKING_UNIT_AIR = getDefineINT("EXPERIENCE_ATTACKING_UNIT_AIR");

	push	1
	push	OFFSET ??_C@_0BO@PCHJACAH@EXPERIENCE_ATTACKING_UNIT_AIR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7520], eax

; 6469 : 	m_iEXPERIENCE_DEFENDING_UNIT_AIR = getDefineINT("EXPERIENCE_DEFENDING_UNIT_AIR");

	push	1
	push	OFFSET ??_C@_0BO@LAMEOGID@EXPERIENCE_DEFENDING_UNIT_AIR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7524], eax

; 6470 : 	m_iEXPERIENCE_ATTACKING_UNIT_RANGED = getDefineINT("EXPERIENCE_ATTACKING_UNIT_RANGED");

	push	1
	push	OFFSET ??_C@_0CB@OFFCGGHO@EXPERIENCE_ATTACKING_UNIT_RANGED@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7528], eax

; 6471 : 	m_iEXPERIENCE_DEFENDING_UNIT_RANGED = getDefineINT("EXPERIENCE_DEFENDING_UNIT_RANGED");

	push	1
	push	OFFSET ??_C@_0CB@IMKMCMLJ@EXPERIENCE_DEFENDING_UNIT_RANGED@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7532], eax

; 6472 : 	m_iEXPERIENCE_ATTACKING_AIR_SWEEP = getDefineINT("EXPERIENCE_ATTACKING_AIR_SWEEP");

	push	1
	push	OFFSET ??_C@_0BP@IGACCMDN@EXPERIENCE_ATTACKING_AIR_SWEEP?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7536], eax

; 6473 : 	m_iEXPERIENCE_DEFENDING_AIR_SWEEP_AIR = getDefineINT("EXPERIENCE_DEFENDING_AIR_SWEEP_AIR");

	push	1
	push	OFFSET ??_C@_0CD@HJGELFEN@EXPERIENCE_DEFENDING_AIR_SWEEP_A@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7540], eax

; 6474 : 	m_iEXPERIENCE_DEFENDING_AIR_SWEEP_GROUND = getDefineINT("EXPERIENCE_DEFENDING_AIR_SWEEP_GROUND");

	push	1
	push	OFFSET ??_C@_0CG@CLFMKAFM@EXPERIENCE_DEFENDING_AIR_SWEEP_G@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7544], eax

; 6475 : 	m_iEXPERIENCE_ATTACKING_CITY_MELEE = getDefineINT("EXPERIENCE_ATTACKING_CITY_MELEE");

	push	1
	push	OFFSET ??_C@_0CA@DKPBFJCJ@EXPERIENCE_ATTACKING_CITY_MELEE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7548], eax

; 6476 : 	m_iEXPERIENCE_ATTACKING_CITY_RANGED = getDefineINT("EXPERIENCE_ATTACKING_CITY_RANGED");

	push	1
	push	OFFSET ??_C@_0CB@MFDNGOO@EXPERIENCE_ATTACKING_CITY_RANGED@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7552], eax

; 6477 : 	m_iEXPERIENCE_ATTACKING_CITY_AIR = getDefineINT("EXPERIENCE_ATTACKING_CITY_AIR");

	push	1
	push	OFFSET ??_C@_0BO@JNPBNODF@EXPERIENCE_ATTACKING_CITY_AIR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7556], eax

; 6478 : 	m_iBARBARIAN_MAX_XP_VALUE = getDefineINT("BARBARIAN_MAX_XP_VALUE");

	push	1
	push	OFFSET ??_C@_0BH@OGLICHKA@BARBARIAN_MAX_XP_VALUE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7560], eax

; 6479 : 	m_iCOMBAT_EXPERIENCE_IN_BORDERS_PERCENT = getDefineINT("COMBAT_EXPERIENCE_IN_BORDERS_PERCENT");

	push	1
	push	OFFSET ??_C@_0CF@HFKNGDJL@COMBAT_EXPERIENCE_IN_BORDERS_PER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7564], eax

; 6480 : 	m_iGREAT_GENERALS_THRESHOLD_INCREASE = getDefineINT("GREAT_GENERALS_THRESHOLD_INCREASE");

	push	1
	push	OFFSET ??_C@_0CC@DGLDFBKK@GREAT_GENERALS_THRESHOLD_INCREAS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7568], eax

; 6481 : 	m_iGREAT_GENERALS_THRESHOLD_INCREASE_TEAM = getDefineINT("GREAT_GENERALS_THRESHOLD_INCREASE_TEAM");

	push	1
	push	OFFSET ??_C@_0CH@KPCMJDFF@GREAT_GENERALS_THRESHOLD_INCREAS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7572], eax

; 6482 : 	m_iGREAT_GENERALS_THRESHOLD = getDefineINT("GREAT_GENERALS_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BJ@NANIBGDF@GREAT_GENERALS_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7576], eax

; 6483 : 	m_iUNIT_DEATH_XP_GREAT_GENERAL_LOSS = getDefineINT("UNIT_DEATH_XP_GREAT_GENERAL_LOSS");

	push	1
	push	OFFSET ??_C@_0CB@HDLPGCJC@UNIT_DEATH_XP_GREAT_GENERAL_LOSS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7580], eax

; 6484 : 	m_iMIN_EXPERIENCE_PER_COMBAT = getDefineINT("MIN_EXPERIENCE_PER_COMBAT");

	push	1
	push	OFFSET ??_C@_0BK@NNLPHNAO@MIN_EXPERIENCE_PER_COMBAT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7584], eax

; 6485 : 	m_iMAX_EXPERIENCE_PER_COMBAT = getDefineINT("MAX_EXPERIENCE_PER_COMBAT");

	push	1
	push	OFFSET ??_C@_0BK@DOOCMDNE@MAX_EXPERIENCE_PER_COMBAT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7588], eax

; 6486 : 	m_iCRAMPED_RANGE_FROM_CITY = getDefineINT("CRAMPED_RANGE_FROM_CITY");

	push	1
	push	OFFSET ??_C@_0BI@PKBBAIGJ@CRAMPED_RANGE_FROM_CITY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7592], eax

; 6487 : 	m_iCRAMPED_USABLE_PLOT_PERCENT = getDefineINT("CRAMPED_USABLE_PLOT_PERCENT");

	push	1
	push	OFFSET ??_C@_0BM@NGHHEGFJ@CRAMPED_USABLE_PLOT_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7596], eax

; 6488 : 	m_iPROXIMITY_NEIGHBORS_CLOSEST_CITY_REQUIREMENT = getDefineINT("PROXIMITY_NEIGHBORS_CLOSEST_CITY_REQUIREMENT");

	push	1
	push	OFFSET ??_C@_0CN@MFNFBDJO@PROXIMITY_NEIGHBORS_CLOSEST_CITY@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7600], eax

; 6489 : 	m_iPROXIMITY_CLOSE_CLOSEST_CITY_POSSIBILITY = getDefineINT("PROXIMITY_CLOSE_CLOSEST_CITY_POSSIBILITY");

	push	1
	push	OFFSET ??_C@_0CJ@MKIAMFJD@PROXIMITY_CLOSE_CLOSEST_CITY_POS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7604], eax

; 6490 : 	m_iPROXIMITY_CLOSE_DISTANCE_MAP_MULTIPLIER = getDefineINT("PROXIMITY_CLOSE_DISTANCE_MAP_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CI@ELMOOLAE@PROXIMITY_CLOSE_DISTANCE_MAP_MUL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7608], eax

; 6491 : 	m_iPROXIMITY_CLOSE_DISTANCE_MAX = getDefineINT("PROXIMITY_CLOSE_DISTANCE_MAX");

	push	1
	push	OFFSET ??_C@_0BN@OPEJENLE@PROXIMITY_CLOSE_DISTANCE_MAX?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7612], eax

; 6492 : 	m_iPROXIMITY_CLOSE_DISTANCE_MIN = getDefineINT("PROXIMITY_CLOSE_DISTANCE_MIN");

	push	1
	push	OFFSET ??_C@_0BN@PNMCKJNL@PROXIMITY_CLOSE_DISTANCE_MIN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7616], eax

; 6493 : 	m_iPROXIMITY_FAR_DISTANCE_MAP_MULTIPLIER = getDefineINT("PROXIMITY_FAR_DISTANCE_MAP_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CG@MFAGGBJ@PROXIMITY_FAR_DISTANCE_MAP_MULTI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7620], eax

; 6494 : 	m_iPROXIMITY_FAR_DISTANCE_MAX = getDefineINT("PROXIMITY_FAR_DISTANCE_MAX");

	push	1
	push	OFFSET ??_C@_0BL@ICKMJPFE@PROXIMITY_FAR_DISTANCE_MAX?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7624], eax

; 6495 : 	m_iPROXIMITY_FAR_DISTANCE_MIN = getDefineINT("PROXIMITY_FAR_DISTANCE_MIN");

	push	1
	push	OFFSET ??_C@_0BL@JACHHLDL@PROXIMITY_FAR_DISTANCE_MIN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7628], eax

; 6496 : 	m_iPLOT_BASE_COST = getDefineINT("PLOT_BASE_COST");

	push	1
	push	OFFSET ??_C@_0P@IMNCMELC@PLOT_BASE_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7632], eax

; 6497 : 	m_iPLOT_ADDITIONAL_COST_PER_PLOT = getDefineINT("PLOT_ADDITIONAL_COST_PER_PLOT");

	push	1
	push	OFFSET ??_C@_0BO@MNAADMJ@PLOT_ADDITIONAL_COST_PER_PLOT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7636], eax

; 6498 : 	m_iPLOT_COST_APPEARANCE_DIVISOR = getDefineINT("PLOT_COST_APPEARANCE_DIVISOR");

	push	1
	push	OFFSET ??_C@_0BN@JJEBLEDJ@PLOT_COST_APPEARANCE_DIVISOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7640], eax

; 6499 : 	m_iCULTURE_COST_FIRST_PLOT = getDefineINT("CULTURE_COST_FIRST_PLOT");

	push	1
	push	OFFSET ??_C@_0BI@MBDNEIHO@CULTURE_COST_FIRST_PLOT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7644], eax

; 6500 : 	m_iCULTURE_COST_LATER_PLOT_MULTIPLIER = getDefineINT("CULTURE_COST_LATER_PLOT_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CD@EDHBJCNL@CULTURE_COST_LATER_PLOT_MULTIPLI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7648], eax

; 6501 : 	m_iCULTURE_COST_VISIBLE_DIVISOR = getDefineINT("CULTURE_COST_VISIBLE_DIVISOR");

	push	1
	push	OFFSET ??_C@_0BN@GNDPBKIH@CULTURE_COST_VISIBLE_DIVISOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7652], eax

; 6502 : 	m_iCULTURE_PLOT_COST_MOD_MINIMUM = getDefineINT("CULTURE_PLOT_COST_MOD_MINIMUM");

	push	1
	push	OFFSET ??_C@_0BO@HJBEEMGL@CULTURE_PLOT_COST_MOD_MINIMUM?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7656], eax

; 6503 : 	m_iMINOR_CIV_PLOT_CULTURE_COST_MULTIPLIER = getDefineINT("MINOR_CIV_PLOT_CULTURE_COST_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CH@IDDOELEM@MINOR_CIV_PLOT_CULTURE_COST_MULT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7660], eax

; 6504 : 	m_iMAXIMUM_BUY_PLOT_DISTANCE = getDefineINT("MAXIMUM_BUY_PLOT_DISTANCE");

	push	1
	push	OFFSET ??_C@_0BK@EOMPECIE@MAXIMUM_BUY_PLOT_DISTANCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7664], eax

; 6505 : 	m_iMAXIMUM_ACQUIRE_PLOT_DISTANCE = getDefineINT("MAXIMUM_ACQUIRE_PLOT_DISTANCE");

	push	1
	push	OFFSET ??_C@_0BO@DOCDGKDD@MAXIMUM_ACQUIRE_PLOT_DISTANCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7668], eax

; 6506 : 	m_iPLOT_INFLUENCE_BASE_MULTIPLIER = getDefineINT("PLOT_INFLUENCE_BASE_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BP@NEEHNGLH@PLOT_INFLUENCE_BASE_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7672], eax

; 6507 : 	m_iPLOT_INFLUENCE_DISTANCE_MULTIPLIER = getDefineINT("PLOT_INFLUENCE_DISTANCE_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CD@CLBINMPB@PLOT_INFLUENCE_DISTANCE_MULTIPLI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7676], eax

; 6508 : 	m_iPLOT_INFLUENCE_DISTANCE_DIVISOR = getDefineINT("PLOT_INFLUENCE_DISTANCE_DIVISOR");

	push	1
	push	OFFSET ??_C@_0CA@FJDILNCG@PLOT_INFLUENCE_DISTANCE_DIVISOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7680], eax

; 6509 : 	m_iPLOT_INFLUENCE_RING_COST = getDefineINT("PLOT_INFLUENCE_RING_COST");

	push	1
	push	OFFSET ??_C@_0BJ@NOKEENFI@PLOT_INFLUENCE_RING_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7684], eax

; 6510 : 	m_iPLOT_INFLUENCE_WATER_COST = getDefineINT("PLOT_INFLUENCE_WATER_COST");

	push	1
	push	OFFSET ??_C@_0BK@GNEBHGHM@PLOT_INFLUENCE_WATER_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7688], eax

; 6511 : 	m_iPLOT_INFLUENCE_IMPROVEMENT_COST = getDefineINT("PLOT_INFLUENCE_IMPROVEMENT_COST");

	push	1
	push	OFFSET ??_C@_0CA@OHKJBLIM@PLOT_INFLUENCE_IMPROVEMENT_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7692], eax

; 6512 : 	m_iPLOT_INFLUENCE_ROUTE_COST = getDefineINT("PLOT_INFLUENCE_ROUTE_COST");

	push	1
	push	OFFSET ??_C@_0BK@HMMGNDL@PLOT_INFLUENCE_ROUTE_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7696], eax

; 6513 : 	m_iPLOT_INFLUENCE_RESOURCE_COST = getDefineINT("PLOT_INFLUENCE_RESOURCE_COST");

	push	1
	push	OFFSET ??_C@_0BN@JGMDODIE@PLOT_INFLUENCE_RESOURCE_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7700], eax

; 6514 : 	m_iPLOT_INFLUENCE_NW_COST = getDefineINT("PLOT_INFLUENCE_NW_COST");

	push	1
	push	OFFSET ??_C@_0BH@DPIKAILF@PLOT_INFLUENCE_NW_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7704], eax

; 6515 : 	m_iPLOT_BUY_RESOURCE_COST = getDefineINT("PLOT_BUY_RESOURCE_COST");

	push	1
	push	OFFSET ??_C@_0BH@BNJBHALC@PLOT_BUY_RESOURCE_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7708], eax

; 6516 : 	m_iPLOT_BUY_YIELD_COST = getDefineINT("PLOT_BUY_YIELD_COST");

	push	1
	push	OFFSET ??_C@_0BE@BAFAHDME@PLOT_BUY_YIELD_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7712], eax

; 6517 : 	m_iPLOT_INFLUENCE_YIELD_POINT_COST = getDefineINT("PLOT_INFLUENCE_YIELD_POINT_COST");

	push	1
	push	OFFSET ??_C@_0CA@LJAFEIMM@PLOT_INFLUENCE_YIELD_POINT_COST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7716], eax

; 6518 : 	m_iPLOT_INFLUENCE_NO_ADJACENT_OWNED_COST = getDefineINT("PLOT_INFLUENCE_NO_ADJACENT_OWNED_COST");

	push	1
	push	OFFSET ??_C@_0CG@IAFAPLGE@PLOT_INFLUENCE_NO_ADJACENT_OWNED@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7720], eax

; 6519 : 	m_iUNITED_NATIONS_COUNTDOWN_TURNS = getDefineINT("UNITED_NATIONS_COUNTDOWN_TURNS");

	push	1
	push	OFFSET ??_C@_0BP@PCPCGLGO@UNITED_NATIONS_COUNTDOWN_TURNS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7724], eax

; 6520 : 	m_iOWN_UNITED_NATIONS_VOTE_BONUS = getDefineINT("OWN_UNITED_NATIONS_VOTE_BONUS");

	push	1
	push	OFFSET ??_C@_0BO@NFLMCEEN@OWN_UNITED_NATIONS_VOTE_BONUS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7728], eax

; 6521 : 	m_iDIPLO_VICTORY_ALGORITHM_THRESHOLD = getDefineINT("DIPLO_VICTORY_ALGORITHM_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CC@CIFOPFPA@DIPLO_VICTORY_ALGORITHM_THRESHOL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7732], eax

; 6522 : 	m_iDIPLO_VICTORY_BEYOND_ALGORITHM_MULTIPLIER = getDefineINT("DIPLO_VICTORY_BEYOND_ALGORITHM_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CK@ENCLBHON@DIPLO_VICTORY_BEYOND_ALGORITHM_M@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7736], eax

; 6523 : 	m_iDIPLO_VICTORY_DEFAULT_VOTE_PERCENT = getDefineINT("DIPLO_VICTORY_DEFAULT_VOTE_PERCENT");

	push	1
	push	OFFSET ??_C@_0CD@PNLGPDDB@DIPLO_VICTORY_DEFAULT_VOTE_PERCE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7740], eax

; 6524 : 	m_iSCORE_CITY_MULTIPLIER = getDefineINT("SCORE_CITY_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BG@IFAOPGBI@SCORE_CITY_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7744], eax

; 6525 : 	m_iSCORE_POPULATION_MULTIPLIER = getDefineINT("SCORE_POPULATION_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BM@MDPHCBBG@SCORE_POPULATION_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7748], eax

; 6526 : 	m_iSCORE_LAND_MULTIPLIER = getDefineINT("SCORE_LAND_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BG@IDMDHNPG@SCORE_LAND_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7752], eax

; 6527 : 	m_iSCORE_WONDER_MULTIPLIER = getDefineINT("SCORE_WONDER_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BI@NBGDCDEN@SCORE_WONDER_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7756], eax

; 6528 : 	m_iSCORE_TECH_MULTIPLIER = getDefineINT("SCORE_TECH_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BG@LBMLHAOE@SCORE_TECH_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7760], eax

; 6529 : 	m_iSCORE_FUTURE_TECH_MULTIPLIER = getDefineINT("SCORE_FUTURE_TECH_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BN@LBMILBPO@SCORE_FUTURE_TECH_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7764], eax

; 6530 : 	m_iSCORE_POLICY_MULTIPLIER = getDefineINT("SCORE_POLICY_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BI@FEOIIKFD@SCORE_POLICY_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7768], eax

; 6531 : 	m_iSCORE_GREAT_WORK_MULTIPLIER = getDefineINT("SCORE_GREAT_WORK_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BM@HFFIIIKB@SCORE_GREAT_WORK_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7772], eax

; 6532 : 	m_iSCORE_BELIEF_MULTIPLIER = getDefineINT("SCORE_BELIEF_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BI@CGAGFKMI@SCORE_BELIEF_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7776], eax

; 6533 : 	m_iSCORE_RELIGION_CITIES_MULTIPLIER = getDefineINT("SCORE_RELIGION_CITIES_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CB@LIBHHDFB@SCORE_RELIGION_CITIES_MULTIPLIER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7780], eax

; 6534 : 	m_iVICTORY_POINTS_PER_ERA = getDefineINT("VICTORY_POINTS_PER_ERA");

	push	1
	push	OFFSET ??_C@_0BH@DJIKKDGM@VICTORY_POINTS_PER_ERA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7784], eax

; 6535 : 	m_iMIN_GAME_TURNS_ELAPSED_TO_TEST_VICTORY = getDefineINT("MIN_GAME_TURNS_ELAPSED_TO_TEST_VICTORY");

	push	1
	push	OFFSET ??_C@_0CH@FGNJOOOL@MIN_GAME_TURNS_ELAPSED_TO_TEST_V@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7788], eax

; 6536 : 	m_iZERO_SUM_COMPETITION_WONDERS_VICTORY_POINTS = getDefineINT("ZERO_SUM_COMPETITION_WONDERS_VICTORY_POINTS");

	push	1
	push	OFFSET ??_C@_0CM@IGGNFFEP@ZERO_SUM_COMPETITION_WONDERS_VIC@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7792], eax

; 6537 : 	m_iZERO_SUM_COMPETITION_POLICIES_VICTORY_POINTS = getDefineINT("ZERO_SUM_COMPETITION_POLICIES_VICTORY_POINTS");

	push	1
	push	OFFSET ??_C@_0CN@BLFPPAPG@ZERO_SUM_COMPETITION_POLICIES_VI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7796], eax

; 6538 : 	m_iZERO_SUM_COMPETITION_GREAT_PEOPLE_VICTORY_POINTS = getDefineINT("ZERO_SUM_COMPETITION_GREAT_PEOPLE_VICTORY_POINTS");

	push	1
	push	OFFSET ??_C@_0DB@GJDBBHFH@ZERO_SUM_COMPETITION_GREAT_PEOPL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7800], eax

; 6539 : 	m_iMAX_CITY_DIST_HIGHWATER_MARK = getDefineINT("MAX_CITY_DIST_HIGHWATER_MARK");

	push	1
	push	OFFSET ??_C@_0BN@EFMEJENL@MAX_CITY_DIST_HIGHWATER_MARK?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7804], eax

; 6540 : 	m_iHEAVY_RESOURCE_THRESHOLD = getDefineINT("HEAVY_RESOURCE_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BJ@IBEANHNG@HEAVY_RESOURCE_THRESHOLD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7808], eax

; 6541 : 	m_iPROGRESS_POPUP_TURN_FREQUENCY = getDefineINT("PROGRESS_POPUP_TURN_FREQUENCY");

	push	1
	push	OFFSET ??_C@_0BO@EKDHFPFB@PROGRESS_POPUP_TURN_FREQUENCY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7812], eax

; 6542 : 	m_iSETTLER_PRODUCTION_SPEED = getDefineINT("SETTLER_PRODUCTION_SPEED");

	push	1
	push	OFFSET ??_C@_0BJ@IOONLICM@SETTLER_PRODUCTION_SPEED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7816], eax

; 6543 : 	m_iBUY_PLOTS_DISABLED = getDefineINT("BUY_PLOTS_DISABLED");

	push	1
	push	OFFSET ??_C@_0BD@JKLLAPJH@BUY_PLOTS_DISABLED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7820], eax

; 6544 : 	m_iCITY_STRENGTH_TECH_MULTIPLIER = getDefineINT("CITY_STRENGTH_TECH_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BO@LCJDBKEB@CITY_STRENGTH_TECH_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7824], eax

; 6545 : 	m_iWARLORD_EXTRA_EXPERIENCE_PER_UNIT_PERCENT = getDefineINT("WARLORD_EXTRA_EXPERIENCE_PER_UNIT_PERCENT");

	push	1
	push	OFFSET ??_C@_0CK@JDIOADGH@WARLORD_EXTRA_EXPERIENCE_PER_UNI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7828], eax

; 6546 : 	m_iBUILDING_SALE_DIVISOR = getDefineINT("BUILDING_SALE_DIVISOR");

	push	1
	push	OFFSET ??_C@_0BG@INAIJBJM@BUILDING_SALE_DIVISOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7832], eax

; 6547 : 	m_iDISBAND_UNIT_REFUND_PERCENT = getDefineINT("DISBAND_UNIT_REFUND_PERCENT");

	push	1
	push	OFFSET ??_C@_0BM@GMGKNNNP@DISBAND_UNIT_REFUND_PERCENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7836], eax

; 6548 : 	m_iMINOR_CIV_ROUTE_QUEST_WEIGHT = getDefineINT("MINOR_CIV_ROUTE_QUEST_WEIGHT");

	push	1
	push	OFFSET ??_C@_0BN@PCAIIOIJ@MINOR_CIV_ROUTE_QUEST_WEIGHT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7840], eax

; 6549 : 	m_iWITHDRAW_MOD_ENEMY_MOVES = getDefineINT("WITHDRAW_MOD_ENEMY_MOVES");

	push	1
	push	OFFSET ??_C@_0BJ@OIPIGCIF@WITHDRAW_MOD_ENEMY_MOVES?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7844], eax

; 6550 : 	m_iWITHDRAW_MOD_BLOCKED_TILE = getDefineINT("WITHDRAW_MOD_BLOCKED_TILE");

	push	1
	push	OFFSET ??_C@_0BK@KDHFMMLE@WITHDRAW_MOD_BLOCKED_TILE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7848], eax

; 6551 : 	m_iAI_OPERATIONAL_MAX_RECRUIT_TURNS_DEFAULT = getDefineINT("AI_OPERATIONAL_MAX_RECRUIT_TURNS_DEFAULT");

	push	1
	push	OFFSET ??_C@_0CJ@PNPOCKCP@AI_OPERATIONAL_MAX_RECRUIT_TURNS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7852], eax

; 6552 : 	m_iAI_OPERATIONAL_MAX_RECRUIT_TURNS_ENEMY_TERRITORY = getDefineINT("AI_OPERATIONAL_MAX_RECRUIT_TURNS_ENEMY_TERRITORY");

	push	1
	push	OFFSET ??_C@_0DB@GFEAJCMD@AI_OPERATIONAL_MAX_RECRUIT_TURNS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7856], eax

; 6553 : 
; 6554 : 	// -- floats --
; 6555 : 
; 6556 : 	m_fDIPLO_VICTORY_CIV_DELEGATES_COEFFICIENT = getDefineFLOAT("DIPLO_VICTORY_CIV_DELEGATES_COEFFICIENT");

	push	1
	push	OFFSET ??_C@_0CI@NBLHKEOH@DIPLO_VICTORY_CIV_DELEGATES_COEF@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+7984]

; 6557 : 	m_fDIPLO_VICTORY_CIV_DELEGATES_CONSTANT = getDefineFLOAT("DIPLO_VICTORY_CIV_DELEGATES_CONSTANT");

	push	1
	push	OFFSET ??_C@_0CF@BILFGCAD@DIPLO_VICTORY_CIV_DELEGATES_CONS@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+7988]

; 6558 : 	m_fDIPLO_VICTORY_CS_DELEGATES_COEFFICIENT = getDefineFLOAT("DIPLO_VICTORY_CS_DELEGATES_COEFFICIENT");

	push	1
	push	OFFSET ??_C@_0CH@BOBMFNBO@DIPLO_VICTORY_CS_DELEGATES_COEFF@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+7992]

; 6559 : 	m_fDIPLO_VICTORY_CS_DELEGATES_CONSTANT = getDefineFLOAT("DIPLO_VICTORY_CS_DELEGATES_CONSTANT");

	push	1
	push	OFFSET ??_C@_0CE@KODLFCBG@DIPLO_VICTORY_CS_DELEGATES_CONST@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+7996]

; 6560 : 	m_fAI_PRODUCTION_WEIGHT_MOD_PER_TURN_LEFT = getDefineFLOAT("AI_PRODUCTION_WEIGHT_MOD_PER_TURN_LEFT");

	push	1
	push	OFFSET ??_C@_0CH@KNPNMEMJ@AI_PRODUCTION_WEIGHT_MOD_PER_TUR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8000]

; 6561 : 	m_fAI_PRODUCTION_WEIGHT_BASE_MOD = getDefineFLOAT("AI_PRODUCTION_WEIGHT_BASE_MOD");

	push	1
	push	OFFSET ??_C@_0BO@JCHLMGGL@AI_PRODUCTION_WEIGHT_BASE_MOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8004]

; 6562 : 	m_fAI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT = getDefineFLOAT("AI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT");

	push	1
	push	OFFSET ??_C@_0CF@DJDFBCNI@AI_RESEARCH_WEIGHT_MOD_PER_TURN_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8008]

; 6563 : 	m_fAI_RESEARCH_WEIGHT_BASE_MOD = getDefineFLOAT("AI_RESEARCH_WEIGHT_BASE_MOD");

	push	1
	push	OFFSET ??_C@_0BM@DKKANOLN@AI_RESEARCH_WEIGHT_BASE_MOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8012]

; 6564 : 	m_fHURRY_GOLD_PRODUCTION_EXPONENT = getDefineFLOAT("HURRY_GOLD_PRODUCTION_EXPONENT");

	push	1
	push	OFFSET ??_C@_0BP@DFKJJGAF@HURRY_GOLD_PRODUCTION_EXPONENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8016]

; 6565 : 	m_fCITY_ZOOM_LEVEL_1 = getDefineFLOAT("CITY_ZOOM_LEVEL_1");

	push	1
	push	OFFSET ??_C@_0BC@MBIENKBB@CITY_ZOOM_LEVEL_1?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8020]

; 6566 : 	m_fCITY_ZOOM_LEVEL_2 = getDefineFLOAT("CITY_ZOOM_LEVEL_2");

	push	1
	push	OFFSET ??_C@_0BC@OKKJIJNC@CITY_ZOOM_LEVEL_2?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8024]

; 6567 : 	m_fCITY_ZOOM_LEVEL_3 = getDefineFLOAT("CITY_ZOOM_LEVEL_3");

	push	1
	push	OFFSET ??_C@_0BC@PDLCLIJD@CITY_ZOOM_LEVEL_3?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8028]

; 6568 : 	m_fCITY_ZOOM_OFFSET = getDefineFLOAT("CITY_ZOOM_OFFSET");

	push	1
	push	OFFSET ??_C@_0BB@PKNCKPLC@CITY_ZOOM_OFFSET?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8032]

; 6569 : 	m_fCULTURE_COST_LATER_PLOT_EXPONENT = getDefineFLOAT("CULTURE_COST_LATER_PLOT_EXPONENT");

	push	1
	push	OFFSET ??_C@_0CB@KPNNKHO@CULTURE_COST_LATER_PLOT_EXPONENT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8036]

; 6570 : 	m_fPOST_COMBAT_TEXT_DELAY = getDefineFLOAT("POST_COMBAT_TEXT_DELAY");

	push	1
	push	OFFSET ??_C@_0BH@LKHEJECL@POST_COMBAT_TEXT_DELAY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8040]

; 6571 : 	m_fAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER = getDefineFLOAT("AI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER");

	push	1
	push	OFFSET ??_C@_0DF@CBLILIOK@AI_CITY_SPECIALIZATION_PRODUCTIO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8044]

; 6572 : 	m_fAI_DANGER_MAJOR_APPROACH_WAR = getDefineFLOAT("AI_DANGER_MAJOR_APPROACH_WAR");

	push	1
	push	OFFSET ??_C@_0BN@JBCNHNEJ@AI_DANGER_MAJOR_APPROACH_WAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8048]

; 6573 : 	m_fAI_DANGER_MAJOR_APPROACH_HOSTILE = getDefineFLOAT("AI_DANGER_MAJOR_APPROACH_HOSTILE");

	push	1
	push	OFFSET ??_C@_0CB@PMOOCPKO@AI_DANGER_MAJOR_APPROACH_HOSTILE@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8052]

; 6574 : 	m_fAI_DANGER_MAJOR_APPROACH_DECEPTIVE = getDefineFLOAT("AI_DANGER_MAJOR_APPROACH_DECEPTIVE");

	push	1
	push	OFFSET ??_C@_0CD@HCPFEFHL@AI_DANGER_MAJOR_APPROACH_DECEPTI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8056]

; 6575 : 	m_fAI_DANGER_MAJOR_APPROACH_GUARDED = getDefineFLOAT("AI_DANGER_MAJOR_APPROACH_GUARDED");

	push	1
	push	OFFSET ??_C@_0CB@MDJOHKKB@AI_DANGER_MAJOR_APPROACH_GUARDED@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8060]

; 6576 : 	m_fAI_DANGER_MAJOR_APPROACH_AFRAID = getDefineFLOAT("AI_DANGER_MAJOR_APPROACH_AFRAID");

	push	1
	push	OFFSET ??_C@_0CA@HBPIHHEK@AI_DANGER_MAJOR_APPROACH_AFRAID?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8064]

; 6577 : 	m_fAI_DANGER_MAJOR_APPROACH_FRIENDLY = getDefineFLOAT("AI_DANGER_MAJOR_APPROACH_FRIENDLY");

	push	1
	push	OFFSET ??_C@_0CC@GPGKEHL@AI_DANGER_MAJOR_APPROACH_FRIENDL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8068]

; 6578 : 	m_fAI_DANGER_MAJOR_APPROACH_NEUTRAL = getDefineFLOAT("AI_DANGER_MAJOR_APPROACH_NEUTRAL");

	push	1
	push	OFFSET ??_C@_0CB@BGKKGCPO@AI_DANGER_MAJOR_APPROACH_NEUTRAL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8072]

; 6579 : 	m_fAI_DANGER_MINOR_APPROACH_NEUTRAL = getDefineFLOAT("AI_DANGER_MINOR_APPROACH_NEUTRAL");

	push	1
	push	OFFSET ??_C@_0CB@LNBAEAEF@AI_DANGER_MINOR_APPROACH_NEUTRAL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8076]

; 6580 : 	m_fAI_DANGER_MINOR_APPROACH_FRIENDLY = getDefineFLOAT("AI_DANGER_MINOR_APPROACH_FRIENDLY");

	push	1
	push	OFFSET ??_C@_0CC@FKOOHEFN@AI_DANGER_MINOR_APPROACH_FRIENDL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8080]

; 6581 : 	m_fAI_DANGER_MINOR_APPROACH_BULLY = getDefineFLOAT("AI_DANGER_MINOR_APPROACH_BULLY");

	push	1
	push	OFFSET ??_C@_0BP@BPPIKDMP@AI_DANGER_MINOR_APPROACH_BULLY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8084]

; 6582 : 	m_fAI_DANGER_MINOR_APPROACH_CONQUEST = getDefineFLOAT("AI_DANGER_MINOR_APPROACH_CONQUEST");

	push	1
	push	OFFSET ??_C@_0CC@KHHPDABN@AI_DANGER_MINOR_APPROACH_CONQUES@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8088]

; 6583 : 	m_fFLAVOR_STANDARD_LOG10_TILES_PER_PLAYER = getDefineFLOAT("FLAVOR_STANDARD_LOG10_TILES_PER_PLAYER");

	push	1
	push	OFFSET ??_C@_0CH@MLNAJCGK@FLAVOR_STANDARD_LOG10_TILES_PER_@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8092]

; 6584 : 	m_fDIPLO_VICTORY_TEAM_MULTIPLIER = getDefineFLOAT("DIPLO_VICTORY_TEAM_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BO@EGLKCOLB@DIPLO_VICTORY_TEAM_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8096]

; 6585 : 	m_fAI_TACTICAL_FLAVOR_DAMPENING_FOR_MOVE_PRIORITIZATION = getDefineFLOAT("AI_TACTICAL_FLAVOR_DAMPENING_FOR_MOVE_PRIORITIZATION");

	push	1
	push	OFFSET ??_C@_0DF@EPKENCBL@AI_TACTICAL_FLAVOR_DAMPENING_FOR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8100]

; 6586 : 	m_fAI_STRATEGY_DEFEND_MY_LANDS_UNITS_PER_CITY = getDefineFLOAT("AI_STRATEGY_DEFEND_MY_LANDS_UNITS_PER_CITY");

	push	1
	push	OFFSET ??_C@_0CL@FHPGLLNH@AI_STRATEGY_DEFEND_MY_LANDS_UNIT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8104]

; 6587 : 	m_fAI_STRATEGY_NAVAL_UNITS_PER_CITY = getDefineFLOAT("AI_STRATEGY_NAVAL_UNITS_PER_CITY");

	push	1
	push	OFFSET ??_C@_0CB@EIKGKLAP@AI_STRATEGY_NAVAL_UNITS_PER_CITY@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8108]

; 6588 : 	m_fGOLD_GIFT_FRIENDSHIP_EXPONENT = getDefineFLOAT("GOLD_GIFT_FRIENDSHIP_EXPONENT");

	push	1
	push	OFFSET ??_C@_0BO@CFGFKDBO@GOLD_GIFT_FRIENDSHIP_EXPONENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8112]

; 6589 : 	m_fGOLD_GIFT_FRIENDSHIP_DIVISOR = getDefineFLOAT("GOLD_GIFT_FRIENDSHIP_DIVISOR");

	push	1
	push	OFFSET ??_C@_0BN@HLPOPNMP@GOLD_GIFT_FRIENDSHIP_DIVISOR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8116]

; 6590 : 	m_fHURRY_GOLD_TECH_EXPONENT = getDefineFLOAT("HURRY_GOLD_TECH_EXPONENT");

	push	1
	push	OFFSET ??_C@_0BJ@EGKGEJHP@HURRY_GOLD_TECH_EXPONENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8120]

; 6591 : 	m_fHURRY_GOLD_CULTURE_EXPONENT = getDefineFLOAT("HURRY_GOLD_CULTURE_EXPONENT");

	push	1
	push	OFFSET ??_C@_0BM@KNDHBFJC@HURRY_GOLD_CULTURE_EXPONENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8124]

; 6592 : 	m_fCITY_GROWTH_MULTIPLIER = getDefineFLOAT("CITY_GROWTH_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0BH@BDEJDHDH@CITY_GROWTH_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8128]

; 6593 : 	m_fCITY_GROWTH_EXPONENT = getDefineFLOAT("CITY_GROWTH_EXPONENT");

	push	1
	push	OFFSET ??_C@_0BF@GLIHNBL@CITY_GROWTH_EXPONENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8132]

; 6594 : 	m_fPOLICY_COST_EXPONENT = getDefineFLOAT("POLICY_COST_EXPONENT");

	push	1
	push	OFFSET ??_C@_0BF@CKEGBKFK@POLICY_COST_EXPONENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8136]

; 6595 : 	m_fUNIT_UPGRADE_COST_MULTIPLIER_PER_ERA = getDefineFLOAT("UNIT_UPGRADE_COST_MULTIPLIER_PER_ERA");

	push	1
	push	OFFSET ??_C@_0CF@CGJFMLJE@UNIT_UPGRADE_COST_MULTIPLIER_PER@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8140]

; 6596 : 	m_fUNIT_UPGRADE_COST_EXPONENT = getDefineFLOAT("UNIT_UPGRADE_COST_EXPONENT");

	push	1
	push	OFFSET ??_C@_0BL@BILJPHBC@UNIT_UPGRADE_COST_EXPONENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8144]

; 6597 : 	m_fCITY_STRENGTH_TECH_BASE = getDefineFLOAT("CITY_STRENGTH_TECH_BASE");

	push	1
	push	OFFSET ??_C@_0BI@HLKDNPBE@CITY_STRENGTH_TECH_BASE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8148]

; 6598 : 	m_fCITY_STRENGTH_TECH_EXPONENT = getDefineFLOAT("CITY_STRENGTH_TECH_EXPONENT");

	push	1
	push	OFFSET ??_C@_0BM@GDGPPNNE@CITY_STRENGTH_TECH_EXPONENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8152]

; 6599 : 	m_fESPIONAGE_COUP_NOBODY_BONUS = getDefineFLOAT("ESPIONAGE_COUP_NOBODY_BONUS");

	push	1
	push	OFFSET ??_C@_0BM@OBAJNOI@ESPIONAGE_COUP_NOBODY_BONUS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8156]

; 6600 : 	m_fESPIONAGE_COUP_MULTIPLY_CONSTANT = getDefineFLOAT("ESPIONAGE_COUP_MULTIPLY_CONSTANT");

	push	1
	push	OFFSET ??_C@_0CB@JLJLMLDH@ESPIONAGE_COUP_MULTIPLY_CONSTANT@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8160]

; 6601 : 	m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_ZERO = getDefineFLOAT("ESPIONAGE_COUP_SPY_LEVEL_DELTA_ZERO");

	push	1
	push	OFFSET ??_C@_0CE@GBHNAJHI@ESPIONAGE_COUP_SPY_LEVEL_DELTA_Z@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8164]

; 6602 : 	m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_ONE = getDefineFLOAT("ESPIONAGE_COUP_SPY_LEVEL_DELTA_ONE");

	push	1
	push	OFFSET ??_C@_0CD@JOIEDLAF@ESPIONAGE_COUP_SPY_LEVEL_DELTA_O@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8168]

; 6603 : 	m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_TWO = getDefineFLOAT("ESPIONAGE_COUP_SPY_LEVEL_DELTA_TWO");

	push	1
	push	OFFSET ??_C@_0CD@PAIEJLOO@ESPIONAGE_COUP_SPY_LEVEL_DELTA_T@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8172]

; 6604 : 	m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_THREE = getDefineFLOAT("ESPIONAGE_COUP_SPY_LEVEL_DELTA_THREE");

	push	1
	push	OFFSET ??_C@_0CF@BMLMBPFA@ESPIONAGE_COUP_SPY_LEVEL_DELTA_T@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8176]

; 6605 : 	m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_FOUR = getDefineFLOAT("ESPIONAGE_COUP_SPY_LEVEL_DELTA_FOUR");

	push	1
	push	OFFSET ??_C@_0CE@FBPDOJAG@ESPIONAGE_COUP_SPY_LEVEL_DELTA_F@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8180]

; 6606 : 	m_iINTERNATIONAL_TRADE_BASE = getDefineINT("INTERNATIONAL_TRADE_BASE");

	push	1
	push	OFFSET ??_C@_0BJ@IBEBABHD@INTERNATIONAL_TRADE_BASE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7956], eax

; 6607 : 	m_iINTERNATIONAL_TRADE_EXCLUSIVE_CONNECTION = getDefineINT("INTERNATIONAL_TRADE_EXCLUSIVE_CONNECTION");

	push	1
	push	OFFSET ??_C@_0CJ@NPGGNEI@INTERNATIONAL_TRADE_EXCLUSIVE_CO@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7960], eax

; 6608 : 	m_iINTERNATIONAL_TRADE_CITY_GPT_DIVISOR = getDefineINT("INTERNATIONAL_TRADE_CITY_GPT_DIVISOR");

	push	1
	push	OFFSET ??_C@_0CF@GHNHLDID@INTERNATIONAL_TRADE_CITY_GPT_DIV@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7964], eax

; 6609 : 	m_iPILLAGE_HEAL_AMOUNT = getDefineINT("PILLAGE_HEAL_AMOUNT");

	push	1
	push	OFFSET ??_C@_0BE@GFMIBEAG@PILLAGE_HEAL_AMOUNT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8184], eax

; 6610 : 	m_iCITY_CONNECTIONS_CONNECT_TO_CAPITAL = getDefineINT("CITY_CONNECTIONS_CONNECT_TO_CAPITAL");

	push	1
	push	OFFSET ??_C@_0CE@KDJDBJKK@CITY_CONNECTIONS_CONNECT_TO_CAPI@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8188], eax

; 6611 : 	m_fUNRESEARCHED_TECH_FROM_KILLS_SLOPE = getDefineFLOAT("UNRESEARCHED_TECH_BONUS_FROM_KILLS_SLOPE");

	push	1
	push	OFFSET ??_C@_0CJ@GDHKGPJK@UNRESEARCHED_TECH_BONUS_FROM_KIL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8200]

; 6612 : 	m_fUNRESEARCHED_TECH_FROM_KILLS_INTERCEPT = getDefineFLOAT("UNRESEARCHED_TECH_BONUS_FROM_KILLS_INTERCEPT");

	push	1
	push	OFFSET ??_C@_0CN@IFHBIFKF@UNRESEARCHED_TECH_BONUS_FROM_KIL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8204]

; 6613 : 	m_iBASE_CULTURE_PER_GREAT_WORK = getDefineINT("BASE_CULTURE_PER_GREAT_WORK");

	push	1
	push	OFFSET ??_C@_0BM@EDDMBKGD@BASE_CULTURE_PER_GREAT_WORK?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8208], eax

; 6614 : 	m_iBASE_TOURISM_PER_GREAT_WORK = getDefineINT("BASE_TOURISM_PER_GREAT_WORK");

	push	1
	push	OFFSET ??_C@_0BM@IFDFHGID@BASE_TOURISM_PER_GREAT_WORK?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8212], eax

; 6615 : 	m_iTOURISM_MODIFIER_SHARED_RELIGION = getDefineINT("TOURISM_MODIFIER_SHARED_RELIGION");

	push	1
	push	OFFSET ??_C@_0CB@GLEENINB@TOURISM_MODIFIER_SHARED_RELIGION@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8216], eax

; 6616 : 	m_iTOURISM_MODIFIER_TRADE_ROUTE = getDefineINT("TOURISM_MODIFIER_TRADE_ROUTE");

	push	1
	push	OFFSET ??_C@_0BN@JOCPDGKC@TOURISM_MODIFIER_TRADE_ROUTE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8220], eax

; 6617 : 	m_iTOURISM_MODIFIER_OPEN_BORDERS = getDefineINT("TOURISM_MODIFIER_OPEN_BORDERS");

	push	1
	push	OFFSET ??_C@_0BO@HKIDLMKL@TOURISM_MODIFIER_OPEN_BORDERS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8224], eax

; 6618 : 	m_iTOURISM_MODIFIER_DIFFERENT_IDEOLOGIES = getDefineINT("TOURISM_MODIFIER_DIFFERENT_IDEOLOGIES");

	push	1
	push	OFFSET ??_C@_0CG@MJKPJEKM@TOURISM_MODIFIER_DIFFERENT_IDEOL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8228], eax

; 6619 : 	m_iTOURISM_MODIFIER_DIPLOMAT = getDefineINT("TOURISM_MODIFIER_DIPLOMAT");

	push	1
	push	OFFSET ??_C@_0BK@OHKIPNG@TOURISM_MODIFIER_DIPLOMAT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8232], eax

; 6620 : 	m_iMINIUMUM_TOURISM_BLAST_STRENGTH = getDefineINT("MINIUMUM_TOURISM_BLAST_STRENGTH");

	push	1
	push	OFFSET ??_C@_0CA@OABGJOCA@MINIUMUM_TOURISM_BLAST_STRENGTH?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8236], eax

; 6621 : 	m_iCULTURE_LEVEL_EXOTIC = getDefineINT("CULTURE_LEVEL_EXOTIC");

	push	1
	push	OFFSET ??_C@_0BF@JLKGGBAO@CULTURE_LEVEL_EXOTIC?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8240], eax

; 6622 : 	m_iCULTURE_LEVEL_FAMILIAR = getDefineINT("CULTURE_LEVEL_FAMILIAR");

	push	1
	push	OFFSET ??_C@_0BH@IIBAEGHK@CULTURE_LEVEL_FAMILIAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8244], eax

; 6623 : 	m_iCULTURE_LEVEL_POPULAR = getDefineINT("CULTURE_LEVEL_POPULAR");

	push	1
	push	OFFSET ??_C@_0BG@CDGJEBN@CULTURE_LEVEL_POPULAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8248], eax

; 6624 : 	m_iCULTURE_LEVEL_INFLUENTIAL = getDefineINT("CULTURE_LEVEL_INFLUENTIAL");

	push	1
	push	OFFSET ??_C@_0BK@KACDDHKO@CULTURE_LEVEL_INFLUENTIAL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8252], eax

; 6625 : 	m_iCULTURE_LEVEL_DOMINANT = getDefineINT("CULTURE_LEVEL_DOMINANT");

	push	1
	push	OFFSET ??_C@_0BH@FBBOOHPK@CULTURE_LEVEL_DOMINANT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8256], eax

; 6626 : 	m_iMIN_DIG_SITES_PER_MAJOR_CIV = getDefineINT("MIN_DIG_SITES_PER_MAJOR_CIV");

	push	1
	push	OFFSET ??_C@_0BM@CFKBAFBN@MIN_DIG_SITES_PER_MAJOR_CIV?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8260], eax

; 6627 : 	m_iMAX_DIG_SITES_PER_MAJOR_CIV = getDefineINT("MAX_DIG_SITES_PER_MAJOR_CIV");

	push	1
	push	OFFSET ??_C@_0BM@HCKPFFFO@MAX_DIG_SITES_PER_MAJOR_CIV?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8264], eax

; 6628 : 	m_iPERCENT_SITES_HIDDEN = getDefineINT("PERCENT_SITES_HIDDEN");

	push	1
	push	OFFSET ??_C@_0BF@CHKNEKBO@PERCENT_SITES_HIDDEN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8268], eax

; 6629 : 	m_iPERCENT_HIDDEN_SITES_WRITING = getDefineINT("PERCENT_HIDDEN_SITES_WRITING");

	push	1
	push	OFFSET ??_C@_0BN@DMDPEMGM@PERCENT_HIDDEN_SITES_WRITING?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8272], eax

; 6630 : 	m_iSAPPED_CITY_ATTACK_MODIFIER = getDefineINT("SAPPED_CITY_ATTACK_MODIFIER");

	push	1
	push	OFFSET ??_C@_0BM@IDEDHKOI@SAPPED_CITY_ATTACK_MODIFIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8276], eax

; 6631 : 	m_iSAPPER_BONUS_RANGE = getDefineINT("SAPPER_BONUS_RANGE");

	push	1
	push	OFFSET ??_C@_0BD@JGDGPAOM@SAPPER_BONUS_RANGE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8280], eax

; 6632 : 	m_iEXOTIC_GOODS_GOLD_MIN = getDefineINT("EXOTIC_GOODS_GOLD_MIN");

	push	1
	push	OFFSET ??_C@_0BG@GBOOEDHA@EXOTIC_GOODS_GOLD_MIN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8284], eax

; 6633 : 	m_iEXOTIC_GOODS_GOLD_MAX = getDefineINT("EXOTIC_GOODS_GOLD_MAX");

	push	1
	push	OFFSET ??_C@_0BG@HDGFKHBP@EXOTIC_GOODS_GOLD_MAX?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8288], eax

; 6634 : 	m_iEXOTIC_GOODS_XP_MIN = getDefineINT("EXOTIC_GOODS_XP_MIN");

	push	1
	push	OFFSET ??_C@_0BE@NMELINJI@EXOTIC_GOODS_XP_MIN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8292], eax

; 6635 : 	m_iEXOTIC_GOODS_XP_MAX = getDefineINT("EXOTIC_GOODS_XP_MAX");

	push	1
	push	OFFSET ??_C@_0BE@MOMAGJPH@EXOTIC_GOODS_XP_MAX?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8296], eax

; 6636 : 	m_iTEMPORARY_CULTURE_BOOST_MOD = getDefineINT("TEMPORARY_CULTURE_BOOST_MOD");

	push	1
	push	OFFSET ??_C@_0BM@LPKHMJGM@TEMPORARY_CULTURE_BOOST_MOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8300], eax

; 6637 : 	m_iTEMPORARY_TOURISM_BOOST_MOD = getDefineINT("TEMPORARY_TOURISM_BOOST_MOD");

	push	1
	push	OFFSET ??_C@_0BM@NLCMDPLM@TEMPORARY_TOURISM_BOOST_MOD?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8304], eax

; 6638 : 	m_iLEAGUE_SESSION_INTERVAL_BASE_TURNS = getDefineINT("LEAGUE_SESSION_INTERVAL_BASE_TURNS");

	push	1
	push	OFFSET ??_C@_0CD@JNIAGOP@LEAGUE_SESSION_INTERVAL_BASE_TUR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8308], eax

; 6639 : 	m_iLEAGUE_SESSION_SOON_WARNING_TURNS = getDefineINT("LEAGUE_SESSION_SOON_WARNING_TURNS");

	push	1
	push	OFFSET ??_C@_0CC@DCFLFNCB@LEAGUE_SESSION_SOON_WARNING_TURN@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8312], eax

; 6640 : 	m_iLEAGUE_MEMBER_PROPOSALS_BASE = getDefineINT("LEAGUE_MEMBER_PROPOSALS_BASE");

	push	1
	push	OFFSET ??_C@_0BN@POMMHHLM@LEAGUE_MEMBER_PROPOSALS_BASE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8316], eax

; 6641 : 	m_iLEAGUE_MEMBER_VOTES_BASE = getDefineINT("LEAGUE_MEMBER_VOTES_BASE");

	push	1
	push	OFFSET ??_C@_0BJ@EPKMOCLI@LEAGUE_MEMBER_VOTES_BASE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8320], eax

; 6642 : 	m_iLEAGUE_MEMBER_VOTES_FOR_HOST = getDefineINT("LEAGUE_MEMBER_VOTES_FOR_HOST");

	push	1
	push	OFFSET ??_C@_0BN@MBPEPHHC@LEAGUE_MEMBER_VOTES_FOR_HOST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8324], eax

; 6643 : 	m_iLEAGUE_MEMBER_VOTES_PER_CITY_STATE_ALLY = getDefineINT("LEAGUE_MEMBER_VOTES_PER_CITY_STATE_ALLY");

	push	1
	push	OFFSET ??_C@_0CI@CAHCOHLD@LEAGUE_MEMBER_VOTES_PER_CITY_STA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8328], eax

; 6644 : 	m_fLEAGUE_PROJECT_REWARD_TIER_1_THRESHOLD = getDefineFLOAT("LEAGUE_PROJECT_REWARD_TIER_1_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CH@JMBNOMFA@LEAGUE_PROJECT_REWARD_TIER_1_THR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8332]

; 6645 : 	m_fLEAGUE_PROJECT_REWARD_TIER_2_THRESHOLD = getDefineFLOAT("LEAGUE_PROJECT_REWARD_TIER_2_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0CH@OLIDDOKA@LEAGUE_PROJECT_REWARD_TIER_2_THR@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z	; CvGlobals::getDefineFLOAT
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8336]

; 6646 : 
; 6647 : 	// -- post defines --
; 6648 : 
; 6649 : 	m_iLAND_TERRAIN = getDefineINT("LAND_TERRAIN");

	push	1
	push	OFFSET ??_C@_0N@DECNAIAP@LAND_TERRAIN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8388], eax

; 6650 : 	m_iDEEP_WATER_TERRAIN = getDefineINT("DEEP_WATER_TERRAIN");

	push	1
	push	OFFSET ??_C@_0BD@DICGPMDI@DEEP_WATER_TERRAIN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8392], eax

; 6651 : 	m_iSHALLOW_WATER_TERRAIN = getDefineINT("SHALLOW_WATER_TERRAIN");

	push	1
	push	OFFSET ??_C@_0BG@KPDNLNOC@SHALLOW_WATER_TERRAIN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8396], eax

; 6652 : 	m_iRUINS_IMPROVEMENT = getDefineINT("RUINS_IMPROVEMENT");

	push	1
	push	OFFSET ??_C@_0BC@EELFNCN@RUINS_IMPROVEMENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8400], eax

; 6653 : 	m_iNUKE_FEATURE = getDefineINT("NUKE_FEATURE");

	push	1
	push	OFFSET ??_C@_0N@NNJKEKOK@NUKE_FEATURE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8404], eax

; 6654 : 	m_iARTIFACT_RESOURCE = getDefineINT("ARTIFACT_RESOURCE");

	push	1
	push	OFFSET ??_C@_0BC@FCNLHBCH@ARTIFACT_RESOURCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8408], eax

; 6655 : 	m_iHIDDEN_ARTIFACT_RESOURCE = getDefineINT("HIDDEN_ARTIFACT_RESOURCE");

	push	1
	push	OFFSET ??_C@_0BJ@OFLDHDKK@HIDDEN_ARTIFACT_RESOURCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8412], eax

; 6656 : 	m_iCAPITAL_BUILDINGCLASS = getDefineINT("CAPITAL_BUILDINGCLASS");

	push	1
	push	OFFSET ??_C@_0BG@MKLPHHBA@CAPITAL_BUILDINGCLASS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8416], eax

; 6657 : 	m_iDEFAULT_SPECIALIST = getDefineINT("DEFAULT_SPECIALIST");

	push	1
	push	OFFSET ??_C@_0BD@EBPACKLL@DEFAULT_SPECIALIST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8420], eax

; 6658 : 	m_iSPACE_RACE_TRIGGER_PROJECT = getDefineINT("SPACE_RACE_TRIGGER_PROJECT");

	push	1
	push	OFFSET ??_C@_0BL@FJGGDLOI@SPACE_RACE_TRIGGER_PROJECT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8424], eax

; 6659 : 	m_iSPACESHIP_CAPSULE = getDefineINT("SPACESHIP_CAPSULE");

	push	1
	push	OFFSET ??_C@_0BC@DHAKFBLN@SPACESHIP_CAPSULE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8428], eax

; 6660 : 	m_iSPACESHIP_BOOSTER = getDefineINT("SPACESHIP_BOOSTER");

	push	1
	push	OFFSET ??_C@_0BC@OLPBECEM@SPACESHIP_BOOSTER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8432], eax

; 6661 : 	m_iSPACESHIP_STASIS = getDefineINT("SPACESHIP_STASIS");

	push	1
	push	OFFSET ??_C@_0BB@GFPPBNKK@SPACESHIP_STASIS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8436], eax

; 6662 : 	m_iSPACESHIP_ENGINE = getDefineINT("SPACESHIP_ENGINE");

	push	1
	push	OFFSET ??_C@_0BB@GKIPHEKK@SPACESHIP_ENGINE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8440], eax

; 6663 : 	m_iMANHATTAN_PROJECT = getDefineINT("MANHATTAN_PROJECT");

	push	1
	push	OFFSET ??_C@_0BC@BNOKDDGC@MANHATTAN_PROJECT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8444], eax

; 6664 : 	m_iINITIAL_CITY_ROUTE_TYPE = getDefineINT("INITIAL_CITY_ROUTE_TYPE");

	push	1
	push	OFFSET ??_C@_0BI@OHIIGMAA@INITIAL_CITY_ROUTE_TYPE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8448], eax

; 6665 : 	m_iSTANDARD_HANDICAP = getDefineINT("STANDARD_HANDICAP");

	push	1
	push	OFFSET ??_C@_0BC@KJCMAPAI@STANDARD_HANDICAP?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8452], eax

; 6666 : 	m_iMULTIPLAYER_HANDICAP = getDefineINT("MULTIPLAYER_HANDICAP");

	push	1
	push	OFFSET ??_C@_0BF@NABKNOLL@MULTIPLAYER_HANDICAP?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8456], eax

; 6667 : 	m_iSTANDARD_HANDICAP_QUICK = getDefineINT("STANDARD_HANDICAP_QUICK");

	push	1
	push	OFFSET ??_C@_0BI@DHLPNDIC@STANDARD_HANDICAP_QUICK?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8460], eax

; 6668 : 	m_iSTANDARD_GAMESPEED = getDefineINT("STANDARD_GAMESPEED");

	push	1
	push	OFFSET ??_C@_0BD@FDBGEDIF@STANDARD_GAMESPEED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8464], eax

; 6669 : 	m_iSTANDARD_TURNTIMER = getDefineINT("STANDARD_TURNTIMER");

	push	1
	push	OFFSET ??_C@_0BD@GAOGEFBN@STANDARD_TURNTIMER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8468], eax

; 6670 : 	m_iSTANDARD_CLIMATE = getDefineINT("STANDARD_CLIMATE");

	push	1
	push	OFFSET ??_C@_0BB@GPNDHNFJ@STANDARD_CLIMATE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8472], eax

; 6671 : 	m_iSTANDARD_WORLD_SIZE = getDefineINT("STANDARD_WORLD_SIZE");

	push	1
	push	OFFSET ??_C@_0BE@CMGHPLCK@STANDARD_WORLD_SIZE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8476], eax

; 6672 : 	m_iSTANDARD_SEALEVEL = getDefineINT("STANDARD_SEALEVEL");

	push	1
	push	OFFSET ??_C@_0BC@FKKBJAPH@STANDARD_SEALEVEL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8480], eax

; 6673 : 	m_iSTANDARD_ERA = getDefineINT("STANDARD_ERA");

	push	1
	push	OFFSET ??_C@_0N@DKBKCGJO@STANDARD_ERA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8484], eax

; 6674 : 	m_iLAST_EMBARK_ART_ERA = getDefineINT("LAST_EMBARK_ART_ERA");

	push	1
	push	OFFSET ??_C@_0BE@EJPAJPEI@LAST_EMBARK_ART_ERA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8488], eax

; 6675 : 	m_iLAST_UNIT_ART_ERA = getDefineINT("LAST_UNIT_ART_ERA");

	push	1
	push	OFFSET ??_C@_0BC@FLMMHODD@LAST_UNIT_ART_ERA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8492], eax

; 6676 : 	m_iLAST_BRIDGE_ART_ERA = getDefineINT("LAST_BRIDGE_ART_ERA");

	push	1
	push	OFFSET ??_C@_0BE@FMNFIIEB@LAST_BRIDGE_ART_ERA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8496], eax

; 6677 : 	m_iSTANDARD_CALENDAR = getDefineINT("STANDARD_CALENDAR");

	push	1
	push	OFFSET ??_C@_0BC@GKHLNFHC@STANDARD_CALENDAR?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8500], eax

; 6678 : 	m_iBARBARIAN_HANDICAP = getDefineINT("BARBARIAN_HANDICAP");

	push	1
	push	OFFSET ??_C@_0BD@IBNKNHDA@BARBARIAN_HANDICAP?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8504], eax

; 6679 : 	m_iBARBARIAN_CIVILIZATION = getDefineINT("BARBARIAN_CIVILIZATION");

	push	1
	push	OFFSET ??_C@_0BH@NBDMLEBD@BARBARIAN_CIVILIZATION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8508], eax

; 6680 : 	m_iBARBARIAN_LEADER = getDefineINT("BARBARIAN_LEADER");

	push	1
	push	OFFSET ??_C@_0BB@BMMDEOOP@BARBARIAN_LEADER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8512], eax

; 6681 : 	m_iMINOR_CIV_HANDICAP = getDefineINT("MINOR_CIV_HANDICAP");

	push	1
	push	OFFSET ??_C@_0BD@JEJEOMLM@MINOR_CIV_HANDICAP?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8516], eax

; 6682 : 	m_iMINOR_CIVILIZATION = getDefineINT("MINOR_CIVILIZATION");

	push	1
	push	OFFSET ??_C@_0BD@NKGDNPEG@MINOR_CIVILIZATION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8520], eax

; 6683 : 	m_iPROMOTION_EMBARKATION = getDefineINT("PROMOTION_EMBARKATION");

	push	1
	push	OFFSET ??_C@_0BG@KNKLFEIM@PROMOTION_EMBARKATION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8524], eax

; 6684 : 	m_iPROMOTION_DEFENSIVE_EMBARKATION = getDefineINT("PROMOTION_DEFENSIVE_EMBARKATION");

	push	1
	push	OFFSET ??_C@_0CA@IFKPDLFA@PROMOTION_DEFENSIVE_EMBARKATION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8528], eax

; 6685 : 	m_iPROMOTION_ALLWATER_EMBARKATION = getDefineINT("PROMOTION_ALLWATER_EMBARKATION");

	push	1
	push	OFFSET ??_C@_0BP@LDIOBKDI@PROMOTION_ALLWATER_EMBARKATION?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8532], eax

; 6686 : 	m_iPROMOTION_OCEAN_IMPASSABLE_UNTIL_ASTRONOMY = getDefineINT("PROMOTION_OCEAN_IMPASSABLE_UNTIL_ASTRONOMY");

	push	1
	push	OFFSET ??_C@_0CL@PCMBHODK@PROMOTION_OCEAN_IMPASSABLE_UNTIL@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8536], eax

; 6687 : 	m_iPROMOTION_OCEAN_IMPASSABLE = getDefineINT("PROMOTION_OCEAN_IMPASSABLE");

	push	1
	push	OFFSET ??_C@_0BL@OHDFOIK@PROMOTION_OCEAN_IMPASSABLE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8540], eax

; 6688 : 	m_iAI_HANDICAP = getDefineINT("AI_HANDICAP");

	push	1
	push	OFFSET ??_C@_0M@NNNHGKNK@AI_HANDICAP?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8544], eax

; 6689 : 	m_iBARBARIAN_CAMP_IMPROVEMENT = getDefineINT("BARBARIAN_CAMP_IMPROVEMENT");

	push	1
	push	OFFSET ??_C@_0BL@OAFPPEOG@BARBARIAN_CAMP_IMPROVEMENT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8548], eax

; 6690 : 	m_iWALLS_BUILDINGCLASS = getDefineINT("WALLS_BUILDINGCLASS");

	push	1
	push	OFFSET ??_C@_0BE@FOCKKOCB@WALLS_BUILDINGCLASS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8552], eax

; 6691 : 	m_iPROMOTION_ONLY_DEFENSIVE = getDefineINT("PROMOTION_ONLY_DEFENSIVE");

	push	1
	push	OFFSET ??_C@_0BJ@FCCCKKMB@PROMOTION_ONLY_DEFENSIVE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8556], eax

; 6692 : 	m_iPROMOTION_UNWELCOME_EVANGELIST = getDefineINT("PROMOTION_UNWELCOME_EVANGELIST");

	push	1
	push	OFFSET ??_C@_0BP@JCIDAIBH@PROMOTION_UNWELCOME_EVANGELIST?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8560], eax

; 6693 : 	m_iCOMBAT_CAPTURE_HEALTH = getDefineINT("COMBAT_CAPTURE_HEALTH");

	push	1
	push	OFFSET ??_C@_0BG@NOILFINA@COMBAT_CAPTURE_HEALTH?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7968], eax

; 6694 : 	m_iCOMBAT_CAPTURE_MIN_CHANCE = getDefineINT("COMBAT_CAPTURE_MIN_CHANCE");

	push	1
	push	OFFSET ??_C@_0BK@PIPCLJHJ@COMBAT_CAPTURE_MIN_CHANCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7972], eax

; 6695 : 	m_iCOMBAT_CAPTURE_MAX_CHANCE = getDefineINT("COMBAT_CAPTURE_MAX_CHANCE");

	push	1
	push	OFFSET ??_C@_0BK@DEPPMCHG@COMBAT_CAPTURE_MAX_CHANCE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7976], eax

; 6696 : 	m_iCOMBAT_CAPTURE_RATIO_MULTIPLIER = getDefineINT("COMBAT_CAPTURE_RATIO_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CA@LJIHCLCH@COMBAT_CAPTURE_RATIO_MULTIPLIER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7980], eax

; 6697 : 	m_iRELIGION_MIN_FAITH_FIRST_PANTHEON = GC.getDefineINT("RELIGION_MIN_FAITH_FIRST_PANTHEON");

	push	1
	push	OFFSET ??_C@_0CC@IMOIAJKP@RELIGION_MIN_FAITH_FIRST_PANTHEO@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7860], eax

; 6698 : 	m_iRELIGION_MIN_FAITH_FIRST_PROPHET = GC.getDefineINT("RELIGION_MIN_FAITH_FIRST_PROPHET");

	push	1
	push	OFFSET ??_C@_0CB@GLMNAIGF@RELIGION_MIN_FAITH_FIRST_PROPHET@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7864], eax

; 6699 : 	m_iRELIGION_MIN_FAITH_FIRST_GREAT_PERSON = GC.getDefineINT("RELIGION_MIN_FAITH_FIRST_GREAT_PERSON");

	push	1
	push	OFFSET ??_C@_0CG@OKKNMCKG@RELIGION_MIN_FAITH_FIRST_GREAT_P@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7868], eax

; 6700 : 	m_iRELIGION_GAME_FAITH_DELTA_NEXT_PANTHEON = GC.getDefineINT("RELIGION_GAME_FAITH_DELTA_NEXT_PANTHEON");

	push	1
	push	OFFSET ??_C@_0CI@POMFFJMB@RELIGION_GAME_FAITH_DELTA_NEXT_P@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7872], eax

; 6701 : 	m_iRELIGION_FAITH_DELTA_NEXT_PROPHET = GC.getDefineINT("RELIGION_FAITH_DELTA_NEXT_PROPHET");

	push	1
	push	OFFSET ??_C@_0CC@MHONFOIF@RELIGION_FAITH_DELTA_NEXT_PROPHE@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7876], eax

; 6702 : 	m_iRELIGION_FAITH_DELTA_NEXT_GREAT_PERSON = GC.getDefineINT("RELIGION_FAITH_DELTA_NEXT_GREAT_PERSON");

	push	1
	push	OFFSET ??_C@_0CH@BGOAOAAC@RELIGION_FAITH_DELTA_NEXT_GREAT_@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7880], eax

; 6703 : 	m_iRELIGION_BASE_CHANCE_PROPHET_SPAWN = GC.getDefineINT("RELIGION_BASE_CHANCE_PROPHET_SPAWN");

	push	1
	push	OFFSET ??_C@_0CD@COCOCFDB@RELIGION_BASE_CHANCE_PROPHET_SPA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7884], eax

; 6704 : 	m_iRELIGION_ATHEISM_PRESSURE_PER_POP = GC.getDefineINT("RELIGION_ATHEISM_PRESSURE_PER_POP");

	push	1
	push	OFFSET ??_C@_0CC@NCEGLGPI@RELIGION_ATHEISM_PRESSURE_PER_PO@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7888], eax

; 6705 : 	m_iRELIGION_INITIAL_FOUNDING_CITY_PRESSURE = GC.getDefineINT("RELIGION_INITIAL_FOUNDING_CITY_PRESSURE");

	push	1
	push	OFFSET ??_C@_0CI@MNOPDPG@RELIGION_INITIAL_FOUNDING_CITY_P@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7892], eax

; 6706 : 	m_iRELIGION_PER_TURN_FOUNDING_CITY_PRESSURE = GC.getDefineINT("RELIGION_PER_TURN_FOUNDING_CITY_PRESSURE");

	push	1
	push	OFFSET ??_C@_0CJ@LPDIIAGI@RELIGION_PER_TURN_FOUNDING_CITY_@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7896], eax

; 6707 : 	m_iRELIGION_MISSIONARY_PRESSURE_MULTIPLIER = GC.getDefineINT("RELIGION_MISSIONARY_PRESSURE_MULTIPLIER");

	push	1
	push	OFFSET ??_C@_0CI@JPKIAKNB@RELIGION_MISSIONARY_PRESSURE_MUL@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7900], eax

; 6708 : 	m_iRELIGION_ADJACENT_CITY_DISTANCE = GC.getDefineINT("RELIGION_ADJACENT_CITY_DISTANCE");

	push	1
	push	OFFSET ??_C@_0CA@CLPPGEEO@RELIGION_ADJACENT_CITY_DISTANCE?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7904], eax

; 6709 : 	m_iRELIGION_DIPLO_HIT_INITIAL_CONVERT_FRIENDLY_CITY = GC.getDefineINT("RELIGION_DIPLO_HIT_INITIAL_CONVERT_FRIENDLY_CITY");

	push	1
	push	OFFSET ??_C@_0DB@KKMFAFIP@RELIGION_DIPLO_HIT_INITIAL_CONVE@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7908], eax

; 6710 : 	m_iRELIGION_DIPLO_HIT_RELIGIOUS_FLIP_FRIENDLY_CITY = GC.getDefineINT("RELIGION_DIPLO_HIT_RELIGIOUS_FLIP_FRIENDLY_CITY");

	push	1
	push	OFFSET ??_C@_0DA@LJMNDKMC@RELIGION_DIPLO_HIT_RELIGIOUS_FLI@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7912], eax

; 6711 : 	m_iRELIGION_DIPLO_HIT_CONVERT_HOLY_CITY = GC.getDefineINT("RELIGION_DIPLO_HIT_CONVERT_HOLY_CITY");

	push	1
	push	OFFSET ??_C@_0CF@BMMEGNPE@RELIGION_DIPLO_HIT_CONVERT_HOLY_@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7916], eax

; 6712 : 	m_iRELIGION_DIPLO_HIT_THRESHOLD = GC.getDefineINT("RELIGION_DIPLO_HIT_THRESHOLD");

	push	1
	push	OFFSET ??_C@_0BN@BEHHGHED@RELIGION_DIPLO_HIT_THRESHOLD?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7920], eax

; 6713 : 	m_iESPIONAGE_GATHERING_INTEL_COST_PERCENT = GC.getDefineINT("ESPIONAGE_GATHERING_INTEL_COST_PERCENT");

	push	1
	push	OFFSET ??_C@_0CH@PCGCEIKA@ESPIONAGE_GATHERING_INTEL_COST_P@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7924], eax

; 6714 : 	m_iESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT = GC.getDefineINT("ESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT");

	push	1
	push	OFFSET ??_C@_0DD@IHHPHPHE@ESPIONAGE_GATHERING_INTEL_RATE_B@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7928], eax

; 6715 : 	m_iESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT = GC.getDefineINT("ESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT");

	push	1
	push	OFFSET ??_C@_0CM@BPFMDNJN@ESPIONAGE_GATHERING_INTEL_RATE_B@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7932], eax

; 6716 : 	m_iESPIONAGE_TURNS_BETWEEN_CITY_STATE_ELECTIONS = GC.getDefineINT("ESPIONAGE_TURNS_BETWEEN_CITY_STATE_ELECTIONS");

	push	1
	push	OFFSET ??_C@_0CN@HMNGJMNK@ESPIONAGE_TURNS_BETWEEN_CITY_STA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7936], eax

; 6717 : 	m_iESPIONAGE_INFLUENCE_GAINED_FOR_RIGGED_ELECTION = GC.getDefineINT("ESPIONAGE_INFLUENCE_GAINED_FOR_RIGGED_ELECTION");

	push	1
	push	OFFSET ??_C@_0CP@DJOCGGCB@ESPIONAGE_INFLUENCE_GAINED_FOR_R@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7940], eax

; 6718 : 	m_iESPIONAGE_INFLUENCE_LOST_FOR_RIGGED_ELECTION = GC.getDefineINT("ESPIONAGE_INFLUENCE_LOST_FOR_RIGGED_ELECTION");

	push	1
	push	OFFSET ??_C@_0CN@LHFPPCKD@ESPIONAGE_INFLUENCE_LOST_FOR_RIG@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7944], eax

; 6719 : 	m_iESPIONAGE_SURVEILLANCE_SIGHT_RANGE = GC.getDefineINT("ESPIONAGE_SURVEILLANCE_SIGHT_RANGE");

	push	1
	push	OFFSET ??_C@_0CD@LHOAEEJP@ESPIONAGE_SURVEILLANCE_SIGHT_RAN@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7948], eax

; 6720 : 	m_iESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP = GC.getDefineINT("ESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP");

	push	1
	push	OFFSET ??_C@_0CM@CDJDBNFO@ESPIONAGE_COUP_OTHER_PLAYERS_INF@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+7952], eax

; 6721 : 	m_iPROMOTION_GOODY_HUT_PICKER = getDefineINT("PROMOTION_GOODY_HUT_PICKER");

	push	1
	push	OFFSET ??_C@_0BL@DKIMIFHP@PROMOTION_GOODY_HUT_PICKER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8340], eax

; 6722 : 	m_iIDEOLOGY_PERCENT_CLEAR_VICTORY_PREF = getDefineINT("IDEOLOGY_PERCENT_CLEAR_VICTORY_PREF");

	push	1
	push	OFFSET ??_C@_0CE@BAFHEOJE@IDEOLOGY_PERCENT_CLEAR_VICTORY_P@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8344], eax

; 6723 : 	m_iIDEOLOGY_SCORE_GRAND_STRATS = getDefineINT("IDEOLOGY_SCORE_GRAND_STRATS");

	push	1
	push	OFFSET ??_C@_0BM@HOLOODP@IDEOLOGY_SCORE_GRAND_STRATS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8348], eax

; 6724 : 	m_iIDEOLOGY_SCORE_HAPPINESS = getDefineINT("IDEOLOGY_SCORE_HAPPINESS");

	push	1
	push	OFFSET ??_C@_0BJ@CHFKOMLK@IDEOLOGY_SCORE_HAPPINESS?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8352], eax

; 6725 : 	m_iIDEOLOGY_SCORE_PER_FREE_TENET = getDefineINT("IDEOLOGY_SCORE_PER_FREE_TENET");

	push	1
	push	OFFSET ??_C@_0BO@PKOAKDAK@IDEOLOGY_SCORE_PER_FREE_TENET?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8356], eax

; 6726 : 	m_iIDEOLOGY_SCORE_HOSTILE = getDefineINT("IDEOLOGY_SCORE_HOSTILE");

	push	1
	push	OFFSET ??_C@_0BH@BHJBBLHN@IDEOLOGY_SCORE_HOSTILE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8360], eax

; 6727 : 	m_iIDEOLOGY_SCORE_GUARDED = getDefineINT("IDEOLOGY_SCORE_GUARDED");

	push	1
	push	OFFSET ??_C@_0BH@CIOBEOHC@IDEOLOGY_SCORE_GUARDED?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8364], eax

; 6728 : 	m_iIDEOLOGY_SCORE_AFRAID = getDefineINT("IDEOLOGY_SCORE_AFRAID");

	push	1
	push	OFFSET ??_C@_0BG@PKJLIP@IDEOLOGY_SCORE_AFRAID?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8368], eax

; 6729 : 	m_iIDEOLOGY_SCORE_FRIENDLY = getDefineINT("IDEOLOGY_SCORE_FRIENDLY");

	push	1
	push	OFFSET ??_C@_0BI@BJMHFICB@IDEOLOGY_SCORE_FRIENDLY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8372], eax

; 6730 : 	m_iPOLICY_BRANCH_FREEDOM = getDefineINT("POLICY_BRANCH_FREEDOM", false);

	push	0
	push	OFFSET ??_C@_0BG@ICDGHIK@POLICY_BRANCH_FREEDOM?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8376], eax

; 6731 : 	if (m_iPOLICY_BRANCH_FREEDOM == 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8376], 0
	jne	SHORT $LN3@cacheGloba

; 6732 : 	{
; 6733 : 		m_iPOLICY_BRANCH_FREEDOM = NO_POLICY_BRANCH_TYPE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8376], -1
$LN3@cacheGloba:

; 6734 : 	}
; 6735 : 	m_iPOLICY_BRANCH_AUTOCRACY = getDefineINT("POLICY_BRANCH_AUTOCRACY", false);

	push	0
	push	OFFSET ??_C@_0BI@FGGAJNOF@POLICY_BRANCH_AUTOCRACY?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8380], eax

; 6736 : 	if (m_iPOLICY_BRANCH_AUTOCRACY == 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8380], 0
	jne	SHORT $LN2@cacheGloba

; 6737 : 	{
; 6738 : 		m_iPOLICY_BRANCH_AUTOCRACY = NO_POLICY_BRANCH_TYPE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8380], -1
$LN2@cacheGloba:

; 6739 : 	}	
; 6740 : 	m_iPOLICY_BRANCH_ORDER = getDefineINT("POLICY_BRANCH_ORDER", false);

	push	0
	push	OFFSET ??_C@_0BE@DLGMMGNE@POLICY_BRANCH_ORDER?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineINT@CvGlobals@@IAEHPBD_N@Z	; CvGlobals::getDefineINT
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8384], eax

; 6741 : 	if (m_iPOLICY_BRANCH_ORDER == 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8384], 0
	jne	SHORT $LN1@cacheGloba

; 6742 : 	{
; 6743 : 		m_iPOLICY_BRANCH_ORDER = NO_POLICY_BRANCH_TYPE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8384], -1
$LN1@cacheGloba:

; 6744 : 	}	
; 6745 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?cacheGlobals@CvGlobals@@QAEXXZ ENDP			; CvGlobals::cacheGlobals
_TEXT	ENDS
PUBLIC	?getDefineValue@CvGlobals@@IAE_NPBDAAH_N@Z	; CvGlobals::getDefineValue
; Function compile flags: /Odtp
;	COMDAT ?getDefineINT@CvGlobals@@IAEHPBD_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iReturn$ = -4						; size = 4
_szName$ = 8						; size = 4
_bReportErrors$ = 12					; size = 1
?getDefineINT@CvGlobals@@IAEHPBD_N@Z PROC		; CvGlobals::getDefineINT, COMDAT
; _this$ = ecx

; 6749 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 6750 : 	int iReturn = 0;

	mov	DWORD PTR _iReturn$[ebp], 0

; 6751 : 	getDefineValue(szName, iReturn, bReportErrors);

	movzx	eax, BYTE PTR _bReportErrors$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iReturn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineValue@CvGlobals@@IAE_NPBDAAH_N@Z ; CvGlobals::getDefineValue

; 6752 : 	return iReturn;

	mov	eax, DWORD PTR _iReturn$[ebp]

; 6753 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?getDefineINT@CvGlobals@@IAEHPBD_N@Z ENDP		; CvGlobals::getDefineINT
_TEXT	ENDS
PUBLIC	?getDefineValue@CvGlobals@@IAE_NPBDAAM_N@Z	; CvGlobals::getDefineValue
; Function compile flags: /Odtp
;	COMDAT ?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fReturn$ = -4						; size = 4
_szName$ = 8						; size = 4
_bReportErrors$ = 12					; size = 1
?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z PROC		; CvGlobals::getDefineFLOAT, COMDAT
; _this$ = ecx

; 6756 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 6757 : 	float fReturn = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fReturn$[ebp], xmm0

; 6758 : 	getDefineValue(szName, fReturn, bReportErrors);

	movzx	eax, BYTE PTR _bReportErrors$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fReturn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineValue@CvGlobals@@IAE_NPBDAAM_N@Z ; CvGlobals::getDefineValue

; 6759 : 	return fReturn;

	fld	DWORD PTR _fReturn$[ebp]

; 6760 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?getDefineFLOAT@CvGlobals@@IAEMPBD_N@Z ENDP		; CvGlobals::getDefineFLOAT
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	?getDefineValue@CvGlobals@@IAE_NPBDAAVCvString@@_N@Z ; CvGlobals::getDefineValue
PUBLIC	__$ArrayPad$
PUBLIC	?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z ; CvGlobals::getDefineSTRING
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z$0
__ehfuncinfo$?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
xdata$x	ENDS
;	COMDAT ?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T260467 = -48						; size = 4
_strReturn$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szName$ = 12						; size = 4
_bReportErrors$ = 16					; size = 1
?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z PROC ; CvGlobals::getDefineSTRING, COMDAT
; _this$ = ecx

; 6763 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T260467[ebp], 0

; 6764 : 	CvString strReturn;

	lea	ecx, DWORD PTR _strReturn$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 6765 : 	getDefineValue(szName, strReturn, bReportErrors);

	movzx	eax, BYTE PTR _bReportErrors$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReturn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDefineValue@CvGlobals@@IAE_NPBDAAVCvString@@_N@Z ; CvGlobals::getDefineValue

; 6766 : 	return strReturn;

	lea	eax, DWORD PTR _strReturn$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T260467[ebp]
	or	ecx, 1
	mov	DWORD PTR $T260467[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strReturn$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 6767 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z$0:
	lea	ecx, DWORD PTR _strReturn$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z$1:
	mov	eax, DWORD PTR $T260467[ebp]
	and	eax, 1
	je	$LN5@getDefineS
	and	DWORD PTR $T260467[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN5@getDefineS:
	ret	0
__ehhandler$?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z ENDP ; CvGlobals::getDefineSTRING
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
EXTRN	__imp_?Reset@Results@Database@@QAE_NXZ:PROC
EXTRN	__imp_?GetInt@Results@Database@@QAEHH@Z:PROC
EXTRN	__imp_?Step@Results@Database@@QAE_NXZ:PROC
EXTRN	__imp_?Bind@Results@Database@@QAE_NHPBD_N@Z:PROC
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
;	COMDAT ?getDefineValue@CvGlobals@@IAE_NPBDAAH_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bSuccess$ = -1						; size = 1
_szName$ = 8						; size = 4
_iValue$ = 12						; size = 4
_bReportErrors$ = 16					; size = 1
?getDefineValue@CvGlobals@@IAE_NPBDAAH_N@Z PROC		; CvGlobals::getDefineValue, COMDAT
; _this$ = ecx

; 6779 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 6780 : 	bool bSuccess = false;

	mov	BYTE PTR _bSuccess$[ebp], 0

; 6781 : 	if(m_kGlobalDefinesLookup.Bind(1, szName))

	push	1
	mov	eax, DWORD PTR _szName$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBD_N@Z
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@getDefineV

; 6782 : 	{
; 6783 : 		if(m_kGlobalDefinesLookup.Step())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@getDefineV

; 6784 : 		{
; 6785 : 			iValue = m_kGlobalDefinesLookup.GetInt(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	ecx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [ecx], eax

; 6786 : 			bSuccess = true;

	mov	BYTE PTR _bSuccess$[ebp], 1
$LN3@getDefineV:

; 6787 : 		}
; 6788 : 	}
; 6789 : 
; 6790 : 	m_kGlobalDefinesLookup.Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 6791 : 
; 6792 : 	if(bReportErrors)
; 6793 : 	{
; 6794 : 		CvAssertFmt(bSuccess, "Integer Define Value not found for %s", szName);
; 6795 : 	}
; 6796 : 
; 6797 : 	return bSuccess;

	mov	al, BYTE PTR _bSuccess$[ebp]

; 6798 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getDefineValue@CvGlobals@@IAE_NPBDAAH_N@Z ENDP		; CvGlobals::getDefineValue
_TEXT	ENDS
EXTRN	__imp_?GetFloat@Results@Database@@QAEMH@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ?getDefineValue@CvGlobals@@IAE_NPBDAAM_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bSuccess$ = -1						; size = 1
_szName$ = 8						; size = 4
_fValue$ = 12						; size = 4
_bReportErrors$ = 16					; size = 1
?getDefineValue@CvGlobals@@IAE_NPBDAAM_N@Z PROC		; CvGlobals::getDefineValue, COMDAT
; _this$ = ecx

; 6801 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 6802 : 	bool bSuccess = false;

	mov	BYTE PTR _bSuccess$[ebp], 0

; 6803 : 	if(m_kGlobalDefinesLookup.Bind(1, szName))

	push	1
	mov	eax, DWORD PTR _szName$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBD_N@Z
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@getDefineV@2

; 6804 : 	{
; 6805 : 		if(m_kGlobalDefinesLookup.Step())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@getDefineV@2

; 6806 : 		{
; 6807 : 			fValue = m_kGlobalDefinesLookup.GetFloat(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMH@Z
	mov	eax, DWORD PTR _fValue$[ebp]
	fstp	DWORD PTR [eax]

; 6808 : 			bSuccess = true;

	mov	BYTE PTR _bSuccess$[ebp], 1
$LN2@getDefineV@2:

; 6809 : 		}
; 6810 : 	}
; 6811 : 
; 6812 : 	m_kGlobalDefinesLookup.Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 6813 : 
; 6814 : 	if(bReportErrors)
; 6815 : 	{
; 6816 : 		CvAssertFmt(bSuccess, "Float Define Value not found for %s", szName);
; 6817 : 	}
; 6818 : 
; 6819 : 	return bSuccess;

	mov	al, BYTE PTR _bSuccess$[ebp]

; 6820 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getDefineValue@CvGlobals@@IAE_NPBDAAM_N@Z ENDP		; CvGlobals::getDefineValue
_TEXT	ENDS
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
EXTRN	__imp_?GetText@Results@Database@@QAEPBDH@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ?getDefineValue@CvGlobals@@IAE_NPBDAAVCvString@@_N@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T260501 = -8						; size = 4
_bSuccess$ = -1						; size = 1
_szName$ = 8						; size = 4
_strValue$ = 12						; size = 4
_bReportErrors$ = 16					; size = 1
?getDefineValue@CvGlobals@@IAE_NPBDAAVCvString@@_N@Z PROC ; CvGlobals::getDefineValue, COMDAT
; _this$ = ecx

; 6847 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 6848 : 	bool bSuccess = false;

	mov	BYTE PTR _bSuccess$[ebp], 0

; 6849 : 	if(m_kGlobalDefinesLookup.Bind(1, szName))

	push	1
	mov	eax, DWORD PTR _szName$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBD_N@Z
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@getDefineV@3

; 6850 : 	{
; 6851 : 		if(m_kGlobalDefinesLookup.Step())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@getDefineV@3

; 6852 : 		{
; 6853 : 			strValue = m_kGlobalDefinesLookup.GetText(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDH@Z
	mov	DWORD PTR $T260501[ebp], eax
	cmp	DWORD PTR $T260501[ebp], 0
	je	SHORT $LN7@getDefineV@3
	mov	eax, DWORD PTR $T260501[ebp]
	push	eax
	mov	ecx, DWORD PTR _strValue$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN8@getDefineV@3
$LN7@getDefineV@3:
	mov	ecx, DWORD PTR _strValue$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN8@getDefineV@3:

; 6854 : 			bSuccess = true;

	mov	BYTE PTR _bSuccess$[ebp], 1
$LN3@getDefineV@3:

; 6855 : 		}
; 6856 : 	}
; 6857 : 
; 6858 : 	m_kGlobalDefinesLookup.Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 6859 : 
; 6860 : 	if(bReportErrors)
; 6861 : 	{
; 6862 : 		CvAssertFmt(bSuccess, "String Define Value not found for %s", szName);
; 6863 : 	}
; 6864 : 
; 6865 : 	return bSuccess;

	mov	al, BYTE PTR _bSuccess$[ebp]

; 6866 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getDefineValue@CvGlobals@@IAE_NPBDAAVCvString@@_N@Z ENDP ; CvGlobals::getDefineValue
_TEXT	ENDS
PUBLIC	?getNUM_YIELD_TYPES@CvGlobals@@QBEHXZ		; CvGlobals::getNUM_YIELD_TYPES
; Function compile flags: /Odtp
;	COMDAT ?getNUM_YIELD_TYPES@CvGlobals@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNUM_YIELD_TYPES@CvGlobals@@QBEHXZ PROC		; CvGlobals::getNUM_YIELD_TYPES, COMDAT
; _this$ = ecx

; 6869 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6870 : 	return NUM_YIELD_TYPES;

	mov	eax, 6

; 6871 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNUM_YIELD_TYPES@CvGlobals@@QBEHXZ ENDP		; CvGlobals::getNUM_YIELD_TYPES
_TEXT	ENDS
PUBLIC	?getNUM_CONTROL_TYPES@CvGlobals@@QBEHXZ		; CvGlobals::getNUM_CONTROL_TYPES
; Function compile flags: /Odtp
;	COMDAT ?getNUM_CONTROL_TYPES@CvGlobals@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNUM_CONTROL_TYPES@CvGlobals@@QBEHXZ PROC		; CvGlobals::getNUM_CONTROL_TYPES, COMDAT
; _this$ = ecx

; 6874 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6875 : 	return NUM_CONTROL_TYPES;

	mov	eax, 44					; 0000002cH

; 6876 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNUM_CONTROL_TYPES@CvGlobals@@QBEHXZ ENDP		; CvGlobals::getNUM_CONTROL_TYPES
_TEXT	ENDS
PUBLIC	??$deleteInfoArray@VCvEntityEventInfo@@@@YAXAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@@Z ; deleteInfoArray<CvEntityEventInfo>
PUBLIC	??_ECvString@@QAEPAXI@Z				; CvString::`vector deleting destructor'
PUBLIC	??$deleteInfoArray@VCvResourceInfo@@@@YAXAAV?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@@Z ; deleteInfoArray<CvResourceInfo>
PUBLIC	??$deleteInfoArray@VCvResourceClassInfo@@@@YAXAAV?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@@Z ; deleteInfoArray<CvResourceClassInfo>
PUBLIC	??$deleteInfoArray@VCvFeatureInfo@@@@YAXAAV?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@@Z ; deleteInfoArray<CvFeatureInfo>
PUBLIC	??$deleteInfoArray@VCvTerrainInfo@@@@YAXAAV?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@@Z ; deleteInfoArray<CvTerrainInfo>
PUBLIC	??$deleteInfoArray@VCvYieldInfo@@@@YAXAAV?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@@Z ; deleteInfoArray<CvYieldInfo>
PUBLIC	??$deleteInfoArray@VCvPlayerOptionInfo@@@@YAXAAV?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@@Z ; deleteInfoArray<CvPlayerOptionInfo>
PUBLIC	??$deleteInfoArray@VCvMPOptionInfo@@@@YAXAAV?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@@Z ; deleteInfoArray<CvMPOptionInfo>
PUBLIC	??$deleteInfoArray@VCvGameOptionInfo@@@@YAXAAV?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@@Z ; deleteInfoArray<CvGameOptionInfo>
PUBLIC	??$deleteInfoArray@VCvBaseInfo@@@@YAXAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@@Z ; deleteInfoArray<CvBaseInfo>
PUBLIC	??$deleteInfoArray@VCvAutomateInfo@@@@YAXAAV?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@@Z ; deleteInfoArray<CvAutomateInfo>
PUBLIC	??$deleteInfoArray@VCvCommandInfo@@@@YAXAAV?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@@Z ; deleteInfoArray<CvCommandInfo>
PUBLIC	??$deleteInfoArray@VCvControlInfo@@@@YAXAAV?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@@Z ; deleteInfoArray<CvControlInfo>
PUBLIC	??$deleteInfoArray@VCvMissionInfo@@@@YAXAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@@Z ; deleteInfoArray<CvMissionInfo>
PUBLIC	??$deleteInfoArray@VCvActionInfo@@@@YAXAAV?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@@Z ; deleteInfoArray<CvActionInfo>
PUBLIC	??$deleteInfoArray@VCvSpecialistInfo@@@@YAXAAV?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@@Z ; deleteInfoArray<CvSpecialistInfo>
PUBLIC	??$deleteInfoArray@VCvSpecialUnitInfo@@@@YAXAAV?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@@Z ; deleteInfoArray<CvSpecialUnitInfo>
PUBLIC	??$deleteInfoArray@VCvUnitClassInfo@@@@YAXAAV?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@@Z ; deleteInfoArray<CvUnitClassInfo>
PUBLIC	??$deleteInfoArray@VCvBuildInfo@@@@YAXAAV?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@@Z ; deleteInfoArray<CvBuildInfo>
PUBLIC	??$deleteInfoArray@VCvEraInfo@@@@YAXAAV?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@@Z ; deleteInfoArray<CvEraInfo>
PUBLIC	??$deleteInfoArray@VCvRouteInfo@@@@YAXAAV?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@@Z ; deleteInfoArray<CvRouteInfo>
PUBLIC	??$deleteInfoArray@VCvInterfaceModeInfo@@@@YAXAAV?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@@Z ; deleteInfoArray<CvInterfaceModeInfo>
PUBLIC	??$deleteInfoArray@VCvPlayerColorInfo@@@@YAXAAV?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@@Z ; deleteInfoArray<CvPlayerColorInfo>
PUBLIC	??$deleteInfoArray@VCvColorInfo@@@@YAXAAV?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@@Z ; deleteInfoArray<CvColorInfo>
PUBLIC	??$deleteInfoArray@VCvVoteInfo@@@@YAXAAV?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@@Z ; deleteInfoArray<CvVoteInfo>
PUBLIC	??$deleteInfoArray@VCvProcessInfo@@@@YAXAAV?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@@Z ; deleteInfoArray<CvProcessInfo>
PUBLIC	??$deleteInfoArray@VCvHurryInfo@@@@YAXAAV?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@@Z ; deleteInfoArray<CvHurryInfo>
PUBLIC	??$deleteInfoArray@VCvSmallAwardInfo@@@@YAXAAV?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@@Z ; deleteInfoArray<CvSmallAwardInfo>
PUBLIC	??$deleteInfoArray@VCvVictoryInfo@@@@YAXAAV?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@@Z ; deleteInfoArray<CvVictoryInfo>
PUBLIC	??$deleteInfoArray@VCvTurnTimerInfo@@@@YAXAAV?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@@Z ; deleteInfoArray<CvTurnTimerInfo>
PUBLIC	??$deleteInfoArray@VCvGameSpeedInfo@@@@YAXAAV?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@@Z ; deleteInfoArray<CvGameSpeedInfo>
PUBLIC	??$deleteInfoArray@VCvHandicapInfo@@@@YAXAAV?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@@Z ; deleteInfoArray<CvHandicapInfo>
PUBLIC	??$deleteInfoArray@VCvVoteSourceInfo@@@@YAXAAV?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@@Z ; deleteInfoArray<CvVoteSourceInfo>
PUBLIC	??$deleteInfoArray@VCvMinorCivInfo@@@@YAXAAV?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@@Z ; deleteInfoArray<CvMinorCivInfo>
PUBLIC	??$deleteInfoArray@VCvCivilizationInfo@@@@YAXAAV?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@@Z ; deleteInfoArray<CvCivilizationInfo>
PUBLIC	??$deleteInfoArray@VCvLeaderHeadInfo@@@@YAXAAV?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@@Z ; deleteInfoArray<CvLeaderHeadInfo>
PUBLIC	??$deleteInfoArray@VCvBuildingClassInfo@@@@YAXAAV?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@@Z ; deleteInfoArray<CvBuildingClassInfo>
PUBLIC	?deleteInfoArrays@CvGlobals@@QAEXXZ		; CvGlobals::deleteInfoArrays
; Function compile flags: /Odtp
;	COMDAT ?deleteInfoArrays@CvGlobals@@QAEXXZ
_TEXT	SEGMENT
tv181 = -20						; size = 4
_this$ = -16						; size = 4
$T260524 = -12						; size = 4
$T260520 = -8						; size = 4
$T260519 = -4						; size = 4
?deleteInfoArrays@CvGlobals@@QAEXXZ PROC		; CvGlobals::deleteInfoArrays, COMDAT
; _this$ = ecx

; 6879 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 6880 : 	deleteInfoArray(m_paBuildingClassInfo);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1316				; 00000524H
	push	eax
	call	??$deleteInfoArray@VCvBuildingClassInfo@@@@YAXAAV?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@@Z ; deleteInfoArray<CvBuildingClassInfo>
	add	esp, 4

; 6881 : 
; 6882 : 	deleteInfoArray(m_paLeaderHeadInfo);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1268				; 000004f4H
	push	ecx
	call	??$deleteInfoArray@VCvLeaderHeadInfo@@@@YAXAAV?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@@Z ; deleteInfoArray<CvLeaderHeadInfo>
	add	esp, 4

; 6883 : 	deleteInfoArray(m_paCivilizationInfo);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1228				; 000004ccH
	push	edx
	call	??$deleteInfoArray@VCvCivilizationInfo@@@@YAXAAV?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@@Z ; deleteInfoArray<CvCivilizationInfo>
	add	esp, 4

; 6884 : 	deleteInfoArray(m_paMinorCivInfo);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1252				; 000004e4H
	push	eax
	call	??$deleteInfoArray@VCvMinorCivInfo@@@@YAXAAV?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@@Z ; deleteInfoArray<CvMinorCivInfo>
	add	esp, 4

; 6885 : 
; 6886 : 	deleteInfoArray(m_paVoteSourceInfo);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1364				; 00000554H
	push	ecx
	call	??$deleteInfoArray@VCvVoteSourceInfo@@@@YAXAAV?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@@Z ; deleteInfoArray<CvVoteSourceInfo>
	add	esp, 4

; 6887 : 	deleteInfoArray(m_paHandicapInfo);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1180				; 0000049cH
	push	edx
	call	??$deleteInfoArray@VCvHandicapInfo@@@@YAXAAV?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@@Z ; deleteInfoArray<CvHandicapInfo>
	add	esp, 4

; 6888 : 	deleteInfoArray(m_paGameSpeedInfo);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1196				; 000004acH
	push	eax
	call	??$deleteInfoArray@VCvGameSpeedInfo@@@@YAXAAV?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@@Z ; deleteInfoArray<CvGameSpeedInfo>
	add	esp, 4

; 6889 : 	deleteInfoArray(m_paTurnTimerInfo);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1212				; 000004bcH
	push	ecx
	call	??$deleteInfoArray@VCvTurnTimerInfo@@@@YAXAAV?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@@Z ; deleteInfoArray<CvTurnTimerInfo>
	add	esp, 4

; 6890 : 	deleteInfoArray(m_paVictoryInfo);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1588				; 00000634H
	push	edx
	call	??$deleteInfoArray@VCvVictoryInfo@@@@YAXAAV?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@@Z ; deleteInfoArray<CvVictoryInfo>
	add	esp, 4

; 6891 : 	deleteInfoArray(m_paSmallAwardInfo);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1604				; 00000644H
	push	eax
	call	??$deleteInfoArray@VCvSmallAwardInfo@@@@YAXAAV?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@@Z ; deleteInfoArray<CvSmallAwardInfo>
	add	esp, 4

; 6892 : 	deleteInfoArray(m_paHurryInfo);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1572				; 00000624H
	push	ecx
	call	??$deleteInfoArray@VCvHurryInfo@@@@YAXAAV?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@@Z ; deleteInfoArray<CvHurryInfo>
	add	esp, 4

; 6893 : 	deleteInfoArray(m_paProcessInfo);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1284				; 00000504H
	push	edx
	call	??$deleteInfoArray@VCvProcessInfo@@@@YAXAAV?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@@Z ; deleteInfoArray<CvProcessInfo>
	add	esp, 4

; 6894 : 	deleteInfoArray(m_paVoteInfo);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1300				; 00000514H
	push	eax
	call	??$deleteInfoArray@VCvVoteInfo@@@@YAXAAV?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@@Z ; deleteInfoArray<CvVoteInfo>
	add	esp, 4

; 6895 : 
; 6896 : 	deleteInfoArray(m_paColorInfo);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1036				; 0000040cH
	push	ecx
	call	??$deleteInfoArray@VCvColorInfo@@@@YAXAAV?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@@Z ; deleteInfoArray<CvColorInfo>
	add	esp, 4

; 6897 : 	deleteInfoArray(m_paPlayerColorInfo);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1052				; 0000041cH
	push	edx
	call	??$deleteInfoArray@VCvPlayerColorInfo@@@@YAXAAV?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@@Z ; deleteInfoArray<CvPlayerColorInfo>
	add	esp, 4

; 6898 : 	deleteInfoArray(m_paInterfaceModeInfo);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 896				; 00000380H
	push	eax
	call	??$deleteInfoArray@VCvInterfaceModeInfo@@@@YAXAAV?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@@Z ; deleteInfoArray<CvInterfaceModeInfo>
	add	esp, 4

; 6899 : 
; 6900 : 	deleteInfoArray(m_paRouteInfo);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1100				; 0000044cH
	push	ecx
	call	??$deleteInfoArray@VCvRouteInfo@@@@YAXAAV?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@@Z ; deleteInfoArray<CvRouteInfo>
	add	esp, 4

; 6901 : 
; 6902 : 	deleteInfoArray(m_aEraInfo);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1556				; 00000614H
	push	edx
	call	??$deleteInfoArray@VCvEraInfo@@@@YAXAAV?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@@Z ; deleteInfoArray<CvEraInfo>
	add	esp, 4

; 6903 : 
; 6904 : 	deleteInfoArray(m_paBuildInfo);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1164				; 0000048cH
	push	eax
	call	??$deleteInfoArray@VCvBuildInfo@@@@YAXAAV?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@@Z ; deleteInfoArray<CvBuildInfo>
	add	esp, 4

; 6905 : 	deleteInfoArray(m_paUnitClassInfo);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1332				; 00000534H
	push	ecx
	call	??$deleteInfoArray@VCvUnitClassInfo@@@@YAXAAV?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@@Z ; deleteInfoArray<CvUnitClassInfo>
	add	esp, 4

; 6906 : 	deleteInfoArray(m_paSpecialUnitInfo);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1348				; 00000544H
	push	edx
	call	??$deleteInfoArray@VCvSpecialUnitInfo@@@@YAXAAV?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@@Z ; deleteInfoArray<CvSpecialUnitInfo>
	add	esp, 4

; 6907 : 	deleteInfoArray(m_paSpecialistInfo);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1460				; 000005b4H
	push	eax
	call	??$deleteInfoArray@VCvSpecialistInfo@@@@YAXAAV?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@@Z ; deleteInfoArray<CvSpecialistInfo>
	add	esp, 4

; 6908 : 	deleteInfoArray(m_paActionInfo);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1476				; 000005c4H
	push	ecx
	call	??$deleteInfoArray@VCvActionInfo@@@@YAXAAV?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@@Z ; deleteInfoArray<CvActionInfo>
	add	esp, 4

; 6909 : 	deleteInfoArray(m_paMissionInfo);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1492				; 000005d4H
	push	edx
	call	??$deleteInfoArray@VCvMissionInfo@@@@YAXAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@@Z ; deleteInfoArray<CvMissionInfo>
	add	esp, 4

; 6910 : 	deleteInfoArray(m_paControlInfo);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1508				; 000005e4H
	push	eax
	call	??$deleteInfoArray@VCvControlInfo@@@@YAXAAV?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@@Z ; deleteInfoArray<CvControlInfo>
	add	esp, 4

; 6911 : 	deleteInfoArray(m_paCommandInfo);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1524				; 000005f4H
	push	ecx
	call	??$deleteInfoArray@VCvCommandInfo@@@@YAXAAV?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@@Z ; deleteInfoArray<CvCommandInfo>
	add	esp, 4

; 6912 : 	deleteInfoArray(m_paAutomateInfo);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1540				; 00000604H
	push	edx
	call	??$deleteInfoArray@VCvAutomateInfo@@@@YAXAAV?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@@Z ; deleteInfoArray<CvAutomateInfo>
	add	esp, 4

; 6913 : 
; 6914 : 	deleteInfoArray(m_paUnitCombatClassInfo);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1380				; 00000564H
	push	eax
	call	??$deleteInfoArray@VCvBaseInfo@@@@YAXAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@@Z ; deleteInfoArray<CvBaseInfo>
	add	esp, 4

; 6915 : 	deleteInfoArray(m_paUnitAIInfos);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1396				; 00000574H
	push	ecx
	call	??$deleteInfoArray@VCvBaseInfo@@@@YAXAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@@Z ; deleteInfoArray<CvBaseInfo>
	add	esp, 4

; 6916 : 	deleteInfoArray(m_paGameOptionInfos);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1412				; 00000584H
	push	edx
	call	??$deleteInfoArray@VCvGameOptionInfo@@@@YAXAAV?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@@Z ; deleteInfoArray<CvGameOptionInfo>
	add	esp, 4

; 6917 : 	deleteInfoArray(m_paMPOptionInfos);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1428				; 00000594H
	push	eax
	call	??$deleteInfoArray@VCvMPOptionInfo@@@@YAXAAV?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@@Z ; deleteInfoArray<CvMPOptionInfo>
	add	esp, 4

; 6918 : 	deleteInfoArray(m_paPlayerOptionInfos);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1444				; 000005a4H
	push	ecx
	call	??$deleteInfoArray@VCvPlayerOptionInfo@@@@YAXAAV?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@@Z ; deleteInfoArray<CvPlayerOptionInfo>
	add	esp, 4

; 6919 : 
; 6920 : 	deleteInfoArray(m_paYieldInfo);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1084				; 0000043cH
	push	edx
	call	??$deleteInfoArray@VCvYieldInfo@@@@YAXAAV?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@@Z ; deleteInfoArray<CvYieldInfo>
	add	esp, 4

; 6921 : 	deleteInfoArray(m_paTerrainInfo);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1068				; 0000042cH
	push	eax
	call	??$deleteInfoArray@VCvTerrainInfo@@@@YAXAAV?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@@Z ; deleteInfoArray<CvTerrainInfo>
	add	esp, 4

; 6922 : 	deleteInfoArray(m_paFeatureInfo);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1116				; 0000045cH
	push	ecx
	call	??$deleteInfoArray@VCvFeatureInfo@@@@YAXAAV?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@@Z ; deleteInfoArray<CvFeatureInfo>
	add	esp, 4

; 6923 : 	deleteInfoArray(m_paResourceClassInfo);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1132				; 0000046cH
	push	edx
	call	??$deleteInfoArray@VCvResourceClassInfo@@@@YAXAAV?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@@Z ; deleteInfoArray<CvResourceClassInfo>
	add	esp, 4

; 6924 : 	deleteInfoArray(m_paResourceInfo);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1148				; 0000047cH
	push	eax
	call	??$deleteInfoArray@VCvResourceInfo@@@@YAXAAV?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@@Z ; deleteInfoArray<CvResourceInfo>
	add	esp, 4

; 6925 : 	deleteInfoArray(m_paUnitDomainInfo);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1636				; 00000664H
	push	ecx
	call	??$deleteInfoArray@VCvBaseInfo@@@@YAXAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@@Z ; deleteInfoArray<CvBaseInfo>
	add	esp, 4

; 6926 : 
; 6927 : 	SAFE_DELETE_ARRAY(GC.getFootstepAudioTags());

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getFootstepAudioTags@CvGlobals@@QAEAAPAVCvString@@XZ ; CvGlobals::getFootstepAudioTags
	mov	DWORD PTR $T260524[ebp], eax
	mov	edx, DWORD PTR $T260524[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T260520[ebp], eax
	mov	ecx, DWORD PTR $T260520[ebp]
	mov	DWORD PTR $T260519[ebp], ecx
	cmp	DWORD PTR $T260519[ebp], 0
	je	SHORT $LN5@deleteInfo
	push	3
	mov	ecx, DWORD PTR $T260519[ebp]
	call	??_ECvString@@QAEPAXI@Z
	mov	DWORD PTR tv181[ebp], eax
	jmp	SHORT $LN6@deleteInfo
$LN5@deleteInfo:
	mov	DWORD PTR tv181[ebp], 0
$LN6@deleteInfo:
	mov	edx, DWORD PTR $T260524[ebp]
	mov	DWORD PTR [edx], 0

; 6928 : 
; 6929 : 	deleteInfoArray(m_paEntityEventInfo);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1620				; 00000654H
	push	eax
	call	??$deleteInfoArray@VCvEntityEventInfo@@@@YAXAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@@Z ; deleteInfoArray<CvEntityEventInfo>
	add	esp, 4

; 6930 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?deleteInfoArrays@CvGlobals@@QAEXXZ ENDP		; CvGlobals::deleteInfoArrays
_TEXT	ENDS
PUBLIC	?GetInfoTypes@CvGlobals@@QBEABV?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@XZ ; CvGlobals::GetInfoTypes
; Function compile flags: /Odtp
;	COMDAT ?GetInfoTypes@CvGlobals@@QBEABV?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInfoTypes@CvGlobals@@QBEABV?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@XZ PROC ; CvGlobals::GetInfoTypes, COMDAT
; _this$ = ecx

; 6936 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6937 : 	return m_infosMap;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 980				; 000003d4H

; 6938 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInfoTypes@CvGlobals@@QBEABV?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@XZ ENDP ; CvGlobals::GetInfoTypes
_TEXT	ENDS
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
PUBLIC	??_C@_0BI@FGLLOAMG@Info?5type?5?$CFs?5not?5found?4?$AA@ ; `string'
PUBLIC	?lower_bound@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QBE?AV?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::lower_bound
PUBLIC	__$ArrayPad$
PUBLIC	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z	; CvGlobals::getInfoTypeForString
;	COMDAT ??_C@_0BI@FGLLOAMG@Info?5type?5?$CFs?5not?5found?4?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BI@FGLLOAMG@Info?5type?5?$CFs?5not?5found?4?$AA@ DB 'Info type %s '
	DB	'not found.', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z$1
__ehfuncinfo$?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
xdata$x	ENDS
;	COMDAT ?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z
_TEXT	SEGMENT
_this$ = -88						; size = 4
$T260542 = -84						; size = 4
$T260531 = -80						; size = 4
$T260530 = -76						; size = 28
_strError$232319 = -48					; size = 28
__$ArrayPad$ = -20					; size = 4
_it$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_szType$ = 8						; size = 4
_hideAssert$ = 12					; size = 1
?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z PROC	; CvGlobals::getInfoTypeForString, COMDAT
; _this$ = ecx

; 6941 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 6942 : 	if(!hideAssert)
; 6943 : 	{
; 6944 : 		CvAssertMsg(szType, "null info type string");
; 6945 : 	}
; 6946 : 
; 6947 : 	if(szType == NULL)

	cmp	DWORD PTR _szType$[ebp], 0
	jne	SHORT $LN3@getInfoTyp

; 6948 : 		return -1;

	or	eax, -1
	jmp	$LN5@getInfoTyp
$LN3@getInfoTyp:

; 6949 : 
; 6950 : 
; 6951 : 	InfosMap::const_iterator it = m_infosMap.find(szType);

	mov	ecx, DWORD PTR _szType$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T260530[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	edx, DWORD PTR $T260530[ebp]
	push	edx
	lea	eax, DWORD PTR _it$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 980				; 000003d4H
	call	?lower_bound@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QBE?AV?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::lower_bound
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T260530[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 6952 : 	if(it!=m_infosMap.end())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+988]
	mov	DWORD PTR $T260542[ebp], edx
	mov	eax, DWORD PTR $T260542[ebp]
	mov	DWORD PTR $T260531[ebp], eax
	mov	ecx, DWORD PTR _it$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T260531[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@getInfoTyp

; 6953 : 	{
; 6954 : 		return it->second;

	mov	edx, DWORD PTR _it$[ebp]
	mov	eax, DWORD PTR [edx+36]
	jmp	SHORT $LN5@getInfoTyp
$LN2@getInfoTyp:

; 6955 : 	}
; 6956 : 
; 6957 : 	if(!hideAssert)

	movzx	eax, BYTE PTR _hideAssert$[ebp]
	test	eax, eax
	jne	SHORT $LN1@getInfoTyp

; 6958 : 	{
; 6959 : 		//
; 6960 : 		// *** EFB: Need to restore this logging??? ***
; 6961 : 		//
; 6962 : 		CvString strError;

	lea	ecx, DWORD PTR _strError$232319[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 6963 : 		strError.Format("Info type %s not found.", szType);

	mov	ecx, DWORD PTR _szType$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BI@FGLLOAMG@Info?5type?5?$CFs?5not?5found?4?$AA@
	lea	edx, DWORD PTR _strError$232319[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 6964 : 		CvAssertMsg(strcmp(szType, "NONE")==0 || strcmp(szType, "")==0, strError.c_str());
; 6965 : //		gDLL->logMsg("xml.log", szError);
; 6966 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strError$232319[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@getInfoTyp:

; 6967 : 
; 6968 : 	return -1;

	or	eax, -1
$LN5@getInfoTyp:

; 6969 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z$0:
	lea	ecx, DWORD PTR $T260530[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z$1:
	lea	ecx, DWORD PTR _strError$232319[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ENDP	; CvGlobals::getInfoTypeForString
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_args$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2124				; 0000084cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);

	lea	eax, DWORD PTR _lpszFormat$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpszFormat$[ebp]
	push	edx
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp___vsnprintf:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
tv74 = -2096						; size = 4
$T260617 = -2092					; size = 4
$T260616 = -2088					; size = 4
$T260615 = -2084					; size = 4
_maxlen$95294 = -2080					; size = 4
_kMaxAttempts$ = -2076					; size = 4
_buf$ = -2072						; size = 2048
__$ArrayPad$ = -20					; size = 4
_len$ = -16						; size = 4
_attempts$ = -12					; size = 4
_success$ = -5						; size = 1
_pbuf$ = -4						; size = 4
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2096				; 00000830H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax

; 194  : 	int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 195  : 	int attempts = 0;

	mov	DWORD PTR _attempts$[ebp], 0

; 196  : 	bool success = false;

	mov	BYTE PTR _success$[ebp], 0

; 197  : 	const int kMaxAttempts = 40;

	mov	DWORD PTR _kMaxAttempts$[ebp], 40	; 00000028H
$LN10@formatv:

; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;

	mov	ecx, DWORD PTR _attempts$[ebp]
	shl	ecx, 11					; 0000000bH
	add	ecx, 2047				; 000007ffH
	mov	DWORD PTR _maxlen$95294[ebp], ecx

; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxlen$95294[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax

; 203  : 		attempts++;

	mov	eax, DWORD PTR _attempts$[ebp]
	add	eax, 1
	mov	DWORD PTR _attempts$[ebp], eax

; 204  : 		success = (len>=0 && len<=maxlen);

	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN13@formatv
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _maxlen$95294[ebp]
	jg	SHORT $LN13@formatv
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN14@formatv
$LN13@formatv:
	mov	DWORD PTR tv74[ebp], 0
$LN14@formatv:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _success$[ebp], dl

; 205  : 		if (!success)

	movzx	eax, BYTE PTR _success$[ebp]
	test	eax, eax
	jne	SHORT $LN9@formatv

; 206  : 		{
; 207  : 			if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T260615[ebp], eax
	mov	ecx, DWORD PTR $T260615[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	mov	edx, DWORD PTR _attempts$[ebp]
	shl	edx, 11					; 0000000bH
	add	edx, 2048				; 00000800H
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T260616[ebp], eax
	mov	eax, DWORD PTR $T260616[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax
$LN9@formatv:

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	movzx	ecx, BYTE PTR _success$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@formatv
	cmp	DWORD PTR _attempts$[ebp], 40		; 00000028H
	jl	$LN10@formatv
$LN4@formatv:

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)

	movzx	edx, BYTE PTR _success$[ebp]
	test	edx, edx
	je	SHORT $LN3@formatv

; 220  : 		out = pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 221  : 	else

	jmp	SHORT $LN2@formatv
$LN3@formatv:

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN2@formatv:

; 223  : 
; 224  : 	if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@formatv

; 225  : 		delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T260617[ebp], eax
	mov	ecx, DWORD PTR $T260617[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@formatv:

; 226  : 
; 227  : 	return success;

	mov	al, BYTE PTR _success$[ebp]

; 228  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
PUBLIC	??A?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAEAAHABI@Z ; std::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >::operator[]
PUBLIC	??A?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAEAAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stdext::hash_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::operator[]
PUBLIC	?setInfoTypeFromString@CvGlobals@@QAEXPBDH@Z	; CvGlobals::setInfoTypeFromString
EXTRN	?Calc@FCRC@@QBEKPBXHK@Z:PROC			; FCRC::Calc
EXTRN	?g_CRC32@@3VFCRC@@A:BYTE			; g_CRC32
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$?setInfoTypeFromString@CvGlobals@@QAEXPBDH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setInfoTypeFromString@CvGlobals@@QAEXPBDH@Z$0
__ehfuncinfo$?setInfoTypeFromString@CvGlobals@@QAEXPBDH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?setInfoTypeFromString@CvGlobals@@QAEXPBDH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
xdata$x	ENDS
;	COMDAT ?setInfoTypeFromString@CvGlobals@@QAEXPBDH@Z
_TEXT	SEGMENT
tv90 = -220						; size = 4
tv88 = -216						; size = 4
tv321 = -209						; size = 1
tv279 = -208						; size = 4
tv326 = -204						; size = 4
_this$ = -200						; size = 4
$T260620 = -44						; size = 28
_uiHash$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_szType$ = 8						; size = 4
_idx$ = 12						; size = 4
?setInfoTypeFromString@CvGlobals@@QAEXPBDH@Z PROC	; CvGlobals::setInfoTypeFromString, COMDAT
; _this$ = ecx

; 6972 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?setInfoTypeFromString@CvGlobals@@QAEXPBDH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 208				; 000000d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 6973 : 	CvAssertMsg(szType, "null info type string");
; 6974 : 	uint uiHash = FString::Hash(szType);

	cmp	DWORD PTR _szType$[ebp], 0
	je	SHORT $LN8@setInfoTyp
	mov	eax, DWORD PTR _szType$[ebp]
	mov	DWORD PTR tv326[ebp], eax
	mov	ecx, DWORD PTR tv326[ebp]
	add	ecx, 1
	mov	DWORD PTR tv279[ebp], ecx
$LL150@setInfoTyp:
	mov	edx, DWORD PTR tv326[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv321[ebp], al
	add	DWORD PTR tv326[ebp], 1
	cmp	BYTE PTR tv321[ebp], 0
	jne	SHORT $LL150@setInfoTyp
	mov	ecx, DWORD PTR tv326[ebp]
	sub	ecx, DWORD PTR tv279[ebp]
	mov	DWORD PTR tv88[ebp], ecx
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv90[ebp], edx
	jmp	SHORT $LN4@setInfoTyp
$LN8@setInfoTyp:
	mov	DWORD PTR tv90[ebp], 0
$LN4@setInfoTyp:
	push	-1
	mov	eax, DWORD PTR tv90[ebp]
	push	eax
	mov	ecx, DWORD PTR _szType$[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_CRC32@@3VFCRC@@A		; g_CRC32
	call	?Calc@FCRC@@QBEKPBXHK@Z			; FCRC::Calc
	mov	DWORD PTR _uiHash$[ebp], eax

; 6975 : #ifdef _DEBUG
; 6976 : 	InfosMap::const_iterator it = m_infosMap.find(szType);
; 6977 : 	int iExisting = (it!=m_infosMap.end()) ? it->second : -1;
; 6978 : 	CvAssertMsg(iExisting==-1 || iExisting==idx || strcmp(szType ? szType : "", "ERROR")==0, CvString::format("xml info type entry %s already exists", szType).c_str());
; 6979 : 
; 6980 : 	InfosHashMap::const_iterator ith = m_infosHashMap.find(uiHash);
; 6981 : 	iExisting = (ith!=m_infosHashMap.end()) ? ith->second : -1;
; 6982 : 	CvAssertMsg(iExisting==-1 || iExisting==idx || strcmp(szType ? szType : "", "ERROR")==0, CvString::format("xml info type entry %s already exists", szType).c_str());
; 6983 : #endif
; 6984 : 	m_infosMap[szType] = idx;

	mov	edx, DWORD PTR _szType$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T260620[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T260620[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 980				; 000003d4H
	call	??A?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAEAAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stdext::hash_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::operator[]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T260620[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 6985 : 	m_infosHashMap[uiHash] = idx;

	lea	edx, DWORD PTR _uiHash$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	call	??A?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAEAAHABI@Z ; std::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >::operator[]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [eax], ecx

; 6986 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setInfoTypeFromString@CvGlobals@@QAEXPBDH@Z$0:
	lea	ecx, DWORD PTR $T260620[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?setInfoTypeFromString@CvGlobals@@QAEXPBDH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-212]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?setInfoTypeFromString@CvGlobals@@QAEXPBDH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?setInfoTypeFromString@CvGlobals@@QAEXPBDH@Z ENDP	; CvGlobals::setInfoTypeFromString
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::clear
PUBLIC	?_Init@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAEXI@Z ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Init
PUBLIC	?clear@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXXZ ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::clear
PUBLIC	?infoTypeFromStringReset@CvGlobals@@QAEXXZ	; CvGlobals::infoTypeFromStringReset
; Function compile flags: /Odtp
;	COMDAT ?infoTypeFromStringReset@CvGlobals@@QAEXXZ
_TEXT	SEGMENT
_this$ = -120						; size = 4
$T261223 = -108						; size = 4
?infoTypeFromStringReset@CvGlobals@@QAEXXZ PROC		; CvGlobals::infoTypeFromStringReset, COMDAT
; _this$ = ecx

; 6989 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	mov	DWORD PTR _this$[ebp], ecx

; 6990 : 	m_infosMap.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 980				; 000003d4H
	mov	DWORD PTR $T261223[ebp], eax
	mov	ecx, DWORD PTR $T261223[ebp]
	add	ecx, 4
	call	?clear@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXXZ ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::clear
	push	8
	mov	ecx, DWORD PTR $T261223[ebp]
	call	?_Init@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAEXI@Z ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Init

; 6991 : 	m_infosHashMap.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	call	?clear@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::clear

; 6992 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?infoTypeFromStringReset@CvGlobals@@QAEXXZ ENDP		; CvGlobals::infoTypeFromStringReset
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QBE?AVconst_iterator@12@ABI@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::find
PUBLIC	?getInfoTypeForHash@CvGlobals@@QBEHI_N@Z	; CvGlobals::getInfoTypeForHash
; Function compile flags: /Odtp
;	COMDAT ?getInfoTypeForHash@CvGlobals@@QBEHI_N@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T261342 = -44						; size = 4
$T261281 = -8						; size = 4
_it$ = -4						; size = 4
_uiHash$ = 8						; size = 4
_hideAssert$ = 12					; size = 1
?getInfoTypeForHash@CvGlobals@@QBEHI_N@Z PROC		; CvGlobals::getInfoTypeForHash, COMDAT
; _this$ = ecx

; 6996 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 6997 : 
; 6998 : 	InfosHashMap::const_iterator it = m_infosHashMap.find(uiHash);

	lea	eax, DWORD PTR _uiHash$[ebp]
	push	eax
	lea	ecx, DWORD PTR _it$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	call	?find@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QBE?AVconst_iterator@12@ABI@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::find

; 6999 : 	if(it!=m_infosHashMap.end())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1028]
	mov	DWORD PTR $T261342[ebp], eax
	mov	ecx, DWORD PTR $T261342[ebp]
	mov	DWORD PTR $T261281[ebp], ecx
	mov	edx, DWORD PTR _it$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T261281[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@getInfoTyp@2

; 7000 : 	{
; 7001 : 		return it->second;

	mov	eax, DWORD PTR _it$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN3@getInfoTyp@2
$LN1@getInfoTyp@2:

; 7002 : 	}
; 7003 : 
; 7004 : 	if(!hideAssert)
; 7005 : 	{
; 7006 : 		CvAssertMsg(uiHash==0, "Could not find resource hash");
; 7007 : 	}
; 7008 : 
; 7009 : 	return -1;

	or	eax, -1
$LN3@getInfoTyp@2:

; 7010 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?getInfoTypeForHash@CvGlobals@@QBEHI_N@Z ENDP		; CvGlobals::getInfoTypeForHash
_TEXT	ENDS
PUBLIC	?getNumDirections@CvGlobals@@QBEHXZ		; CvGlobals::getNumDirections
; Function compile flags: /Odtp
;	COMDAT ?getNumDirections@CvGlobals@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumDirections@CvGlobals@@QBEHXZ PROC		; CvGlobals::getNumDirections, COMDAT
; _this$ = ecx

; 7013 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7014 : 	return NUM_DIRECTION_TYPES;

	mov	eax, 6

; 7015 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumDirections@CvGlobals@@QBEHXZ ENDP		; CvGlobals::getNumDirections
_TEXT	ENDS
PUBLIC	?getNumGameOptions@CvGlobals@@QBEHXZ		; CvGlobals::getNumGameOptions
; Function compile flags: /Odtp
;	COMDAT ?getNumGameOptions@CvGlobals@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumGameOptions@CvGlobals@@QBEHXZ PROC		; CvGlobals::getNumGameOptions, COMDAT
; _this$ = ecx

; 7017 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7018 : 	return NUM_GAMEOPTION_TYPES;

	mov	eax, 22					; 00000016H

; 7019 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumGameOptions@CvGlobals@@QBEHXZ ENDP		; CvGlobals::getNumGameOptions
_TEXT	ENDS
PUBLIC	?getNumMPOptions@CvGlobals@@QBEHXZ		; CvGlobals::getNumMPOptions
; Function compile flags: /Odtp
;	COMDAT ?getNumMPOptions@CvGlobals@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumMPOptions@CvGlobals@@QBEHXZ PROC			; CvGlobals::getNumMPOptions, COMDAT
; _this$ = ecx

; 7021 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7022 : 	return NUM_MPOPTION_TYPES;

	mov	eax, 4

; 7023 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumMPOptions@CvGlobals@@QBEHXZ ENDP			; CvGlobals::getNumMPOptions
_TEXT	ENDS
PUBLIC	?getNumSpecialOptions@CvGlobals@@QBEHXZ		; CvGlobals::getNumSpecialOptions
; Function compile flags: /Odtp
;	COMDAT ?getNumSpecialOptions@CvGlobals@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumSpecialOptions@CvGlobals@@QBEHXZ PROC		; CvGlobals::getNumSpecialOptions, COMDAT
; _this$ = ecx

; 7025 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7026 : 	return NUM_SPECIALOPTION_TYPES;

	mov	eax, 1

; 7027 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumSpecialOptions@CvGlobals@@QBEHXZ ENDP		; CvGlobals::getNumSpecialOptions
_TEXT	ENDS
PUBLIC	?getNumCommandInfos@CvGlobals@@QBEHXZ		; CvGlobals::getNumCommandInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumCommandInfos@CvGlobals@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumCommandInfos@CvGlobals@@QBEHXZ PROC		; CvGlobals::getNumCommandInfos, COMDAT
; _this$ = ecx

; 7029 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7030 : 	return NUM_COMMAND_TYPES;

	mov	eax, 10					; 0000000aH

; 7031 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumCommandInfos@CvGlobals@@QBEHXZ ENDP		; CvGlobals::getNumCommandInfos
_TEXT	ENDS
PUBLIC	?getNumControlInfos@CvGlobals@@QBEHXZ		; CvGlobals::getNumControlInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumControlInfos@CvGlobals@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumControlInfos@CvGlobals@@QBEHXZ PROC		; CvGlobals::getNumControlInfos, COMDAT
; _this$ = ecx

; 7033 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7034 : 	return NUM_CONTROL_TYPES;

	mov	eax, 44					; 0000002cH

; 7035 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumControlInfos@CvGlobals@@QBEHXZ ENDP		; CvGlobals::getNumControlInfos
_TEXT	ENDS
PUBLIC	?getNumPlayerOptionInfos@CvGlobals@@QBEHXZ	; CvGlobals::getNumPlayerOptionInfos
; Function compile flags: /Odtp
;	COMDAT ?getNumPlayerOptionInfos@CvGlobals@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T261387 = -4						; size = 4
?getNumPlayerOptionInfos@CvGlobals@@QBEHXZ PROC		; CvGlobals::getNumPlayerOptionInfos, COMDAT
; _this$ = ecx

; 7037 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 7038 : 	return m_paPlayerOptionInfos.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1444				; 000005a4H
	mov	DWORD PTR $T261387[ebp], eax
	mov	ecx, DWORD PTR $T261387[ebp]
	mov	edx, DWORD PTR $T261387[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 7039 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumPlayerOptionInfos@CvGlobals@@QBEHXZ ENDP		; CvGlobals::getNumPlayerOptionInfos
_TEXT	ENDS
PUBLIC	?SetGameDatabase@CvGlobals@@QAEXPAVConnection@Database@@@Z ; CvGlobals::SetGameDatabase
; Function compile flags: /Odtp
;	COMDAT ?SetGameDatabase@CvGlobals@@QAEXPAVConnection@Database@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pGameDatabase$ = 8					; size = 4
?SetGameDatabase@CvGlobals@@QAEXPAVConnection@Database@@@Z PROC ; CvGlobals::SetGameDatabase, COMDAT
; _this$ = ecx

; 7044 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7045 : 	if(m_pGameDatabase != pGameDatabase)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+912]
	cmp	ecx, DWORD PTR _pGameDatabase$[ebp]
	je	SHORT $LN3@SetGameDat

; 7046 : 	{
; 7047 : 		if(m_pGameDatabase)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+912], 0
	je	SHORT $LN1@SetGameDat

; 7048 : 			m_kGlobalDefinesLookup.Release();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	call	DWORD PTR __imp_?Release@Results@Database@@QAEXXZ
$LN1@SetGameDat:

; 7049 : 
; 7050 : 		m_pGameDatabase = pGameDatabase;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pGameDatabase$[ebp]
	mov	DWORD PTR [eax+912], ecx
$LN3@SetGameDat:

; 7051 : 	}
; 7052 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetGameDatabase@CvGlobals@@QAEXPAVConnection@Database@@@Z ENDP ; CvGlobals::SetGameDatabase
_TEXT	ENDS
PUBLIC	?IsGraphicsInitialized@CvGlobals@@QBE_NXZ	; CvGlobals::IsGraphicsInitialized
; Function compile flags: /Odtp
;	COMDAT ?IsGraphicsInitialized@CvGlobals@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGraphicsInitialized@CvGlobals@@QBE_NXZ PROC		; CvGlobals::IsGraphicsInitialized, COMDAT
; _this$ = ecx

; 7056 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7057 : 	return m_bGraphicsInitialized;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]

; 7058 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsGraphicsInitialized@CvGlobals@@QBE_NXZ ENDP		; CvGlobals::IsGraphicsInitialized
_TEXT	ENDS
PUBLIC	?SetGraphicsInitialized@CvGlobals@@QAEX_N@Z	; CvGlobals::SetGraphicsInitialized
; Function compile flags: /Odtp
;	COMDAT ?SetGraphicsInitialized@CvGlobals@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bVal$ = 8						; size = 1
?SetGraphicsInitialized@CvGlobals@@QAEX_N@Z PROC	; CvGlobals::SetGraphicsInitialized, COMDAT
; _this$ = ecx

; 7060 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7061 : 	m_bGraphicsInitialized = bVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bVal$[ebp]
	mov	BYTE PTR [eax+4], cl

; 7062 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetGraphicsInitialized@CvGlobals@@QAEX_N@Z ENDP	; CvGlobals::SetGraphicsInitialized
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setPathFinder@CvGlobals@@QAEXPAVCvTwoLayerPathFinder@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pVal$ = 8						; size = 4
?setPathFinder@CvGlobals@@QAEXPAVCvTwoLayerPathFinder@@@Z PROC ; CvGlobals::setPathFinder, COMDAT
; _this$ = ecx

; 7064 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7065 : 	m_pathFinder = pVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVal$[ebp]
	mov	DWORD PTR [eax+56], ecx

; 7066 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setPathFinder@CvGlobals@@QAEXPAVCvTwoLayerPathFinder@@@Z ENDP ; CvGlobals::setPathFinder
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setInterfacePathFinder@CvGlobals@@QAEXPAVCvTwoLayerPathFinder@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pVal$ = 8						; size = 4
?setInterfacePathFinder@CvGlobals@@QAEXPAVCvTwoLayerPathFinder@@@Z PROC ; CvGlobals::setInterfacePathFinder, COMDAT
; _this$ = ecx

; 7068 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7069 : 	m_interfacePathFinder = pVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVal$[ebp]
	mov	DWORD PTR [eax+60], ecx

; 7070 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setInterfacePathFinder@CvGlobals@@QAEXPAVCvTwoLayerPathFinder@@@Z ENDP ; CvGlobals::setInterfacePathFinder
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setIgnoreUnitsPathFinder@CvGlobals@@QAEXPAVCvIgnoreUnitsPathFinder@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pVal$ = 8						; size = 4
?setIgnoreUnitsPathFinder@CvGlobals@@QAEXPAVCvIgnoreUnitsPathFinder@@@Z PROC ; CvGlobals::setIgnoreUnitsPathFinder, COMDAT
; _this$ = ecx

; 7072 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7073 : 	m_ignoreUnitsPathFinder = pVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVal$[ebp]
	mov	DWORD PTR [eax+64], ecx

; 7074 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setIgnoreUnitsPathFinder@CvGlobals@@QAEXPAVCvIgnoreUnitsPathFinder@@@Z ENDP ; CvGlobals::setIgnoreUnitsPathFinder
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setStepFinder@CvGlobals@@QAEXPAVCvStepPathFinder@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pVal$ = 8						; size = 4
?setStepFinder@CvGlobals@@QAEXPAVCvStepPathFinder@@@Z PROC ; CvGlobals::setStepFinder, COMDAT
; _this$ = ecx

; 7076 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7077 : 	m_stepFinder = pVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVal$[ebp]
	mov	DWORD PTR [eax+68], ecx

; 7078 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setStepFinder@CvGlobals@@QAEXPAVCvStepPathFinder@@@Z ENDP ; CvGlobals::setStepFinder
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setRouteFinder@CvGlobals@@QAEXPAVCvAStar@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pVal$ = 8						; size = 4
?setRouteFinder@CvGlobals@@QAEXPAVCvAStar@@@Z PROC	; CvGlobals::setRouteFinder, COMDAT
; _this$ = ecx

; 7080 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7081 : 	m_routeFinder = pVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVal$[ebp]
	mov	DWORD PTR [eax+72], ecx

; 7082 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setRouteFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ENDP	; CvGlobals::setRouteFinder
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetWaterRouteFinder@CvGlobals@@QAEXPAVCvAStar@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pVal$ = 8						; size = 4
?SetWaterRouteFinder@CvGlobals@@QAEXPAVCvAStar@@@Z PROC	; CvGlobals::SetWaterRouteFinder, COMDAT
; _this$ = ecx

; 7084 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7085 : 	m_waterRouteFinder = pVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVal$[ebp]
	mov	DWORD PTR [eax+76], ecx

; 7086 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetWaterRouteFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ENDP	; CvGlobals::SetWaterRouteFinder
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setAreaFinder@CvGlobals@@QAEXPAVCvAStar@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pVal$ = 8						; size = 4
?setAreaFinder@CvGlobals@@QAEXPAVCvAStar@@@Z PROC	; CvGlobals::setAreaFinder, COMDAT
; _this$ = ecx

; 7088 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7089 : 	m_areaFinder = pVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVal$[ebp]
	mov	DWORD PTR [eax+84], ecx

; 7090 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setAreaFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ENDP	; CvGlobals::setAreaFinder
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setInfluenceFinder@CvGlobals@@QAEXPAVCvAStar@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pVal$ = 8						; size = 4
?setInfluenceFinder@CvGlobals@@QAEXPAVCvAStar@@@Z PROC	; CvGlobals::setInfluenceFinder, COMDAT
; _this$ = ecx

; 7092 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7093 : 	m_influenceFinder = pVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVal$[ebp]
	mov	DWORD PTR [eax+88], ecx

; 7094 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setInfluenceFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ENDP	; CvGlobals::setInfluenceFinder
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetBuildRouteFinder@CvGlobals@@QAEXPAVCvAStar@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pVal$ = 8						; size = 4
?SetBuildRouteFinder@CvGlobals@@QAEXPAVCvAStar@@@Z PROC	; CvGlobals::SetBuildRouteFinder, COMDAT
; _this$ = ecx

; 7096 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7097 : 	m_buildRouteFinder = pVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVal$[ebp]
	mov	DWORD PTR [eax+92], ecx

; 7098 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetBuildRouteFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ENDP	; CvGlobals::SetBuildRouteFinder
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetInternationalTradeRouteLandFinder@CvGlobals@@QAEXPAVCvAStar@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pVal$ = 8						; size = 4
?SetInternationalTradeRouteLandFinder@CvGlobals@@QAEXPAVCvAStar@@@Z PROC ; CvGlobals::SetInternationalTradeRouteLandFinder, COMDAT
; _this$ = ecx

; 7100 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7101 : 	m_internationalTradeRouteLandFinder = pVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVal$[ebp]
	mov	DWORD PTR [eax+96], ecx

; 7102 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetInternationalTradeRouteLandFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ENDP ; CvGlobals::SetInternationalTradeRouteLandFinder
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetInternationalTradeRouteWaterFinder@CvGlobals@@QAEXPAVCvAStar@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pVal$ = 8						; size = 4
?SetInternationalTradeRouteWaterFinder@CvGlobals@@QAEXPAVCvAStar@@@Z PROC ; CvGlobals::SetInternationalTradeRouteWaterFinder, COMDAT
; _this$ = ecx

; 7104 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7105 : 	m_internationalTradeRouteWaterFinder = pVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVal$[ebp]
	mov	DWORD PTR [eax+100], ecx

; 7106 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetInternationalTradeRouteWaterFinder@CvGlobals@@QAEXPAVCvAStar@@@Z ENDP ; CvGlobals::SetInternationalTradeRouteWaterFinder
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetTacticalAnalysisMapFinder@CvGlobals@@QAEXPAVCvTwoLayerPathFinder@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pVal$ = 8						; size = 4
?SetTacticalAnalysisMapFinder@CvGlobals@@QAEXPAVCvTwoLayerPathFinder@@@Z PROC ; CvGlobals::SetTacticalAnalysisMapFinder, COMDAT
; _this$ = ecx

; 7108 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7109 : 	m_tacticalAnalysisMapFinder = pVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVal$[ebp]
	mov	DWORD PTR [eax+104], ecx

; 7110 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetTacticalAnalysisMapFinder@CvGlobals@@QAEXPAVCvTwoLayerPathFinder@@@Z ENDP ; CvGlobals::SetTacticalAnalysisMapFinder
_TEXT	ENDS
PUBLIC	?setOutOfSyncDebuggingEnabled@CvGlobals@@QAEX_N@Z ; CvGlobals::setOutOfSyncDebuggingEnabled
EXTRN	?EnableCallStacks@FAutoArchive@@SAX_N@Z:PROC	; FAutoArchive::EnableCallStacks
; Function compile flags: /Odtp
;	COMDAT ?setOutOfSyncDebuggingEnabled@CvGlobals@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_isEnabled$ = 8						; size = 1
?setOutOfSyncDebuggingEnabled@CvGlobals@@QAEX_N@Z PROC	; CvGlobals::setOutOfSyncDebuggingEnabled, COMDAT
; _this$ = ecx

; 7119 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7120 : 	m_bOutOfSyncDebuggingEnabled = isEnabled;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _isEnabled$[ebp]
	mov	BYTE PTR [eax+23], cl

; 7121 : 	FAutoArchive::EnableCallStacks(isEnabled);

	movzx	edx, BYTE PTR _isEnabled$[ebp]
	push	edx
	call	?EnableCallStacks@FAutoArchive@@SAX_N@Z	; FAutoArchive::EnableCallStacks
	add	esp, 4

; 7122 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setOutOfSyncDebuggingEnabled@CvGlobals@@QAEX_N@Z ENDP	; CvGlobals::setOutOfSyncDebuggingEnabled
_TEXT	ENDS
PUBLIC	?getOutOfSyncDebuggingEnabled@CvGlobals@@QBE_NXZ ; CvGlobals::getOutOfSyncDebuggingEnabled
; Function compile flags: /Odtp
;	COMDAT ?getOutOfSyncDebuggingEnabled@CvGlobals@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getOutOfSyncDebuggingEnabled@CvGlobals@@QBE_NXZ PROC	; CvGlobals::getOutOfSyncDebuggingEnabled, COMDAT
; _this$ = ecx

; 7125 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7126 : 	return m_bOutOfSyncDebuggingEnabled;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+23]

; 7127 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getOutOfSyncDebuggingEnabled@CvGlobals@@QBE_NXZ ENDP	; CvGlobals::getOutOfSyncDebuggingEnabled
_TEXT	ENDS
PUBLIC	??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@XZ ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>
PUBLIC	?_Insert@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAE?AU?$pair@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@_N@std@@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@4@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@4@@Z ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Insert
PUBLIC	?lower_bound@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE?AV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::lower_bound
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__unwindtable$??A?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAEAAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAEAAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??A?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAEAAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAEAAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\hash_map
xdata$x	ENDS
;	COMDAT ??A?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAEAAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -132						; size = 4
$T261656 = -128						; size = 4
$T261630 = -124						; size = 4
$T261647 = -120						; size = 4
$T261596 = -116						; size = 4
$T261427 = -64						; size = 8
$T261426 = -56						; size = 4
$T261425 = -52						; size = 32
$T261424 = -20						; size = 4
__Where$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAEAAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; stdext::hash_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::operator[], COMDAT
; _this$ = ecx

; 157  : 		{	// find element matching _Keyval or insert with default mapped

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??A?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAEAAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		iterator _Where = this->lower_bound(_Keyval);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lower_bound@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE?AV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::lower_bound

; 159  : 		if (_Where == this->end())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T261596[ebp], eax
	mov	ecx, DWORD PTR $T261596[ebp]
	mov	DWORD PTR $T261424[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T261424[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN102@operator

; 160  : 			_Where = this->insert(value_type(_Keyval, mapped_type())).first;

	mov	DWORD PTR $T261426[ebp], 0
	mov	edx, DWORD PTR __Keyval$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T261425[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T261426[ebp]
	mov	DWORD PTR $T261425[ebp+28], eax
	lea	ecx, DWORD PTR $T261425[ebp]
	mov	DWORD PTR $T261656[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T261630[ebp], eax
	mov	ecx, DWORD PTR $T261630[ebp]
	mov	DWORD PTR $T261647[ebp], ecx
	mov	edx, DWORD PTR $T261647[ebp]
	push	edx
	mov	eax, DWORD PTR $T261656[ebp]
	push	eax
	lea	ecx, DWORD PTR $T261427[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAE?AU?$pair@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@_N@std@@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@4@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@4@@Z ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Insert
	mov	edx, DWORD PTR $T261427[ebp]
	mov	DWORD PTR __Where$[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T261425[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 161  : 		return ((*_Where).second);

$LN102@operator:
	mov	eax, DWORD PTR __Where$[ebp]
	add	eax, 36					; 00000024H

; 162  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAEAAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	lea	ecx, DWORD PTR $T261425[ebp]
	jmp	??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@XZ
__ehhandler$??A?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAEAAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??A?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAEAAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??A?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@QAEAAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; stdext::hash_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::operator[]
PUBLIC	??1?$_List_val@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ ; std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::~_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >
PUBLIC	??1?$_Vector_val@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ ; std::_Vector_val<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::~_Vector_val<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
PUBLIC	??1?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::~list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >
PUBLIC	?_Tidy@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXXZ ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Tidy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ$4
__ehfuncinfo$??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xhash
xdata$x	ENDS
;	COMDAT ??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T261930 = -80						; size = 4
$T261860 = -76						; size = 4
$T261837 = -72						; size = 4
$T261771 = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ PROC ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::~_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >, COMDAT
; _this$ = ecx

; 365  : 		{	// destroy hash table

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 366  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR $T261771[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T261771[ebp]
	call	?_Tidy@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXXZ ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T261930[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR $T261930[ebp]
	call	?clear@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXXZ ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::clear
	mov	edx, DWORD PTR $T261930[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T261837[ebp], eax
	mov	ecx, DWORD PTR $T261930[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T261860[ebp], edx
	mov	eax, DWORD PTR $T261860[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	ecx, DWORD PTR $T261930[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::~list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >
__unwindfunclet$??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ$2:
	mov	ecx, DWORD PTR $T261771[ebp]
	jmp	??1?$_Vector_val@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ
__unwindfunclet$??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ$4:
	mov	ecx, DWORD PTR $T261930[ebp]
	jmp	??1?$_List_val@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ
__ehhandler$??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@XZ ENDP ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::~_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::~vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@IAEXXZ ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::~vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::insert
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABI@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lbound
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\map
;	COMDAT ??A?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAEAAHABI@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T262072 = -48						; size = 4
$T262059 = -44						; size = 4
$T262043 = -40						; size = 4
$T261999 = -28						; size = 4
$T261998 = -24						; size = 4
$T261997 = -20						; size = 4
$T261996 = -16						; size = 8
$T261995 = -8						; size = 4
__Where$ = -4						; size = 4
__Keyval$ = 8						; size = 4
??A?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAEAAHABI@Z PROC ; std::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >::operator[], COMDAT
; _this$ = ecx

; 168  : 		{	// find element matching _Keyval or insert with default mapped

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 		iterator _Where = this->lower_bound(_Keyval);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lbound@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABI@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lbound
	mov	DWORD PTR $T262043[ebp], eax
	mov	ecx, DWORD PTR $T262043[ebp]
	mov	DWORD PTR __Where$[ebp], ecx

; 170  : 		if (_Where == this->end()
; 171  : 			|| this->comp(_Keyval, this->_Key(_Where._Mynode())))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T262059[ebp], eax
	mov	ecx, DWORD PTR $T262059[ebp]
	mov	DWORD PTR $T261995[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T261995[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@operator@2
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T262072[ebp], edx
	mov	eax, DWORD PTR __Keyval$[ebp]
	mov	ecx, DWORD PTR $T262072[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12]
	sbb	eax, eax
	neg	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN55@operator@2
$LN1@operator@2:

; 172  : 			_Where = this->insert(_Where,
; 173  : 				value_type(_Keyval, mapped_type()));

	mov	DWORD PTR $T261997[ebp], 0
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T261998[ebp], edx
	mov	eax, DWORD PTR __Keyval$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T261996[ebp], ecx
	mov	edx, DWORD PTR $T261997[ebp]
	mov	DWORD PTR $T261996[ebp+4], edx
	lea	eax, DWORD PTR $T261996[ebp]
	push	eax
	mov	ecx, DWORD PTR $T261998[ebp]
	push	ecx
	lea	edx, DWORD PTR $T261999[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::insert
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Where$[ebp], eax

; 174  : 		return ((*_Where).second);

$LN55@operator@2:
	mov	eax, DWORD PTR __Where$[ebp]
	add	eax, 16					; 00000010H

; 175  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$map@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@@std@@QAEAAHABI@Z ENDP ; std::map<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> > >::operator[]
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Erase
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T262150 = -8						; size = 4
?clear@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::clear, COMDAT
; _this$ = ecx

; 965  : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 966  : 
; 967  :  #if _HAS_ITERATOR_DEBUGGING
; 968  : 		this->_Orphan_ptr(*this, 0);
; 969  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 970  : 
; 971  : 		_Erase(_Root());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Erase

; 972  : 		_Root() = _Myhead, _Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 973  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T262150[ebp], eax
	mov	ecx, DWORD PTR $T262150[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 974  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::clear
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QBE?AVconst_iterator@12@ABI@Z
_TEXT	SEGMENT
tv93 = -48						; size = 4
_this$ = -44						; size = 4
$T262249 = -40						; size = 4
$T262228 = -36						; size = 4
$T262217 = -32						; size = 4
$T262208 = -28						; size = 4
$T262168 = -16						; size = 4
$T262166 = -12						; size = 4
$T262165 = -8						; size = 4
__Where$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QBE?AVconst_iterator@12@ABI@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::find, COMDAT
; _this$ = ecx

; 986  : 		{	// find an element in nonmutable sequence that matches _Keyval

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 987  : 		const_iterator _Where = lower_bound(_Keyval);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lbound@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABI@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lbound
	mov	DWORD PTR $T262208[ebp], eax
	mov	ecx, DWORD PTR $T262208[ebp]
	mov	DWORD PTR __Where$[ebp], ecx

; 988  : 		return (_Where == end()
; 989  : 			|| _DEBUG_LT_PRED(this->comp,
; 990  : 				_Keyval, _Key(_Where._Mynode()))
; 991  : 					? end() : _Where);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T262217[ebp], eax
	mov	ecx, DWORD PTR $T262217[ebp]
	mov	DWORD PTR $T262166[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T262166[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@find
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T262228[ebp], edx
	mov	eax, DWORD PTR __Keyval$[ebp]
	mov	ecx, DWORD PTR $T262228[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12]
	sbb	eax, eax
	neg	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@find
	lea	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR tv93[ebp], edx
	jmp	SHORT $LN4@find
$LN3@find:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T262249[ebp], ecx
	mov	edx, DWORD PTR $T262249[ebp]
	mov	DWORD PTR $T262168[ebp], edx
	lea	eax, DWORD PTR $T262168[ebp]
	mov	DWORD PTR tv93[ebp], eax
$LN4@find:
	mov	ecx, DWORD PTR tv93[ebp]
	mov	DWORD PTR $T262165[ebp], ecx
	mov	edx, DWORD PTR $T262165[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 992  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?find@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QBE?AVconst_iterator@12@ABI@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::find
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::~vector<CvColorInfo *,std::allocator<CvColorInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@IAEXXZ ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::~vector<CvColorInfo *,std::allocator<CvColorInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::~vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@IAEXXZ ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::~vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::~vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@IAEXXZ ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::~vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::~vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@IAEXXZ ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::~vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::~vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@IAEXXZ ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::~vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::~vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@IAEXXZ ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::~vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::~vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@IAEXXZ ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::~vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::~vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@IAEXXZ ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::~vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::~vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@IAEXXZ ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::~vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::~vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@IAEXXZ ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::~vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::~vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@IAEXXZ ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::~vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::~vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@IAEXXZ ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::~vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::~vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@IAEXXZ ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::~vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::~vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@IAEXXZ ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::~vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::~vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@IAEXXZ ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::~vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::~vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@IAEXXZ ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::~vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::~vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@IAEXXZ ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::~vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::~vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@IAEXXZ ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::~vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::~vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@IAEXXZ ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::~vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::~vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@IAEXXZ ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::~vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::~vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@IAEXXZ ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::~vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T263461 = -30						; size = 1
$T263448 = -29						; size = 1
$T263444 = -28						; size = 4
$T263437 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T263461[ebp]
	mov	DWORD PTR $T263437[ebp], eax
	lea	ecx, DWORD PTR $T263448[ebp]
	mov	DWORD PTR $T263444[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::~vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@IAEXXZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::~vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T263596 = -30						; size = 1
$T263583 = -29						; size = 1
$T263579 = -28						; size = 4
$T263572 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T263596[ebp]
	mov	DWORD PTR $T263572[ebp], eax
	lea	ecx, DWORD PTR $T263583[ebp]
	mov	DWORD PTR $T263579[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::~vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@IAEXXZ ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::~vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T263731 = -30						; size = 1
$T263718 = -29						; size = 1
$T263714 = -28						; size = 4
$T263707 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T263731[ebp]
	mov	DWORD PTR $T263707[ebp], eax
	lea	ecx, DWORD PTR $T263718[ebp]
	mov	DWORD PTR $T263714[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::~vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@IAEXXZ ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::~vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T263866 = -30						; size = 1
$T263853 = -29						; size = 1
$T263849 = -28						; size = 4
$T263842 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T263866[ebp]
	mov	DWORD PTR $T263842[ebp], eax
	lea	ecx, DWORD PTR $T263853[ebp]
	mov	DWORD PTR $T263849[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::~vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@IAEXXZ ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::~vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T264001 = -30						; size = 1
$T263988 = -29						; size = 1
$T263984 = -28						; size = 4
$T263977 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T264001[ebp]
	mov	DWORD PTR $T263977[ebp], eax
	lea	ecx, DWORD PTR $T263988[ebp]
	mov	DWORD PTR $T263984[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::~vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@IAEXXZ ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::~vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T264136 = -30						; size = 1
$T264123 = -29						; size = 1
$T264119 = -28						; size = 4
$T264112 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::vector<CvActionInfo *,std::allocator<CvActionInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T264136[ebp]
	mov	DWORD PTR $T264112[ebp], eax
	lea	ecx, DWORD PTR $T264123[ebp]
	mov	DWORD PTR $T264119[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::vector<CvActionInfo *,std::allocator<CvActionInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::~vector<CvActionInfo *,std::allocator<CvActionInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@IAEXXZ ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::~vector<CvActionInfo *,std::allocator<CvActionInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T264271 = -30						; size = 1
$T264258 = -29						; size = 1
$T264254 = -28						; size = 4
$T264247 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T264271[ebp]
	mov	DWORD PTR $T264247[ebp], eax
	lea	ecx, DWORD PTR $T264258[ebp]
	mov	DWORD PTR $T264254[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::~vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@IAEXXZ ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::~vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T264406 = -30						; size = 1
$T264393 = -29						; size = 1
$T264389 = -28						; size = 4
$T264382 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::vector<CvControlInfo *,std::allocator<CvControlInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T264406[ebp]
	mov	DWORD PTR $T264382[ebp], eax
	lea	ecx, DWORD PTR $T264393[ebp]
	mov	DWORD PTR $T264389[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::vector<CvControlInfo *,std::allocator<CvControlInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::~vector<CvControlInfo *,std::allocator<CvControlInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@IAEXXZ ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::~vector<CvControlInfo *,std::allocator<CvControlInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T264541 = -30						; size = 1
$T264528 = -29						; size = 1
$T264524 = -28						; size = 4
$T264517 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T264541[ebp]
	mov	DWORD PTR $T264517[ebp], eax
	lea	ecx, DWORD PTR $T264528[ebp]
	mov	DWORD PTR $T264524[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::~vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@IAEXXZ ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::~vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T264676 = -30						; size = 1
$T264663 = -29						; size = 1
$T264659 = -28						; size = 4
$T264652 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T264676[ebp]
	mov	DWORD PTR $T264652[ebp], eax
	lea	ecx, DWORD PTR $T264663[ebp]
	mov	DWORD PTR $T264659[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::~vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@IAEXXZ ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::~vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T264811 = -30						; size = 1
$T264798 = -29						; size = 1
$T264794 = -28						; size = 4
$T264787 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::vector<CvEraInfo *,std::allocator<CvEraInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T264811[ebp]
	mov	DWORD PTR $T264787[ebp], eax
	lea	ecx, DWORD PTR $T264798[ebp]
	mov	DWORD PTR $T264794[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::vector<CvEraInfo *,std::allocator<CvEraInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::~vector<CvEraInfo *,std::allocator<CvEraInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@IAEXXZ ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::~vector<CvEraInfo *,std::allocator<CvEraInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T264946 = -30						; size = 1
$T264933 = -29						; size = 1
$T264929 = -28						; size = 4
$T264922 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T264946[ebp]
	mov	DWORD PTR $T264922[ebp], eax
	lea	ecx, DWORD PTR $T264933[ebp]
	mov	DWORD PTR $T264929[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::~vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@IAEXXZ ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::~vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T265081 = -30						; size = 1
$T265068 = -29						; size = 1
$T265064 = -28						; size = 4
$T265057 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T265081[ebp]
	mov	DWORD PTR $T265057[ebp], eax
	lea	ecx, DWORD PTR $T265068[ebp]
	mov	DWORD PTR $T265064[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::~vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@IAEXXZ ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::~vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T265216 = -30						; size = 1
$T265203 = -29						; size = 1
$T265199 = -28						; size = 4
$T265192 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T265216[ebp]
	mov	DWORD PTR $T265192[ebp], eax
	lea	ecx, DWORD PTR $T265203[ebp]
	mov	DWORD PTR $T265199[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::~vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@IAEXXZ ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::~vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T265351 = -30						; size = 1
$T265338 = -29						; size = 1
$T265334 = -28						; size = 4
$T265327 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T265351[ebp]
	mov	DWORD PTR $T265327[ebp], eax
	lea	ecx, DWORD PTR $T265338[ebp]
	mov	DWORD PTR $T265334[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::~vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@IAEXXZ ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::~vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >
PUBLIC	?_Buy@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T265486 = -30						; size = 1
$T265473 = -29						; size = 1
$T265469 = -28						; size = 4
$T265462 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T265486[ebp]
	mov	DWORD PTR $T265462[ebp], eax
	lea	ecx, DWORD PTR $T265473[ebp]
	mov	DWORD PTR $T265469[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@IAE_NI@Z ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??1?$auto_ptr@VICvDLLDatabaseUtility1@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_inst$265541 = -8					; size = 4
$T265536 = -4						; size = 4
??1?$auto_ptr@VICvDLLDatabaseUtility1@@@std@@QAE@XZ PROC ; std::auto_ptr<ICvDLLDatabaseUtility1>::~auto_ptr<ICvDLLDatabaseUtility1>, COMDAT
; _this$ = ecx

; 720  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 721  : 		delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T265536[ebp], ecx
	cmp	DWORD PTR $T265536[ebp], 0
	je	SHORT $LN1@auto_ptr
	mov	edx, DWORD PTR $T265536[ebp]
	mov	DWORD PTR _inst$265541[ebp], edx
	mov	eax, DWORD PTR _inst$265541[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$265541[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN1@auto_ptr:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@VICvDLLDatabaseUtility1@@@std@@QAE@XZ ENDP ; std::auto_ptr<ICvDLLDatabaseUtility1>::~auto_ptr<ICvDLLDatabaseUtility1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$auto_ptr@VICvCity1@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_inst$265549 = -8					; size = 4
$T265544 = -4						; size = 4
??1?$auto_ptr@VICvCity1@@@std@@QAE@XZ PROC		; std::auto_ptr<ICvCity1>::~auto_ptr<ICvCity1>, COMDAT
; _this$ = ecx

; 720  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 721  : 		delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T265544[ebp], ecx
	cmp	DWORD PTR $T265544[ebp], 0
	je	SHORT $LN1@auto_ptr@2
	mov	edx, DWORD PTR $T265544[ebp]
	mov	DWORD PTR _inst$265549[ebp], edx
	mov	eax, DWORD PTR _inst$265549[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$265549[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN1@auto_ptr@2:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@VICvCity1@@@std@@QAE@XZ ENDP		; std::auto_ptr<ICvCity1>::~auto_ptr<ICvCity1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$auto_ptr@VICvDeal1@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_inst$265557 = -8					; size = 4
$T265552 = -4						; size = 4
??1?$auto_ptr@VICvDeal1@@@std@@QAE@XZ PROC		; std::auto_ptr<ICvDeal1>::~auto_ptr<ICvDeal1>, COMDAT
; _this$ = ecx

; 720  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 721  : 		delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T265552[ebp], ecx
	cmp	DWORD PTR $T265552[ebp], 0
	je	SHORT $LN1@auto_ptr@3
	mov	edx, DWORD PTR $T265552[ebp]
	mov	DWORD PTR _inst$265557[ebp], edx
	mov	eax, DWORD PTR _inst$265557[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$265557[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN1@auto_ptr@3:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@VICvDeal1@@@std@@QAE@XZ ENDP		; std::auto_ptr<ICvDeal1>::~auto_ptr<ICvDeal1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_inst$265565 = -8					; size = 4
$T265560 = -4						; size = 4
??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ PROC		; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>, COMDAT
; _this$ = ecx

; 720  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 721  : 		delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T265560[ebp], ecx
	cmp	DWORD PTR $T265560[ebp], 0
	je	SHORT $LN1@auto_ptr@4
	mov	edx, DWORD PTR $T265560[ebp]
	mov	DWORD PTR _inst$265565[ebp], edx
	mov	eax, DWORD PTR _inst$265565[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$265565[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN1@auto_ptr@4:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ ENDP		; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$auto_ptr@VICvRandom1@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_inst$265573 = -8					; size = 4
$T265568 = -4						; size = 4
??1?$auto_ptr@VICvRandom1@@@std@@QAE@XZ PROC		; std::auto_ptr<ICvRandom1>::~auto_ptr<ICvRandom1>, COMDAT
; _this$ = ecx

; 720  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 721  : 		delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T265568[ebp], ecx
	cmp	DWORD PTR $T265568[ebp], 0
	je	SHORT $LN1@auto_ptr@5
	mov	edx, DWORD PTR $T265568[ebp]
	mov	DWORD PTR _inst$265573[ebp], edx
	mov	eax, DWORD PTR _inst$265573[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$265573[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN1@auto_ptr@5:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@VICvRandom1@@@std@@QAE@XZ ENDP		; std::auto_ptr<ICvRandom1>::~auto_ptr<ICvRandom1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_inst$265581 = -8					; size = 4
$T265576 = -4						; size = 4
??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ PROC		; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>, COMDAT
; _this$ = ecx

; 720  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 721  : 		delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T265576[ebp], ecx
	cmp	DWORD PTR $T265576[ebp], 0
	je	SHORT $LN1@auto_ptr@6
	mov	edx, DWORD PTR $T265576[ebp]
	mov	DWORD PTR _inst$265581[ebp], edx
	mov	eax, DWORD PTR _inst$265581[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$265581[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN1@auto_ptr@6:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ ENDP		; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@XZ PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@XZ ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::~_Vector_val<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::~_Vector_val<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::~_Tree_val<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvColorInfo *,std::allocator<CvColorInfo *> >::~_Vector_val<CvColorInfo *,std::allocator<CvColorInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvColorInfo *,std::allocator<CvColorInfo *> >::~_Vector_val<CvColorInfo *,std::allocator<CvColorInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::~_Vector_val<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::~_Vector_val<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::~_Vector_val<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::~_Vector_val<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvYieldInfo *,std::allocator<CvYieldInfo *> >::~_Vector_val<CvYieldInfo *,std::allocator<CvYieldInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvYieldInfo *,std::allocator<CvYieldInfo *> >::~_Vector_val<CvYieldInfo *,std::allocator<CvYieldInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvRouteInfo *,std::allocator<CvRouteInfo *> >::~_Vector_val<CvRouteInfo *,std::allocator<CvRouteInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvRouteInfo *,std::allocator<CvRouteInfo *> >::~_Vector_val<CvRouteInfo *,std::allocator<CvRouteInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::~_Vector_val<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::~_Vector_val<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::~_Vector_val<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::~_Vector_val<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvResourceInfo *,std::allocator<CvResourceInfo *> >::~_Vector_val<CvResourceInfo *,std::allocator<CvResourceInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvResourceInfo *,std::allocator<CvResourceInfo *> >::~_Vector_val<CvResourceInfo *,std::allocator<CvResourceInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvBuildInfo *,std::allocator<CvBuildInfo *> >::~_Vector_val<CvBuildInfo *,std::allocator<CvBuildInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvBuildInfo *,std::allocator<CvBuildInfo *> >::~_Vector_val<CvBuildInfo *,std::allocator<CvBuildInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::~_Vector_val<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::~_Vector_val<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::~_Vector_val<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::~_Vector_val<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::~_Vector_val<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::~_Vector_val<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::~_Vector_val<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::~_Vector_val<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::~_Vector_val<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::~_Vector_val<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::~_Vector_val<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::~_Vector_val<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvProcessInfo *,std::allocator<CvProcessInfo *> >::~_Vector_val<CvProcessInfo *,std::allocator<CvProcessInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvProcessInfo *,std::allocator<CvProcessInfo *> >::~_Vector_val<CvProcessInfo *,std::allocator<CvProcessInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvVoteInfo *,std::allocator<CvVoteInfo *> >::~_Vector_val<CvVoteInfo *,std::allocator<CvVoteInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvVoteInfo *,std::allocator<CvVoteInfo *> >::~_Vector_val<CvVoteInfo *,std::allocator<CvVoteInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::~_Vector_val<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::~_Vector_val<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::~_Vector_val<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::~_Vector_val<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::~_Vector_val<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::~_Vector_val<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::~_Vector_val<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::~_Vector_val<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvBaseInfo *,std::allocator<CvBaseInfo *> >::~_Vector_val<CvBaseInfo *,std::allocator<CvBaseInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvBaseInfo *,std::allocator<CvBaseInfo *> >::~_Vector_val<CvBaseInfo *,std::allocator<CvBaseInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::~_Vector_val<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::~_Vector_val<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::~_Vector_val<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::~_Vector_val<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::~_Vector_val<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::~_Vector_val<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::~_Vector_val<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::~_Vector_val<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvActionInfo *,std::allocator<CvActionInfo *> >::~_Vector_val<CvActionInfo *,std::allocator<CvActionInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvActionInfo *,std::allocator<CvActionInfo *> >::~_Vector_val<CvActionInfo *,std::allocator<CvActionInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvMissionInfo *,std::allocator<CvMissionInfo *> >::~_Vector_val<CvMissionInfo *,std::allocator<CvMissionInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvMissionInfo *,std::allocator<CvMissionInfo *> >::~_Vector_val<CvMissionInfo *,std::allocator<CvMissionInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvControlInfo *,std::allocator<CvControlInfo *> >::~_Vector_val<CvControlInfo *,std::allocator<CvControlInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvControlInfo *,std::allocator<CvControlInfo *> >::~_Vector_val<CvControlInfo *,std::allocator<CvControlInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvCommandInfo *,std::allocator<CvCommandInfo *> >::~_Vector_val<CvCommandInfo *,std::allocator<CvCommandInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvCommandInfo *,std::allocator<CvCommandInfo *> >::~_Vector_val<CvCommandInfo *,std::allocator<CvCommandInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::~_Vector_val<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::~_Vector_val<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvEraInfo *,std::allocator<CvEraInfo *> >::~_Vector_val<CvEraInfo *,std::allocator<CvEraInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvEraInfo *,std::allocator<CvEraInfo *> >::~_Vector_val<CvEraInfo *,std::allocator<CvEraInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvHurryInfo *,std::allocator<CvHurryInfo *> >::~_Vector_val<CvHurryInfo *,std::allocator<CvHurryInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvHurryInfo *,std::allocator<CvHurryInfo *> >::~_Vector_val<CvHurryInfo *,std::allocator<CvHurryInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::~_Vector_val<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::~_Vector_val<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::~_Vector_val<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::~_Vector_val<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::~_Vector_val<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::~_Vector_val<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::~_Vector_val<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::~_Vector_val<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??1?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T265932 = -40						; size = 4
$T265909 = -36						; size = 4
__$EHRec$ = -12						; size = 12
??1?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ PROC ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::~list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >, COMDAT
; _this$ = ecx

; 520  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 521  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXXZ ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::clear
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T265909[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T265932[ebp], eax
	mov	ecx, DWORD PTR $T265932[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 522  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_val@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ
__ehhandler$??1?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ ENDP ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::~list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >
; Function compile flags: /Odtp
;	COMDAT ?clear@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T266007 = -20						; size = 4
$T265991 = -16						; size = 4
$T265987 = -12						; size = 4
__Pnext$ = -8						; size = 4
__Pnode$ = -4						; size = 4
?clear@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXXZ PROC ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T265987[ebp], ecx
	mov	edx, DWORD PTR $T265987[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Pnode$[ebp], eax

; 833  : 		_Nextnode(_Myhead) = _Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T265991[ebp], edx
	mov	eax, DWORD PTR $T265991[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 834  : 		_Prevnode(_Myhead) = _Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 835  : 		_Mysize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

	jmp	SHORT $LN3@clear
$LN2@clear:
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	DWORD PTR __Pnode$[ebp], edx
$LN3@clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN4@clear

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Pnext$[ebp], eax

; 840  : 			this->_Alnod.destroy(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T266007[ebp], ecx
	mov	ecx, DWORD PTR $T266007[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	edx, edx
	and	edx, 1
	je	SHORT $LN14@clear
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN14@clear:

; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 842  : 			}

	jmp	SHORT $LN2@clear
$LN4@clear:

; 843  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXXZ ENDP ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::clear
_TEXT	ENDS
PUBLIC	??1?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::~vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
PUBLIC	__real@40800000
PUBLIC	?_Buy@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAE_NI@Z ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Buy
PUBLIC	??0?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >
;	COMDAT __real@40800000
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z$1
__ehfuncinfo$??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xhash
xdata$x	ENDS
;	COMDAT ??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z
_TEXT	SEGMENT
tv152 = -272						; size = 4
tv218 = -268						; size = 4
_this$ = -264						; size = 4
$T266182 = -156						; size = 4
$T266133 = -62						; size = 1
$T266120 = -61						; size = 1
$T266116 = -60						; size = 4
$T266109 = -52						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z PROC ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >, COMDAT
; _this$ = ecx

; 343  : 		{	// construct empty hash table

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 260				; 00000104H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Parg$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR $T266182[ebp], ecx
	lea	edx, DWORD PTR $T266133[ebp]
	mov	DWORD PTR $T266109[ebp], edx
	lea	eax, DWORD PTR $T266120[ebp]
	mov	DWORD PTR $T266116[ebp], eax
	mov	ecx, DWORD PTR $T266182[ebp]
	mov	DWORD PTR tv218[ebp], ecx
	mov	edx, DWORD PTR $T266182[ebp]
	mov	DWORD PTR tv152[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	0
	mov	ecx, DWORD PTR $T266182[ebp]
	call	?_Buy@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAE_NI@Z ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [eax+40], xmm0

; 344  : 		_Init();

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Init@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAEXI@Z ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Init

; 345  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::~list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >
__unwindfunclet$??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z$5:
	mov	ecx, DWORD PTR $T266182[ebp]
	jmp	??1?$_Vector_val@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ
__unwindfunclet$??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::~vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
__ehhandler$??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-264]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE@ABV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@Z ENDP ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ PROC ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::~vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXXZ ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ
__ehhandler$??1?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ ENDP ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::~vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
PUBLIC	??R?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@QBEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator()
EXTRN	__imp_??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xhash
;	COMDAT ?lower_bound@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE?AV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z
_TEXT	SEGMENT
tv161 = -56						; size = 4
_this$ = -52						; size = 4
$T266635 = -48						; size = 4
$T266610 = -44						; size = 4
$T266588 = -40						; size = 4
$T266561 = -36						; size = 4
$T266537 = -32						; size = 4
$T266515 = -28						; size = 4
__Num$266502 = -24					; size = 4
$T266496 = -20						; size = 4
$T266495 = -16						; size = 4
$T266494 = -12						; size = 4
__Where$ = -8						; size = 4
__Bucket$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE?AV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z PROC ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 637  : 		{	// find leftmost not less than _Keyval in mutable hash table

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 638  : 		size_type _Bucket = _Hashval(_Keyval);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??R?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@QBEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator()
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR __Num$266502[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	eax, DWORD PTR __Num$266502[ebp]
	ja	SHORT $LN10@lower_boun
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	shr	edx, 1
	add	edx, 1
	mov	eax, DWORD PTR __Num$266502[ebp]
	sub	eax, edx
	mov	DWORD PTR __Num$266502[ebp], eax
$LN10@lower_boun:
	mov	ecx, DWORD PTR __Num$266502[ebp]
	mov	DWORD PTR __Bucket$[ebp], ecx

; 639  : 		iterator _Where;

	mov	DWORD PTR __Where$[ebp], 0

; 640  : 		for (_Where = _Get_iter_from_vec(_Vec[_Bucket]); _Vec[_Bucket + 1] != _Where; ++_Where)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR __Bucket$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T266515[ebp], edx
	mov	eax, DWORD PTR $T266515[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T266494[ebp], ecx
	mov	edx, DWORD PTR $T266494[ebp]
	mov	DWORD PTR __Where$[ebp], edx
	jmp	SHORT $LN4@lower_boun
$LN24@lower_boun:
	mov	eax, DWORD PTR __Where$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Where$[ebp], ecx
$LN4@lower_boun:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR __Bucket$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4+4]
	mov	DWORD PTR $T266537[ebp], edx
	mov	eax, DWORD PTR $T266537[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	cmp	ecx, DWORD PTR __Where$[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@lower_boun

; 641  : 			if (!this->comp(this->_Kfn(*_Where), _Keyval))

	mov	edx, DWORD PTR __Where$[ebp]
	add	edx, 8
	mov	DWORD PTR $T266561[ebp], edx
	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T266561[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@lower_boun

; 642  : 				return (this->comp(_Keyval,
; 643  : 					this->_Kfn(*_Where)) ? end() : _Where);

	mov	eax, DWORD PTR __Where$[ebp]
	add	eax, 8
	mov	DWORD PTR $T266588[ebp], eax
	mov	ecx, DWORD PTR $T266588[ebp]
	push	ecx
	mov	edx, DWORD PTR __Keyval$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@lower_boun
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T266610[ebp], edx
	mov	eax, DWORD PTR $T266610[ebp]
	mov	DWORD PTR $T266496[ebp], eax
	lea	ecx, DWORD PTR $T266496[ebp]
	mov	DWORD PTR tv161[ebp], ecx
	jmp	SHORT $LN8@lower_boun
$LN7@lower_boun:
	lea	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR tv161[ebp], edx
$LN8@lower_boun:
	mov	eax, DWORD PTR tv161[ebp]
	mov	DWORD PTR $T266495[ebp], eax
	mov	ecx, DWORD PTR $T266495[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN5@lower_boun
$LN1@lower_boun:

; 644  : 		return (end());

	jmp	$LN24@lower_boun
$LN2@lower_boun:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T266635[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR $T266635[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@lower_boun:

; 645  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?lower_bound@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QAE?AV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z ENDP ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::lower_bound
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?lower_bound@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QBE?AV?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z
_TEXT	SEGMENT
tv161 = -56						; size = 4
_this$ = -52						; size = 4
$T266753 = -48						; size = 4
$T266737 = -44						; size = 4
$T266720 = -40						; size = 4
$T266700 = -36						; size = 4
$T266683 = -32						; size = 4
$T266668 = -28						; size = 4
__Num$266660 = -24					; size = 4
$T266654 = -20						; size = 4
$T266653 = -16						; size = 4
$T266652 = -12						; size = 4
__Where$ = -8						; size = 4
__Bucket$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QBE?AV?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z PROC ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 648  : 		{	// find leftmost not less than _Keyval in nonmutable hash table

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 649  : 		size_type _Bucket = _Hashval(_Keyval);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??R?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@QBEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator()
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR __Num$266660[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	eax, DWORD PTR __Num$266660[ebp]
	ja	SHORT $LN10@lower_boun@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	shr	edx, 1
	add	edx, 1
	mov	eax, DWORD PTR __Num$266660[ebp]
	sub	eax, edx
	mov	DWORD PTR __Num$266660[ebp], eax
$LN10@lower_boun@2:
	mov	ecx, DWORD PTR __Num$266660[ebp]
	mov	DWORD PTR __Bucket$[ebp], ecx

; 650  : 		const_iterator _Where;

	mov	DWORD PTR __Where$[ebp], 0

; 651  : 		for (_Where = _Get_iter_from_vec(_Vec[_Bucket]); _Vec[_Bucket + 1] != _Where; ++_Where)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR __Bucket$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T266668[ebp], edx
	mov	eax, DWORD PTR $T266668[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T266652[ebp], ecx
	mov	edx, DWORD PTR $T266652[ebp]
	mov	DWORD PTR __Where$[ebp], edx
	jmp	SHORT $LN4@lower_boun@2
$LN20@lower_boun@2:
	mov	eax, DWORD PTR __Where$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Where$[ebp], ecx
$LN4@lower_boun@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR __Bucket$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4+4]
	mov	DWORD PTR $T266683[ebp], edx
	mov	eax, DWORD PTR $T266683[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	cmp	ecx, DWORD PTR __Where$[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@lower_boun@2

; 652  : 			if (!this->comp(this->_Kfn(*_Where), _Keyval))

	mov	edx, DWORD PTR __Where$[ebp]
	add	edx, 8
	mov	DWORD PTR $T266700[ebp], edx
	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T266700[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@lower_boun@2

; 653  : 				return (this->comp(_Keyval,
; 654  : 					this->_Kfn(*_Where)) ? end() : _Where);

	mov	eax, DWORD PTR __Where$[ebp]
	add	eax, 8
	mov	DWORD PTR $T266720[ebp], eax
	mov	ecx, DWORD PTR $T266720[ebp]
	push	ecx
	mov	edx, DWORD PTR __Keyval$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@lower_boun@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T266737[ebp], edx
	mov	eax, DWORD PTR $T266737[ebp]
	mov	DWORD PTR $T266654[ebp], eax
	lea	ecx, DWORD PTR $T266654[ebp]
	mov	DWORD PTR tv161[ebp], ecx
	jmp	SHORT $LN8@lower_boun@2
$LN7@lower_boun@2:
	lea	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR tv161[ebp], edx
$LN8@lower_boun@2:
	mov	eax, DWORD PTR tv161[ebp]
	mov	DWORD PTR $T266653[ebp], eax
	mov	ecx, DWORD PTR $T266653[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN5@lower_boun@2
$LN1@lower_boun@2:

; 655  : 		return (end());

	jmp	$LN20@lower_boun@2
$LN2@lower_boun@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T266753[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR $T266753[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@lower_boun@2:

; 656  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?lower_bound@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@QBE?AV?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z ENDP ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	?_Assign_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXIABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Assign_n
; Function compile flags: /Odtp
;	COMDAT ?_Init@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -120						; size = 4
$T266777 = -8						; size = 4
$T266766 = -4						; size = 4
__Buckets$ = 8						; size = 4
?_Init@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAEXI@Z PROC ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Init, COMDAT
; _this$ = ecx

; 829  : 		{	// initialize hash table with _Buckets buckets, leave list alone

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	mov	DWORD PTR _this$[ebp], ecx

; 830  : 		_Vec.assign(_Buckets + 1, end());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T266777[ebp], ecx
	mov	edx, DWORD PTR $T266777[ebp]
	mov	DWORD PTR $T266766[ebp], edx
	lea	eax, DWORD PTR $T266766[ebp]
	push	eax
	mov	ecx, DWORD PTR __Buckets$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?_Assign_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXIABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Assign_n

; 831  : 		_Mask = _Buckets - 1;

	mov	edx, DWORD PTR __Buckets$[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], edx

; 832  : 		_Maxidx = _Buckets;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Buckets$[ebp]
	mov	DWORD PTR [ecx+36], edx

; 833  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Init@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAEXI@Z ENDP ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Init
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvInterfaceModeInfo@@@std@@YAPAPAVCvInterfaceModeInfo@@IPAPAV1@@Z ; std::_Allocate<CvInterfaceModeInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@KAXXZ ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$267009 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$267009[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$267009[ebp], 0
	jbe	SHORT $LN11@Buy
	mov	eax, DWORD PTR __Count$267009[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy
$LN11@Buy:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@KAXXZ ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvInterfaceModeInfo@@@std@@YAPAPAVCvInterfaceModeInfo@@IPAPAV1@@Z ; std::_Allocate<CvInterfaceModeInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T267075 = -28						; size = 4
$T267074 = -24						; size = 4
$T267070 = -20						; size = 4
$T267069 = -16						; size = 4
$T267058 = -12						; size = 4
$T267057 = -8						; size = 4
__Cat$267065 = -2					; size = 1
$T267062 = -1						; size = 1
?_Tidy@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T267070[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T267069[ebp], ecx
	mov	edx, DWORD PTR $T267070[ebp]
	mov	DWORD PTR $T267058[ebp], edx
	mov	eax, DWORD PTR $T267069[ebp]
	mov	DWORD PTR $T267057[ebp], eax
	mov	cl, BYTE PTR __Cat$267065[ebp]
	mov	BYTE PTR $T267062[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T267075[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T267074[ebp], eax
	mov	ecx, DWORD PTR $T267074[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Init@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Init
PUBLIC	??0?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@QAE@U?$less@I@1@V?$allocator@U?$pair@$$CBIH@std@@@1@@Z ; std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z
_TEXT	SEGMENT
tv89 = -72						; size = 4
tv147 = -68						; size = 4
tv173 = -64						; size = 4
tv199 = -60						; size = 4
_this$ = -56						; size = 4
$T267158 = -47						; size = 1
$T267133 = -46						; size = 1
$T267115 = -45						; size = 1
$T267104 = -44						; size = 4
$T267148 = -40						; size = 4
$T267097 = -36						; size = 4
$T267090 = -28						; size = 4
$T267083 = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >, COMDAT
; _this$ = ecx

; 509  : 		{	// construct empty tree

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T267158[ebp]
	mov	DWORD PTR $T267083[ebp], eax
	lea	ecx, DWORD PTR $T267133[ebp]
	mov	DWORD PTR $T267090[ebp], ecx
	lea	edx, DWORD PTR $T267115[ebp]
	mov	DWORD PTR $T267097[ebp], edx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR $T267148[ebp], esp
	mov	DWORD PTR $T267104[ebp], eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@QAE@U?$less@I@1@V?$allocator@U?$pair@$$CBIH@std@@@1@@Z ; std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>
	mov	DWORD PTR tv199[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv173[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv147[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv89[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 510  : 		_Init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Init@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Init

; 511  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_val@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@I@1@ABV?$allocator@U?$pair@$$CBIH@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::insert
PUBLIC	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::const_iterator::_Inc
PUBLIC	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::const_iterator::_Dec
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
; Function compile flags: /Odtp
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBIH@2@@Z
_TEXT	SEGMENT
_this$ = -376						; size = 4
$T267735 = -372						; size = 4
$T267712 = -368						; size = 4
$T267696 = -364						; size = 4
$T267670 = -360						; size = 4
$T267651 = -356						; size = 4
$T267631 = -352						; size = 4
$T267602 = -348						; size = 4
$T267587 = -344						; size = 4
$T267573 = -340						; size = 4
$T267552 = -336						; size = 4
$T267520 = -332						; size = 4
$T267503 = -328						; size = 4
$T267490 = -324						; size = 4
$T267472 = -320						; size = 4
$T267452 = -316						; size = 4
$T267433 = -312						; size = 4
$T267404 = -308						; size = 4
$T267388 = -304						; size = 4
$T267365 = -300						; size = 4
$T267342 = -296						; size = 4
$T267317 = -216						; size = 4
$T267303 = -212						; size = 4
$T267285 = -208						; size = 4
$T267252 = -128						; size = 4
$T267232 = -124						; size = 4
$T267219 = -120						; size = 4
$T267209 = -40						; size = 4
$T267202 = -36						; size = 8
$T267201 = -28						; size = 4
$T267200 = -24						; size = 4
$T267199 = -20						; size = 4
$T267198 = -16						; size = 4
$T267197 = -12						; size = 4
$T267196 = -8						; size = 4
__Next$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBIH@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::insert, COMDAT
; _this$ = ecx

; 664  : 		{	// try to insert node with value _Val using _Where as a hint

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	mov	DWORD PTR _this$[ebp], ecx

; 665  : 
; 666  :  #if _HAS_ITERATOR_DEBUGGING
; 667  : 		if (_Where._Mycont != this)
; 668  : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 669  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 670  : 
; 671  : 		const_iterator _Next;

	mov	DWORD PTR __Next$[ebp], 0

; 672  : 
; 673  : 		if (size() == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T267209[ebp], ecx
	cmp	DWORD PTR $T267209[ebp], 0
	jne	SHORT $LN32@insert

; 674  : 			return (_Insert(true, _Myhead, _Val));	// insert into empty tree

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	1
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert
	jmp	$LN31@insert
$LN32@insert:

; 675  : 		else if (this->_Multi)

	xor	eax, eax
	je	$LN30@insert

; 676  : 			{	// insert even if duplicate
; 677  : 			if (_Where == begin())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T267219[ebp], edx
	mov	eax, DWORD PTR $T267219[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T267232[ebp], ecx
	mov	edx, DWORD PTR $T267232[ebp]
	mov	DWORD PTR $T267196[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T267196[ebp]
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN29@insert

; 678  : 				{	// insert at beginning if before first element
; 679  : 				if (!_DEBUG_LT_PRED(this->comp,

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T267252[ebp], eax
	mov	ecx, DWORD PTR $T267252[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx]
	sbb	ecx, ecx
	neg	ecx
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN28@insert

; 680  : 					_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 681  : 					return (_Insert(true, _Where._Mynode(), _Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert
$LN28@insert:

; 682  : 				}

	jmp	$LN27@insert
$LN29@insert:

; 683  : 			else if (_Where == end())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T267285[ebp], ecx
	mov	edx, DWORD PTR $T267285[ebp]
	mov	DWORD PTR $T267197[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T267197[ebp]
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN151@insert

; 684  : 				{	// insert at end if after last element
; 685  : 				if (!_DEBUG_LT_PRED(this->comp,

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 8
	mov	DWORD PTR $T267303[ebp], ecx
	mov	edx, DWORD PTR $T267303[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR $T267317[ebp], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR $T267317[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	sbb	ecx, ecx
	neg	ecx
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN25@insert

; 686  : 					this->_Kfn(_Val), _Key(_Rmost())))
; 687  : 					return (_Insert(false, _Rmost(), _Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert
$LN25@insert:

; 688  : 				}
; 689  : 			else if (!_DEBUG_LT_PRED(this->comp,

	jmp	$LN27@insert

; 690  : 				_Key(_Where._Mynode()), this->_Kfn(_Val))
; 691  : 				&& !_DEBUG_LT_PRED(this->comp,

$LN151@insert:
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T267342[ebp], edx
	mov	eax, DWORD PTR $T267342[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx]
	sbb	eax, eax
	neg	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN23@insert
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Next$[ebp], edx
	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::const_iterator::_Dec
	mov	eax, DWORD PTR __Next$[ebp]
	mov	DWORD PTR $T267365[ebp], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR $T267365[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+12]
	sbb	ecx, ecx
	neg	ecx
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN23@insert

; 692  : 					this->_Kfn(_Val), _Key((--(_Next = _Where))._Mynode())))
; 693  : 				{	// insert before _Where
; 694  : 				if (_Isnil(_Right(_Next._Mynode())))

	mov	eax, DWORD PTR __Next$[ebp]
	mov	DWORD PTR $T267388[ebp], eax
	mov	ecx, DWORD PTR $T267388[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+21]
	test	eax, eax
	je	SHORT $LN185@insert

; 695  : 					return (_Insert(false, _Next._Mynode(), _Val));

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert

; 696  : 				else

	jmp	SHORT $LN21@insert

; 697  : 					return (_Insert(true, _Where._Mynode(), _Val));

$LN185@insert:
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert
$LN21@insert:

; 698  : 				}
; 699  : 			else if (!_DEBUG_LT_PRED(this->comp,

	jmp	$LN27@insert
$LN23@insert:

; 700  : 				this->_Kfn(_Val), _Key(_Where._Mynode()))
; 701  : 				&& (++(_Next = _Where) == end()
; 702  : 					|| !_DEBUG_LT_PRED(this->comp,

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T267404[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T267404[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+12]
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	jne	$LN27@insert
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Next$[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T267433[ebp], eax
	mov	ecx, DWORD PTR $T267433[ebp]
	mov	DWORD PTR $T267198[ebp], ecx
	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::const_iterator::_Inc
	mov	edx, DWORD PTR __Next$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T267198[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN18@insert
	mov	edx, DWORD PTR __Next$[ebp]
	mov	DWORD PTR $T267452[ebp], edx
	mov	eax, DWORD PTR $T267452[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx]
	sbb	eax, eax
	neg	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN27@insert
$LN18@insert:

; 703  : 						_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 704  : 				{	// insert after _Where
; 705  : 				if (_Isnil(_Right(_Where._Mynode())))

	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T267472[ebp], edx
	mov	eax, DWORD PTR $T267472[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+21]
	test	edx, edx
	je	SHORT $LN229@insert

; 706  : 					return (_Insert(false, _Where._Mynode(), _Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert

; 707  : 				else

	jmp	SHORT $LN27@insert

; 708  : 					return (_Insert(true, _Next._Mynode(), _Val));

$LN229@insert:
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert
$LN27@insert:

; 709  : 				}
; 710  : 			}
; 711  : 		else

	jmp	$LN31@insert
$LN30@insert:

; 712  : 			{	// insert only if unique
; 713  : 			if (_Where == begin())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T267490[ebp], ecx
	mov	edx, DWORD PTR $T267490[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T267503[ebp], eax
	mov	ecx, DWORD PTR $T267503[ebp]
	mov	DWORD PTR $T267199[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T267199[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN14@insert

; 714  : 				{	// insert at beginning if before first element
; 715  : 				if (_DEBUG_LT_PRED(this->comp,

	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T267520[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR $T267520[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12]
	sbb	eax, eax
	neg	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN13@insert

; 716  : 					this->_Kfn(_Val), _Key(_Where._Mynode())))
; 717  : 					return (_Insert(true, _Where._Mynode(), _Val));

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert
$LN13@insert:

; 718  : 				}

	jmp	$LN31@insert
$LN14@insert:

; 719  : 			else if (_Where == end())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T267552[ebp], eax
	mov	ecx, DWORD PTR $T267552[ebp]
	mov	DWORD PTR $T267200[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T267200[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@insert

; 720  : 				{	// insert at end if after last element
; 721  : 				if (_DEBUG_LT_PRED(this->comp,

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 8
	mov	DWORD PTR $T267573[ebp], eax
	mov	ecx, DWORD PTR $T267573[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T267587[ebp], edx
	mov	eax, DWORD PTR $T267587[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	sbb	eax, eax
	neg	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@insert

; 722  : 					_Key(_Rmost()), this->_Kfn(_Val)))
; 723  : 					return (_Insert(false, _Rmost(), _Val));

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert
$LN10@insert:

; 724  : 				}
; 725  : 			else if (_DEBUG_LT_PRED(this->comp,

	jmp	$LN31@insert
$LN11@insert:

; 726  : 				this->_Kfn(_Val), _Key(_Where._Mynode()))
; 727  : 				&& _DEBUG_LT_PRED(this->comp,

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T267602[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T267602[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+12]
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	$LN319@insert
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Next$[ebp], ecx
	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::const_iterator::_Dec
	mov	edx, DWORD PTR __Next$[ebp]
	mov	DWORD PTR $T267631[ebp], edx
	mov	eax, DWORD PTR $T267631[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx]
	sbb	eax, eax
	neg	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN319@insert

; 728  : 					_Key((--(_Next = _Where))._Mynode()), this->_Kfn(_Val)))
; 729  : 				{	// insert before _Where
; 730  : 				if (_Isnil(_Right(_Next._Mynode())))

	mov	edx, DWORD PTR __Next$[ebp]
	mov	DWORD PTR $T267651[ebp], edx
	mov	eax, DWORD PTR $T267651[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+21]
	test	edx, edx
	je	SHORT $LN317@insert

; 731  : 					return (_Insert(false, _Next._Mynode(), _Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert

; 732  : 				else

	jmp	SHORT $LN6@insert

; 733  : 					return (_Insert(true, _Where._Mynode(), _Val));

$LN317@insert:
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert
$LN6@insert:

; 734  : 				}
; 735  : 			else if (_DEBUG_LT_PRED(this->comp,

	jmp	$LN31@insert

; 736  : 				_Key(_Where._Mynode()), this->_Kfn(_Val))
; 737  : 				&& (++(_Next = _Where) == end()
; 738  : 					|| _DEBUG_LT_PRED(this->comp,

$LN319@insert:
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T267670[ebp], eax
	mov	ecx, DWORD PTR $T267670[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx]
	sbb	ecx, ecx
	neg	ecx
	movzx	edx, cl
	test	edx, edx
	je	$LN31@insert
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Next$[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T267696[ebp], edx
	mov	eax, DWORD PTR $T267696[ebp]
	mov	DWORD PTR $T267201[ebp], eax
	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::const_iterator::_Inc
	mov	ecx, DWORD PTR __Next$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T267201[ebp]
	sete	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN3@insert
	mov	ecx, DWORD PTR __Next$[ebp]
	mov	DWORD PTR $T267712[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T267712[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+12]
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN31@insert
$LN3@insert:

; 739  : 						this->_Kfn(_Val), _Key(_Next._Mynode()))))
; 740  : 				{	// insert after _Where
; 741  : 				if (_Isnil(_Right(_Where._Mynode())))

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T267735[ebp], ecx
	mov	edx, DWORD PTR $T267735[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+21]
	test	ecx, ecx
	je	SHORT $LN361@insert

; 742  : 					return (_Insert(false, _Where._Mynode(), _Val));

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN33@insert

; 743  : 				else

	jmp	SHORT $LN31@insert

; 744  : 					return (_Insert(true, _Next._Mynode(), _Val));

$LN361@insert:
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Next$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN33@insert
$LN31@insert:

; 745  : 				}
; 746  : 			}
; 747  : 
; 748  : 		return (insert(_Val).first);	// try usual insert if all else fails

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	lea	eax, DWORD PTR $T267202[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::insert
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN33@insert:

; 749  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBIH@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::insert
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$233703 = -4					; size = 4
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 1166 : 		{	// free entire subtree, recursively

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1167 : 		for (_Nodeptr _Pnode = _Rootnode; !_Isnil(_Pnode); _Rootnode = _Pnode)

	mov	eax, DWORD PTR __Rootnode$[ebp]
	mov	DWORD PTR __Pnode$233703[ebp], eax
	jmp	SHORT $LN6@Erase
$LN2@Erase:
	mov	ecx, DWORD PTR __Pnode$233703[ebp]
	mov	DWORD PTR __Rootnode$[ebp], ecx
$LN6@Erase:
	mov	edx, DWORD PTR __Pnode$233703[ebp]
	movsx	eax, BYTE PTR [edx+21]
	test	eax, eax
	jne	SHORT $LN4@Erase

; 1168 : 			{	// free subtrees, then node
; 1169 : 			_Erase(_Right(_Pnode));

	mov	ecx, DWORD PTR __Pnode$233703[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Erase

; 1170 : 			_Pnode = _Left(_Pnode);

	mov	eax, DWORD PTR __Pnode$233703[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$233703[ebp], ecx

; 1171 : 			this->_Alnod.destroy(_Rootnode);	// destroy, free erased node
; 1172 : 			this->_Alnod.deallocate(_Rootnode, 1);

	mov	edx, DWORD PTR __Rootnode$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1173 : 			}

	jmp	SHORT $LN2@Erase
$LN4@Erase:

; 1174 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Erase
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -92						; size = 4
$T268012 = -88						; size = 4
$T267978 = -84						; size = 4
$T267811 = -32						; size = 4
$T267798 = -28						; size = 4
$T267786 = -24						; size = 4
$T267776 = -20						; size = 4
$T267775 = -16						; size = 4
$T267774 = -12						; size = 4
$T267773 = -8						; size = 4
$T267772 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1420 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	DWORD PTR _this$[ebp], ecx

; 1421 : 		erase(begin(), end());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T267786[ebp], ecx
	mov	edx, DWORD PTR $T267786[ebp]
	mov	DWORD PTR $T267773[ebp], edx
	mov	eax, DWORD PTR $T267773[ebp]
	mov	DWORD PTR $T267772[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T267798[ebp], edx
	mov	eax, DWORD PTR $T267798[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T267811[ebp], ecx
	mov	edx, DWORD PTR $T267811[ebp]
	mov	DWORD PTR $T267775[ebp], edx
	mov	eax, DWORD PTR $T267775[ebp]
	mov	DWORD PTR $T267774[ebp], eax
	mov	ecx, DWORD PTR $T267772[ebp]
	push	ecx
	mov	edx, DWORD PTR $T267774[ebp]
	push	edx
	lea	eax, DWORD PTR $T267776[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase

; 1422 : 		this->_Alptr.destroy(&_Left(_Myhead));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T267978[ebp], edx

; 1423 : 		this->_Alptr.destroy(&_Parent(_Myhead));
; 1424 : 		this->_Alptr.destroy(&_Right(_Myhead));
; 1425 : 		this->_Alnod.deallocate(_Myhead, 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T268012[ebp], ecx
	mov	edx, DWORD PTR $T268012[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1426 : 		_Myhead = 0, _Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 1427 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvColorInfo@@@std@@YAPAPAVCvColorInfo@@IPAPAV1@@Z ; std::_Allocate<CvColorInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@KAXXZ ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$268027 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@2

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@2
	jmp	SHORT $LN3@Buy@2
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$268027[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$268027[ebp], 0
	jbe	SHORT $LN11@Buy@2
	mov	eax, DWORD PTR __Count$268027[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@2
$LN11@Buy@2:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@2:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@2

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@KAXXZ ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@2

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@2:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvColorInfo@@@std@@YAPAPAVCvColorInfo@@IPAPAV1@@Z ; std::_Allocate<CvColorInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@2:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@2:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T268093 = -28						; size = 4
$T268092 = -24						; size = 4
$T268088 = -20						; size = 4
$T268087 = -16						; size = 4
$T268076 = -12						; size = 4
$T268075 = -8						; size = 4
__Cat$268083 = -2					; size = 1
$T268080 = -1						; size = 1
?_Tidy@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@2

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T268088[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T268087[ebp], ecx
	mov	edx, DWORD PTR $T268088[ebp]
	mov	DWORD PTR $T268076[ebp], edx
	mov	eax, DWORD PTR $T268087[ebp]
	mov	DWORD PTR $T268075[ebp], eax
	mov	cl, BYTE PTR __Cat$268083[ebp]
	mov	BYTE PTR $T268080[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T268093[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T268092[ebp], eax
	mov	ecx, DWORD PTR $T268092[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@2:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvPlayerColorInfo@@@std@@YAPAPAVCvPlayerColorInfo@@IPAPAV1@@Z ; std::_Allocate<CvPlayerColorInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@KAXXZ ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$268108 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@3

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@3
	jmp	SHORT $LN3@Buy@3
$LN4@Buy@3:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$268108[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$268108[ebp], 0
	jbe	SHORT $LN11@Buy@3
	mov	eax, DWORD PTR __Count$268108[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@3
$LN11@Buy@3:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@3:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@3

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@KAXXZ ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@3

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@3:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvPlayerColorInfo@@@std@@YAPAPAVCvPlayerColorInfo@@IPAPAV1@@Z ; std::_Allocate<CvPlayerColorInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@3:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@3:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T268174 = -28						; size = 4
$T268173 = -24						; size = 4
$T268169 = -20						; size = 4
$T268168 = -16						; size = 4
$T268157 = -12						; size = 4
$T268156 = -8						; size = 4
__Cat$268163 = -2					; size = 1
$T268162 = -1						; size = 1
?_Tidy@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@3

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T268169[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T268168[ebp], ecx
	mov	edx, DWORD PTR $T268169[ebp]
	mov	DWORD PTR $T268157[ebp], edx
	mov	eax, DWORD PTR $T268168[ebp]
	mov	DWORD PTR $T268156[ebp], eax
	mov	cl, BYTE PTR __Cat$268163[ebp]
	mov	BYTE PTR $T268162[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T268174[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T268173[ebp], eax
	mov	ecx, DWORD PTR $T268173[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@3:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvTerrainInfo@@@std@@YAPAPAVCvTerrainInfo@@IPAPAV1@@Z ; std::_Allocate<CvTerrainInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@KAXXZ ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$268189 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@4

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@4
	jmp	SHORT $LN3@Buy@4
$LN4@Buy@4:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$268189[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$268189[ebp], 0
	jbe	SHORT $LN11@Buy@4
	mov	eax, DWORD PTR __Count$268189[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@4
$LN11@Buy@4:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@4:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@4

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@KAXXZ ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@4

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@4:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvTerrainInfo@@@std@@YAPAPAVCvTerrainInfo@@IPAPAV1@@Z ; std::_Allocate<CvTerrainInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@4:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@4:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T268255 = -28						; size = 4
$T268254 = -24						; size = 4
$T268250 = -20						; size = 4
$T268249 = -16						; size = 4
$T268238 = -12						; size = 4
$T268237 = -8						; size = 4
__Cat$268245 = -2					; size = 1
$T268243 = -1						; size = 1
?_Tidy@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@4

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T268250[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T268249[ebp], ecx
	mov	edx, DWORD PTR $T268250[ebp]
	mov	DWORD PTR $T268238[ebp], edx
	mov	eax, DWORD PTR $T268249[ebp]
	mov	DWORD PTR $T268237[ebp], eax
	mov	cl, BYTE PTR __Cat$268245[ebp]
	mov	BYTE PTR $T268243[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T268255[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T268254[ebp], eax
	mov	ecx, DWORD PTR $T268254[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@4:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvYieldInfo@@@std@@YAPAPAVCvYieldInfo@@IPAPAV1@@Z ; std::_Allocate<CvYieldInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@KAXXZ ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$268270 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@5

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@5
	jmp	SHORT $LN3@Buy@5
$LN4@Buy@5:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$268270[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$268270[ebp], 0
	jbe	SHORT $LN11@Buy@5
	mov	eax, DWORD PTR __Count$268270[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@5
$LN11@Buy@5:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@5:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@5

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@KAXXZ ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@5

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@5:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvYieldInfo@@@std@@YAPAPAVCvYieldInfo@@IPAPAV1@@Z ; std::_Allocate<CvYieldInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@5:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@5:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T268336 = -28						; size = 4
$T268335 = -24						; size = 4
$T268331 = -20						; size = 4
$T268330 = -16						; size = 4
$T268319 = -12						; size = 4
$T268318 = -8						; size = 4
__Cat$268324 = -2					; size = 1
$T268322 = -1						; size = 1
?_Tidy@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@5

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T268331[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T268330[ebp], ecx
	mov	edx, DWORD PTR $T268331[ebp]
	mov	DWORD PTR $T268319[ebp], edx
	mov	eax, DWORD PTR $T268330[ebp]
	mov	DWORD PTR $T268318[ebp], eax
	mov	cl, BYTE PTR __Cat$268324[ebp]
	mov	BYTE PTR $T268322[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T268336[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T268335[ebp], eax
	mov	ecx, DWORD PTR $T268335[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@5:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvRouteInfo@@@std@@YAPAPAVCvRouteInfo@@IPAPAV1@@Z ; std::_Allocate<CvRouteInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@KAXXZ ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$268353 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@6

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@6
	jmp	SHORT $LN3@Buy@6
$LN4@Buy@6:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$268353[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$268353[ebp], 0
	jbe	SHORT $LN11@Buy@6
	mov	eax, DWORD PTR __Count$268353[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@6
$LN11@Buy@6:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@6:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@6

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@KAXXZ ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@6

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@6:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvRouteInfo@@@std@@YAPAPAVCvRouteInfo@@IPAPAV1@@Z ; std::_Allocate<CvRouteInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@6:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@6:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T268417 = -28						; size = 4
$T268416 = -24						; size = 4
$T268412 = -20						; size = 4
$T268411 = -16						; size = 4
$T268400 = -12						; size = 4
$T268399 = -8						; size = 4
__Cat$268405 = -2					; size = 1
$T268403 = -1						; size = 1
?_Tidy@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@6

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T268412[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T268411[ebp], ecx
	mov	edx, DWORD PTR $T268412[ebp]
	mov	DWORD PTR $T268400[ebp], edx
	mov	eax, DWORD PTR $T268411[ebp]
	mov	DWORD PTR $T268399[ebp], eax
	mov	cl, BYTE PTR __Cat$268405[ebp]
	mov	BYTE PTR $T268403[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T268417[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T268416[ebp], eax
	mov	ecx, DWORD PTR $T268416[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@6:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvFeatureInfo@@@std@@YAPAPAVCvFeatureInfo@@IPAPAV1@@Z ; std::_Allocate<CvFeatureInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@KAXXZ ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$268434 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@7

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@7
	jmp	SHORT $LN3@Buy@7
$LN4@Buy@7:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$268434[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$268434[ebp], 0
	jbe	SHORT $LN11@Buy@7
	mov	eax, DWORD PTR __Count$268434[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@7
$LN11@Buy@7:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@7:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@7

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@KAXXZ ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@7

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@7:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvFeatureInfo@@@std@@YAPAPAVCvFeatureInfo@@IPAPAV1@@Z ; std::_Allocate<CvFeatureInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@7:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@7:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T268498 = -28						; size = 4
$T268497 = -24						; size = 4
$T268493 = -20						; size = 4
$T268492 = -16						; size = 4
$T268481 = -12						; size = 4
$T268480 = -8						; size = 4
__Cat$268487 = -2					; size = 1
$T268485 = -1						; size = 1
?_Tidy@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@7

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T268493[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T268492[ebp], ecx
	mov	edx, DWORD PTR $T268493[ebp]
	mov	DWORD PTR $T268481[ebp], edx
	mov	eax, DWORD PTR $T268492[ebp]
	mov	DWORD PTR $T268480[ebp], eax
	mov	cl, BYTE PTR __Cat$268487[ebp]
	mov	BYTE PTR $T268485[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T268498[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T268497[ebp], eax
	mov	ecx, DWORD PTR $T268497[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@7:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvResourceClassInfo@@@std@@YAPAPAVCvResourceClassInfo@@IPAPAV1@@Z ; std::_Allocate<CvResourceClassInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@KAXXZ ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$268515 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@8

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@8
	jmp	SHORT $LN3@Buy@8
$LN4@Buy@8:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$268515[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$268515[ebp], 0
	jbe	SHORT $LN11@Buy@8
	mov	eax, DWORD PTR __Count$268515[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@8
$LN11@Buy@8:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@8:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@8

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@KAXXZ ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@8

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@8:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvResourceClassInfo@@@std@@YAPAPAVCvResourceClassInfo@@IPAPAV1@@Z ; std::_Allocate<CvResourceClassInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@8:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@8:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T268579 = -28						; size = 4
$T268578 = -24						; size = 4
$T268574 = -20						; size = 4
$T268573 = -16						; size = 4
$T268562 = -12						; size = 4
$T268561 = -8						; size = 4
__Cat$268568 = -2					; size = 1
$T268566 = -1						; size = 1
?_Tidy@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@8

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T268574[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T268573[ebp], ecx
	mov	edx, DWORD PTR $T268574[ebp]
	mov	DWORD PTR $T268562[ebp], edx
	mov	eax, DWORD PTR $T268573[ebp]
	mov	DWORD PTR $T268561[ebp], eax
	mov	cl, BYTE PTR __Cat$268568[ebp]
	mov	BYTE PTR $T268566[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T268579[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T268578[ebp], eax
	mov	ecx, DWORD PTR $T268578[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@8:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvResourceInfo@@@std@@YAPAPAVCvResourceInfo@@IPAPAV1@@Z ; std::_Allocate<CvResourceInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@KAXXZ ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$268596 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@9

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@9
	jmp	SHORT $LN3@Buy@9
$LN4@Buy@9:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$268596[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$268596[ebp], 0
	jbe	SHORT $LN11@Buy@9
	mov	eax, DWORD PTR __Count$268596[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@9
$LN11@Buy@9:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@9:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@9

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@KAXXZ ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@9

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@9:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvResourceInfo@@@std@@YAPAPAVCvResourceInfo@@IPAPAV1@@Z ; std::_Allocate<CvResourceInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@9:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@9:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T268660 = -28						; size = 4
$T268659 = -24						; size = 4
$T268655 = -20						; size = 4
$T268654 = -16						; size = 4
$T268643 = -12						; size = 4
$T268642 = -8						; size = 4
__Cat$268649 = -2					; size = 1
$T268647 = -1						; size = 1
?_Tidy@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@9

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T268655[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T268654[ebp], ecx
	mov	edx, DWORD PTR $T268655[ebp]
	mov	DWORD PTR $T268643[ebp], edx
	mov	eax, DWORD PTR $T268654[ebp]
	mov	DWORD PTR $T268642[ebp], eax
	mov	cl, BYTE PTR __Cat$268649[ebp]
	mov	BYTE PTR $T268647[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T268660[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T268659[ebp], eax
	mov	ecx, DWORD PTR $T268659[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@9:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvBuildInfo@@@std@@YAPAPAVCvBuildInfo@@IPAPAV1@@Z ; std::_Allocate<CvBuildInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@KAXXZ ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$268677 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@10

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@10
	jmp	SHORT $LN3@Buy@10
$LN4@Buy@10:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$268677[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$268677[ebp], 0
	jbe	SHORT $LN11@Buy@10
	mov	eax, DWORD PTR __Count$268677[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@10
$LN11@Buy@10:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@10:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@10

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@KAXXZ ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@10

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@10:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvBuildInfo@@@std@@YAPAPAVCvBuildInfo@@IPAPAV1@@Z ; std::_Allocate<CvBuildInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@10:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@10:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T268741 = -28						; size = 4
$T268740 = -24						; size = 4
$T268736 = -20						; size = 4
$T268735 = -16						; size = 4
$T268724 = -12						; size = 4
$T268723 = -8						; size = 4
__Cat$268731 = -2					; size = 1
$T268729 = -1						; size = 1
?_Tidy@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@10

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T268736[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T268735[ebp], ecx
	mov	edx, DWORD PTR $T268736[ebp]
	mov	DWORD PTR $T268724[ebp], edx
	mov	eax, DWORD PTR $T268735[ebp]
	mov	DWORD PTR $T268723[ebp], eax
	mov	cl, BYTE PTR __Cat$268731[ebp]
	mov	BYTE PTR $T268729[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T268741[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T268740[ebp], eax
	mov	ecx, DWORD PTR $T268740[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@10:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvHandicapInfo@@@std@@YAPAPAVCvHandicapInfo@@IPAPAV1@@Z ; std::_Allocate<CvHandicapInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@KAXXZ ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$268759 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@11

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@11
	jmp	SHORT $LN3@Buy@11
$LN4@Buy@11:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$268759[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$268759[ebp], 0
	jbe	SHORT $LN11@Buy@11
	mov	eax, DWORD PTR __Count$268759[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@11
$LN11@Buy@11:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@11:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@11

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@KAXXZ ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@11

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@11:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvHandicapInfo@@@std@@YAPAPAVCvHandicapInfo@@IPAPAV1@@Z ; std::_Allocate<CvHandicapInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@11:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@11:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T268822 = -28						; size = 4
$T268821 = -24						; size = 4
$T268817 = -20						; size = 4
$T268816 = -16						; size = 4
$T268805 = -12						; size = 4
$T268804 = -8						; size = 4
__Cat$268812 = -2					; size = 1
$T268810 = -1						; size = 1
?_Tidy@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@11

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T268817[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T268816[ebp], ecx
	mov	edx, DWORD PTR $T268817[ebp]
	mov	DWORD PTR $T268805[ebp], edx
	mov	eax, DWORD PTR $T268816[ebp]
	mov	DWORD PTR $T268804[ebp], eax
	mov	cl, BYTE PTR __Cat$268812[ebp]
	mov	BYTE PTR $T268810[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T268822[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T268821[ebp], eax
	mov	ecx, DWORD PTR $T268821[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@11:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvGameSpeedInfo@@@std@@YAPAPAVCvGameSpeedInfo@@IPAPAV1@@Z ; std::_Allocate<CvGameSpeedInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@KAXXZ ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$268840 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@12

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@12
	jmp	SHORT $LN3@Buy@12
$LN4@Buy@12:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$268840[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$268840[ebp], 0
	jbe	SHORT $LN11@Buy@12
	mov	eax, DWORD PTR __Count$268840[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@12
$LN11@Buy@12:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@12:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@12

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@KAXXZ ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@12

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@12:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvGameSpeedInfo@@@std@@YAPAPAVCvGameSpeedInfo@@IPAPAV1@@Z ; std::_Allocate<CvGameSpeedInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@12:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@12:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T268903 = -28						; size = 4
$T268902 = -24						; size = 4
$T268898 = -20						; size = 4
$T268897 = -16						; size = 4
$T268886 = -12						; size = 4
$T268885 = -8						; size = 4
__Cat$268893 = -2					; size = 1
$T268891 = -1						; size = 1
?_Tidy@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@12

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T268898[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T268897[ebp], ecx
	mov	edx, DWORD PTR $T268898[ebp]
	mov	DWORD PTR $T268886[ebp], edx
	mov	eax, DWORD PTR $T268897[ebp]
	mov	DWORD PTR $T268885[ebp], eax
	mov	cl, BYTE PTR __Cat$268893[ebp]
	mov	BYTE PTR $T268891[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T268903[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T268902[ebp], eax
	mov	ecx, DWORD PTR $T268902[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@12:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvTurnTimerInfo@@@std@@YAPAPAVCvTurnTimerInfo@@IPAPAV1@@Z ; std::_Allocate<CvTurnTimerInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@KAXXZ ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$268921 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@13

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@13
	jmp	SHORT $LN3@Buy@13
$LN4@Buy@13:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$268921[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$268921[ebp], 0
	jbe	SHORT $LN11@Buy@13
	mov	eax, DWORD PTR __Count$268921[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@13
$LN11@Buy@13:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@13:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@13

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@KAXXZ ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@13

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@13:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvTurnTimerInfo@@@std@@YAPAPAVCvTurnTimerInfo@@IPAPAV1@@Z ; std::_Allocate<CvTurnTimerInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@13:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@13:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T268984 = -28						; size = 4
$T268983 = -24						; size = 4
$T268979 = -20						; size = 4
$T268978 = -16						; size = 4
$T268967 = -12						; size = 4
$T268966 = -8						; size = 4
__Cat$268974 = -2					; size = 1
$T268972 = -1						; size = 1
?_Tidy@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@13

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T268979[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T268978[ebp], ecx
	mov	edx, DWORD PTR $T268979[ebp]
	mov	DWORD PTR $T268967[ebp], edx
	mov	eax, DWORD PTR $T268978[ebp]
	mov	DWORD PTR $T268966[ebp], eax
	mov	cl, BYTE PTR __Cat$268974[ebp]
	mov	BYTE PTR $T268972[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T268984[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T268983[ebp], eax
	mov	ecx, DWORD PTR $T268983[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@13:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvCivilizationInfo@@@std@@YAPAPAVCvCivilizationInfo@@IPAPAV1@@Z ; std::_Allocate<CvCivilizationInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@KAXXZ ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$268999 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@14

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@14
	jmp	SHORT $LN3@Buy@14
$LN4@Buy@14:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$268999[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$268999[ebp], 0
	jbe	SHORT $LN11@Buy@14
	mov	eax, DWORD PTR __Count$268999[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@14
$LN11@Buy@14:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@14:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@14

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@KAXXZ ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@14

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@14:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvCivilizationInfo@@@std@@YAPAPAVCvCivilizationInfo@@IPAPAV1@@Z ; std::_Allocate<CvCivilizationInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@14:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@14:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T269065 = -28						; size = 4
$T269064 = -24						; size = 4
$T269060 = -20						; size = 4
$T269059 = -16						; size = 4
$T269048 = -12						; size = 4
$T269047 = -8						; size = 4
__Cat$269055 = -2					; size = 1
$T269053 = -1						; size = 1
?_Tidy@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@14

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T269060[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T269059[ebp], ecx
	mov	edx, DWORD PTR $T269060[ebp]
	mov	DWORD PTR $T269048[ebp], edx
	mov	eax, DWORD PTR $T269059[ebp]
	mov	DWORD PTR $T269047[ebp], eax
	mov	cl, BYTE PTR __Cat$269055[ebp]
	mov	BYTE PTR $T269053[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T269065[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T269064[ebp], eax
	mov	ecx, DWORD PTR $T269064[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@14:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvMinorCivInfo@@@std@@YAPAPAVCvMinorCivInfo@@IPAPAV1@@Z ; std::_Allocate<CvMinorCivInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@KAXXZ ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$269080 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@15

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@15
	jmp	SHORT $LN3@Buy@15
$LN4@Buy@15:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$269080[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$269080[ebp], 0
	jbe	SHORT $LN11@Buy@15
	mov	eax, DWORD PTR __Count$269080[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@15
$LN11@Buy@15:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@15:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@15

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@KAXXZ ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@15

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@15:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvMinorCivInfo@@@std@@YAPAPAVCvMinorCivInfo@@IPAPAV1@@Z ; std::_Allocate<CvMinorCivInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@15:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@15:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T269146 = -28						; size = 4
$T269145 = -24						; size = 4
$T269141 = -20						; size = 4
$T269140 = -16						; size = 4
$T269129 = -12						; size = 4
$T269128 = -8						; size = 4
__Cat$269136 = -2					; size = 1
$T269134 = -1						; size = 1
?_Tidy@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@15

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T269141[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T269140[ebp], ecx
	mov	edx, DWORD PTR $T269141[ebp]
	mov	DWORD PTR $T269129[ebp], edx
	mov	eax, DWORD PTR $T269140[ebp]
	mov	DWORD PTR $T269128[ebp], eax
	mov	cl, BYTE PTR __Cat$269136[ebp]
	mov	BYTE PTR $T269134[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T269146[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T269145[ebp], eax
	mov	ecx, DWORD PTR $T269145[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@15:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvLeaderHeadInfo@@@std@@YAPAPAVCvLeaderHeadInfo@@IPAPAV1@@Z ; std::_Allocate<CvLeaderHeadInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@KAXXZ ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$269161 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@16

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@16
	jmp	SHORT $LN3@Buy@16
$LN4@Buy@16:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$269161[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$269161[ebp], 0
	jbe	SHORT $LN11@Buy@16
	mov	eax, DWORD PTR __Count$269161[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@16
$LN11@Buy@16:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@16:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@16

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@KAXXZ ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@16

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@16:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvLeaderHeadInfo@@@std@@YAPAPAVCvLeaderHeadInfo@@IPAPAV1@@Z ; std::_Allocate<CvLeaderHeadInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@16:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@16:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T269227 = -28						; size = 4
$T269226 = -24						; size = 4
$T269222 = -20						; size = 4
$T269221 = -16						; size = 4
$T269210 = -12						; size = 4
$T269209 = -8						; size = 4
__Cat$269217 = -2					; size = 1
$T269215 = -1						; size = 1
?_Tidy@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@16

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T269222[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T269221[ebp], ecx
	mov	edx, DWORD PTR $T269222[ebp]
	mov	DWORD PTR $T269210[ebp], edx
	mov	eax, DWORD PTR $T269221[ebp]
	mov	DWORD PTR $T269209[ebp], eax
	mov	cl, BYTE PTR __Cat$269217[ebp]
	mov	BYTE PTR $T269215[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T269227[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T269226[ebp], eax
	mov	ecx, DWORD PTR $T269226[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@16:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvProcessInfo@@@std@@YAPAPAVCvProcessInfo@@IPAPAV1@@Z ; std::_Allocate<CvProcessInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@KAXXZ ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$269242 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@17

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@17
	jmp	SHORT $LN3@Buy@17
$LN4@Buy@17:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$269242[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$269242[ebp], 0
	jbe	SHORT $LN11@Buy@17
	mov	eax, DWORD PTR __Count$269242[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@17
$LN11@Buy@17:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@17:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@17

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@KAXXZ ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@17

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@17:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvProcessInfo@@@std@@YAPAPAVCvProcessInfo@@IPAPAV1@@Z ; std::_Allocate<CvProcessInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@17:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@17:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T269308 = -28						; size = 4
$T269307 = -24						; size = 4
$T269303 = -20						; size = 4
$T269302 = -16						; size = 4
$T269291 = -12						; size = 4
$T269290 = -8						; size = 4
__Cat$269298 = -2					; size = 1
$T269296 = -1						; size = 1
?_Tidy@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@17

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T269303[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T269302[ebp], ecx
	mov	edx, DWORD PTR $T269303[ebp]
	mov	DWORD PTR $T269291[ebp], edx
	mov	eax, DWORD PTR $T269302[ebp]
	mov	DWORD PTR $T269290[ebp], eax
	mov	cl, BYTE PTR __Cat$269298[ebp]
	mov	BYTE PTR $T269296[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T269308[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T269307[ebp], eax
	mov	ecx, DWORD PTR $T269307[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@17:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvVoteInfo@@@std@@YAPAPAVCvVoteInfo@@IPAPAV1@@Z ; std::_Allocate<CvVoteInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@KAXXZ ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$269324 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@18

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@18
	jmp	SHORT $LN3@Buy@18
$LN4@Buy@18:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$269324[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$269324[ebp], 0
	jbe	SHORT $LN11@Buy@18
	mov	eax, DWORD PTR __Count$269324[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@18
$LN11@Buy@18:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@18:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@18

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@KAXXZ ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@18

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@18:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvVoteInfo@@@std@@YAPAPAVCvVoteInfo@@IPAPAV1@@Z ; std::_Allocate<CvVoteInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@18:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@18:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T269389 = -28						; size = 4
$T269388 = -24						; size = 4
$T269384 = -20						; size = 4
$T269383 = -16						; size = 4
$T269372 = -12						; size = 4
$T269371 = -8						; size = 4
__Cat$269378 = -2					; size = 1
$T269375 = -1						; size = 1
?_Tidy@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@18

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T269384[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T269383[ebp], ecx
	mov	edx, DWORD PTR $T269384[ebp]
	mov	DWORD PTR $T269372[ebp], edx
	mov	eax, DWORD PTR $T269383[ebp]
	mov	DWORD PTR $T269371[ebp], eax
	mov	cl, BYTE PTR __Cat$269378[ebp]
	mov	BYTE PTR $T269375[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T269389[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T269388[ebp], eax
	mov	ecx, DWORD PTR $T269388[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@18:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvBuildingClassInfo@@@std@@YAPAPAVCvBuildingClassInfo@@IPAPAV1@@Z ; std::_Allocate<CvBuildingClassInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@KAXXZ ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$269406 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@19

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@19
	jmp	SHORT $LN3@Buy@19
$LN4@Buy@19:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$269406[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$269406[ebp], 0
	jbe	SHORT $LN11@Buy@19
	mov	eax, DWORD PTR __Count$269406[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@19
$LN11@Buy@19:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@19:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@19

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@KAXXZ ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@19

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@19:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvBuildingClassInfo@@@std@@YAPAPAVCvBuildingClassInfo@@IPAPAV1@@Z ; std::_Allocate<CvBuildingClassInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@19:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@19:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T269470 = -28						; size = 4
$T269469 = -24						; size = 4
$T269465 = -20						; size = 4
$T269464 = -16						; size = 4
$T269453 = -12						; size = 4
$T269452 = -8						; size = 4
__Cat$269458 = -2					; size = 1
$T269456 = -1						; size = 1
?_Tidy@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@19

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T269465[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T269464[ebp], ecx
	mov	edx, DWORD PTR $T269465[ebp]
	mov	DWORD PTR $T269453[ebp], edx
	mov	eax, DWORD PTR $T269464[ebp]
	mov	DWORD PTR $T269452[ebp], eax
	mov	cl, BYTE PTR __Cat$269458[ebp]
	mov	BYTE PTR $T269456[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T269470[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T269469[ebp], eax
	mov	ecx, DWORD PTR $T269469[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@19:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvUnitClassInfo@@@std@@YAPAPAVCvUnitClassInfo@@IPAPAV1@@Z ; std::_Allocate<CvUnitClassInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@KAXXZ ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$269487 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@20

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@20
	jmp	SHORT $LN3@Buy@20
$LN4@Buy@20:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$269487[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$269487[ebp], 0
	jbe	SHORT $LN11@Buy@20
	mov	eax, DWORD PTR __Count$269487[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@20
$LN11@Buy@20:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@20:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@20

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@KAXXZ ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@20

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@20:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvUnitClassInfo@@@std@@YAPAPAVCvUnitClassInfo@@IPAPAV1@@Z ; std::_Allocate<CvUnitClassInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@20:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@20:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T269551 = -28						; size = 4
$T269550 = -24						; size = 4
$T269546 = -20						; size = 4
$T269545 = -16						; size = 4
$T269534 = -12						; size = 4
$T269533 = -8						; size = 4
__Cat$269539 = -2					; size = 1
$T269537 = -1						; size = 1
?_Tidy@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@20

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T269546[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T269545[ebp], ecx
	mov	edx, DWORD PTR $T269546[ebp]
	mov	DWORD PTR $T269534[ebp], edx
	mov	eax, DWORD PTR $T269545[ebp]
	mov	DWORD PTR $T269533[ebp], eax
	mov	cl, BYTE PTR __Cat$269539[ebp]
	mov	BYTE PTR $T269537[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T269551[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T269550[ebp], eax
	mov	ecx, DWORD PTR $T269550[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@20:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvSpecialUnitInfo@@@std@@YAPAPAVCvSpecialUnitInfo@@IPAPAV1@@Z ; std::_Allocate<CvSpecialUnitInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@KAXXZ ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$269568 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@21

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@21
	jmp	SHORT $LN3@Buy@21
$LN4@Buy@21:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$269568[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$269568[ebp], 0
	jbe	SHORT $LN11@Buy@21
	mov	eax, DWORD PTR __Count$269568[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@21
$LN11@Buy@21:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@21:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@21

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@KAXXZ ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@21

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@21:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvSpecialUnitInfo@@@std@@YAPAPAVCvSpecialUnitInfo@@IPAPAV1@@Z ; std::_Allocate<CvSpecialUnitInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@21:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@21:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T269632 = -28						; size = 4
$T269631 = -24						; size = 4
$T269627 = -20						; size = 4
$T269626 = -16						; size = 4
$T269615 = -12						; size = 4
$T269614 = -8						; size = 4
__Cat$269620 = -2					; size = 1
$T269618 = -1						; size = 1
?_Tidy@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@21

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T269627[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T269626[ebp], ecx
	mov	edx, DWORD PTR $T269627[ebp]
	mov	DWORD PTR $T269615[ebp], edx
	mov	eax, DWORD PTR $T269626[ebp]
	mov	DWORD PTR $T269614[ebp], eax
	mov	cl, BYTE PTR __Cat$269620[ebp]
	mov	BYTE PTR $T269618[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T269632[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T269631[ebp], eax
	mov	ecx, DWORD PTR $T269631[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@21:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvVoteSourceInfo@@@std@@YAPAPAVCvVoteSourceInfo@@IPAPAV1@@Z ; std::_Allocate<CvVoteSourceInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@KAXXZ ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$269649 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@22

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@22
	jmp	SHORT $LN3@Buy@22
$LN4@Buy@22:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$269649[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$269649[ebp], 0
	jbe	SHORT $LN11@Buy@22
	mov	eax, DWORD PTR __Count$269649[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@22
$LN11@Buy@22:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@22:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@22

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@KAXXZ ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@22

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@22:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvVoteSourceInfo@@@std@@YAPAPAVCvVoteSourceInfo@@IPAPAV1@@Z ; std::_Allocate<CvVoteSourceInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@22:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@22:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T269713 = -28						; size = 4
$T269712 = -24						; size = 4
$T269708 = -20						; size = 4
$T269707 = -16						; size = 4
$T269696 = -12						; size = 4
$T269695 = -8						; size = 4
__Cat$269701 = -2					; size = 1
$T269699 = -1						; size = 1
?_Tidy@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@22

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T269708[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T269707[ebp], ecx
	mov	edx, DWORD PTR $T269708[ebp]
	mov	DWORD PTR $T269696[ebp], edx
	mov	eax, DWORD PTR $T269707[ebp]
	mov	DWORD PTR $T269695[ebp], eax
	mov	cl, BYTE PTR __Cat$269701[ebp]
	mov	BYTE PTR $T269699[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T269713[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T269712[ebp], eax
	mov	ecx, DWORD PTR $T269712[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@22:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvBaseInfo@@@std@@YAPAPAVCvBaseInfo@@IPAPAV1@@Z ; std::_Allocate<CvBaseInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@KAXXZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$269730 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@23

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@23
	jmp	SHORT $LN3@Buy@23
$LN4@Buy@23:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$269730[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$269730[ebp], 0
	jbe	SHORT $LN11@Buy@23
	mov	eax, DWORD PTR __Count$269730[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@23
$LN11@Buy@23:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@23:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@23

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@KAXXZ ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@23

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@23:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvBaseInfo@@@std@@YAPAPAVCvBaseInfo@@IPAPAV1@@Z ; std::_Allocate<CvBaseInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@23:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@23:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T269794 = -28						; size = 4
$T269793 = -24						; size = 4
$T269789 = -20						; size = 4
$T269788 = -16						; size = 4
$T269777 = -12						; size = 4
$T269776 = -8						; size = 4
__Cat$269782 = -2					; size = 1
$T269780 = -1						; size = 1
?_Tidy@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@23

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T269789[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T269788[ebp], ecx
	mov	edx, DWORD PTR $T269789[ebp]
	mov	DWORD PTR $T269777[ebp], edx
	mov	eax, DWORD PTR $T269788[ebp]
	mov	DWORD PTR $T269776[ebp], eax
	mov	cl, BYTE PTR __Cat$269782[ebp]
	mov	BYTE PTR $T269780[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T269794[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T269793[ebp], eax
	mov	ecx, DWORD PTR $T269793[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@23:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvGameOptionInfo@@@std@@YAPAPAVCvGameOptionInfo@@IPAPAV1@@Z ; std::_Allocate<CvGameOptionInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@KAXXZ ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$269811 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@24

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@24
	jmp	SHORT $LN3@Buy@24
$LN4@Buy@24:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$269811[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$269811[ebp], 0
	jbe	SHORT $LN11@Buy@24
	mov	eax, DWORD PTR __Count$269811[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@24
$LN11@Buy@24:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@24:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@24

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@KAXXZ ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@24

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@24:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvGameOptionInfo@@@std@@YAPAPAVCvGameOptionInfo@@IPAPAV1@@Z ; std::_Allocate<CvGameOptionInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@24:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@24:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T269875 = -28						; size = 4
$T269874 = -24						; size = 4
$T269870 = -20						; size = 4
$T269869 = -16						; size = 4
$T269858 = -12						; size = 4
$T269857 = -8						; size = 4
__Cat$269863 = -2					; size = 1
$T269861 = -1						; size = 1
?_Tidy@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@24

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T269870[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T269869[ebp], ecx
	mov	edx, DWORD PTR $T269870[ebp]
	mov	DWORD PTR $T269858[ebp], edx
	mov	eax, DWORD PTR $T269869[ebp]
	mov	DWORD PTR $T269857[ebp], eax
	mov	cl, BYTE PTR __Cat$269863[ebp]
	mov	BYTE PTR $T269861[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T269875[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T269874[ebp], eax
	mov	ecx, DWORD PTR $T269874[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@24:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvMPOptionInfo@@@std@@YAPAPAVCvMPOptionInfo@@IPAPAV1@@Z ; std::_Allocate<CvMPOptionInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@KAXXZ ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$269892 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@25

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@25
	jmp	SHORT $LN3@Buy@25
$LN4@Buy@25:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$269892[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$269892[ebp], 0
	jbe	SHORT $LN11@Buy@25
	mov	eax, DWORD PTR __Count$269892[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@25
$LN11@Buy@25:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@25:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@25

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@KAXXZ ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@25

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@25:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvMPOptionInfo@@@std@@YAPAPAVCvMPOptionInfo@@IPAPAV1@@Z ; std::_Allocate<CvMPOptionInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@25:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@25:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T269956 = -28						; size = 4
$T269955 = -24						; size = 4
$T269951 = -20						; size = 4
$T269950 = -16						; size = 4
$T269939 = -12						; size = 4
$T269938 = -8						; size = 4
__Cat$269944 = -2					; size = 1
$T269942 = -1						; size = 1
?_Tidy@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@25

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T269951[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T269950[ebp], ecx
	mov	edx, DWORD PTR $T269951[ebp]
	mov	DWORD PTR $T269939[ebp], edx
	mov	eax, DWORD PTR $T269950[ebp]
	mov	DWORD PTR $T269938[ebp], eax
	mov	cl, BYTE PTR __Cat$269944[ebp]
	mov	BYTE PTR $T269942[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T269956[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T269955[ebp], eax
	mov	ecx, DWORD PTR $T269955[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@25:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvPlayerOptionInfo@@@std@@YAPAPAVCvPlayerOptionInfo@@IPAPAV1@@Z ; std::_Allocate<CvPlayerOptionInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@KAXXZ ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$269973 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@26

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@26
	jmp	SHORT $LN3@Buy@26
$LN4@Buy@26:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$269973[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$269973[ebp], 0
	jbe	SHORT $LN11@Buy@26
	mov	eax, DWORD PTR __Count$269973[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@26
$LN11@Buy@26:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@26:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@26

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@KAXXZ ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@26

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@26:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvPlayerOptionInfo@@@std@@YAPAPAVCvPlayerOptionInfo@@IPAPAV1@@Z ; std::_Allocate<CvPlayerOptionInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@26:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@26:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T270037 = -28						; size = 4
$T270036 = -24						; size = 4
$T270032 = -20						; size = 4
$T270031 = -16						; size = 4
$T270020 = -12						; size = 4
$T270019 = -8						; size = 4
__Cat$270025 = -2					; size = 1
$T270023 = -1						; size = 1
?_Tidy@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@26

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T270032[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T270031[ebp], ecx
	mov	edx, DWORD PTR $T270032[ebp]
	mov	DWORD PTR $T270020[ebp], edx
	mov	eax, DWORD PTR $T270031[ebp]
	mov	DWORD PTR $T270019[ebp], eax
	mov	cl, BYTE PTR __Cat$270025[ebp]
	mov	BYTE PTR $T270023[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T270037[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T270036[ebp], eax
	mov	ecx, DWORD PTR $T270036[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@26:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvSpecialistInfo@@@std@@YAPAPAVCvSpecialistInfo@@IPAPAV1@@Z ; std::_Allocate<CvSpecialistInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@KAXXZ ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$270051 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@27

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@27
	jmp	SHORT $LN3@Buy@27
$LN4@Buy@27:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$270051[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$270051[ebp], 0
	jbe	SHORT $LN11@Buy@27
	mov	eax, DWORD PTR __Count$270051[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@27
$LN11@Buy@27:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@27:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@27

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@KAXXZ ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@27

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@27:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvSpecialistInfo@@@std@@YAPAPAVCvSpecialistInfo@@IPAPAV1@@Z ; std::_Allocate<CvSpecialistInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@27:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@27:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T270118 = -28						; size = 4
$T270117 = -24						; size = 4
$T270113 = -20						; size = 4
$T270112 = -16						; size = 4
$T270101 = -12						; size = 4
$T270100 = -8						; size = 4
__Cat$270107 = -2					; size = 1
$T270105 = -1						; size = 1
?_Tidy@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@27

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T270113[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T270112[ebp], ecx
	mov	edx, DWORD PTR $T270113[ebp]
	mov	DWORD PTR $T270101[ebp], edx
	mov	eax, DWORD PTR $T270112[ebp]
	mov	DWORD PTR $T270100[ebp], eax
	mov	cl, BYTE PTR __Cat$270107[ebp]
	mov	BYTE PTR $T270105[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T270118[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T270117[ebp], eax
	mov	ecx, DWORD PTR $T270117[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@27:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvActionInfo@@@std@@YAPAPAVCvActionInfo@@IPAPAV1@@Z ; std::_Allocate<CvActionInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@KAXXZ ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$270132 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@28

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@28
	jmp	SHORT $LN3@Buy@28
$LN4@Buy@28:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$270132[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$270132[ebp], 0
	jbe	SHORT $LN11@Buy@28
	mov	eax, DWORD PTR __Count$270132[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@28
$LN11@Buy@28:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@28:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@28

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@KAXXZ ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@28

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@28:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvActionInfo@@@std@@YAPAPAVCvActionInfo@@IPAPAV1@@Z ; std::_Allocate<CvActionInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@28:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@28:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T270199 = -28						; size = 4
$T270198 = -24						; size = 4
$T270194 = -20						; size = 4
$T270193 = -16						; size = 4
$T270182 = -12						; size = 4
$T270181 = -8						; size = 4
__Cat$270188 = -2					; size = 1
$T270186 = -1						; size = 1
?_Tidy@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@28

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T270194[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T270193[ebp], ecx
	mov	edx, DWORD PTR $T270194[ebp]
	mov	DWORD PTR $T270182[ebp], edx
	mov	eax, DWORD PTR $T270193[ebp]
	mov	DWORD PTR $T270181[ebp], eax
	mov	cl, BYTE PTR __Cat$270188[ebp]
	mov	BYTE PTR $T270186[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T270199[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T270198[ebp], eax
	mov	ecx, DWORD PTR $T270198[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@28:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvMissionInfo@@@std@@YAPAPAVCvMissionInfo@@IPAPAV1@@Z ; std::_Allocate<CvMissionInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@KAXXZ ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$270213 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@29

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@29
	jmp	SHORT $LN3@Buy@29
$LN4@Buy@29:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$270213[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$270213[ebp], 0
	jbe	SHORT $LN11@Buy@29
	mov	eax, DWORD PTR __Count$270213[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@29
$LN11@Buy@29:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@29:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@29

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@KAXXZ ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@29

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@29:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvMissionInfo@@@std@@YAPAPAVCvMissionInfo@@IPAPAV1@@Z ; std::_Allocate<CvMissionInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@29:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@29:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T270280 = -28						; size = 4
$T270279 = -24						; size = 4
$T270275 = -20						; size = 4
$T270274 = -16						; size = 4
$T270263 = -12						; size = 4
$T270262 = -8						; size = 4
__Cat$270270 = -2					; size = 1
$T270268 = -1						; size = 1
?_Tidy@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@29

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T270275[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T270274[ebp], ecx
	mov	edx, DWORD PTR $T270275[ebp]
	mov	DWORD PTR $T270263[ebp], edx
	mov	eax, DWORD PTR $T270274[ebp]
	mov	DWORD PTR $T270262[ebp], eax
	mov	cl, BYTE PTR __Cat$270270[ebp]
	mov	BYTE PTR $T270268[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T270280[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T270279[ebp], eax
	mov	ecx, DWORD PTR $T270279[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@29:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvControlInfo@@@std@@YAPAPAVCvControlInfo@@IPAPAV1@@Z ; std::_Allocate<CvControlInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@KAXXZ ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$270295 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@30

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@30
	jmp	SHORT $LN3@Buy@30
$LN4@Buy@30:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$270295[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$270295[ebp], 0
	jbe	SHORT $LN11@Buy@30
	mov	eax, DWORD PTR __Count$270295[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@30
$LN11@Buy@30:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@30:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@30

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@KAXXZ ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@30

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@30:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvControlInfo@@@std@@YAPAPAVCvControlInfo@@IPAPAV1@@Z ; std::_Allocate<CvControlInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@30:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@30:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T270361 = -28						; size = 4
$T270360 = -24						; size = 4
$T270356 = -20						; size = 4
$T270355 = -16						; size = 4
$T270344 = -12						; size = 4
$T270343 = -8						; size = 4
__Cat$270348 = -2					; size = 1
$T270346 = -1						; size = 1
?_Tidy@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@30

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T270356[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T270355[ebp], ecx
	mov	edx, DWORD PTR $T270356[ebp]
	mov	DWORD PTR $T270344[ebp], edx
	mov	eax, DWORD PTR $T270355[ebp]
	mov	DWORD PTR $T270343[ebp], eax
	mov	cl, BYTE PTR __Cat$270348[ebp]
	mov	BYTE PTR $T270346[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T270361[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T270360[ebp], eax
	mov	ecx, DWORD PTR $T270360[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@30:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvCommandInfo@@@std@@YAPAPAVCvCommandInfo@@IPAPAV1@@Z ; std::_Allocate<CvCommandInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@KAXXZ ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$270378 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@31

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@31
	jmp	SHORT $LN3@Buy@31
$LN4@Buy@31:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$270378[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$270378[ebp], 0
	jbe	SHORT $LN11@Buy@31
	mov	eax, DWORD PTR __Count$270378[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@31
$LN11@Buy@31:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@31:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@31

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@KAXXZ ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@31

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@31:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvCommandInfo@@@std@@YAPAPAVCvCommandInfo@@IPAPAV1@@Z ; std::_Allocate<CvCommandInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@31:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@31:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T270442 = -28						; size = 4
$T270441 = -24						; size = 4
$T270437 = -20						; size = 4
$T270436 = -16						; size = 4
$T270425 = -12						; size = 4
$T270424 = -8						; size = 4
__Cat$270431 = -2					; size = 1
$T270428 = -1						; size = 1
?_Tidy@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@31

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T270437[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T270436[ebp], ecx
	mov	edx, DWORD PTR $T270437[ebp]
	mov	DWORD PTR $T270425[ebp], edx
	mov	eax, DWORD PTR $T270436[ebp]
	mov	DWORD PTR $T270424[ebp], eax
	mov	cl, BYTE PTR __Cat$270431[ebp]
	mov	BYTE PTR $T270428[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T270442[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T270441[ebp], eax
	mov	ecx, DWORD PTR $T270441[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@31:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvAutomateInfo@@@std@@YAPAPAVCvAutomateInfo@@IPAPAV1@@Z ; std::_Allocate<CvAutomateInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@KAXXZ ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$270460 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@32

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@32
	jmp	SHORT $LN3@Buy@32
$LN4@Buy@32:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$270460[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$270460[ebp], 0
	jbe	SHORT $LN11@Buy@32
	mov	eax, DWORD PTR __Count$270460[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@32
$LN11@Buy@32:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@32:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@32

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@KAXXZ ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@32

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@32:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvAutomateInfo@@@std@@YAPAPAVCvAutomateInfo@@IPAPAV1@@Z ; std::_Allocate<CvAutomateInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@32:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@32:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T270523 = -28						; size = 4
$T270522 = -24						; size = 4
$T270518 = -20						; size = 4
$T270517 = -16						; size = 4
$T270506 = -12						; size = 4
$T270505 = -8						; size = 4
__Cat$270512 = -2					; size = 1
$T270510 = -1						; size = 1
?_Tidy@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@32

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T270518[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T270517[ebp], ecx
	mov	edx, DWORD PTR $T270518[ebp]
	mov	DWORD PTR $T270506[ebp], edx
	mov	eax, DWORD PTR $T270517[ebp]
	mov	DWORD PTR $T270505[ebp], eax
	mov	cl, BYTE PTR __Cat$270512[ebp]
	mov	BYTE PTR $T270510[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T270523[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T270522[ebp], eax
	mov	ecx, DWORD PTR $T270522[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@32:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvEraInfo@@@std@@YAPAPAVCvEraInfo@@IPAPAV1@@Z ; std::_Allocate<CvEraInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@KAXXZ ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$270541 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@33

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@33
	jmp	SHORT $LN3@Buy@33
$LN4@Buy@33:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$270541[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$270541[ebp], 0
	jbe	SHORT $LN11@Buy@33
	mov	eax, DWORD PTR __Count$270541[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@33
$LN11@Buy@33:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@33:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@33

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@KAXXZ ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@33

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@33:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvEraInfo@@@std@@YAPAPAVCvEraInfo@@IPAPAV1@@Z ; std::_Allocate<CvEraInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@33:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@33:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T270604 = -28						; size = 4
$T270603 = -24						; size = 4
$T270599 = -20						; size = 4
$T270598 = -16						; size = 4
$T270587 = -12						; size = 4
$T270586 = -8						; size = 4
__Cat$270593 = -2					; size = 1
$T270591 = -1						; size = 1
?_Tidy@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@33

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T270599[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T270598[ebp], ecx
	mov	edx, DWORD PTR $T270599[ebp]
	mov	DWORD PTR $T270587[ebp], edx
	mov	eax, DWORD PTR $T270598[ebp]
	mov	DWORD PTR $T270586[ebp], eax
	mov	cl, BYTE PTR __Cat$270593[ebp]
	mov	BYTE PTR $T270591[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T270604[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T270603[ebp], eax
	mov	ecx, DWORD PTR $T270603[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@33:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvHurryInfo@@@std@@YAPAPAVCvHurryInfo@@IPAPAV1@@Z ; std::_Allocate<CvHurryInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@KAXXZ ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$270622 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@34

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@34
	jmp	SHORT $LN3@Buy@34
$LN4@Buy@34:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$270622[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$270622[ebp], 0
	jbe	SHORT $LN11@Buy@34
	mov	eax, DWORD PTR __Count$270622[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@34
$LN11@Buy@34:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@34:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@34

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@KAXXZ ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@34

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@34:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvHurryInfo@@@std@@YAPAPAVCvHurryInfo@@IPAPAV1@@Z ; std::_Allocate<CvHurryInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@34:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@34:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T270685 = -28						; size = 4
$T270684 = -24						; size = 4
$T270680 = -20						; size = 4
$T270679 = -16						; size = 4
$T270668 = -12						; size = 4
$T270667 = -8						; size = 4
__Cat$270675 = -2					; size = 1
$T270673 = -1						; size = 1
?_Tidy@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@34

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T270680[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T270679[ebp], ecx
	mov	edx, DWORD PTR $T270680[ebp]
	mov	DWORD PTR $T270668[ebp], edx
	mov	eax, DWORD PTR $T270679[ebp]
	mov	DWORD PTR $T270667[ebp], eax
	mov	cl, BYTE PTR __Cat$270675[ebp]
	mov	BYTE PTR $T270673[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T270685[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T270684[ebp], eax
	mov	ecx, DWORD PTR $T270684[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@34:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvVictoryInfo@@@std@@YAPAPAVCvVictoryInfo@@IPAPAV1@@Z ; std::_Allocate<CvVictoryInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@KAXXZ ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$270703 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@35

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@35
	jmp	SHORT $LN3@Buy@35
$LN4@Buy@35:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$270703[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$270703[ebp], 0
	jbe	SHORT $LN11@Buy@35
	mov	eax, DWORD PTR __Count$270703[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@35
$LN11@Buy@35:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@35:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@35

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@KAXXZ ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@35

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@35:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvVictoryInfo@@@std@@YAPAPAVCvVictoryInfo@@IPAPAV1@@Z ; std::_Allocate<CvVictoryInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@35:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@35:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T270766 = -28						; size = 4
$T270765 = -24						; size = 4
$T270761 = -20						; size = 4
$T270760 = -16						; size = 4
$T270749 = -12						; size = 4
$T270748 = -8						; size = 4
__Cat$270756 = -2					; size = 1
$T270754 = -1						; size = 1
?_Tidy@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@35

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T270761[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T270760[ebp], ecx
	mov	edx, DWORD PTR $T270761[ebp]
	mov	DWORD PTR $T270749[ebp], edx
	mov	eax, DWORD PTR $T270760[ebp]
	mov	DWORD PTR $T270748[ebp], eax
	mov	cl, BYTE PTR __Cat$270756[ebp]
	mov	BYTE PTR $T270754[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T270766[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T270765[ebp], eax
	mov	ecx, DWORD PTR $T270765[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@35:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvSmallAwardInfo@@@std@@YAPAPAVCvSmallAwardInfo@@IPAPAV1@@Z ; std::_Allocate<CvSmallAwardInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@KAXXZ ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$270784 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@36

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@36
	jmp	SHORT $LN3@Buy@36
$LN4@Buy@36:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$270784[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$270784[ebp], 0
	jbe	SHORT $LN11@Buy@36
	mov	eax, DWORD PTR __Count$270784[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@36
$LN11@Buy@36:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@36:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@36

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@KAXXZ ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@36

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@36:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvSmallAwardInfo@@@std@@YAPAPAVCvSmallAwardInfo@@IPAPAV1@@Z ; std::_Allocate<CvSmallAwardInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@36:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@36:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T270847 = -28						; size = 4
$T270846 = -24						; size = 4
$T270842 = -20						; size = 4
$T270841 = -16						; size = 4
$T270830 = -12						; size = 4
$T270829 = -8						; size = 4
__Cat$270837 = -2					; size = 1
$T270835 = -1						; size = 1
?_Tidy@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@36

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T270842[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T270841[ebp], ecx
	mov	edx, DWORD PTR $T270842[ebp]
	mov	DWORD PTR $T270830[ebp], edx
	mov	eax, DWORD PTR $T270841[ebp]
	mov	DWORD PTR $T270829[ebp], eax
	mov	cl, BYTE PTR __Cat$270837[ebp]
	mov	BYTE PTR $T270835[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T270847[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T270846[ebp], eax
	mov	ecx, DWORD PTR $T270846[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@36:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvEntityEventInfo@@@std@@YAPAPAVCvEntityEventInfo@@IPAPAV1@@Z ; std::_Allocate<CvEntityEventInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@KAXXZ ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$270865 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@37

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@37
	jmp	SHORT $LN3@Buy@37
$LN4@Buy@37:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$270865[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$270865[ebp], 0
	jbe	SHORT $LN11@Buy@37
	mov	eax, DWORD PTR __Count$270865[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@37
$LN11@Buy@37:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@37:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@37

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@KAXXZ ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@37

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@37:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvEntityEventInfo@@@std@@YAPAPAVCvEntityEventInfo@@IPAPAV1@@Z ; std::_Allocate<CvEntityEventInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@37:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@37:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T270928 = -28						; size = 4
$T270927 = -24						; size = 4
$T270923 = -20						; size = 4
$T270922 = -16						; size = 4
$T270911 = -12						; size = 4
$T270910 = -8						; size = 4
__Cat$270918 = -2					; size = 1
$T270916 = -1						; size = 1
?_Tidy@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@37

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T270923[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T270922[ebp], ecx
	mov	edx, DWORD PTR $T270923[ebp]
	mov	DWORD PTR $T270911[ebp], edx
	mov	eax, DWORD PTR $T270922[ebp]
	mov	DWORD PTR $T270910[ebp], eax
	mov	cl, BYTE PTR __Cat$270918[ebp]
	mov	BYTE PTR $T270916[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T270928[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T270927[ebp], eax
	mov	ecx, DWORD PTR $T270927[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@37:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvMultiUnitFormationInfo@@@std@@YAPAPAVCvMultiUnitFormationInfo@@IPAPAV1@@Z ; std::_Allocate<CvMultiUnitFormationInfo *>
PUBLIC	?_Xlen@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@KAXXZ ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$270946 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@38

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@38
	jmp	SHORT $LN3@Buy@38
$LN4@Buy@38:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$270946[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$270946[ebp], 0
	jbe	SHORT $LN11@Buy@38
	mov	eax, DWORD PTR __Count$270946[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@38
$LN11@Buy@38:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@38:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@38

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@KAXXZ ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@38

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@38:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvMultiUnitFormationInfo@@@std@@YAPAPAVCvMultiUnitFormationInfo@@IPAPAV1@@Z ; std::_Allocate<CvMultiUnitFormationInfo *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@38:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@38:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T271009 = -28						; size = 4
$T271008 = -24						; size = 4
$T271004 = -20						; size = 4
$T271003 = -16						; size = 4
$T270992 = -12						; size = 4
$T270991 = -8						; size = 4
__Cat$270999 = -2					; size = 1
$T270997 = -1						; size = 1
?_Tidy@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@38

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T271004[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T271003[ebp], ecx
	mov	edx, DWORD PTR $T271004[ebp]
	mov	DWORD PTR $T270992[ebp], edx
	mov	eax, DWORD PTR $T271003[ebp]
	mov	DWORD PTR $T270991[ebp], eax
	mov	cl, BYTE PTR __Cat$270999[ebp]
	mov	BYTE PTR $T270997[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T271009[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T271008[ebp], eax
	mov	ecx, DWORD PTR $T271008[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@38:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::_Tidy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_List_val@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_val@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ PROC ; std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::~_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_val@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ ENDP ; std::_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::~_List_val<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ PROC ; std::_Vector_val<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::~_Vector_val<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE@XZ ENDP ; std::_Vector_val<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::~_Vector_val<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Buynode
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z$0
__ehfuncinfo$??0?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
_TEXT	SEGMENT
tv91 = -68						; size = 4
tv148 = -64						; size = 4
tv173 = -60						; size = 4
tv197 = -56						; size = 4
_this$ = -52						; size = 4
$T271128 = -48						; size = 1
$T271101 = -47						; size = 1
$T271081 = -46						; size = 1
$T271068 = -45						; size = 1
$T271064 = -44						; size = 4
$T271057 = -36						; size = 4
$T271050 = -28						; size = 4
$T271043 = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
??0?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z PROC ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >, COMDAT
; _this$ = ecx

; 441  : 		{	// construct empty list, allocator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T271128[ebp]
	mov	DWORD PTR $T271043[ebp], eax
	lea	ecx, DWORD PTR $T271101[ebp]
	mov	DWORD PTR $T271050[ebp], ecx
	lea	edx, DWORD PTR $T271081[ebp]
	mov	DWORD PTR $T271057[ebp], edx
	lea	eax, DWORD PTR $T271068[ebp]
	mov	DWORD PTR $T271064[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv197[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv173[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv148[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv91[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Buynode
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 442  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_val@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ
__ehhandler$??0?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z ENDP ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T271203 = -32						; size = 4
$T271202 = -28						; size = 4
$T271198 = -24						; size = 4
$T271197 = -20						; size = 4
$T271179 = -16						; size = 4
$T271178 = -12						; size = 4
$T271162 = -8						; size = 4
__Cat$271186 = -2					; size = 1
$T271184 = -1						; size = 1
?_Tidy@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXXZ PROC ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@39

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T271198[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T271197[ebp], ecx
	mov	edx, DWORD PTR $T271198[ebp]
	mov	DWORD PTR $T271179[ebp], edx
	mov	eax, DWORD PTR $T271197[ebp]
	mov	DWORD PTR $T271178[ebp], eax
	mov	cl, BYTE PTR __Cat$271186[ebp]
	mov	BYTE PTR $T271184[ebp], cl
	mov	edx, DWORD PTR $T271178[ebp]
	mov	DWORD PTR $T271162[ebp], edx
	jmp	SHORT $LN12@Tidy@39
$LN11@Tidy@39:
	mov	eax, DWORD PTR $T271162[ebp]
	add	eax, 4
	mov	DWORD PTR $T271162[ebp], eax
$LN12@Tidy@39:
	mov	ecx, DWORD PTR $T271162[ebp]
	cmp	ecx, DWORD PTR $T271179[ebp]
	je	SHORT $LN4@Tidy@39
	jmp	SHORT $LN11@Tidy@39
$LN4@Tidy@39:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T271203[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T271202[ebp], eax
	mov	ecx, DWORD PTR $T271202[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@39:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXXZ ENDP ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Tidy
_TEXT	ENDS
PUBLIC	?_Reinsert@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAEXXZ ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Reinsert
PUBLIC	?_Insert@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Insert
PUBLIC	?splice@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@AAV12@0@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::splice
PUBLIC	?erase@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::erase
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xhash
;	COMDAT ?_Insert@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAE?AU?$pair@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@_N@std@@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@4@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@4@@Z
_TEXT	SEGMENT
tv372 = -292						; size = 4
tv652 = -288						; size = 8
tv648 = -280						; size = 8
_this$ = -272						; size = 4
__Count$271647 = -152					; size = 4
$T271623 = -148						; size = 4
$T271615 = -144						; size = 4
$T271609 = -140						; size = 4
$T271596 = -136						; size = 4
$T271592 = -132						; size = 4
$T271483 = -116						; size = 4
$T271348 = -92						; size = 4
$T271311 = -88						; size = 4
$T271278 = -84						; size = 4
$T271236 = -80						; size = 4
$T271232 = -76						; size = 4
__Num$271224 = -72					; size = 4
$T271217 = -65						; size = 1
$T271216 = -64						; size = 4
$T271215 = -60						; size = 4
$T271214 = -56						; size = 4
$T271213 = -52						; size = 4
$T271212 = -48						; size = 4
$T271211 = -44						; size = 4
$T271210 = -37						; size = 1
$T271209 = -36						; size = 4
$T271208 = -32						; size = 4
$T271207 = -28						; size = 4
$T271206 = -24						; size = 4
__Idx$234498 = -20					; size = 4
__Maxsize$234496 = -16					; size = 4
__Newsize$234497 = -12					; size = 4
__Bucket$ = -8						; size = 4
__Plist$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
__Where$ = 16						; size = 4
?_Insert@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAE?AU?$pair@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@_N@std@@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@4@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@4@@Z PROC ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 836  : 		{	// try to insert (possibly existing) node with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	mov	DWORD PTR _this$[ebp], ecx

; 837  : 		size_type _Bucket = _Hashval(this->_Kfn(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??R?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@QBEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator()
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR __Num$271224[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	eax, DWORD PTR __Num$271224[ebp]
	ja	SHORT $LN23@Insert
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	shr	edx, 1
	add	edx, 1
	mov	eax, DWORD PTR __Num$271224[ebp]
	sub	eax, edx
	mov	DWORD PTR __Num$271224[ebp], eax
$LN23@Insert:
	mov	ecx, DWORD PTR __Num$271224[ebp]
	mov	DWORD PTR __Bucket$[ebp], ecx

; 838  : 		iterator _Plist = _Get_iter_from_vec(_Vec[_Bucket + 1]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR __Bucket$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4+4]
	mov	DWORD PTR $T271232[ebp], edx
	mov	eax, DWORD PTR $T271232[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Plist$[ebp], ecx
$LN28@Insert:

; 839  : 
; 840  : 		for (; _Plist != _Get_iter_from_vec(_Vec[_Bucket]); )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR __Bucket$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T271236[ebp], edx
	mov	eax, DWORD PTR $T271236[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T271206[ebp], ecx
	mov	edx, DWORD PTR __Plist$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T271206[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN17@Insert

; 841  : 			if (this->comp(this->_Kfn(_Val), this->_Kfn(*--_Plist)))

	mov	eax, DWORD PTR __Plist$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Plist$[ebp], ecx
	mov	edx, DWORD PTR __Plist$[ebp]
	add	edx, 8
	mov	DWORD PTR $T271278[ebp], edx
	mov	eax, DWORD PTR $T271278[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN16@Insert

; 842  : 				;	// still too high in bucket list
; 843  : 			else if (_Multi

	jmp	$LN12@Insert
$LN16@Insert:

; 844  : 				|| this->comp(this->_Kfn(*_Plist), this->_Kfn(_Val)))

	xor	eax, eax
	jne	SHORT $LN13@Insert
	mov	ecx, DWORD PTR __Plist$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T271311[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR $T271311[ebp]
	push	eax
	call	DWORD PTR __imp_??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN14@Insert
$LN13@Insert:

; 845  : 				{	// found insertion point, back up to it
; 846  : 				++_Plist;

	mov	edx, DWORD PTR __Plist$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Plist$[ebp], eax

; 847  : 				break;

	jmp	SHORT $LN17@Insert

; 848  : 				}
; 849  : 			else

	jmp	SHORT $LN12@Insert
$LN14@Insert:

; 850  : 				{	// discard new list element and return existing
; 851  : 				if (_Where != end())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T271348[ebp], edx
	mov	eax, DWORD PTR $T271348[ebp]
	mov	DWORD PTR $T271207[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T271207[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@Insert

; 852  : 					_List.erase(_Where);

	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T271208[ebp], edx
	mov	eax, DWORD PTR $T271208[ebp]
	push	eax
	lea	ecx, DWORD PTR $T271209[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?erase@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::erase
$LN11@Insert:

; 853  : 				return (_Pairib(_Plist, false));

	mov	BYTE PTR $T271210[ebp], 0
	mov	edx, DWORD PTR __Plist$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	dl, BYTE PTR $T271210[ebp]
	mov	BYTE PTR [ecx+4], dl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN19@Insert
$LN12@Insert:

; 854  : 				}

	jmp	$LN28@Insert
$LN17@Insert:

; 855  : 
; 856  : 		if (_Where != end())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T271483[ebp], ecx
	mov	edx, DWORD PTR $T271483[ebp]
	mov	DWORD PTR $T271211[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T271211[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN10@Insert

; 857  : 			_List.splice(_Plist, _List, _Where);	// move element into place

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T271212[ebp], ecx
	mov	edx, DWORD PTR __Plist$[ebp]
	mov	DWORD PTR $T271213[ebp], edx
	mov	eax, DWORD PTR $T271212[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR $T271213[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?splice@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@AAV12@0@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::splice

; 858  : 		else

	jmp	SHORT $LN9@Insert
$LN10@Insert:

; 859  : 			_Where = _List.insert(_Plist, _Val);	// insert new element

	mov	eax, DWORD PTR __Plist$[ebp]
	mov	DWORD PTR $T271214[ebp], eax
	mov	ecx, DWORD PTR $T271214[ebp]
	mov	DWORD PTR $T271592[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR $T271592[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?_Insert@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Insert
	mov	ecx, DWORD PTR $T271592[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T271592[ebp], edx
	mov	eax, DWORD PTR $T271592[ebp]
	mov	DWORD PTR $T271215[ebp], eax
	mov	ecx, DWORD PTR $T271215[ebp]
	mov	DWORD PTR __Where$[ebp], ecx
$LN9@Insert:
	jmp	SHORT $LN8@Insert
$LN7@Insert:

; 860  : 		for (; _Plist == _Get_iter_from_vec(_Vec[_Bucket]); --_Bucket)

	mov	edx, DWORD PTR __Bucket$[ebp]
	sub	edx, 1
	mov	DWORD PTR __Bucket$[ebp], edx
$LN8@Insert:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR __Bucket$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T271596[ebp], eax
	mov	ecx, DWORD PTR $T271596[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T271216[ebp], edx
	mov	eax, DWORD PTR __Plist$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T271216[ebp]
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN6@Insert

; 861  : 			{	// update end iterators if new first bucket element
; 862  : 			_Vec[_Bucket] = _Where;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR __Bucket$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 863  : 			if (_Bucket == 0)

	cmp	DWORD PTR __Bucket$[ebp], 0
	jne	SHORT $LN5@Insert

; 864  : 				break;

	jmp	SHORT $LN6@Insert
$LN5@Insert:

; 865  : 			}

	jmp	SHORT $LN7@Insert
$LN6@Insert:

; 866  : 
; 867  : 		if (max_load_factor() < load_factor())

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+40]
	movss	DWORD PTR $T271609[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR $T271615[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR $T271623[ebp], edx
	mov	eax, DWORD PTR $T271623[ebp]
	mov	DWORD PTR tv648[ebp], eax
	mov	DWORD PTR tv648[ebp+4], 0
	fild	QWORD PTR tv648[ebp]
	mov	ecx, DWORD PTR $T271615[ebp]
	mov	DWORD PTR tv652[ebp], ecx
	mov	DWORD PTR tv652[ebp+4], 0
	fild	QWORD PTR tv652[ebp]
	fdivrp	ST(1), ST(0)
	fld	DWORD PTR $T271609[ebp]
	fxch	ST(1)
	fcomip	ST(1)
	fstp	ST(0)
	jbe	$LN4@Insert

; 868  :  #if _HAS_INCREMENTAL_HASH
; 869  : 			_Grow();	// too dense, need to grow hash table
; 870  : 
; 871  :  #else /* _HAS_INCREMENTAL_HASH */
; 872  : 			{	// rehash to bigger table
; 873  : 			size_type _Maxsize = _Vec.max_size() / 2;

	mov	DWORD PTR __Count$271647[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$271647[ebp], 0
	jbe	SHORT $LN209@Insert
	mov	edx, DWORD PTR __Count$271647[ebp]
	mov	DWORD PTR tv372[ebp], edx
	jmp	SHORT $LN210@Insert
$LN209@Insert:
	mov	DWORD PTR tv372[ebp], 1
$LN210@Insert:
	mov	eax, DWORD PTR tv372[ebp]
	shr	eax, 1
	mov	DWORD PTR __Maxsize$234496[ebp], eax

; 874  : 			size_type _Newsize = bucket_count();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR __Newsize$234497[ebp], edx

; 875  : 
; 876  : 			for (int _Idx = 0; _Idx < 3 && _Newsize < _Maxsize; ++_Idx)

	mov	DWORD PTR __Idx$234498[ebp], 0
	jmp	SHORT $LN3@Insert
$LN2@Insert:
	mov	eax, DWORD PTR __Idx$234498[ebp]
	add	eax, 1
	mov	DWORD PTR __Idx$234498[ebp], eax
$LN3@Insert:
	cmp	DWORD PTR __Idx$234498[ebp], 3
	jge	SHORT $LN1@Insert
	mov	ecx, DWORD PTR __Newsize$234497[ebp]
	cmp	ecx, DWORD PTR __Maxsize$234496[ebp]
	jae	SHORT $LN1@Insert

; 877  : 				_Newsize *= 2;	// multiply safely by 8

	mov	edx, DWORD PTR __Newsize$234497[ebp]
	shl	edx, 1
	mov	DWORD PTR __Newsize$234497[ebp], edx
	jmp	SHORT $LN2@Insert
$LN1@Insert:

; 878  : 			_Init(_Newsize);

	mov	eax, DWORD PTR __Newsize$234497[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Init@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAEXI@Z ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Init

; 879  : 			_Reinsert();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reinsert@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAEXXZ ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Reinsert
$LN4@Insert:

; 880  : 			}
; 881  : #endif /* _HAS_INCREMENTAL_HASH */
; 882  : 
; 883  : 		return (_Pairib(_Where, true));	// return iterator for new element

	mov	BYTE PTR $T271217[ebp], 1
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR $T271217[ebp]
	mov	BYTE PTR [eax+4], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN19@Insert:

; 884  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Insert@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAE?AU?$pair@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@_N@std@@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@4@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@4@@Z ENDP ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Insert
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T271910 = -80						; size = 28
$T271909 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T271910[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T271909[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T271909[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T271910[ebp]
	push	eax
	lea	ecx, DWORD PTR $T271909[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T271909[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T271909[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T271910[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T271910[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T271909[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBIH@2@@Z
_TEXT	SEGMENT
tv90 = -156						; size = 4
_this$ = -152						; size = 4
$T272095 = -148						; size = 4
$T272075 = -144						; size = 4
$T272060 = -140						; size = 4
$T272043 = -136						; size = 4
$T272030 = -132						; size = 4
$T272016 = -128						; size = 4
$T271972 = -45						; size = 1
$T271971 = -44						; size = 4
$T271970 = -37						; size = 1
$T271969 = -36						; size = 4
$T271968 = -29						; size = 1
$T271967 = -28						; size = 4
$T271966 = -24						; size = 4
$T271965 = -17						; size = 1
__Where$234590 = -16					; size = 4
__Trynode$ = -12					; size = 4
__Wherenode$ = -8					; size = 4
__Addleft$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
?insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBIH@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::insert, COMDAT
; _this$ = ecx

; 630  : 		{	// try to insert node with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	mov	DWORD PTR _this$[ebp], ecx

; 631  : 		_Nodeptr _Trynode = _Root();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Trynode$[ebp], edx

; 632  : 		_Nodeptr _Wherenode = _Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Wherenode$[ebp], ecx

; 633  : 		bool _Addleft = true;	// add to left of head if tree empty

	mov	BYTE PTR __Addleft$[ebp], 1

; 634  : 		while (!_Isnil(_Trynode))

$LN19@insert@2:
	mov	edx, DWORD PTR __Trynode$[ebp]
	movsx	eax, BYTE PTR [edx+21]
	test	eax, eax
	jne	SHORT $LN9@insert@2

; 635  : 			{	// look for leaf to insert before (_Addleft) or after
; 636  : 			_Wherenode = _Trynode;

	mov	ecx, DWORD PTR __Trynode$[ebp]
	mov	DWORD PTR __Wherenode$[ebp], ecx

; 637  : 			_Addleft = _DEBUG_LT_PRED(this->comp,

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+12]
	sbb	edx, edx
	neg	edx
	mov	BYTE PTR __Addleft$[ebp], dl

; 638  : 				this->_Kfn(_Val), _Key(_Trynode));
; 639  : 			_Trynode = _Addleft ? _Left(_Trynode) : _Right(_Trynode);

	movzx	eax, BYTE PTR __Addleft$[ebp]
	test	eax, eax
	je	SHORT $LN33@insert@2
	mov	ecx, DWORD PTR __Trynode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv90[ebp], edx
	jmp	SHORT $LN14@insert@2
$LN33@insert@2:
	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv90[ebp], ecx
$LN14@insert@2:
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR __Trynode$[ebp], edx

; 640  : 			}

	jmp	SHORT $LN19@insert@2
$LN9@insert@2:

; 641  : 
; 642  : 		if (this->_Multi)

	xor	eax, eax
	je	SHORT $LN8@insert@2

; 643  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

	mov	BYTE PTR $T271965[ebp], 1
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Addleft$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T271966[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	DWORD PTR $T272016[ebp], eax
	mov	edx, DWORD PTR $T272016[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	al, BYTE PTR $T271965[ebp]
	mov	BYTE PTR [edx+4], al
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN11@insert@2

; 644  : 		else

	jmp	$LN11@insert@2
$LN8@insert@2:

; 645  : 			{	// insert only if unique
; 646  : 			iterator _Where = _TREE_ITERATOR(_Wherenode);

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR __Where$234590[ebp], ecx

; 647  : 			if (!_Addleft)

	movzx	edx, BYTE PTR __Addleft$[ebp]
	test	edx, edx
	jne	SHORT $LN6@insert@2
	jmp	$LN79@insert@2
$LN6@insert@2:

; 648  : 				;	// need to test if insert after is okay
; 649  : 			else if (_Where == begin())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T272030[ebp], ecx
	mov	edx, DWORD PTR $T272030[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T272043[ebp], eax
	mov	ecx, DWORD PTR $T272043[ebp]
	mov	DWORD PTR $T271967[ebp], ecx
	mov	edx, DWORD PTR __Where$234590[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T271967[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@insert@2

; 650  : 				return (_Pairib(_Insert(true, _Wherenode, _Val), true));

	mov	BYTE PTR $T271968[ebp], 1
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR $T271969[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	DWORD PTR $T272060[ebp], eax
	mov	edx, DWORD PTR $T272060[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	al, BYTE PTR $T271968[ebp]
	mov	BYTE PTR [edx+4], al
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN11@insert@2

; 651  : 			else

	jmp	SHORT $LN79@insert@2
$LN4@insert@2:

; 652  : 				--_Where;	// need to test if insert before is okay

	lea	ecx, DWORD PTR __Where$234590[ebp]
	call	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::const_iterator::_Dec

; 653  : 
; 654  : 			if (_DEBUG_LT_PRED(this->comp,

$LN79@insert@2:
	mov	ecx, DWORD PTR __Where$234590[ebp]
	mov	DWORD PTR $T272075[ebp], ecx
	mov	edx, DWORD PTR $T272075[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	cmp	ecx, DWORD PTR [eax]
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN2@insert@2

; 655  : 				_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 656  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

	mov	BYTE PTR $T271970[ebp], 1
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Addleft$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T271971[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
	mov	DWORD PTR $T272095[ebp], eax
	mov	edx, DWORD PTR $T272095[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	al, BYTE PTR $T271970[ebp]
	mov	BYTE PTR [edx+4], al
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN11@insert@2

; 657  : 			else

	jmp	SHORT $LN11@insert@2
$LN2@insert@2:

; 658  : 				return (_Pairib(_Where, false));

	mov	BYTE PTR $T271972[ebp], 0
	mov	ecx, DWORD PTR __Where$234590[ebp]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR $T271972[ebp]
	mov	BYTE PTR [eax+4], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN11@insert@2:

; 659  : 			}
; 660  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBIH@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::insert
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase
; Function compile flags: /Odtp
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z
_TEXT	SEGMENT
_this$ = -76						; size = 4
$T272319 = -72						; size = 4
$T272314 = -68						; size = 4
__Tmp$272298 = -48					; size = 4
$T272229 = -44						; size = 4
$T272216 = -40						; size = 4
$T272146 = -28						; size = 4
$T272123 = -24						; size = 4
$T272110 = -20						; size = 4
$T272104 = -16						; size = 4
$T272103 = -12						; size = 4
$T272102 = -8						; size = 4
$T272101 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase, COMDAT
; _this$ = ecx

; 934  : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 935  : 		if (_First == begin() && _Last == end())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T272110[ebp], ecx
	mov	edx, DWORD PTR $T272110[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T272123[ebp], eax
	mov	ecx, DWORD PTR $T272123[ebp]
	mov	DWORD PTR $T272101[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T272101[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN72@erase
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T272146[ebp], eax
	mov	ecx, DWORD PTR $T272146[ebp]
	mov	DWORD PTR $T272102[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T272102[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN72@erase

; 936  : 			{	// erase all
; 937  : 			clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::clear

; 938  : 			return (begin());

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T272216[ebp], eax
	mov	ecx, DWORD PTR $T272216[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T272229[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR $T272229[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN5@erase

; 939  : 			}
; 940  : 		else

	jmp	SHORT $LN5@erase

; 941  : 			{	// partial erase, one at a time
; 942  : 			while (_First != _Last)

$LN72@erase:
	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase

; 943  : 				erase(_First++);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$272298[ebp], eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::const_iterator::_Inc
	mov	ecx, DWORD PTR __Tmp$272298[ebp]
	mov	DWORD PTR $T272103[ebp], ecx
	mov	edx, DWORD PTR $T272103[ebp]
	push	edx
	lea	eax, DWORD PTR $T272104[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase
	jmp	SHORT $LN72@erase
$LN1@erase:

; 944  : 			return (_Make_iter(_First));

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T272319[ebp], ecx
	mov	edx, DWORD PTR $T272319[ebp]
	mov	DWORD PTR $T272314[ebp], edx
	mov	eax, DWORD PTR $T272314[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@erase:

; 945  : 			}
; 946  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode
; Function compile flags: /Odtp
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T272337 = -4						; size = 4
?_Init@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Init, COMDAT
; _this$ = ecx

; 1177 : 		{	// create head/nil node and make tree empty

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1178 : 		_Myhead = _Buynode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1179 : 		_Isnil(_Myhead) = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+21], 1

; 1180 : 		_Root() = _Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 1181 : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T272337[ebp], eax
	mov	ecx, DWORD PTR $T272337[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1182 : 		_Mysize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 1183 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Init@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Init
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rrotate
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lrotate
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z$0
__ehfuncinfo$?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z
_TEXT	SEGMENT
tv277 = -196						; size = 4
_this$ = -192						; size = 4
$T272886 = -188						; size = 4
$T272798 = -172						; size = 4
$T272713 = -160						; size = 4
$T272697 = -156						; size = 4
$T272678 = -152						; size = 4
$T272674 = -148						; size = 4
$T272589 = -136						; size = 4
$T272488 = -120						; size = 4
$T272466 = -116						; size = 4
$T272459 = -112						; size = 4
$T272455 = -108						; size = 4
$T272416 = -104						; size = 4
$T272407 = -100						; size = 4
$T272387 = -96						; size = 4
__Count$272367 = -92					; size = 4
$T272353 = -88						; size = 28
$T272352 = -60						; size = 40
__Pnode$234637 = -20					; size = 4
__Newnode$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 1187 : 		{	// add node with value next to _Wherenode, to left if _Addnode

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 184				; 000000b8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1188 : 		if (max_size() - 1 <= _Mysize)

	mov	DWORD PTR __Count$272367[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$272367[ebp], 0
	jbe	SHORT $LN25@Insert@2
	mov	eax, DWORD PTR __Count$272367[ebp]
	mov	DWORD PTR tv277[ebp], eax
	jmp	SHORT $LN21@Insert@2
$LN25@Insert@2:
	mov	DWORD PTR tv277[ebp], 1
$LN21@Insert@2:
	mov	ecx, DWORD PTR tv277[ebp]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+8]
	ja	SHORT $LN17@Insert@2

; 1189 : 			_THROW(length_error, "map/set<T> too long");

	push	OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T272353[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T272353[ebp]
	push	eax
	lea	ecx, DWORD PTR $T272352[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR $T272352[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T272352[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T272353[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN17@Insert@2:

; 1190 : 		_Nodeptr _Newnode = _Buynode(_Myhead, _Wherenode, _Myhead,
; 1191 : 			_Val, _Red);

	push	0
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode
	mov	DWORD PTR __Newnode$[ebp], eax

; 1192 : 
; 1193 : 		++_Mysize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1194 : 		if (_Wherenode == _Myhead)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN16@Insert@2

; 1195 : 			{	// first node in tree, just set head values
; 1196 : 			_Root() = _Newnode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1197 : 			_Lmost() = _Newnode, _Rmost() = _Newnode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T272387[ebp], edx
	mov	eax, DWORD PTR $T272387[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN15@Insert@2
$LN16@Insert@2:

; 1198 : 			}
; 1199 : 		else if (_Addleft)

	movzx	edx, BYTE PTR __Addleft$[ebp]
	test	edx, edx
	je	SHORT $LN52@Insert@2

; 1200 : 			{	// add to left of _Wherenode
; 1201 : 			_Left(_Wherenode) = _Newnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1202 : 			if (_Wherenode == _Lmost())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T272407[ebp], eax
	mov	ecx, DWORD PTR $T272407[ebp]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN13@Insert@2

; 1203 : 				_Lmost() = _Newnode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T272416[ebp], ecx
	mov	edx, DWORD PTR $T272416[ebp]
	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [edx], eax
$LN13@Insert@2:

; 1204 : 			}
; 1205 : 		else

	jmp	SHORT $LN15@Insert@2

; 1206 : 			{	// add to right of _Wherenode
; 1207 : 			_Right(_Wherenode) = _Newnode;

$LN52@Insert@2:
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 1208 : 			if (_Wherenode == _Rmost())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN15@Insert@2

; 1209 : 				_Rmost() = _Newnode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN15@Insert@2:

; 1210 : 			}
; 1211 : 
; 1212 : 		for (_Nodeptr _Pnode = _Newnode; _Color(_Parent(_Pnode)) == _Red; )

	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR __Pnode$234637[ebp], eax
$LN64@Insert@2:
	mov	ecx, DWORD PTR __Pnode$234637[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+20]
	test	eax, eax
	jne	$LN360@Insert@2

; 1213 : 			if (_Parent(_Pnode) == _Left(_Parent(_Parent(_Pnode))))

	mov	ecx, DWORD PTR __Pnode$234637[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	DWORD PTR $T272455[ebp], edx
	mov	eax, DWORD PTR $T272455[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T272459[ebp], ecx
	mov	edx, DWORD PTR __Pnode$234637[ebp]
	mov	eax, DWORD PTR $T272459[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax]
	jne	$LN216@Insert@2

; 1214 : 				{	// fixup red-red in left subtree
; 1215 : 				_Wherenode = _Right(_Parent(_Parent(_Pnode)));

	mov	edx, DWORD PTR __Pnode$234637[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	DWORD PTR $T272466[ebp], eax
	mov	ecx, DWORD PTR $T272466[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Wherenode$[ebp], eax

; 1216 : 				if (_Color(_Wherenode) == _Red)

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	movsx	edx, BYTE PTR [ecx+20]
	test	edx, edx
	jne	SHORT $LN100@Insert@2

; 1217 : 					{	// parent has two red children, blacken both
; 1218 : 					_Color(_Parent(_Pnode)) = _Black;

	mov	eax, DWORD PTR __Pnode$234637[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+20], 1

; 1219 : 					_Color(_Wherenode) = _Black;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	BYTE PTR [edx+20], 1

; 1220 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	eax, DWORD PTR __Pnode$234637[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	DWORD PTR $T272488[ebp], ecx
	mov	edx, DWORD PTR $T272488[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+20], 0

; 1221 : 					_Pnode = _Parent(_Parent(_Pnode));

	mov	ecx, DWORD PTR __Pnode$234637[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$234637[ebp], eax

; 1222 : 					}
; 1223 : 				else

	jmp	SHORT $LN6@Insert@2

; 1224 : 					{	// parent has red and black children
; 1225 : 					if (_Pnode == _Right(_Parent(_Pnode)))

$LN100@Insert@2:
	mov	ecx, DWORD PTR __Pnode$234637[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Pnode$234637[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN155@Insert@2

; 1226 : 						{	// rotate right child to left
; 1227 : 						_Pnode = _Parent(_Pnode);

	mov	ecx, DWORD PTR __Pnode$234637[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$234637[ebp], edx

; 1228 : 						_Lrotate(_Pnode);

	mov	eax, DWORD PTR __Pnode$234637[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lrotate

; 1229 : 						}
; 1230 : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

$LN155@Insert@2:
	mov	ecx, DWORD PTR __Pnode$234637[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+20], 1

; 1231 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	eax, DWORD PTR __Pnode$234637[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	DWORD PTR $T272589[ebp], ecx
	mov	edx, DWORD PTR $T272589[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+20], 0

; 1232 : 					_Rrotate(_Parent(_Parent(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$234637[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rrotate
$LN6@Insert@2:

; 1233 : 					}
; 1234 : 				}
; 1235 : 			else

	jmp	$LN4@Insert@2

; 1236 : 				{	// fixup red-red in right subtree
; 1237 : 				_Wherenode = _Left(_Parent(_Parent(_Pnode)));

$LN216@Insert@2:
	mov	ecx, DWORD PTR __Pnode$234637[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	DWORD PTR $T272674[ebp], edx
	mov	eax, DWORD PTR $T272674[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T272678[ebp], ecx
	mov	edx, DWORD PTR $T272678[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Wherenode$[ebp], eax

; 1238 : 				if (_Color(_Wherenode) == _Red)

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	movsx	edx, BYTE PTR [ecx+20]
	test	edx, edx
	jne	SHORT $LN240@Insert@2

; 1239 : 					{	// parent has two red children, blacken both
; 1240 : 					_Color(_Parent(_Pnode)) = _Black;

	mov	eax, DWORD PTR __Pnode$234637[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+20], 1

; 1241 : 					_Color(_Wherenode) = _Black;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	BYTE PTR [edx+20], 1

; 1242 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	eax, DWORD PTR __Pnode$234637[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	DWORD PTR $T272697[ebp], ecx
	mov	edx, DWORD PTR $T272697[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+20], 0

; 1243 : 					_Pnode = _Parent(_Parent(_Pnode));

	mov	ecx, DWORD PTR __Pnode$234637[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$234637[ebp], eax

; 1244 : 					}
; 1245 : 				else

	jmp	SHORT $LN4@Insert@2

; 1246 : 					{	// parent has red and black children
; 1247 : 					if (_Pnode == _Left(_Parent(_Pnode)))

$LN240@Insert@2:
	mov	ecx, DWORD PTR __Pnode$234637[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T272713[ebp], edx
	mov	eax, DWORD PTR $T272713[ebp]
	mov	ecx, DWORD PTR __Pnode$234637[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN297@Insert@2

; 1248 : 						{	// rotate left child to right
; 1249 : 						_Pnode = _Parent(_Pnode);

	mov	edx, DWORD PTR __Pnode$234637[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$234637[ebp], eax

; 1250 : 						_Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$234637[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rrotate

; 1251 : 						}
; 1252 : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

$LN297@Insert@2:
	mov	edx, DWORD PTR __Pnode$234637[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+20], 1

; 1253 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	ecx, DWORD PTR __Pnode$234637[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	DWORD PTR $T272798[ebp], edx
	mov	eax, DWORD PTR $T272798[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+20], 0

; 1254 : 					_Lrotate(_Parent(_Parent(_Pnode)));

	mov	edx, DWORD PTR __Pnode$234637[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lrotate
$LN4@Insert@2:

; 1255 : 					}
; 1256 : 				}

	jmp	$LN64@Insert@2

; 1257 : 
; 1258 : 		_Color(_Root()) = _Black;	// root is always black

$LN360@Insert@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	DWORD PTR $T272886[ebp], eax
	mov	ecx, DWORD PTR $T272886[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx+20], 1

; 1259 : 		return (_TREE_ITERATOR(_Newnode));

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN19@Insert@2:

; 1260 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z$0:
	lea	ecx, DWORD PTR $T272353[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-188]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBIH@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Insert
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z

; 27   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABI@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Pnode$ = -8						; size = 4
__Wherenode$ = -4					; size = 4
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABI@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 1263 : 		{	// find leftmost node not less than _Keyval

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1264 : 		_Nodeptr _Pnode = _Root();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$[ebp], edx

; 1265 : 		_Nodeptr _Wherenode = _Myhead;	// end() if search fails

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Wherenode$[ebp], ecx

; 1266 : 
; 1267 : 		while (!_Isnil(_Pnode))

$LN11@Lbound:
	mov	edx, DWORD PTR __Pnode$[ebp]
	movsx	eax, BYTE PTR [edx+21]
	test	eax, eax
	jne	SHORT $LN3@Lbound

; 1268 : 			if (_DEBUG_LT_PRED(this->comp, _Key(_Pnode), _Keyval))

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR __Keyval$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx]
	sbb	ecx, ecx
	neg	ecx
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN2@Lbound

; 1269 : 				_Pnode = _Right(_Pnode);	// descend right subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1270 : 			else

	jmp	SHORT $LN1@Lbound
$LN2@Lbound:

; 1271 : 				{	// _Pnode not less than _Keyval, remember it
; 1272 : 				_Wherenode = _Pnode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Wherenode$[ebp], edx

; 1273 : 				_Pnode = _Left(_Pnode);	// descend left subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN1@Lbound:

; 1274 : 				}

	jmp	SHORT $LN11@Lbound
$LN3@Lbound:

; 1275 : 
; 1276 : 		return (_Wherenode);	// return best remembered candidate

	mov	eax, DWORD PTR __Wherenode$[ebp]

; 1277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Lbound@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@ABI@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lbound
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T272952 = -80						; size = 28
$T272951 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T272952[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T272951[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T272951[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T272952[ebp]
	push	eax
	lea	ecx, DWORD PTR $T272951[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T272951[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T272951[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T272952[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T272952[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T272951[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T272974 = -80						; size = 28
$T272973 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T272974[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T272973[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T272973[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T272974[ebp]
	push	eax
	lea	ecx, DWORD PTR $T272973[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T272973[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T272973[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T272974[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@3:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T272974[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T272973[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T272996 = -80						; size = 28
$T272995 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T272996[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T272995[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T272995[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T272996[ebp]
	push	eax
	lea	ecx, DWORD PTR $T272995[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T272995[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T272995[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T272996[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@4:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T272996[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T272995[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273018 = -80						; size = 28
$T273017 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273018[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273017[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273017[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273018[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273017[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273017[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273017[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273018[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@5:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273018[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273017[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273040 = -80						; size = 28
$T273039 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273040[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273039[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273039[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273040[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273039[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273039[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273039[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273040[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@6:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273040[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273039[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273062 = -80						; size = 28
$T273061 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273062[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273061[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273061[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273062[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273061[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273061[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273061[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273062[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@7:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273062[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273061[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273084 = -80						; size = 28
$T273083 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273084[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273083[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273083[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273084[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273083[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273083[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273083[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273084[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@8:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273084[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273083[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273106 = -80						; size = 28
$T273105 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273106[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273105[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273105[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273106[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273105[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273105[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273105[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273106[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@9:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273106[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273105[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273128 = -80						; size = 28
$T273127 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273128[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273127[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273127[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273128[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273127[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273127[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273127[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273128[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@10:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273128[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273127[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273150 = -80						; size = 28
$T273149 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273150[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273149[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273149[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273150[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273149[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273149[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273149[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273150[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@11:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273150[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273149[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273172 = -80						; size = 28
$T273171 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273172[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273171[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273171[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273172[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273171[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273171[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273171[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273172[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@12:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273172[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273171[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273194 = -80						; size = 28
$T273193 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273194[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273193[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273193[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273194[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273193[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273193[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273193[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273194[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@13:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273194[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273193[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273216 = -80						; size = 28
$T273215 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273216[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273215[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273215[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273216[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273215[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273215[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273215[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273216[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@14:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273216[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273215[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273238 = -80						; size = 28
$T273237 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273238[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273237[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273237[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273238[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273237[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273237[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273237[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273238[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@15:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273238[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273237[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273260 = -80						; size = 28
$T273259 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273260[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273259[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273259[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273260[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273259[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273259[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273259[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273260[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@16:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273260[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273259[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273282 = -80						; size = 28
$T273281 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273282[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273281[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273281[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273282[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273281[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273281[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273281[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273282[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@17:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273282[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273281[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273304 = -80						; size = 28
$T273303 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273304[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273303[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273303[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273304[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273303[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273303[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273303[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273304[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@18:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273304[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273303[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273326 = -80						; size = 28
$T273325 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273326[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273325[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273325[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273326[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273325[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273325[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273325[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273326[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@19:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273326[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273325[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273348 = -80						; size = 28
$T273347 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273348[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273347[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273347[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273348[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273347[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273347[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273347[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273348[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@20:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273348[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273347[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273370 = -80						; size = 28
$T273369 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273370[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273369[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273369[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273370[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273369[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273369[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273369[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273370[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@21:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273370[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273369[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273392 = -80						; size = 28
$T273391 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273392[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273391[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273391[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273392[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273391[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273391[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273391[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273392[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@22:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273392[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273391[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273414 = -80						; size = 28
$T273413 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273414[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273413[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273413[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273414[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273413[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273413[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273413[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273414[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@23:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273414[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273413[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273436 = -80						; size = 28
$T273435 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273436[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273435[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273435[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273436[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273435[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273435[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273435[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273436[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@24:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273436[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273435[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273458 = -80						; size = 28
$T273457 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273458[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273457[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273457[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273458[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273457[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273457[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273457[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273458[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@25:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273458[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273457[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273480 = -80						; size = 28
$T273479 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273480[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273479[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273479[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273480[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273479[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273479[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273479[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273480[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@26:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273480[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273479[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273502 = -80						; size = 28
$T273501 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273502[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273501[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273501[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273502[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273501[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273501[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273501[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273502[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@27:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273502[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273501[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273524 = -80						; size = 28
$T273523 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273524[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273523[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273523[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273524[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273523[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273523[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273523[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273524[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@28:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273524[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273523[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273546 = -80						; size = 28
$T273545 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273546[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273545[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273545[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273546[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273545[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273545[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273545[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273546[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@29:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273546[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273545[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273568 = -80						; size = 28
$T273567 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273568[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273567[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273567[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273568[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273567[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273567[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273567[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273568[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@30:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273568[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273567[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273590 = -80						; size = 28
$T273589 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273590[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273589[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273589[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273590[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273589[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273589[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273589[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273590[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@31:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273590[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273589[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273612 = -80						; size = 28
$T273611 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273612[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273611[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273611[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273612[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273611[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273611[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273611[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273612[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@32:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273612[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273611[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273634 = -80						; size = 28
$T273633 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273634[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273633[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273633[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273634[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273633[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273633[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273633[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273634[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@33:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273634[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273633[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273656 = -80						; size = 28
$T273655 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273656[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273655[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273655[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273656[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273655[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273655[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273655[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273656[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@34:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273656[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273655[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273678 = -80						; size = 28
$T273677 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273678[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273677[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273677[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273678[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273677[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273677[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273677[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273678[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@35:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273678[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273677[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273700 = -80						; size = 28
$T273699 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273700[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273699[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273699[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273700[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273699[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273699[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273699[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273700[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@36:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273700[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273699[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273722 = -80						; size = 28
$T273721 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273722[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273721[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273721[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273722[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273721[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273721[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273721[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273722[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@37:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273722[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273721[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T273744 = -80						; size = 28
$T273743 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@KAXXZ PROC ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T273744[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T273743[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T273743[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T273744[ebp]
	push	eax
	lea	ecx, DWORD PTR $T273743[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T273743[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T273743[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T273744[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@38:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T273744[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T273743[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvMultiUnitFormationInfo@@V?$allocator@PAVCvMultiUnitFormationInfo@@@std@@@std@@KAXXZ ENDP ; std::vector<CvMultiUnitFormationInfo *,std::allocator<CvMultiUnitFormationInfo *> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?erase@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T273863 = -24						; size = 4
$T273813 = -20						; size = 4
$T273794 = -16						; size = 4
__Tmp$273781 = -12					; size = 4
$T273765 = -8						; size = 4
__Pnode$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z PROC ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::erase, COMDAT
; _this$ = ecx

; 786  : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 787  : 
; 788  :  #if _HAS_ITERATOR_DEBUGGING
; 789  : 		if (_Where._Mycont != this || _Where._Ptr == _Myhead)
; 790  : 			_DEBUG_ERROR("list erase iterator outside range");
; 791  : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 792  : 		_Orphan_ptr(*this, _Pnode);
; 793  : 
; 794  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 795  : 		_Nodeptr _Pnode = (_Where++)._Mynode();

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Tmp$273781[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Where$[ebp], edx
	mov	eax, DWORD PTR __Tmp$273781[ebp]
	mov	DWORD PTR $T273765[ebp], eax
	mov	ecx, DWORD PTR $T273765[ebp]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 796  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 797  : 
; 798  : 		if (_Pnode != _Myhead)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	je	SHORT $LN1@erase@2

; 799  : 			{	// not list head, safe to erase
; 800  : 			_Nextnode(_Prevnode(_Pnode)) = _Nextnode(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T273794[ebp], edx
	mov	eax, DWORD PTR $T273794[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 801  : 			_Prevnode(_Nextnode(_Pnode)) = _Prevnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 802  : 			this->_Alnod.destroy(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T273813[ebp], ecx
	mov	ecx, DWORD PTR $T273813[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	edx, edx
	and	edx, 1
	je	SHORT $LN24@erase@2
	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN24@erase@2:

; 803  : 			this->_Alnod.deallocate(_Pnode, 1);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 804  : 			--_Mysize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN1@erase@2:

; 805  : 			}
; 806  : 		return (_Make_iter(_Where));

	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T273863[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR $T273863[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 807  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ENDP ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::erase
_TEXT	ENDS
PUBLIC	?_Splice@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@AAV12@00I_N@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Splice
; Function compile flags: /Odtp
;	COMDAT ?splice@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@AAV12@0@Z
_TEXT	SEGMENT
_this$ = -240						; size = 4
$T273876 = -12						; size = 4
$T273866 = -8						; size = 4
__Last$235754 = -4					; size = 4
__Where$ = 8						; size = 4
__Right$ = 12						; size = 4
__First$ = 16						; size = 4
?splice@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@AAV12@0@Z PROC ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::splice, COMDAT
; _this$ = ecx

; 883  : 		{	// splice _Right [_First, _First + 1) at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	mov	DWORD PTR _this$[ebp], ecx

; 884  : 
; 885  :  #if _HAS_ITERATOR_DEBUGGING
; 886  : 		if (_First == _Right.end())
; 887  : 			_DEBUG_ERROR("list splice iterator outside range");
; 888  : 		else
; 889  : 
; 890  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 891  : 		if (_First != _Right.end())

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T273876[ebp], ecx
	mov	edx, DWORD PTR $T273876[ebp]
	mov	DWORD PTR $T273866[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T273866[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN4@splice

; 892  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 893  : 
; 894  : 			{	// element exists, try splice
; 895  : 			const_iterator _Last = _First;

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Last$235754[ebp], ecx

; 896  : 			++_Last;

	mov	edx, DWORD PTR __Last$235754[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Last$235754[ebp], eax

; 897  : 			if (this != &_Right
; 898  : 				|| (_Where != _First && _Where != _Last))

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN1@splice
	mov	edx, DWORD PTR __Where$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __First$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN4@splice
	mov	eax, DWORD PTR __Where$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$235754[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN4@splice
$LN1@splice:

; 899  : 				_Splice(_Where, _Right, _First, _Last, 1);

	push	0
	push	1
	mov	ecx, DWORD PTR __Last$235754[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Splice@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@AAV12@00I_N@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Splice
$LN4@splice:

; 900  : 			}
; 901  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?splice@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@AAV12@0@Z ENDP ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::splice
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@QAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@I@Z ; std::allocator<std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Node>::allocate
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ$0
__unwindtable$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ$2
__ehfuncinfo$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ
_TEXT	SEGMENT
tv157 = -84						; size = 4
tv152 = -80						; size = 4
_this$ = -76						; size = 4
$T274380 = -72						; size = 4
$T274365 = -68						; size = 4
$T274360 = -64						; size = 4
__Vptr$274358 = -60					; size = 4
$T274335 = -56						; size = 4
$T274330 = -52						; size = 4
__Vptr$274328 = -48					; size = 4
__Pnode$ = -24						; size = 4
__Linkcnt$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ PROC ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Buynode, COMDAT
; _this$ = ecx

; 1171 : 		{	// allocate a head node and set links

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1172 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@QAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@I@Z ; std::allocator<std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Node>::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 1173 : 		int _Linkcnt = 0;

	mov	DWORD PTR __Linkcnt$[ebp], 0

; 1174 : 
; 1175 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1176 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR $T274335[ebp], eax
	mov	ecx, DWORD PTR $T274335[ebp]
	mov	DWORD PTR __Vptr$274328[ebp], ecx
	mov	edx, DWORD PTR __Vptr$274328[ebp]
	mov	DWORD PTR $T274330[ebp], edx
	cmp	DWORD PTR $T274330[ebp], 0
	je	SHORT $LN22@Buynode
	mov	eax, DWORD PTR $T274330[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T274330[ebp]
	mov	DWORD PTR tv152[ebp], edx
	jmp	SHORT $LN18@Buynode
$LN22@Buynode:
	mov	DWORD PTR tv152[ebp], 0
$LN18@Buynode:

; 1177 : 		++_Linkcnt;

	mov	eax, DWORD PTR __Linkcnt$[ebp]
	add	eax, 1
	mov	DWORD PTR __Linkcnt$[ebp], eax

; 1178 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T274365[ebp], ecx
	mov	edx, DWORD PTR $T274365[ebp]
	mov	DWORD PTR __Vptr$274358[ebp], edx
	mov	eax, DWORD PTR __Vptr$274358[ebp]
	mov	DWORD PTR $T274360[ebp], eax
	cmp	DWORD PTR $T274360[ebp], 0
	je	SHORT $LN32@Buynode
	mov	ecx, DWORD PTR $T274360[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T274360[ebp]
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN28@Buynode
$LN32@Buynode:
	mov	DWORD PTR tv157[ebp], 0
$LN28@Buynode:
	jmp	SHORT $LN5@Buynode
__catch$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ$0:

; 1179 : 		_CATCH_ALL
; 1180 : 		if (0 < _Linkcnt)
; 1181 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1182 : 		this->_Alnod.deallocate(_Pnode, 1);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR $T274380[ebp], ecx
	mov	edx, DWORD PTR $T274380[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1183 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1184 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ$1
	ret	0
$LN5@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ$1:

; 1185 : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN4@Buynode:

; 1186 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@XZ ENDP ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Buynode
PUBLIC	?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Insert_n
PUBLIC	?erase@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@V?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@0@Z ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::erase
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Assign_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXIABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z
_TEXT	SEGMENT
_this$ = -112						; size = 4
$T274581 = -108						; size = 4
$T274424 = -40						; size = 4
$T274408 = -36						; size = 4
$T274398 = -32						; size = 4
$T274397 = -28						; size = 4
$T274396 = -24						; size = 4
$T274395 = -20						; size = 4
$T274394 = -16						; size = 4
$T274393 = -12						; size = 4
$T274392 = -8						; size = 4
__Tmp$ = -4						; size = 4
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Assign_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXIABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z PROC ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Assign_n, COMDAT
; _this$ = ecx

; 1095 : 		{	// assign _Count * _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	DWORD PTR _this$[ebp], ecx

; 1096 : 		_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 1097 : 		erase(begin(), end());

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T274408[ebp], eax
	mov	ecx, DWORD PTR $T274408[ebp]
	mov	DWORD PTR $T274393[ebp], ecx
	mov	edx, DWORD PTR $T274393[ebp]
	mov	DWORD PTR $T274392[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T274424[ebp], ecx
	mov	edx, DWORD PTR $T274424[ebp]
	mov	DWORD PTR $T274395[ebp], edx
	mov	eax, DWORD PTR $T274395[ebp]
	mov	DWORD PTR $T274394[ebp], eax
	mov	ecx, DWORD PTR $T274392[ebp]
	push	ecx
	mov	edx, DWORD PTR $T274394[ebp]
	push	edx
	lea	eax, DWORD PTR $T274396[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@V?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@0@Z ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::erase

; 1098 : 		insert(begin(), _Count, _Tmp);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T274581[ebp], edx
	mov	eax, DWORD PTR $T274581[ebp]
	mov	DWORD PTR $T274398[ebp], eax
	mov	ecx, DWORD PTR $T274398[ebp]
	mov	DWORD PTR $T274397[ebp], ecx
	lea	edx, DWORD PTR __Tmp$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T274397[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Insert_n

; 1099 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Assign_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXIABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z ENDP ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Assign_n
_TEXT	ENDS
PUBLIC	??$_Allocate@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IPAV120@@Z ; std::_Allocate<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> >
PUBLIC	?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$274607 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAE_NI@Z PROC ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@39

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@39
	jmp	SHORT $LN3@Buy@39
$LN4@Buy@39:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$274607[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$274607[ebp], 0
	jbe	SHORT $LN11@Buy@39
	mov	eax, DWORD PTR __Count$274607[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@39
$LN11@Buy@39:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@39:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@39

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@39

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@39:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IPAV120@@Z ; std::_Allocate<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> >
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@39:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@39:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAE_NI@Z ENDP ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Buy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xhash
_TEXT	ENDS
;	COMDAT ?_Reinsert@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAEXXZ
_TEXT	SEGMENT
_this$ = -196						; size = 4
$T274671 = -32						; size = 4
$T274659 = -28						; size = 4
$T274650 = -24						; size = 4
$T274637 = -20						; size = 8
$T274636 = -12						; size = 4
$T274635 = -8						; size = 4
__First$ = -4						; size = 4
?_Reinsert@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAEXXZ PROC ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Reinsert, COMDAT
; _this$ = ecx

; 887  : 		{	// insert elements at beginning of list into table

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	mov	DWORD PTR _this$[ebp], ecx

; 888  : 		iterator _First;

	mov	DWORD PTR __First$[ebp], 0
$LN2@Reinsert:

; 889  : 		for (; (_First = _List.begin()) != _Get_iter_from_vec(_Vec[0]); )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T274650[ebp], ecx
	mov	edx, DWORD PTR $T274650[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T274659[ebp], eax
	mov	ecx, DWORD PTR $T274659[ebp]
	mov	DWORD PTR $T274635[ebp], ecx
	mov	edx, DWORD PTR $T274635[ebp]
	mov	DWORD PTR __First$[ebp], edx
	xor	eax, eax
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR $T274671[ebp], eax
	mov	edx, DWORD PTR $T274671[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T274636[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T274636[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@Reinsert

; 890  : 			_Insert(*_First, _First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	push	eax
	lea	ecx, DWORD PTR $T274637[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAE?AU?$pair@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@_N@std@@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@4@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@4@@Z ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Insert
	jmp	SHORT $LN2@Reinsert
$LN3@Reinsert:

; 891  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Reinsert@?$_Hash@V?$_Hmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@stdext@@@stdext@@IAEXXZ ENDP ; stdext::_Hash<stdext::_Hmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Reinsert
_TEXT	ENDS
PUBLIC	??$hash_value@DU?$char_traits@D@std@@V?$allocator@D@2@@stdext@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stdext::hash_value<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp__ldiv:PROC
; Function compile flags: /Odtp
;	COMDAT ??R?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@QBEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T275179 = -20						; size = 8
__Quot$ = -12						; size = 4
__Qrem$ = -8						; size = 8
__Keyval$ = 8						; size = 4
??R?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@QBEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator(), COMDAT
; _this$ = ecx

; 127  : 		{	// hash _Keyval to size_t value by pseudorandomizing transform

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		long _Quot = (long)(hash_value(_Keyval) & LONG_MAX);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	call	??$hash_value@DU?$char_traits@D@std@@V?$allocator@D@2@@stdext@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stdext::hash_value<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 4
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR __Quot$[ebp], eax

; 129  : 		ldiv_t _Qrem = ldiv(_Quot, 127773);

	push	127773					; 0001f31dH
	mov	ecx, DWORD PTR __Quot$[ebp]
	push	ecx
	call	DWORD PTR __imp__ldiv
	add	esp, 8
	mov	DWORD PTR $T275179[ebp], eax
	mov	DWORD PTR $T275179[ebp+4], edx
	mov	edx, DWORD PTR $T275179[ebp]
	mov	DWORD PTR __Qrem$[ebp], edx
	mov	eax, DWORD PTR $T275179[ebp+4]
	mov	DWORD PTR __Qrem$[ebp+4], eax

; 130  : 
; 131  : 		_Qrem.rem = 16807 * _Qrem.rem - 2836 * _Qrem.quot;

	mov	ecx, DWORD PTR __Qrem$[ebp+4]
	imul	ecx, 16807				; 000041a7H
	mov	edx, DWORD PTR __Qrem$[ebp]
	imul	edx, 2836				; 00000b14H
	sub	ecx, edx
	mov	DWORD PTR __Qrem$[ebp+4], ecx

; 132  : 		if (_Qrem.rem < 0)

	jns	SHORT $LN1@operator@3

; 133  : 			_Qrem.rem += LONG_MAX;

	mov	eax, DWORD PTR __Qrem$[ebp+4]
	add	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR __Qrem$[ebp+4], eax
$LN1@operator@3:

; 134  : 		return ((size_t)_Qrem.rem);

	mov	eax, DWORD PTR __Qrem$[ebp+4]

; 135  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??R?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@QBEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; stdext::hash_compare<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator()
_TEXT	ENDS
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
;	COMDAT ??_R0?AVout_of_range@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_Eout_of_range@std@@UAEPAXI@Z ; std::out_of_range::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z$0
__ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
_TEXT	SEGMENT
tv177 = -216						; size = 4
tv165 = -212						; size = 4
_this$ = -208						; size = 4
$T276049 = -204						; size = 4
$T276044 = -200						; size = 4
$T275448 = -136						; size = 4
$T275447 = -132						; size = 4
__Tmp$275445 = -125					; size = 1
$T275423 = -124						; size = 4
$T275416 = -120						; size = 4
$T275346 = -116						; size = 4
$T275310 = -112						; size = 4
$T275305 = -108						; size = 4
$T275277 = -104						; size = 4
$T275201 = -100						; size = 4
$T275192 = -96						; size = 28
$T275191 = -68						; size = 40
__Fixnodeparent$ = -28					; size = 4
__Pnode$ = -24						; size = 4
__Fixnode$ = -20					; size = 4
__Erasednode$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase, COMDAT
; _this$ = ecx

; 764  : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 765  : 
; 766  :  #if _HAS_ITERATOR_DEBUGGING
; 767  : 		if (_Where._Mycont != this || _Isnil(_Where._Mynode()))
; 768  : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 769  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 770  : 		++_Where;	// save successor iterator for return
; 771  : 		_Orphan_ptr(*this, _Erasednode);
; 772  : 
; 773  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 774  : 		if (_Isnil(_Where._Mynode()))

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T275201[ebp], eax
	mov	ecx, DWORD PTR $T275201[ebp]
	movsx	edx, BYTE PTR [ecx+21]
	test	edx, edx
	je	SHORT $LN55@erase@3

; 775  : 			_THROW(out_of_range, "invalid map/set<T> iterator");

	push	OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
	lea	ecx, DWORD PTR $T275192[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T275192[ebp]
	push	eax
	lea	ecx, DWORD PTR $T275191[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR $T275191[ebp], OFFSET ??_7out_of_range@std@@6B@
	push	OFFSET __TI3?AVout_of_range@std@@
	lea	ecx, DWORD PTR $T275191[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T275192[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 776  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase

$LN55@erase@3:
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Erasednode$[ebp], edx

; 777  : 		++_Where;	// save successor iterator for return

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::const_iterator::_Inc

; 778  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 779  : 
; 780  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 781  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 782  : 		_Nodeptr _Pnode = _Erasednode;

	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	DWORD PTR __Pnode$[ebp], eax

; 783  : 
; 784  : 		if (_Isnil(_Left(_Pnode)))

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+21]
	test	eax, eax
	je	SHORT $LN67@erase@3

; 785  : 			_Fixnode = _Right(_Pnode);	// must stitch up right subtree

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Fixnode$[ebp], edx
	jmp	SHORT $LN38@erase@3

; 786  : 		else if (_Isnil(_Right(_Pnode)))

$LN67@erase@3:
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+21]
	test	edx, edx
	je	SHORT $LN71@erase@3

; 787  : 			_Fixnode = _Left(_Pnode);	// must stitch up left subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 788  : 		else

	jmp	SHORT $LN38@erase@3

; 789  : 			{	// two subtrees, must lift successor node to replace erased
; 790  : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

$LN71@erase@3:
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Pnode$[ebp], edx

; 791  : 			_Fixnode = _Right(_Pnode);	// _Fixnode is its only subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Fixnode$[ebp], ecx
$LN38@erase@3:

; 792  : 			}
; 793  : 
; 794  : 		if (_Pnode == _Erasednode)

	mov	edx, DWORD PTR __Pnode$[ebp]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	$LN137@erase@3

; 795  : 			{	// at most one subtree, relink it
; 796  : 			_Fixnodeparent = _Parent(_Erasednode);

	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Fixnodeparent$[ebp], ecx

; 797  : 			if (!_Isnil(_Fixnode))

	mov	edx, DWORD PTR __Fixnode$[ebp]
	movsx	eax, BYTE PTR [edx+21]
	test	eax, eax
	jne	SHORT $LN81@erase@3

; 798  : 				_Parent(_Fixnode) = _Fixnodeparent;	// link up

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 799  : 
; 800  : 			if (_Root() == _Erasednode)

$LN81@erase@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN89@erase@3

; 801  : 				_Root() = _Fixnode;	// link down from root

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [ecx+4], edx
	jmp	SHORT $LN32@erase@3

; 802  : 			else if (_Left(_Fixnodeparent) == _Erasednode)

$LN89@erase@3:
	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN93@erase@3

; 803  : 				_Left(_Fixnodeparent) = _Fixnode;	// link down to left

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [edx], eax

; 804  : 			else

	jmp	SHORT $LN32@erase@3

; 805  : 				_Right(_Fixnodeparent) = _Fixnode;	// link down to right

$LN93@erase@3:
	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN32@erase@3:

; 806  : 
; 807  : 			if (_Lmost() == _Erasednode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T275277[ebp], ecx
	mov	edx, DWORD PTR $T275277[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN115@erase@3

; 808  : 				_Lmost() = _Isnil(_Fixnode)
; 809  : 					? _Fixnodeparent	// smallest is parent of erased node
; 810  : 					: _Min(_Fixnode);	// smallest in relinked subtree

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	movsx	edx, BYTE PTR [ecx+21]
	test	edx, edx
	je	SHORT $LN43@erase@3
	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR tv165[ebp], eax
	jmp	SHORT $LN44@erase@3
$LN43@erase@3:
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR $T275305[ebp], ecx
$LN107@erase@3:
	mov	edx, DWORD PTR $T275305[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+21]
	test	ecx, ecx
	jne	SHORT $LN103@erase@3
	mov	edx, DWORD PTR $T275305[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T275305[ebp], eax
	jmp	SHORT $LN107@erase@3
$LN103@erase@3:
	mov	ecx, DWORD PTR $T275305[ebp]
	mov	DWORD PTR tv165[ebp], ecx
$LN44@erase@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T275310[ebp], eax
	mov	ecx, DWORD PTR $T275310[ebp]
	mov	edx, DWORD PTR tv165[ebp]
	mov	DWORD PTR [ecx], edx

; 811  : 
; 812  : 			if (_Rmost() == _Erasednode)

$LN115@erase@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN28@erase@3

; 813  : 				_Rmost() = _Isnil(_Fixnode)
; 814  : 					? _Fixnodeparent	// largest is parent of erased node
; 815  : 					: _Max(_Fixnode);	// largest in relinked subtree

	mov	eax, DWORD PTR __Fixnode$[ebp]
	movsx	ecx, BYTE PTR [eax+21]
	test	ecx, ecx
	je	SHORT $LN45@erase@3
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR tv177[ebp], edx
	jmp	SHORT $LN131@erase@3
$LN45@erase@3:
	mov	eax, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR $T275346[ebp], eax
$LN127@erase@3:
	mov	ecx, DWORD PTR $T275346[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+21]
	test	eax, eax
	jne	SHORT $LN123@erase@3
	mov	ecx, DWORD PTR $T275346[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T275346[ebp], edx
	jmp	SHORT $LN127@erase@3
$LN123@erase@3:
	mov	eax, DWORD PTR $T275346[ebp]
	mov	DWORD PTR tv177[ebp], eax
$LN131@erase@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR tv177[ebp]
	mov	DWORD PTR [edx+8], eax
$LN28@erase@3:

; 816  : 			}
; 817  : 		else

	jmp	$LN192@erase@3

; 818  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 819  : 			_Parent(_Left(_Erasednode)) = _Pnode;	// link left up

$LN137@erase@3:
	mov	ecx, DWORD PTR __Erasednode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 820  : 			_Left(_Pnode) = _Left(_Erasednode);	// link successor down

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR __Erasednode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 821  : 
; 822  : 			if (_Pnode == _Right(_Erasednode))

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN145@erase@3

; 823  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Fixnodeparent$[ebp], eax

; 824  : 			else

	jmp	SHORT $LN161@erase@3

; 825  : 				{	// successor further down, link in place of erased
; 826  : 				_Fixnodeparent = _Parent(_Pnode);	// parent is successor's

$LN145@erase@3:
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Fixnodeparent$[ebp], edx

; 827  : 				if (!_Isnil(_Fixnode))

	mov	eax, DWORD PTR __Fixnode$[ebp]
	movsx	ecx, BYTE PTR [eax+21]
	test	ecx, ecx
	jne	SHORT $LN151@erase@3

; 828  : 					_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR [edx+4], eax

; 829  : 				_Left(_Fixnodeparent) = _Fixnode;	// link fix down

$LN151@erase@3:
	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [ecx], edx

; 830  : 				_Right(_Pnode) = _Right(_Erasednode);	// link successor down

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR __Erasednode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 831  : 				_Parent(_Right(_Erasednode)) = _Pnode;	// link right up

	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 832  : 				}
; 833  : 
; 834  : 			if (_Root() == _Erasednode)

$LN161@erase@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN169@erase@3

; 835  : 				_Root() = _Pnode;	// link down from root

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx
	jmp	SHORT $LN183@erase@3

; 836  : 			else if (_Left(_Parent(_Erasednode)) == _Erasednode)

$LN169@erase@3:
	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T275416[ebp], ecx
	mov	edx, DWORD PTR $T275416[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN179@erase@3

; 837  : 				_Left(_Parent(_Erasednode)) = _Pnode;	// link down to left

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T275423[ebp], edx
	mov	eax, DWORD PTR $T275423[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 838  : 			else

	jmp	SHORT $LN183@erase@3

; 839  : 				_Right(_Parent(_Erasednode)) = _Pnode;	// link down to right

$LN179@erase@3:
	mov	edx, DWORD PTR __Erasednode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 840  : 
; 841  : 			_Parent(_Pnode) = _Parent(_Erasednode);	// link successor up

$LN183@erase@3:
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 842  : 			_STD swap(_Color(_Pnode), _Color(_Erasednode));	// recolor it

	mov	edx, DWORD PTR __Erasednode$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR $T275448[ebp], edx
	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR $T275447[ebp], eax
	mov	ecx, DWORD PTR $T275447[ebp]
	cmp	ecx, DWORD PTR $T275448[ebp]
	je	SHORT $LN192@erase@3
	mov	edx, DWORD PTR $T275447[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR __Tmp$275445[ebp], al
	mov	ecx, DWORD PTR $T275447[ebp]
	mov	edx, DWORD PTR $T275448[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR $T275448[ebp]
	mov	dl, BYTE PTR __Tmp$275445[ebp]
	mov	BYTE PTR [ecx], dl

; 843  : 			}
; 844  : 
; 845  : 		if (_Color(_Erasednode) == _Black)

$LN192@erase@3:
	mov	eax, DWORD PTR __Erasednode$[ebp]
	movsx	ecx, BYTE PTR [eax+20]
	cmp	ecx, 1
	jne	$LN588@erase@3

; 846  : 			{	// erasing black link, must recolor/rebalance tree
; 847  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 848  : 				_Fixnodeparent = _Parent(_Fixnode))

	jmp	SHORT $LN196@erase@3
$LN194@erase@3:
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Fixnodeparent$[ebp], eax
$LN196@erase@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Fixnode$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	je	$LN586@erase@3
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	movsx	edx, BYTE PTR [ecx+20]
	cmp	edx, 1
	jne	$LN586@erase@3

; 849  : 				if (_Fixnode == _Left(_Fixnodeparent))

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	$LN395@erase@3

; 850  : 					{	// fixup left subtree
; 851  : 					_Pnode = _Right(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Pnode$[ebp], eax

; 852  : 					if (_Color(_Pnode) == _Red)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	movsx	edx, BYTE PTR [ecx+20]
	test	edx, edx
	jne	SHORT $LN263@erase@3

; 853  : 						{	// rotate red up from right subtree
; 854  : 						_Color(_Pnode) = _Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+20], 1

; 855  : 						_Color(_Fixnodeparent) = _Red;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [ecx+20], 0

; 856  : 						_Lrotate(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lrotate

; 857  : 						_Pnode = _Right(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 858  : 						}
; 859  : 
; 860  : 					if (_Isnil(_Pnode))

$LN263@erase@3:
	mov	edx, DWORD PTR __Pnode$[ebp]
	movsx	eax, BYTE PTR [edx+21]
	test	eax, eax
	je	SHORT $LN267@erase@3

; 861  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 862  : 					else if (_Color(_Left(_Pnode)) == _Black

	jmp	$LN12@erase@3

; 863  : 						&& _Color(_Right(_Pnode)) == _Black)

$LN267@erase@3:
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+20]
	cmp	ecx, 1
	jne	SHORT $LN277@erase@3
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+20]
	cmp	ecx, 1
	jne	SHORT $LN277@erase@3

; 864  : 						{	// redden right subtree with black children
; 865  : 						_Color(_Pnode) = _Red;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [edx+20], 0

; 866  : 						_Fixnode = _Fixnodeparent;

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], eax

; 867  : 						}
; 868  : 					else

	jmp	SHORT $LN12@erase@3

; 869  : 						{	// must rearrange right subtree
; 870  : 						if (_Color(_Right(_Pnode)) == _Black)

$LN277@erase@3:
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+20]
	cmp	eax, 1
	jne	SHORT $LN338@erase@3

; 871  : 							{	// rotate red up from left sub-subtree
; 872  : 							_Color(_Left(_Pnode)) = _Black;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx+20], 1

; 873  : 							_Color(_Pnode) = _Red;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+20], 0

; 874  : 							_Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rrotate

; 875  : 							_Pnode = _Right(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Pnode$[ebp], eax

; 876  : 							}
; 877  : 
; 878  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

$LN338@erase@3:
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	al, BYTE PTR [edx+20]
	mov	BYTE PTR [ecx+20], al

; 879  : 						_Color(_Fixnodeparent) = _Black;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [ecx+20], 1

; 880  : 						_Color(_Right(_Pnode)) = _Black;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+20], 1

; 881  : 						_Lrotate(_Fixnodeparent);

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lrotate

; 882  : 						break;	// tree now recolored/rebalanced

	jmp	$LN586@erase@3
$LN12@erase@3:

; 883  : 						}
; 884  : 					}
; 885  : 				else

	jmp	$LN8@erase@3

; 886  : 					{	// fixup right subtree
; 887  : 					_Pnode = _Left(_Fixnodeparent);

$LN395@erase@3:
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Pnode$[ebp], eax

; 888  : 					if (_Color(_Pnode) == _Red)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	movsx	edx, BYTE PTR [ecx+20]
	test	edx, edx
	jne	SHORT $LN454@erase@3

; 889  : 						{	// rotate red up from left subtree
; 890  : 						_Color(_Pnode) = _Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+20], 1

; 891  : 						_Color(_Fixnodeparent) = _Red;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [ecx+20], 0

; 892  : 						_Rrotate(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rrotate

; 893  : 						_Pnode = _Left(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 894  : 						}
; 895  : 					if (_Isnil(_Pnode))

$LN454@erase@3:
	mov	edx, DWORD PTR __Pnode$[ebp]
	movsx	eax, BYTE PTR [edx+21]
	test	eax, eax
	je	SHORT $LN458@erase@3

; 896  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 897  : 					else if (_Color(_Right(_Pnode)) == _Black

	jmp	$LN8@erase@3

; 898  : 						&& _Color(_Left(_Pnode)) == _Black)

$LN458@erase@3:
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+20]
	cmp	ecx, 1
	jne	SHORT $LN468@erase@3
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+20]
	cmp	ecx, 1
	jne	SHORT $LN468@erase@3

; 899  : 						{	// redden left subtree with black children
; 900  : 						_Color(_Pnode) = _Red;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [edx+20], 0

; 901  : 						_Fixnode = _Fixnodeparent;

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], eax

; 902  : 						}
; 903  : 					else

	jmp	SHORT $LN8@erase@3

; 904  : 						{	// must rearrange left subtree
; 905  : 						if (_Color(_Left(_Pnode)) == _Black)

$LN468@erase@3:
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+20]
	cmp	eax, 1
	jne	SHORT $LN529@erase@3

; 906  : 							{	// rotate red up from right sub-subtree
; 907  : 							_Color(_Right(_Pnode)) = _Black;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+20], 1

; 908  : 							_Color(_Pnode) = _Red;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+20], 0

; 909  : 							_Lrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lrotate

; 910  : 							_Pnode = _Left(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Pnode$[ebp], eax

; 911  : 							}
; 912  : 
; 913  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

$LN529@erase@3:
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	al, BYTE PTR [edx+20]
	mov	BYTE PTR [ecx+20], al

; 914  : 						_Color(_Fixnodeparent) = _Black;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [ecx+20], 1

; 915  : 						_Color(_Left(_Pnode)) = _Black;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+20], 1

; 916  : 						_Rrotate(_Fixnodeparent);

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rrotate

; 917  : 						break;	// tree now recolored/rebalanced

	jmp	SHORT $LN586@erase@3
$LN8@erase@3:

; 918  : 						}
; 919  : 					}

	jmp	$LN194@erase@3

; 920  : 
; 921  : 			_Color(_Fixnode) = _Black;	// ensure stopping node is black

$LN586@erase@3:
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	BYTE PTR [edx+20], 1

; 922  : 			}
; 923  : 
; 924  : 		this->_Alnod.destroy(_Erasednode);	// destroy, free erased node

$LN588@erase@3:

; 925  : 		this->_Alnod.deallocate(_Erasednode, 1);

	mov	eax, DWORD PTR __Erasednode$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 926  : 
; 927  : 		if (0 < _Mysize)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jbe	SHORT $LN1@erase@3

; 928  : 			--_Mysize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN1@erase@3:

; 929  : 
; 930  : 		return (_Make_iter(_Where));	// return successor iterator

	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T276049[ebp], edx
	mov	eax, DWORD PTR $T276049[ebp]
	mov	DWORD PTR $T276044[ebp], eax
	mov	ecx, DWORD PTR $T276044[ebp]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN42@erase@3:

; 931  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z$0:
	lea	ecx, DWORD PTR $T275192[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::erase
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx

; 133  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@

; 134  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0out_of_range@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0out_of_range@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0out_of_range@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0out_of_range@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0out_of_range@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0out_of_range@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0out_of_range@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0out_of_range@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T276143 = -12						; size = 4
$T276136 = -8						; size = 4
__Pnode$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1285 : 		{	// promote right node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1286 : 		_Nodeptr _Pnode = _Right(_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1287 : 		_Right(_Wherenode) = _Left(_Pnode);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+8], ecx

; 1288 : 
; 1289 : 		if (!_Isnil(_Left(_Pnode)))

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+21]
	test	ecx, ecx
	jne	SHORT $LN24@Lrotate

; 1290 : 			_Parent(_Left(_Pnode)) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1291 : 		_Parent(_Pnode) = _Parent(_Wherenode);

$LN24@Lrotate:
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 1292 : 
; 1293 : 		if (_Wherenode == _Root())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN34@Lrotate

; 1294 : 			_Root() = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN46@Lrotate

; 1295 : 		else if (_Wherenode == _Left(_Parent(_Wherenode)))

$LN34@Lrotate:
	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T276136[ebp], eax
	mov	ecx, DWORD PTR $T276136[ebp]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN44@Lrotate

; 1296 : 			_Left(_Parent(_Wherenode)) = _Pnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T276143[ebp], ecx
	mov	edx, DWORD PTR $T276143[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [edx], eax

; 1297 : 		else

	jmp	SHORT $LN46@Lrotate

; 1298 : 			_Right(_Parent(_Wherenode)) = _Pnode;

$LN44@Lrotate:
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1299 : 
; 1300 : 		_Left(_Pnode) = _Wherenode;

$LN46@Lrotate:
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [ecx], edx

; 1301 : 		_Parent(_Wherenode) = _Pnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1302 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Lrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Lrotate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T276219 = -8						; size = 4
__Pnode$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1329 : 		{	// promote left node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1330 : 		_Nodeptr _Pnode = _Left(_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1331 : 		_Left(_Wherenode) = _Right(_Pnode);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx

; 1332 : 
; 1333 : 		if (!_Isnil(_Right(_Pnode)))

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+21]
	test	ecx, ecx
	jne	SHORT $LN24@Rrotate

; 1334 : 			_Parent(_Right(_Pnode)) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1335 : 		_Parent(_Pnode) = _Parent(_Wherenode);

$LN24@Rrotate:
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 1336 : 
; 1337 : 		if (_Wherenode == _Root())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN36@Rrotate

; 1338 : 			_Root() = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN46@Rrotate

; 1339 : 		else if (_Wherenode == _Right(_Parent(_Wherenode)))

$LN36@Rrotate:
	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN42@Rrotate

; 1340 : 			_Right(_Parent(_Wherenode)) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1341 : 		else

	jmp	SHORT $LN46@Rrotate

; 1342 : 			_Left(_Parent(_Wherenode)) = _Pnode;

$LN42@Rrotate:
	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T276219[ebp], eax
	mov	ecx, DWORD PTR $T276219[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx], edx

; 1343 : 
; 1344 : 		_Right(_Pnode) = _Wherenode;

$LN46@Rrotate:
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1345 : 		_Parent(_Wherenode) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1346 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Rrotate@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>::allocate
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ$0
__unwindtable$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ$2
__ehfuncinfo$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
tv72 = -96						; size = 4
tv182 = -92						; size = 4
tv177 = -88						; size = 4
_this$ = -84						; size = 4
$T276327 = -80						; size = 4
__Vptr$276325 = -76					; size = 4
$T276298 = -72						; size = 4
__Vptr$276296 = -68					; size = 4
$T276269 = -64						; size = 4
__Vptr$276267 = -60					; size = 4
$T276230 = -36						; size = 4
$T276229 = -32						; size = 4
$T276228 = -28						; size = 4
__Wherenode$ = -24					; size = 4
__Linkcnt$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1383 : 		{	// allocate a head/nil node

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1384 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>::allocate
	mov	DWORD PTR __Wherenode$[ebp], eax

; 1385 : 		int _Linkcnt = 0;

	mov	DWORD PTR __Linkcnt$[ebp], 0

; 1386 : 
; 1387 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1388 : 		this->_Alptr.construct(&_Left(_Wherenode), 0);

	mov	DWORD PTR $T276228[ebp], 0
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR __Vptr$276267[ebp], eax
	mov	ecx, DWORD PTR __Vptr$276267[ebp]
	mov	DWORD PTR $T276269[ebp], ecx
	cmp	DWORD PTR $T276269[ebp], 0
	je	SHORT $LN23@Buynode@2
	mov	edx, DWORD PTR $T276269[ebp]
	mov	eax, DWORD PTR $T276228[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T276269[ebp]
	mov	DWORD PTR tv177[ebp], ecx
	jmp	SHORT $LN19@Buynode@2
$LN23@Buynode@2:
	mov	DWORD PTR tv177[ebp], 0
$LN19@Buynode@2:

; 1389 : 		++_Linkcnt;

	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx

; 1390 : 		this->_Alptr.construct(&_Parent(_Wherenode), 0);

	mov	DWORD PTR $T276229[ebp], 0
	mov	eax, DWORD PTR __Wherenode$[ebp]
	add	eax, 4
	mov	DWORD PTR __Vptr$276296[ebp], eax
	mov	ecx, DWORD PTR __Vptr$276296[ebp]
	mov	DWORD PTR $T276298[ebp], ecx
	cmp	DWORD PTR $T276298[ebp], 0
	je	SHORT $LN33@Buynode@2
	mov	edx, DWORD PTR $T276298[ebp]
	mov	eax, DWORD PTR $T276229[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T276298[ebp]
	mov	DWORD PTR tv182[ebp], ecx
	jmp	SHORT $LN29@Buynode@2
$LN33@Buynode@2:
	mov	DWORD PTR tv182[ebp], 0
$LN29@Buynode@2:

; 1391 : 		++_Linkcnt;

	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx

; 1392 : 		this->_Alptr.construct(&_Right(_Wherenode), 0);

	mov	DWORD PTR $T276230[ebp], 0
	mov	eax, DWORD PTR __Wherenode$[ebp]
	add	eax, 8
	mov	DWORD PTR __Vptr$276325[ebp], eax
	mov	ecx, DWORD PTR __Vptr$276325[ebp]
	mov	DWORD PTR $T276327[ebp], ecx
	cmp	DWORD PTR $T276327[ebp], 0
	je	SHORT $LN43@Buynode@2
	mov	edx, DWORD PTR $T276327[ebp]
	mov	eax, DWORD PTR $T276230[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T276327[ebp]
	mov	DWORD PTR tv72[ebp], ecx
	jmp	SHORT $LN39@Buynode@2
$LN43@Buynode@2:
	mov	DWORD PTR tv72[ebp], 0
$LN39@Buynode@2:
	jmp	SHORT $LN6@Buynode@2
__catch$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ$0:

; 1393 : 		_CATCH_ALL
; 1394 : 		if (1 < _Linkcnt)
; 1395 : 			this->_Alptr.destroy(&_Parent(_Wherenode));
; 1396 : 		if (0 < _Linkcnt)
; 1397 : 			this->_Alptr.destroy(&_Left(_Wherenode));
; 1398 : 		this->_Alnod.deallocate(_Wherenode, 1);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1399 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1400 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN61@Buynode@2
	ret	0
$LN6@Buynode@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1401 : 		_Color(_Wherenode) = _Black;

$LN61@Buynode@2:
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	BYTE PTR [eax+20], 1

; 1402 : 		_Isnil(_Wherenode) = false;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	BYTE PTR [ecx+21], 0

; 1403 : 		return (_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
$LN5@Buynode@2:

; 1404 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z$0
__unwindtable$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z$3
__ehfuncinfo$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z
_TEXT	SEGMENT
tv86 = -52						; size = 4
_this$ = -48						; size = 4
$T276376 = -28						; size = 4
$T276375 = -24						; size = 4
__Wherenode$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1408 : 		{	// allocate a node with pointers, value, and color

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1409 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

	push	0
	push	1
	call	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>
	add	esp, 8
	mov	DWORD PTR __Wherenode$[ebp], eax

; 1410 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1411 : 		new (_Wherenode) _Node(_Larg, _Parg, _Rarg, _Val, _Carg);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR $T276376[ebp], eax
	cmp	DWORD PTR $T276376[ebp], 0
	je	SHORT $LN4@Buynode@3
	mov	ecx, DWORD PTR $T276376[ebp]
	mov	edx, DWORD PTR __Larg$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T276376[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR $T276376[ebp]
	mov	eax, DWORD PTR __Rarg$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T276376[ebp]
	mov	DWORD PTR [ecx+12], edx
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR $T276376[ebp]
	mov	al, BYTE PTR __Carg$[ebp]
	mov	BYTE PTR [edx+20], al
	mov	ecx, DWORD PTR $T276376[ebp]
	mov	BYTE PTR [ecx+21], 0
	mov	edx, DWORD PTR $T276376[ebp]
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN5@Buynode@3
$LN4@Buynode@3:
	mov	DWORD PTR tv86[ebp], 0
$LN5@Buynode@3:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR $T276375[ebp], eax
	jmp	SHORT $LN6@Buynode@3
__catch$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z$0:

; 1412 : 		_CATCH_ALL
; 1413 : 		this->_Alnod.deallocate(_Wherenode, 1);

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1414 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1415 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z$1
	ret	0
$LN6@Buynode@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z$1:

; 1416 : 		return (_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
$LN3@Buynode@3:

; 1417 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBIH@2@D@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Buynode
; Function compile flags: /Odtp
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T276453 = -16						; size = 4
$T276432 = -12						; size = 4
$T276425 = -8						; size = 4
__Pnode$236301 = -4					; size = 4
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::const_iterator::_Dec, COMDAT
; _this$ = ecx

; 320  : 			{	// move to node with next smaller value

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 321  : 
; 322  :  #if _HAS_ITERATOR_DEBUGGING
; 323  : 			if (this->_Mycont == 0
; 324  : 				|| _Ptr == 0)
; 325  : 				{
; 326  : 				_DEBUG_ERROR("map/set iterator not decrementable");
; 327  : 				_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 				}
; 329  :  #else
; 330  : 			_SCL_SECURE_VALIDATE(this->_Has_container());
; 331  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 332  : 
; 333  : 			if (_Isnil(_Ptr))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+21]
	test	edx, edx
	je	SHORT $LN9@Dec

; 334  : 			{
; 335  : 				_Ptr = _Right(_Ptr);	// end() ==> rightmost

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx], eax

; 336  :    				if (_Isnil(_Ptr))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+21]
	test	eax, eax
	je	SHORT $LN8@Dec

; 337  : #if _HAS_ITERATOR_DEBUGGING
; 338  : 				{
; 339  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 340  : 					_SCL_SECURE_OUT_OF_RANGE;
; 341  : 				}
; 342  : #elif _SECURE_SCL
; 343  : 				{
; 344  :     				_SCL_SECURE_OUT_OF_RANGE;
; 345  : 				}
; 346  : #else
; 347  : 				return;	// begin() shouldn't be incremented, don't move

	jmp	$LN10@Dec
$LN8@Dec:

; 348  : #endif
; 349  : 			}

	jmp	$LN10@Dec
$LN9@Dec:

; 350  : 			else if (!_Isnil(_Left(_Ptr)))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T276425[ebp], edx
	mov	eax, DWORD PTR $T276425[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+21]
	test	edx, edx
	jne	SHORT $LN34@Dec

; 351  : 				_Ptr = _Max(_Left(_Ptr));	// ==> largest of left subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T276432[ebp], ecx
	mov	edx, DWORD PTR $T276432[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T276453[ebp], eax
$LN30@Dec:
	mov	ecx, DWORD PTR $T276453[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+21]
	test	eax, eax
	jne	SHORT $LN26@Dec
	mov	ecx, DWORD PTR $T276453[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T276453[ebp], edx
	jmp	SHORT $LN30@Dec
$LN26@Dec:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T276453[ebp]
	mov	DWORD PTR [eax], ecx

; 352  : 			else

	jmp	SHORT $LN10@Dec

; 353  : 				{	// climb looking for left subtree
; 354  : 				_Nodeptr _Pnode;
; 355  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 356  : 					&& _Ptr == _Left(_Pnode))

$LN34@Dec:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$236301[ebp], ecx
	mov	edx, DWORD PTR __Pnode$236301[ebp]
	movsx	eax, BYTE PTR [edx+21]
	test	eax, eax
	jne	SHORT $LN40@Dec
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$236301[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN40@Dec

; 357  : 					_Ptr = _Pnode;	// ==> parent while left subtree

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$236301[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN34@Dec

; 358  : 				if (_Isnil(_Ptr))

$LN40@Dec:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+21]
	test	edx, edx
	je	SHORT $LN2@Dec

; 359  :  #if _HAS_ITERATOR_DEBUGGING
; 360  :  					{
; 361  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 362  : 					_SCL_SECURE_OUT_OF_RANGE;
; 363  : 					}
; 364  :  #elif _SECURE_SCL
; 365  : 					{
; 366  : 					_SCL_SECURE_OUT_OF_RANGE;
; 367  : 					}
; 368  :  #else
; 369  : 					return;	// begin() shouldn't be incremented, don't move

	jmp	SHORT $LN10@Dec

; 370  :  #endif
; 371  : 				else

	jmp	SHORT $LN10@Dec
$LN2@Dec:

; 372  : 					_Ptr = _Pnode;	// ==> parent if not head

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$236301[ebp]
	mov	DWORD PTR [eax], ecx
$LN10@Dec:

; 373  : 				}
; 374  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::const_iterator::_Dec
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T276502 = -16						; size = 4
$T276481 = -12						; size = 4
$T276474 = -8						; size = 4
__Pnode$236313 = -4					; size = 4
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::const_iterator::_Inc, COMDAT
; _this$ = ecx

; 377  : 			{	// move to node with next larger value

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 378  : 
; 379  :  #if _HAS_ITERATOR_DEBUGGING
; 380  : 			if (this->_Mycont == 0
; 381  : 				|| _Ptr == 0
; 382  : 				|| _Isnil(_Ptr))
; 383  : 				{
; 384  : 				_DEBUG_ERROR("map/set iterator not incrementable");
; 385  : 				_SCL_SECURE_OUT_OF_RANGE;
; 386  : 				}
; 387  :  #else
; 388  : 			_SCL_SECURE_VALIDATE(this->_Has_container());
; 389  : 			if (_Isnil(_Ptr))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+21]
	test	edx, edx
	je	SHORT $LN6@Inc
	jmp	$LN7@Inc
$LN6@Inc:

; 390  : 				{
; 391  : 				_SCL_SECURE_OUT_OF_RANGE;
; 392  : 				// end() shouldn't be incremented, don't move if _SCL_SECURE is not turned on
; 393  : 				}
; 394  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 395  : 
; 396  : 			else if (!_Isnil(_Right(_Ptr)))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	DWORD PTR $T276474[ebp], ecx
	mov	edx, DWORD PTR $T276474[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+21]
	test	ecx, ecx
	jne	SHORT $LN27@Inc

; 397  : 				_Ptr = _Min(_Right(_Ptr));	// ==> smallest of right subtree

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 8
	mov	DWORD PTR $T276481[ebp], eax
	mov	ecx, DWORD PTR $T276481[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T276502[ebp], edx
$LN23@Inc:
	mov	eax, DWORD PTR $T276502[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+21]
	test	edx, edx
	jne	SHORT $LN19@Inc
	mov	eax, DWORD PTR $T276502[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T276502[ebp], ecx
	jmp	SHORT $LN23@Inc
$LN19@Inc:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T276502[ebp]
	mov	DWORD PTR [edx], eax

; 398  : 			else

	jmp	SHORT $LN7@Inc

; 399  : 				{	// climb looking for right subtree
; 400  : 				_Nodeptr _Pnode;
; 401  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 402  : 					&& _Ptr == _Right(_Pnode))

$LN27@Inc:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$236313[ebp], eax
	mov	ecx, DWORD PTR __Pnode$236313[ebp]
	movsx	edx, BYTE PTR [ecx+21]
	test	edx, edx
	jne	SHORT $LN1@Inc
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$236313[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN1@Inc

; 403  : 					_Ptr = _Pnode;	// ==> parent while right subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$236313[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN27@Inc
$LN1@Inc:

; 404  : 				_Ptr = _Pnode;	// ==> parent (head if end())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$236313[ebp]
	mov	DWORD PTR [edx], eax
$LN7@Inc:

; 405  : 				}
; 406  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::const_iterator::_Inc
_TEXT	ENDS
PUBLIC	?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Incsize
PUBLIC	?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Buynode
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Insert@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z
_TEXT	SEGMENT
_this$ = -88						; size = 4
$T276553 = -84						; size = 4
__Pnode$ = -8						; size = 4
__Newnode$ = -4						; size = 4
__Where$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Insert@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z PROC ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Insert, COMDAT
; _this$ = ecx

; 710  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 711  : 
; 712  :  #if _HAS_ITERATOR_DEBUGGING
; 713  : 		if (_Where._Mycont != this)
; 714  : 			_DEBUG_ERROR("list insert iterator outside range");
; 715  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 716  : 
; 717  : 		_Nodeptr _Pnode = _Where._Mynode();

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Pnode$[ebp], eax

; 718  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Buynode
	mov	DWORD PTR __Newnode$[ebp], eax

; 719  : 		_Incsize(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Incsize

; 720  : 		_Prevnode(_Pnode) = _Newnode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 721  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T276553[ebp], edx
	mov	eax, DWORD PTR $T276553[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Insert@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z ENDP ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Insert
_TEXT	ENDS
PUBLIC	?erase@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@0@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::erase
PUBLIC	??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Insert<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Const_iterator<0> >
; Function compile flags: /Odtp
;	COMDAT ?_Splice@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@AAV12@00I_N@Z
_TEXT	SEGMENT
_this$ = -228						; size = 4
$T276683 = -156						; size = 4
$T276682 = -152						; size = 4
$T276681 = -148						; size = 4
$T276676 = -142						; size = 1
$T276663 = -140						; size = 4
$T276656 = -136						; size = 4
$T276649 = -132						; size = 4
$T276642 = -128						; size = 4
$T276635 = -124						; size = 4
$T276628 = -120						; size = 4
$T276624 = -116						; size = 4
$T276617 = -112						; size = 4
$T276613 = -108						; size = 4
$T276609 = -104						; size = 4
$T276602 = -100						; size = 4
$T276598 = -96						; size = 4
$T276594 = -92						; size = 4
$T276587 = -88						; size = 4
$T276583 = -84						; size = 4
$T276556 = -8						; size = 4
__Pnode$236353 = -4					; size = 4
__Where$ = 8						; size = 4
__Right$ = 12						; size = 4
__First$ = 16						; size = 4
__Last$ = 20						; size = 4
__Count$ = 24						; size = 4
__Keep$ = 28						; size = 1
?_Splice@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@AAV12@00I_N@Z PROC ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Splice, COMDAT
; _this$ = ecx

; 1126 : 		{	// splice _Right [_First, _Last) before _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	mov	DWORD PTR _this$[ebp], ecx

; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 		if (_Where._Mycont != this)
; 1129 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1130 : 		if (this->_Alval == _Right._Alval)
; 1131 : 			{	// same allocator, just relink
; 1132 : 			if (!_Keep && this != &_Right)
; 1133 : 				for (const_iterator _Next = _First; _Next != _Last; )
; 1134 : 					_Orphan_ptr(_Right, (_Next++)._Ptr);
; 1135 : 
; 1136 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1137 :         _Keep;                  // unused in this branch
; 1138 : 		if (this->_Alval == _Right._Alval)

	mov	eax, 1
	test	eax, eax
	je	$LN3@Splice

; 1139 : 			{	// same allocator, just relink
; 1140 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1141 : 
; 1142 : 			if (this != &_Right)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR __Right$[ebp]
	je	SHORT $LN2@Splice

; 1143 : 				{	// splicing from another list, adjust counts
; 1144 : 				_Incsize(_Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Incsize

; 1145 : 				_Right._Mysize -= _Count;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN2@Splice:

; 1146 : 				}
; 1147 : 			_Nextnode(_Prevnode(_First._Mynode())) = _Last._Mynode();

	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T276583[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T276587[ebp], ecx
	mov	edx, DWORD PTR $T276587[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T276594[ebp], eax
	mov	ecx, DWORD PTR $T276594[ebp]
	mov	edx, DWORD PTR $T276583[ebp]
	mov	DWORD PTR [ecx], edx

; 1148 : 			_Nextnode(_Prevnode(_Last._Mynode())) = _Where._Mynode();

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T276598[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T276602[ebp], ecx
	mov	edx, DWORD PTR $T276602[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T276609[ebp], eax
	mov	ecx, DWORD PTR $T276609[ebp]
	mov	edx, DWORD PTR $T276598[ebp]
	mov	DWORD PTR [ecx], edx

; 1149 : 			_Nextnode(_Prevnode(_Where._Mynode())) = _First._Mynode();

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T276613[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T276617[ebp], ecx
	mov	edx, DWORD PTR $T276617[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T276624[ebp], eax
	mov	ecx, DWORD PTR $T276624[ebp]
	mov	edx, DWORD PTR $T276613[ebp]
	mov	DWORD PTR [ecx], edx

; 1150 : 			_Nodeptr _Pnode = _Prevnode(_Where._Mynode());

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T276628[ebp], eax
	mov	ecx, DWORD PTR $T276628[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$236353[ebp], edx

; 1151 : 			_Prevnode(_Where._Mynode()) = _Prevnode(_Last._Mynode());

	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T276635[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T276642[ebp], ecx
	mov	edx, DWORD PTR $T276642[ebp]
	mov	eax, DWORD PTR $T276635[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 1152 : 			_Prevnode(_Last._Mynode()) = _Prevnode(_First._Mynode());

	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T276649[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T276656[ebp], eax
	mov	ecx, DWORD PTR $T276656[ebp]
	mov	edx, DWORD PTR $T276649[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 1153 : 			_Prevnode(_First._Mynode()) = _Pnode;

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T276663[ebp], ecx
	mov	edx, DWORD PTR $T276663[ebp]
	mov	eax, DWORD PTR __Pnode$236353[ebp]
	mov	DWORD PTR [edx+4], eax

; 1154 : 			}
; 1155 : 		else

	jmp	SHORT $LN4@Splice
$LN3@Splice:

; 1156 : 			{	// different allocator, copy nodes then erase source
; 1157 : 			insert(_Where, _First, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T276683[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T276682[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T276681[ebp], eax
	movzx	ecx, BYTE PTR $T276676[ebp]
	push	ecx
	mov	edx, DWORD PTR $T276683[ebp]
	push	edx
	mov	eax, DWORD PTR $T276682[ebp]
	push	eax
	mov	ecx, DWORD PTR $T276681[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Insert<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Const_iterator<0> >

; 1158 : 			_Right.erase(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T276556[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?erase@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@0@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::erase
$LN4@Splice:

; 1159 : 			}
; 1160 :         }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?_Splice@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@AAV12@00I_N@Z ENDP ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Splice
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@YAPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Node>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@QAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@I@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@QAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@I@Z PROC ; std::allocator<std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Node>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@YAPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Node>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@QAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@I@Z ENDP ; std::allocator<std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Node>::allocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?erase@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@V?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@0@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T277078 = -64						; size = 4
$T277060 = -60						; size = 4
$T277059 = -56						; size = 4
$T277043 = -52						; size = 4
__Cat$277067 = -46					; size = 1
$T277065 = -45						; size = 1
$T277017 = -44						; size = 4
$T277016 = -40						; size = 4
$T277015 = -36						; size = 4
$T276998 = -30						; size = 1
$T276997 = -29						; size = 1
$T276996 = -28						; size = 4
$T276995 = -24						; size = 4
__Cat$277004 = -16					; size = 1
$T277002 = -15						; size = 1
$T277001 = -14						; size = 1
$T277000 = -13						; size = 1
__Ptr$236405 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@V?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@0@Z PROC ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN1@erase@4

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T277017[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T277016[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T277015[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T277000[ebp], cl
	mov	dl, BYTE PTR __Cat$277004[ebp]
	mov	BYTE PTR $T277001[ebp], dl
	mov	al, BYTE PTR $T277000[ebp]
	mov	BYTE PTR $T276998[ebp], al
	mov	cl, BYTE PTR $T277002[ebp]
	mov	BYTE PTR $T276997[ebp], cl
	mov	edx, DWORD PTR $T277017[ebp]
	mov	DWORD PTR $T276996[ebp], edx
	mov	eax, DWORD PTR $T277015[ebp]
	mov	DWORD PTR $T276995[ebp], eax
	jmp	SHORT $LN28@erase@4
$LN27@erase@4:
	mov	ecx, DWORD PTR $T276996[ebp]
	add	ecx, 4
	mov	DWORD PTR $T276996[ebp], ecx
	mov	edx, DWORD PTR $T276995[ebp]
	add	edx, 4
	mov	DWORD PTR $T276995[ebp], edx
$LN28@erase@4:
	mov	eax, DWORD PTR $T276995[ebp]
	cmp	eax, DWORD PTR $T277016[ebp]
	je	SHORT $LN20@erase@4
	mov	ecx, DWORD PTR $T276995[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR $T276996[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN27@erase@4
$LN20@erase@4:
	mov	ecx, DWORD PTR $T276996[ebp]
	mov	DWORD PTR __Ptr$236405[ebp], ecx

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T277078[ebp], eax
	mov	ecx, DWORD PTR $T277078[ebp]
	mov	DWORD PTR $T277060[ebp], ecx
	mov	edx, DWORD PTR __Ptr$236405[ebp]
	mov	DWORD PTR $T277059[ebp], edx
	mov	al, BYTE PTR __Cat$277067[ebp]
	mov	BYTE PTR $T277065[ebp], al
	mov	ecx, DWORD PTR $T277059[ebp]
	mov	DWORD PTR $T277043[ebp], ecx
	jmp	SHORT $LN39@erase@4
$LN38@erase@4:
	mov	edx, DWORD PTR $T277043[ebp]
	add	edx, 4
	mov	DWORD PTR $T277043[ebp], edx
$LN39@erase@4:
	mov	eax, DWORD PTR $T277043[ebp]
	cmp	eax, DWORD PTR $T277060[ebp]
	je	SHORT $LN31@erase@4
	jmp	SHORT $LN38@erase@4
$LN31@erase@4:

; 1049 : 			_Mylast = _Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Ptr$236405[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN1@erase@4:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@V?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@0@Z ENDP ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::erase
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ
_TEXT	SEGMENT
$T277082 = -80						; size = 28
$T277081 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ PROC ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T277082[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T277081[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T277081[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T277082[ebp]
	push	eax
	lea	ecx, DWORD PTR $T277081[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T277081[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T277081[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T277082[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@39:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T277082[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T277081[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ ENDP ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>::allocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
_TEXT	ENDS
;	COMDAT ?erase@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@0@Z
_TEXT	SEGMENT
_this$ = -76						; size = 4
$T277355 = -72						; size = 4
$T277226 = -48						; size = 4
$T277148 = -24						; size = 4
$T277127 = -20						; size = 4
$T277118 = -16						; size = 4
$T277113 = -12						; size = 4
$T277112 = -8						; size = 4
$T277111 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@0@Z PROC ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::erase, COMDAT
; _this$ = ecx

; 810  : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 811  : 		if (_First == begin() && _Last == end())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T277118[ebp], ecx
	mov	edx, DWORD PTR $T277118[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T277127[ebp], eax
	mov	ecx, DWORD PTR $T277127[ebp]
	mov	DWORD PTR $T277111[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T277111[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN59@erase@5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T277148[ebp], eax
	mov	ecx, DWORD PTR $T277148[ebp]
	mov	DWORD PTR $T277112[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T277112[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN59@erase@5

; 812  : 			{	// erase all and return fresh iterator
; 813  : 			clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXXZ ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::clear

; 814  : 			return (end());

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T277226[ebp], eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR $T277226[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN5@erase@5

; 815  : 			}
; 816  : 		else

	jmp	SHORT $LN5@erase@5

; 817  : 			{	// erase subrange
; 818  : 			while (_First != _Last)

$LN59@erase@5:
	mov	eax, DWORD PTR __First$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@erase@5

; 819  : 				_First = erase(_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T277113[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::erase
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __First$[ebp], eax
	jmp	SHORT $LN59@erase@5
$LN1@erase@5:

; 820  : 			return (_Make_iter(_Last));

	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T277355[ebp], ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR $T277355[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@erase@5:

; 821  : 			}
; 822  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@0@Z ENDP ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::erase
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z$0
__tryblocktable$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z$4
__unwindtable$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z
_TEXT	SEGMENT
tv170 = -88						; size = 4
tv178 = -84						; size = 4
tv173 = -80						; size = 4
_this$ = -76						; size = 4
$T277465 = -72						; size = 4
$T277464 = -68						; size = 4
__Vptr$277462 = -64					; size = 4
$T277426 = -60						; size = 4
__Vptr$277424 = -56					; size = 4
$T277397 = -52						; size = 4
__Vptr$277395 = -48					; size = 4
__Pnode$ = -24						; size = 4
__Linkcnt$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z PROC ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Buynode, COMDAT
; _this$ = ecx

; 1190 : 		{	// allocate a node and set links and value

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1191 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@QAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@I@Z ; std::allocator<std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Node>::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 1192 : 		int _Linkcnt = 0;

	mov	DWORD PTR __Linkcnt$[ebp], 0

; 1193 : 
; 1194 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1195 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Next);

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Vptr$277395[ebp], eax
	mov	ecx, DWORD PTR __Vptr$277395[ebp]
	mov	DWORD PTR $T277397[ebp], ecx
	cmp	DWORD PTR $T277397[ebp], 0
	je	SHORT $LN23@Buynode@4
	mov	edx, DWORD PTR $T277397[ebp]
	mov	eax, DWORD PTR __Next$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T277397[ebp]
	mov	DWORD PTR tv173[ebp], ecx
	jmp	SHORT $LN19@Buynode@4
$LN23@Buynode@4:
	mov	DWORD PTR tv173[ebp], 0
$LN19@Buynode@4:

; 1196 : 		++_Linkcnt;

	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx

; 1197 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Prev);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4
	mov	DWORD PTR __Vptr$277424[ebp], eax
	mov	ecx, DWORD PTR __Vptr$277424[ebp]
	mov	DWORD PTR $T277426[ebp], ecx
	cmp	DWORD PTR $T277426[ebp], 0
	je	SHORT $LN33@Buynode@4
	mov	edx, DWORD PTR $T277426[ebp]
	mov	eax, DWORD PTR __Prev$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T277426[ebp]
	mov	DWORD PTR tv178[ebp], ecx
	jmp	SHORT $LN29@Buynode@4
$LN33@Buynode@4:
	mov	DWORD PTR tv178[ebp], 0
$LN29@Buynode@4:

; 1198 : 		++_Linkcnt;

	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx

; 1199 : 		this->_Alval.construct(&_Myval(_Pnode), _Val);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8
	mov	DWORD PTR __Vptr$277462[ebp], eax
	mov	ecx, DWORD PTR __Vptr$277462[ebp]
	mov	DWORD PTR $T277465[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T277465[ebp], 0
	je	SHORT $LN43@Buynode@4
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T277465[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T277465[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR $T277465[ebp]
	mov	DWORD PTR tv170[ebp], eax
	jmp	SHORT $LN44@Buynode@4
$LN43@Buynode@4:
	mov	DWORD PTR tv170[ebp], 0
$LN44@Buynode@4:
	mov	ecx, DWORD PTR tv170[ebp]
	mov	DWORD PTR $T277464[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN6@Buynode@4
__catch$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z$0:

; 1200 : 		_CATCH_ALL
; 1201 : 		if (1 < _Linkcnt)
; 1202 : 			this->_Alptr.destroy(&_Prevnode(_Pnode));
; 1203 : 		if (0 < _Linkcnt)
; 1204 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1205 : 		this->_Alnod.deallocate(_Pnode, 1);

	mov	edx, DWORD PTR __Pnode$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1206 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1207 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z$1
	ret	0
$LN6@Buynode@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z$1:

; 1208 : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN5@Buynode@4:

; 1209 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z$2:
	mov	eax, DWORD PTR __Vptr$277462[ebp]
	push	eax
	mov	ecx, DWORD PTR $T277465[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@PAU342@0ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z ENDP ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Buynode
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 63   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 64   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z$2
__ehfuncinfo$?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z
_TEXT	SEGMENT
tv89 = -92						; size = 4
_this$ = -88						; size = 4
__Count$277527 = -84					; size = 4
$T277511 = -80						; size = 28
$T277510 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z PROC ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Incsize, COMDAT
; _this$ = ecx

; 1239 : 		{	// alter element count, with checking

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1240 : 		if (max_size() - _Mysize < _Count)

	mov	DWORD PTR __Count$277527[ebp], 134217727 ; 07ffffffH
	cmp	DWORD PTR __Count$277527[ebp], 0
	jbe	SHORT $LN9@Incsize
	mov	eax, DWORD PTR __Count$277527[ebp]
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN5@Incsize
$LN9@Incsize:
	mov	DWORD PTR tv89[ebp], 1
$LN5@Incsize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	sub	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Incsize

; 1241 : 			_THROW(length_error, "list<T> too long");

	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T277511[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T277510[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T277510[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T277511[ebp]
	push	eax
	lea	ecx, DWORD PTR $T277510[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T277510[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T277510[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T277511[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@Incsize:

; 1242 : 		_Mysize += _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN3@Incsize:

; 1243 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z$0:
	lea	ecx, DWORD PTR $T277511[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z$2:
	lea	ecx, DWORD PTR $T277510[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Incsize@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IAEXI@Z ENDP ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Incsize
PUBLIC	??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
PUBLIC	??$unchecked_uninitialized_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@stdext@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@Z ; stdext::unchecked_uninitialized_copy<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
PUBLIC	??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,unsigned int,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z$2
__catchsym$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z$0
__unwindtable$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z
_TEXT	SEGMENT
tv84 = -424						; size = 4
tv304 = -420						; size = 4
tv290 = -416						; size = 4
tv282 = -412						; size = 4
_this$ = -408						; size = 4
$T278229 = -404						; size = 4
$T278221 = -400						; size = 4
$T278220 = -396						; size = 4
$T278197 = -390						; size = 1
$T278196 = -389						; size = 1
$T278195 = -388						; size = 4
$T278194 = -384						; size = 4
$T278182 = -377						; size = 1
$T278181 = -376						; size = 4
$T278180 = -372						; size = 4
$T278179 = -368						; size = 4
__Cat$278213 = -364					; size = 1
$T278211 = -363						; size = 1
$T278210 = -362						; size = 1
__Cat$278203 = -360					; size = 1
$T278201 = -359						; size = 1
$T278200 = -358						; size = 1
$T278199 = -357						; size = 1
$T278154 = -356						; size = 4
$T278135 = -352						; size = 4
$T278118 = -345						; size = 1
$T278117 = -344						; size = 4
$T278107 = -340						; size = 4
$T278106 = -336						; size = 4
__Cat$278150 = -330					; size = 1
$T278148 = -329						; size = 1
$T278147 = -328						; size = 1
__Cat$278142 = -327					; size = 1
$T278140 = -326						; size = 1
$T278139 = -325						; size = 1
$T278082 = -324						; size = 4
$T278074 = -320						; size = 4
$T278066 = -316						; size = 4
$T278048 = -312						; size = 4
$T278047 = -308						; size = 4
$T278031 = -304						; size = 4
__Cat$278054 = -298					; size = 1
$T278052 = -297						; size = 1
$T278005 = -296						; size = 4
$T278004 = -292						; size = 4
$T277994 = -288						; size = 4
__Cat$278001 = -283					; size = 1
$T277999 = -282						; size = 1
$T277998 = -281						; size = 1
$T277978 = -280						; size = 4
$T277959 = -276						; size = 4
$T277942 = -269						; size = 1
$T277941 = -268						; size = 4
$T277931 = -264						; size = 4
$T277930 = -260						; size = 4
__Cat$277974 = -254					; size = 1
$T277972 = -253						; size = 1
$T277971 = -252						; size = 1
__Cat$277966 = -251					; size = 1
$T277964 = -250						; size = 1
$T277963 = -249						; size = 1
$T277906 = -248						; size = 4
$T277905 = -244						; size = 4
$T277901 = -240						; size = 4
$T277900 = -236						; size = 4
$T277882 = -232						; size = 4
$T277881 = -228						; size = 4
$T277865 = -224						; size = 4
__Cat$277887 = -218					; size = 1
$T277885 = -217						; size = 1
$T277816 = -216						; size = 4
$T277815 = -212						; size = 4
$T277799 = -208						; size = 4
__Cat$277821 = -202					; size = 1
$T277819 = -201						; size = 1
$T277756 = -200						; size = 4
$T277755 = -196						; size = 4
$T277739 = -192						; size = 4
__Cat$277761 = -186					; size = 1
$T277759 = -185						; size = 1
$T277713 = -184						; size = 4
$T277701 = -180						; size = 4
$T277691 = -173						; size = 1
$T277690 = -172						; size = 4
__Cat$277708 = -167					; size = 1
$T277705 = -166						; size = 1
$T277704 = -165						; size = 1
$T277678 = -164						; size = 4
$T277666 = -160						; size = 4
$T277656 = -153						; size = 1
$T277655 = -152						; size = 4
__Cat$277673 = -147					; size = 1
$T277670 = -146						; size = 1
$T277669 = -145						; size = 1
$T277643 = -144						; size = 4
$T277633 = -140						; size = 4
__Cat$277641 = -135					; size = 1
$T277638 = -134						; size = 1
$T277637 = -133						; size = 1
__Count$277605 = -120					; size = 4
__Count$277579 = -48					; size = 4
__Tmp$236565 = -44					; size = 4
__Oldend$236566 = -40					; size = 4
__Tmp$236555 = -36					; size = 4
__Ncopied$236542 = -32					; size = 4
__Newvec$236540 = -28					; size = 4
__Whereoff$236541 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z PROC ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 408				; 00000198H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n
	mov	DWORD PTR tv282[ebp], 0
	jmp	SHORT $LN27@Insert_n
$LN29@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv282[ebp], eax
$LN27@Insert_n:
	mov	ecx, DWORD PTR tv282[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n
	jmp	$LN16@Insert_n
$LN14@Insert_n:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$277579[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$277579[ebp], 0
	jbe	SHORT $LN35@Insert_n
	mov	edx, DWORD PTR __Count$277579[ebp]
	mov	DWORD PTR tv290[ebp], edx
	jmp	SHORT $LN37@Insert_n
$LN35@Insert_n:
	mov	DWORD PTR tv290[ebp], 1
$LN37@Insert_n:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR tv290[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@KAXXZ ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Xlen
	jmp	$LN16@Insert_n

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$277605[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$277605[ebp], 0
	jbe	SHORT $LN48@Insert_n
	mov	ecx, DWORD PTR __Count$277605[ebp]
	mov	DWORD PTR tv304[ebp], ecx
	jmp	SHORT $LN44@Insert_n
$LN48@Insert_n:
	mov	DWORD PTR tv304[ebp], 1
$LN44@Insert_n:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv304[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IPAV120@@Z ; std::_Allocate<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> >
	add	esp, 8
	mov	DWORD PTR __Newvec$236540[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR __Whereoff$236541[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$236542[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$236541[ebp]
	mov	ecx, DWORD PTR __Newvec$236540[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T277643[ebp], edx
	mov	eax, DWORD PTR $T277643[ebp]
	mov	DWORD PTR $T277633[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T277637[ebp], cl
	mov	dl, BYTE PTR __Cat$277641[ebp]
	mov	BYTE PTR $T277638[ebp], dl
	movzx	eax, BYTE PTR $T277637[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T277638[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T277633[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,unsigned int,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$236542[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$236542[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T277678[ebp], edx
	mov	eax, DWORD PTR __Newvec$236540[ebp]
	mov	DWORD PTR $T277666[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T277669[ebp], cl
	mov	dl, BYTE PTR __Cat$277673[ebp]
	mov	BYTE PTR $T277670[ebp], dl
	mov	al, BYTE PTR $T277669[ebp]
	mov	BYTE PTR $T277656[ebp], al
	mov	ecx, DWORD PTR $T277666[ebp]
	mov	DWORD PTR $T277655[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T277655[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T277678[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@stdext@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@Z ; stdext::unchecked_uninitialized_copy<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$236542[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$236542[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T277713[ebp], edx
	mov	eax, DWORD PTR __Whereoff$236541[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$236540[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T277701[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T277704[ebp], al
	mov	cl, BYTE PTR __Cat$277708[ebp]
	mov	BYTE PTR $T277705[ebp], cl
	mov	dl, BYTE PTR $T277704[ebp]
	mov	BYTE PTR $T277691[ebp], dl
	mov	eax, DWORD PTR $T277701[ebp]
	mov	DWORD PTR $T277690[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T277690[ebp]
	push	edx
	mov	eax, DWORD PTR $T277713[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@stdext@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@Z ; stdext::unchecked_uninitialized_copy<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n
__catch$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$236542[ebp], 1
	jle	SHORT $LN7@Insert_n

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	edx, DWORD PTR __Whereoff$236541[ebp]
	mov	eax, DWORD PTR __Newvec$236540[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T277756[ebp], ecx
	mov	edx, DWORD PTR __Newvec$236540[ebp]
	mov	DWORD PTR $T277755[ebp], edx
	mov	al, BYTE PTR __Cat$277761[ebp]
	mov	BYTE PTR $T277759[ebp], al
	mov	ecx, DWORD PTR $T277755[ebp]
	mov	DWORD PTR $T277739[ebp], ecx
	jmp	SHORT $LN91@Insert_n
$LN90@Insert_n:
	mov	edx, DWORD PTR $T277739[ebp]
	add	edx, 4
	mov	DWORD PTR $T277739[ebp], edx
$LN91@Insert_n:
	mov	eax, DWORD PTR $T277739[ebp]
	cmp	eax, DWORD PTR $T277756[ebp]
	je	SHORT $LN7@Insert_n
	jmp	SHORT $LN90@Insert_n
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$236542[ebp], 0
	jle	SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$236541[ebp]
	mov	edx, DWORD PTR __Newvec$236540[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T277816[ebp], edx
	mov	eax, DWORD PTR __Whereoff$236541[ebp]
	mov	ecx, DWORD PTR __Newvec$236540[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T277815[ebp], edx
	mov	al, BYTE PTR __Cat$277821[ebp]
	mov	BYTE PTR $T277819[ebp], al
	mov	ecx, DWORD PTR $T277815[ebp]
	mov	DWORD PTR $T277799[ebp], ecx
	jmp	SHORT $LN106@Insert_n
$LN105@Insert_n:
	mov	edx, DWORD PTR $T277799[ebp]
	add	edx, 4
	mov	DWORD PTR $T277799[ebp], edx
$LN106@Insert_n:
	mov	eax, DWORD PTR $T277799[ebp]
	cmp	eax, DWORD PTR $T277816[ebp]
	je	SHORT $LN6@Insert_n
	jmp	SHORT $LN105@Insert_n
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$236540[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN115@Insert_n
	ret	0
$LN19@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN115@Insert_n:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T277901[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T277900[ebp], eax
	mov	ecx, DWORD PTR $T277901[ebp]
	mov	DWORD PTR $T277882[ebp], ecx
	mov	edx, DWORD PTR $T277900[ebp]
	mov	DWORD PTR $T277881[ebp], edx
	mov	al, BYTE PTR __Cat$277887[ebp]
	mov	BYTE PTR $T277885[ebp], al
	mov	ecx, DWORD PTR $T277881[ebp]
	mov	DWORD PTR $T277865[ebp], ecx
	jmp	SHORT $LN125@Insert_n
$LN124@Insert_n:
	mov	edx, DWORD PTR $T277865[ebp]
	add	edx, 4
	mov	DWORD PTR $T277865[ebp], edx
$LN125@Insert_n:
	mov	eax, DWORD PTR $T277865[ebp]
	cmp	eax, DWORD PTR $T277882[ebp]
	je	SHORT $LN117@Insert_n
	jmp	SHORT $LN124@Insert_n
$LN117@Insert_n:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR $T277906[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T277905[ebp], edx
	mov	eax, DWORD PTR $T277905[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	ecx, DWORD PTR __Capacity$[ebp]
	mov	edx, DWORD PTR __Newvec$236540[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$236540[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$236540[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	sar	eax, 2
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$236555[ebp], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T277978[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T277959[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T277963[ebp], dl
	mov	al, BYTE PTR __Cat$277966[ebp]
	mov	BYTE PTR $T277964[ebp], al
	mov	cl, BYTE PTR $T277963[ebp]
	mov	BYTE PTR $T277942[ebp], cl
	mov	edx, DWORD PTR $T277959[ebp]
	mov	DWORD PTR $T277941[ebp], edx
	mov	eax, DWORD PTR $T277941[ebp]
	mov	DWORD PTR $T277931[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T277930[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T277971[ebp], dl
	mov	al, BYTE PTR __Cat$277974[ebp]
	mov	BYTE PTR $T277972[ebp], al
	movzx	ecx, BYTE PTR $T277971[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T277972[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T277931[ebp]
	push	ecx
	mov	edx, DWORD PTR $T277978[ebp]
	push	edx
	mov	eax, DWORD PTR $T277930[ebp]
	push	eax
	call	??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	mov	DWORD PTR $T278005[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T278004[ebp], edx
	mov	eax, DWORD PTR $T278004[ebp]
	mov	DWORD PTR $T277994[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T277998[ebp], cl
	mov	dl, BYTE PTR __Cat$278001[ebp]
	mov	BYTE PTR $T277999[ebp], dl
	movzx	eax, BYTE PTR $T277998[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T277999[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	eax, DWORD PTR __Tmp$236555[ebp]
	push	eax
	mov	ecx, DWORD PTR $T278005[ebp]
	push	ecx
	mov	edx, DWORD PTR $T277994[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,unsigned int,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN21@Insert_n
__catch$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T278066[ebp], eax
	mov	ecx, DWORD PTR $T278066[ebp]
	mov	DWORD PTR $T278048[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T278047[ebp], ecx
	mov	dl, BYTE PTR __Cat$278054[ebp]
	mov	BYTE PTR $T278052[ebp], dl
	mov	eax, DWORD PTR $T278047[ebp]
	mov	DWORD PTR $T278031[ebp], eax
	jmp	SHORT $LN160@Insert_n
$LN159@Insert_n:
	mov	ecx, DWORD PTR $T278031[ebp]
	add	ecx, 4
	mov	DWORD PTR $T278031[ebp], ecx
$LN160@Insert_n:
	mov	edx, DWORD PTR $T278031[ebp]
	cmp	edx, DWORD PTR $T278048[ebp]
	je	SHORT $LN152@Insert_n
	jmp	SHORT $LN159@Insert_n
$LN152@Insert_n:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z$3
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	mov	DWORD PTR $T278082[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T278074[ebp], edx
	jmp	SHORT $LN171@Insert_n
$LN170@Insert_n:
	mov	eax, DWORD PTR $T278074[ebp]
	add	eax, 4
	mov	DWORD PTR $T278074[ebp], eax
$LN171@Insert_n:
	mov	ecx, DWORD PTR $T278074[ebp]
	cmp	ecx, DWORD PTR $T278082[ebp]
	je	SHORT $LN167@Insert_n
	mov	edx, DWORD PTR __Tmp$236555[ebp]
	mov	eax, DWORD PTR $T278074[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN170@Insert_n
$LN167@Insert_n:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$236565[ebp], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$236566[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T278154[ebp], eax
	mov	ecx, DWORD PTR $T278154[ebp]
	mov	DWORD PTR $T278135[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T278139[ebp], dl
	mov	al, BYTE PTR __Cat$278142[ebp]
	mov	BYTE PTR $T278140[ebp], al
	mov	cl, BYTE PTR $T278139[ebp]
	mov	BYTE PTR $T278118[ebp], cl
	mov	edx, DWORD PTR $T278135[ebp]
	mov	DWORD PTR $T278117[ebp], edx
	mov	eax, DWORD PTR $T278117[ebp]
	mov	DWORD PTR $T278107[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Oldend$236566[ebp]
	sub	edx, ecx
	mov	DWORD PTR $T278106[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T278147[ebp], al
	mov	cl, BYTE PTR __Cat$278150[ebp]
	mov	BYTE PTR $T278148[ebp], cl
	movzx	edx, BYTE PTR $T278147[ebp]
	push	edx
	movzx	eax, BYTE PTR $T278148[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T278107[ebp]
	push	edx
	mov	eax, DWORD PTR __Oldend$236566[ebp]
	push	eax
	mov	ecx, DWORD PTR $T278106[ebp]
	push	ecx
	call	??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$236566[ebp]
	mov	DWORD PTR $T278221[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T278220[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T278199[ebp], dl
	mov	al, BYTE PTR __Cat$278203[ebp]
	mov	BYTE PTR $T278200[ebp], al
	mov	cl, BYTE PTR $T278199[ebp]
	mov	BYTE PTR $T278197[ebp], cl
	mov	dl, BYTE PTR $T278201[ebp]
	mov	BYTE PTR $T278196[ebp], dl
	mov	eax, DWORD PTR $T278221[ebp]
	mov	DWORD PTR $T278195[ebp], eax
	mov	ecx, DWORD PTR $T278220[ebp]
	mov	DWORD PTR $T278194[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T278210[ebp], dl
	mov	al, BYTE PTR __Cat$278213[ebp]
	mov	BYTE PTR $T278211[ebp], al
	mov	cl, BYTE PTR $T278210[ebp]
	mov	BYTE PTR $T278182[ebp], cl
	mov	edx, DWORD PTR $T278195[ebp]
	mov	DWORD PTR $T278181[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$236566[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T278180[ebp], ecx
	mov	edx, DWORD PTR $T278194[ebp]
	mov	DWORD PTR $T278179[ebp], edx
$LN197@Insert_n:
	mov	eax, DWORD PTR $T278179[ebp]
	cmp	eax, DWORD PTR $T278180[ebp]
	je	SHORT $LN186@Insert_n
	mov	ecx, DWORD PTR $T278180[ebp]
	sub	ecx, 4
	mov	DWORD PTR $T278180[ebp], ecx
	mov	edx, DWORD PTR $T278181[ebp]
	sub	edx, 4
	mov	DWORD PTR $T278181[ebp], edx
	mov	eax, DWORD PTR $T278180[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR $T278181[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN197@Insert_n
$LN186@Insert_n:

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T278229[ebp], eax
	jmp	SHORT $LN204@Insert_n
$LN203@Insert_n:
	mov	ecx, DWORD PTR $T278229[ebp]
	add	ecx, 4
	mov	DWORD PTR $T278229[ebp], ecx
$LN204@Insert_n:
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	cmp	DWORD PTR $T278229[ebp], ecx
	je	SHORT $LN16@Insert_n
	mov	edx, DWORD PTR __Tmp$236565[ebp]
	mov	eax, DWORD PTR $T278229[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN203@Insert_n
$LN16@Insert_n:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-428]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@IAEXV?$_Vector_const_iterator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@2@IABV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@2@@Z ENDP ; std::vector<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >::_Insert_n
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\map
;	COMDAT ??0?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@QAE@U?$less@I@1@V?$allocator@U?$pair@$$CBIH@std@@@1@@Z
_TEXT	SEGMENT
tv87 = -20						; size = 4
_this$ = -16						; size = 4
$T278259 = -9						; size = 1
$T278255 = -8						; size = 4
__Parg$ = 8						; size = 1
__Al$ = 12						; size = 1
??0?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@QAE@U?$less@I@1@V?$allocator@U?$pair@$$CBIH@std@@@1@@Z PROC ; std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>, COMDAT
; _this$ = ecx

; 39   : 		{	// construct with specified comparator

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T278259[ebp]
	mov	DWORD PTR $T278255[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv87[ebp], ecx

; 40   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@QAE@U?$less@I@1@V?$allocator@U?$pair@$$CBIH@std@@@1@@Z ENDP ; std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0>
_TEXT	ENDS
EXTRN	__imp__vsprintf_s:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdio.h
;	COMDAT ??$sprintf_s@$0BA@@@YAHAAY0BA@DPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Format$ = 12						; size = 4
??$sprintf_s@$0BA@@@YAHAAY0BA@DPBDZZ PROC		; sprintf_s<16>, COMDAT

; 322  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(int, sprintf_s, vsprintf_s, char, _Dest, _In_z_ _Printf_format_string_ const char *, _Format)

	push	ebp
	mov	ebp, esp
	push	ecx
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	DWORD PTR __imp__vsprintf_s
	add	esp, 16					; 00000010H
	mov	esp, ebp
	pop	ebp
	ret	0
??$sprintf_s@$0BA@@@YAHAAY0BA@DPBDZZ ENDP		; sprintf_s<16>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@2@0@Z ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::erase
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
;	COMDAT ??$deleteInfoArray@VCvBuildingClassInfo@@@@YAXAAV?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T278364 = -56						; size = 4
$T278348 = -52						; size = 4
$T278469 = -48						; size = 4
$T278468 = -44						; size = 4
$T278467 = -40						; size = 4
$T278466 = -36						; size = 4
$T278465 = -32						; size = 4
$T278332 = -28						; size = 4
$T278328 = -24						; size = 4
$T278327 = -20						; size = 4
$T278298 = -16						; size = 4
$T278274 = -12						; size = 4
$T278264 = -8						; size = 4
_it$236900 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvBuildingClassInfo@@@@YAXAAV?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvBuildingClassInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T278274[ebp], ecx
	mov	edx, DWORD PTR $T278274[ebp]
	mov	DWORD PTR _it$236900[ebp], edx
	jmp	SHORT $LN3@deleteInfo@2
$LN2@deleteInfo@2:
	mov	eax, DWORD PTR _it$236900[ebp]
	add	eax, 4
	mov	DWORD PTR _it$236900[ebp], eax
$LN3@deleteInfo@2:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T278298[ebp], edx
	mov	eax, DWORD PTR $T278298[ebp]
	mov	DWORD PTR $T278264[ebp], eax
	mov	ecx, DWORD PTR _it$236900[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T278264[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@2

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$236900[ebp]
	mov	DWORD PTR $T278332[ebp], edx
	mov	eax, DWORD PTR $T278332[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T278328[ebp], ecx
	mov	edx, DWORD PTR $T278328[ebp]
	mov	DWORD PTR $T278327[ebp], edx
	cmp	DWORD PTR $T278327[ebp], 0
	je	SHORT $LN32@deleteInfo@2
	push	1
	mov	eax, DWORD PTR $T278327[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T278327[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@2
$LN32@deleteInfo@2:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@2:
	mov	ecx, DWORD PTR $T278332[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@2
$LN1@deleteInfo@2:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T278348[ebp], eax
	mov	ecx, DWORD PTR $T278348[ebp]
	mov	DWORD PTR $T278466[ebp], ecx
	mov	edx, DWORD PTR $T278466[ebp]
	mov	DWORD PTR $T278465[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T278364[ebp], ecx
	mov	edx, DWORD PTR $T278364[ebp]
	mov	DWORD PTR $T278468[ebp], edx
	mov	eax, DWORD PTR $T278468[ebp]
	mov	DWORD PTR $T278467[ebp], eax
	mov	ecx, DWORD PTR $T278465[ebp]
	push	ecx
	mov	edx, DWORD PTR $T278467[ebp]
	push	edx
	lea	eax, DWORD PTR $T278469[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@2@0@Z ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvBuildingClassInfo@@@@YAXAAV?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvBuildingClassInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@2@0@Z ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvLeaderHeadInfo@@@@YAXAAV?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T278584 = -56						; size = 4
$T278568 = -52						; size = 4
$T278688 = -48						; size = 4
$T278687 = -44						; size = 4
$T278686 = -40						; size = 4
$T278685 = -36						; size = 4
$T278684 = -32						; size = 4
$T278552 = -28						; size = 4
$T278548 = -24						; size = 4
$T278547 = -20						; size = 4
$T278518 = -16						; size = 4
$T278494 = -12						; size = 4
$T278484 = -8						; size = 4
_it$237062 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvLeaderHeadInfo@@@@YAXAAV?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvLeaderHeadInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T278494[ebp], ecx
	mov	edx, DWORD PTR $T278494[ebp]
	mov	DWORD PTR _it$237062[ebp], edx
	jmp	SHORT $LN3@deleteInfo@3
$LN2@deleteInfo@3:
	mov	eax, DWORD PTR _it$237062[ebp]
	add	eax, 4
	mov	DWORD PTR _it$237062[ebp], eax
$LN3@deleteInfo@3:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T278518[ebp], edx
	mov	eax, DWORD PTR $T278518[ebp]
	mov	DWORD PTR $T278484[ebp], eax
	mov	ecx, DWORD PTR _it$237062[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T278484[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@3

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$237062[ebp]
	mov	DWORD PTR $T278552[ebp], edx
	mov	eax, DWORD PTR $T278552[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T278548[ebp], ecx
	mov	edx, DWORD PTR $T278548[ebp]
	mov	DWORD PTR $T278547[ebp], edx
	cmp	DWORD PTR $T278547[ebp], 0
	je	SHORT $LN32@deleteInfo@3
	push	1
	mov	eax, DWORD PTR $T278547[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T278547[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@3
$LN32@deleteInfo@3:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@3:
	mov	ecx, DWORD PTR $T278552[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@3
$LN1@deleteInfo@3:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T278568[ebp], eax
	mov	ecx, DWORD PTR $T278568[ebp]
	mov	DWORD PTR $T278685[ebp], ecx
	mov	edx, DWORD PTR $T278685[ebp]
	mov	DWORD PTR $T278684[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T278584[ebp], ecx
	mov	edx, DWORD PTR $T278584[ebp]
	mov	DWORD PTR $T278687[ebp], edx
	mov	eax, DWORD PTR $T278687[ebp]
	mov	DWORD PTR $T278686[ebp], eax
	mov	ecx, DWORD PTR $T278684[ebp]
	push	ecx
	mov	edx, DWORD PTR $T278686[ebp]
	push	edx
	lea	eax, DWORD PTR $T278688[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@2@0@Z ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvLeaderHeadInfo@@@@YAXAAV?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvLeaderHeadInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@2@0@Z ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvCivilizationInfo@@@@YAXAAV?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv149 = -112						; size = 4
$T278804 = -56						; size = 4
$T278788 = -52						; size = 4
$T278909 = -48						; size = 4
$T278908 = -44						; size = 4
$T278907 = -40						; size = 4
$T278906 = -36						; size = 4
$T278905 = -32						; size = 4
$T278772 = -28						; size = 4
$T278768 = -24						; size = 4
$T278767 = -20						; size = 4
$T278738 = -16						; size = 4
$T278714 = -12						; size = 4
$T278704 = -8						; size = 4
_it$237077 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvCivilizationInfo@@@@YAXAAV?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvCivilizationInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T278714[ebp], ecx
	mov	edx, DWORD PTR $T278714[ebp]
	mov	DWORD PTR _it$237077[ebp], edx
	jmp	SHORT $LN3@deleteInfo@4
$LN2@deleteInfo@4:
	mov	eax, DWORD PTR _it$237077[ebp]
	add	eax, 4
	mov	DWORD PTR _it$237077[ebp], eax
$LN3@deleteInfo@4:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T278738[ebp], edx
	mov	eax, DWORD PTR $T278738[ebp]
	mov	DWORD PTR $T278704[ebp], eax
	mov	ecx, DWORD PTR _it$237077[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T278704[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@4

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$237077[ebp]
	mov	DWORD PTR $T278772[ebp], edx
	mov	eax, DWORD PTR $T278772[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T278768[ebp], ecx
	mov	edx, DWORD PTR $T278768[ebp]
	mov	DWORD PTR $T278767[ebp], edx
	cmp	DWORD PTR $T278767[ebp], 0
	je	SHORT $LN32@deleteInfo@4
	push	1
	mov	eax, DWORD PTR $T278767[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T278767[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv149[ebp], eax
	jmp	SHORT $LN33@deleteInfo@4
$LN32@deleteInfo@4:
	mov	DWORD PTR tv149[ebp], 0
$LN33@deleteInfo@4:
	mov	ecx, DWORD PTR $T278772[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@4
$LN1@deleteInfo@4:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T278788[ebp], eax
	mov	ecx, DWORD PTR $T278788[ebp]
	mov	DWORD PTR $T278906[ebp], ecx
	mov	edx, DWORD PTR $T278906[ebp]
	mov	DWORD PTR $T278905[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T278804[ebp], ecx
	mov	edx, DWORD PTR $T278804[ebp]
	mov	DWORD PTR $T278908[ebp], edx
	mov	eax, DWORD PTR $T278908[ebp]
	mov	DWORD PTR $T278907[ebp], eax
	mov	ecx, DWORD PTR $T278905[ebp]
	push	ecx
	mov	edx, DWORD PTR $T278907[ebp]
	push	edx
	lea	eax, DWORD PTR $T278909[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@2@0@Z ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvCivilizationInfo@@@@YAXAAV?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvCivilizationInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@2@0@Z ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvMinorCivInfo@@@@YAXAAV?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T279024 = -56						; size = 4
$T279008 = -52						; size = 4
$T279129 = -48						; size = 4
$T279128 = -44						; size = 4
$T279127 = -40						; size = 4
$T279126 = -36						; size = 4
$T279125 = -32						; size = 4
$T278992 = -28						; size = 4
$T278988 = -24						; size = 4
$T278987 = -20						; size = 4
$T278958 = -16						; size = 4
$T278934 = -12						; size = 4
$T278924 = -8						; size = 4
_it$237239 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvMinorCivInfo@@@@YAXAAV?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvMinorCivInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T278934[ebp], ecx
	mov	edx, DWORD PTR $T278934[ebp]
	mov	DWORD PTR _it$237239[ebp], edx
	jmp	SHORT $LN3@deleteInfo@5
$LN2@deleteInfo@5:
	mov	eax, DWORD PTR _it$237239[ebp]
	add	eax, 4
	mov	DWORD PTR _it$237239[ebp], eax
$LN3@deleteInfo@5:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T278958[ebp], edx
	mov	eax, DWORD PTR $T278958[ebp]
	mov	DWORD PTR $T278924[ebp], eax
	mov	ecx, DWORD PTR _it$237239[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T278924[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@5

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$237239[ebp]
	mov	DWORD PTR $T278992[ebp], edx
	mov	eax, DWORD PTR $T278992[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T278988[ebp], ecx
	mov	edx, DWORD PTR $T278988[ebp]
	mov	DWORD PTR $T278987[ebp], edx
	cmp	DWORD PTR $T278987[ebp], 0
	je	SHORT $LN32@deleteInfo@5
	push	1
	mov	eax, DWORD PTR $T278987[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T278987[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@5
$LN32@deleteInfo@5:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@5:
	mov	ecx, DWORD PTR $T278992[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@5
$LN1@deleteInfo@5:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T279008[ebp], eax
	mov	ecx, DWORD PTR $T279008[ebp]
	mov	DWORD PTR $T279126[ebp], ecx
	mov	edx, DWORD PTR $T279126[ebp]
	mov	DWORD PTR $T279125[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T279024[ebp], ecx
	mov	edx, DWORD PTR $T279024[ebp]
	mov	DWORD PTR $T279128[ebp], edx
	mov	eax, DWORD PTR $T279128[ebp]
	mov	DWORD PTR $T279127[ebp], eax
	mov	ecx, DWORD PTR $T279125[ebp]
	push	ecx
	mov	edx, DWORD PTR $T279127[ebp]
	push	edx
	lea	eax, DWORD PTR $T279129[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@2@0@Z ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvMinorCivInfo@@@@YAXAAV?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvMinorCivInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@2@0@Z ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvVoteSourceInfo@@@@YAXAAV?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T279244 = -56						; size = 4
$T279228 = -52						; size = 4
$T279349 = -48						; size = 4
$T279348 = -44						; size = 4
$T279347 = -40						; size = 4
$T279346 = -36						; size = 4
$T279345 = -32						; size = 4
$T279212 = -28						; size = 4
$T279208 = -24						; size = 4
$T279207 = -20						; size = 4
$T279178 = -16						; size = 4
$T279154 = -12						; size = 4
$T279144 = -8						; size = 4
_it$237401 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvVoteSourceInfo@@@@YAXAAV?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvVoteSourceInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T279154[ebp], ecx
	mov	edx, DWORD PTR $T279154[ebp]
	mov	DWORD PTR _it$237401[ebp], edx
	jmp	SHORT $LN3@deleteInfo@6
$LN2@deleteInfo@6:
	mov	eax, DWORD PTR _it$237401[ebp]
	add	eax, 4
	mov	DWORD PTR _it$237401[ebp], eax
$LN3@deleteInfo@6:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T279178[ebp], edx
	mov	eax, DWORD PTR $T279178[ebp]
	mov	DWORD PTR $T279144[ebp], eax
	mov	ecx, DWORD PTR _it$237401[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T279144[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@6

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$237401[ebp]
	mov	DWORD PTR $T279212[ebp], edx
	mov	eax, DWORD PTR $T279212[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T279208[ebp], ecx
	mov	edx, DWORD PTR $T279208[ebp]
	mov	DWORD PTR $T279207[ebp], edx
	cmp	DWORD PTR $T279207[ebp], 0
	je	SHORT $LN32@deleteInfo@6
	push	1
	mov	eax, DWORD PTR $T279207[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T279207[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@6
$LN32@deleteInfo@6:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@6:
	mov	ecx, DWORD PTR $T279212[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@6
$LN1@deleteInfo@6:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T279228[ebp], eax
	mov	ecx, DWORD PTR $T279228[ebp]
	mov	DWORD PTR $T279346[ebp], ecx
	mov	edx, DWORD PTR $T279346[ebp]
	mov	DWORD PTR $T279345[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T279244[ebp], ecx
	mov	edx, DWORD PTR $T279244[ebp]
	mov	DWORD PTR $T279348[ebp], edx
	mov	eax, DWORD PTR $T279348[ebp]
	mov	DWORD PTR $T279347[ebp], eax
	mov	ecx, DWORD PTR $T279345[ebp]
	push	ecx
	mov	edx, DWORD PTR $T279347[ebp]
	push	edx
	lea	eax, DWORD PTR $T279349[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@2@0@Z ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvVoteSourceInfo@@@@YAXAAV?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvVoteSourceInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@2@0@Z ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvHandicapInfo@@@@YAXAAV?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T279464 = -56						; size = 4
$T279448 = -52						; size = 4
$T279569 = -48						; size = 4
$T279568 = -44						; size = 4
$T279567 = -40						; size = 4
$T279566 = -36						; size = 4
$T279565 = -32						; size = 4
$T279432 = -28						; size = 4
$T279428 = -24						; size = 4
$T279427 = -20						; size = 4
$T279398 = -16						; size = 4
$T279374 = -12						; size = 4
$T279364 = -8						; size = 4
_it$237563 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvHandicapInfo@@@@YAXAAV?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvHandicapInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T279374[ebp], ecx
	mov	edx, DWORD PTR $T279374[ebp]
	mov	DWORD PTR _it$237563[ebp], edx
	jmp	SHORT $LN3@deleteInfo@7
$LN2@deleteInfo@7:
	mov	eax, DWORD PTR _it$237563[ebp]
	add	eax, 4
	mov	DWORD PTR _it$237563[ebp], eax
$LN3@deleteInfo@7:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T279398[ebp], edx
	mov	eax, DWORD PTR $T279398[ebp]
	mov	DWORD PTR $T279364[ebp], eax
	mov	ecx, DWORD PTR _it$237563[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T279364[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@7

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$237563[ebp]
	mov	DWORD PTR $T279432[ebp], edx
	mov	eax, DWORD PTR $T279432[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T279428[ebp], ecx
	mov	edx, DWORD PTR $T279428[ebp]
	mov	DWORD PTR $T279427[ebp], edx
	cmp	DWORD PTR $T279427[ebp], 0
	je	SHORT $LN32@deleteInfo@7
	push	1
	mov	eax, DWORD PTR $T279427[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T279427[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@7
$LN32@deleteInfo@7:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@7:
	mov	ecx, DWORD PTR $T279432[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@7
$LN1@deleteInfo@7:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T279448[ebp], eax
	mov	ecx, DWORD PTR $T279448[ebp]
	mov	DWORD PTR $T279566[ebp], ecx
	mov	edx, DWORD PTR $T279566[ebp]
	mov	DWORD PTR $T279565[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T279464[ebp], ecx
	mov	edx, DWORD PTR $T279464[ebp]
	mov	DWORD PTR $T279568[ebp], edx
	mov	eax, DWORD PTR $T279568[ebp]
	mov	DWORD PTR $T279567[ebp], eax
	mov	ecx, DWORD PTR $T279565[ebp]
	push	ecx
	mov	edx, DWORD PTR $T279567[ebp]
	push	edx
	lea	eax, DWORD PTR $T279569[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@2@0@Z ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvHandicapInfo@@@@YAXAAV?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvHandicapInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@2@0@Z ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvGameSpeedInfo@@@@YAXAAV?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T279684 = -56						; size = 4
$T279668 = -52						; size = 4
$T279788 = -48						; size = 4
$T279787 = -44						; size = 4
$T279786 = -40						; size = 4
$T279785 = -36						; size = 4
$T279784 = -32						; size = 4
$T279652 = -28						; size = 4
$T279648 = -24						; size = 4
$T279647 = -20						; size = 4
$T279618 = -16						; size = 4
$T279594 = -12						; size = 4
$T279584 = -8						; size = 4
_it$237725 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvGameSpeedInfo@@@@YAXAAV?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvGameSpeedInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T279594[ebp], ecx
	mov	edx, DWORD PTR $T279594[ebp]
	mov	DWORD PTR _it$237725[ebp], edx
	jmp	SHORT $LN3@deleteInfo@8
$LN2@deleteInfo@8:
	mov	eax, DWORD PTR _it$237725[ebp]
	add	eax, 4
	mov	DWORD PTR _it$237725[ebp], eax
$LN3@deleteInfo@8:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T279618[ebp], edx
	mov	eax, DWORD PTR $T279618[ebp]
	mov	DWORD PTR $T279584[ebp], eax
	mov	ecx, DWORD PTR _it$237725[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T279584[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@8

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$237725[ebp]
	mov	DWORD PTR $T279652[ebp], edx
	mov	eax, DWORD PTR $T279652[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T279648[ebp], ecx
	mov	edx, DWORD PTR $T279648[ebp]
	mov	DWORD PTR $T279647[ebp], edx
	cmp	DWORD PTR $T279647[ebp], 0
	je	SHORT $LN32@deleteInfo@8
	push	1
	mov	eax, DWORD PTR $T279647[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T279647[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@8
$LN32@deleteInfo@8:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@8:
	mov	ecx, DWORD PTR $T279652[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@8
$LN1@deleteInfo@8:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T279668[ebp], eax
	mov	ecx, DWORD PTR $T279668[ebp]
	mov	DWORD PTR $T279785[ebp], ecx
	mov	edx, DWORD PTR $T279785[ebp]
	mov	DWORD PTR $T279784[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T279684[ebp], ecx
	mov	edx, DWORD PTR $T279684[ebp]
	mov	DWORD PTR $T279787[ebp], edx
	mov	eax, DWORD PTR $T279787[ebp]
	mov	DWORD PTR $T279786[ebp], eax
	mov	ecx, DWORD PTR $T279784[ebp]
	push	ecx
	mov	edx, DWORD PTR $T279786[ebp]
	push	edx
	lea	eax, DWORD PTR $T279788[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@2@0@Z ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvGameSpeedInfo@@@@YAXAAV?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvGameSpeedInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@2@0@Z ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::erase
PUBLIC	??1CvBaseInfo@@QAE@XZ				; CvBaseInfo::~CvBaseInfo
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvTurnTimerInfo@@@@YAXAAV?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -148						; size = 4
$T279974 = -92						; size = 4
$T279958 = -88						; size = 4
$T280079 = -84						; size = 4
$T280078 = -80						; size = 4
$T280077 = -76						; size = 4
$T280076 = -72						; size = 4
$T280075 = -68						; size = 4
$T279942 = -64						; size = 4
$T279933 = -24						; size = 4
$T279932 = -20						; size = 4
$T279838 = -16						; size = 4
$T279814 = -12						; size = 4
$T279804 = -8						; size = 4
_it$237887 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvTurnTimerInfo@@@@YAXAAV?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvTurnTimerInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T279814[ebp], ecx
	mov	edx, DWORD PTR $T279814[ebp]
	mov	DWORD PTR _it$237887[ebp], edx
	jmp	SHORT $LN3@deleteInfo@9
$LN2@deleteInfo@9:
	mov	eax, DWORD PTR _it$237887[ebp]
	add	eax, 4
	mov	DWORD PTR _it$237887[ebp], eax
$LN3@deleteInfo@9:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T279838[ebp], edx
	mov	eax, DWORD PTR $T279838[ebp]
	mov	DWORD PTR $T279804[ebp], eax
	mov	ecx, DWORD PTR _it$237887[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T279804[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@9

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$237887[ebp]
	mov	DWORD PTR $T279942[ebp], edx
	mov	eax, DWORD PTR $T279942[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T279933[ebp], ecx
	mov	edx, DWORD PTR $T279933[ebp]
	mov	DWORD PTR $T279932[ebp], edx
	cmp	DWORD PTR $T279932[ebp], 0
	je	SHORT $LN32@deleteInfo@9
	mov	ecx, DWORD PTR $T279932[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@deleteInfo@9
	mov	ecx, DWORD PTR $T279932[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@9:
	mov	edx, DWORD PTR $T279932[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@deleteInfo@9
$LN32@deleteInfo@9:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@9:
	mov	eax, DWORD PTR $T279942[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@9
$LN1@deleteInfo@9:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T279958[ebp], edx
	mov	eax, DWORD PTR $T279958[ebp]
	mov	DWORD PTR $T280076[ebp], eax
	mov	ecx, DWORD PTR $T280076[ebp]
	mov	DWORD PTR $T280075[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T279974[ebp], eax
	mov	ecx, DWORD PTR $T279974[ebp]
	mov	DWORD PTR $T280078[ebp], ecx
	mov	edx, DWORD PTR $T280078[ebp]
	mov	DWORD PTR $T280077[ebp], edx
	mov	eax, DWORD PTR $T280075[ebp]
	push	eax
	mov	ecx, DWORD PTR $T280077[ebp]
	push	ecx
	lea	edx, DWORD PTR $T280079[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@2@0@Z ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvTurnTimerInfo@@@@YAXAAV?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvTurnTimerInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@2@0@Z ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvVictoryInfo@@@@YAXAAV?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T280194 = -56						; size = 4
$T280178 = -52						; size = 4
$T280299 = -48						; size = 4
$T280298 = -44						; size = 4
$T280297 = -40						; size = 4
$T280296 = -36						; size = 4
$T280295 = -32						; size = 4
$T280162 = -28						; size = 4
$T280158 = -24						; size = 4
$T280157 = -20						; size = 4
$T280128 = -16						; size = 4
$T280104 = -12						; size = 4
$T280094 = -8						; size = 4
_it$238049 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvVictoryInfo@@@@YAXAAV?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvVictoryInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T280104[ebp], ecx
	mov	edx, DWORD PTR $T280104[ebp]
	mov	DWORD PTR _it$238049[ebp], edx
	jmp	SHORT $LN3@deleteInfo@10
$LN2@deleteInfo@10:
	mov	eax, DWORD PTR _it$238049[ebp]
	add	eax, 4
	mov	DWORD PTR _it$238049[ebp], eax
$LN3@deleteInfo@10:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T280128[ebp], edx
	mov	eax, DWORD PTR $T280128[ebp]
	mov	DWORD PTR $T280094[ebp], eax
	mov	ecx, DWORD PTR _it$238049[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T280094[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@10

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$238049[ebp]
	mov	DWORD PTR $T280162[ebp], edx
	mov	eax, DWORD PTR $T280162[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T280158[ebp], ecx
	mov	edx, DWORD PTR $T280158[ebp]
	mov	DWORD PTR $T280157[ebp], edx
	cmp	DWORD PTR $T280157[ebp], 0
	je	SHORT $LN32@deleteInfo@10
	push	1
	mov	eax, DWORD PTR $T280157[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T280157[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@10
$LN32@deleteInfo@10:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@10:
	mov	ecx, DWORD PTR $T280162[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@10
$LN1@deleteInfo@10:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T280178[ebp], eax
	mov	ecx, DWORD PTR $T280178[ebp]
	mov	DWORD PTR $T280296[ebp], ecx
	mov	edx, DWORD PTR $T280296[ebp]
	mov	DWORD PTR $T280295[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T280194[ebp], ecx
	mov	edx, DWORD PTR $T280194[ebp]
	mov	DWORD PTR $T280298[ebp], edx
	mov	eax, DWORD PTR $T280298[ebp]
	mov	DWORD PTR $T280297[ebp], eax
	mov	ecx, DWORD PTR $T280295[ebp]
	push	ecx
	mov	edx, DWORD PTR $T280297[ebp]
	push	edx
	lea	eax, DWORD PTR $T280299[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@2@0@Z ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvVictoryInfo@@@@YAXAAV?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvVictoryInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@2@0@Z ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvSmallAwardInfo@@@@YAXAAV?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T280414 = -56						; size = 4
$T280398 = -52						; size = 4
$T280519 = -48						; size = 4
$T280518 = -44						; size = 4
$T280517 = -40						; size = 4
$T280516 = -36						; size = 4
$T280515 = -32						; size = 4
$T280382 = -28						; size = 4
$T280378 = -24						; size = 4
$T280377 = -20						; size = 4
$T280348 = -16						; size = 4
$T280324 = -12						; size = 4
$T280314 = -8						; size = 4
_it$238211 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvSmallAwardInfo@@@@YAXAAV?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvSmallAwardInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T280324[ebp], ecx
	mov	edx, DWORD PTR $T280324[ebp]
	mov	DWORD PTR _it$238211[ebp], edx
	jmp	SHORT $LN3@deleteInfo@11
$LN2@deleteInfo@11:
	mov	eax, DWORD PTR _it$238211[ebp]
	add	eax, 4
	mov	DWORD PTR _it$238211[ebp], eax
$LN3@deleteInfo@11:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T280348[ebp], edx
	mov	eax, DWORD PTR $T280348[ebp]
	mov	DWORD PTR $T280314[ebp], eax
	mov	ecx, DWORD PTR _it$238211[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T280314[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@11

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$238211[ebp]
	mov	DWORD PTR $T280382[ebp], edx
	mov	eax, DWORD PTR $T280382[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T280378[ebp], ecx
	mov	edx, DWORD PTR $T280378[ebp]
	mov	DWORD PTR $T280377[ebp], edx
	cmp	DWORD PTR $T280377[ebp], 0
	je	SHORT $LN32@deleteInfo@11
	push	1
	mov	eax, DWORD PTR $T280377[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T280377[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@11
$LN32@deleteInfo@11:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@11:
	mov	ecx, DWORD PTR $T280382[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@11
$LN1@deleteInfo@11:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T280398[ebp], eax
	mov	ecx, DWORD PTR $T280398[ebp]
	mov	DWORD PTR $T280516[ebp], ecx
	mov	edx, DWORD PTR $T280516[ebp]
	mov	DWORD PTR $T280515[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T280414[ebp], ecx
	mov	edx, DWORD PTR $T280414[ebp]
	mov	DWORD PTR $T280518[ebp], edx
	mov	eax, DWORD PTR $T280518[ebp]
	mov	DWORD PTR $T280517[ebp], eax
	mov	ecx, DWORD PTR $T280515[ebp]
	push	ecx
	mov	edx, DWORD PTR $T280517[ebp]
	push	edx
	lea	eax, DWORD PTR $T280519[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@2@0@Z ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvSmallAwardInfo@@@@YAXAAV?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvSmallAwardInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@2@0@Z ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvHurryInfo@@@@YAXAAV?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -148						; size = 4
$T280704 = -92						; size = 4
$T280688 = -88						; size = 4
$T280808 = -84						; size = 4
$T280807 = -80						; size = 4
$T280806 = -76						; size = 4
$T280805 = -72						; size = 4
$T280804 = -68						; size = 4
$T280672 = -64						; size = 4
$T280663 = -24						; size = 4
$T280662 = -20						; size = 4
$T280568 = -16						; size = 4
$T280544 = -12						; size = 4
$T280534 = -8						; size = 4
_it$238373 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvHurryInfo@@@@YAXAAV?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvHurryInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T280544[ebp], ecx
	mov	edx, DWORD PTR $T280544[ebp]
	mov	DWORD PTR _it$238373[ebp], edx
	jmp	SHORT $LN3@deleteInfo@12
$LN2@deleteInfo@12:
	mov	eax, DWORD PTR _it$238373[ebp]
	add	eax, 4
	mov	DWORD PTR _it$238373[ebp], eax
$LN3@deleteInfo@12:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T280568[ebp], edx
	mov	eax, DWORD PTR $T280568[ebp]
	mov	DWORD PTR $T280534[ebp], eax
	mov	ecx, DWORD PTR _it$238373[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T280534[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@12

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$238373[ebp]
	mov	DWORD PTR $T280672[ebp], edx
	mov	eax, DWORD PTR $T280672[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T280663[ebp], ecx
	mov	edx, DWORD PTR $T280663[ebp]
	mov	DWORD PTR $T280662[ebp], edx
	cmp	DWORD PTR $T280662[ebp], 0
	je	SHORT $LN32@deleteInfo@12
	mov	ecx, DWORD PTR $T280662[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@deleteInfo@12
	mov	ecx, DWORD PTR $T280662[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@12:
	mov	edx, DWORD PTR $T280662[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@deleteInfo@12
$LN32@deleteInfo@12:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@12:
	mov	eax, DWORD PTR $T280672[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@12
$LN1@deleteInfo@12:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T280688[ebp], edx
	mov	eax, DWORD PTR $T280688[ebp]
	mov	DWORD PTR $T280805[ebp], eax
	mov	ecx, DWORD PTR $T280805[ebp]
	mov	DWORD PTR $T280804[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T280704[ebp], eax
	mov	ecx, DWORD PTR $T280704[ebp]
	mov	DWORD PTR $T280807[ebp], ecx
	mov	edx, DWORD PTR $T280807[ebp]
	mov	DWORD PTR $T280806[ebp], edx
	mov	eax, DWORD PTR $T280804[ebp]
	push	eax
	mov	ecx, DWORD PTR $T280806[ebp]
	push	ecx
	lea	edx, DWORD PTR $T280808[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@2@0@Z ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvHurryInfo@@@@YAXAAV?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvHurryInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@2@0@Z ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvProcessInfo@@@@YAXAAV?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T280924 = -56						; size = 4
$T280908 = -52						; size = 4
$T281029 = -48						; size = 4
$T281028 = -44						; size = 4
$T281027 = -40						; size = 4
$T281026 = -36						; size = 4
$T281025 = -32						; size = 4
$T280892 = -28						; size = 4
$T280888 = -24						; size = 4
$T280887 = -20						; size = 4
$T280858 = -16						; size = 4
$T280834 = -12						; size = 4
$T280824 = -8						; size = 4
_it$238535 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvProcessInfo@@@@YAXAAV?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvProcessInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T280834[ebp], ecx
	mov	edx, DWORD PTR $T280834[ebp]
	mov	DWORD PTR _it$238535[ebp], edx
	jmp	SHORT $LN3@deleteInfo@13
$LN2@deleteInfo@13:
	mov	eax, DWORD PTR _it$238535[ebp]
	add	eax, 4
	mov	DWORD PTR _it$238535[ebp], eax
$LN3@deleteInfo@13:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T280858[ebp], edx
	mov	eax, DWORD PTR $T280858[ebp]
	mov	DWORD PTR $T280824[ebp], eax
	mov	ecx, DWORD PTR _it$238535[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T280824[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@13

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$238535[ebp]
	mov	DWORD PTR $T280892[ebp], edx
	mov	eax, DWORD PTR $T280892[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T280888[ebp], ecx
	mov	edx, DWORD PTR $T280888[ebp]
	mov	DWORD PTR $T280887[ebp], edx
	cmp	DWORD PTR $T280887[ebp], 0
	je	SHORT $LN32@deleteInfo@13
	push	1
	mov	eax, DWORD PTR $T280887[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T280887[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@13
$LN32@deleteInfo@13:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@13:
	mov	ecx, DWORD PTR $T280892[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@13
$LN1@deleteInfo@13:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T280908[ebp], eax
	mov	ecx, DWORD PTR $T280908[ebp]
	mov	DWORD PTR $T281026[ebp], ecx
	mov	edx, DWORD PTR $T281026[ebp]
	mov	DWORD PTR $T281025[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T280924[ebp], ecx
	mov	edx, DWORD PTR $T280924[ebp]
	mov	DWORD PTR $T281028[ebp], edx
	mov	eax, DWORD PTR $T281028[ebp]
	mov	DWORD PTR $T281027[ebp], eax
	mov	ecx, DWORD PTR $T281025[ebp]
	push	ecx
	mov	edx, DWORD PTR $T281027[ebp]
	push	edx
	lea	eax, DWORD PTR $T281029[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@2@0@Z ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvProcessInfo@@@@YAXAAV?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvProcessInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@2@0@Z ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvVoteInfo@@@@YAXAAV?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T281144 = -56						; size = 4
$T281128 = -52						; size = 4
$T281249 = -48						; size = 4
$T281248 = -44						; size = 4
$T281247 = -40						; size = 4
$T281246 = -36						; size = 4
$T281245 = -32						; size = 4
$T281112 = -28						; size = 4
$T281108 = -24						; size = 4
$T281107 = -20						; size = 4
$T281078 = -16						; size = 4
$T281054 = -12						; size = 4
$T281044 = -8						; size = 4
_it$238697 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvVoteInfo@@@@YAXAAV?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvVoteInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T281054[ebp], ecx
	mov	edx, DWORD PTR $T281054[ebp]
	mov	DWORD PTR _it$238697[ebp], edx
	jmp	SHORT $LN3@deleteInfo@14
$LN2@deleteInfo@14:
	mov	eax, DWORD PTR _it$238697[ebp]
	add	eax, 4
	mov	DWORD PTR _it$238697[ebp], eax
$LN3@deleteInfo@14:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T281078[ebp], edx
	mov	eax, DWORD PTR $T281078[ebp]
	mov	DWORD PTR $T281044[ebp], eax
	mov	ecx, DWORD PTR _it$238697[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T281044[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@14

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$238697[ebp]
	mov	DWORD PTR $T281112[ebp], edx
	mov	eax, DWORD PTR $T281112[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T281108[ebp], ecx
	mov	edx, DWORD PTR $T281108[ebp]
	mov	DWORD PTR $T281107[ebp], edx
	cmp	DWORD PTR $T281107[ebp], 0
	je	SHORT $LN32@deleteInfo@14
	push	1
	mov	eax, DWORD PTR $T281107[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T281107[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@14
$LN32@deleteInfo@14:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@14:
	mov	ecx, DWORD PTR $T281112[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@14
$LN1@deleteInfo@14:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T281128[ebp], eax
	mov	ecx, DWORD PTR $T281128[ebp]
	mov	DWORD PTR $T281246[ebp], ecx
	mov	edx, DWORD PTR $T281246[ebp]
	mov	DWORD PTR $T281245[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T281144[ebp], ecx
	mov	edx, DWORD PTR $T281144[ebp]
	mov	DWORD PTR $T281248[ebp], edx
	mov	eax, DWORD PTR $T281248[ebp]
	mov	DWORD PTR $T281247[ebp], eax
	mov	ecx, DWORD PTR $T281245[ebp]
	push	ecx
	mov	edx, DWORD PTR $T281247[ebp]
	push	edx
	lea	eax, DWORD PTR $T281249[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@2@0@Z ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvVoteInfo@@@@YAXAAV?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvVoteInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@2@0@Z ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvColorInfo@@@@YAXAAV?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -148						; size = 4
$T281434 = -92						; size = 4
$T281418 = -88						; size = 4
$T281538 = -84						; size = 4
$T281537 = -80						; size = 4
$T281536 = -76						; size = 4
$T281535 = -72						; size = 4
$T281534 = -68						; size = 4
$T281402 = -64						; size = 4
$T281393 = -24						; size = 4
$T281392 = -20						; size = 4
$T281298 = -16						; size = 4
$T281274 = -12						; size = 4
$T281264 = -8						; size = 4
_it$238859 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvColorInfo@@@@YAXAAV?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvColorInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T281274[ebp], ecx
	mov	edx, DWORD PTR $T281274[ebp]
	mov	DWORD PTR _it$238859[ebp], edx
	jmp	SHORT $LN3@deleteInfo@15
$LN2@deleteInfo@15:
	mov	eax, DWORD PTR _it$238859[ebp]
	add	eax, 4
	mov	DWORD PTR _it$238859[ebp], eax
$LN3@deleteInfo@15:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T281298[ebp], edx
	mov	eax, DWORD PTR $T281298[ebp]
	mov	DWORD PTR $T281264[ebp], eax
	mov	ecx, DWORD PTR _it$238859[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T281264[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@15

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$238859[ebp]
	mov	DWORD PTR $T281402[ebp], edx
	mov	eax, DWORD PTR $T281402[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T281393[ebp], ecx
	mov	edx, DWORD PTR $T281393[ebp]
	mov	DWORD PTR $T281392[ebp], edx
	cmp	DWORD PTR $T281392[ebp], 0
	je	SHORT $LN32@deleteInfo@15
	mov	ecx, DWORD PTR $T281392[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@deleteInfo@15
	mov	ecx, DWORD PTR $T281392[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@15:
	mov	edx, DWORD PTR $T281392[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@deleteInfo@15
$LN32@deleteInfo@15:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@15:
	mov	eax, DWORD PTR $T281402[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@15
$LN1@deleteInfo@15:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T281418[ebp], edx
	mov	eax, DWORD PTR $T281418[ebp]
	mov	DWORD PTR $T281535[ebp], eax
	mov	ecx, DWORD PTR $T281535[ebp]
	mov	DWORD PTR $T281534[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T281434[ebp], eax
	mov	ecx, DWORD PTR $T281434[ebp]
	mov	DWORD PTR $T281537[ebp], ecx
	mov	edx, DWORD PTR $T281537[ebp]
	mov	DWORD PTR $T281536[ebp], edx
	mov	eax, DWORD PTR $T281534[ebp]
	push	eax
	mov	ecx, DWORD PTR $T281536[ebp]
	push	ecx
	lea	edx, DWORD PTR $T281538[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@2@0@Z ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvColorInfo@@@@YAXAAV?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvColorInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@2@0@Z ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvPlayerColorInfo@@@@YAXAAV?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -148						; size = 4
$T281724 = -92						; size = 4
$T281708 = -88						; size = 4
$T281828 = -84						; size = 4
$T281827 = -80						; size = 4
$T281826 = -76						; size = 4
$T281825 = -72						; size = 4
$T281824 = -68						; size = 4
$T281692 = -64						; size = 4
$T281683 = -24						; size = 4
$T281682 = -20						; size = 4
$T281588 = -16						; size = 4
$T281564 = -12						; size = 4
$T281554 = -8						; size = 4
_it$239021 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvPlayerColorInfo@@@@YAXAAV?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvPlayerColorInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T281564[ebp], ecx
	mov	edx, DWORD PTR $T281564[ebp]
	mov	DWORD PTR _it$239021[ebp], edx
	jmp	SHORT $LN3@deleteInfo@16
$LN2@deleteInfo@16:
	mov	eax, DWORD PTR _it$239021[ebp]
	add	eax, 4
	mov	DWORD PTR _it$239021[ebp], eax
$LN3@deleteInfo@16:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T281588[ebp], edx
	mov	eax, DWORD PTR $T281588[ebp]
	mov	DWORD PTR $T281554[ebp], eax
	mov	ecx, DWORD PTR _it$239021[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T281554[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@16

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$239021[ebp]
	mov	DWORD PTR $T281692[ebp], edx
	mov	eax, DWORD PTR $T281692[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T281683[ebp], ecx
	mov	edx, DWORD PTR $T281683[ebp]
	mov	DWORD PTR $T281682[ebp], edx
	cmp	DWORD PTR $T281682[ebp], 0
	je	SHORT $LN32@deleteInfo@16
	mov	ecx, DWORD PTR $T281682[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@deleteInfo@16
	mov	ecx, DWORD PTR $T281682[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@16:
	mov	edx, DWORD PTR $T281682[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@deleteInfo@16
$LN32@deleteInfo@16:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@16:
	mov	eax, DWORD PTR $T281692[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@16
$LN1@deleteInfo@16:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T281708[ebp], edx
	mov	eax, DWORD PTR $T281708[ebp]
	mov	DWORD PTR $T281825[ebp], eax
	mov	ecx, DWORD PTR $T281825[ebp]
	mov	DWORD PTR $T281824[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T281724[ebp], eax
	mov	ecx, DWORD PTR $T281724[ebp]
	mov	DWORD PTR $T281827[ebp], ecx
	mov	edx, DWORD PTR $T281827[ebp]
	mov	DWORD PTR $T281826[ebp], edx
	mov	eax, DWORD PTR $T281824[ebp]
	push	eax
	mov	ecx, DWORD PTR $T281826[ebp]
	push	ecx
	lea	edx, DWORD PTR $T281828[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@2@0@Z ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvPlayerColorInfo@@@@YAXAAV?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvPlayerColorInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@2@0@Z ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::erase
PUBLIC	??1CvHotKeyInfo@@QAE@XZ				; CvHotKeyInfo::~CvHotKeyInfo
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvInterfaceModeInfo@@@@YAXAAV?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -172						; size = 4
$T282052 = -116						; size = 4
$T282036 = -112						; size = 4
$T282156 = -108						; size = 4
$T282155 = -104						; size = 4
$T282154 = -100						; size = 4
$T282153 = -96						; size = 4
$T282152 = -92						; size = 4
$T282020 = -88						; size = 4
$T282011 = -24						; size = 4
$T282010 = -20						; size = 4
$T281878 = -16						; size = 4
$T281854 = -12						; size = 4
$T281844 = -8						; size = 4
_it$239183 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvInterfaceModeInfo@@@@YAXAAV?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvInterfaceModeInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T281854[ebp], ecx
	mov	edx, DWORD PTR $T281854[ebp]
	mov	DWORD PTR _it$239183[ebp], edx
	jmp	SHORT $LN3@deleteInfo@17
$LN2@deleteInfo@17:
	mov	eax, DWORD PTR _it$239183[ebp]
	add	eax, 4
	mov	DWORD PTR _it$239183[ebp], eax
$LN3@deleteInfo@17:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T281878[ebp], edx
	mov	eax, DWORD PTR $T281878[ebp]
	mov	DWORD PTR $T281844[ebp], eax
	mov	ecx, DWORD PTR _it$239183[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T281844[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@17

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$239183[ebp]
	mov	DWORD PTR $T282020[ebp], edx
	mov	eax, DWORD PTR $T282020[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T282011[ebp], ecx
	mov	edx, DWORD PTR $T282011[ebp]
	mov	DWORD PTR $T282010[ebp], edx
	cmp	DWORD PTR $T282010[ebp], 0
	je	SHORT $LN32@deleteInfo@17
	mov	ecx, DWORD PTR $T282010[ebp]
	call	??1CvHotKeyInfo@@QAE@XZ
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@deleteInfo@17
	mov	ecx, DWORD PTR $T282010[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@17:
	mov	edx, DWORD PTR $T282010[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@deleteInfo@17
$LN32@deleteInfo@17:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@17:
	mov	eax, DWORD PTR $T282020[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@17
$LN1@deleteInfo@17:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T282036[ebp], edx
	mov	eax, DWORD PTR $T282036[ebp]
	mov	DWORD PTR $T282153[ebp], eax
	mov	ecx, DWORD PTR $T282153[ebp]
	mov	DWORD PTR $T282152[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T282052[ebp], eax
	mov	ecx, DWORD PTR $T282052[ebp]
	mov	DWORD PTR $T282155[ebp], ecx
	mov	edx, DWORD PTR $T282155[ebp]
	mov	DWORD PTR $T282154[ebp], edx
	mov	eax, DWORD PTR $T282152[ebp]
	push	eax
	mov	ecx, DWORD PTR $T282154[ebp]
	push	ecx
	lea	edx, DWORD PTR $T282156[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@2@0@Z ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvInterfaceModeInfo@@@@YAXAAV?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvInterfaceModeInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@2@0@Z ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvRouteInfo@@@@YAXAAV?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T282272 = -56						; size = 4
$T282256 = -52						; size = 4
$T282377 = -48						; size = 4
$T282376 = -44						; size = 4
$T282375 = -40						; size = 4
$T282374 = -36						; size = 4
$T282373 = -32						; size = 4
$T282240 = -28						; size = 4
$T282236 = -24						; size = 4
$T282235 = -20						; size = 4
$T282206 = -16						; size = 4
$T282182 = -12						; size = 4
$T282172 = -8						; size = 4
_it$239345 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvRouteInfo@@@@YAXAAV?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvRouteInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T282182[ebp], ecx
	mov	edx, DWORD PTR $T282182[ebp]
	mov	DWORD PTR _it$239345[ebp], edx
	jmp	SHORT $LN3@deleteInfo@18
$LN2@deleteInfo@18:
	mov	eax, DWORD PTR _it$239345[ebp]
	add	eax, 4
	mov	DWORD PTR _it$239345[ebp], eax
$LN3@deleteInfo@18:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T282206[ebp], edx
	mov	eax, DWORD PTR $T282206[ebp]
	mov	DWORD PTR $T282172[ebp], eax
	mov	ecx, DWORD PTR _it$239345[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T282172[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@18

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$239345[ebp]
	mov	DWORD PTR $T282240[ebp], edx
	mov	eax, DWORD PTR $T282240[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T282236[ebp], ecx
	mov	edx, DWORD PTR $T282236[ebp]
	mov	DWORD PTR $T282235[ebp], edx
	cmp	DWORD PTR $T282235[ebp], 0
	je	SHORT $LN32@deleteInfo@18
	push	1
	mov	eax, DWORD PTR $T282235[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T282235[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@18
$LN32@deleteInfo@18:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@18:
	mov	ecx, DWORD PTR $T282240[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@18
$LN1@deleteInfo@18:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T282256[ebp], eax
	mov	ecx, DWORD PTR $T282256[ebp]
	mov	DWORD PTR $T282374[ebp], ecx
	mov	edx, DWORD PTR $T282374[ebp]
	mov	DWORD PTR $T282373[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T282272[ebp], ecx
	mov	edx, DWORD PTR $T282272[ebp]
	mov	DWORD PTR $T282376[ebp], edx
	mov	eax, DWORD PTR $T282376[ebp]
	mov	DWORD PTR $T282375[ebp], eax
	mov	ecx, DWORD PTR $T282373[ebp]
	push	ecx
	mov	edx, DWORD PTR $T282375[ebp]
	push	edx
	lea	eax, DWORD PTR $T282377[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@2@0@Z ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvRouteInfo@@@@YAXAAV?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvRouteInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@2@0@Z ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvEraInfo@@@@YAXAAV?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T282492 = -56						; size = 4
$T282476 = -52						; size = 4
$T282597 = -48						; size = 4
$T282596 = -44						; size = 4
$T282595 = -40						; size = 4
$T282594 = -36						; size = 4
$T282593 = -32						; size = 4
$T282460 = -28						; size = 4
$T282456 = -24						; size = 4
$T282455 = -20						; size = 4
$T282426 = -16						; size = 4
$T282402 = -12						; size = 4
$T282392 = -8						; size = 4
_it$239507 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvEraInfo@@@@YAXAAV?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvEraInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T282402[ebp], ecx
	mov	edx, DWORD PTR $T282402[ebp]
	mov	DWORD PTR _it$239507[ebp], edx
	jmp	SHORT $LN3@deleteInfo@19
$LN2@deleteInfo@19:
	mov	eax, DWORD PTR _it$239507[ebp]
	add	eax, 4
	mov	DWORD PTR _it$239507[ebp], eax
$LN3@deleteInfo@19:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T282426[ebp], edx
	mov	eax, DWORD PTR $T282426[ebp]
	mov	DWORD PTR $T282392[ebp], eax
	mov	ecx, DWORD PTR _it$239507[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T282392[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@19

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$239507[ebp]
	mov	DWORD PTR $T282460[ebp], edx
	mov	eax, DWORD PTR $T282460[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T282456[ebp], ecx
	mov	edx, DWORD PTR $T282456[ebp]
	mov	DWORD PTR $T282455[ebp], edx
	cmp	DWORD PTR $T282455[ebp], 0
	je	SHORT $LN32@deleteInfo@19
	push	1
	mov	eax, DWORD PTR $T282455[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T282455[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@19
$LN32@deleteInfo@19:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@19:
	mov	ecx, DWORD PTR $T282460[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@19
$LN1@deleteInfo@19:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T282476[ebp], eax
	mov	ecx, DWORD PTR $T282476[ebp]
	mov	DWORD PTR $T282594[ebp], ecx
	mov	edx, DWORD PTR $T282594[ebp]
	mov	DWORD PTR $T282593[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T282492[ebp], ecx
	mov	edx, DWORD PTR $T282492[ebp]
	mov	DWORD PTR $T282596[ebp], edx
	mov	eax, DWORD PTR $T282596[ebp]
	mov	DWORD PTR $T282595[ebp], eax
	mov	ecx, DWORD PTR $T282593[ebp]
	push	ecx
	mov	edx, DWORD PTR $T282595[ebp]
	push	edx
	lea	eax, DWORD PTR $T282597[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@2@0@Z ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvEraInfo@@@@YAXAAV?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvEraInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@2@0@Z ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvBuildInfo@@@@YAXAAV?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T282712 = -56						; size = 4
$T282696 = -52						; size = 4
$T282816 = -48						; size = 4
$T282815 = -44						; size = 4
$T282814 = -40						; size = 4
$T282813 = -36						; size = 4
$T282812 = -32						; size = 4
$T282680 = -28						; size = 4
$T282676 = -24						; size = 4
$T282675 = -20						; size = 4
$T282646 = -16						; size = 4
$T282622 = -12						; size = 4
$T282612 = -8						; size = 4
_it$239669 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvBuildInfo@@@@YAXAAV?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvBuildInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T282622[ebp], ecx
	mov	edx, DWORD PTR $T282622[ebp]
	mov	DWORD PTR _it$239669[ebp], edx
	jmp	SHORT $LN3@deleteInfo@20
$LN2@deleteInfo@20:
	mov	eax, DWORD PTR _it$239669[ebp]
	add	eax, 4
	mov	DWORD PTR _it$239669[ebp], eax
$LN3@deleteInfo@20:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T282646[ebp], edx
	mov	eax, DWORD PTR $T282646[ebp]
	mov	DWORD PTR $T282612[ebp], eax
	mov	ecx, DWORD PTR _it$239669[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T282612[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@20

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$239669[ebp]
	mov	DWORD PTR $T282680[ebp], edx
	mov	eax, DWORD PTR $T282680[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T282676[ebp], ecx
	mov	edx, DWORD PTR $T282676[ebp]
	mov	DWORD PTR $T282675[ebp], edx
	cmp	DWORD PTR $T282675[ebp], 0
	je	SHORT $LN32@deleteInfo@20
	push	1
	mov	eax, DWORD PTR $T282675[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T282675[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@20
$LN32@deleteInfo@20:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@20:
	mov	ecx, DWORD PTR $T282680[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@20
$LN1@deleteInfo@20:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T282696[ebp], eax
	mov	ecx, DWORD PTR $T282696[ebp]
	mov	DWORD PTR $T282813[ebp], ecx
	mov	edx, DWORD PTR $T282813[ebp]
	mov	DWORD PTR $T282812[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T282712[ebp], ecx
	mov	edx, DWORD PTR $T282712[ebp]
	mov	DWORD PTR $T282815[ebp], edx
	mov	eax, DWORD PTR $T282815[ebp]
	mov	DWORD PTR $T282814[ebp], eax
	mov	ecx, DWORD PTR $T282812[ebp]
	push	ecx
	mov	edx, DWORD PTR $T282814[ebp]
	push	edx
	lea	eax, DWORD PTR $T282816[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@2@0@Z ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvBuildInfo@@@@YAXAAV?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvBuildInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@2@0@Z ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvUnitClassInfo@@@@YAXAAV?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -148						; size = 4
$T283002 = -92						; size = 4
$T282986 = -88						; size = 4
$T283107 = -84						; size = 4
$T283106 = -80						; size = 4
$T283105 = -76						; size = 4
$T283104 = -72						; size = 4
$T283103 = -68						; size = 4
$T282970 = -64						; size = 4
$T282961 = -24						; size = 4
$T282960 = -20						; size = 4
$T282866 = -16						; size = 4
$T282842 = -12						; size = 4
$T282832 = -8						; size = 4
_it$239831 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvUnitClassInfo@@@@YAXAAV?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvUnitClassInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T282842[ebp], ecx
	mov	edx, DWORD PTR $T282842[ebp]
	mov	DWORD PTR _it$239831[ebp], edx
	jmp	SHORT $LN3@deleteInfo@21
$LN2@deleteInfo@21:
	mov	eax, DWORD PTR _it$239831[ebp]
	add	eax, 4
	mov	DWORD PTR _it$239831[ebp], eax
$LN3@deleteInfo@21:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T282866[ebp], edx
	mov	eax, DWORD PTR $T282866[ebp]
	mov	DWORD PTR $T282832[ebp], eax
	mov	ecx, DWORD PTR _it$239831[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T282832[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@21

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$239831[ebp]
	mov	DWORD PTR $T282970[ebp], edx
	mov	eax, DWORD PTR $T282970[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T282961[ebp], ecx
	mov	edx, DWORD PTR $T282961[ebp]
	mov	DWORD PTR $T282960[ebp], edx
	cmp	DWORD PTR $T282960[ebp], 0
	je	SHORT $LN32@deleteInfo@21
	mov	ecx, DWORD PTR $T282960[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@deleteInfo@21
	mov	ecx, DWORD PTR $T282960[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@21:
	mov	edx, DWORD PTR $T282960[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@deleteInfo@21
$LN32@deleteInfo@21:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@21:
	mov	eax, DWORD PTR $T282970[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@21
$LN1@deleteInfo@21:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T282986[ebp], edx
	mov	eax, DWORD PTR $T282986[ebp]
	mov	DWORD PTR $T283104[ebp], eax
	mov	ecx, DWORD PTR $T283104[ebp]
	mov	DWORD PTR $T283103[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T283002[ebp], eax
	mov	ecx, DWORD PTR $T283002[ebp]
	mov	DWORD PTR $T283106[ebp], ecx
	mov	edx, DWORD PTR $T283106[ebp]
	mov	DWORD PTR $T283105[ebp], edx
	mov	eax, DWORD PTR $T283103[ebp]
	push	eax
	mov	ecx, DWORD PTR $T283105[ebp]
	push	ecx
	lea	edx, DWORD PTR $T283107[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@2@0@Z ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvUnitClassInfo@@@@YAXAAV?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvUnitClassInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@2@0@Z ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvSpecialUnitInfo@@@@YAXAAV?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T283222 = -56						; size = 4
$T283206 = -52						; size = 4
$T283327 = -48						; size = 4
$T283326 = -44						; size = 4
$T283325 = -40						; size = 4
$T283324 = -36						; size = 4
$T283323 = -32						; size = 4
$T283190 = -28						; size = 4
$T283186 = -24						; size = 4
$T283185 = -20						; size = 4
$T283156 = -16						; size = 4
$T283132 = -12						; size = 4
$T283122 = -8						; size = 4
_it$239993 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvSpecialUnitInfo@@@@YAXAAV?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvSpecialUnitInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T283132[ebp], ecx
	mov	edx, DWORD PTR $T283132[ebp]
	mov	DWORD PTR _it$239993[ebp], edx
	jmp	SHORT $LN3@deleteInfo@22
$LN2@deleteInfo@22:
	mov	eax, DWORD PTR _it$239993[ebp]
	add	eax, 4
	mov	DWORD PTR _it$239993[ebp], eax
$LN3@deleteInfo@22:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T283156[ebp], edx
	mov	eax, DWORD PTR $T283156[ebp]
	mov	DWORD PTR $T283122[ebp], eax
	mov	ecx, DWORD PTR _it$239993[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T283122[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@22

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$239993[ebp]
	mov	DWORD PTR $T283190[ebp], edx
	mov	eax, DWORD PTR $T283190[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T283186[ebp], ecx
	mov	edx, DWORD PTR $T283186[ebp]
	mov	DWORD PTR $T283185[ebp], edx
	cmp	DWORD PTR $T283185[ebp], 0
	je	SHORT $LN32@deleteInfo@22
	push	1
	mov	eax, DWORD PTR $T283185[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T283185[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@22
$LN32@deleteInfo@22:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@22:
	mov	ecx, DWORD PTR $T283190[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@22
$LN1@deleteInfo@22:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T283206[ebp], eax
	mov	ecx, DWORD PTR $T283206[ebp]
	mov	DWORD PTR $T283324[ebp], ecx
	mov	edx, DWORD PTR $T283324[ebp]
	mov	DWORD PTR $T283323[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T283222[ebp], ecx
	mov	edx, DWORD PTR $T283222[ebp]
	mov	DWORD PTR $T283326[ebp], edx
	mov	eax, DWORD PTR $T283326[ebp]
	mov	DWORD PTR $T283325[ebp], eax
	mov	ecx, DWORD PTR $T283323[ebp]
	push	ecx
	mov	edx, DWORD PTR $T283325[ebp]
	push	edx
	lea	eax, DWORD PTR $T283327[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@2@0@Z ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvSpecialUnitInfo@@@@YAXAAV?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvSpecialUnitInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@2@0@Z ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvSpecialistInfo@@@@YAXAAV?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T283442 = -56						; size = 4
$T283426 = -52						; size = 4
$T283547 = -48						; size = 4
$T283546 = -44						; size = 4
$T283545 = -40						; size = 4
$T283544 = -36						; size = 4
$T283543 = -32						; size = 4
$T283410 = -28						; size = 4
$T283406 = -24						; size = 4
$T283405 = -20						; size = 4
$T283376 = -16						; size = 4
$T283352 = -12						; size = 4
$T283342 = -8						; size = 4
_it$240155 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvSpecialistInfo@@@@YAXAAV?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvSpecialistInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T283352[ebp], ecx
	mov	edx, DWORD PTR $T283352[ebp]
	mov	DWORD PTR _it$240155[ebp], edx
	jmp	SHORT $LN3@deleteInfo@23
$LN2@deleteInfo@23:
	mov	eax, DWORD PTR _it$240155[ebp]
	add	eax, 4
	mov	DWORD PTR _it$240155[ebp], eax
$LN3@deleteInfo@23:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T283376[ebp], edx
	mov	eax, DWORD PTR $T283376[ebp]
	mov	DWORD PTR $T283342[ebp], eax
	mov	ecx, DWORD PTR _it$240155[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T283342[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@23

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$240155[ebp]
	mov	DWORD PTR $T283410[ebp], edx
	mov	eax, DWORD PTR $T283410[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T283406[ebp], ecx
	mov	edx, DWORD PTR $T283406[ebp]
	mov	DWORD PTR $T283405[ebp], edx
	cmp	DWORD PTR $T283405[ebp], 0
	je	SHORT $LN32@deleteInfo@23
	push	1
	mov	eax, DWORD PTR $T283405[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T283405[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@23
$LN32@deleteInfo@23:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@23:
	mov	ecx, DWORD PTR $T283410[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@23
$LN1@deleteInfo@23:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T283426[ebp], eax
	mov	ecx, DWORD PTR $T283426[ebp]
	mov	DWORD PTR $T283544[ebp], ecx
	mov	edx, DWORD PTR $T283544[ebp]
	mov	DWORD PTR $T283543[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T283442[ebp], ecx
	mov	edx, DWORD PTR $T283442[ebp]
	mov	DWORD PTR $T283546[ebp], edx
	mov	eax, DWORD PTR $T283546[ebp]
	mov	DWORD PTR $T283545[ebp], eax
	mov	ecx, DWORD PTR $T283543[ebp]
	push	ecx
	mov	edx, DWORD PTR $T283545[ebp]
	push	edx
	lea	eax, DWORD PTR $T283547[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@2@0@Z ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvSpecialistInfo@@@@YAXAAV?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvSpecialistInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@2@0@Z ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvActionInfo@@@@YAXAAV?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
$T283656 = -52						; size = 4
$T283640 = -48						; size = 4
$T283767 = -44						; size = 4
$T283766 = -40						; size = 4
$T283765 = -36						; size = 4
$T283764 = -32						; size = 4
$T283763 = -28						; size = 4
$T283624 = -24						; size = 4
$T283623 = -20						; size = 4
$T283596 = -16						; size = 4
$T283572 = -12						; size = 4
$T283562 = -8						; size = 4
_it$240317 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvActionInfo@@@@YAXAAV?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvActionInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T283572[ebp], ecx
	mov	edx, DWORD PTR $T283572[ebp]
	mov	DWORD PTR _it$240317[ebp], edx
	jmp	SHORT $LN3@deleteInfo@24
$LN2@deleteInfo@24:
	mov	eax, DWORD PTR _it$240317[ebp]
	add	eax, 4
	mov	DWORD PTR _it$240317[ebp], eax
$LN3@deleteInfo@24:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T283596[ebp], edx
	mov	eax, DWORD PTR $T283596[ebp]
	mov	DWORD PTR $T283562[ebp], eax
	mov	ecx, DWORD PTR _it$240317[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T283562[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@24

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$240317[ebp]
	mov	DWORD PTR $T283624[ebp], edx
	mov	eax, DWORD PTR $T283624[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T283623[ebp], ecx
	mov	edx, DWORD PTR $T283623[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR $T283624[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@24
$LN1@deleteInfo@24:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T283640[ebp], edx
	mov	eax, DWORD PTR $T283640[ebp]
	mov	DWORD PTR $T283764[ebp], eax
	mov	ecx, DWORD PTR $T283764[ebp]
	mov	DWORD PTR $T283763[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T283656[ebp], eax
	mov	ecx, DWORD PTR $T283656[ebp]
	mov	DWORD PTR $T283766[ebp], ecx
	mov	edx, DWORD PTR $T283766[ebp]
	mov	DWORD PTR $T283765[ebp], edx
	mov	eax, DWORD PTR $T283763[ebp]
	push	eax
	mov	ecx, DWORD PTR $T283765[ebp]
	push	ecx
	lea	edx, DWORD PTR $T283767[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@2@0@Z ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvActionInfo@@@@YAXAAV?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvActionInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@2@0@Z ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::erase
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$deleteInfoArray@VCvMissionInfo@@@@YAXAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$deleteInfoArray@VCvMissionInfo@@@@YAXAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@@Z$0
__ehfuncinfo$??$deleteInfoArray@VCvMissionInfo@@@@YAXAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$deleteInfoArray@VCvMissionInfo@@@@YAXAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
xdata$x	ENDS
;	COMDAT ??$deleteInfoArray@VCvMissionInfo@@@@YAXAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -188						; size = 4
$T283996 = -132						; size = 4
$T283980 = -128						; size = 4
$T284100 = -124						; size = 4
$T284099 = -120						; size = 4
$T284098 = -116						; size = 4
$T284097 = -112						; size = 4
$T284096 = -108						; size = 4
$T283964 = -104						; size = 4
$T283846 = -40						; size = 4
$T283953 = -36						; size = 4
$T283952 = -32						; size = 4
$T283810 = -28						; size = 4
$T283786 = -24						; size = 4
$T283776 = -20						; size = 4
_it$240479 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_array$ = 8						; size = 4
??$deleteInfoArray@VCvMissionInfo@@@@YAXAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvMissionInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$deleteInfoArray@VCvMissionInfo@@@@YAXAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 176				; 000000b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T283786[ebp], ecx
	mov	edx, DWORD PTR $T283786[ebp]
	mov	DWORD PTR _it$240479[ebp], edx
	jmp	SHORT $LN3@deleteInfo@25
$LN2@deleteInfo@25:
	mov	eax, DWORD PTR _it$240479[ebp]
	add	eax, 4
	mov	DWORD PTR _it$240479[ebp], eax
$LN3@deleteInfo@25:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T283810[ebp], edx
	mov	eax, DWORD PTR $T283810[ebp]
	mov	DWORD PTR $T283776[ebp], eax
	mov	ecx, DWORD PTR _it$240479[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T283776[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@25

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$240479[ebp]
	mov	DWORD PTR $T283964[ebp], edx
	mov	eax, DWORD PTR $T283964[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T283953[ebp], ecx
	mov	edx, DWORD PTR $T283953[ebp]
	mov	DWORD PTR $T283952[ebp], edx
	cmp	DWORD PTR $T283952[ebp], 0
	je	SHORT $LN32@deleteInfo@25
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T283952[ebp]
	add	eax, 472				; 000001d8H
	mov	DWORD PTR $T283846[ebp], eax
	mov	ecx, DWORD PTR $T283846[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T283952[ebp]
	call	??1CvHotKeyInfo@@QAE@XZ
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN35@deleteInfo@25
	mov	edx, DWORD PTR $T283952[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@25:
	mov	eax, DWORD PTR $T283952[ebp]
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN33@deleteInfo@25
$LN32@deleteInfo@25:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@25:
	mov	ecx, DWORD PTR $T283964[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@25
$LN1@deleteInfo@25:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T283980[ebp], eax
	mov	ecx, DWORD PTR $T283980[ebp]
	mov	DWORD PTR $T284097[ebp], ecx
	mov	edx, DWORD PTR $T284097[ebp]
	mov	DWORD PTR $T284096[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T283996[ebp], ecx
	mov	edx, DWORD PTR $T283996[ebp]
	mov	DWORD PTR $T284099[ebp], edx
	mov	eax, DWORD PTR $T284099[ebp]
	mov	DWORD PTR $T284098[ebp], eax
	mov	ecx, DWORD PTR $T284096[ebp]
	push	ecx
	mov	edx, DWORD PTR $T284098[ebp]
	push	edx
	lea	eax, DWORD PTR $T284100[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@2@0@Z ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::erase

; 58   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$deleteInfoArray@VCvMissionInfo@@@@YAXAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@@Z$0:
	mov	ecx, DWORD PTR $T283952[ebp]
	jmp	??1CvHotKeyInfo@@QAE@XZ
__ehhandler$??$deleteInfoArray@VCvMissionInfo@@@@YAXAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-180]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$deleteInfoArray@VCvMissionInfo@@@@YAXAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$deleteInfoArray@VCvMissionInfo@@@@YAXAAV?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvMissionInfo>
PUBLIC	?erase@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@2@0@Z ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvControlInfo@@@@YAXAAV?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -172						; size = 4
$T284330 = -116						; size = 4
$T284314 = -112						; size = 4
$T284435 = -108						; size = 4
$T284434 = -104						; size = 4
$T284433 = -100						; size = 4
$T284432 = -96						; size = 4
$T284431 = -92						; size = 4
$T284298 = -88						; size = 4
$T284289 = -24						; size = 4
$T284288 = -20						; size = 4
$T284156 = -16						; size = 4
$T284132 = -12						; size = 4
$T284122 = -8						; size = 4
_it$240641 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvControlInfo@@@@YAXAAV?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvControlInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T284132[ebp], ecx
	mov	edx, DWORD PTR $T284132[ebp]
	mov	DWORD PTR _it$240641[ebp], edx
	jmp	SHORT $LN3@deleteInfo@26
$LN2@deleteInfo@26:
	mov	eax, DWORD PTR _it$240641[ebp]
	add	eax, 4
	mov	DWORD PTR _it$240641[ebp], eax
$LN3@deleteInfo@26:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T284156[ebp], edx
	mov	eax, DWORD PTR $T284156[ebp]
	mov	DWORD PTR $T284122[ebp], eax
	mov	ecx, DWORD PTR _it$240641[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T284122[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@26

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$240641[ebp]
	mov	DWORD PTR $T284298[ebp], edx
	mov	eax, DWORD PTR $T284298[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T284289[ebp], ecx
	mov	edx, DWORD PTR $T284289[ebp]
	mov	DWORD PTR $T284288[ebp], edx
	cmp	DWORD PTR $T284288[ebp], 0
	je	SHORT $LN32@deleteInfo@26
	mov	ecx, DWORD PTR $T284288[ebp]
	call	??1CvHotKeyInfo@@QAE@XZ
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@deleteInfo@26
	mov	ecx, DWORD PTR $T284288[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@26:
	mov	edx, DWORD PTR $T284288[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@deleteInfo@26
$LN32@deleteInfo@26:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@26:
	mov	eax, DWORD PTR $T284298[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@26
$LN1@deleteInfo@26:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T284314[ebp], edx
	mov	eax, DWORD PTR $T284314[ebp]
	mov	DWORD PTR $T284432[ebp], eax
	mov	ecx, DWORD PTR $T284432[ebp]
	mov	DWORD PTR $T284431[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T284330[ebp], eax
	mov	ecx, DWORD PTR $T284330[ebp]
	mov	DWORD PTR $T284434[ebp], ecx
	mov	edx, DWORD PTR $T284434[ebp]
	mov	DWORD PTR $T284433[ebp], edx
	mov	eax, DWORD PTR $T284431[ebp]
	push	eax
	mov	ecx, DWORD PTR $T284433[ebp]
	push	ecx
	lea	edx, DWORD PTR $T284435[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@2@0@Z ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvControlInfo@@@@YAXAAV?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvControlInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@2@0@Z ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvCommandInfo@@@@YAXAAV?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -172						; size = 4
$T284658 = -116						; size = 4
$T284642 = -112						; size = 4
$T284763 = -108						; size = 4
$T284762 = -104						; size = 4
$T284761 = -100						; size = 4
$T284760 = -96						; size = 4
$T284759 = -92						; size = 4
$T284626 = -88						; size = 4
$T284617 = -24						; size = 4
$T284616 = -20						; size = 4
$T284484 = -16						; size = 4
$T284460 = -12						; size = 4
$T284450 = -8						; size = 4
_it$240803 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvCommandInfo@@@@YAXAAV?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvCommandInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T284460[ebp], ecx
	mov	edx, DWORD PTR $T284460[ebp]
	mov	DWORD PTR _it$240803[ebp], edx
	jmp	SHORT $LN3@deleteInfo@27
$LN2@deleteInfo@27:
	mov	eax, DWORD PTR _it$240803[ebp]
	add	eax, 4
	mov	DWORD PTR _it$240803[ebp], eax
$LN3@deleteInfo@27:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T284484[ebp], edx
	mov	eax, DWORD PTR $T284484[ebp]
	mov	DWORD PTR $T284450[ebp], eax
	mov	ecx, DWORD PTR _it$240803[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T284450[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@27

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$240803[ebp]
	mov	DWORD PTR $T284626[ebp], edx
	mov	eax, DWORD PTR $T284626[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T284617[ebp], ecx
	mov	edx, DWORD PTR $T284617[ebp]
	mov	DWORD PTR $T284616[ebp], edx
	cmp	DWORD PTR $T284616[ebp], 0
	je	SHORT $LN32@deleteInfo@27
	mov	ecx, DWORD PTR $T284616[ebp]
	call	??1CvHotKeyInfo@@QAE@XZ
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@deleteInfo@27
	mov	ecx, DWORD PTR $T284616[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@27:
	mov	edx, DWORD PTR $T284616[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@deleteInfo@27
$LN32@deleteInfo@27:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@27:
	mov	eax, DWORD PTR $T284626[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@27
$LN1@deleteInfo@27:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T284642[ebp], edx
	mov	eax, DWORD PTR $T284642[ebp]
	mov	DWORD PTR $T284760[ebp], eax
	mov	ecx, DWORD PTR $T284760[ebp]
	mov	DWORD PTR $T284759[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T284658[ebp], eax
	mov	ecx, DWORD PTR $T284658[ebp]
	mov	DWORD PTR $T284762[ebp], ecx
	mov	edx, DWORD PTR $T284762[ebp]
	mov	DWORD PTR $T284761[ebp], edx
	mov	eax, DWORD PTR $T284759[ebp]
	push	eax
	mov	ecx, DWORD PTR $T284761[ebp]
	push	ecx
	lea	edx, DWORD PTR $T284763[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@2@0@Z ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvCommandInfo@@@@YAXAAV?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvCommandInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@2@0@Z ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvAutomateInfo@@@@YAXAAV?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -172						; size = 4
$T284986 = -116						; size = 4
$T284970 = -112						; size = 4
$T285090 = -108						; size = 4
$T285089 = -104						; size = 4
$T285088 = -100						; size = 4
$T285087 = -96						; size = 4
$T285086 = -92						; size = 4
$T284954 = -88						; size = 4
$T284945 = -24						; size = 4
$T284944 = -20						; size = 4
$T284812 = -16						; size = 4
$T284788 = -12						; size = 4
$T284778 = -8						; size = 4
_it$240965 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvAutomateInfo@@@@YAXAAV?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvAutomateInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T284788[ebp], ecx
	mov	edx, DWORD PTR $T284788[ebp]
	mov	DWORD PTR _it$240965[ebp], edx
	jmp	SHORT $LN3@deleteInfo@28
$LN2@deleteInfo@28:
	mov	eax, DWORD PTR _it$240965[ebp]
	add	eax, 4
	mov	DWORD PTR _it$240965[ebp], eax
$LN3@deleteInfo@28:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T284812[ebp], edx
	mov	eax, DWORD PTR $T284812[ebp]
	mov	DWORD PTR $T284778[ebp], eax
	mov	ecx, DWORD PTR _it$240965[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T284778[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@28

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$240965[ebp]
	mov	DWORD PTR $T284954[ebp], edx
	mov	eax, DWORD PTR $T284954[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T284945[ebp], ecx
	mov	edx, DWORD PTR $T284945[ebp]
	mov	DWORD PTR $T284944[ebp], edx
	cmp	DWORD PTR $T284944[ebp], 0
	je	SHORT $LN32@deleteInfo@28
	mov	ecx, DWORD PTR $T284944[ebp]
	call	??1CvHotKeyInfo@@QAE@XZ
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@deleteInfo@28
	mov	ecx, DWORD PTR $T284944[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@28:
	mov	edx, DWORD PTR $T284944[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@deleteInfo@28
$LN32@deleteInfo@28:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@28:
	mov	eax, DWORD PTR $T284954[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@28
$LN1@deleteInfo@28:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T284970[ebp], edx
	mov	eax, DWORD PTR $T284970[ebp]
	mov	DWORD PTR $T285087[ebp], eax
	mov	ecx, DWORD PTR $T285087[ebp]
	mov	DWORD PTR $T285086[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T284986[ebp], eax
	mov	ecx, DWORD PTR $T284986[ebp]
	mov	DWORD PTR $T285089[ebp], ecx
	mov	edx, DWORD PTR $T285089[ebp]
	mov	DWORD PTR $T285088[ebp], edx
	mov	eax, DWORD PTR $T285086[ebp]
	push	eax
	mov	ecx, DWORD PTR $T285088[ebp]
	push	ecx
	lea	edx, DWORD PTR $T285090[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@2@0@Z ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvAutomateInfo@@@@YAXAAV?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvAutomateInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@2@0@Z ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvBaseInfo@@@@YAXAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -148						; size = 4
$T285268 = -92						; size = 4
$T285252 = -88						; size = 4
$T285373 = -84						; size = 4
$T285372 = -80						; size = 4
$T285371 = -76						; size = 4
$T285370 = -72						; size = 4
$T285369 = -68						; size = 4
$T285236 = -64						; size = 4
$T285229 = -24						; size = 4
$T285228 = -20						; size = 4
$T285140 = -16						; size = 4
$T285116 = -12						; size = 4
$T285106 = -8						; size = 4
_it$241127 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvBaseInfo@@@@YAXAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvBaseInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T285116[ebp], ecx
	mov	edx, DWORD PTR $T285116[ebp]
	mov	DWORD PTR _it$241127[ebp], edx
	jmp	SHORT $LN3@deleteInfo@29
$LN2@deleteInfo@29:
	mov	eax, DWORD PTR _it$241127[ebp]
	add	eax, 4
	mov	DWORD PTR _it$241127[ebp], eax
$LN3@deleteInfo@29:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T285140[ebp], edx
	mov	eax, DWORD PTR $T285140[ebp]
	mov	DWORD PTR $T285106[ebp], eax
	mov	ecx, DWORD PTR _it$241127[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T285106[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@29

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$241127[ebp]
	mov	DWORD PTR $T285236[ebp], edx
	mov	eax, DWORD PTR $T285236[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T285229[ebp], ecx
	mov	edx, DWORD PTR $T285229[ebp]
	mov	DWORD PTR $T285228[ebp], edx
	cmp	DWORD PTR $T285228[ebp], 0
	je	SHORT $LN32@deleteInfo@29
	mov	ecx, DWORD PTR $T285228[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@deleteInfo@29
	mov	ecx, DWORD PTR $T285228[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@29:
	mov	edx, DWORD PTR $T285228[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@deleteInfo@29
$LN32@deleteInfo@29:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@29:
	mov	eax, DWORD PTR $T285236[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@29
$LN1@deleteInfo@29:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T285252[ebp], edx
	mov	eax, DWORD PTR $T285252[ebp]
	mov	DWORD PTR $T285370[ebp], eax
	mov	ecx, DWORD PTR $T285370[ebp]
	mov	DWORD PTR $T285369[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T285268[ebp], eax
	mov	ecx, DWORD PTR $T285268[ebp]
	mov	DWORD PTR $T285372[ebp], ecx
	mov	edx, DWORD PTR $T285372[ebp]
	mov	DWORD PTR $T285371[ebp], edx
	mov	eax, DWORD PTR $T285369[ebp]
	push	eax
	mov	ecx, DWORD PTR $T285371[ebp]
	push	ecx
	lea	edx, DWORD PTR $T285373[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@2@0@Z ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvBaseInfo@@@@YAXAAV?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvBaseInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@2@0@Z ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvGameOptionInfo@@@@YAXAAV?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -148						; size = 4
$T285558 = -92						; size = 4
$T285542 = -88						; size = 4
$T285663 = -84						; size = 4
$T285662 = -80						; size = 4
$T285661 = -76						; size = 4
$T285660 = -72						; size = 4
$T285659 = -68						; size = 4
$T285526 = -64						; size = 4
$T285517 = -24						; size = 4
$T285516 = -20						; size = 4
$T285422 = -16						; size = 4
$T285398 = -12						; size = 4
$T285388 = -8						; size = 4
_it$241289 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvGameOptionInfo@@@@YAXAAV?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvGameOptionInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T285398[ebp], ecx
	mov	edx, DWORD PTR $T285398[ebp]
	mov	DWORD PTR _it$241289[ebp], edx
	jmp	SHORT $LN3@deleteInfo@30
$LN2@deleteInfo@30:
	mov	eax, DWORD PTR _it$241289[ebp]
	add	eax, 4
	mov	DWORD PTR _it$241289[ebp], eax
$LN3@deleteInfo@30:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T285422[ebp], edx
	mov	eax, DWORD PTR $T285422[ebp]
	mov	DWORD PTR $T285388[ebp], eax
	mov	ecx, DWORD PTR _it$241289[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T285388[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@30

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$241289[ebp]
	mov	DWORD PTR $T285526[ebp], edx
	mov	eax, DWORD PTR $T285526[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T285517[ebp], ecx
	mov	edx, DWORD PTR $T285517[ebp]
	mov	DWORD PTR $T285516[ebp], edx
	cmp	DWORD PTR $T285516[ebp], 0
	je	SHORT $LN32@deleteInfo@30
	mov	ecx, DWORD PTR $T285516[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@deleteInfo@30
	mov	ecx, DWORD PTR $T285516[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@30:
	mov	edx, DWORD PTR $T285516[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@deleteInfo@30
$LN32@deleteInfo@30:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@30:
	mov	eax, DWORD PTR $T285526[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@30
$LN1@deleteInfo@30:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T285542[ebp], edx
	mov	eax, DWORD PTR $T285542[ebp]
	mov	DWORD PTR $T285660[ebp], eax
	mov	ecx, DWORD PTR $T285660[ebp]
	mov	DWORD PTR $T285659[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T285558[ebp], eax
	mov	ecx, DWORD PTR $T285558[ebp]
	mov	DWORD PTR $T285662[ebp], ecx
	mov	edx, DWORD PTR $T285662[ebp]
	mov	DWORD PTR $T285661[ebp], edx
	mov	eax, DWORD PTR $T285659[ebp]
	push	eax
	mov	ecx, DWORD PTR $T285661[ebp]
	push	ecx
	lea	edx, DWORD PTR $T285663[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@2@0@Z ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvGameOptionInfo@@@@YAXAAV?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvGameOptionInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@2@0@Z ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvMPOptionInfo@@@@YAXAAV?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -148						; size = 4
$T285848 = -92						; size = 4
$T285832 = -88						; size = 4
$T285952 = -84						; size = 4
$T285951 = -80						; size = 4
$T285950 = -76						; size = 4
$T285949 = -72						; size = 4
$T285948 = -68						; size = 4
$T285816 = -64						; size = 4
$T285807 = -24						; size = 4
$T285806 = -20						; size = 4
$T285712 = -16						; size = 4
$T285688 = -12						; size = 4
$T285678 = -8						; size = 4
_it$241451 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvMPOptionInfo@@@@YAXAAV?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvMPOptionInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T285688[ebp], ecx
	mov	edx, DWORD PTR $T285688[ebp]
	mov	DWORD PTR _it$241451[ebp], edx
	jmp	SHORT $LN3@deleteInfo@31
$LN2@deleteInfo@31:
	mov	eax, DWORD PTR _it$241451[ebp]
	add	eax, 4
	mov	DWORD PTR _it$241451[ebp], eax
$LN3@deleteInfo@31:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T285712[ebp], edx
	mov	eax, DWORD PTR $T285712[ebp]
	mov	DWORD PTR $T285678[ebp], eax
	mov	ecx, DWORD PTR _it$241451[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T285678[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@31

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$241451[ebp]
	mov	DWORD PTR $T285816[ebp], edx
	mov	eax, DWORD PTR $T285816[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T285807[ebp], ecx
	mov	edx, DWORD PTR $T285807[ebp]
	mov	DWORD PTR $T285806[ebp], edx
	cmp	DWORD PTR $T285806[ebp], 0
	je	SHORT $LN32@deleteInfo@31
	mov	ecx, DWORD PTR $T285806[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@deleteInfo@31
	mov	ecx, DWORD PTR $T285806[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@31:
	mov	edx, DWORD PTR $T285806[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@deleteInfo@31
$LN32@deleteInfo@31:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@31:
	mov	eax, DWORD PTR $T285816[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@31
$LN1@deleteInfo@31:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T285832[ebp], edx
	mov	eax, DWORD PTR $T285832[ebp]
	mov	DWORD PTR $T285949[ebp], eax
	mov	ecx, DWORD PTR $T285949[ebp]
	mov	DWORD PTR $T285948[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T285848[ebp], eax
	mov	ecx, DWORD PTR $T285848[ebp]
	mov	DWORD PTR $T285951[ebp], ecx
	mov	edx, DWORD PTR $T285951[ebp]
	mov	DWORD PTR $T285950[ebp], edx
	mov	eax, DWORD PTR $T285948[ebp]
	push	eax
	mov	ecx, DWORD PTR $T285950[ebp]
	push	ecx
	lea	edx, DWORD PTR $T285952[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@2@0@Z ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvMPOptionInfo@@@@YAXAAV?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvMPOptionInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@2@0@Z ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvPlayerOptionInfo@@@@YAXAAV?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -148						; size = 4
$T286138 = -92						; size = 4
$T286122 = -88						; size = 4
$T286243 = -84						; size = 4
$T286242 = -80						; size = 4
$T286241 = -76						; size = 4
$T286240 = -72						; size = 4
$T286239 = -68						; size = 4
$T286106 = -64						; size = 4
$T286097 = -24						; size = 4
$T286096 = -20						; size = 4
$T286002 = -16						; size = 4
$T285978 = -12						; size = 4
$T285968 = -8						; size = 4
_it$241613 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvPlayerOptionInfo@@@@YAXAAV?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvPlayerOptionInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T285978[ebp], ecx
	mov	edx, DWORD PTR $T285978[ebp]
	mov	DWORD PTR _it$241613[ebp], edx
	jmp	SHORT $LN3@deleteInfo@32
$LN2@deleteInfo@32:
	mov	eax, DWORD PTR _it$241613[ebp]
	add	eax, 4
	mov	DWORD PTR _it$241613[ebp], eax
$LN3@deleteInfo@32:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T286002[ebp], edx
	mov	eax, DWORD PTR $T286002[ebp]
	mov	DWORD PTR $T285968[ebp], eax
	mov	ecx, DWORD PTR _it$241613[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T285968[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@32

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$241613[ebp]
	mov	DWORD PTR $T286106[ebp], edx
	mov	eax, DWORD PTR $T286106[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T286097[ebp], ecx
	mov	edx, DWORD PTR $T286097[ebp]
	mov	DWORD PTR $T286096[ebp], edx
	cmp	DWORD PTR $T286096[ebp], 0
	je	SHORT $LN32@deleteInfo@32
	mov	ecx, DWORD PTR $T286096[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@deleteInfo@32
	mov	ecx, DWORD PTR $T286096[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@32:
	mov	edx, DWORD PTR $T286096[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@deleteInfo@32
$LN32@deleteInfo@32:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@32:
	mov	eax, DWORD PTR $T286106[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@32
$LN1@deleteInfo@32:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T286122[ebp], edx
	mov	eax, DWORD PTR $T286122[ebp]
	mov	DWORD PTR $T286240[ebp], eax
	mov	ecx, DWORD PTR $T286240[ebp]
	mov	DWORD PTR $T286239[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T286138[ebp], eax
	mov	ecx, DWORD PTR $T286138[ebp]
	mov	DWORD PTR $T286242[ebp], ecx
	mov	edx, DWORD PTR $T286242[ebp]
	mov	DWORD PTR $T286241[ebp], edx
	mov	eax, DWORD PTR $T286239[ebp]
	push	eax
	mov	ecx, DWORD PTR $T286241[ebp]
	push	ecx
	lea	edx, DWORD PTR $T286243[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@2@0@Z ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvPlayerOptionInfo@@@@YAXAAV?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvPlayerOptionInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@2@0@Z ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvYieldInfo@@@@YAXAAV?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -148						; size = 4
$T286428 = -92						; size = 4
$T286412 = -88						; size = 4
$T286533 = -84						; size = 4
$T286532 = -80						; size = 4
$T286531 = -76						; size = 4
$T286530 = -72						; size = 4
$T286529 = -68						; size = 4
$T286396 = -64						; size = 4
$T286387 = -24						; size = 4
$T286386 = -20						; size = 4
$T286292 = -16						; size = 4
$T286268 = -12						; size = 4
$T286258 = -8						; size = 4
_it$241775 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvYieldInfo@@@@YAXAAV?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvYieldInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T286268[ebp], ecx
	mov	edx, DWORD PTR $T286268[ebp]
	mov	DWORD PTR _it$241775[ebp], edx
	jmp	SHORT $LN3@deleteInfo@33
$LN2@deleteInfo@33:
	mov	eax, DWORD PTR _it$241775[ebp]
	add	eax, 4
	mov	DWORD PTR _it$241775[ebp], eax
$LN3@deleteInfo@33:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T286292[ebp], edx
	mov	eax, DWORD PTR $T286292[ebp]
	mov	DWORD PTR $T286258[ebp], eax
	mov	ecx, DWORD PTR _it$241775[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T286258[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@33

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$241775[ebp]
	mov	DWORD PTR $T286396[ebp], edx
	mov	eax, DWORD PTR $T286396[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T286387[ebp], ecx
	mov	edx, DWORD PTR $T286387[ebp]
	mov	DWORD PTR $T286386[ebp], edx
	cmp	DWORD PTR $T286386[ebp], 0
	je	SHORT $LN32@deleteInfo@33
	mov	ecx, DWORD PTR $T286386[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@deleteInfo@33
	mov	ecx, DWORD PTR $T286386[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@33:
	mov	edx, DWORD PTR $T286386[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@deleteInfo@33
$LN32@deleteInfo@33:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@33:
	mov	eax, DWORD PTR $T286396[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@33
$LN1@deleteInfo@33:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T286412[ebp], edx
	mov	eax, DWORD PTR $T286412[ebp]
	mov	DWORD PTR $T286530[ebp], eax
	mov	ecx, DWORD PTR $T286530[ebp]
	mov	DWORD PTR $T286529[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T286428[ebp], eax
	mov	ecx, DWORD PTR $T286428[ebp]
	mov	DWORD PTR $T286532[ebp], ecx
	mov	edx, DWORD PTR $T286532[ebp]
	mov	DWORD PTR $T286531[ebp], edx
	mov	eax, DWORD PTR $T286529[ebp]
	push	eax
	mov	ecx, DWORD PTR $T286531[ebp]
	push	ecx
	lea	edx, DWORD PTR $T286533[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@2@0@Z ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvYieldInfo@@@@YAXAAV?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvYieldInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@2@0@Z ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvTerrainInfo@@@@YAXAAV?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T286648 = -56						; size = 4
$T286632 = -52						; size = 4
$T286752 = -48						; size = 4
$T286751 = -44						; size = 4
$T286750 = -40						; size = 4
$T286749 = -36						; size = 4
$T286748 = -32						; size = 4
$T286616 = -28						; size = 4
$T286612 = -24						; size = 4
$T286611 = -20						; size = 4
$T286582 = -16						; size = 4
$T286558 = -12						; size = 4
$T286548 = -8						; size = 4
_it$241937 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvTerrainInfo@@@@YAXAAV?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvTerrainInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T286558[ebp], ecx
	mov	edx, DWORD PTR $T286558[ebp]
	mov	DWORD PTR _it$241937[ebp], edx
	jmp	SHORT $LN3@deleteInfo@34
$LN2@deleteInfo@34:
	mov	eax, DWORD PTR _it$241937[ebp]
	add	eax, 4
	mov	DWORD PTR _it$241937[ebp], eax
$LN3@deleteInfo@34:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T286582[ebp], edx
	mov	eax, DWORD PTR $T286582[ebp]
	mov	DWORD PTR $T286548[ebp], eax
	mov	ecx, DWORD PTR _it$241937[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T286548[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@34

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$241937[ebp]
	mov	DWORD PTR $T286616[ebp], edx
	mov	eax, DWORD PTR $T286616[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T286612[ebp], ecx
	mov	edx, DWORD PTR $T286612[ebp]
	mov	DWORD PTR $T286611[ebp], edx
	cmp	DWORD PTR $T286611[ebp], 0
	je	SHORT $LN32@deleteInfo@34
	push	1
	mov	eax, DWORD PTR $T286611[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T286611[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@34
$LN32@deleteInfo@34:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@34:
	mov	ecx, DWORD PTR $T286616[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@34
$LN1@deleteInfo@34:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T286632[ebp], eax
	mov	ecx, DWORD PTR $T286632[ebp]
	mov	DWORD PTR $T286749[ebp], ecx
	mov	edx, DWORD PTR $T286749[ebp]
	mov	DWORD PTR $T286748[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T286648[ebp], ecx
	mov	edx, DWORD PTR $T286648[ebp]
	mov	DWORD PTR $T286751[ebp], edx
	mov	eax, DWORD PTR $T286751[ebp]
	mov	DWORD PTR $T286750[ebp], eax
	mov	ecx, DWORD PTR $T286748[ebp]
	push	ecx
	mov	edx, DWORD PTR $T286750[ebp]
	push	edx
	lea	eax, DWORD PTR $T286752[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@2@0@Z ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvTerrainInfo@@@@YAXAAV?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvTerrainInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@2@0@Z ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvFeatureInfo@@@@YAXAAV?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T286868 = -56						; size = 4
$T286852 = -52						; size = 4
$T286973 = -48						; size = 4
$T286972 = -44						; size = 4
$T286971 = -40						; size = 4
$T286970 = -36						; size = 4
$T286969 = -32						; size = 4
$T286836 = -28						; size = 4
$T286832 = -24						; size = 4
$T286831 = -20						; size = 4
$T286802 = -16						; size = 4
$T286778 = -12						; size = 4
$T286768 = -8						; size = 4
_it$242099 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvFeatureInfo@@@@YAXAAV?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvFeatureInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T286778[ebp], ecx
	mov	edx, DWORD PTR $T286778[ebp]
	mov	DWORD PTR _it$242099[ebp], edx
	jmp	SHORT $LN3@deleteInfo@35
$LN2@deleteInfo@35:
	mov	eax, DWORD PTR _it$242099[ebp]
	add	eax, 4
	mov	DWORD PTR _it$242099[ebp], eax
$LN3@deleteInfo@35:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T286802[ebp], edx
	mov	eax, DWORD PTR $T286802[ebp]
	mov	DWORD PTR $T286768[ebp], eax
	mov	ecx, DWORD PTR _it$242099[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T286768[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@35

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$242099[ebp]
	mov	DWORD PTR $T286836[ebp], edx
	mov	eax, DWORD PTR $T286836[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T286832[ebp], ecx
	mov	edx, DWORD PTR $T286832[ebp]
	mov	DWORD PTR $T286831[ebp], edx
	cmp	DWORD PTR $T286831[ebp], 0
	je	SHORT $LN32@deleteInfo@35
	push	1
	mov	eax, DWORD PTR $T286831[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T286831[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@35
$LN32@deleteInfo@35:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@35:
	mov	ecx, DWORD PTR $T286836[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@35
$LN1@deleteInfo@35:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T286852[ebp], eax
	mov	ecx, DWORD PTR $T286852[ebp]
	mov	DWORD PTR $T286970[ebp], ecx
	mov	edx, DWORD PTR $T286970[ebp]
	mov	DWORD PTR $T286969[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T286868[ebp], ecx
	mov	edx, DWORD PTR $T286868[ebp]
	mov	DWORD PTR $T286972[ebp], edx
	mov	eax, DWORD PTR $T286972[ebp]
	mov	DWORD PTR $T286971[ebp], eax
	mov	ecx, DWORD PTR $T286969[ebp]
	push	ecx
	mov	edx, DWORD PTR $T286971[ebp]
	push	edx
	lea	eax, DWORD PTR $T286973[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@2@0@Z ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvFeatureInfo@@@@YAXAAV?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvFeatureInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@2@0@Z ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvResourceClassInfo@@@@YAXAAV?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -148						; size = 4
$T287158 = -92						; size = 4
$T287142 = -88						; size = 4
$T287263 = -84						; size = 4
$T287262 = -80						; size = 4
$T287261 = -76						; size = 4
$T287260 = -72						; size = 4
$T287259 = -68						; size = 4
$T287126 = -64						; size = 4
$T287117 = -24						; size = 4
$T287116 = -20						; size = 4
$T287022 = -16						; size = 4
$T286998 = -12						; size = 4
$T286988 = -8						; size = 4
_it$242261 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvResourceClassInfo@@@@YAXAAV?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvResourceClassInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T286998[ebp], ecx
	mov	edx, DWORD PTR $T286998[ebp]
	mov	DWORD PTR _it$242261[ebp], edx
	jmp	SHORT $LN3@deleteInfo@36
$LN2@deleteInfo@36:
	mov	eax, DWORD PTR _it$242261[ebp]
	add	eax, 4
	mov	DWORD PTR _it$242261[ebp], eax
$LN3@deleteInfo@36:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T287022[ebp], edx
	mov	eax, DWORD PTR $T287022[ebp]
	mov	DWORD PTR $T286988[ebp], eax
	mov	ecx, DWORD PTR _it$242261[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T286988[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@36

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$242261[ebp]
	mov	DWORD PTR $T287126[ebp], edx
	mov	eax, DWORD PTR $T287126[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T287117[ebp], ecx
	mov	edx, DWORD PTR $T287117[ebp]
	mov	DWORD PTR $T287116[ebp], edx
	cmp	DWORD PTR $T287116[ebp], 0
	je	SHORT $LN32@deleteInfo@36
	mov	ecx, DWORD PTR $T287116[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@deleteInfo@36
	mov	ecx, DWORD PTR $T287116[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@36:
	mov	edx, DWORD PTR $T287116[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@deleteInfo@36
$LN32@deleteInfo@36:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@36:
	mov	eax, DWORD PTR $T287126[ebp]
	mov	DWORD PTR [eax], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@36
$LN1@deleteInfo@36:

; 56   : 
; 57   : 	array.clear();

	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T287142[ebp], edx
	mov	eax, DWORD PTR $T287142[ebp]
	mov	DWORD PTR $T287260[ebp], eax
	mov	ecx, DWORD PTR $T287260[ebp]
	mov	DWORD PTR $T287259[ebp], ecx
	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T287158[ebp], eax
	mov	ecx, DWORD PTR $T287158[ebp]
	mov	DWORD PTR $T287262[ebp], ecx
	mov	edx, DWORD PTR $T287262[ebp]
	mov	DWORD PTR $T287261[ebp], edx
	mov	eax, DWORD PTR $T287259[ebp]
	push	eax
	mov	ecx, DWORD PTR $T287261[ebp]
	push	ecx
	lea	edx, DWORD PTR $T287263[ebp]
	push	edx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@2@0@Z ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvResourceClassInfo@@@@YAXAAV?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvResourceClassInfo>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@2@0@Z ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$deleteInfoArray@VCvResourceInfo@@@@YAXAAV?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv145 = -112						; size = 4
$T287378 = -56						; size = 4
$T287362 = -52						; size = 4
$T287483 = -48						; size = 4
$T287482 = -44						; size = 4
$T287481 = -40						; size = 4
$T287480 = -36						; size = 4
$T287479 = -32						; size = 4
$T287346 = -28						; size = 4
$T287342 = -24						; size = 4
$T287341 = -20						; size = 4
$T287312 = -16						; size = 4
$T287288 = -12						; size = 4
$T287278 = -8						; size = 4
_it$242423 = -4						; size = 4
_array$ = 8						; size = 4
??$deleteInfoArray@VCvResourceInfo@@@@YAXAAV?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvResourceInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T287288[ebp], ecx
	mov	edx, DWORD PTR $T287288[ebp]
	mov	DWORD PTR _it$242423[ebp], edx
	jmp	SHORT $LN3@deleteInfo@37
$LN2@deleteInfo@37:
	mov	eax, DWORD PTR _it$242423[ebp]
	add	eax, 4
	mov	DWORD PTR _it$242423[ebp], eax
$LN3@deleteInfo@37:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T287312[ebp], edx
	mov	eax, DWORD PTR $T287312[ebp]
	mov	DWORD PTR $T287278[ebp], eax
	mov	ecx, DWORD PTR _it$242423[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T287278[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@deleteInfo@37

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$242423[ebp]
	mov	DWORD PTR $T287346[ebp], edx
	mov	eax, DWORD PTR $T287346[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T287342[ebp], ecx
	mov	edx, DWORD PTR $T287342[ebp]
	mov	DWORD PTR $T287341[ebp], edx
	cmp	DWORD PTR $T287341[ebp], 0
	je	SHORT $LN32@deleteInfo@37
	push	1
	mov	eax, DWORD PTR $T287341[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T287341[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@deleteInfo@37
$LN32@deleteInfo@37:
	mov	DWORD PTR tv145[ebp], 0
$LN33@deleteInfo@37:
	mov	ecx, DWORD PTR $T287346[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	SHORT $LN2@deleteInfo@37
$LN1@deleteInfo@37:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T287362[ebp], eax
	mov	ecx, DWORD PTR $T287362[ebp]
	mov	DWORD PTR $T287480[ebp], ecx
	mov	edx, DWORD PTR $T287480[ebp]
	mov	DWORD PTR $T287479[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T287378[ebp], ecx
	mov	edx, DWORD PTR $T287378[ebp]
	mov	DWORD PTR $T287482[ebp], edx
	mov	eax, DWORD PTR $T287482[ebp]
	mov	DWORD PTR $T287481[ebp], eax
	mov	ecx, DWORD PTR $T287479[ebp]
	push	ecx
	mov	edx, DWORD PTR $T287481[ebp]
	push	edx
	lea	eax, DWORD PTR $T287483[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@2@0@Z ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::erase

; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$deleteInfoArray@VCvResourceInfo@@@@YAXAAV?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvResourceInfo>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAE@XZ ; std::_Vector_val<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::~_Vector_val<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >
PUBLIC	?erase@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@2@0@Z ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::erase
PUBLIC	?_Tidy@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXXZ ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Tidy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$deleteInfoArray@VCvEntityEventInfo@@@@YAXAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$deleteInfoArray@VCvEntityEventInfo@@@@YAXAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$deleteInfoArray@VCvEntityEventInfo@@@@YAXAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@@Z$2
__ehfuncinfo$??$deleteInfoArray@VCvEntityEventInfo@@@@YAXAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$deleteInfoArray@VCvEntityEventInfo@@@@YAXAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
xdata$x	ENDS
;	COMDAT ??$deleteInfoArray@VCvEntityEventInfo@@@@YAXAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@@Z
_TEXT	SEGMENT
tv143 = -196						; size = 4
$T287773 = -140						; size = 4
$T287757 = -136						; size = 4
$T287875 = -132						; size = 4
$T287874 = -128						; size = 4
$T287873 = -124						; size = 4
$T287872 = -120						; size = 4
$T287890 = -116						; size = 4
$T287741 = -112						; size = 4
$T287649 = -72						; size = 4
$T287726 = -36						; size = 4
$T287725 = -32						; size = 4
$T287532 = -28						; size = 4
$T287508 = -24						; size = 4
$T287498 = -20						; size = 4
_it$242588 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_array$ = 8						; size = 4
??$deleteInfoArray@VCvEntityEventInfo@@@@YAXAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@@Z PROC ; deleteInfoArray<CvEntityEventInfo>, COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$deleteInfoArray@VCvEntityEventInfo@@@@YAXAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 184				; 000000b8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 52   : 	for(std::vector<T*>::iterator it = array.begin(); it != array.end(); ++it)

	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T287508[ebp], ecx
	mov	edx, DWORD PTR $T287508[ebp]
	mov	DWORD PTR _it$242588[ebp], edx
	jmp	SHORT $LN3@deleteInfo@38
$LN2@deleteInfo@38:
	mov	eax, DWORD PTR _it$242588[ebp]
	add	eax, 4
	mov	DWORD PTR _it$242588[ebp], eax
$LN3@deleteInfo@38:
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T287532[ebp], edx
	mov	eax, DWORD PTR $T287532[ebp]
	mov	DWORD PTR $T287498[ebp], eax
	mov	ecx, DWORD PTR _it$242588[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T287498[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	$LN1@deleteInfo@38

; 53   : 	{
; 54   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$242588[ebp]
	mov	DWORD PTR $T287741[ebp], edx
	mov	eax, DWORD PTR $T287741[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T287726[ebp], ecx
	mov	edx, DWORD PTR $T287726[ebp]
	mov	DWORD PTR $T287725[ebp], edx
	cmp	DWORD PTR $T287725[ebp], 0
	je	SHORT $LN32@deleteInfo@38
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T287725[ebp]
	add	eax, 260				; 00000104H
	mov	DWORD PTR $T287649[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T287649[ebp]
	call	?_Tidy@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXXZ ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T287725[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN35@deleteInfo@38
	mov	edx, DWORD PTR $T287725[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@deleteInfo@38:
	mov	eax, DWORD PTR $T287725[ebp]
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN33@deleteInfo@38
$LN32@deleteInfo@38:
	mov	DWORD PTR tv143[ebp], 0
$LN33@deleteInfo@38:
	mov	ecx, DWORD PTR $T287741[ebp]
	mov	DWORD PTR [ecx], 0

; 55   : 	}

	jmp	$LN2@deleteInfo@38
$LN1@deleteInfo@38:

; 56   : 
; 57   : 	array.clear();

	mov	edx, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T287757[ebp], eax
	mov	ecx, DWORD PTR $T287757[ebp]
	mov	DWORD PTR $T287872[ebp], ecx
	mov	edx, DWORD PTR $T287872[ebp]
	mov	DWORD PTR $T287890[ebp], edx
	mov	eax, DWORD PTR _array$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T287773[ebp], ecx
	mov	edx, DWORD PTR $T287773[ebp]
	mov	DWORD PTR $T287874[ebp], edx
	mov	eax, DWORD PTR $T287874[ebp]
	mov	DWORD PTR $T287873[ebp], eax
	mov	ecx, DWORD PTR $T287890[ebp]
	push	ecx
	mov	edx, DWORD PTR $T287873[ebp]
	push	edx
	lea	eax, DWORD PTR $T287875[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?erase@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@2@0@Z ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::erase

; 58   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$deleteInfoArray@VCvEntityEventInfo@@@@YAXAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@@Z$0:
	mov	ecx, DWORD PTR $T287725[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??$deleteInfoArray@VCvEntityEventInfo@@@@YAXAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@@Z$2:
	mov	ecx, DWORD PTR $T287649[ebp]
	jmp	??1?$_Vector_val@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAE@XZ
__ehhandler$??$deleteInfoArray@VCvEntityEventInfo@@@@YAXAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-188]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$deleteInfoArray@VCvEntityEventInfo@@@@YAXAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$deleteInfoArray@VCvEntityEventInfo@@@@YAXAAV?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@@Z ENDP ; deleteInfoArray<CvEntityEventInfo>
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R0?AVbad_alloc@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
xdata$x	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_Ebad_alloc@std@@UAEPAXI@Z ; std::bad_alloc::`vftable'
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	ENDS
;	COMDAT ??$_Allocate@PAVCvInterfaceModeInfo@@@std@@YAPAPAVCvInterfaceModeInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T287903 = -16						; size = 4
$T287899 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvInterfaceModeInfo@@@std@@YAPAPAVCvInterfaceModeInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvInterfaceModeInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T287903[ebp], 0
	lea	eax, DWORD PTR $T287903[ebp]
	push	eax
	lea	ecx, DWORD PTR $T287899[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T287899[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T287899[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvInterfaceModeInfo@@@std@@YAPAPAVCvInterfaceModeInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvInterfaceModeInfo *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@5
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvColorInfo@@@std@@YAPAPAVCvColorInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T287917 = -16						; size = 4
$T287913 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvColorInfo@@@std@@YAPAPAVCvColorInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvColorInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T287917[ebp], 0
	lea	eax, DWORD PTR $T287917[ebp]
	push	eax
	lea	ecx, DWORD PTR $T287913[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T287913[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T287913[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvColorInfo@@@std@@YAPAPAVCvColorInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvColorInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvPlayerColorInfo@@@std@@YAPAPAVCvPlayerColorInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T287924 = -16						; size = 4
$T287920 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvPlayerColorInfo@@@std@@YAPAPAVCvPlayerColorInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvPlayerColorInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@3
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T287924[ebp], 0
	lea	eax, DWORD PTR $T287924[ebp]
	push	eax
	lea	ecx, DWORD PTR $T287920[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T287920[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T287920[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@3:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvPlayerColorInfo@@@std@@YAPAPAVCvPlayerColorInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvPlayerColorInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvTerrainInfo@@@std@@YAPAPAVCvTerrainInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T287931 = -16						; size = 4
$T287927 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvTerrainInfo@@@std@@YAPAPAVCvTerrainInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvTerrainInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@4
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T287931[ebp], 0
	lea	eax, DWORD PTR $T287931[ebp]
	push	eax
	lea	ecx, DWORD PTR $T287927[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T287927[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T287927[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@4:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvTerrainInfo@@@std@@YAPAPAVCvTerrainInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvTerrainInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvYieldInfo@@@std@@YAPAPAVCvYieldInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T287938 = -16						; size = 4
$T287934 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvYieldInfo@@@std@@YAPAPAVCvYieldInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvYieldInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@5
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T287938[ebp], 0
	lea	eax, DWORD PTR $T287938[ebp]
	push	eax
	lea	ecx, DWORD PTR $T287934[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T287934[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T287934[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@5:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvYieldInfo@@@std@@YAPAPAVCvYieldInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvYieldInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvRouteInfo@@@std@@YAPAPAVCvRouteInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T287945 = -16						; size = 4
$T287941 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvRouteInfo@@@std@@YAPAPAVCvRouteInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvRouteInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@6

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@6
$LN3@Allocate@6:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@6

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T287945[ebp], 0
	lea	eax, DWORD PTR $T287945[ebp]
	push	eax
	lea	ecx, DWORD PTR $T287941[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T287941[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T287941[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@6:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@6:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvRouteInfo@@@std@@YAPAPAVCvRouteInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvRouteInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvFeatureInfo@@@std@@YAPAPAVCvFeatureInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T287952 = -16						; size = 4
$T287948 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvFeatureInfo@@@std@@YAPAPAVCvFeatureInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvFeatureInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@7

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@7
$LN3@Allocate@7:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@7

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T287952[ebp], 0
	lea	eax, DWORD PTR $T287952[ebp]
	push	eax
	lea	ecx, DWORD PTR $T287948[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T287948[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T287948[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@7:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@7:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvFeatureInfo@@@std@@YAPAPAVCvFeatureInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvFeatureInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvResourceClassInfo@@@std@@YAPAPAVCvResourceClassInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T287959 = -16						; size = 4
$T287955 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvResourceClassInfo@@@std@@YAPAPAVCvResourceClassInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvResourceClassInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@8

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@8
$LN3@Allocate@8:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@8

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T287959[ebp], 0
	lea	eax, DWORD PTR $T287959[ebp]
	push	eax
	lea	ecx, DWORD PTR $T287955[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T287955[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T287955[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@8:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@8:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvResourceClassInfo@@@std@@YAPAPAVCvResourceClassInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvResourceClassInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvResourceInfo@@@std@@YAPAPAVCvResourceInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T287966 = -16						; size = 4
$T287962 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvResourceInfo@@@std@@YAPAPAVCvResourceInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvResourceInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@9

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@9
$LN3@Allocate@9:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@9

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T287966[ebp], 0
	lea	eax, DWORD PTR $T287966[ebp]
	push	eax
	lea	ecx, DWORD PTR $T287962[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T287962[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T287962[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@9:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@9:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvResourceInfo@@@std@@YAPAPAVCvResourceInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvResourceInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvBuildInfo@@@std@@YAPAPAVCvBuildInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T287973 = -16						; size = 4
$T287969 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvBuildInfo@@@std@@YAPAPAVCvBuildInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvBuildInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@10

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@10
$LN3@Allocate@10:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@10

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T287973[ebp], 0
	lea	eax, DWORD PTR $T287973[ebp]
	push	eax
	lea	ecx, DWORD PTR $T287969[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T287969[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T287969[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@10:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@10:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvBuildInfo@@@std@@YAPAPAVCvBuildInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvBuildInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvHandicapInfo@@@std@@YAPAPAVCvHandicapInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T287980 = -16						; size = 4
$T287976 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvHandicapInfo@@@std@@YAPAPAVCvHandicapInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvHandicapInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@11

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@11
$LN3@Allocate@11:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@11

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T287980[ebp], 0
	lea	eax, DWORD PTR $T287980[ebp]
	push	eax
	lea	ecx, DWORD PTR $T287976[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T287976[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T287976[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@11:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@11:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvHandicapInfo@@@std@@YAPAPAVCvHandicapInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvHandicapInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvGameSpeedInfo@@@std@@YAPAPAVCvGameSpeedInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T287987 = -16						; size = 4
$T287983 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvGameSpeedInfo@@@std@@YAPAPAVCvGameSpeedInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvGameSpeedInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@12

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@12
$LN3@Allocate@12:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@12

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T287987[ebp], 0
	lea	eax, DWORD PTR $T287987[ebp]
	push	eax
	lea	ecx, DWORD PTR $T287983[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T287983[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T287983[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@12:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@12:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvGameSpeedInfo@@@std@@YAPAPAVCvGameSpeedInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvGameSpeedInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvTurnTimerInfo@@@std@@YAPAPAVCvTurnTimerInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T287994 = -16						; size = 4
$T287990 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvTurnTimerInfo@@@std@@YAPAPAVCvTurnTimerInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvTurnTimerInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@13

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@13
$LN3@Allocate@13:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@13

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T287994[ebp], 0
	lea	eax, DWORD PTR $T287994[ebp]
	push	eax
	lea	ecx, DWORD PTR $T287990[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T287990[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T287990[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@13:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@13:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvTurnTimerInfo@@@std@@YAPAPAVCvTurnTimerInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvTurnTimerInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvCivilizationInfo@@@std@@YAPAPAVCvCivilizationInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288001 = -16						; size = 4
$T287997 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvCivilizationInfo@@@std@@YAPAPAVCvCivilizationInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvCivilizationInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@14

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@14
$LN3@Allocate@14:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@14

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288001[ebp], 0
	lea	eax, DWORD PTR $T288001[ebp]
	push	eax
	lea	ecx, DWORD PTR $T287997[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T287997[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T287997[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@14:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@14:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvCivilizationInfo@@@std@@YAPAPAVCvCivilizationInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvCivilizationInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvMinorCivInfo@@@std@@YAPAPAVCvMinorCivInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288008 = -16						; size = 4
$T288004 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvMinorCivInfo@@@std@@YAPAPAVCvMinorCivInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvMinorCivInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@15

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@15
$LN3@Allocate@15:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@15

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288008[ebp], 0
	lea	eax, DWORD PTR $T288008[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288004[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288004[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288004[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@15:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@15:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvMinorCivInfo@@@std@@YAPAPAVCvMinorCivInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvMinorCivInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvLeaderHeadInfo@@@std@@YAPAPAVCvLeaderHeadInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288015 = -16						; size = 4
$T288011 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvLeaderHeadInfo@@@std@@YAPAPAVCvLeaderHeadInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvLeaderHeadInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@16

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@16
$LN3@Allocate@16:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@16

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288015[ebp], 0
	lea	eax, DWORD PTR $T288015[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288011[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288011[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288011[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@16:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@16:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvLeaderHeadInfo@@@std@@YAPAPAVCvLeaderHeadInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvLeaderHeadInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvProcessInfo@@@std@@YAPAPAVCvProcessInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288022 = -16						; size = 4
$T288018 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvProcessInfo@@@std@@YAPAPAVCvProcessInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvProcessInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@17

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@17
$LN3@Allocate@17:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@17

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288022[ebp], 0
	lea	eax, DWORD PTR $T288022[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288018[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288018[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288018[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@17:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@17:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvProcessInfo@@@std@@YAPAPAVCvProcessInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvProcessInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvVoteInfo@@@std@@YAPAPAVCvVoteInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288029 = -16						; size = 4
$T288025 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvVoteInfo@@@std@@YAPAPAVCvVoteInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvVoteInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@18

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@18
$LN3@Allocate@18:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@18

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288029[ebp], 0
	lea	eax, DWORD PTR $T288029[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288025[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288025[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288025[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@18:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@18:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvVoteInfo@@@std@@YAPAPAVCvVoteInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvVoteInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvBuildingClassInfo@@@std@@YAPAPAVCvBuildingClassInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288036 = -16						; size = 4
$T288032 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvBuildingClassInfo@@@std@@YAPAPAVCvBuildingClassInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvBuildingClassInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@19

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@19
$LN3@Allocate@19:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@19

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288036[ebp], 0
	lea	eax, DWORD PTR $T288036[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288032[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288032[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288032[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@19:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@19:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvBuildingClassInfo@@@std@@YAPAPAVCvBuildingClassInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvBuildingClassInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvUnitClassInfo@@@std@@YAPAPAVCvUnitClassInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288043 = -16						; size = 4
$T288039 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvUnitClassInfo@@@std@@YAPAPAVCvUnitClassInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvUnitClassInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@20

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@20
$LN3@Allocate@20:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@20

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288043[ebp], 0
	lea	eax, DWORD PTR $T288043[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288039[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288039[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288039[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@20:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@20:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvUnitClassInfo@@@std@@YAPAPAVCvUnitClassInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvUnitClassInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvSpecialUnitInfo@@@std@@YAPAPAVCvSpecialUnitInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288050 = -16						; size = 4
$T288046 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvSpecialUnitInfo@@@std@@YAPAPAVCvSpecialUnitInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvSpecialUnitInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@21

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@21
$LN3@Allocate@21:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@21

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288050[ebp], 0
	lea	eax, DWORD PTR $T288050[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288046[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288046[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288046[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@21:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@21:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvSpecialUnitInfo@@@std@@YAPAPAVCvSpecialUnitInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvSpecialUnitInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvVoteSourceInfo@@@std@@YAPAPAVCvVoteSourceInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288057 = -16						; size = 4
$T288053 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvVoteSourceInfo@@@std@@YAPAPAVCvVoteSourceInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvVoteSourceInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@22

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@22
$LN3@Allocate@22:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@22

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288057[ebp], 0
	lea	eax, DWORD PTR $T288057[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288053[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288053[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288053[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@22:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@22:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvVoteSourceInfo@@@std@@YAPAPAVCvVoteSourceInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvVoteSourceInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvBaseInfo@@@std@@YAPAPAVCvBaseInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288064 = -16						; size = 4
$T288060 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvBaseInfo@@@std@@YAPAPAVCvBaseInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvBaseInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@23

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@23
$LN3@Allocate@23:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@23

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288064[ebp], 0
	lea	eax, DWORD PTR $T288064[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288060[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288060[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288060[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@23:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@23:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvBaseInfo@@@std@@YAPAPAVCvBaseInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvBaseInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvGameOptionInfo@@@std@@YAPAPAVCvGameOptionInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288071 = -16						; size = 4
$T288067 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvGameOptionInfo@@@std@@YAPAPAVCvGameOptionInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvGameOptionInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@24

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@24
$LN3@Allocate@24:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@24

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288071[ebp], 0
	lea	eax, DWORD PTR $T288071[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288067[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288067[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288067[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@24:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@24:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvGameOptionInfo@@@std@@YAPAPAVCvGameOptionInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvGameOptionInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvMPOptionInfo@@@std@@YAPAPAVCvMPOptionInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288078 = -16						; size = 4
$T288074 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvMPOptionInfo@@@std@@YAPAPAVCvMPOptionInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvMPOptionInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@25

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@25
$LN3@Allocate@25:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@25

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288078[ebp], 0
	lea	eax, DWORD PTR $T288078[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288074[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288074[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288074[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@25:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@25:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvMPOptionInfo@@@std@@YAPAPAVCvMPOptionInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvMPOptionInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvPlayerOptionInfo@@@std@@YAPAPAVCvPlayerOptionInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288085 = -16						; size = 4
$T288081 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvPlayerOptionInfo@@@std@@YAPAPAVCvPlayerOptionInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvPlayerOptionInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@26

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@26
$LN3@Allocate@26:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@26

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288085[ebp], 0
	lea	eax, DWORD PTR $T288085[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288081[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288081[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288081[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@26:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@26:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvPlayerOptionInfo@@@std@@YAPAPAVCvPlayerOptionInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvPlayerOptionInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvSpecialistInfo@@@std@@YAPAPAVCvSpecialistInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288092 = -16						; size = 4
$T288088 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvSpecialistInfo@@@std@@YAPAPAVCvSpecialistInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvSpecialistInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@27

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@27
$LN3@Allocate@27:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@27

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288092[ebp], 0
	lea	eax, DWORD PTR $T288092[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288088[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288088[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288088[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@27:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@27:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvSpecialistInfo@@@std@@YAPAPAVCvSpecialistInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvSpecialistInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvActionInfo@@@std@@YAPAPAVCvActionInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288099 = -16						; size = 4
$T288095 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvActionInfo@@@std@@YAPAPAVCvActionInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvActionInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@28

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@28
$LN3@Allocate@28:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@28

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288099[ebp], 0
	lea	eax, DWORD PTR $T288099[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288095[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288095[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288095[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@28:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@28:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvActionInfo@@@std@@YAPAPAVCvActionInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvActionInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvMissionInfo@@@std@@YAPAPAVCvMissionInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288106 = -16						; size = 4
$T288102 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvMissionInfo@@@std@@YAPAPAVCvMissionInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvMissionInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@29

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@29
$LN3@Allocate@29:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@29

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288106[ebp], 0
	lea	eax, DWORD PTR $T288106[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288102[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288102[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288102[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@29:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@29:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvMissionInfo@@@std@@YAPAPAVCvMissionInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvMissionInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvControlInfo@@@std@@YAPAPAVCvControlInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288113 = -16						; size = 4
$T288109 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvControlInfo@@@std@@YAPAPAVCvControlInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvControlInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@30

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@30
$LN3@Allocate@30:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@30

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288113[ebp], 0
	lea	eax, DWORD PTR $T288113[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288109[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288109[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288109[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@30:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@30:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvControlInfo@@@std@@YAPAPAVCvControlInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvControlInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvCommandInfo@@@std@@YAPAPAVCvCommandInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288120 = -16						; size = 4
$T288116 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvCommandInfo@@@std@@YAPAPAVCvCommandInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvCommandInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@31

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@31
$LN3@Allocate@31:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@31

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288120[ebp], 0
	lea	eax, DWORD PTR $T288120[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288116[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288116[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288116[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@31:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@31:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvCommandInfo@@@std@@YAPAPAVCvCommandInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvCommandInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvAutomateInfo@@@std@@YAPAPAVCvAutomateInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288127 = -16						; size = 4
$T288123 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvAutomateInfo@@@std@@YAPAPAVCvAutomateInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvAutomateInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@32

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@32
$LN3@Allocate@32:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@32

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288127[ebp], 0
	lea	eax, DWORD PTR $T288127[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288123[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288123[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288123[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@32:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@32:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvAutomateInfo@@@std@@YAPAPAVCvAutomateInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvAutomateInfo *>
_TEXT	ENDS
EXTRN	?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B:DWORD ; CvPreGame::sr_TeamTypes
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvpregame.h
;	COMDAT ?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPreGame::teamType, COMDAT

; 298  : {

	push	ebp
	mov	ebp, esp

; 299  : 	if(p >= 0 && p < MAX_PLAYERS)

	cmp	DWORD PTR _p$[ebp], 0
	jl	SHORT $LN1@teamType
	cmp	DWORD PTR _p$[ebp], 64			; 00000040H
	jge	SHORT $LN1@teamType

; 300  : 		return sr_TeamTypes[p];

	mov	eax, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN2@teamType
$LN1@teamType:

; 301  : 	return NO_TEAM;

	or	eax, -1
$LN2@teamType:

; 302  : }

	pop	ebp
	ret	0
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPreGame::teamType
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvEraInfo@@@std@@YAPAPAVCvEraInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288139 = -16						; size = 4
$T288135 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvEraInfo@@@std@@YAPAPAVCvEraInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvEraInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@33

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@33
$LN3@Allocate@33:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@33

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288139[ebp], 0
	lea	eax, DWORD PTR $T288139[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288135[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288135[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288135[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@33:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@33:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvEraInfo@@@std@@YAPAPAVCvEraInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvEraInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvHurryInfo@@@std@@YAPAPAVCvHurryInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288146 = -16						; size = 4
$T288142 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvHurryInfo@@@std@@YAPAPAVCvHurryInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvHurryInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@34

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@34
$LN3@Allocate@34:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@34

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288146[ebp], 0
	lea	eax, DWORD PTR $T288146[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288142[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288142[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288142[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@34:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@34:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvHurryInfo@@@std@@YAPAPAVCvHurryInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvHurryInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvVictoryInfo@@@std@@YAPAPAVCvVictoryInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288153 = -16						; size = 4
$T288149 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvVictoryInfo@@@std@@YAPAPAVCvVictoryInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvVictoryInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@35

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@35
$LN3@Allocate@35:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@35

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288153[ebp], 0
	lea	eax, DWORD PTR $T288153[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288149[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288149[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288149[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@35:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@35:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvVictoryInfo@@@std@@YAPAPAVCvVictoryInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvVictoryInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvSmallAwardInfo@@@std@@YAPAPAVCvSmallAwardInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288160 = -16						; size = 4
$T288156 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvSmallAwardInfo@@@std@@YAPAPAVCvSmallAwardInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvSmallAwardInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@36

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@36
$LN3@Allocate@36:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@36

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288160[ebp], 0
	lea	eax, DWORD PTR $T288160[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288156[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288156[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288156[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@36:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@36:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvSmallAwardInfo@@@std@@YAPAPAVCvSmallAwardInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvSmallAwardInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvEntityEventInfo@@@std@@YAPAPAVCvEntityEventInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288167 = -16						; size = 4
$T288163 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvEntityEventInfo@@@std@@YAPAPAVCvEntityEventInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvEntityEventInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@37

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@37
$LN3@Allocate@37:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@37

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288167[ebp], 0
	lea	eax, DWORD PTR $T288167[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288163[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288163[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288163[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@37:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@37:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvEntityEventInfo@@@std@@YAPAPAVCvEntityEventInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvEntityEventInfo *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvMultiUnitFormationInfo@@@std@@YAPAPAVCvMultiUnitFormationInfo@@IPAPAV1@@Z
_TEXT	SEGMENT
$T288174 = -16						; size = 4
$T288170 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvMultiUnitFormationInfo@@@std@@YAPAPAVCvMultiUnitFormationInfo@@IPAPAV1@@Z PROC ; std::_Allocate<CvMultiUnitFormationInfo *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@38

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@38
$LN3@Allocate@38:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@38

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288174[ebp], 0
	lea	eax, DWORD PTR $T288174[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288170[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288170[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288170[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@38:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@38:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvMultiUnitFormationInfo@@@std@@YAPAPAVCvMultiUnitFormationInfo@@IPAPAV1@@Z ENDP ; std::_Allocate<CvMultiUnitFormationInfo *>
_TEXT	ENDS
EXTRN	__imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xhash
;	COMDAT ??$hash_value@DU?$char_traits@D@std@@V?$allocator@D@2@@stdext@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T288184 = -16						; size = 4
$T288183 = -12						; size = 4
__Val$288180 = -8					; size = 4
__Ptr$ = -4						; size = 4
__Str$ = 8						; size = 4
??$hash_value@DU?$char_traits@D@std@@V?$allocator@D@2@@stdext@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; stdext::hash_value<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 65   : 	{	// hash string to size_t value

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 66   : 	const _Elem *_Ptr = _Str.c_str();

	mov	ecx, DWORD PTR __Str$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR __Ptr$[ebp], eax

; 67   : 
; 68   : 	return (_Hash_value(_Ptr, _Ptr + _Str.size()));

	mov	ecx, DWORD PTR __Str$[ebp]
	call	DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	add	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T288184[ebp], eax
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T288183[ebp], eax
	mov	DWORD PTR __Val$288180[ebp], -2128831035 ; 811c9dc5H
$LN4@hash_value:
	mov	ecx, DWORD PTR $T288183[ebp]
	cmp	ecx, DWORD PTR $T288184[ebp]
	je	SHORT $LN5@hash_value
	mov	edx, DWORD PTR __Val$288180[ebp]
	imul	edx, 16777619				; 01000193H
	mov	eax, DWORD PTR $T288183[ebp]
	movsx	ecx, BYTE PTR [eax]
	xor	edx, ecx
	mov	DWORD PTR __Val$288180[ebp], edx
	mov	edx, DWORD PTR $T288183[ebp]
	add	edx, 1
	mov	DWORD PTR $T288183[ebp], edx
	jmp	SHORT $LN4@hash_value
$LN5@hash_value:
	mov	eax, DWORD PTR __Val$288180[ebp]

; 69   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$hash_value@DU?$char_traits@D@std@@V?$allocator@D@2@@stdext@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; stdext::hash_value<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@YAPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IPAU120@@Z
_TEXT	SEGMENT
$T288191 = -16						; size = 4
$T288187 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@YAPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Node>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@39

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@39
$LN3@Allocate@39:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 40					; 00000028H
	jae	SHORT $LN2@Allocate@39

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288191[ebp], 0
	lea	eax, DWORD PTR $T288191[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288187[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288187[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288187[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@39:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 40					; 00000028H
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@39:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@YAPAU_Node@?$_List_nod@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Node>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IPAV120@@Z
_TEXT	SEGMENT
$T288198 = -16						; size = 4
$T288194 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IPAV120@@Z PROC ; std::_Allocate<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> >, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@40

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@40
$LN3@Allocate@40:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@40

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288198[ebp], 0
	lea	eax, DWORD PTR $T288198[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288194[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288194[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288194[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@40:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@40:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IPAV120@@Z ENDP ; std::_Allocate<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T288205 = -16						; size = 4
$T288201 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@41

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@41
$LN3@Allocate@41:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 24					; 00000018H
	jae	SHORT $LN2@Allocate@41

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T288205[ebp], 0
	lea	eax, DWORD PTR $T288205[ebp]
	push	eax
	lea	ecx, DWORD PTR $T288201[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T288201[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T288201[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@41:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 24					; 00000018H
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@41:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@IHU?$less@I@std@@V?$allocator@U?$pair@$$CBIH@std@@@2@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned int,int,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,int> >,0> >::_Node>
_TEXT	ENDS
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_ECvString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ECvString@@QAEPAXI@Z PROC				; CvString::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN6@vector
	push	OFFSET ??1CvString@@QAE@XZ		; CvString::~CvString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN6@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECvString@@QAEPAXI@Z ENDP				; CvString::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvInterfaceModeInfo@@PAPAV1@@stdext@@YAPAPAVCvInterfaceModeInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvInterfaceModeInfo * *,CvInterfaceModeInfo * *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?erase@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T288304 = -52						; size = 4
$T288293 = -48						; size = 4
$T288292 = -44						; size = 4
__Cat$288300 = -40					; size = 1
$T288297 = -39						; size = 1
__Ptr$245570 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@2@0@Z PROC ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@6

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvInterfaceModeInfo@@PAPAV1@@stdext@@YAPAPAVCvInterfaceModeInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvInterfaceModeInfo * *,CvInterfaceModeInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245570[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T288304[ebp], edx
	mov	eax, DWORD PTR $T288304[ebp]
	mov	DWORD PTR $T288293[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245570[ebp]
	mov	DWORD PTR $T288292[ebp], ecx
	mov	dl, BYTE PTR __Cat$288300[ebp]
	mov	BYTE PTR $T288297[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245570[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@6:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvInterfaceModeInfo@@V?$allocator@PAVCvInterfaceModeInfo@@@std@@@2@0@Z ENDP ; std::vector<CvInterfaceModeInfo *,std::allocator<CvInterfaceModeInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvColorInfo@@PAPAV1@@stdext@@YAPAPAVCvColorInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvColorInfo * *,CvColorInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T288397 = -52						; size = 4
$T288386 = -48						; size = 4
$T288385 = -44						; size = 4
__Cat$288393 = -40					; size = 1
$T288390 = -39						; size = 1
__Ptr$245586 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@2@0@Z PROC ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@7

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvColorInfo@@PAPAV1@@stdext@@YAPAPAVCvColorInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvColorInfo * *,CvColorInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245586[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T288397[ebp], edx
	mov	eax, DWORD PTR $T288397[ebp]
	mov	DWORD PTR $T288386[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245586[ebp]
	mov	DWORD PTR $T288385[ebp], ecx
	mov	dl, BYTE PTR __Cat$288393[ebp]
	mov	BYTE PTR $T288390[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245586[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@7:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvColorInfo@@V?$allocator@PAVCvColorInfo@@@std@@@2@0@Z ENDP ; std::vector<CvColorInfo *,std::allocator<CvColorInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvPlayerColorInfo@@PAPAV1@@stdext@@YAPAPAVCvPlayerColorInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvPlayerColorInfo * *,CvPlayerColorInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T288490 = -52						; size = 4
$T288479 = -48						; size = 4
$T288478 = -44						; size = 4
__Cat$288485 = -40					; size = 1
$T288484 = -39						; size = 1
__Ptr$245602 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@2@0@Z PROC ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@8

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvPlayerColorInfo@@PAPAV1@@stdext@@YAPAPAVCvPlayerColorInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvPlayerColorInfo * *,CvPlayerColorInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245602[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T288490[ebp], edx
	mov	eax, DWORD PTR $T288490[ebp]
	mov	DWORD PTR $T288479[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245602[ebp]
	mov	DWORD PTR $T288478[ebp], ecx
	mov	dl, BYTE PTR __Cat$288485[ebp]
	mov	BYTE PTR $T288484[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245602[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@8:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlayerColorInfo@@V?$allocator@PAVCvPlayerColorInfo@@@std@@@2@0@Z ENDP ; std::vector<CvPlayerColorInfo *,std::allocator<CvPlayerColorInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvTerrainInfo@@PAPAV1@@stdext@@YAPAPAVCvTerrainInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvTerrainInfo * *,CvTerrainInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T288583 = -52						; size = 4
$T288572 = -48						; size = 4
$T288571 = -44						; size = 4
__Cat$288579 = -40					; size = 1
$T288577 = -39						; size = 1
__Ptr$245618 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@2@0@Z PROC ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@9

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvTerrainInfo@@PAPAV1@@stdext@@YAPAPAVCvTerrainInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvTerrainInfo * *,CvTerrainInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245618[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T288583[ebp], edx
	mov	eax, DWORD PTR $T288583[ebp]
	mov	DWORD PTR $T288572[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245618[ebp]
	mov	DWORD PTR $T288571[ebp], ecx
	mov	dl, BYTE PTR __Cat$288579[ebp]
	mov	BYTE PTR $T288577[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245618[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@9:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvTerrainInfo@@V?$allocator@PAVCvTerrainInfo@@@std@@@2@0@Z ENDP ; std::vector<CvTerrainInfo *,std::allocator<CvTerrainInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvYieldInfo@@PAPAV1@@stdext@@YAPAPAVCvYieldInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvYieldInfo * *,CvYieldInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T288676 = -52						; size = 4
$T288665 = -48						; size = 4
$T288664 = -44						; size = 4
__Cat$288672 = -40					; size = 1
$T288670 = -39						; size = 1
__Ptr$245634 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@2@0@Z PROC ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@10

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvYieldInfo@@PAPAV1@@stdext@@YAPAPAVCvYieldInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvYieldInfo * *,CvYieldInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245634[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T288676[ebp], edx
	mov	eax, DWORD PTR $T288676[ebp]
	mov	DWORD PTR $T288665[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245634[ebp]
	mov	DWORD PTR $T288664[ebp], ecx
	mov	dl, BYTE PTR __Cat$288672[ebp]
	mov	BYTE PTR $T288670[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245634[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@10:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvYieldInfo@@V?$allocator@PAVCvYieldInfo@@@std@@@2@0@Z ENDP ; std::vector<CvYieldInfo *,std::allocator<CvYieldInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvRouteInfo@@PAPAV1@@stdext@@YAPAPAVCvRouteInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvRouteInfo * *,CvRouteInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T288769 = -52						; size = 4
$T288758 = -48						; size = 4
$T288757 = -44						; size = 4
__Cat$288765 = -40					; size = 1
$T288763 = -39						; size = 1
__Ptr$245650 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@2@0@Z PROC ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@11

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvRouteInfo@@PAPAV1@@stdext@@YAPAPAVCvRouteInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvRouteInfo * *,CvRouteInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245650[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T288769[ebp], edx
	mov	eax, DWORD PTR $T288769[ebp]
	mov	DWORD PTR $T288758[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245650[ebp]
	mov	DWORD PTR $T288757[ebp], ecx
	mov	dl, BYTE PTR __Cat$288765[ebp]
	mov	BYTE PTR $T288763[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245650[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@11:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvRouteInfo@@V?$allocator@PAVCvRouteInfo@@@std@@@2@0@Z ENDP ; std::vector<CvRouteInfo *,std::allocator<CvRouteInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvFeatureInfo@@PAPAV1@@stdext@@YAPAPAVCvFeatureInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvFeatureInfo * *,CvFeatureInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T288862 = -52						; size = 4
$T288851 = -48						; size = 4
$T288850 = -44						; size = 4
__Cat$288856 = -40					; size = 1
$T288854 = -39						; size = 1
__Ptr$245666 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@2@0@Z PROC ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@12

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvFeatureInfo@@PAPAV1@@stdext@@YAPAPAVCvFeatureInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvFeatureInfo * *,CvFeatureInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245666[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T288862[ebp], edx
	mov	eax, DWORD PTR $T288862[ebp]
	mov	DWORD PTR $T288851[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245666[ebp]
	mov	DWORD PTR $T288850[ebp], ecx
	mov	dl, BYTE PTR __Cat$288856[ebp]
	mov	BYTE PTR $T288854[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245666[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@12:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvFeatureInfo@@V?$allocator@PAVCvFeatureInfo@@@std@@@2@0@Z ENDP ; std::vector<CvFeatureInfo *,std::allocator<CvFeatureInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvResourceClassInfo@@PAPAV1@@stdext@@YAPAPAVCvResourceClassInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvResourceClassInfo * *,CvResourceClassInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T288955 = -52						; size = 4
$T288944 = -48						; size = 4
$T288943 = -44						; size = 4
__Cat$288949 = -40					; size = 1
$T288947 = -39						; size = 1
__Ptr$245682 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@2@0@Z PROC ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@13

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvResourceClassInfo@@PAPAV1@@stdext@@YAPAPAVCvResourceClassInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvResourceClassInfo * *,CvResourceClassInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245682[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T288955[ebp], edx
	mov	eax, DWORD PTR $T288955[ebp]
	mov	DWORD PTR $T288944[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245682[ebp]
	mov	DWORD PTR $T288943[ebp], ecx
	mov	dl, BYTE PTR __Cat$288949[ebp]
	mov	BYTE PTR $T288947[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245682[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@13:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvResourceClassInfo@@V?$allocator@PAVCvResourceClassInfo@@@std@@@2@0@Z ENDP ; std::vector<CvResourceClassInfo *,std::allocator<CvResourceClassInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvResourceInfo@@PAPAV1@@stdext@@YAPAPAVCvResourceInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvResourceInfo * *,CvResourceInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T289048 = -52						; size = 4
$T289037 = -48						; size = 4
$T289036 = -44						; size = 4
__Cat$289042 = -40					; size = 1
$T289040 = -39						; size = 1
__Ptr$245698 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@2@0@Z PROC ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@14

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvResourceInfo@@PAPAV1@@stdext@@YAPAPAVCvResourceInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvResourceInfo * *,CvResourceInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245698[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T289048[ebp], edx
	mov	eax, DWORD PTR $T289048[ebp]
	mov	DWORD PTR $T289037[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245698[ebp]
	mov	DWORD PTR $T289036[ebp], ecx
	mov	dl, BYTE PTR __Cat$289042[ebp]
	mov	BYTE PTR $T289040[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245698[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@14:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvResourceInfo@@V?$allocator@PAVCvResourceInfo@@@std@@@2@0@Z ENDP ; std::vector<CvResourceInfo *,std::allocator<CvResourceInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvBuildInfo@@PAPAV1@@stdext@@YAPAPAVCvBuildInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvBuildInfo * *,CvBuildInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T289141 = -52						; size = 4
$T289130 = -48						; size = 4
$T289129 = -44						; size = 4
__Cat$289136 = -40					; size = 1
$T289134 = -39						; size = 1
__Ptr$245714 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@2@0@Z PROC ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@15

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvBuildInfo@@PAPAV1@@stdext@@YAPAPAVCvBuildInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvBuildInfo * *,CvBuildInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245714[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T289141[ebp], edx
	mov	eax, DWORD PTR $T289141[ebp]
	mov	DWORD PTR $T289130[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245714[ebp]
	mov	DWORD PTR $T289129[ebp], ecx
	mov	dl, BYTE PTR __Cat$289136[ebp]
	mov	BYTE PTR $T289134[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245714[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@15:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvBuildInfo@@V?$allocator@PAVCvBuildInfo@@@std@@@2@0@Z ENDP ; std::vector<CvBuildInfo *,std::allocator<CvBuildInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvHandicapInfo@@PAPAV1@@stdext@@YAPAPAVCvHandicapInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvHandicapInfo * *,CvHandicapInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T289234 = -52						; size = 4
$T289223 = -48						; size = 4
$T289222 = -44						; size = 4
__Cat$289230 = -40					; size = 1
$T289228 = -39						; size = 1
__Ptr$245730 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@2@0@Z PROC ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@16

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvHandicapInfo@@PAPAV1@@stdext@@YAPAPAVCvHandicapInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvHandicapInfo * *,CvHandicapInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245730[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T289234[ebp], edx
	mov	eax, DWORD PTR $T289234[ebp]
	mov	DWORD PTR $T289223[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245730[ebp]
	mov	DWORD PTR $T289222[ebp], ecx
	mov	dl, BYTE PTR __Cat$289230[ebp]
	mov	BYTE PTR $T289228[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245730[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@16:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvHandicapInfo@@V?$allocator@PAVCvHandicapInfo@@@std@@@2@0@Z ENDP ; std::vector<CvHandicapInfo *,std::allocator<CvHandicapInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvGameSpeedInfo@@PAPAV1@@stdext@@YAPAPAVCvGameSpeedInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvGameSpeedInfo * *,CvGameSpeedInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T289327 = -52						; size = 4
$T289316 = -48						; size = 4
$T289315 = -44						; size = 4
__Cat$289323 = -40					; size = 1
$T289321 = -39						; size = 1
__Ptr$245746 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@2@0@Z PROC ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@17

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvGameSpeedInfo@@PAPAV1@@stdext@@YAPAPAVCvGameSpeedInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvGameSpeedInfo * *,CvGameSpeedInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245746[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T289327[ebp], edx
	mov	eax, DWORD PTR $T289327[ebp]
	mov	DWORD PTR $T289316[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245746[ebp]
	mov	DWORD PTR $T289315[ebp], ecx
	mov	dl, BYTE PTR __Cat$289323[ebp]
	mov	BYTE PTR $T289321[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245746[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@17:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvGameSpeedInfo@@V?$allocator@PAVCvGameSpeedInfo@@@std@@@2@0@Z ENDP ; std::vector<CvGameSpeedInfo *,std::allocator<CvGameSpeedInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvTurnTimerInfo@@PAPAV1@@stdext@@YAPAPAVCvTurnTimerInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvTurnTimerInfo * *,CvTurnTimerInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T289420 = -52						; size = 4
$T289409 = -48						; size = 4
$T289408 = -44						; size = 4
__Cat$289416 = -40					; size = 1
$T289414 = -39						; size = 1
__Ptr$245762 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@2@0@Z PROC ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@18

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvTurnTimerInfo@@PAPAV1@@stdext@@YAPAPAVCvTurnTimerInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvTurnTimerInfo * *,CvTurnTimerInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245762[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T289420[ebp], edx
	mov	eax, DWORD PTR $T289420[ebp]
	mov	DWORD PTR $T289409[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245762[ebp]
	mov	DWORD PTR $T289408[ebp], ecx
	mov	dl, BYTE PTR __Cat$289416[ebp]
	mov	BYTE PTR $T289414[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245762[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@18:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvTurnTimerInfo@@V?$allocator@PAVCvTurnTimerInfo@@@std@@@2@0@Z ENDP ; std::vector<CvTurnTimerInfo *,std::allocator<CvTurnTimerInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvCivilizationInfo@@PAPAV1@@stdext@@YAPAPAVCvCivilizationInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvCivilizationInfo * *,CvCivilizationInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T289513 = -52						; size = 4
$T289502 = -48						; size = 4
$T289501 = -44						; size = 4
__Cat$289509 = -40					; size = 1
$T289507 = -39						; size = 1
__Ptr$245778 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@2@0@Z PROC ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@19

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvCivilizationInfo@@PAPAV1@@stdext@@YAPAPAVCvCivilizationInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvCivilizationInfo * *,CvCivilizationInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245778[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T289513[ebp], edx
	mov	eax, DWORD PTR $T289513[ebp]
	mov	DWORD PTR $T289502[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245778[ebp]
	mov	DWORD PTR $T289501[ebp], ecx
	mov	dl, BYTE PTR __Cat$289509[ebp]
	mov	BYTE PTR $T289507[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245778[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@19:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvCivilizationInfo@@V?$allocator@PAVCvCivilizationInfo@@@std@@@2@0@Z ENDP ; std::vector<CvCivilizationInfo *,std::allocator<CvCivilizationInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvMinorCivInfo@@PAPAV1@@stdext@@YAPAPAVCvMinorCivInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvMinorCivInfo * *,CvMinorCivInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T289606 = -52						; size = 4
$T289595 = -48						; size = 4
$T289594 = -44						; size = 4
__Cat$289602 = -40					; size = 1
$T289600 = -39						; size = 1
__Ptr$245794 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@2@0@Z PROC ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@20

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvMinorCivInfo@@PAPAV1@@stdext@@YAPAPAVCvMinorCivInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvMinorCivInfo * *,CvMinorCivInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245794[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T289606[ebp], edx
	mov	eax, DWORD PTR $T289606[ebp]
	mov	DWORD PTR $T289595[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245794[ebp]
	mov	DWORD PTR $T289594[ebp], ecx
	mov	dl, BYTE PTR __Cat$289602[ebp]
	mov	BYTE PTR $T289600[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245794[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@20:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvMinorCivInfo@@V?$allocator@PAVCvMinorCivInfo@@@std@@@2@0@Z ENDP ; std::vector<CvMinorCivInfo *,std::allocator<CvMinorCivInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvLeaderHeadInfo@@PAPAV1@@stdext@@YAPAPAVCvLeaderHeadInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvLeaderHeadInfo * *,CvLeaderHeadInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T289699 = -52						; size = 4
$T289688 = -48						; size = 4
$T289687 = -44						; size = 4
__Cat$289695 = -40					; size = 1
$T289693 = -39						; size = 1
__Ptr$245810 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@2@0@Z PROC ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@21

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvLeaderHeadInfo@@PAPAV1@@stdext@@YAPAPAVCvLeaderHeadInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvLeaderHeadInfo * *,CvLeaderHeadInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245810[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T289699[ebp], edx
	mov	eax, DWORD PTR $T289699[ebp]
	mov	DWORD PTR $T289688[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245810[ebp]
	mov	DWORD PTR $T289687[ebp], ecx
	mov	dl, BYTE PTR __Cat$289695[ebp]
	mov	BYTE PTR $T289693[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245810[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@21:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvLeaderHeadInfo@@V?$allocator@PAVCvLeaderHeadInfo@@@std@@@2@0@Z ENDP ; std::vector<CvLeaderHeadInfo *,std::allocator<CvLeaderHeadInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvProcessInfo@@PAPAV1@@stdext@@YAPAPAVCvProcessInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvProcessInfo * *,CvProcessInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T289792 = -52						; size = 4
$T289781 = -48						; size = 4
$T289780 = -44						; size = 4
__Cat$289788 = -40					; size = 1
$T289786 = -39						; size = 1
__Ptr$245826 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@2@0@Z PROC ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@22

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvProcessInfo@@PAPAV1@@stdext@@YAPAPAVCvProcessInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvProcessInfo * *,CvProcessInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245826[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T289792[ebp], edx
	mov	eax, DWORD PTR $T289792[ebp]
	mov	DWORD PTR $T289781[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245826[ebp]
	mov	DWORD PTR $T289780[ebp], ecx
	mov	dl, BYTE PTR __Cat$289788[ebp]
	mov	BYTE PTR $T289786[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245826[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@22:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvProcessInfo@@V?$allocator@PAVCvProcessInfo@@@std@@@2@0@Z ENDP ; std::vector<CvProcessInfo *,std::allocator<CvProcessInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvVoteInfo@@PAPAV1@@stdext@@YAPAPAVCvVoteInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvVoteInfo * *,CvVoteInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T289885 = -52						; size = 4
$T289874 = -48						; size = 4
$T289873 = -44						; size = 4
__Cat$289880 = -40					; size = 1
$T289877 = -39						; size = 1
__Ptr$245842 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@2@0@Z PROC ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@23

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvVoteInfo@@PAPAV1@@stdext@@YAPAPAVCvVoteInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvVoteInfo * *,CvVoteInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245842[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T289885[ebp], edx
	mov	eax, DWORD PTR $T289885[ebp]
	mov	DWORD PTR $T289874[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245842[ebp]
	mov	DWORD PTR $T289873[ebp], ecx
	mov	dl, BYTE PTR __Cat$289880[ebp]
	mov	BYTE PTR $T289877[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245842[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@23:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvVoteInfo@@V?$allocator@PAVCvVoteInfo@@@std@@@2@0@Z ENDP ; std::vector<CvVoteInfo *,std::allocator<CvVoteInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvBuildingClassInfo@@PAPAV1@@stdext@@YAPAPAVCvBuildingClassInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvBuildingClassInfo * *,CvBuildingClassInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T289978 = -52						; size = 4
$T289967 = -48						; size = 4
$T289966 = -44						; size = 4
__Cat$289972 = -40					; size = 1
$T289970 = -39						; size = 1
__Ptr$245858 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@2@0@Z PROC ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@24

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvBuildingClassInfo@@PAPAV1@@stdext@@YAPAPAVCvBuildingClassInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvBuildingClassInfo * *,CvBuildingClassInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245858[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T289978[ebp], edx
	mov	eax, DWORD PTR $T289978[ebp]
	mov	DWORD PTR $T289967[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245858[ebp]
	mov	DWORD PTR $T289966[ebp], ecx
	mov	dl, BYTE PTR __Cat$289972[ebp]
	mov	BYTE PTR $T289970[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245858[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@24:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvBuildingClassInfo@@V?$allocator@PAVCvBuildingClassInfo@@@std@@@2@0@Z ENDP ; std::vector<CvBuildingClassInfo *,std::allocator<CvBuildingClassInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvUnitClassInfo@@PAPAV1@@stdext@@YAPAPAVCvUnitClassInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvUnitClassInfo * *,CvUnitClassInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T290071 = -52						; size = 4
$T290060 = -48						; size = 4
$T290059 = -44						; size = 4
__Cat$290065 = -40					; size = 1
$T290063 = -39						; size = 1
__Ptr$245874 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@2@0@Z PROC ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@25

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvUnitClassInfo@@PAPAV1@@stdext@@YAPAPAVCvUnitClassInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvUnitClassInfo * *,CvUnitClassInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245874[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T290071[ebp], edx
	mov	eax, DWORD PTR $T290071[ebp]
	mov	DWORD PTR $T290060[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245874[ebp]
	mov	DWORD PTR $T290059[ebp], ecx
	mov	dl, BYTE PTR __Cat$290065[ebp]
	mov	BYTE PTR $T290063[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245874[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@25:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvUnitClassInfo@@V?$allocator@PAVCvUnitClassInfo@@@std@@@2@0@Z ENDP ; std::vector<CvUnitClassInfo *,std::allocator<CvUnitClassInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvSpecialUnitInfo@@PAPAV1@@stdext@@YAPAPAVCvSpecialUnitInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvSpecialUnitInfo * *,CvSpecialUnitInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T290164 = -52						; size = 4
$T290153 = -48						; size = 4
$T290152 = -44						; size = 4
__Cat$290158 = -40					; size = 1
$T290156 = -39						; size = 1
__Ptr$245890 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@2@0@Z PROC ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@26

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvSpecialUnitInfo@@PAPAV1@@stdext@@YAPAPAVCvSpecialUnitInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvSpecialUnitInfo * *,CvSpecialUnitInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245890[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T290164[ebp], edx
	mov	eax, DWORD PTR $T290164[ebp]
	mov	DWORD PTR $T290153[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245890[ebp]
	mov	DWORD PTR $T290152[ebp], ecx
	mov	dl, BYTE PTR __Cat$290158[ebp]
	mov	BYTE PTR $T290156[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245890[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@26:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvSpecialUnitInfo@@V?$allocator@PAVCvSpecialUnitInfo@@@std@@@2@0@Z ENDP ; std::vector<CvSpecialUnitInfo *,std::allocator<CvSpecialUnitInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvVoteSourceInfo@@PAPAV1@@stdext@@YAPAPAVCvVoteSourceInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvVoteSourceInfo * *,CvVoteSourceInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T290257 = -52						; size = 4
$T290246 = -48						; size = 4
$T290245 = -44						; size = 4
__Cat$290251 = -40					; size = 1
$T290249 = -39						; size = 1
__Ptr$245906 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@2@0@Z PROC ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@27

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvVoteSourceInfo@@PAPAV1@@stdext@@YAPAPAVCvVoteSourceInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvVoteSourceInfo * *,CvVoteSourceInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245906[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T290257[ebp], edx
	mov	eax, DWORD PTR $T290257[ebp]
	mov	DWORD PTR $T290246[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245906[ebp]
	mov	DWORD PTR $T290245[ebp], ecx
	mov	dl, BYTE PTR __Cat$290251[ebp]
	mov	BYTE PTR $T290249[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245906[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@27:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvVoteSourceInfo@@V?$allocator@PAVCvVoteSourceInfo@@@std@@@2@0@Z ENDP ; std::vector<CvVoteSourceInfo *,std::allocator<CvVoteSourceInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvBaseInfo@@PAPAV1@@stdext@@YAPAPAVCvBaseInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvBaseInfo * *,CvBaseInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T290350 = -52						; size = 4
$T290339 = -48						; size = 4
$T290338 = -44						; size = 4
__Cat$290344 = -40					; size = 1
$T290342 = -39						; size = 1
__Ptr$245922 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@2@0@Z PROC ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@28

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvBaseInfo@@PAPAV1@@stdext@@YAPAPAVCvBaseInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvBaseInfo * *,CvBaseInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245922[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T290350[ebp], edx
	mov	eax, DWORD PTR $T290350[ebp]
	mov	DWORD PTR $T290339[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245922[ebp]
	mov	DWORD PTR $T290338[ebp], ecx
	mov	dl, BYTE PTR __Cat$290344[ebp]
	mov	BYTE PTR $T290342[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245922[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@28:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvBaseInfo@@V?$allocator@PAVCvBaseInfo@@@std@@@2@0@Z ENDP ; std::vector<CvBaseInfo *,std::allocator<CvBaseInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvGameOptionInfo@@PAPAV1@@stdext@@YAPAPAVCvGameOptionInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvGameOptionInfo * *,CvGameOptionInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T290443 = -52						; size = 4
$T290432 = -48						; size = 4
$T290431 = -44						; size = 4
__Cat$290437 = -40					; size = 1
$T290435 = -39						; size = 1
__Ptr$245938 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@2@0@Z PROC ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@29

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvGameOptionInfo@@PAPAV1@@stdext@@YAPAPAVCvGameOptionInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvGameOptionInfo * *,CvGameOptionInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245938[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T290443[ebp], edx
	mov	eax, DWORD PTR $T290443[ebp]
	mov	DWORD PTR $T290432[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245938[ebp]
	mov	DWORD PTR $T290431[ebp], ecx
	mov	dl, BYTE PTR __Cat$290437[ebp]
	mov	BYTE PTR $T290435[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245938[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@29:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvGameOptionInfo@@V?$allocator@PAVCvGameOptionInfo@@@std@@@2@0@Z ENDP ; std::vector<CvGameOptionInfo *,std::allocator<CvGameOptionInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvMPOptionInfo@@PAPAV1@@stdext@@YAPAPAVCvMPOptionInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvMPOptionInfo * *,CvMPOptionInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T290536 = -52						; size = 4
$T290525 = -48						; size = 4
$T290524 = -44						; size = 4
__Cat$290530 = -40					; size = 1
$T290528 = -39						; size = 1
__Ptr$245954 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@2@0@Z PROC ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@30

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvMPOptionInfo@@PAPAV1@@stdext@@YAPAPAVCvMPOptionInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvMPOptionInfo * *,CvMPOptionInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245954[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T290536[ebp], edx
	mov	eax, DWORD PTR $T290536[ebp]
	mov	DWORD PTR $T290525[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245954[ebp]
	mov	DWORD PTR $T290524[ebp], ecx
	mov	dl, BYTE PTR __Cat$290530[ebp]
	mov	BYTE PTR $T290528[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245954[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@30:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvMPOptionInfo@@V?$allocator@PAVCvMPOptionInfo@@@std@@@2@0@Z ENDP ; std::vector<CvMPOptionInfo *,std::allocator<CvMPOptionInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvPlayerOptionInfo@@PAPAV1@@stdext@@YAPAPAVCvPlayerOptionInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvPlayerOptionInfo * *,CvPlayerOptionInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T290629 = -52						; size = 4
$T290618 = -48						; size = 4
$T290617 = -44						; size = 4
__Cat$290623 = -40					; size = 1
$T290621 = -39						; size = 1
__Ptr$245970 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@2@0@Z PROC ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@31

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvPlayerOptionInfo@@PAPAV1@@stdext@@YAPAPAVCvPlayerOptionInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvPlayerOptionInfo * *,CvPlayerOptionInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245970[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T290629[ebp], edx
	mov	eax, DWORD PTR $T290629[ebp]
	mov	DWORD PTR $T290618[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245970[ebp]
	mov	DWORD PTR $T290617[ebp], ecx
	mov	dl, BYTE PTR __Cat$290623[ebp]
	mov	BYTE PTR $T290621[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245970[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@31:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlayerOptionInfo@@V?$allocator@PAVCvPlayerOptionInfo@@@std@@@2@0@Z ENDP ; std::vector<CvPlayerOptionInfo *,std::allocator<CvPlayerOptionInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvSpecialistInfo@@PAPAV1@@stdext@@YAPAPAVCvSpecialistInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvSpecialistInfo * *,CvSpecialistInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T290722 = -52						; size = 4
$T290711 = -48						; size = 4
$T290710 = -44						; size = 4
__Cat$290718 = -40					; size = 1
$T290716 = -39						; size = 1
__Ptr$245986 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@2@0@Z PROC ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@32

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvSpecialistInfo@@PAPAV1@@stdext@@YAPAPAVCvSpecialistInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvSpecialistInfo * *,CvSpecialistInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$245986[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T290722[ebp], edx
	mov	eax, DWORD PTR $T290722[ebp]
	mov	DWORD PTR $T290711[ebp], eax
	mov	ecx, DWORD PTR __Ptr$245986[ebp]
	mov	DWORD PTR $T290710[ebp], ecx
	mov	dl, BYTE PTR __Cat$290718[ebp]
	mov	BYTE PTR $T290716[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$245986[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@32:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvSpecialistInfo@@V?$allocator@PAVCvSpecialistInfo@@@std@@@2@0@Z ENDP ; std::vector<CvSpecialistInfo *,std::allocator<CvSpecialistInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvActionInfo@@PAPAV1@@stdext@@YAPAPAVCvActionInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvActionInfo * *,CvActionInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T290815 = -52						; size = 4
$T290804 = -48						; size = 4
$T290803 = -44						; size = 4
__Cat$290811 = -40					; size = 1
$T290809 = -39						; size = 1
__Ptr$246002 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@2@0@Z PROC ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@33

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvActionInfo@@PAPAV1@@stdext@@YAPAPAVCvActionInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvActionInfo * *,CvActionInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$246002[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T290815[ebp], edx
	mov	eax, DWORD PTR $T290815[ebp]
	mov	DWORD PTR $T290804[ebp], eax
	mov	ecx, DWORD PTR __Ptr$246002[ebp]
	mov	DWORD PTR $T290803[ebp], ecx
	mov	dl, BYTE PTR __Cat$290811[ebp]
	mov	BYTE PTR $T290809[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$246002[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@33:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@2@0@Z ENDP ; std::vector<CvActionInfo *,std::allocator<CvActionInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvMissionInfo@@PAPAV1@@stdext@@YAPAPAVCvMissionInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvMissionInfo * *,CvMissionInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T290908 = -52						; size = 4
$T290897 = -48						; size = 4
$T290896 = -44						; size = 4
__Cat$290903 = -40					; size = 1
$T290900 = -39						; size = 1
__Ptr$246018 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@2@0@Z PROC ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@34

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvMissionInfo@@PAPAV1@@stdext@@YAPAPAVCvMissionInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvMissionInfo * *,CvMissionInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$246018[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T290908[ebp], edx
	mov	eax, DWORD PTR $T290908[ebp]
	mov	DWORD PTR $T290897[ebp], eax
	mov	ecx, DWORD PTR __Ptr$246018[ebp]
	mov	DWORD PTR $T290896[ebp], ecx
	mov	dl, BYTE PTR __Cat$290903[ebp]
	mov	BYTE PTR $T290900[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$246018[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@34:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvMissionInfo@@V?$allocator@PAVCvMissionInfo@@@std@@@2@0@Z ENDP ; std::vector<CvMissionInfo *,std::allocator<CvMissionInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvControlInfo@@PAPAV1@@stdext@@YAPAPAVCvControlInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvControlInfo * *,CvControlInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T291001 = -52						; size = 4
$T290990 = -48						; size = 4
$T290989 = -44						; size = 4
__Cat$290996 = -40					; size = 1
$T290994 = -39						; size = 1
__Ptr$246034 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@2@0@Z PROC ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@35

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvControlInfo@@PAPAV1@@stdext@@YAPAPAVCvControlInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvControlInfo * *,CvControlInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$246034[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T291001[ebp], edx
	mov	eax, DWORD PTR $T291001[ebp]
	mov	DWORD PTR $T290990[ebp], eax
	mov	ecx, DWORD PTR __Ptr$246034[ebp]
	mov	DWORD PTR $T290989[ebp], ecx
	mov	dl, BYTE PTR __Cat$290996[ebp]
	mov	BYTE PTR $T290994[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$246034[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@35:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvControlInfo@@V?$allocator@PAVCvControlInfo@@@std@@@2@0@Z ENDP ; std::vector<CvControlInfo *,std::allocator<CvControlInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvCommandInfo@@PAPAV1@@stdext@@YAPAPAVCvCommandInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvCommandInfo * *,CvCommandInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T291094 = -52						; size = 4
$T291083 = -48						; size = 4
$T291082 = -44						; size = 4
__Cat$291089 = -40					; size = 1
$T291087 = -39						; size = 1
__Ptr$246050 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@2@0@Z PROC ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@36

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvCommandInfo@@PAPAV1@@stdext@@YAPAPAVCvCommandInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvCommandInfo * *,CvCommandInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$246050[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T291094[ebp], edx
	mov	eax, DWORD PTR $T291094[ebp]
	mov	DWORD PTR $T291083[ebp], eax
	mov	ecx, DWORD PTR __Ptr$246050[ebp]
	mov	DWORD PTR $T291082[ebp], ecx
	mov	dl, BYTE PTR __Cat$291089[ebp]
	mov	BYTE PTR $T291087[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$246050[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@36:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvCommandInfo@@V?$allocator@PAVCvCommandInfo@@@std@@@2@0@Z ENDP ; std::vector<CvCommandInfo *,std::allocator<CvCommandInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvAutomateInfo@@PAPAV1@@stdext@@YAPAPAVCvAutomateInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvAutomateInfo * *,CvAutomateInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T291187 = -52						; size = 4
$T291176 = -48						; size = 4
$T291175 = -44						; size = 4
__Cat$291183 = -40					; size = 1
$T291181 = -39						; size = 1
__Ptr$246066 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@2@0@Z PROC ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@37

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvAutomateInfo@@PAPAV1@@stdext@@YAPAPAVCvAutomateInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvAutomateInfo * *,CvAutomateInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$246066[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T291187[ebp], edx
	mov	eax, DWORD PTR $T291187[ebp]
	mov	DWORD PTR $T291176[ebp], eax
	mov	ecx, DWORD PTR __Ptr$246066[ebp]
	mov	DWORD PTR $T291175[ebp], ecx
	mov	dl, BYTE PTR __Cat$291183[ebp]
	mov	BYTE PTR $T291181[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$246066[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@37:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvAutomateInfo@@V?$allocator@PAVCvAutomateInfo@@@std@@@2@0@Z ENDP ; std::vector<CvAutomateInfo *,std::allocator<CvAutomateInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvEraInfo@@PAPAV1@@stdext@@YAPAPAVCvEraInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvEraInfo * *,CvEraInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T291280 = -52						; size = 4
$T291269 = -48						; size = 4
$T291268 = -44						; size = 4
__Cat$291276 = -40					; size = 1
$T291274 = -39						; size = 1
__Ptr$246082 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@2@0@Z PROC ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@38

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvEraInfo@@PAPAV1@@stdext@@YAPAPAVCvEraInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvEraInfo * *,CvEraInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$246082[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T291280[ebp], edx
	mov	eax, DWORD PTR $T291280[ebp]
	mov	DWORD PTR $T291269[ebp], eax
	mov	ecx, DWORD PTR __Ptr$246082[ebp]
	mov	DWORD PTR $T291268[ebp], ecx
	mov	dl, BYTE PTR __Cat$291276[ebp]
	mov	BYTE PTR $T291274[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$246082[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@38:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvEraInfo@@V?$allocator@PAVCvEraInfo@@@std@@@2@0@Z ENDP ; std::vector<CvEraInfo *,std::allocator<CvEraInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvHurryInfo@@PAPAV1@@stdext@@YAPAPAVCvHurryInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvHurryInfo * *,CvHurryInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T291373 = -52						; size = 4
$T291362 = -48						; size = 4
$T291361 = -44						; size = 4
__Cat$291369 = -40					; size = 1
$T291367 = -39						; size = 1
__Ptr$246098 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@2@0@Z PROC ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@39

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvHurryInfo@@PAPAV1@@stdext@@YAPAPAVCvHurryInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvHurryInfo * *,CvHurryInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$246098[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T291373[ebp], edx
	mov	eax, DWORD PTR $T291373[ebp]
	mov	DWORD PTR $T291362[ebp], eax
	mov	ecx, DWORD PTR __Ptr$246098[ebp]
	mov	DWORD PTR $T291361[ebp], ecx
	mov	dl, BYTE PTR __Cat$291369[ebp]
	mov	BYTE PTR $T291367[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$246098[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@39:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvHurryInfo@@V?$allocator@PAVCvHurryInfo@@@std@@@2@0@Z ENDP ; std::vector<CvHurryInfo *,std::allocator<CvHurryInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvVictoryInfo@@PAPAV1@@stdext@@YAPAPAVCvVictoryInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvVictoryInfo * *,CvVictoryInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T291466 = -52						; size = 4
$T291455 = -48						; size = 4
$T291454 = -44						; size = 4
__Cat$291462 = -40					; size = 1
$T291460 = -39						; size = 1
__Ptr$246114 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@2@0@Z PROC ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@40

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvVictoryInfo@@PAPAV1@@stdext@@YAPAPAVCvVictoryInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvVictoryInfo * *,CvVictoryInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$246114[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T291466[ebp], edx
	mov	eax, DWORD PTR $T291466[ebp]
	mov	DWORD PTR $T291455[ebp], eax
	mov	ecx, DWORD PTR __Ptr$246114[ebp]
	mov	DWORD PTR $T291454[ebp], ecx
	mov	dl, BYTE PTR __Cat$291462[ebp]
	mov	BYTE PTR $T291460[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$246114[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@40:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvVictoryInfo@@V?$allocator@PAVCvVictoryInfo@@@std@@@2@0@Z ENDP ; std::vector<CvVictoryInfo *,std::allocator<CvVictoryInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvSmallAwardInfo@@PAPAV1@@stdext@@YAPAPAVCvSmallAwardInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvSmallAwardInfo * *,CvSmallAwardInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T291559 = -52						; size = 4
$T291548 = -48						; size = 4
$T291547 = -44						; size = 4
__Cat$291555 = -40					; size = 1
$T291553 = -39						; size = 1
__Ptr$246130 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@2@0@Z PROC ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@41

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvSmallAwardInfo@@PAPAV1@@stdext@@YAPAPAVCvSmallAwardInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvSmallAwardInfo * *,CvSmallAwardInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$246130[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T291559[ebp], edx
	mov	eax, DWORD PTR $T291559[ebp]
	mov	DWORD PTR $T291548[ebp], eax
	mov	ecx, DWORD PTR __Ptr$246130[ebp]
	mov	DWORD PTR $T291547[ebp], ecx
	mov	dl, BYTE PTR __Cat$291555[ebp]
	mov	BYTE PTR $T291553[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$246130[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@41:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvSmallAwardInfo@@V?$allocator@PAVCvSmallAwardInfo@@@std@@@2@0@Z ENDP ; std::vector<CvSmallAwardInfo *,std::allocator<CvSmallAwardInfo *> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvEntityEventInfo@@PAPAV1@@stdext@@YAPAPAVCvEntityEventInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvEntityEventInfo * *,CvEntityEventInfo * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T291652 = -52						; size = 4
$T291641 = -48						; size = 4
$T291640 = -44						; size = 4
__Cat$291648 = -40					; size = 1
$T291646 = -39						; size = 1
__Ptr$246146 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@2@0@Z PROC ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@42

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvEntityEventInfo@@PAPAV1@@stdext@@YAPAPAVCvEntityEventInfo@@PAPAV1@00@Z ; stdext::unchecked_copy<CvEntityEventInfo * *,CvEntityEventInfo * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$246146[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T291652[ebp], edx
	mov	eax, DWORD PTR $T291652[ebp]
	mov	DWORD PTR $T291641[ebp], eax
	mov	ecx, DWORD PTR __Ptr$246146[ebp]
	mov	DWORD PTR $T291640[ebp], ecx
	mov	dl, BYTE PTR __Cat$291648[ebp]
	mov	BYTE PTR $T291646[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$246146[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@42:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@2@V?$_Vector_const_iterator@PAVCvEntityEventInfo@@V?$allocator@PAVCvEntityEventInfo@@@std@@@2@0@Z ENDP ; std::vector<CvEntityEventInfo *,std::allocator<CvEntityEventInfo *> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__catchsym$??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z$0
__unwindtable$??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z$5
__ehfuncinfo$??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
_this$ = -136						; size = 4
$T291655 = -28						; size = 4
__Before$246984 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z PROC ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Insert<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Const_iterator<0> >, COMDAT
; _this$ = ecx

; 762  : 		void _Insert(const_iterator _Where,

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 120				; 00000078H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 763  : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 764  : 		{	// insert [_First, _Last) at _Where, forward iterators
; 765  : 
; 766  :  #if _HAS_ITERATOR_DEBUGGING
; 767  : 		_DEBUG_RANGE(_First, _Last);
; 768  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 769  : 
; 770  : 		_Iter _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 771  : 
; 772  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 773  : 		for (; _First != _Last; ++_First)

	jmp	SHORT $LN18@Insert@3
$LN16@Insert@3:
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __First$[ebp], edx
$LN18@Insert@3:
	mov	eax, DWORD PTR __First$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN4@Insert@3

; 774  : 			_Insert(_Where, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@12@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Insert
	jmp	SHORT $LN16@Insert@3
$LN4@Insert@3:
	jmp	SHORT $LN10@Insert@3
__catch$??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z$0:

; 775  : 		_CATCH_ALL
; 776  : 		for (; _Next != _First; ++_Next)

	jmp	SHORT $LN52@Insert@3
$LN50@Insert@3:
	mov	eax, DWORD PTR __Next$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Next$[ebp], ecx
$LN52@Insert@3:
	mov	edx, DWORD PTR __Next$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __First$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@Insert@3

; 777  : 			{	// undo inserts
; 778  : 			const_iterator _Before = _Where;

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Before$246984[ebp], eax

; 779  : 			erase(--_Before);

	mov	ecx, DWORD PTR __Before$246984[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Before$246984[ebp], edx
	mov	eax, DWORD PTR __Before$246984[ebp]
	push	eax
	lea	ecx, DWORD PTR $T291655[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::erase

; 780  : 			}

	jmp	SHORT $LN50@Insert@3
$LN1@Insert@3:

; 781  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 782  : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Insert@3
	ret	0
$LN10@Insert@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Insert@3:

; 783  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-140]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Insert@V?$_Const_iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAEXV?$_Const_iterator@$0A@@01@00Uforward_iterator_tag@1@@Z ENDP ; std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Insert<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Const_iterator<0> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T291877 = -28						; size = 4
__Vptr$291883 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,unsigned int,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil
$LN5@Uninit_fil:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 4
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$291883[ebp], eax
	mov	ecx, DWORD PTR __Vptr$291883[ebp]
	mov	DWORD PTR $T291877[ebp], ecx
	cmp	DWORD PTR $T291877[ebp], 0
	je	SHORT $LN18@Uninit_fil
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T291877[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR $T291877[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN14@Uninit_fil
$LN18@Uninit_fil:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_fil:
	jmp	SHORT $LN5@Uninit_fil
$LN4@Uninit_fil:
	jmp	SHORT $LN10@Uninit_fil
__catch$??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil
$LN2@Uninit_fil:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 4
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_fil:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil

; 407  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_fil
$LN1@Uninit_fil:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil
	ret	0
$LN10@Uninit_fil:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@IV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAXPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@IABV120@AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,unsigned int,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0>,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVCvInterfaceModeInfo@@PAPAV1@@stdext@@YAPAPAVCvInterfaceModeInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T291924 = -26						; size = 1
$T291923 = -25						; size = 1
$T291922 = -24						; size = 4
$T291921 = -20						; size = 4
__Off$291918 = -16					; size = 4
__Result$291919 = -12					; size = 4
__Cat$291910 = -4					; size = 1
$T291906 = -3						; size = 1
$T291905 = -2						; size = 1
$T291904 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvInterfaceModeInfo@@PAPAV1@@stdext@@YAPAPAVCvInterfaceModeInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvInterfaceModeInfo * *,CvInterfaceModeInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T291904[ebp], al
	mov	cl, BYTE PTR __Cat$291910[ebp]
	mov	BYTE PTR $T291905[ebp], cl
	mov	dl, BYTE PTR $T291904[ebp]
	mov	BYTE PTR $T291924[ebp], dl
	mov	al, BYTE PTR $T291906[ebp]
	mov	BYTE PTR $T291923[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T291922[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T291921[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T291921[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$291918[ebp], eax
	mov	ecx, DWORD PTR __Off$291918[ebp]
	mov	edx, DWORD PTR $T291922[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$291919[ebp], eax
	cmp	DWORD PTR __Off$291918[ebp], 0
	jle	SHORT $LN8@unchecked_
	mov	ecx, DWORD PTR __Off$291918[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T291921[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$291918[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T291922[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_:
	mov	eax, DWORD PTR __Result$291919[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvInterfaceModeInfo@@PAPAV1@@stdext@@YAPAPAVCvInterfaceModeInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvInterfaceModeInfo * *,CvInterfaceModeInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvColorInfo@@PAPAV1@@stdext@@YAPAPAVCvColorInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T291947 = -26						; size = 1
$T291946 = -25						; size = 1
$T291945 = -24						; size = 4
$T291944 = -20						; size = 4
__Off$291941 = -16					; size = 4
__Result$291942 = -12					; size = 4
__Cat$291933 = -4					; size = 1
$T291929 = -3						; size = 1
$T291928 = -2						; size = 1
$T291927 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvColorInfo@@PAPAV1@@stdext@@YAPAPAVCvColorInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvColorInfo * *,CvColorInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T291927[ebp], al
	mov	cl, BYTE PTR __Cat$291933[ebp]
	mov	BYTE PTR $T291928[ebp], cl
	mov	dl, BYTE PTR $T291927[ebp]
	mov	BYTE PTR $T291947[ebp], dl
	mov	al, BYTE PTR $T291929[ebp]
	mov	BYTE PTR $T291946[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T291945[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T291944[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T291944[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$291941[ebp], eax
	mov	ecx, DWORD PTR __Off$291941[ebp]
	mov	edx, DWORD PTR $T291945[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$291942[ebp], eax
	cmp	DWORD PTR __Off$291941[ebp], 0
	jle	SHORT $LN8@unchecked_@2
	mov	ecx, DWORD PTR __Off$291941[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T291944[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$291941[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T291945[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@2:
	mov	eax, DWORD PTR __Result$291942[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvColorInfo@@PAPAV1@@stdext@@YAPAPAVCvColorInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvColorInfo * *,CvColorInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvPlayerColorInfo@@PAPAV1@@stdext@@YAPAPAVCvPlayerColorInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T291970 = -26						; size = 1
$T291969 = -25						; size = 1
$T291968 = -24						; size = 4
$T291967 = -20						; size = 4
__Off$291964 = -16					; size = 4
__Result$291965 = -12					; size = 4
__Cat$291954 = -4					; size = 1
$T291952 = -3						; size = 1
$T291951 = -2						; size = 1
$T291950 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvPlayerColorInfo@@PAPAV1@@stdext@@YAPAPAVCvPlayerColorInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvPlayerColorInfo * *,CvPlayerColorInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T291950[ebp], al
	mov	cl, BYTE PTR __Cat$291954[ebp]
	mov	BYTE PTR $T291951[ebp], cl
	mov	dl, BYTE PTR $T291950[ebp]
	mov	BYTE PTR $T291970[ebp], dl
	mov	al, BYTE PTR $T291952[ebp]
	mov	BYTE PTR $T291969[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T291968[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T291967[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T291967[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$291964[ebp], eax
	mov	ecx, DWORD PTR __Off$291964[ebp]
	mov	edx, DWORD PTR $T291968[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$291965[ebp], eax
	cmp	DWORD PTR __Off$291964[ebp], 0
	jle	SHORT $LN8@unchecked_@3
	mov	ecx, DWORD PTR __Off$291964[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T291967[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$291964[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T291968[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@3:
	mov	eax, DWORD PTR __Result$291965[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvPlayerColorInfo@@PAPAV1@@stdext@@YAPAPAVCvPlayerColorInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvPlayerColorInfo * *,CvPlayerColorInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvTerrainInfo@@PAPAV1@@stdext@@YAPAPAVCvTerrainInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T291993 = -26						; size = 1
$T291992 = -25						; size = 1
$T291991 = -24						; size = 4
$T291990 = -20						; size = 4
__Off$291987 = -16					; size = 4
__Result$291988 = -12					; size = 4
__Cat$291978 = -4					; size = 1
$T291975 = -3						; size = 1
$T291974 = -2						; size = 1
$T291973 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvTerrainInfo@@PAPAV1@@stdext@@YAPAPAVCvTerrainInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvTerrainInfo * *,CvTerrainInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T291973[ebp], al
	mov	cl, BYTE PTR __Cat$291978[ebp]
	mov	BYTE PTR $T291974[ebp], cl
	mov	dl, BYTE PTR $T291973[ebp]
	mov	BYTE PTR $T291993[ebp], dl
	mov	al, BYTE PTR $T291975[ebp]
	mov	BYTE PTR $T291992[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T291991[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T291990[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T291990[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$291987[ebp], eax
	mov	ecx, DWORD PTR __Off$291987[ebp]
	mov	edx, DWORD PTR $T291991[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$291988[ebp], eax
	cmp	DWORD PTR __Off$291987[ebp], 0
	jle	SHORT $LN8@unchecked_@4
	mov	ecx, DWORD PTR __Off$291987[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T291990[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$291987[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T291991[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@4:
	mov	eax, DWORD PTR __Result$291988[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvTerrainInfo@@PAPAV1@@stdext@@YAPAPAVCvTerrainInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvTerrainInfo * *,CvTerrainInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvYieldInfo@@PAPAV1@@stdext@@YAPAPAVCvYieldInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292016 = -26						; size = 1
$T292015 = -25						; size = 1
$T292014 = -24						; size = 4
$T292013 = -20						; size = 4
__Off$292010 = -16					; size = 4
__Result$292011 = -12					; size = 4
__Cat$292001 = -4					; size = 1
$T291998 = -3						; size = 1
$T291997 = -2						; size = 1
$T291996 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvYieldInfo@@PAPAV1@@stdext@@YAPAPAVCvYieldInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvYieldInfo * *,CvYieldInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T291996[ebp], al
	mov	cl, BYTE PTR __Cat$292001[ebp]
	mov	BYTE PTR $T291997[ebp], cl
	mov	dl, BYTE PTR $T291996[ebp]
	mov	BYTE PTR $T292016[ebp], dl
	mov	al, BYTE PTR $T291998[ebp]
	mov	BYTE PTR $T292015[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292014[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292013[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292013[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292010[ebp], eax
	mov	ecx, DWORD PTR __Off$292010[ebp]
	mov	edx, DWORD PTR $T292014[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292011[ebp], eax
	cmp	DWORD PTR __Off$292010[ebp], 0
	jle	SHORT $LN8@unchecked_@5
	mov	ecx, DWORD PTR __Off$292010[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292013[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292010[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292014[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@5:
	mov	eax, DWORD PTR __Result$292011[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvYieldInfo@@PAPAV1@@stdext@@YAPAPAVCvYieldInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvYieldInfo * *,CvYieldInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvRouteInfo@@PAPAV1@@stdext@@YAPAPAVCvRouteInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292039 = -26						; size = 1
$T292038 = -25						; size = 1
$T292037 = -24						; size = 4
$T292036 = -20						; size = 4
__Off$292033 = -16					; size = 4
__Result$292034 = -12					; size = 4
__Cat$292024 = -4					; size = 1
$T292021 = -3						; size = 1
$T292020 = -2						; size = 1
$T292019 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvRouteInfo@@PAPAV1@@stdext@@YAPAPAVCvRouteInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvRouteInfo * *,CvRouteInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292019[ebp], al
	mov	cl, BYTE PTR __Cat$292024[ebp]
	mov	BYTE PTR $T292020[ebp], cl
	mov	dl, BYTE PTR $T292019[ebp]
	mov	BYTE PTR $T292039[ebp], dl
	mov	al, BYTE PTR $T292021[ebp]
	mov	BYTE PTR $T292038[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292037[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292036[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292036[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292033[ebp], eax
	mov	ecx, DWORD PTR __Off$292033[ebp]
	mov	edx, DWORD PTR $T292037[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292034[ebp], eax
	cmp	DWORD PTR __Off$292033[ebp], 0
	jle	SHORT $LN8@unchecked_@6
	mov	ecx, DWORD PTR __Off$292033[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292036[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292033[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292037[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@6:
	mov	eax, DWORD PTR __Result$292034[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvRouteInfo@@PAPAV1@@stdext@@YAPAPAVCvRouteInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvRouteInfo * *,CvRouteInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvFeatureInfo@@PAPAV1@@stdext@@YAPAPAVCvFeatureInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292062 = -26						; size = 1
$T292061 = -25						; size = 1
$T292060 = -24						; size = 4
$T292059 = -20						; size = 4
__Off$292056 = -16					; size = 4
__Result$292057 = -12					; size = 4
__Cat$292047 = -4					; size = 1
$T292044 = -3						; size = 1
$T292043 = -2						; size = 1
$T292042 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvFeatureInfo@@PAPAV1@@stdext@@YAPAPAVCvFeatureInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvFeatureInfo * *,CvFeatureInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292042[ebp], al
	mov	cl, BYTE PTR __Cat$292047[ebp]
	mov	BYTE PTR $T292043[ebp], cl
	mov	dl, BYTE PTR $T292042[ebp]
	mov	BYTE PTR $T292062[ebp], dl
	mov	al, BYTE PTR $T292044[ebp]
	mov	BYTE PTR $T292061[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292060[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292059[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292059[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292056[ebp], eax
	mov	ecx, DWORD PTR __Off$292056[ebp]
	mov	edx, DWORD PTR $T292060[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292057[ebp], eax
	cmp	DWORD PTR __Off$292056[ebp], 0
	jle	SHORT $LN8@unchecked_@7
	mov	ecx, DWORD PTR __Off$292056[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292059[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292056[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292060[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@7:
	mov	eax, DWORD PTR __Result$292057[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvFeatureInfo@@PAPAV1@@stdext@@YAPAPAVCvFeatureInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvFeatureInfo * *,CvFeatureInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvResourceClassInfo@@PAPAV1@@stdext@@YAPAPAVCvResourceClassInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292085 = -26						; size = 1
$T292084 = -25						; size = 1
$T292083 = -24						; size = 4
$T292082 = -20						; size = 4
__Off$292079 = -16					; size = 4
__Result$292080 = -12					; size = 4
__Cat$292070 = -4					; size = 1
$T292067 = -3						; size = 1
$T292066 = -2						; size = 1
$T292065 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvResourceClassInfo@@PAPAV1@@stdext@@YAPAPAVCvResourceClassInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvResourceClassInfo * *,CvResourceClassInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292065[ebp], al
	mov	cl, BYTE PTR __Cat$292070[ebp]
	mov	BYTE PTR $T292066[ebp], cl
	mov	dl, BYTE PTR $T292065[ebp]
	mov	BYTE PTR $T292085[ebp], dl
	mov	al, BYTE PTR $T292067[ebp]
	mov	BYTE PTR $T292084[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292083[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292082[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292082[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292079[ebp], eax
	mov	ecx, DWORD PTR __Off$292079[ebp]
	mov	edx, DWORD PTR $T292083[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292080[ebp], eax
	cmp	DWORD PTR __Off$292079[ebp], 0
	jle	SHORT $LN8@unchecked_@8
	mov	ecx, DWORD PTR __Off$292079[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292082[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292079[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292083[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@8:
	mov	eax, DWORD PTR __Result$292080[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvResourceClassInfo@@PAPAV1@@stdext@@YAPAPAVCvResourceClassInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvResourceClassInfo * *,CvResourceClassInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvResourceInfo@@PAPAV1@@stdext@@YAPAPAVCvResourceInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292108 = -26						; size = 1
$T292107 = -25						; size = 1
$T292106 = -24						; size = 4
$T292105 = -20						; size = 4
__Off$292102 = -16					; size = 4
__Result$292103 = -12					; size = 4
__Cat$292093 = -4					; size = 1
$T292090 = -3						; size = 1
$T292089 = -2						; size = 1
$T292088 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvResourceInfo@@PAPAV1@@stdext@@YAPAPAVCvResourceInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvResourceInfo * *,CvResourceInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292088[ebp], al
	mov	cl, BYTE PTR __Cat$292093[ebp]
	mov	BYTE PTR $T292089[ebp], cl
	mov	dl, BYTE PTR $T292088[ebp]
	mov	BYTE PTR $T292108[ebp], dl
	mov	al, BYTE PTR $T292090[ebp]
	mov	BYTE PTR $T292107[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292106[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292105[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292105[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292102[ebp], eax
	mov	ecx, DWORD PTR __Off$292102[ebp]
	mov	edx, DWORD PTR $T292106[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292103[ebp], eax
	cmp	DWORD PTR __Off$292102[ebp], 0
	jle	SHORT $LN8@unchecked_@9
	mov	ecx, DWORD PTR __Off$292102[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292105[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292102[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292106[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@9:
	mov	eax, DWORD PTR __Result$292103[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvResourceInfo@@PAPAV1@@stdext@@YAPAPAVCvResourceInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvResourceInfo * *,CvResourceInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvBuildInfo@@PAPAV1@@stdext@@YAPAPAVCvBuildInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292131 = -26						; size = 1
$T292130 = -25						; size = 1
$T292129 = -24						; size = 4
$T292128 = -20						; size = 4
__Off$292125 = -16					; size = 4
__Result$292126 = -12					; size = 4
__Cat$292116 = -4					; size = 1
$T292113 = -3						; size = 1
$T292112 = -2						; size = 1
$T292111 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvBuildInfo@@PAPAV1@@stdext@@YAPAPAVCvBuildInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvBuildInfo * *,CvBuildInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292111[ebp], al
	mov	cl, BYTE PTR __Cat$292116[ebp]
	mov	BYTE PTR $T292112[ebp], cl
	mov	dl, BYTE PTR $T292111[ebp]
	mov	BYTE PTR $T292131[ebp], dl
	mov	al, BYTE PTR $T292113[ebp]
	mov	BYTE PTR $T292130[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292129[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292128[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292128[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292125[ebp], eax
	mov	ecx, DWORD PTR __Off$292125[ebp]
	mov	edx, DWORD PTR $T292129[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292126[ebp], eax
	cmp	DWORD PTR __Off$292125[ebp], 0
	jle	SHORT $LN8@unchecked_@10
	mov	ecx, DWORD PTR __Off$292125[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292128[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292125[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292129[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@10:
	mov	eax, DWORD PTR __Result$292126[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvBuildInfo@@PAPAV1@@stdext@@YAPAPAVCvBuildInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvBuildInfo * *,CvBuildInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvHandicapInfo@@PAPAV1@@stdext@@YAPAPAVCvHandicapInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292154 = -26						; size = 1
$T292153 = -25						; size = 1
$T292152 = -24						; size = 4
$T292151 = -20						; size = 4
__Off$292148 = -16					; size = 4
__Result$292149 = -12					; size = 4
__Cat$292139 = -4					; size = 1
$T292136 = -3						; size = 1
$T292135 = -2						; size = 1
$T292134 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvHandicapInfo@@PAPAV1@@stdext@@YAPAPAVCvHandicapInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvHandicapInfo * *,CvHandicapInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292134[ebp], al
	mov	cl, BYTE PTR __Cat$292139[ebp]
	mov	BYTE PTR $T292135[ebp], cl
	mov	dl, BYTE PTR $T292134[ebp]
	mov	BYTE PTR $T292154[ebp], dl
	mov	al, BYTE PTR $T292136[ebp]
	mov	BYTE PTR $T292153[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292152[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292151[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292151[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292148[ebp], eax
	mov	ecx, DWORD PTR __Off$292148[ebp]
	mov	edx, DWORD PTR $T292152[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292149[ebp], eax
	cmp	DWORD PTR __Off$292148[ebp], 0
	jle	SHORT $LN8@unchecked_@11
	mov	ecx, DWORD PTR __Off$292148[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292151[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292148[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292152[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@11:
	mov	eax, DWORD PTR __Result$292149[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvHandicapInfo@@PAPAV1@@stdext@@YAPAPAVCvHandicapInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvHandicapInfo * *,CvHandicapInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvGameSpeedInfo@@PAPAV1@@stdext@@YAPAPAVCvGameSpeedInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292177 = -26						; size = 1
$T292176 = -25						; size = 1
$T292175 = -24						; size = 4
$T292174 = -20						; size = 4
__Off$292171 = -16					; size = 4
__Result$292172 = -12					; size = 4
__Cat$292162 = -4					; size = 1
$T292159 = -3						; size = 1
$T292158 = -2						; size = 1
$T292157 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvGameSpeedInfo@@PAPAV1@@stdext@@YAPAPAVCvGameSpeedInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvGameSpeedInfo * *,CvGameSpeedInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292157[ebp], al
	mov	cl, BYTE PTR __Cat$292162[ebp]
	mov	BYTE PTR $T292158[ebp], cl
	mov	dl, BYTE PTR $T292157[ebp]
	mov	BYTE PTR $T292177[ebp], dl
	mov	al, BYTE PTR $T292159[ebp]
	mov	BYTE PTR $T292176[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292175[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292174[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292174[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292171[ebp], eax
	mov	ecx, DWORD PTR __Off$292171[ebp]
	mov	edx, DWORD PTR $T292175[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292172[ebp], eax
	cmp	DWORD PTR __Off$292171[ebp], 0
	jle	SHORT $LN8@unchecked_@12
	mov	ecx, DWORD PTR __Off$292171[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292174[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292171[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292175[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@12:
	mov	eax, DWORD PTR __Result$292172[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvGameSpeedInfo@@PAPAV1@@stdext@@YAPAPAVCvGameSpeedInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvGameSpeedInfo * *,CvGameSpeedInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvTurnTimerInfo@@PAPAV1@@stdext@@YAPAPAVCvTurnTimerInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292200 = -26						; size = 1
$T292199 = -25						; size = 1
$T292198 = -24						; size = 4
$T292197 = -20						; size = 4
__Off$292194 = -16					; size = 4
__Result$292195 = -12					; size = 4
__Cat$292185 = -4					; size = 1
$T292182 = -3						; size = 1
$T292181 = -2						; size = 1
$T292180 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvTurnTimerInfo@@PAPAV1@@stdext@@YAPAPAVCvTurnTimerInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvTurnTimerInfo * *,CvTurnTimerInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292180[ebp], al
	mov	cl, BYTE PTR __Cat$292185[ebp]
	mov	BYTE PTR $T292181[ebp], cl
	mov	dl, BYTE PTR $T292180[ebp]
	mov	BYTE PTR $T292200[ebp], dl
	mov	al, BYTE PTR $T292182[ebp]
	mov	BYTE PTR $T292199[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292198[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292197[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292197[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292194[ebp], eax
	mov	ecx, DWORD PTR __Off$292194[ebp]
	mov	edx, DWORD PTR $T292198[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292195[ebp], eax
	cmp	DWORD PTR __Off$292194[ebp], 0
	jle	SHORT $LN8@unchecked_@13
	mov	ecx, DWORD PTR __Off$292194[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292197[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292194[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292198[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@13:
	mov	eax, DWORD PTR __Result$292195[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvTurnTimerInfo@@PAPAV1@@stdext@@YAPAPAVCvTurnTimerInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvTurnTimerInfo * *,CvTurnTimerInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvCivilizationInfo@@PAPAV1@@stdext@@YAPAPAVCvCivilizationInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292223 = -26						; size = 1
$T292222 = -25						; size = 1
$T292221 = -24						; size = 4
$T292220 = -20						; size = 4
__Off$292217 = -16					; size = 4
__Result$292218 = -12					; size = 4
__Cat$292208 = -4					; size = 1
$T292205 = -3						; size = 1
$T292204 = -2						; size = 1
$T292203 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvCivilizationInfo@@PAPAV1@@stdext@@YAPAPAVCvCivilizationInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvCivilizationInfo * *,CvCivilizationInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292203[ebp], al
	mov	cl, BYTE PTR __Cat$292208[ebp]
	mov	BYTE PTR $T292204[ebp], cl
	mov	dl, BYTE PTR $T292203[ebp]
	mov	BYTE PTR $T292223[ebp], dl
	mov	al, BYTE PTR $T292205[ebp]
	mov	BYTE PTR $T292222[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292221[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292220[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292220[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292217[ebp], eax
	mov	ecx, DWORD PTR __Off$292217[ebp]
	mov	edx, DWORD PTR $T292221[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292218[ebp], eax
	cmp	DWORD PTR __Off$292217[ebp], 0
	jle	SHORT $LN8@unchecked_@14
	mov	ecx, DWORD PTR __Off$292217[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292220[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292217[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292221[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@14:
	mov	eax, DWORD PTR __Result$292218[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvCivilizationInfo@@PAPAV1@@stdext@@YAPAPAVCvCivilizationInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvCivilizationInfo * *,CvCivilizationInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvMinorCivInfo@@PAPAV1@@stdext@@YAPAPAVCvMinorCivInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292246 = -26						; size = 1
$T292245 = -25						; size = 1
$T292244 = -24						; size = 4
$T292243 = -20						; size = 4
__Off$292239 = -16					; size = 4
__Result$292241 = -12					; size = 4
__Cat$292231 = -4					; size = 1
$T292228 = -3						; size = 1
$T292227 = -2						; size = 1
$T292226 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvMinorCivInfo@@PAPAV1@@stdext@@YAPAPAVCvMinorCivInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvMinorCivInfo * *,CvMinorCivInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292226[ebp], al
	mov	cl, BYTE PTR __Cat$292231[ebp]
	mov	BYTE PTR $T292227[ebp], cl
	mov	dl, BYTE PTR $T292226[ebp]
	mov	BYTE PTR $T292246[ebp], dl
	mov	al, BYTE PTR $T292228[ebp]
	mov	BYTE PTR $T292245[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292244[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292243[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292243[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292239[ebp], eax
	mov	ecx, DWORD PTR __Off$292239[ebp]
	mov	edx, DWORD PTR $T292244[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292241[ebp], eax
	cmp	DWORD PTR __Off$292239[ebp], 0
	jle	SHORT $LN8@unchecked_@15
	mov	ecx, DWORD PTR __Off$292239[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292243[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292239[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292244[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@15:
	mov	eax, DWORD PTR __Result$292241[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvMinorCivInfo@@PAPAV1@@stdext@@YAPAPAVCvMinorCivInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvMinorCivInfo * *,CvMinorCivInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvLeaderHeadInfo@@PAPAV1@@stdext@@YAPAPAVCvLeaderHeadInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292269 = -26						; size = 1
$T292268 = -25						; size = 1
$T292267 = -24						; size = 4
$T292266 = -20						; size = 4
__Off$292262 = -16					; size = 4
__Result$292263 = -12					; size = 4
__Cat$292254 = -4					; size = 1
$T292251 = -3						; size = 1
$T292250 = -2						; size = 1
$T292249 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvLeaderHeadInfo@@PAPAV1@@stdext@@YAPAPAVCvLeaderHeadInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvLeaderHeadInfo * *,CvLeaderHeadInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292249[ebp], al
	mov	cl, BYTE PTR __Cat$292254[ebp]
	mov	BYTE PTR $T292250[ebp], cl
	mov	dl, BYTE PTR $T292249[ebp]
	mov	BYTE PTR $T292269[ebp], dl
	mov	al, BYTE PTR $T292251[ebp]
	mov	BYTE PTR $T292268[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292267[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292266[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292266[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292262[ebp], eax
	mov	ecx, DWORD PTR __Off$292262[ebp]
	mov	edx, DWORD PTR $T292267[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292263[ebp], eax
	cmp	DWORD PTR __Off$292262[ebp], 0
	jle	SHORT $LN8@unchecked_@16
	mov	ecx, DWORD PTR __Off$292262[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292266[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292262[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292267[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@16:
	mov	eax, DWORD PTR __Result$292263[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvLeaderHeadInfo@@PAPAV1@@stdext@@YAPAPAVCvLeaderHeadInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvLeaderHeadInfo * *,CvLeaderHeadInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvProcessInfo@@PAPAV1@@stdext@@YAPAPAVCvProcessInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292292 = -26						; size = 1
$T292291 = -25						; size = 1
$T292290 = -24						; size = 4
$T292289 = -20						; size = 4
__Off$292285 = -16					; size = 4
__Result$292286 = -12					; size = 4
__Cat$292277 = -4					; size = 1
$T292274 = -3						; size = 1
$T292273 = -2						; size = 1
$T292272 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvProcessInfo@@PAPAV1@@stdext@@YAPAPAVCvProcessInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvProcessInfo * *,CvProcessInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292272[ebp], al
	mov	cl, BYTE PTR __Cat$292277[ebp]
	mov	BYTE PTR $T292273[ebp], cl
	mov	dl, BYTE PTR $T292272[ebp]
	mov	BYTE PTR $T292292[ebp], dl
	mov	al, BYTE PTR $T292274[ebp]
	mov	BYTE PTR $T292291[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292290[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292289[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292289[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292285[ebp], eax
	mov	ecx, DWORD PTR __Off$292285[ebp]
	mov	edx, DWORD PTR $T292290[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292286[ebp], eax
	cmp	DWORD PTR __Off$292285[ebp], 0
	jle	SHORT $LN8@unchecked_@17
	mov	ecx, DWORD PTR __Off$292285[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292289[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292285[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292290[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@17:
	mov	eax, DWORD PTR __Result$292286[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvProcessInfo@@PAPAV1@@stdext@@YAPAPAVCvProcessInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvProcessInfo * *,CvProcessInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvVoteInfo@@PAPAV1@@stdext@@YAPAPAVCvVoteInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292315 = -26						; size = 1
$T292314 = -25						; size = 1
$T292313 = -24						; size = 4
$T292312 = -20						; size = 4
__Off$292308 = -16					; size = 4
__Result$292309 = -12					; size = 4
__Cat$292300 = -4					; size = 1
$T292297 = -3						; size = 1
$T292296 = -2						; size = 1
$T292295 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvVoteInfo@@PAPAV1@@stdext@@YAPAPAVCvVoteInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvVoteInfo * *,CvVoteInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292295[ebp], al
	mov	cl, BYTE PTR __Cat$292300[ebp]
	mov	BYTE PTR $T292296[ebp], cl
	mov	dl, BYTE PTR $T292295[ebp]
	mov	BYTE PTR $T292315[ebp], dl
	mov	al, BYTE PTR $T292297[ebp]
	mov	BYTE PTR $T292314[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292313[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292312[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292312[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292308[ebp], eax
	mov	ecx, DWORD PTR __Off$292308[ebp]
	mov	edx, DWORD PTR $T292313[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292309[ebp], eax
	cmp	DWORD PTR __Off$292308[ebp], 0
	jle	SHORT $LN8@unchecked_@18
	mov	ecx, DWORD PTR __Off$292308[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292312[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292308[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292313[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@18:
	mov	eax, DWORD PTR __Result$292309[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvVoteInfo@@PAPAV1@@stdext@@YAPAPAVCvVoteInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvVoteInfo * *,CvVoteInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvBuildingClassInfo@@PAPAV1@@stdext@@YAPAPAVCvBuildingClassInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292338 = -26						; size = 1
$T292337 = -25						; size = 1
$T292336 = -24						; size = 4
$T292335 = -20						; size = 4
__Off$292331 = -16					; size = 4
__Result$292332 = -12					; size = 4
__Cat$292323 = -4					; size = 1
$T292320 = -3						; size = 1
$T292319 = -2						; size = 1
$T292318 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvBuildingClassInfo@@PAPAV1@@stdext@@YAPAPAVCvBuildingClassInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvBuildingClassInfo * *,CvBuildingClassInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292318[ebp], al
	mov	cl, BYTE PTR __Cat$292323[ebp]
	mov	BYTE PTR $T292319[ebp], cl
	mov	dl, BYTE PTR $T292318[ebp]
	mov	BYTE PTR $T292338[ebp], dl
	mov	al, BYTE PTR $T292320[ebp]
	mov	BYTE PTR $T292337[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292336[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292335[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292335[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292331[ebp], eax
	mov	ecx, DWORD PTR __Off$292331[ebp]
	mov	edx, DWORD PTR $T292336[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292332[ebp], eax
	cmp	DWORD PTR __Off$292331[ebp], 0
	jle	SHORT $LN8@unchecked_@19
	mov	ecx, DWORD PTR __Off$292331[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292335[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292331[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292336[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@19:
	mov	eax, DWORD PTR __Result$292332[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvBuildingClassInfo@@PAPAV1@@stdext@@YAPAPAVCvBuildingClassInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvBuildingClassInfo * *,CvBuildingClassInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvUnitClassInfo@@PAPAV1@@stdext@@YAPAPAVCvUnitClassInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292361 = -26						; size = 1
$T292360 = -25						; size = 1
$T292359 = -24						; size = 4
$T292358 = -20						; size = 4
__Off$292354 = -16					; size = 4
__Result$292355 = -12					; size = 4
__Cat$292346 = -4					; size = 1
$T292343 = -3						; size = 1
$T292342 = -2						; size = 1
$T292341 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvUnitClassInfo@@PAPAV1@@stdext@@YAPAPAVCvUnitClassInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvUnitClassInfo * *,CvUnitClassInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292341[ebp], al
	mov	cl, BYTE PTR __Cat$292346[ebp]
	mov	BYTE PTR $T292342[ebp], cl
	mov	dl, BYTE PTR $T292341[ebp]
	mov	BYTE PTR $T292361[ebp], dl
	mov	al, BYTE PTR $T292343[ebp]
	mov	BYTE PTR $T292360[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292359[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292358[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292358[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292354[ebp], eax
	mov	ecx, DWORD PTR __Off$292354[ebp]
	mov	edx, DWORD PTR $T292359[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292355[ebp], eax
	cmp	DWORD PTR __Off$292354[ebp], 0
	jle	SHORT $LN8@unchecked_@20
	mov	ecx, DWORD PTR __Off$292354[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292358[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292354[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292359[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@20:
	mov	eax, DWORD PTR __Result$292355[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvUnitClassInfo@@PAPAV1@@stdext@@YAPAPAVCvUnitClassInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvUnitClassInfo * *,CvUnitClassInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvSpecialUnitInfo@@PAPAV1@@stdext@@YAPAPAVCvSpecialUnitInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292384 = -26						; size = 1
$T292383 = -25						; size = 1
$T292382 = -24						; size = 4
$T292381 = -20						; size = 4
__Off$292377 = -16					; size = 4
__Result$292378 = -12					; size = 4
__Cat$292369 = -4					; size = 1
$T292366 = -3						; size = 1
$T292365 = -2						; size = 1
$T292364 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvSpecialUnitInfo@@PAPAV1@@stdext@@YAPAPAVCvSpecialUnitInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvSpecialUnitInfo * *,CvSpecialUnitInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292364[ebp], al
	mov	cl, BYTE PTR __Cat$292369[ebp]
	mov	BYTE PTR $T292365[ebp], cl
	mov	dl, BYTE PTR $T292364[ebp]
	mov	BYTE PTR $T292384[ebp], dl
	mov	al, BYTE PTR $T292366[ebp]
	mov	BYTE PTR $T292383[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292382[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292381[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292381[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292377[ebp], eax
	mov	ecx, DWORD PTR __Off$292377[ebp]
	mov	edx, DWORD PTR $T292382[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292378[ebp], eax
	cmp	DWORD PTR __Off$292377[ebp], 0
	jle	SHORT $LN8@unchecked_@21
	mov	ecx, DWORD PTR __Off$292377[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292381[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292377[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292382[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@21:
	mov	eax, DWORD PTR __Result$292378[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvSpecialUnitInfo@@PAPAV1@@stdext@@YAPAPAVCvSpecialUnitInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvSpecialUnitInfo * *,CvSpecialUnitInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvVoteSourceInfo@@PAPAV1@@stdext@@YAPAPAVCvVoteSourceInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292407 = -26						; size = 1
$T292406 = -25						; size = 1
$T292405 = -24						; size = 4
$T292404 = -20						; size = 4
__Off$292400 = -16					; size = 4
__Result$292401 = -12					; size = 4
__Cat$292392 = -4					; size = 1
$T292389 = -3						; size = 1
$T292388 = -2						; size = 1
$T292387 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvVoteSourceInfo@@PAPAV1@@stdext@@YAPAPAVCvVoteSourceInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvVoteSourceInfo * *,CvVoteSourceInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292387[ebp], al
	mov	cl, BYTE PTR __Cat$292392[ebp]
	mov	BYTE PTR $T292388[ebp], cl
	mov	dl, BYTE PTR $T292387[ebp]
	mov	BYTE PTR $T292407[ebp], dl
	mov	al, BYTE PTR $T292389[ebp]
	mov	BYTE PTR $T292406[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292405[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292404[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292404[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292400[ebp], eax
	mov	ecx, DWORD PTR __Off$292400[ebp]
	mov	edx, DWORD PTR $T292405[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292401[ebp], eax
	cmp	DWORD PTR __Off$292400[ebp], 0
	jle	SHORT $LN8@unchecked_@22
	mov	ecx, DWORD PTR __Off$292400[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292404[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292400[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292405[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@22:
	mov	eax, DWORD PTR __Result$292401[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvVoteSourceInfo@@PAPAV1@@stdext@@YAPAPAVCvVoteSourceInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvVoteSourceInfo * *,CvVoteSourceInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvBaseInfo@@PAPAV1@@stdext@@YAPAPAVCvBaseInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292430 = -26						; size = 1
$T292429 = -25						; size = 1
$T292428 = -24						; size = 4
$T292427 = -20						; size = 4
__Off$292423 = -16					; size = 4
__Result$292424 = -12					; size = 4
__Cat$292415 = -4					; size = 1
$T292412 = -3						; size = 1
$T292411 = -2						; size = 1
$T292410 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvBaseInfo@@PAPAV1@@stdext@@YAPAPAVCvBaseInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvBaseInfo * *,CvBaseInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292410[ebp], al
	mov	cl, BYTE PTR __Cat$292415[ebp]
	mov	BYTE PTR $T292411[ebp], cl
	mov	dl, BYTE PTR $T292410[ebp]
	mov	BYTE PTR $T292430[ebp], dl
	mov	al, BYTE PTR $T292412[ebp]
	mov	BYTE PTR $T292429[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292428[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292427[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292427[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292423[ebp], eax
	mov	ecx, DWORD PTR __Off$292423[ebp]
	mov	edx, DWORD PTR $T292428[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292424[ebp], eax
	cmp	DWORD PTR __Off$292423[ebp], 0
	jle	SHORT $LN8@unchecked_@23
	mov	ecx, DWORD PTR __Off$292423[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292427[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292423[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292428[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@23:
	mov	eax, DWORD PTR __Result$292424[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvBaseInfo@@PAPAV1@@stdext@@YAPAPAVCvBaseInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvBaseInfo * *,CvBaseInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvGameOptionInfo@@PAPAV1@@stdext@@YAPAPAVCvGameOptionInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292453 = -26						; size = 1
$T292452 = -25						; size = 1
$T292451 = -24						; size = 4
$T292450 = -20						; size = 4
__Off$292446 = -16					; size = 4
__Result$292447 = -12					; size = 4
__Cat$292438 = -4					; size = 1
$T292435 = -3						; size = 1
$T292434 = -2						; size = 1
$T292433 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvGameOptionInfo@@PAPAV1@@stdext@@YAPAPAVCvGameOptionInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvGameOptionInfo * *,CvGameOptionInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292433[ebp], al
	mov	cl, BYTE PTR __Cat$292438[ebp]
	mov	BYTE PTR $T292434[ebp], cl
	mov	dl, BYTE PTR $T292433[ebp]
	mov	BYTE PTR $T292453[ebp], dl
	mov	al, BYTE PTR $T292435[ebp]
	mov	BYTE PTR $T292452[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292451[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292450[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292450[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292446[ebp], eax
	mov	ecx, DWORD PTR __Off$292446[ebp]
	mov	edx, DWORD PTR $T292451[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292447[ebp], eax
	cmp	DWORD PTR __Off$292446[ebp], 0
	jle	SHORT $LN8@unchecked_@24
	mov	ecx, DWORD PTR __Off$292446[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292450[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292446[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292451[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@24:
	mov	eax, DWORD PTR __Result$292447[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvGameOptionInfo@@PAPAV1@@stdext@@YAPAPAVCvGameOptionInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvGameOptionInfo * *,CvGameOptionInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvMPOptionInfo@@PAPAV1@@stdext@@YAPAPAVCvMPOptionInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292476 = -26						; size = 1
$T292475 = -25						; size = 1
$T292474 = -24						; size = 4
$T292473 = -20						; size = 4
__Off$292469 = -16					; size = 4
__Result$292470 = -12					; size = 4
__Cat$292461 = -4					; size = 1
$T292458 = -3						; size = 1
$T292457 = -2						; size = 1
$T292456 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvMPOptionInfo@@PAPAV1@@stdext@@YAPAPAVCvMPOptionInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvMPOptionInfo * *,CvMPOptionInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292456[ebp], al
	mov	cl, BYTE PTR __Cat$292461[ebp]
	mov	BYTE PTR $T292457[ebp], cl
	mov	dl, BYTE PTR $T292456[ebp]
	mov	BYTE PTR $T292476[ebp], dl
	mov	al, BYTE PTR $T292458[ebp]
	mov	BYTE PTR $T292475[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292474[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292473[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292473[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292469[ebp], eax
	mov	ecx, DWORD PTR __Off$292469[ebp]
	mov	edx, DWORD PTR $T292474[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292470[ebp], eax
	cmp	DWORD PTR __Off$292469[ebp], 0
	jle	SHORT $LN8@unchecked_@25
	mov	ecx, DWORD PTR __Off$292469[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292473[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292469[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292474[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@25:
	mov	eax, DWORD PTR __Result$292470[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvMPOptionInfo@@PAPAV1@@stdext@@YAPAPAVCvMPOptionInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvMPOptionInfo * *,CvMPOptionInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvPlayerOptionInfo@@PAPAV1@@stdext@@YAPAPAVCvPlayerOptionInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292499 = -26						; size = 1
$T292498 = -25						; size = 1
$T292497 = -24						; size = 4
$T292496 = -20						; size = 4
__Off$292492 = -16					; size = 4
__Result$292493 = -12					; size = 4
__Cat$292484 = -4					; size = 1
$T292481 = -3						; size = 1
$T292480 = -2						; size = 1
$T292479 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvPlayerOptionInfo@@PAPAV1@@stdext@@YAPAPAVCvPlayerOptionInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvPlayerOptionInfo * *,CvPlayerOptionInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292479[ebp], al
	mov	cl, BYTE PTR __Cat$292484[ebp]
	mov	BYTE PTR $T292480[ebp], cl
	mov	dl, BYTE PTR $T292479[ebp]
	mov	BYTE PTR $T292499[ebp], dl
	mov	al, BYTE PTR $T292481[ebp]
	mov	BYTE PTR $T292498[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292497[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292496[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292496[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292492[ebp], eax
	mov	ecx, DWORD PTR __Off$292492[ebp]
	mov	edx, DWORD PTR $T292497[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292493[ebp], eax
	cmp	DWORD PTR __Off$292492[ebp], 0
	jle	SHORT $LN8@unchecked_@26
	mov	ecx, DWORD PTR __Off$292492[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292496[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292492[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292497[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@26:
	mov	eax, DWORD PTR __Result$292493[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvPlayerOptionInfo@@PAPAV1@@stdext@@YAPAPAVCvPlayerOptionInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvPlayerOptionInfo * *,CvPlayerOptionInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvSpecialistInfo@@PAPAV1@@stdext@@YAPAPAVCvSpecialistInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292522 = -26						; size = 1
$T292521 = -25						; size = 1
$T292520 = -24						; size = 4
$T292519 = -20						; size = 4
__Off$292515 = -16					; size = 4
__Result$292516 = -12					; size = 4
__Cat$292507 = -4					; size = 1
$T292504 = -3						; size = 1
$T292503 = -2						; size = 1
$T292502 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvSpecialistInfo@@PAPAV1@@stdext@@YAPAPAVCvSpecialistInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvSpecialistInfo * *,CvSpecialistInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292502[ebp], al
	mov	cl, BYTE PTR __Cat$292507[ebp]
	mov	BYTE PTR $T292503[ebp], cl
	mov	dl, BYTE PTR $T292502[ebp]
	mov	BYTE PTR $T292522[ebp], dl
	mov	al, BYTE PTR $T292504[ebp]
	mov	BYTE PTR $T292521[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292520[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292519[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292519[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292515[ebp], eax
	mov	ecx, DWORD PTR __Off$292515[ebp]
	mov	edx, DWORD PTR $T292520[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292516[ebp], eax
	cmp	DWORD PTR __Off$292515[ebp], 0
	jle	SHORT $LN8@unchecked_@27
	mov	ecx, DWORD PTR __Off$292515[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292519[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292515[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292520[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@27:
	mov	eax, DWORD PTR __Result$292516[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvSpecialistInfo@@PAPAV1@@stdext@@YAPAPAVCvSpecialistInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvSpecialistInfo * *,CvSpecialistInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvActionInfo@@PAPAV1@@stdext@@YAPAPAVCvActionInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292545 = -26						; size = 1
$T292544 = -25						; size = 1
$T292543 = -24						; size = 4
$T292542 = -20						; size = 4
__Off$292538 = -16					; size = 4
__Result$292539 = -12					; size = 4
__Cat$292530 = -4					; size = 1
$T292527 = -3						; size = 1
$T292526 = -2						; size = 1
$T292525 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvActionInfo@@PAPAV1@@stdext@@YAPAPAVCvActionInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvActionInfo * *,CvActionInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292525[ebp], al
	mov	cl, BYTE PTR __Cat$292530[ebp]
	mov	BYTE PTR $T292526[ebp], cl
	mov	dl, BYTE PTR $T292525[ebp]
	mov	BYTE PTR $T292545[ebp], dl
	mov	al, BYTE PTR $T292527[ebp]
	mov	BYTE PTR $T292544[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292543[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292542[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292542[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292538[ebp], eax
	mov	ecx, DWORD PTR __Off$292538[ebp]
	mov	edx, DWORD PTR $T292543[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292539[ebp], eax
	cmp	DWORD PTR __Off$292538[ebp], 0
	jle	SHORT $LN8@unchecked_@28
	mov	ecx, DWORD PTR __Off$292538[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292542[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292538[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292543[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@28:
	mov	eax, DWORD PTR __Result$292539[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvActionInfo@@PAPAV1@@stdext@@YAPAPAVCvActionInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvActionInfo * *,CvActionInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvMissionInfo@@PAPAV1@@stdext@@YAPAPAVCvMissionInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292568 = -26						; size = 1
$T292567 = -25						; size = 1
$T292566 = -24						; size = 4
$T292565 = -20						; size = 4
__Off$292561 = -16					; size = 4
__Result$292562 = -12					; size = 4
__Cat$292553 = -4					; size = 1
$T292550 = -3						; size = 1
$T292549 = -2						; size = 1
$T292548 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvMissionInfo@@PAPAV1@@stdext@@YAPAPAVCvMissionInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvMissionInfo * *,CvMissionInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292548[ebp], al
	mov	cl, BYTE PTR __Cat$292553[ebp]
	mov	BYTE PTR $T292549[ebp], cl
	mov	dl, BYTE PTR $T292548[ebp]
	mov	BYTE PTR $T292568[ebp], dl
	mov	al, BYTE PTR $T292550[ebp]
	mov	BYTE PTR $T292567[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292566[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292565[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292565[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292561[ebp], eax
	mov	ecx, DWORD PTR __Off$292561[ebp]
	mov	edx, DWORD PTR $T292566[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292562[ebp], eax
	cmp	DWORD PTR __Off$292561[ebp], 0
	jle	SHORT $LN8@unchecked_@29
	mov	ecx, DWORD PTR __Off$292561[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292565[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292561[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292566[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@29:
	mov	eax, DWORD PTR __Result$292562[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvMissionInfo@@PAPAV1@@stdext@@YAPAPAVCvMissionInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvMissionInfo * *,CvMissionInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvControlInfo@@PAPAV1@@stdext@@YAPAPAVCvControlInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292591 = -26						; size = 1
$T292590 = -25						; size = 1
$T292589 = -24						; size = 4
$T292588 = -20						; size = 4
__Off$292584 = -16					; size = 4
__Result$292585 = -12					; size = 4
__Cat$292576 = -4					; size = 1
$T292573 = -3						; size = 1
$T292572 = -2						; size = 1
$T292571 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvControlInfo@@PAPAV1@@stdext@@YAPAPAVCvControlInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvControlInfo * *,CvControlInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292571[ebp], al
	mov	cl, BYTE PTR __Cat$292576[ebp]
	mov	BYTE PTR $T292572[ebp], cl
	mov	dl, BYTE PTR $T292571[ebp]
	mov	BYTE PTR $T292591[ebp], dl
	mov	al, BYTE PTR $T292573[ebp]
	mov	BYTE PTR $T292590[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292589[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292588[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292588[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292584[ebp], eax
	mov	ecx, DWORD PTR __Off$292584[ebp]
	mov	edx, DWORD PTR $T292589[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292585[ebp], eax
	cmp	DWORD PTR __Off$292584[ebp], 0
	jle	SHORT $LN8@unchecked_@30
	mov	ecx, DWORD PTR __Off$292584[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292588[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292584[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292589[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@30:
	mov	eax, DWORD PTR __Result$292585[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvControlInfo@@PAPAV1@@stdext@@YAPAPAVCvControlInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvControlInfo * *,CvControlInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvCommandInfo@@PAPAV1@@stdext@@YAPAPAVCvCommandInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292614 = -26						; size = 1
$T292613 = -25						; size = 1
$T292612 = -24						; size = 4
$T292611 = -20						; size = 4
__Off$292607 = -16					; size = 4
__Result$292608 = -12					; size = 4
__Cat$292599 = -4					; size = 1
$T292596 = -3						; size = 1
$T292595 = -2						; size = 1
$T292594 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvCommandInfo@@PAPAV1@@stdext@@YAPAPAVCvCommandInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvCommandInfo * *,CvCommandInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292594[ebp], al
	mov	cl, BYTE PTR __Cat$292599[ebp]
	mov	BYTE PTR $T292595[ebp], cl
	mov	dl, BYTE PTR $T292594[ebp]
	mov	BYTE PTR $T292614[ebp], dl
	mov	al, BYTE PTR $T292596[ebp]
	mov	BYTE PTR $T292613[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292612[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292611[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292611[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292607[ebp], eax
	mov	ecx, DWORD PTR __Off$292607[ebp]
	mov	edx, DWORD PTR $T292612[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292608[ebp], eax
	cmp	DWORD PTR __Off$292607[ebp], 0
	jle	SHORT $LN8@unchecked_@31
	mov	ecx, DWORD PTR __Off$292607[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292611[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292607[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292612[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@31:
	mov	eax, DWORD PTR __Result$292608[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvCommandInfo@@PAPAV1@@stdext@@YAPAPAVCvCommandInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvCommandInfo * *,CvCommandInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvAutomateInfo@@PAPAV1@@stdext@@YAPAPAVCvAutomateInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292637 = -26						; size = 1
$T292636 = -25						; size = 1
$T292635 = -24						; size = 4
$T292634 = -20						; size = 4
__Off$292630 = -16					; size = 4
__Result$292631 = -12					; size = 4
__Cat$292622 = -4					; size = 1
$T292619 = -3						; size = 1
$T292618 = -2						; size = 1
$T292617 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvAutomateInfo@@PAPAV1@@stdext@@YAPAPAVCvAutomateInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvAutomateInfo * *,CvAutomateInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292617[ebp], al
	mov	cl, BYTE PTR __Cat$292622[ebp]
	mov	BYTE PTR $T292618[ebp], cl
	mov	dl, BYTE PTR $T292617[ebp]
	mov	BYTE PTR $T292637[ebp], dl
	mov	al, BYTE PTR $T292619[ebp]
	mov	BYTE PTR $T292636[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292635[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292634[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292634[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292630[ebp], eax
	mov	ecx, DWORD PTR __Off$292630[ebp]
	mov	edx, DWORD PTR $T292635[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292631[ebp], eax
	cmp	DWORD PTR __Off$292630[ebp], 0
	jle	SHORT $LN8@unchecked_@32
	mov	ecx, DWORD PTR __Off$292630[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292634[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292630[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292635[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@32:
	mov	eax, DWORD PTR __Result$292631[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvAutomateInfo@@PAPAV1@@stdext@@YAPAPAVCvAutomateInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvAutomateInfo * *,CvAutomateInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvEraInfo@@PAPAV1@@stdext@@YAPAPAVCvEraInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292660 = -26						; size = 1
$T292659 = -25						; size = 1
$T292658 = -24						; size = 4
$T292657 = -20						; size = 4
__Off$292653 = -16					; size = 4
__Result$292654 = -12					; size = 4
__Cat$292645 = -4					; size = 1
$T292642 = -3						; size = 1
$T292641 = -2						; size = 1
$T292640 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvEraInfo@@PAPAV1@@stdext@@YAPAPAVCvEraInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvEraInfo * *,CvEraInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292640[ebp], al
	mov	cl, BYTE PTR __Cat$292645[ebp]
	mov	BYTE PTR $T292641[ebp], cl
	mov	dl, BYTE PTR $T292640[ebp]
	mov	BYTE PTR $T292660[ebp], dl
	mov	al, BYTE PTR $T292642[ebp]
	mov	BYTE PTR $T292659[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292658[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292657[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292657[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292653[ebp], eax
	mov	ecx, DWORD PTR __Off$292653[ebp]
	mov	edx, DWORD PTR $T292658[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292654[ebp], eax
	cmp	DWORD PTR __Off$292653[ebp], 0
	jle	SHORT $LN8@unchecked_@33
	mov	ecx, DWORD PTR __Off$292653[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292657[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292653[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292658[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@33:
	mov	eax, DWORD PTR __Result$292654[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvEraInfo@@PAPAV1@@stdext@@YAPAPAVCvEraInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvEraInfo * *,CvEraInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvHurryInfo@@PAPAV1@@stdext@@YAPAPAVCvHurryInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292683 = -26						; size = 1
$T292682 = -25						; size = 1
$T292681 = -24						; size = 4
$T292680 = -20						; size = 4
__Off$292676 = -16					; size = 4
__Result$292677 = -12					; size = 4
__Cat$292668 = -4					; size = 1
$T292665 = -3						; size = 1
$T292664 = -2						; size = 1
$T292663 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvHurryInfo@@PAPAV1@@stdext@@YAPAPAVCvHurryInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvHurryInfo * *,CvHurryInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292663[ebp], al
	mov	cl, BYTE PTR __Cat$292668[ebp]
	mov	BYTE PTR $T292664[ebp], cl
	mov	dl, BYTE PTR $T292663[ebp]
	mov	BYTE PTR $T292683[ebp], dl
	mov	al, BYTE PTR $T292665[ebp]
	mov	BYTE PTR $T292682[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292681[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292680[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292680[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292676[ebp], eax
	mov	ecx, DWORD PTR __Off$292676[ebp]
	mov	edx, DWORD PTR $T292681[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292677[ebp], eax
	cmp	DWORD PTR __Off$292676[ebp], 0
	jle	SHORT $LN8@unchecked_@34
	mov	ecx, DWORD PTR __Off$292676[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292680[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292676[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292681[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@34:
	mov	eax, DWORD PTR __Result$292677[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvHurryInfo@@PAPAV1@@stdext@@YAPAPAVCvHurryInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvHurryInfo * *,CvHurryInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvVictoryInfo@@PAPAV1@@stdext@@YAPAPAVCvVictoryInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292706 = -26						; size = 1
$T292705 = -25						; size = 1
$T292704 = -24						; size = 4
$T292703 = -20						; size = 4
__Off$292699 = -16					; size = 4
__Result$292700 = -12					; size = 4
__Cat$292691 = -4					; size = 1
$T292688 = -3						; size = 1
$T292687 = -2						; size = 1
$T292686 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvVictoryInfo@@PAPAV1@@stdext@@YAPAPAVCvVictoryInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvVictoryInfo * *,CvVictoryInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292686[ebp], al
	mov	cl, BYTE PTR __Cat$292691[ebp]
	mov	BYTE PTR $T292687[ebp], cl
	mov	dl, BYTE PTR $T292686[ebp]
	mov	BYTE PTR $T292706[ebp], dl
	mov	al, BYTE PTR $T292688[ebp]
	mov	BYTE PTR $T292705[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292704[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292703[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292703[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292699[ebp], eax
	mov	ecx, DWORD PTR __Off$292699[ebp]
	mov	edx, DWORD PTR $T292704[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292700[ebp], eax
	cmp	DWORD PTR __Off$292699[ebp], 0
	jle	SHORT $LN8@unchecked_@35
	mov	ecx, DWORD PTR __Off$292699[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292703[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292699[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292704[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@35:
	mov	eax, DWORD PTR __Result$292700[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvVictoryInfo@@PAPAV1@@stdext@@YAPAPAVCvVictoryInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvVictoryInfo * *,CvVictoryInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvSmallAwardInfo@@PAPAV1@@stdext@@YAPAPAVCvSmallAwardInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292729 = -26						; size = 1
$T292728 = -25						; size = 1
$T292727 = -24						; size = 4
$T292726 = -20						; size = 4
__Off$292722 = -16					; size = 4
__Result$292723 = -12					; size = 4
__Cat$292714 = -4					; size = 1
$T292711 = -3						; size = 1
$T292710 = -2						; size = 1
$T292709 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvSmallAwardInfo@@PAPAV1@@stdext@@YAPAPAVCvSmallAwardInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvSmallAwardInfo * *,CvSmallAwardInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292709[ebp], al
	mov	cl, BYTE PTR __Cat$292714[ebp]
	mov	BYTE PTR $T292710[ebp], cl
	mov	dl, BYTE PTR $T292709[ebp]
	mov	BYTE PTR $T292729[ebp], dl
	mov	al, BYTE PTR $T292711[ebp]
	mov	BYTE PTR $T292728[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292727[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292726[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292726[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292722[ebp], eax
	mov	ecx, DWORD PTR __Off$292722[ebp]
	mov	edx, DWORD PTR $T292727[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292723[ebp], eax
	cmp	DWORD PTR __Off$292722[ebp], 0
	jle	SHORT $LN8@unchecked_@36
	mov	ecx, DWORD PTR __Off$292722[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292726[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292722[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292727[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@36:
	mov	eax, DWORD PTR __Result$292723[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvSmallAwardInfo@@PAPAV1@@stdext@@YAPAPAVCvSmallAwardInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvSmallAwardInfo * *,CvSmallAwardInfo * *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAPAVCvEntityEventInfo@@PAPAV1@@stdext@@YAPAPAVCvEntityEventInfo@@PAPAV1@00@Z
_TEXT	SEGMENT
$T292752 = -26						; size = 1
$T292751 = -25						; size = 1
$T292750 = -24						; size = 4
$T292749 = -20						; size = 4
__Off$292745 = -16					; size = 4
__Result$292746 = -12					; size = 4
__Cat$292737 = -4					; size = 1
$T292734 = -3						; size = 1
$T292733 = -2						; size = 1
$T292732 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvEntityEventInfo@@PAPAV1@@stdext@@YAPAPAVCvEntityEventInfo@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvEntityEventInfo * *,CvEntityEventInfo * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292732[ebp], al
	mov	cl, BYTE PTR __Cat$292737[ebp]
	mov	BYTE PTR $T292733[ebp], cl
	mov	dl, BYTE PTR $T292732[ebp]
	mov	BYTE PTR $T292752[ebp], dl
	mov	al, BYTE PTR $T292734[ebp]
	mov	BYTE PTR $T292751[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T292750[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T292749[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T292749[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$292745[ebp], eax
	mov	ecx, DWORD PTR __Off$292745[ebp]
	mov	edx, DWORD PTR $T292750[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$292746[ebp], eax
	cmp	DWORD PTR __Off$292745[ebp], 0
	jle	SHORT $LN8@unchecked_@37
	mov	ecx, DWORD PTR __Off$292745[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T292749[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$292745[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T292750[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@37:
	mov	eax, DWORD PTR __Result$292746[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvEntityEventInfo@@PAPAV1@@stdext@@YAPAPAVCvEntityEventInfo@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvEntityEventInfo * *,CvEntityEventInfo * *>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CvBaseInfo@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1CvBaseInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvBaseInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1CvBaseInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T292808 = -48						; size = 4
$T292803 = -44						; size = 4
$T292798 = -40						; size = 4
$T292793 = -36						; size = 4
$T292788 = -32						; size = 4
$T292783 = -28						; size = 4
$T292778 = -24						; size = 4
$T292773 = -20						; size = 4
$T292768 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvBaseInfo@@QAE@XZ PROC				; CvBaseInfo::~CvBaseInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvBaseInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 232				; 000000e8H
	mov	DWORD PTR $T292768[ebp], eax
	mov	ecx, DWORD PTR $T292768[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	mov	DWORD PTR $T292773[ebp], ecx
	mov	ecx, DWORD PTR $T292773[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	mov	DWORD PTR $T292778[ebp], edx
	mov	ecx, DWORD PTR $T292778[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 148				; 00000094H
	mov	DWORD PTR $T292783[ebp], eax
	mov	ecx, DWORD PTR $T292783[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	mov	DWORD PTR $T292788[ebp], ecx
	mov	ecx, DWORD PTR $T292788[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR $T292793[ebp], edx
	mov	ecx, DWORD PTR $T292793[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR $T292798[ebp], eax
	mov	ecx, DWORD PTR $T292798[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR $T292803[ebp], ecx
	mov	ecx, DWORD PTR $T292803[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	mov	DWORD PTR $T292808[ebp], edx
	mov	ecx, DWORD PTR $T292808[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvBaseInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvBaseInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvBaseInfo@@QAE@XZ ENDP				; CvBaseInfo::~CvBaseInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CvHotKeyInfo@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1CvHotKeyInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvHotKeyInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1CvHotKeyInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -76						; size = 4
$T292853 = -36						; size = 4
$T292848 = -32						; size = 4
$T292843 = -28						; size = 4
$T292838 = -24						; size = 4
$T292833 = -20						; size = 4
$T292828 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvHotKeyInfo@@QAE@XZ PROC				; CvHotKeyInfo::~CvHotKeyInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvHotKeyInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 432				; 000001b0H
	mov	DWORD PTR $T292828[ebp], eax
	mov	ecx, DWORD PTR $T292828[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 404				; 00000194H
	mov	DWORD PTR $T292833[ebp], ecx
	mov	ecx, DWORD PTR $T292833[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 376				; 00000178H
	mov	DWORD PTR $T292838[ebp], edx
	mov	ecx, DWORD PTR $T292838[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 348				; 0000015cH
	mov	DWORD PTR $T292843[ebp], eax
	mov	ecx, DWORD PTR $T292843[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	mov	DWORD PTR $T292848[ebp], ecx
	mov	ecx, DWORD PTR $T292848[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 292				; 00000124H
	mov	DWORD PTR $T292853[ebp], edx
	mov	ecx, DWORD PTR $T292853[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 292				; 00000124H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 348				; 0000015cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 404				; 00000194H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvHotKeyInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvHotKeyInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvHotKeyInfo@@QAE@XZ ENDP				; CvHotKeyInfo::~CvHotKeyInfo
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::~_Vector_val<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::~_Vector_val<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T292989 = -32						; size = 4
$T292988 = -28						; size = 4
$T292984 = -24						; size = 4
$T292983 = -20						; size = 4
$T292965 = -16						; size = 4
$T292964 = -12						; size = 4
$T292948 = -8						; size = 4
__Cat$292971 = -2					; size = 1
$T292968 = -1						; size = 1
?_Tidy@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXXZ PROC ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@40

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T292984[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T292983[ebp], ecx
	mov	edx, DWORD PTR $T292984[ebp]
	mov	DWORD PTR $T292965[ebp], edx
	mov	eax, DWORD PTR $T292983[ebp]
	mov	DWORD PTR $T292964[ebp], eax
	mov	cl, BYTE PTR __Cat$292971[ebp]
	mov	BYTE PTR $T292968[ebp], cl
	mov	edx, DWORD PTR $T292964[ebp]
	mov	DWORD PTR $T292948[ebp], edx
	jmp	SHORT $LN12@Tidy@40
$LN11@Tidy@40:
	mov	eax, DWORD PTR $T292948[ebp]
	add	eax, 4
	mov	DWORD PTR $T292948[ebp], eax
$LN12@Tidy@40:
	mov	ecx, DWORD PTR $T292948[ebp]
	cmp	ecx, DWORD PTR $T292965[ebp]
	je	SHORT $LN4@Tidy@40
	jmp	SHORT $LN11@Tidy@40
$LN4@Tidy@40:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T292989[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T292988[ebp], eax
	mov	ecx, DWORD PTR $T292988[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@40:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXXZ ENDP ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Tidy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@stdext@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@Z
_TEXT	SEGMENT
__Cat$292997 = -3					; size = 1
$T292993 = -2						; size = 1
$T292992 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@stdext@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@Z PROC ; stdext::unchecked_uninitialized_copy<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T292992[ebp], al
	mov	cl, BYTE PTR __Cat$292997[ebp]
	mov	BYTE PTR $T292993[ebp], cl
	movzx	edx, BYTE PTR $T292992[ebp]
	push	edx
	movzx	eax, BYTE PTR $T292993[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@stdext@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T293022 = -28						; size = 4
__Vptr$293028 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 4
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$293028[ebp], ecx
	mov	edx, DWORD PTR __Vptr$293028[ebp]
	mov	DWORD PTR $T293022[ebp], edx
	cmp	DWORD PTR $T293022[ebp], 0
	je	SHORT $LN18@Uninit_cop
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR $T293022[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR $T293022[ebp]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN14@Uninit_cop
$LN18@Uninit_cop:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_cop:
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Next$[ebp], ecx
$LN3@Uninit_cop:
	mov	edx, DWORD PTR __Next$[ebp]
	cmp	edx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@PAV123@V?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@3@@std@@YAPAV?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@0@PAV120@00AAV?$allocator@V?$_Iterator@$0A@@?$list@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> *,std::allocator<std::list<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Iterator<0> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Odtp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.cpp
;	COMDAT ??__EgGlobals@@YAXXZ
text$yc	SEGMENT
??__EgGlobals@@YAXXZ PROC				; `dynamic initializer for 'gGlobals'', COMDAT

; 63   : CvGlobals gGlobals;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	??0CvGlobals@@QAE@XZ			; CvGlobals::CvGlobals
	push	OFFSET ??__FgGlobals@@YAXXZ		; `dynamic atexit destructor for 'gGlobals''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__EgGlobals@@YAXXZ ENDP				; `dynamic initializer for 'gGlobals''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??__FgGlobals@@YAXXZ
text$yd	SEGMENT
??__FgGlobals@@YAXXZ PROC				; `dynamic atexit destructor for 'gGlobals'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	??1CvGlobals@@UAE@XZ			; CvGlobals::~CvGlobals
	pop	ebp
	ret	0
??__FgGlobals@@YAXXZ ENDP				; `dynamic atexit destructor for 'gGlobals''
text$yd	ENDS
PUBLIC	?gGlobals@@3VCvGlobals@@A			; gGlobals
_BSS	SEGMENT
?gGlobals@@3VCvGlobals@@A DB 0217cH DUP (?)		; gGlobals
_BSS	ENDS
CRT$XCU	SEGMENT
_gGlobals$initializer$ DD FLAT:??__EgGlobals@@YAXXZ
CRT$XCU	ENDS
END
