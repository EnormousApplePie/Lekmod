; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvGameTextMgr.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z ; GetLocalizedText<char const [5],char const *>
PUBLIC	??_C@_04IKOBKKOH@0001?$AA@			; `string'
PUBLIC	??_C@_0BA@FGMEKFH@TXT_KEY_TIME_AD?$AA@		; `string'
PUBLIC	??_C@_0BF@GNMLEKA@TXT_KEY_TIME_AD_SAVE?$AA@	; `string'
PUBLIC	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z	; GetLocalizedText<int>
PUBLIC	??_C@_0BA@EIGLGCMJ@TXT_KEY_TIME_BC?$AA@		; `string'
PUBLIC	??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z ; GetLocalizedText<char const *,char const *>
PUBLIC	??_C@_0BF@ENPEINMN@TXT_KEY_TIME_BC_SAVE?$AA@	; `string'
PUBLIC	?format@CvString@@SA?AV1@PBDZZ			; CvString::format
PUBLIC	??_C@_04OCCELDNI@?$CF04d?$AA@			; `string'
PUBLIC	?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z ; CvGameTextMgr::setYearStr
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	?getTurnYearForGame@@YAHHHW4CalendarTypes@@W4GameSpeedTypes@@@Z:PROC ; getTurnYearForGame
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_04IKOBKKOH@0001?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_04IKOBKKOH@0001?$AA@ DB '0001', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FGMEKFH@TXT_KEY_TIME_AD?$AA@
CONST	SEGMENT
??_C@_0BA@FGMEKFH@TXT_KEY_TIME_AD?$AA@ DB 'TXT_KEY_TIME_AD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GNMLEKA@TXT_KEY_TIME_AD_SAVE?$AA@
CONST	SEGMENT
??_C@_0BF@GNMLEKA@TXT_KEY_TIME_AD_SAVE?$AA@ DB 'TXT_KEY_TIME_AD_SAVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EIGLGCMJ@TXT_KEY_TIME_BC?$AA@
CONST	SEGMENT
??_C@_0BA@EIGLGCMJ@TXT_KEY_TIME_BC?$AA@ DB 'TXT_KEY_TIME_BC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ENPEINMN@TXT_KEY_TIME_BC_SAVE?$AA@
CONST	SEGMENT
??_C@_0BF@ENPEINMN@TXT_KEY_TIME_BC_SAVE?$AA@ DB 'TXT_KEY_TIME_BC_SAVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCCELDNI@?$CF04d?$AA@
CONST	SEGMENT
??_C@_04OCCELDNI@?$CF04d?$AA@ DB '%04d', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$10
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgametextmgr.cpp
xdata$x	ENDS
;	COMDAT ?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
_TEXT	SEGMENT
tv362 = -432						; size = 4
tv361 = -428						; size = 4
tv360 = -424						; size = 4
tv359 = -420						; size = 4
tv358 = -416						; size = 4
tv357 = -412						; size = 4
tv356 = -408						; size = 4
tv355 = -404						; size = 4
tv354 = -400						; size = 4
tv353 = -396						; size = 4
tv200 = -392						; size = 4
$T217593 = -388						; size = 4
$T217581 = -384						; size = 4
$T217577 = -380						; size = 4
$T217569 = -376						; size = 4
$T217553 = -372						; size = 4
$T217549 = -368						; size = 4
$T217545 = -364						; size = 4
$T217537 = -360						; size = 4
$T217521 = -356						; size = 4
$T217517 = -352						; size = 4
$T217513 = -348						; size = 4
$T217498 = -344						; size = 28
$T217497 = -316						; size = 28
$T217496 = -288						; size = 28
$T217495 = -260						; size = 4
$T217494 = -256						; size = 28
$T217493 = -228						; size = 28
$T217492 = -200						; size = 28
$T217491 = -172						; size = 4
$T217490 = -168						; size = 28
$T217489 = -140						; size = 4
$T217488 = -136						; size = 28
$T217487 = -108						; size = 28
$T217486 = -80						; size = 28
$T217485 = -52						; size = 4
$T217484 = -48						; size = 28
$T217483 = -20						; size = 4
_iTurnYear$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_strString$ = 8						; size = 4
_iGameTurn$ = 12					; size = 4
_bSave$ = 16						; size = 1
_eCalendar$ = 20					; size = 4
_iStartYear$ = 24					; size = 4
_eSpeed$ = 28						; size = 4
?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z PROC ; CvGameTextMgr::setYearStr, COMDAT

; 22   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 420				; 000001a4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 23   : 	int iTurnYear = getTurnYearForGame(iGameTurn, iStartYear, eCalendar, eSpeed);

	mov	eax, DWORD PTR _eSpeed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eCalendar$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iStartYear$[ebp]
	push	edx
	mov	eax, DWORD PTR _iGameTurn$[ebp]
	push	eax
	call	?getTurnYearForGame@@YAHHHW4CalendarTypes@@W4GameSpeedTypes@@@Z ; getTurnYearForGame
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iTurnYear$[ebp], eax

; 24   : 
; 25   : 	if(iTurnYear < 0)

	cmp	DWORD PTR _iTurnYear$[ebp], 0
	jge	$LN10@setYearStr

; 26   : 	{
; 27   : 		if(bSave)

	movzx	ecx, BYTE PTR _bSave$[ebp]
	test	ecx, ecx
	je	$LN9@setYearStr

; 28   : 		{
; 29   : 			strString = GetLocalizedText("TXT_KEY_TIME_BC_SAVE", CvString::format("%04d", -iTurnYear).GetCString(), CvString::format("%04d", iGameTurn).GetCString());

	mov	edx, DWORD PTR _iGameTurn$[ebp]
	push	edx
	push	OFFSET ??_C@_04OCCELDNI@?$CF04d?$AA@
	lea	eax, DWORD PTR $T217484[ebp]
	push	eax
	call	?format@CvString@@SA?AV1@PBDZZ		; CvString::format
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv200[ebp], eax
	mov	ecx, DWORD PTR tv200[ebp]
	mov	DWORD PTR $T217513[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T217513[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T217483[ebp], eax
	mov	edx, DWORD PTR _iTurnYear$[ebp]
	neg	edx
	push	edx
	push	OFFSET ??_C@_04OCCELDNI@?$CF04d?$AA@
	lea	eax, DWORD PTR $T217486[ebp]
	push	eax
	call	?format@CvString@@SA?AV1@PBDZZ		; CvString::format
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv353[ebp], eax
	mov	ecx, DWORD PTR tv353[ebp]
	mov	DWORD PTR $T217517[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T217517[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T217485[ebp], eax
	lea	edx, DWORD PTR $T217483[ebp]
	push	edx
	lea	eax, DWORD PTR $T217485[ebp]
	push	eax
	push	OFFSET ??_C@_0BF@ENPEINMN@TXT_KEY_TIME_BC_SAVE?$AA@
	lea	ecx, DWORD PTR $T217487[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z ; GetLocalizedText<char const *,char const *>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv354[ebp], eax
	mov	edx, DWORD PTR tv354[ebp]
	mov	DWORD PTR $T217521[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR $T217521[ebp]
	push	eax
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T217487[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217486[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T217484[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 30   : 		}
; 31   : 		else

	jmp	SHORT $LN8@setYearStr
$LN9@setYearStr:

; 32   : 		{
; 33   : 			strString = GetLocalizedText("TXT_KEY_TIME_BC", -(iTurnYear));

	mov	ecx, DWORD PTR _iTurnYear$[ebp]
	neg	ecx
	push	ecx
	push	OFFSET ??_C@_0BA@EIGLGCMJ@TXT_KEY_TIME_BC?$AA@
	lea	edx, DWORD PTR $T217488[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv355[ebp], eax
	mov	eax, DWORD PTR tv355[ebp]
	mov	DWORD PTR $T217537[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T217537[ebp]
	push	ecx
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T217488[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN8@setYearStr:

; 34   : 		}

	jmp	$LN11@setYearStr
$LN10@setYearStr:

; 35   : 	}
; 36   : 	else if(iTurnYear > 0)

	cmp	DWORD PTR _iTurnYear$[ebp], 0
	jle	$LN6@setYearStr

; 37   : 	{
; 38   : 		if(bSave)

	movzx	edx, BYTE PTR _bSave$[ebp]
	test	edx, edx
	je	$LN5@setYearStr

; 39   : 		{
; 40   : 			strString = GetLocalizedText("TXT_KEY_TIME_AD_SAVE", CvString::format("%04d", iTurnYear).GetCString(), CvString::format("%04d", iGameTurn).GetCString());

	mov	eax, DWORD PTR _iGameTurn$[ebp]
	push	eax
	push	OFFSET ??_C@_04OCCELDNI@?$CF04d?$AA@
	lea	ecx, DWORD PTR $T217490[ebp]
	push	ecx
	call	?format@CvString@@SA?AV1@PBDZZ		; CvString::format
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv356[ebp], eax
	mov	edx, DWORD PTR tv356[ebp]
	mov	DWORD PTR $T217545[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR $T217545[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T217489[ebp], eax
	mov	eax, DWORD PTR _iTurnYear$[ebp]
	push	eax
	push	OFFSET ??_C@_04OCCELDNI@?$CF04d?$AA@
	lea	ecx, DWORD PTR $T217492[ebp]
	push	ecx
	call	?format@CvString@@SA?AV1@PBDZZ		; CvString::format
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv357[ebp], eax
	mov	edx, DWORD PTR tv357[ebp]
	mov	DWORD PTR $T217549[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR $T217549[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T217491[ebp], eax
	lea	eax, DWORD PTR $T217489[ebp]
	push	eax
	lea	ecx, DWORD PTR $T217491[ebp]
	push	ecx
	push	OFFSET ??_C@_0BF@GNMLEKA@TXT_KEY_TIME_AD_SAVE?$AA@
	lea	edx, DWORD PTR $T217493[ebp]
	push	edx
	call	??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z ; GetLocalizedText<char const *,char const *>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv358[ebp], eax
	mov	eax, DWORD PTR tv358[ebp]
	mov	DWORD PTR $T217553[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR $T217553[ebp]
	push	ecx
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T217493[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T217492[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T217490[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 41   : 		}
; 42   : 		else

	jmp	SHORT $LN4@setYearStr
$LN5@setYearStr:

; 43   : 		{
; 44   : 			strString = GetLocalizedText("TXT_KEY_TIME_AD", iTurnYear);

	mov	edx, DWORD PTR _iTurnYear$[ebp]
	push	edx
	push	OFFSET ??_C@_0BA@FGMEKFH@TXT_KEY_TIME_AD?$AA@
	lea	eax, DWORD PTR $T217494[ebp]
	push	eax
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv359[ebp], eax
	mov	ecx, DWORD PTR tv359[ebp]
	mov	DWORD PTR $T217569[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR $T217569[ebp]
	push	edx
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T217494[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN4@setYearStr:

; 45   : 		}
; 46   : 	}
; 47   : 	else

	jmp	$LN11@setYearStr
$LN6@setYearStr:

; 48   : 	{
; 49   : 		if(bSave)

	movzx	eax, BYTE PTR _bSave$[ebp]
	test	eax, eax
	je	$LN2@setYearStr

; 50   : 		{
; 51   : 			strString = GetLocalizedText("TXT_KEY_TIME_AD_SAVE", "0001", CvString::format("%04d", iGameTurn).GetCString());

	mov	ecx, DWORD PTR _iGameTurn$[ebp]
	push	ecx
	push	OFFSET ??_C@_04OCCELDNI@?$CF04d?$AA@
	lea	edx, DWORD PTR $T217496[ebp]
	push	edx
	call	?format@CvString@@SA?AV1@PBDZZ		; CvString::format
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv360[ebp], eax
	mov	eax, DWORD PTR tv360[ebp]
	mov	DWORD PTR $T217577[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR $T217577[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T217495[ebp], eax
	lea	ecx, DWORD PTR $T217495[ebp]
	push	ecx
	push	OFFSET ??_C@_04IKOBKKOH@0001?$AA@
	push	OFFSET ??_C@_0BF@GNMLEKA@TXT_KEY_TIME_AD_SAVE?$AA@
	lea	edx, DWORD PTR $T217497[ebp]
	push	edx
	call	??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z ; GetLocalizedText<char const [5],char const *>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv361[ebp], eax
	mov	eax, DWORD PTR tv361[ebp]
	mov	DWORD PTR $T217581[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR $T217581[ebp]
	push	ecx
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T217497[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T217496[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 52   : 		}
; 53   : 		else

	jmp	SHORT $LN11@setYearStr
$LN2@setYearStr:

; 54   : 		{
; 55   : 			strString = GetLocalizedText("TXT_KEY_TIME_AD", 1);

	push	1
	push	OFFSET ??_C@_0BA@FGMEKFH@TXT_KEY_TIME_AD?$AA@
	lea	edx, DWORD PTR $T217498[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv362[ebp], eax
	mov	eax, DWORD PTR tv362[ebp]
	mov	DWORD PTR $T217593[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR $T217593[ebp]
	push	ecx
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T217498[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN11@setYearStr:

; 56   : 		}
; 57   : 	}
; 58   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$0:
	lea	ecx, DWORD PTR $T217484[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$1:
	lea	ecx, DWORD PTR $T217486[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$2:
	lea	ecx, DWORD PTR $T217487[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$3:
	lea	ecx, DWORD PTR $T217488[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$4:
	lea	ecx, DWORD PTR $T217490[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$5:
	lea	ecx, DWORD PTR $T217492[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$6:
	lea	ecx, DWORD PTR $T217493[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$7:
	lea	ecx, DWORD PTR $T217494[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$8:
	lea	ecx, DWORD PTR $T217496[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$9:
	lea	ecx, DWORD PTR $T217497[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$10:
	lea	ecx, DWORD PTR $T217498[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-424]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z ENDP ; CvGameTextMgr::setYearStr
PUBLIC	??1SingleResult@Database@@UAE@XZ		; Database::SingleResult::~SingleResult
PUBLIC	??_C@_0BC@FBDDLKND@TXT_KEY_TIME_WEEK?$AA@	; `string'
PUBLIC	??_C@_0BC@CCJENGCM@TXT_KEY_TIME_TURN?$AA@	; `string'
PUBLIC	??1CvBaseInfo@@QAE@XZ				; CvBaseInfo::~CvBaseInfo
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_07MADONKFL@Seasons?$AA@			; `string'
PUBLIC	??_C@_06DOGEMHPN@Months?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z ; CvGameTextMgr::setDateStr
EXTRN	__imp_??1Results@Database@@UAE@XZ:PROC
EXTRN	__imp_??1String@Localization@@UAE@XZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	__imp_?toUTF8@String@Localization@@QAEPBDXZ:PROC
EXTRN	__imp_?Lookup@Localization@@YA?AVString@1@PBD@Z:PROC
EXTRN	?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z:PROC ; CvBaseInfo::CacheResult
EXTRN	__imp_?SelectAt@Connection@Database@@QAE_NAAVResults@2@PBDH@Z:PROC
EXTRN	??0CvBaseInfo@@QAE@XZ:PROC			; CvBaseInfo::CvBaseInfo
EXTRN	__imp_??0SingleResult@Database@@QAE@PBD@Z:PROC
EXTRN	?getTurnMonthForGame@@YAHHHW4CalendarTypes@@W4GameSpeedTypes@@@Z:PROC ; getTurnMonthForGame
EXTRN	__imp_?Count@Connection@Database@@QAEHPBD_N@Z:PROC
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
;	COMDAT ??_C@_0BC@FBDDLKND@TXT_KEY_TIME_WEEK?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BC@FBDDLKND@TXT_KEY_TIME_WEEK?$AA@ DB 'TXT_KEY_TIME_WEEK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CCJENGCM@TXT_KEY_TIME_TURN?$AA@
CONST	SEGMENT
??_C@_0BC@CCJENGCM@TXT_KEY_TIME_TURN?$AA@ DB 'TXT_KEY_TIME_TURN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07MADONKFL@Seasons?$AA@
CONST	SEGMENT
??_C@_07MADONKFL@Seasons?$AA@ DB 'Seasons', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DOGEMHPN@Months?$AA@
CONST	SEGMENT
??_C@_06DOGEMHPN@Months?$AA@ DB 'Months', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z DD 019930522H
	DD	02bH
	DD	FLAT:__unwindtable$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$7
	DD	05H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$10
	DD	01H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$11
	DD	01H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$16
	DD	0dH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$17
	DD	011H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$18
	DD	012H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$19
	DD	013H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$20
	DD	01H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$21
	DD	015H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$22
	DD	016H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$23
	DD	017H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$24
	DD	018H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$25
	DD	016H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$26
	DD	01aH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$27
	DD	01bH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$28
	DD	01cH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$29
	DD	01H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$30
	DD	01H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$31
	DD	01fH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$32
	DD	020H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$33
	DD	021H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$34
	DD	022H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$35
	DD	023H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$36
	DD	024H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$37
	DD	020H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$38
	DD	026H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$39
	DD	027H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$40
	DD	028H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$41
	DD	029H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$42
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgametextmgr.cpp
xdata$x	ENDS
;	COMDAT ?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
_TEXT	SEGMENT
tv66 = -2852						; size = 4
tv657 = -2848						; size = 4
tv665 = -2844						; size = 4
tv655 = -2840						; size = 4
tv676 = -2836						; size = 4
tv653 = -2832						; size = 4
tv701 = -2828						; size = 4
tv651 = -2824						; size = 4
tv1195 = -2820						; size = 4
tv752 = -2816						; size = 4
tv647 = -2812						; size = 4
tv876 = -2808						; size = 4
tv645 = -2804						; size = 4
tv473 = -2800						; size = 4
tv643 = -2796						; size = 4
tv476 = -2792						; size = 4
tv641 = -2788						; size = 4
tv1171 = -2784						; size = 4
tv900 = -2780						; size = 4
tv913 = -2776						; size = 4
tv633 = -2772						; size = 4
tv952 = -2768						; size = 4
tv631 = -2764						; size = 4
tv1055 = -2760						; size = 4
tv629 = -2756						; size = 4
tv1042 = -2752						; size = 4
tv366 = -2748						; size = 4
tv625 = -2744						; size = 4
tv369 = -2740						; size = 4
tv623 = -2736						; size = 4
tv954 = -2732						; size = 4
tv1040 = -2728						; size = 4
tv617 = -2724						; size = 4
tv1053 = -2720						; size = 4
tv615 = -2716						; size = 4
tv915 = -2712						; size = 4
tv613 = -2708						; size = 4
tv902 = -2704						; size = 4
tv243 = -2700						; size = 4
tv609 = -2696						; size = 4
tv246 = -2692						; size = 4
tv607 = -2688						; size = 4
tv878 = -2684						; size = 4
tv1169 = -2680						; size = 4
tv1193 = -2676						; size = 4
tv599 = -2672						; size = 4
tv142 = -2668						; size = 4
tv597 = -2664						; size = 4
tv754 = -2660						; size = 4
tv146 = -2656						; size = 4
tv593 = -2652						; size = 4
tv159 = -2648						; size = 4
tv703 = -2644						; size = 4
tv91 = -2640						; size = 4
$T218090 = -2600					; size = 4
$T218074 = -2596					; size = 4
$T218059 = -2592					; size = 4
$T218055 = -2588					; size = 4
$T218047 = -2584					; size = 4
$T218043 = -2580					; size = 4
$T217972 = -2540					; size = 4
$T217948 = -2536					; size = 4
$T217933 = -2532					; size = 4
$T217862 = -2492					; size = 4
$T217838 = -2488					; size = 4
$T217823 = -2484					; size = 4
$T217815 = -2480					; size = 4
$T217741 = -2440					; size = 4
$T217729 = -2436					; size = 4
$T217725 = -2432					; size = 4
$T217716 = -2428					; size = 4
$T217712 = -2424					; size = 4
$T217705 = -2420					; size = 4
$T217701 = -2416					; size = 4
$T217697 = -2412					; size = 4
$T217642 = -2408					; size = 28
$T217641 = -2380					; size = 28
$T217640 = -2352					; size = 28
$T217639 = -2324					; size = 28
$T217638 = -2296					; size = 28
$T217637 = -2268					; size = 28
$T217636 = -2240					; size = 28
$T217635 = -2212					; size = 28
$T217634 = -2184					; size = 28
$T217633 = -2156					; size = 28
$T217632 = -2128					; size = 28
$T217631 = -2100					; size = 28
$T217630 = -2072					; size = 28
$T217629 = -2044					; size = 28
$T217628 = -2016					; size = 28
$T217627 = -1988					; size = 28
$T217626 = -1960					; size = 28
$T217625 = -1932					; size = 28
$T217624 = -1904					; size = 28
$T217623 = -1876					; size = 28
$T217622 = -1848					; size = 28
$T217621 = -1820					; size = 28
$T217620 = -1792					; size = 28
$T217619 = -1764					; size = 28
$T217618 = -1736					; size = 28
$T217617 = -1708					; size = 28
$T217616 = -1680					; size = 28
$T217615 = -1652					; size = 28
$T217614 = -1624					; size = 28
$T217613 = -1596					; size = 28
$T217612 = -1568					; size = 28
_kResult$217244 = -1540					; size = 64
_kCalendarInfo$217243 = -1476				; size = 260
_idx$217242 = -1212					; size = 4
_Descr$217245 = -1208					; size = 4
_kResult$217228 = -1204					; size = 64
_kMonthInfo$217227 = -1140				; size = 260
_Descr$217229 = -872					; size = 4
_kResult$217215 = -868					; size = 64
_Desc$217216 = -800					; size = 4
_kSeasonInfo$217214 = -796				; size = 260
_kResult$217195 = -532					; size = 64
_kInfo$217196 = -468					; size = 260
_strMonth$217199 = -204					; size = 28
_iMonth$217194 = -176					; size = 4
_lstrMonth$217197 = -172				; size = 80
_iTurnMonth$217191 = -88				; size = 4
_iTempGameTurn$ = -84					; size = 4
_iNumSeasons$ = -80					; size = 4
_iNumMonths$ = -76					; size = 4
_strYearBuffer$ = -72					; size = 28
_strWeekBuffer$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_strString$ = 8						; size = 4
_iGameTurn$ = 12					; size = 4
_bSave$ = 16						; size = 1
_eCalendar$ = 20					; size = 4
_iStartYear$ = 24					; size = 4
_eSpeed$ = 28						; size = 4
?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z PROC ; CvGameTextMgr::setDateStr, COMDAT

; 61   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2840				; 00000b18H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 62   : 	CvString strYearBuffer;

	lea	ecx, DWORD PTR _strYearBuffer$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 63   : 	CvString strWeekBuffer;

	lea	ecx, DWORD PTR _strWeekBuffer$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 64   : 
; 65   : 	int iTempGameTurn = iGameTurn + GC.getHIDDEN_START_TURN_OFFSET();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6188
	mov	DWORD PTR $T217697[ebp], eax
	mov	ecx, DWORD PTR _iGameTurn$[ebp]
	add	ecx, DWORD PTR $T217697[ebp]
	mov	DWORD PTR _iTempGameTurn$[ebp], ecx

; 66   : 
; 67   : 	setYearStr(strYearBuffer, iTempGameTurn, bSave, eCalendar, iStartYear, eSpeed);

	mov	edx, DWORD PTR _eSpeed$[ebp]
	push	edx
	mov	eax, DWORD PTR _iStartYear$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eCalendar$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bSave$[ebp]
	push	edx
	mov	eax, DWORD PTR _iTempGameTurn$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strYearBuffer$[ebp]
	push	ecx
	call	?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z ; CvGameTextMgr::setYearStr
	add	esp, 24					; 00000018H

; 68   : 
; 69   : 	const int iNumMonths = DB.Count("Months");

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR $T217701[ebp], edx
	push	1
	push	OFFSET ??_C@_06DOGEMHPN@Months?$AA@
	mov	ecx, DWORD PTR $T217701[ebp]
	call	DWORD PTR __imp_?Count@Connection@Database@@QAEHPBD_N@Z
	mov	DWORD PTR _iNumMonths$[ebp], eax

; 70   : 	const int iNumSeasons = DB.Count("Seasons");

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR $T217705[ebp], eax
	push	1
	push	OFFSET ??_C@_07MADONKFL@Seasons?$AA@
	mov	ecx, DWORD PTR $T217705[ebp]
	call	DWORD PTR __imp_?Count@Connection@Database@@QAEHPBD_N@Z
	mov	DWORD PTR _iNumSeasons$[ebp], eax

; 71   : 
; 72   : 	switch(eCalendar)

	mov	ecx, DWORD PTR _eCalendar$[ebp]
	mov	DWORD PTR tv91[ebp], ecx
	cmp	DWORD PTR tv91[ebp], 6
	ja	$LN18@setDateStr
	mov	edx, DWORD PTR tv91[ebp]
	jmp	DWORD PTR $LN378@setDateStr[edx*4]
$LN17@setDateStr:

; 73   : 	{
; 74   : 	case CALENDAR_DEFAULT:
; 75   : 	{
; 76   : 		int iTurnMonth = getTurnMonthForGame(iTempGameTurn, iStartYear, eCalendar, eSpeed);

	mov	eax, DWORD PTR _eSpeed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eCalendar$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iStartYear$[ebp]
	push	edx
	mov	eax, DWORD PTR _iTempGameTurn$[ebp]
	push	eax
	call	?getTurnMonthForGame@@YAHHHW4CalendarTypes@@W4GameSpeedTypes@@@Z ; getTurnMonthForGame
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iTurnMonth$217191[ebp], eax

; 77   : 		if(0 == (getTurnMonthForGame(iTempGameTurn + 1, iStartYear, eCalendar, eSpeed) - iTurnMonth) % iNumMonths)

	mov	ecx, DWORD PTR _eSpeed$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eCalendar$[ebp]
	push	edx
	mov	eax, DWORD PTR _iStartYear$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iTempGameTurn$[ebp]
	add	ecx, 1
	push	ecx
	call	?getTurnMonthForGame@@YAHHHW4CalendarTypes@@W4GameSpeedTypes@@@Z ; getTurnMonthForGame
	add	esp, 16					; 00000010H
	sub	eax, DWORD PTR _iTurnMonth$217191[ebp]
	cdq
	idiv	DWORD PTR _iNumMonths$[ebp]
	test	edx, edx
	jne	SHORT $LN16@setDateStr

; 78   : 		{
; 79   : 			strString = strYearBuffer;

	lea	edx, DWORD PTR _strYearBuffer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 80   : 		}
; 81   : 		else

	jmp	$LN15@setDateStr
$LN16@setDateStr:

; 82   : 		{
; 83   : 			int iMonth = iTurnMonth % iNumMonths;

	mov	eax, DWORD PTR _iTurnMonth$217191[ebp]
	cdq
	idiv	DWORD PTR _iNumMonths$[ebp]
	mov	DWORD PTR _iMonth$217194[ebp], edx

; 84   : 
; 85   : 			Database::SingleResult kResult;

	push	0
	lea	ecx, DWORD PTR _kResult$217195[ebp]
	call	DWORD PTR __imp_??0SingleResult@Database@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 86   : 			CvBaseInfo kInfo;

	lea	ecx, DWORD PTR _kInfo$217196[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 87   : 			DB.SelectAt(kResult, "Months", iMonth);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR $T217712[ebp], eax
	mov	ecx, DWORD PTR _iMonth$217194[ebp]
	push	ecx
	push	OFFSET ??_C@_06DOGEMHPN@Months?$AA@
	lea	edx, DWORD PTR _kResult$217195[ebp]
	push	edx
	mov	ecx, DWORD PTR $T217712[ebp]
	call	DWORD PTR __imp_?SelectAt@Connection@Database@@QAE_NAAVResults@2@PBDH@Z

; 88   : 			kInfo.CacheResult(kResult);

	lea	eax, DWORD PTR _kResult$217195[ebp]
	push	eax
	lea	ecx, DWORD PTR _kInfo$217196[ebp]
	call	?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z ; CvBaseInfo::CacheResult

; 89   : 
; 90   : 			Localization::String lstrMonth = Localization::Lookup(kInfo.GetDescription());

	lea	ecx, DWORD PTR _kInfo$217196[ebp+36]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T217716[ebp], eax
	mov	ecx, DWORD PTR $T217716[ebp]
	push	ecx
	lea	edx, DWORD PTR _lstrMonth$217197[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 91   : 			CvString strMonth = lstrMonth.toUTF8();

	lea	ecx, DWORD PTR _lstrMonth$217197[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	DWORD PTR $T217725[ebp], eax
	cmp	DWORD PTR $T217725[ebp], 0
	je	SHORT $LN85@setDateStr
	mov	eax, DWORD PTR $T217725[ebp]
	mov	DWORD PTR tv703[ebp], eax
	jmp	SHORT $LN86@setDateStr
$LN85@setDateStr:
	mov	DWORD PTR tv703[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN86@setDateStr:
	mov	ecx, DWORD PTR tv703[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strMonth$217199[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 92   : 
; 93   : 			if(bSave)

	movzx	edx, BYTE PTR _bSave$[ebp]
	test	edx, edx
	je	$LN14@setDateStr

; 94   : 			{
; 95   : 				strString = (strYearBuffer + "-" + strMonth);

	push	OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	lea	eax, DWORD PTR _strYearBuffer$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T217612[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv159[ebp], eax
	mov	edx, DWORD PTR tv159[ebp]
	mov	DWORD PTR tv593[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	eax, DWORD PTR _strMonth$217199[ebp]
	push	eax
	mov	ecx, DWORD PTR tv593[ebp]
	push	ecx
	lea	edx, DWORD PTR $T217613[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv146[ebp], eax
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR $T217729[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR $T217729[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T217613[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T217612[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 96   : 			}
; 97   : 			else

	jmp	$LN13@setDateStr
$LN14@setDateStr:

; 98   : 			{
; 99   : 				strString = (strMonth + CvString(", ") + strYearBuffer);

	mov	ecx, OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	test	ecx, ecx
	je	SHORT $LN92@setDateStr
	mov	DWORD PTR tv754[ebp], OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	jmp	SHORT $LN93@setDateStr
$LN92@setDateStr:
	mov	DWORD PTR tv754[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN93@setDateStr:
	mov	edx, DWORD PTR tv754[ebp]
	push	edx
	lea	ecx, DWORD PTR $T217614[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	eax, DWORD PTR $T217614[ebp]
	mov	DWORD PTR tv597[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR tv597[ebp]
	push	ecx
	lea	edx, DWORD PTR _strMonth$217199[ebp]
	push	edx
	lea	eax, DWORD PTR $T217615[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv142[ebp], eax
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR tv599[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	edx, DWORD PTR _strYearBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR tv599[ebp]
	push	eax
	lea	ecx, DWORD PTR $T217616[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1193[ebp], eax
	mov	edx, DWORD PTR tv1193[ebp]
	mov	DWORD PTR $T217741[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR $T217741[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T217616[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T217615[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T217614[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN13@setDateStr:

; 100  : 			}
; 101  : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _strMonth$217199[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _lstrMonth$217197[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _kInfo$217196[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _kResult$217195[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
$LN15@setDateStr:

; 102  : 	}
; 103  : 	break;

	jmp	$LN18@setDateStr
$LN12@setDateStr:

; 104  : 	case CALENDAR_YEARS:
; 105  : 	case CALENDAR_BI_YEARLY:
; 106  : 		strString = strYearBuffer;

	lea	eax, DWORD PTR _strYearBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 107  : 		break;

	jmp	$LN18@setDateStr
$LN11@setDateStr:

; 108  : 
; 109  : 	case CALENDAR_TURNS:
; 110  : 		strString = GetLocalizedText("TXT_KEY_TIME_TURN", (iTempGameTurn + 1));

	mov	ecx, DWORD PTR _iTempGameTurn$[ebp]
	add	ecx, 1
	push	ecx
	push	OFFSET ??_C@_0BC@CCJENGCM@TXT_KEY_TIME_TURN?$AA@
	lea	edx, DWORD PTR $T217617[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1169[ebp], eax
	mov	eax, DWORD PTR tv1169[ebp]
	mov	DWORD PTR $T217815[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR $T217815[ebp]
	push	ecx
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T217617[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 111  : 		break;

	jmp	$LN18@setDateStr
$LN10@setDateStr:

; 112  : 
; 113  : 	case CALENDAR_SEASONS:
; 114  : 	{
; 115  : 		CvBaseInfo kSeasonInfo;

	lea	ecx, DWORD PTR _kSeasonInfo$217214[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH

; 116  : 		Database::SingleResult kResult;

	push	0
	lea	ecx, DWORD PTR _kResult$217215[ebp]
	call	DWORD PTR __imp_??0SingleResult@Database@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH

; 117  : 		DB.SelectAt(kResult, "Seasons", iTempGameTurn % iNumSeasons);

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR $T217823[ebp], edx
	mov	eax, DWORD PTR _iTempGameTurn$[ebp]
	cdq
	idiv	DWORD PTR _iNumSeasons$[ebp]
	push	edx
	push	OFFSET ??_C@_07MADONKFL@Seasons?$AA@
	lea	eax, DWORD PTR _kResult$217215[ebp]
	push	eax
	mov	ecx, DWORD PTR $T217823[ebp]
	call	DWORD PTR __imp_?SelectAt@Connection@Database@@QAE_NAAVResults@2@PBDH@Z

; 118  : 		kSeasonInfo.CacheResult(kResult);

	lea	ecx, DWORD PTR _kResult$217215[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kSeasonInfo$217214[ebp]
	call	?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z ; CvBaseInfo::CacheResult

; 119  : 		const char* Desc = kSeasonInfo.GetDescription();

	lea	ecx, DWORD PTR _kSeasonInfo$217214[ebp+36]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _Desc$217216[ebp], eax

; 120  : 		if(bSave)

	movzx	edx, BYTE PTR _bSave$[ebp]
	test	edx, edx
	je	$LN9@setDateStr

; 121  : 		{
; 122  : 			strString = (strYearBuffer + "-" + CvString(Desc));

	cmp	DWORD PTR _Desc$217216[ebp], 0
	je	SHORT $LN157@setDateStr
	mov	eax, DWORD PTR _Desc$217216[ebp]
	mov	DWORD PTR tv878[ebp], eax
	jmp	SHORT $LN158@setDateStr
$LN157@setDateStr:
	mov	DWORD PTR tv878[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN158@setDateStr:
	mov	ecx, DWORD PTR tv878[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T217618[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	edx, DWORD PTR $T217618[ebp]
	mov	DWORD PTR tv607[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	push	OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	lea	eax, DWORD PTR _strYearBuffer$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T217619[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv246[ebp], eax
	mov	edx, DWORD PTR tv246[ebp]
	mov	DWORD PTR tv609[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	eax, DWORD PTR tv607[ebp]
	push	eax
	mov	ecx, DWORD PTR tv609[ebp]
	push	ecx
	lea	edx, DWORD PTR $T217620[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv243[ebp], eax
	mov	eax, DWORD PTR tv243[ebp]
	mov	DWORD PTR $T217838[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR $T217838[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR $T217620[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR $T217619[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR $T217618[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 123  : 		}
; 124  : 		else

	jmp	$LN8@setDateStr
$LN9@setDateStr:

; 125  : 		{
; 126  : 			strString = (CvString(Desc) + CvString(", ") + strYearBuffer);

	mov	ecx, OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	test	ecx, ecx
	je	SHORT $LN167@setDateStr
	mov	DWORD PTR tv902[ebp], OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	jmp	SHORT $LN168@setDateStr
$LN167@setDateStr:
	mov	DWORD PTR tv902[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN168@setDateStr:
	mov	edx, DWORD PTR tv902[ebp]
	push	edx
	lea	ecx, DWORD PTR $T217621[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	eax, DWORD PTR $T217621[ebp]
	mov	DWORD PTR tv613[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	cmp	DWORD PTR _Desc$217216[ebp], 0
	je	SHORT $LN172@setDateStr
	mov	ecx, DWORD PTR _Desc$217216[ebp]
	mov	DWORD PTR tv915[ebp], ecx
	jmp	SHORT $LN173@setDateStr
$LN172@setDateStr:
	mov	DWORD PTR tv915[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN173@setDateStr:
	mov	edx, DWORD PTR tv915[ebp]
	push	edx
	lea	ecx, DWORD PTR $T217622[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	eax, DWORD PTR $T217622[ebp]
	mov	DWORD PTR tv615[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	mov	ecx, DWORD PTR tv613[ebp]
	push	ecx
	mov	edx, DWORD PTR tv615[ebp]
	push	edx
	lea	eax, DWORD PTR $T217623[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1053[ebp], eax
	mov	ecx, DWORD PTR tv1053[ebp]
	mov	DWORD PTR tv617[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	edx, DWORD PTR _strYearBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR tv617[ebp]
	push	eax
	lea	ecx, DWORD PTR $T217624[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1040[ebp], eax
	mov	edx, DWORD PTR tv1040[ebp]
	mov	DWORD PTR $T217862[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	mov	ecx, DWORD PTR $T217862[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR $T217624[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR $T217623[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR $T217622[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR $T217621[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN8@setDateStr:

; 127  : 		}
; 128  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _kResult$217215[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _kSeasonInfo$217214[ebp]
	call	??1CvBaseInfo@@QAE@XZ

; 129  : 
; 130  : 	break;

	jmp	$LN18@setDateStr
$LN7@setDateStr:

; 131  : 
; 132  : 	case CALENDAR_MONTHS:
; 133  : 	{
; 134  : 		CvBaseInfo kMonthInfo;

	lea	ecx, DWORD PTR _kMonthInfo$217227[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H

; 135  : 		Database::SingleResult kResult;

	push	0
	lea	ecx, DWORD PTR _kResult$217228[ebp]
	call	DWORD PTR __imp_??0SingleResult@Database@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H

; 136  : 		DB.SelectAt(kResult, "Months", iTempGameTurn % iNumMonths);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR $T217933[ebp], eax
	mov	eax, DWORD PTR _iTempGameTurn$[ebp]
	cdq
	idiv	DWORD PTR _iNumMonths$[ebp]
	push	edx
	push	OFFSET ??_C@_06DOGEMHPN@Months?$AA@
	lea	ecx, DWORD PTR _kResult$217228[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T217933[ebp]
	call	DWORD PTR __imp_?SelectAt@Connection@Database@@QAE_NAAVResults@2@PBDH@Z

; 137  : 		kMonthInfo.CacheResult(kResult);

	lea	edx, DWORD PTR _kResult$217228[ebp]
	push	edx
	lea	ecx, DWORD PTR _kMonthInfo$217227[ebp]
	call	?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z ; CvBaseInfo::CacheResult

; 138  : 
; 139  : 		const char* Descr = kMonthInfo.GetDescription();

	lea	ecx, DWORD PTR _kMonthInfo$217227[ebp+36]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _Descr$217229[ebp], eax

; 140  : 
; 141  : 		if(bSave)

	movzx	eax, BYTE PTR _bSave$[ebp]
	test	eax, eax
	je	$LN6@setDateStr

; 142  : 		{
; 143  : 			strString = (strYearBuffer + "-" + CvString(Descr));

	cmp	DWORD PTR _Descr$217229[ebp], 0
	je	SHORT $LN230@setDateStr
	mov	ecx, DWORD PTR _Descr$217229[ebp]
	mov	DWORD PTR tv954[ebp], ecx
	jmp	SHORT $LN231@setDateStr
$LN230@setDateStr:
	mov	DWORD PTR tv954[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN231@setDateStr:
	mov	edx, DWORD PTR tv954[ebp]
	push	edx
	lea	ecx, DWORD PTR $T217625[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	eax, DWORD PTR $T217625[ebp]
	mov	DWORD PTR tv623[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	push	OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	lea	ecx, DWORD PTR _strYearBuffer$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T217626[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv369[ebp], eax
	mov	eax, DWORD PTR tv369[ebp]
	mov	DWORD PTR tv625[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	mov	ecx, DWORD PTR tv623[ebp]
	push	ecx
	mov	edx, DWORD PTR tv625[ebp]
	push	edx
	lea	eax, DWORD PTR $T217627[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv366[ebp], eax
	mov	ecx, DWORD PTR tv366[ebp]
	mov	DWORD PTR $T217948[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	mov	ecx, DWORD PTR $T217948[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	lea	ecx, DWORD PTR $T217627[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR $T217626[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR $T217625[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 144  : 		}
; 145  : 		else

	jmp	$LN5@setDateStr
$LN6@setDateStr:

; 146  : 		{
; 147  : 			strString = (CvString(Descr) + CvString(", ") + strYearBuffer);

	mov	edx, OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	test	edx, edx
	je	SHORT $LN240@setDateStr
	mov	DWORD PTR tv1042[ebp], OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	jmp	SHORT $LN241@setDateStr
$LN240@setDateStr:
	mov	DWORD PTR tv1042[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN241@setDateStr:
	mov	eax, DWORD PTR tv1042[ebp]
	push	eax
	lea	ecx, DWORD PTR $T217628[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T217628[ebp]
	mov	DWORD PTR tv629[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	cmp	DWORD PTR _Descr$217229[ebp], 0
	je	SHORT $LN245@setDateStr
	mov	edx, DWORD PTR _Descr$217229[ebp]
	mov	DWORD PTR tv1055[ebp], edx
	jmp	SHORT $LN246@setDateStr
$LN245@setDateStr:
	mov	DWORD PTR tv1055[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN246@setDateStr:
	mov	eax, DWORD PTR tv1055[ebp]
	push	eax
	lea	ecx, DWORD PTR $T217629[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T217629[ebp]
	mov	DWORD PTR tv631[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	mov	edx, DWORD PTR tv629[ebp]
	push	edx
	mov	eax, DWORD PTR tv631[ebp]
	push	eax
	lea	ecx, DWORD PTR $T217630[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv952[ebp], eax
	mov	edx, DWORD PTR tv952[ebp]
	mov	DWORD PTR tv633[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	lea	eax, DWORD PTR _strYearBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv633[ebp]
	push	ecx
	lea	edx, DWORD PTR $T217631[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv913[ebp], eax
	mov	eax, DWORD PTR tv913[ebp]
	mov	DWORD PTR $T217972[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 29		; 0000001dH
	mov	ecx, DWORD PTR $T217972[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	lea	ecx, DWORD PTR $T217631[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	lea	ecx, DWORD PTR $T217630[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	lea	ecx, DWORD PTR $T217629[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR $T217628[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN5@setDateStr:

; 148  : 		}
; 149  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _kResult$217228[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _kMonthInfo$217227[ebp]
	call	??1CvBaseInfo@@QAE@XZ

; 150  : 
; 151  : 
; 152  : 	break;

	jmp	$LN18@setDateStr
$LN4@setDateStr:

; 153  : 
; 154  : 	case CALENDAR_WEEKS:
; 155  : 	{
; 156  : 		strWeekBuffer = GetLocalizedText("TXT_KEY_TIME_WEEK", ((iTempGameTurn % GC.getWEEKS_PER_MONTHS()) + 1));

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6184
	mov	DWORD PTR $T218043[ebp], ecx
	mov	eax, DWORD PTR _iTempGameTurn$[ebp]
	cdq
	idiv	DWORD PTR $T218043[ebp]
	add	edx, 1
	push	edx
	push	OFFSET ??_C@_0BC@FBDDLKND@TXT_KEY_TIME_WEEK?$AA@
	lea	edx, DWORD PTR $T217632[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv900[ebp], eax
	mov	eax, DWORD PTR tv900[ebp]
	mov	DWORD PTR $T218047[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 30		; 0000001eH
	mov	ecx, DWORD PTR $T218047[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strWeekBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T217632[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 157  : 
; 158  : 		const int idx = (iTempGameTurn / GC.getWEEKS_PER_MONTHS()) % iNumMonths;

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6184
	mov	DWORD PTR $T218055[ebp], edx
	mov	eax, DWORD PTR _iTempGameTurn$[ebp]
	cdq
	idiv	DWORD PTR $T218055[ebp]
	cdq
	idiv	DWORD PTR _iNumMonths$[ebp]
	mov	DWORD PTR _idx$217242[ebp], edx

; 159  : 
; 160  : 		CvBaseInfo kCalendarInfo;

	lea	ecx, DWORD PTR _kCalendarInfo$217243[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	BYTE PTR __$EHRec$[ebp+8], 31		; 0000001fH

; 161  : 		Database::SingleResult kResult;

	push	0
	lea	ecx, DWORD PTR _kResult$217244[ebp]
	call	DWORD PTR __imp_??0SingleResult@Database@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 32		; 00000020H

; 162  : 
; 163  : 		DB.SelectAt(kResult, "Months", idx);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR $T218059[ebp], eax
	mov	ecx, DWORD PTR _idx$217242[ebp]
	push	ecx
	push	OFFSET ??_C@_06DOGEMHPN@Months?$AA@
	lea	edx, DWORD PTR _kResult$217244[ebp]
	push	edx
	mov	ecx, DWORD PTR $T218059[ebp]
	call	DWORD PTR __imp_?SelectAt@Connection@Database@@QAE_NAAVResults@2@PBDH@Z

; 164  : 		kCalendarInfo.CacheResult(kResult);

	lea	eax, DWORD PTR _kResult$217244[ebp]
	push	eax
	lea	ecx, DWORD PTR _kCalendarInfo$217243[ebp]
	call	?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z ; CvBaseInfo::CacheResult

; 165  : 
; 166  : 		const char* Descr = kCalendarInfo.GetDescription();

	lea	ecx, DWORD PTR _kCalendarInfo$217243[ebp+36]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _Descr$217245[ebp], eax

; 167  : 
; 168  : 
; 169  : 		if(bSave)

	movzx	ecx, BYTE PTR _bSave$[ebp]
	test	ecx, ecx
	je	$LN3@setDateStr

; 170  : 		{
; 171  : 			strString = (strYearBuffer + "-" + CvString(Descr) + "-" + strWeekBuffer);

	cmp	DWORD PTR _Descr$217245[ebp], 0
	je	SHORT $LN312@setDateStr
	mov	edx, DWORD PTR _Descr$217245[ebp]
	mov	DWORD PTR tv1171[ebp], edx
	jmp	SHORT $LN313@setDateStr
$LN312@setDateStr:
	mov	DWORD PTR tv1171[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN313@setDateStr:
	mov	eax, DWORD PTR tv1171[ebp]
	push	eax
	lea	ecx, DWORD PTR $T217633[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T217633[ebp]
	mov	DWORD PTR tv641[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	push	OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	lea	edx, DWORD PTR _strYearBuffer$[ebp]
	push	edx
	lea	eax, DWORD PTR $T217634[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv476[ebp], eax
	mov	ecx, DWORD PTR tv476[ebp]
	mov	DWORD PTR tv643[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 34		; 00000022H
	mov	edx, DWORD PTR tv641[ebp]
	push	edx
	mov	eax, DWORD PTR tv643[ebp]
	push	eax
	lea	ecx, DWORD PTR $T217635[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv473[ebp], eax
	mov	edx, DWORD PTR tv473[ebp]
	mov	DWORD PTR tv645[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 35		; 00000023H
	push	OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	mov	eax, DWORD PTR tv645[ebp]
	push	eax
	lea	ecx, DWORD PTR $T217636[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv876[ebp], eax
	mov	edx, DWORD PTR tv876[ebp]
	mov	DWORD PTR tv647[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 36		; 00000024H
	lea	eax, DWORD PTR _strWeekBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv647[ebp]
	push	ecx
	lea	edx, DWORD PTR $T217637[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv752[ebp], eax
	mov	eax, DWORD PTR tv752[ebp]
	mov	DWORD PTR $T218074[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 37		; 00000025H
	mov	ecx, DWORD PTR $T218074[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 36		; 00000024H
	lea	ecx, DWORD PTR $T217637[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 35		; 00000023H
	lea	ecx, DWORD PTR $T217636[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 34		; 00000022H
	lea	ecx, DWORD PTR $T217635[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	lea	ecx, DWORD PTR $T217634[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 32		; 00000020H
	lea	ecx, DWORD PTR $T217633[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 172  : 		}
; 173  : 		else

	jmp	$LN2@setDateStr
$LN3@setDateStr:

; 174  : 		{
; 175  : 			strString = (strWeekBuffer + ", " + CvString(Descr) + ", " + strYearBuffer);

	cmp	DWORD PTR _Descr$217245[ebp], 0
	je	SHORT $LN322@setDateStr
	mov	ecx, DWORD PTR _Descr$217245[ebp]
	mov	DWORD PTR tv1195[ebp], ecx
	jmp	SHORT $LN323@setDateStr
$LN322@setDateStr:
	mov	DWORD PTR tv1195[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN323@setDateStr:
	mov	edx, DWORD PTR tv1195[ebp]
	push	edx
	lea	ecx, DWORD PTR $T217638[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	eax, DWORD PTR $T217638[ebp]
	mov	DWORD PTR tv651[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 38		; 00000026H
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	ecx, DWORD PTR _strWeekBuffer$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T217639[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv701[ebp], eax
	mov	eax, DWORD PTR tv701[ebp]
	mov	DWORD PTR tv653[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 39		; 00000027H
	mov	ecx, DWORD PTR tv651[ebp]
	push	ecx
	mov	edx, DWORD PTR tv653[ebp]
	push	edx
	lea	eax, DWORD PTR $T217640[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv676[ebp], eax
	mov	ecx, DWORD PTR tv676[ebp]
	mov	DWORD PTR tv655[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 40		; 00000028H
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	mov	edx, DWORD PTR tv655[ebp]
	push	edx
	lea	eax, DWORD PTR $T217641[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv665[ebp], eax
	mov	ecx, DWORD PTR tv665[ebp]
	mov	DWORD PTR tv657[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 41		; 00000029H
	lea	edx, DWORD PTR _strYearBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR tv657[ebp]
	push	eax
	lea	ecx, DWORD PTR $T217642[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv66[ebp], eax
	mov	edx, DWORD PTR tv66[ebp]
	mov	DWORD PTR $T218090[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 42		; 0000002aH
	mov	ecx, DWORD PTR $T218090[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _strString$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 41		; 00000029H
	lea	ecx, DWORD PTR $T217642[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 40		; 00000028H
	lea	ecx, DWORD PTR $T217641[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 39		; 00000027H
	lea	ecx, DWORD PTR $T217640[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 38		; 00000026H
	lea	ecx, DWORD PTR $T217639[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 32		; 00000020H
	lea	ecx, DWORD PTR $T217638[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@setDateStr:

; 176  : 		}
; 177  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 31		; 0000001fH
	lea	ecx, DWORD PTR _kResult$217244[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _kCalendarInfo$217243[ebp]
	call	??1CvBaseInfo@@QAE@XZ
$LN18@setDateStr:

; 178  : 	break;
; 179  : 
; 180  : 	default:
; 181  : 		CvAssert(false);
; 182  : 	}
; 183  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strWeekBuffer$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strYearBuffer$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN378@setDateStr:
	DD	$LN17@setDateStr
	DD	$LN12@setDateStr
	DD	$LN12@setDateStr
	DD	$LN11@setDateStr
	DD	$LN10@setDateStr
	DD	$LN7@setDateStr
	DD	$LN4@setDateStr
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$0:
	lea	ecx, DWORD PTR _strYearBuffer$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$1:
	lea	ecx, DWORD PTR _strWeekBuffer$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$2:
	lea	ecx, DWORD PTR _kResult$217195[ebp]
	jmp	??1SingleResult@Database@@UAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$3:
	lea	ecx, DWORD PTR _kInfo$217196[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$4:
	lea	ecx, DWORD PTR _lstrMonth$217197[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$5:
	lea	ecx, DWORD PTR _strMonth$217199[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$6:
	lea	ecx, DWORD PTR $T217612[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$7:
	lea	ecx, DWORD PTR $T217613[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$8:
	lea	ecx, DWORD PTR $T217614[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$9:
	lea	ecx, DWORD PTR $T217615[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$10:
	lea	ecx, DWORD PTR $T217616[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$11:
	lea	ecx, DWORD PTR $T217617[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$12:
	lea	ecx, DWORD PTR _kSeasonInfo$217214[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$13:
	lea	ecx, DWORD PTR _kResult$217215[ebp]
	jmp	??1SingleResult@Database@@UAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$14:
	lea	ecx, DWORD PTR $T217618[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$15:
	lea	ecx, DWORD PTR $T217619[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$16:
	lea	ecx, DWORD PTR $T217620[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$17:
	lea	ecx, DWORD PTR $T217621[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$18:
	lea	ecx, DWORD PTR $T217622[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$19:
	lea	ecx, DWORD PTR $T217623[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$20:
	lea	ecx, DWORD PTR $T217624[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$21:
	lea	ecx, DWORD PTR _kMonthInfo$217227[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$22:
	lea	ecx, DWORD PTR _kResult$217228[ebp]
	jmp	??1SingleResult@Database@@UAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$23:
	lea	ecx, DWORD PTR $T217625[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$24:
	lea	ecx, DWORD PTR $T217626[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$25:
	lea	ecx, DWORD PTR $T217627[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$26:
	lea	ecx, DWORD PTR $T217628[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$27:
	lea	ecx, DWORD PTR $T217629[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$28:
	lea	ecx, DWORD PTR $T217630[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$29:
	lea	ecx, DWORD PTR $T217631[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$30:
	lea	ecx, DWORD PTR $T217632[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$31:
	lea	ecx, DWORD PTR _kCalendarInfo$217243[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$32:
	lea	ecx, DWORD PTR _kResult$217244[ebp]
	jmp	??1SingleResult@Database@@UAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$33:
	lea	ecx, DWORD PTR $T217633[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$34:
	lea	ecx, DWORD PTR $T217634[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$35:
	lea	ecx, DWORD PTR $T217635[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$36:
	lea	ecx, DWORD PTR $T217636[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$37:
	lea	ecx, DWORD PTR $T217637[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$38:
	lea	ecx, DWORD PTR $T217638[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$39:
	lea	ecx, DWORD PTR $T217639[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$40:
	lea	ecx, DWORD PTR $T217640[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$41:
	lea	ecx, DWORD PTR $T217641[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$42:
	lea	ecx, DWORD PTR $T217642[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2844]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z ENDP ; CvGameTextMgr::setDateStr
; Function compile flags: /Odtp
;	COMDAT ??1SingleResult@Database@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SingleResult@Database@@UAE@XZ PROC			; Database::SingleResult::~SingleResult, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1SingleResult@Database@@UAE@XZ ENDP			; Database::SingleResult::~SingleResult
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CvBaseInfo@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1CvBaseInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvBaseInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1CvBaseInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T218227 = -48						; size = 4
$T218222 = -44						; size = 4
$T218217 = -40						; size = 4
$T218212 = -36						; size = 4
$T218207 = -32						; size = 4
$T218202 = -28						; size = 4
$T218197 = -24						; size = 4
$T218192 = -20						; size = 4
$T218187 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvBaseInfo@@QAE@XZ PROC				; CvBaseInfo::~CvBaseInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvBaseInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 232				; 000000e8H
	mov	DWORD PTR $T218187[ebp], eax
	mov	ecx, DWORD PTR $T218187[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	mov	DWORD PTR $T218192[ebp], ecx
	mov	ecx, DWORD PTR $T218192[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	mov	DWORD PTR $T218197[ebp], edx
	mov	ecx, DWORD PTR $T218197[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 148				; 00000094H
	mov	DWORD PTR $T218202[ebp], eax
	mov	ecx, DWORD PTR $T218202[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	mov	DWORD PTR $T218207[ebp], ecx
	mov	ecx, DWORD PTR $T218207[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR $T218212[ebp], edx
	mov	ecx, DWORD PTR $T218212[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR $T218217[ebp], eax
	mov	ecx, DWORD PTR $T218217[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR $T218222[ebp], ecx
	mov	ecx, DWORD PTR $T218222[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	mov	DWORD PTR $T218227[ebp], edx
	mov	ecx, DWORD PTR $T218227[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvBaseInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvBaseInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvBaseInfo@@QAE@XZ ENDP				; CvBaseInfo::~CvBaseInfo
PUBLIC	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
PUBLIC	__$ArrayPad$
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z:PROC
EXTRN	__imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$1
__ehfuncinfo$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z
_TEXT	SEGMENT
$T218240 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z PROC ; GetLocalizedText<char const *,char const *>, COMDAT

; 514  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T218240[ebp], 0

; 515  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 516  : 	text << arg1 << arg2;

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 517  : 
; 518  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 519  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 520  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 521  : 	str.assign(szComposedString, bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szComposedString$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 522  : 	return str;

	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T218240[ebp]
	or	eax, 1
	mov	DWORD PTR $T218240[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 523  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$2:
	mov	eax, DWORD PTR $T218240[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz
	and	DWORD PTR $T218240[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz:
	ret	0
__ehhandler$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z ENDP ; GetLocalizedText<char const *,char const *>
PUBLIC	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z	; operator<<<int>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$1
__ehfuncinfo$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z
_TEXT	SEGMENT
$T218266 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z PROC	; GetLocalizedText<int>, COMDAT

; 501  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T218266[ebp], 0

; 502  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 503  : 	text << arg1;

	lea	edx, DWORD PTR _arg1$[ebp]
	push	edx
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 504  : 
; 505  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 506  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 507  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 508  : 	str.assign(szComposedString, bytes);

	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _szComposedString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 509  : 	return str;

	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T218266[ebp]
	or	edx, 1
	mov	DWORD PTR $T218266[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 510  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$2:
	mov	eax, DWORD PTR $T218266[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@2
	and	DWORD PTR $T218266[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@2:
	ret	0
__ehhandler$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ENDP	; GetLocalizedText<int>
PUBLIC	??$?6$04@@YAAAVString@Localization@@AAV01@AAY04$$CBD@Z ; operator<<<5>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z$1
__ehfuncinfo$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z
_TEXT	SEGMENT
$T218292 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z PROC ; GetLocalizedText<char const [5],char const *>, COMDAT

; 514  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T218292[ebp], 0

; 515  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 516  : 	text << arg1 << arg2;

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	??$?6$04@@YAAAVString@Localization@@AAV01@AAY04$$CBD@Z ; operator<<<5>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 517  : 
; 518  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 519  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 520  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 521  : 	str.assign(szComposedString, bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szComposedString$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 522  : 	return str;

	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T218292[ebp]
	or	eax, 1
	mov	DWORD PTR $T218292[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 523  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z$2:
	mov	eax, DWORD PTR $T218292[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@3
	and	DWORD PTR $T218292[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@3:
	ret	0
__ehhandler$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z ENDP ; GetLocalizedText<char const [5],char const *>
EXTRN	__imp_?PushArgument@String@Localization@@QAE_NPBD@Z:PROC
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvlocalization\include\cvlocalization.h
;	COMDAT ??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_val$ = 12						; size = 4
??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z PROC	; operator<<<char const *>, COMDAT

; 490  : {

	push	ebp
	mov	ebp, esp

; 491  : 	s.PushArgument(val);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 492  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 493  : }

	pop	ebp
	ret	0
??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ENDP	; operator<<<char const *>
_TEXT	ENDS
EXTRN	__imp_?PushArgument@String@Localization@@QAE_NH@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_val$ = 12						; size = 4
??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z PROC	; operator<<<int>, COMDAT

; 490  : {

	push	ebp
	mov	ebp, esp

; 491  : 	s.PushArgument(val);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NH@Z

; 492  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 493  : }

	pop	ebp
	ret	0
??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ENDP	; operator<<<int>
_TEXT	ENDS
EXTRN	__imp_?PushArgument@String@Localization@@QAE_NPBDI@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??$?6$04@@YAAAVString@Localization@@AAV01@AAY04$$CBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_val$ = 12						; size = 4
??$?6$04@@YAAAVString@Localization@@AAV01@AAY04$$CBD@Z PROC ; operator<<<5>, COMDAT

; 497  : {

	push	ebp
	mov	ebp, esp

; 498  : 	s.PushArgument(val, N - 1);

	push	4
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBDI@Z

; 499  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 500  : }

	pop	ebp
	ret	0
??$?6$04@@YAAAVString@Localization@@AAV01@AAY04$$CBD@Z ENDP ; operator<<<5>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
_TEXT	ENDS
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?format@CvString@@SA?AV1@PBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?format@CvString@@SA?AV1@PBDZZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?format@CvString@@SA?AV1@PBDZZ$0
__ehfuncinfo$?format@CvString@@SA?AV1@PBDZZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?format@CvString@@SA?AV1@PBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?format@CvString@@SA?AV1@PBDZZ
_TEXT	SEGMENT
$T218326 = -52						; size = 4
_result$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_args$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_fmt$ = 12						; size = 4
?format@CvString@@SA?AV1@PBDZZ PROC			; CvString::format, COMDAT

; 243  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?format@CvString@@SA?AV1@PBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2128				; 00000850H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T218326[ebp], 0

; 244  : 	std::string result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 245  : 	va_list args;
; 246  : 	va_start(args,fmt);

	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 247  : 	formatv(result,fmt,args);

	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fmt$[ebp]
	push	edx
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 248  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 249  : 	return CvString(result);

	lea	ecx, DWORD PTR _result$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T218326[ebp]
	or	edx, 1
	mov	DWORD PTR $T218326[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 250  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?format@CvString@@SA?AV1@PBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?format@CvString@@SA?AV1@PBDZZ$1:
	mov	eax, DWORD PTR $T218326[ebp]
	and	eax, 1
	je	$LN5@format
	and	DWORD PTR $T218326[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN5@format:
	ret	0
__ehhandler$?format@CvString@@SA?AV1@PBDZZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?format@CvString@@SA?AV1@PBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?format@CvString@@SA?AV1@PBDZZ ENDP			; CvString::format
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp___vsnprintf:PROC
; Function compile flags: /Odtp
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
tv74 = -2096						; size = 4
$T218352 = -2092					; size = 4
$T218351 = -2088					; size = 4
$T218350 = -2084					; size = 4
_maxlen$95294 = -2080					; size = 4
_kMaxAttempts$ = -2076					; size = 4
_buf$ = -2072						; size = 2048
__$ArrayPad$ = -20					; size = 4
_len$ = -16						; size = 4
_attempts$ = -12					; size = 4
_success$ = -5						; size = 1
_pbuf$ = -4						; size = 4
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2096				; 00000830H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax

; 194  : 	int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 195  : 	int attempts = 0;

	mov	DWORD PTR _attempts$[ebp], 0

; 196  : 	bool success = false;

	mov	BYTE PTR _success$[ebp], 0

; 197  : 	const int kMaxAttempts = 40;

	mov	DWORD PTR _kMaxAttempts$[ebp], 40	; 00000028H
$LN10@formatv:

; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;

	mov	ecx, DWORD PTR _attempts$[ebp]
	shl	ecx, 11					; 0000000bH
	add	ecx, 2047				; 000007ffH
	mov	DWORD PTR _maxlen$95294[ebp], ecx

; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxlen$95294[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax

; 203  : 		attempts++;

	mov	eax, DWORD PTR _attempts$[ebp]
	add	eax, 1
	mov	DWORD PTR _attempts$[ebp], eax

; 204  : 		success = (len>=0 && len<=maxlen);

	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN13@formatv
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _maxlen$95294[ebp]
	jg	SHORT $LN13@formatv
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN14@formatv
$LN13@formatv:
	mov	DWORD PTR tv74[ebp], 0
$LN14@formatv:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _success$[ebp], dl

; 205  : 		if (!success)

	movzx	eax, BYTE PTR _success$[ebp]
	test	eax, eax
	jne	SHORT $LN9@formatv

; 206  : 		{
; 207  : 			if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T218350[ebp], eax
	mov	ecx, DWORD PTR $T218350[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	mov	edx, DWORD PTR _attempts$[ebp]
	shl	edx, 11					; 0000000bH
	add	edx, 2048				; 00000800H
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T218351[ebp], eax
	mov	eax, DWORD PTR $T218351[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax
$LN9@formatv:

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	movzx	ecx, BYTE PTR _success$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@formatv
	cmp	DWORD PTR _attempts$[ebp], 40		; 00000028H
	jl	$LN10@formatv
$LN4@formatv:

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)

	movzx	edx, BYTE PTR _success$[ebp]
	test	edx, edx
	je	SHORT $LN3@formatv

; 220  : 		out = pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 221  : 	else

	jmp	SHORT $LN2@formatv
$LN3@formatv:

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN2@formatv:

; 223  : 
; 224  : 	if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@formatv

; 225  : 		delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T218352[ebp], eax
	mov	ecx, DWORD PTR $T218352[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@formatv:

; 226  : 
; 227  : 	return success;

	mov	al, BYTE PTR _success$[ebp]

; 228  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
END
