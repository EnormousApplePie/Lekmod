; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\Lua\CvLuaGameInfo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?pRegisterTypesInfo@CvLuaGameInfo@@CAHPAUlua_State@@@Z ; CvLuaGameInfo::pRegisterTypesInfo
PUBLIC	?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z ; CvLuaGameInfo::pRegisterActions
PUBLIC	?Register@CvLuaGameInfo@@SAXPAUlua_State@@@Z	; CvLuaGameInfo::Register
EXTRN	?CCallWithErrorHandling@Details@FLua@@YA_NPAUlua_State@@P6AH0@ZPAX@Z:PROC ; FLua::Details::CCallWithErrorHandling
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\lua\cvluagameinfo.cpp
;	COMDAT ?Register@CvLuaGameInfo@@SAXPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?Register@CvLuaGameInfo@@SAXPAUlua_State@@@Z PROC	; CvLuaGameInfo::Register, COMDAT

; 26   : {

	push	ebp
	mov	ebp, esp

; 27   : 	//Register other game info structures.
; 28   : 	Lua::CCallWithErrorHandling(L, pRegisterActions);

	push	0
	push	OFFSET ?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z ; CvLuaGameInfo::pRegisterActions
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?CCallWithErrorHandling@Details@FLua@@YA_NPAUlua_State@@P6AH0@ZPAX@Z ; FLua::Details::CCallWithErrorHandling
	add	esp, 12					; 0000000cH

; 29   : 	Lua::CCallWithErrorHandling(L, pRegisterTypesInfo);

	push	0
	push	OFFSET ?pRegisterTypesInfo@CvLuaGameInfo@@CAHPAUlua_State@@@Z ; CvLuaGameInfo::pRegisterTypesInfo
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?CCallWithErrorHandling@Details@FLua@@YA_NPAUlua_State@@P6AH0@ZPAX@Z ; FLua::Details::CCallWithErrorHandling
	add	esp, 12					; 0000000cH

; 30   : }

	pop	ebp
	ret	0
?Register@CvLuaGameInfo@@SAXPAUlua_State@@@Z ENDP	; CvLuaGameInfo::Register
_TEXT	ENDS
PUBLIC	??1Field@Table@FLua@@QAE@XZ			; FLua::Table::Field::~Field
PUBLIC	??1Table@FLua@@QAE@XZ				; FLua::Table::~Table
PUBLIC	??_C@_0N@NEBCCCLG@DisabledHelp?$AA@		; `string'
PUBLIC	??_C@_04DDFEFHOJ@Help?$AA@			; `string'
PUBLIC	??_C@_06BMHDPEFH@HotKey?$AA@			; `string'
PUBLIC	??_C@_0M@MPNOPFE@CtrlDownAlt?$AA@		; `string'
PUBLIC	??_C@_0N@PJIAADMH@ShiftDownAlt?$AA@		; `string'
PUBLIC	??_C@_0L@CMBAELLL@AltDownAlt?$AA@		; `string'
PUBLIC	??_C@_08LGMEGEPK@CtrlDown?$AA@			; `string'
PUBLIC	??_C@_09HKGKCFMG@ShiftDown?$AA@			; `string'
PUBLIC	??_C@_07MHLJKKID@AltDown?$AA@			; `string'
PUBLIC	??_C@_0O@IDIFOGP@OrderPriority?$AA@		; `string'
PUBLIC	??_C@_0BC@CDBJAMJN@HotKeyPriorityAlt?$AA@	; `string'
PUBLIC	??_C@_0N@DGNALAGE@HotKeyValAlt?$AA@		; `string'
PUBLIC	??_C@_0P@PEOGILMO@HotKeyPriority?$AA@		; `string'
PUBLIC	??_C@_09LOBEOJNE@HotKeyVal?$AA@			; `string'
PUBLIC	??_C@_0BA@GMEPLFHB@ActionInfoIndex?$AA@		; `string'
PUBLIC	??_C@_07IFOIGDAD@TextKey?$AA@			; `string'
PUBLIC	??$SetField@PBD@Table@FLua@@QAEXABVValue@1@PBD@Z ; FLua::Table::SetField<char const *>
PUBLIC	??_C@_04KOACHJEN@Type?$AA@			; `string'
PUBLIC	??_C@_07CNMHPEMB@SubType?$AA@			; `string'
PUBLIC	??_C@_07MGEGCLJM@Visible?$AA@			; `string'
PUBLIC	??$SetField@_N@Table@FLua@@QAEXABVValue@1@_N@Z	; FLua::Table::SetField<bool>
PUBLIC	??_C@_0P@KBPGNMLL@ConfirmCommand?$AA@		; `string'
PUBLIC	??_C@_0O@NFDKCCAD@OriginalIndex?$AA@		; `string'
PUBLIC	??_C@_0M@BJPIIMBL@ControlType?$AA@		; `string'
PUBLIC	??_C@_0M@EKLMHMCD@CommandType?$AA@		; `string'
PUBLIC	??_C@_0M@MCFEHOKB@MissionType?$AA@		; `string'
PUBLIC	??_C@_0BC@OMFEEPKH@InterfaceModeType?$AA@	; `string'
PUBLIC	??_C@_0N@CEMCKEJD@AutomateType?$AA@		; `string'
PUBLIC	??_C@_0M@NMJEPJAJ@CommandData?$AA@		; `string'
PUBLIC	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z	; FLua::Table::SetField<int>
PUBLIC	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z	; FLua::Table::operator[]<char const *>
PUBLIC	??_C@_0M@FEHMPLIL@MissionData?$AA@		; `string'
PUBLIC	??_C@_0BA@JNFAFNKG@GameInfoActions?$AA@		; `string'
EXTRN	_lua_rawseti:PROC
EXTRN	?GetDisabledHelp@CvActionInfo@@QBEPBDXZ:PROC	; CvActionInfo::GetDisabledHelp
EXTRN	?GetHelp@CvActionInfo@@QBEPBDXZ:PROC		; CvActionInfo::GetHelp
EXTRN	?getHotKeyString@CvActionInfo@@QBEPBDXZ:PROC	; CvActionInfo::getHotKeyString
EXTRN	?isCtrlDownAlt@CvActionInfo@@QBE_NXZ:PROC	; CvActionInfo::isCtrlDownAlt
EXTRN	?isShiftDownAlt@CvActionInfo@@QBE_NXZ:PROC	; CvActionInfo::isShiftDownAlt
EXTRN	?isAltDownAlt@CvActionInfo@@QBE_NXZ:PROC	; CvActionInfo::isAltDownAlt
EXTRN	?isCtrlDown@CvActionInfo@@QBE_NXZ:PROC		; CvActionInfo::isCtrlDown
EXTRN	?isShiftDown@CvActionInfo@@QBE_NXZ:PROC		; CvActionInfo::isShiftDown
EXTRN	?isAltDown@CvActionInfo@@QBE_NXZ:PROC		; CvActionInfo::isAltDown
EXTRN	?getOrderPriority@CvActionInfo@@QBEHXZ:PROC	; CvActionInfo::getOrderPriority
EXTRN	?getHotKeyPriorityAlt@CvActionInfo@@QBEHXZ:PROC	; CvActionInfo::getHotKeyPriorityAlt
EXTRN	?getHotKeyValAlt@CvActionInfo@@QBEHXZ:PROC	; CvActionInfo::getHotKeyValAlt
EXTRN	?getHotKeyPriority@CvActionInfo@@QBEHXZ:PROC	; CvActionInfo::getHotKeyPriority
EXTRN	?getHotKeyVal@CvActionInfo@@QBEHXZ:PROC		; CvActionInfo::getHotKeyVal
EXTRN	?getActionInfoIndex@CvActionInfo@@QBEHXZ:PROC	; CvActionInfo::getActionInfoIndex
EXTRN	?GetTextKey@CvActionInfo@@QBEPBDXZ:PROC		; CvActionInfo::GetTextKey
EXTRN	?GetType@CvActionInfo@@QBEPBDXZ:PROC		; CvActionInfo::GetType
EXTRN	?getSubType@CvActionInfo@@QBE?AW4ActionSubTypes@@XZ:PROC ; CvActionInfo::getSubType
EXTRN	?isVisible@CvActionInfo@@QBE_NXZ:PROC		; CvActionInfo::isVisible
EXTRN	?isConfirmCommand@CvActionInfo@@QBE_NXZ:PROC	; CvActionInfo::isConfirmCommand
EXTRN	?getOriginalIndex@CvActionInfo@@QBEHXZ:PROC	; CvActionInfo::getOriginalIndex
EXTRN	?getControlType@CvActionInfo@@QBEHXZ:PROC	; CvActionInfo::getControlType
EXTRN	?getCommandType@CvActionInfo@@QBEHXZ:PROC	; CvActionInfo::getCommandType
EXTRN	?getMissionType@CvActionInfo@@QBEHXZ:PROC	; CvActionInfo::getMissionType
EXTRN	?getInterfaceModeType@CvActionInfo@@QBEHXZ:PROC	; CvActionInfo::getInterfaceModeType
EXTRN	?getAutomateType@CvActionInfo@@QBEHXZ:PROC	; CvActionInfo::getAutomateType
EXTRN	?getCommandData@CvActionInfo@@QBEHXZ:PROC	; CvActionInfo::getCommandData
EXTRN	??1Value@FLua@@QAE@XZ:PROC			; FLua::Value::~Value
EXTRN	?getMissionData@CvActionInfo@@QBEHXZ:PROC	; CvActionInfo::getMissionData
EXTRN	??0Value@FLua@@QAE@PAUlua_State@@H@Z:PROC	; FLua::Value::Value
EXTRN	?getActionInfo@CvGlobals@@QAEAAV?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@XZ:PROC ; CvGlobals::getActionInfo
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	_lua_gettop:PROC
EXTRN	_lua_setfield:PROC
EXTRN	_lua_pushvalue:PROC
EXTRN	_lua_createtable:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0N@NEBCCCLG@DisabledHelp?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\flua\include\fluatypes.h
CONST	SEGMENT
??_C@_0N@NEBCCCLG@DisabledHelp?$AA@ DB 'DisabledHelp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDFEFHOJ@Help?$AA@
CONST	SEGMENT
??_C@_04DDFEFHOJ@Help?$AA@ DB 'Help', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMHDPEFH@HotKey?$AA@
CONST	SEGMENT
??_C@_06BMHDPEFH@HotKey?$AA@ DB 'HotKey', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MPNOPFE@CtrlDownAlt?$AA@
CONST	SEGMENT
??_C@_0M@MPNOPFE@CtrlDownAlt?$AA@ DB 'CtrlDownAlt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PJIAADMH@ShiftDownAlt?$AA@
CONST	SEGMENT
??_C@_0N@PJIAADMH@ShiftDownAlt?$AA@ DB 'ShiftDownAlt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CMBAELLL@AltDownAlt?$AA@
CONST	SEGMENT
??_C@_0L@CMBAELLL@AltDownAlt?$AA@ DB 'AltDownAlt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LGMEGEPK@CtrlDown?$AA@
CONST	SEGMENT
??_C@_08LGMEGEPK@CtrlDown?$AA@ DB 'CtrlDown', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HKGKCFMG@ShiftDown?$AA@
CONST	SEGMENT
??_C@_09HKGKCFMG@ShiftDown?$AA@ DB 'ShiftDown', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MHLJKKID@AltDown?$AA@
CONST	SEGMENT
??_C@_07MHLJKKID@AltDown?$AA@ DB 'AltDown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IDIFOGP@OrderPriority?$AA@
CONST	SEGMENT
??_C@_0O@IDIFOGP@OrderPriority?$AA@ DB 'OrderPriority', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CDBJAMJN@HotKeyPriorityAlt?$AA@
CONST	SEGMENT
??_C@_0BC@CDBJAMJN@HotKeyPriorityAlt?$AA@ DB 'HotKeyPriorityAlt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DGNALAGE@HotKeyValAlt?$AA@
CONST	SEGMENT
??_C@_0N@DGNALAGE@HotKeyValAlt?$AA@ DB 'HotKeyValAlt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PEOGILMO@HotKeyPriority?$AA@
CONST	SEGMENT
??_C@_0P@PEOGILMO@HotKeyPriority?$AA@ DB 'HotKeyPriority', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LOBEOJNE@HotKeyVal?$AA@
CONST	SEGMENT
??_C@_09LOBEOJNE@HotKeyVal?$AA@ DB 'HotKeyVal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GMEPLFHB@ActionInfoIndex?$AA@
CONST	SEGMENT
??_C@_0BA@GMEPLFHB@ActionInfoIndex?$AA@ DB 'ActionInfoIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07IFOIGDAD@TextKey?$AA@
CONST	SEGMENT
??_C@_07IFOIGDAD@TextKey?$AA@ DB 'TextKey', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KOACHJEN@Type?$AA@
CONST	SEGMENT
??_C@_04KOACHJEN@Type?$AA@ DB 'Type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CNMHPEMB@SubType?$AA@
CONST	SEGMENT
??_C@_07CNMHPEMB@SubType?$AA@ DB 'SubType', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MGEGCLJM@Visible?$AA@
CONST	SEGMENT
??_C@_07MGEGCLJM@Visible?$AA@ DB 'Visible', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KBPGNMLL@ConfirmCommand?$AA@
CONST	SEGMENT
??_C@_0P@KBPGNMLL@ConfirmCommand?$AA@ DB 'ConfirmCommand', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NFDKCCAD@OriginalIndex?$AA@
CONST	SEGMENT
??_C@_0O@NFDKCCAD@OriginalIndex?$AA@ DB 'OriginalIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BJPIIMBL@ControlType?$AA@
CONST	SEGMENT
??_C@_0M@BJPIIMBL@ControlType?$AA@ DB 'ControlType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EKLMHMCD@CommandType?$AA@
CONST	SEGMENT
??_C@_0M@EKLMHMCD@CommandType?$AA@ DB 'CommandType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MCFEHOKB@MissionType?$AA@
CONST	SEGMENT
??_C@_0M@MCFEHOKB@MissionType?$AA@ DB 'MissionType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OMFEEPKH@InterfaceModeType?$AA@
CONST	SEGMENT
??_C@_0BC@OMFEEPKH@InterfaceModeType?$AA@ DB 'InterfaceModeType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CEMCKEJD@AutomateType?$AA@
CONST	SEGMENT
??_C@_0N@CEMCKEJD@AutomateType?$AA@ DB 'AutomateType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NMJEPJAJ@CommandData?$AA@
CONST	SEGMENT
??_C@_0M@NMJEPJAJ@CommandData?$AA@ DB 'CommandData', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FEHMPLIL@MissionData?$AA@
CONST	SEGMENT
??_C@_0M@FEHMPLIL@MissionData?$AA@ DB 'MissionData', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JNFAFNKG@GameInfoActions?$AA@
CONST	SEGMENT
??_C@_0BA@JNFAFNKG@GameInfoActions?$AA@ DB 'GameInfoActions', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z DD 019930522H
	DD	01dH
	DD	FLAT:__unwindtable$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$8
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$9
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$10
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$11
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$12
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$13
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$14
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$15
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$16
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$17
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$18
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$19
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$20
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$21
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$22
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$23
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$24
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$25
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$26
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$27
	DD	00H
	DD	FLAT:__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$28
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\lua\cvluagameinfo.cpp
xdata$x	ENDS
;	COMDAT ?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv717 = -788						; size = 4
tv731 = -784						; size = 4
tv671 = -780						; size = 4
tv645 = -776						; size = 4
tv650 = -772						; size = 4
tv651 = -768						; size = 4
tv652 = -764						; size = 4
tv654 = -760						; size = 4
tv653 = -756						; size = 4
tv656 = -752						; size = 4
tv655 = -748						; size = 4
tv657 = -744						; size = 4
tv658 = -740						; size = 4
tv659 = -736						; size = 4
tv660 = -732						; size = 4
tv661 = -728						; size = 4
tv662 = -724						; size = 4
tv663 = -720						; size = 4
tv664 = -716						; size = 4
tv665 = -712						; size = 4
tv668 = -708						; size = 4
tv730 = -704						; size = 4
tv724 = -700						; size = 4
tv723 = -696						; size = 4
tv732 = -692						; size = 4
tv733 = -688						; size = 4
tv138 = -684						; size = 4
tv94 = -680						; size = 4
$T217821 = -676						; size = 4
$T217820 = -672						; size = 4
$T217798 = -656						; size = 4
$T217797 = -652						; size = 4
$T217775 = -636						; size = 4
$T217774 = -632						; size = 4
$T217752 = -613						; size = 1
$T217751 = -612						; size = 4
$T217729 = -593						; size = 1
$T217728 = -592						; size = 4
$T217706 = -573						; size = 1
$T217705 = -572						; size = 4
$T217697 = -565						; size = 1
$T217696 = -564						; size = 4
$T217688 = -557						; size = 1
$T217687 = -556						; size = 4
$T217679 = -549						; size = 1
$T217678 = -548						; size = 4
$T217670 = -544						; size = 4
$T217669 = -540						; size = 4
$T217661 = -536						; size = 4
$T217660 = -532						; size = 4
$T217652 = -528						; size = 4
$T217651 = -524						; size = 4
$T217643 = -520						; size = 4
$T217642 = -516						; size = 4
$T217634 = -512						; size = 4
$T217633 = -508						; size = 4
$T217625 = -504						; size = 4
$T217624 = -500						; size = 4
$T217616 = -496						; size = 4
$T217615 = -492						; size = 4
$T217607 = -488						; size = 4
$T217606 = -484						; size = 4
$T217598 = -480						; size = 4
$T217597 = -476						; size = 4
$T217589 = -469						; size = 1
$T217588 = -468						; size = 4
$T217580 = -461						; size = 1
$T217579 = -460						; size = 4
$T217571 = -456						; size = 4
$T217570 = -452						; size = 4
$T217562 = -448						; size = 4
$T217561 = -444						; size = 4
$T217553 = -440						; size = 4
$T217552 = -436						; size = 4
$T217544 = -432						; size = 4
$T217543 = -428						; size = 4
$T217535 = -424						; size = 4
$T217534 = -420						; size = 4
$T217526 = -416						; size = 4
$T217525 = -412						; size = 4
$T217517 = -408						; size = 4
$T217516 = -404						; size = 4
$T217508 = -400						; size = 4
$T217507 = -396						; size = 4
$T217482 = -392						; size = 4
$T217463 = -388						; size = 4
$T217424 = -384						; size = 12
$T217423 = -372						; size = 12
$T217422 = -360						; size = 12
$T217421 = -348						; size = 12
$T217420 = -336						; size = 12
$T217419 = -324						; size = 12
$T217418 = -312						; size = 12
$T217417 = -300						; size = 12
$T217416 = -288						; size = 12
$T217415 = -276						; size = 12
$T217414 = -264						; size = 12
$T217413 = -252						; size = 12
$T217412 = -240						; size = 12
$T217411 = -228						; size = 12
$T217410 = -216						; size = 12
$T217409 = -204						; size = 12
$T217408 = -192						; size = 12
$T217407 = -180						; size = 12
$T217406 = -168						; size = 12
$T217405 = -156						; size = 12
$T217404 = -144						; size = 12
$T217403 = -132						; size = 12
$T217402 = -120						; size = 12
$T217401 = -108						; size = 12
$T217400 = -96						; size = 12
$T217399 = -84						; size = 12
$T217398 = -72						; size = 12
$T217397 = -60						; size = 12
$T217396 = -48						; size = 4
$T217395 = -44						; size = 4
_kEntry$216889 = -40					; size = 8
_pEntry$216888 = -32					; size = 4
_it$216839 = -28					; size = 4
_t$ = -24						; size = 4
_infos$ = -20						; size = 4
_idx$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z PROC ; CvLuaGameInfo::pRegisterActions, COMDAT

; 34   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 776				; 00000308H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 35   : 	lua_newtable(L);

	push	0
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 36   : 	lua_pushvalue(L, -1);

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 37   : 	lua_setglobal(L, "GameInfoActions");

	push	OFFSET ??_C@_0BA@JNFAFNKG@GameInfoActions?$AA@
	push	-10002					; ffffd8eeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 38   : 
; 39   : 	const int t = lua_gettop(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _t$[ebp], eax

; 40   : 	int idx = 0;

	mov	DWORD PTR _idx$[ebp], 0

; 41   : 
; 42   : #ifdef AUI_CONSTIFY
; 43   : 	const std::vector<CvActionInfo*>& infos = GC.getActionInfo();
; 44   : 	for (std::vector<CvActionInfo*>::const_iterator it = infos.begin(); it != infos.end(); ++it)
; 45   : 	{
; 46   : 		const CvActionInfo* pEntry = (*it);
; 47   : #else
; 48   : 	typedef std::vector<CvActionInfo*> ActionInfos;
; 49   : 	ActionInfos& infos = GC.getActionInfo();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getActionInfo@CvGlobals@@QAEAAV?$vector@PAVCvActionInfo@@V?$allocator@PAVCvActionInfo@@@std@@@std@@XZ ; CvGlobals::getActionInfo
	mov	DWORD PTR _infos$[ebp], eax

; 50   : 	for(ActionInfos::const_iterator it = infos.begin();

	mov	ecx, DWORD PTR _infos$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T217463[ebp], edx
	mov	eax, DWORD PTR $T217463[ebp]
	mov	DWORD PTR $T217395[ebp], eax
	mov	ecx, DWORD PTR $T217395[ebp]
	mov	DWORD PTR _it$216839[ebp], ecx
	jmp	SHORT $LN3@pRegisterA
$LN2@pRegisterA:

; 51   : 	        it != infos.end(); ++it)

	mov	edx, DWORD PTR _it$216839[ebp]
	add	edx, 4
	mov	DWORD PTR _it$216839[ebp], edx
$LN3@pRegisterA:
	mov	eax, DWORD PTR _infos$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T217482[ebp], ecx
	mov	edx, DWORD PTR $T217482[ebp]
	mov	DWORD PTR $T217396[ebp], edx
	mov	eax, DWORD PTR _it$216839[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T217396[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN1@pRegisterA

; 52   : 	{
; 53   : 		CvActionInfo* pEntry = (*it);

	mov	ecx, DWORD PTR _it$216839[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pEntry$216888[ebp], edx

; 54   : #endif
; 55   : 		lua_createtable(L, 0, 0);

	push	0
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 56   : 
; 57   : 		Table kEntry(L, -1);

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??0Value@FLua@@QAE@PAUlua_State@@H@Z	; FLua::Value::Value
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 58   : 
; 59   : 		kEntry["MissionData"]		= pEntry->getMissionData();

	push	OFFSET ??_C@_0M@FEHMPLIL@MissionData?$AA@
	lea	edx, DWORD PTR $T217397[ebp]
	push	edx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv94[ebp], eax
	mov	eax, DWORD PTR tv94[ebp]
	mov	DWORD PTR $T217507[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getMissionData@CvActionInfo@@QBEHXZ	; CvActionInfo::getMissionData
	mov	DWORD PTR $T217508[ebp], eax
	mov	ecx, DWORD PTR $T217508[ebp]
	push	ecx
	mov	edx, DWORD PTR $T217507[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR $T217507[ebp]
	mov	ecx, DWORD PTR [eax]
	call	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ; FLua::Table::SetField<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217397[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 60   : 		kEntry["CommandData"]		= pEntry->getCommandData();

	push	OFFSET ??_C@_0M@NMJEPJAJ@CommandData?$AA@
	lea	ecx, DWORD PTR $T217398[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv138[ebp], eax
	mov	edx, DWORD PTR tv138[ebp]
	mov	DWORD PTR $T217516[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getCommandData@CvActionInfo@@QBEHXZ	; CvActionInfo::getCommandData
	mov	DWORD PTR $T217517[ebp], eax
	mov	eax, DWORD PTR $T217517[ebp]
	push	eax
	mov	ecx, DWORD PTR $T217516[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR $T217516[ebp]
	mov	ecx, DWORD PTR [edx]
	call	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ; FLua::Table::SetField<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217398[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 61   : 
; 62   : 		kEntry["AutomateType"]		= pEntry->getAutomateType();

	push	OFFSET ??_C@_0N@CEMCKEJD@AutomateType?$AA@
	lea	eax, DWORD PTR $T217399[ebp]
	push	eax
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv733[ebp], eax
	mov	ecx, DWORD PTR tv733[ebp]
	mov	DWORD PTR $T217525[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getAutomateType@CvActionInfo@@QBEHXZ	; CvActionInfo::getAutomateType
	mov	DWORD PTR $T217526[ebp], eax
	mov	edx, DWORD PTR $T217526[ebp]
	push	edx
	mov	eax, DWORD PTR $T217525[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR $T217525[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ; FLua::Table::SetField<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217399[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 63   : 		kEntry["InterfaceModeType"]	= pEntry->getInterfaceModeType();

	push	OFFSET ??_C@_0BC@OMFEEPKH@InterfaceModeType?$AA@
	lea	edx, DWORD PTR $T217400[ebp]
	push	edx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv732[ebp], eax
	mov	eax, DWORD PTR tv732[ebp]
	mov	DWORD PTR $T217534[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getInterfaceModeType@CvActionInfo@@QBEHXZ ; CvActionInfo::getInterfaceModeType
	mov	DWORD PTR $T217535[ebp], eax
	mov	ecx, DWORD PTR $T217535[ebp]
	push	ecx
	mov	edx, DWORD PTR $T217534[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR $T217534[ebp]
	mov	ecx, DWORD PTR [eax]
	call	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ; FLua::Table::SetField<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217400[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 64   : 		kEntry["MissionType"]		= pEntry->getMissionType();

	push	OFFSET ??_C@_0M@MCFEHOKB@MissionType?$AA@
	lea	ecx, DWORD PTR $T217401[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv723[ebp], eax
	mov	edx, DWORD PTR tv723[ebp]
	mov	DWORD PTR $T217543[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getMissionType@CvActionInfo@@QBEHXZ	; CvActionInfo::getMissionType
	mov	DWORD PTR $T217544[ebp], eax
	mov	eax, DWORD PTR $T217544[ebp]
	push	eax
	mov	ecx, DWORD PTR $T217543[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR $T217543[ebp]
	mov	ecx, DWORD PTR [edx]
	call	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ; FLua::Table::SetField<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217401[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 65   : 		kEntry["CommandType"]		= pEntry->getCommandType();

	push	OFFSET ??_C@_0M@EKLMHMCD@CommandType?$AA@
	lea	eax, DWORD PTR $T217402[ebp]
	push	eax
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv724[ebp], eax
	mov	ecx, DWORD PTR tv724[ebp]
	mov	DWORD PTR $T217552[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getCommandType@CvActionInfo@@QBEHXZ	; CvActionInfo::getCommandType
	mov	DWORD PTR $T217553[ebp], eax
	mov	edx, DWORD PTR $T217553[ebp]
	push	edx
	mov	eax, DWORD PTR $T217552[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR $T217552[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ; FLua::Table::SetField<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217402[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 66   : 		kEntry["ControlType"]		= pEntry->getControlType();

	push	OFFSET ??_C@_0M@BJPIIMBL@ControlType?$AA@
	lea	edx, DWORD PTR $T217403[ebp]
	push	edx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv730[ebp], eax
	mov	eax, DWORD PTR tv730[ebp]
	mov	DWORD PTR $T217561[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getControlType@CvActionInfo@@QBEHXZ	; CvActionInfo::getControlType
	mov	DWORD PTR $T217562[ebp], eax
	mov	ecx, DWORD PTR $T217562[ebp]
	push	ecx
	mov	edx, DWORD PTR $T217561[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR $T217561[ebp]
	mov	ecx, DWORD PTR [eax]
	call	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ; FLua::Table::SetField<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217403[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 67   : 		kEntry["OriginalIndex"]		= pEntry->getOriginalIndex();

	push	OFFSET ??_C@_0O@NFDKCCAD@OriginalIndex?$AA@
	lea	ecx, DWORD PTR $T217404[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv668[ebp], eax
	mov	edx, DWORD PTR tv668[ebp]
	mov	DWORD PTR $T217570[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getOriginalIndex@CvActionInfo@@QBEHXZ	; CvActionInfo::getOriginalIndex
	mov	DWORD PTR $T217571[ebp], eax
	mov	eax, DWORD PTR $T217571[ebp]
	push	eax
	mov	ecx, DWORD PTR $T217570[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR $T217570[ebp]
	mov	ecx, DWORD PTR [edx]
	call	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ; FLua::Table::SetField<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217404[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 68   : 
; 69   : 		kEntry["ConfirmCommand"]	= pEntry->isConfirmCommand();

	push	OFFSET ??_C@_0P@KBPGNMLL@ConfirmCommand?$AA@
	lea	eax, DWORD PTR $T217405[ebp]
	push	eax
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv665[ebp], eax
	mov	ecx, DWORD PTR tv665[ebp]
	mov	DWORD PTR $T217579[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?isConfirmCommand@CvActionInfo@@QBE_NXZ	; CvActionInfo::isConfirmCommand
	mov	BYTE PTR $T217580[ebp], al
	movzx	edx, BYTE PTR $T217580[ebp]
	push	edx
	mov	eax, DWORD PTR $T217579[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR $T217579[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	??$SetField@_N@Table@FLua@@QAEXABVValue@1@_N@Z ; FLua::Table::SetField<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217405[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 70   : 		kEntry["Visible"]			= pEntry->isVisible();

	push	OFFSET ??_C@_07MGEGCLJM@Visible?$AA@
	lea	edx, DWORD PTR $T217406[ebp]
	push	edx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv664[ebp], eax
	mov	eax, DWORD PTR tv664[ebp]
	mov	DWORD PTR $T217588[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?isVisible@CvActionInfo@@QBE_NXZ	; CvActionInfo::isVisible
	mov	BYTE PTR $T217589[ebp], al
	movzx	ecx, BYTE PTR $T217589[ebp]
	push	ecx
	mov	edx, DWORD PTR $T217588[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR $T217588[ebp]
	mov	ecx, DWORD PTR [eax]
	call	??$SetField@_N@Table@FLua@@QAEXABVValue@1@_N@Z ; FLua::Table::SetField<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217406[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 71   : 		kEntry["SubType"]			= (int)pEntry->getSubType();

	push	OFFSET ??_C@_07CNMHPEMB@SubType?$AA@
	lea	ecx, DWORD PTR $T217407[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv663[ebp], eax
	mov	edx, DWORD PTR tv663[ebp]
	mov	DWORD PTR $T217597[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getSubType@CvActionInfo@@QBE?AW4ActionSubTypes@@XZ ; CvActionInfo::getSubType
	mov	DWORD PTR $T217598[ebp], eax
	mov	eax, DWORD PTR $T217598[ebp]
	push	eax
	mov	ecx, DWORD PTR $T217597[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR $T217597[ebp]
	mov	ecx, DWORD PTR [edx]
	call	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ; FLua::Table::SetField<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217407[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 72   : 
; 73   : 		kEntry["Type"]				= pEntry->GetType();

	push	OFFSET ??_C@_04KOACHJEN@Type?$AA@
	lea	eax, DWORD PTR $T217408[ebp]
	push	eax
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv662[ebp], eax
	mov	ecx, DWORD PTR tv662[ebp]
	mov	DWORD PTR $T217606[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?GetType@CvActionInfo@@QBEPBDXZ		; CvActionInfo::GetType
	mov	DWORD PTR $T217607[ebp], eax
	mov	edx, DWORD PTR $T217607[ebp]
	push	edx
	mov	eax, DWORD PTR $T217606[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR $T217606[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	??$SetField@PBD@Table@FLua@@QAEXABVValue@1@PBD@Z ; FLua::Table::SetField<char const *>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217408[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 74   : 		kEntry["TextKey"]			= pEntry->GetTextKey();

	push	OFFSET ??_C@_07IFOIGDAD@TextKey?$AA@
	lea	edx, DWORD PTR $T217409[ebp]
	push	edx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv661[ebp], eax
	mov	eax, DWORD PTR tv661[ebp]
	mov	DWORD PTR $T217615[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?GetTextKey@CvActionInfo@@QBEPBDXZ	; CvActionInfo::GetTextKey
	mov	DWORD PTR $T217616[ebp], eax
	mov	ecx, DWORD PTR $T217616[ebp]
	push	ecx
	mov	edx, DWORD PTR $T217615[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR $T217615[ebp]
	mov	ecx, DWORD PTR [eax]
	call	??$SetField@PBD@Table@FLua@@QAEXABVValue@1@PBD@Z ; FLua::Table::SetField<char const *>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217409[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 75   : 
; 76   : 		kEntry["ActionInfoIndex"]	= pEntry->getActionInfoIndex();

	push	OFFSET ??_C@_0BA@GMEPLFHB@ActionInfoIndex?$AA@
	lea	ecx, DWORD PTR $T217410[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv660[ebp], eax
	mov	edx, DWORD PTR tv660[ebp]
	mov	DWORD PTR $T217624[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getActionInfoIndex@CvActionInfo@@QBEHXZ ; CvActionInfo::getActionInfoIndex
	mov	DWORD PTR $T217625[ebp], eax
	mov	eax, DWORD PTR $T217625[ebp]
	push	eax
	mov	ecx, DWORD PTR $T217624[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR $T217624[ebp]
	mov	ecx, DWORD PTR [edx]
	call	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ; FLua::Table::SetField<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217410[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 77   : 		kEntry["HotKeyVal"]			= pEntry->getHotKeyVal();

	push	OFFSET ??_C@_09LOBEOJNE@HotKeyVal?$AA@
	lea	eax, DWORD PTR $T217411[ebp]
	push	eax
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv659[ebp], eax
	mov	ecx, DWORD PTR tv659[ebp]
	mov	DWORD PTR $T217633[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getHotKeyVal@CvActionInfo@@QBEHXZ	; CvActionInfo::getHotKeyVal
	mov	DWORD PTR $T217634[ebp], eax
	mov	edx, DWORD PTR $T217634[ebp]
	push	edx
	mov	eax, DWORD PTR $T217633[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR $T217633[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ; FLua::Table::SetField<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217411[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 78   : 		kEntry["HotKeyPriority"]	= pEntry->getHotKeyPriority();

	push	OFFSET ??_C@_0P@PEOGILMO@HotKeyPriority?$AA@
	lea	edx, DWORD PTR $T217412[ebp]
	push	edx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv658[ebp], eax
	mov	eax, DWORD PTR tv658[ebp]
	mov	DWORD PTR $T217642[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getHotKeyPriority@CvActionInfo@@QBEHXZ	; CvActionInfo::getHotKeyPriority
	mov	DWORD PTR $T217643[ebp], eax
	mov	ecx, DWORD PTR $T217643[ebp]
	push	ecx
	mov	edx, DWORD PTR $T217642[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR $T217642[ebp]
	mov	ecx, DWORD PTR [eax]
	call	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ; FLua::Table::SetField<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217412[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 79   : 		kEntry["HotKeyValAlt"]		= pEntry->getHotKeyValAlt();

	push	OFFSET ??_C@_0N@DGNALAGE@HotKeyValAlt?$AA@
	lea	ecx, DWORD PTR $T217413[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv657[ebp], eax
	mov	edx, DWORD PTR tv657[ebp]
	mov	DWORD PTR $T217651[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getHotKeyValAlt@CvActionInfo@@QBEHXZ	; CvActionInfo::getHotKeyValAlt
	mov	DWORD PTR $T217652[ebp], eax
	mov	eax, DWORD PTR $T217652[ebp]
	push	eax
	mov	ecx, DWORD PTR $T217651[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR $T217651[ebp]
	mov	ecx, DWORD PTR [edx]
	call	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ; FLua::Table::SetField<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217413[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 80   : 		kEntry["HotKeyPriorityAlt"]	= pEntry->getHotKeyPriorityAlt();

	push	OFFSET ??_C@_0BC@CDBJAMJN@HotKeyPriorityAlt?$AA@
	lea	eax, DWORD PTR $T217414[ebp]
	push	eax
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv655[ebp], eax
	mov	ecx, DWORD PTR tv655[ebp]
	mov	DWORD PTR $T217660[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getHotKeyPriorityAlt@CvActionInfo@@QBEHXZ ; CvActionInfo::getHotKeyPriorityAlt
	mov	DWORD PTR $T217661[ebp], eax
	mov	edx, DWORD PTR $T217661[ebp]
	push	edx
	mov	eax, DWORD PTR $T217660[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR $T217660[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ; FLua::Table::SetField<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217414[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 81   : 		kEntry["OrderPriority"]		= pEntry->getOrderPriority();

	push	OFFSET ??_C@_0O@IDIFOGP@OrderPriority?$AA@
	lea	edx, DWORD PTR $T217415[ebp]
	push	edx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv656[ebp], eax
	mov	eax, DWORD PTR tv656[ebp]
	mov	DWORD PTR $T217669[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getOrderPriority@CvActionInfo@@QBEHXZ	; CvActionInfo::getOrderPriority
	mov	DWORD PTR $T217670[ebp], eax
	mov	ecx, DWORD PTR $T217670[ebp]
	push	ecx
	mov	edx, DWORD PTR $T217669[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR $T217669[ebp]
	mov	ecx, DWORD PTR [eax]
	call	??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ; FLua::Table::SetField<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217415[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 82   : 
; 83   : 		kEntry["AltDown"]			= pEntry->isAltDown();

	push	OFFSET ??_C@_07MHLJKKID@AltDown?$AA@
	lea	ecx, DWORD PTR $T217416[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv653[ebp], eax
	mov	edx, DWORD PTR tv653[ebp]
	mov	DWORD PTR $T217678[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?isAltDown@CvActionInfo@@QBE_NXZ	; CvActionInfo::isAltDown
	mov	BYTE PTR $T217679[ebp], al
	movzx	eax, BYTE PTR $T217679[ebp]
	push	eax
	mov	ecx, DWORD PTR $T217678[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR $T217678[ebp]
	mov	ecx, DWORD PTR [edx]
	call	??$SetField@_N@Table@FLua@@QAEXABVValue@1@_N@Z ; FLua::Table::SetField<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217416[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 84   : 		kEntry["ShiftDown"]			= pEntry->isShiftDown();

	push	OFFSET ??_C@_09HKGKCFMG@ShiftDown?$AA@
	lea	eax, DWORD PTR $T217417[ebp]
	push	eax
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv654[ebp], eax
	mov	ecx, DWORD PTR tv654[ebp]
	mov	DWORD PTR $T217687[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?isShiftDown@CvActionInfo@@QBE_NXZ	; CvActionInfo::isShiftDown
	mov	BYTE PTR $T217688[ebp], al
	movzx	edx, BYTE PTR $T217688[ebp]
	push	edx
	mov	eax, DWORD PTR $T217687[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR $T217687[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	??$SetField@_N@Table@FLua@@QAEXABVValue@1@_N@Z ; FLua::Table::SetField<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217417[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 85   : 		kEntry["CtrlDown"]			= pEntry->isCtrlDown();

	push	OFFSET ??_C@_08LGMEGEPK@CtrlDown?$AA@
	lea	edx, DWORD PTR $T217418[ebp]
	push	edx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv652[ebp], eax
	mov	eax, DWORD PTR tv652[ebp]
	mov	DWORD PTR $T217696[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?isCtrlDown@CvActionInfo@@QBE_NXZ	; CvActionInfo::isCtrlDown
	mov	BYTE PTR $T217697[ebp], al
	movzx	ecx, BYTE PTR $T217697[ebp]
	push	ecx
	mov	edx, DWORD PTR $T217696[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR $T217696[ebp]
	mov	ecx, DWORD PTR [eax]
	call	??$SetField@_N@Table@FLua@@QAEXABVValue@1@_N@Z ; FLua::Table::SetField<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217418[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 86   : 		kEntry["AltDownAlt"]		= pEntry->isAltDownAlt();

	push	OFFSET ??_C@_0L@CMBAELLL@AltDownAlt?$AA@
	lea	ecx, DWORD PTR $T217419[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv651[ebp], eax
	mov	edx, DWORD PTR tv651[ebp]
	mov	DWORD PTR $T217705[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?isAltDownAlt@CvActionInfo@@QBE_NXZ	; CvActionInfo::isAltDownAlt
	mov	BYTE PTR $T217706[ebp], al
	movzx	eax, BYTE PTR $T217706[ebp]
	push	eax
	mov	ecx, DWORD PTR $T217705[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR $T217705[ebp]
	mov	ecx, DWORD PTR [edx]
	call	??$SetField@_N@Table@FLua@@QAEXABVValue@1@_N@Z ; FLua::Table::SetField<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217419[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 87   : 		kEntry["ShiftDownAlt"]		= pEntry->isShiftDownAlt();

	push	OFFSET ??_C@_0N@PJIAADMH@ShiftDownAlt?$AA@
	lea	eax, DWORD PTR $T217420[ebp]
	push	eax
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv650[ebp], eax
	mov	ecx, DWORD PTR tv650[ebp]
	mov	DWORD PTR $T217728[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?isShiftDownAlt@CvActionInfo@@QBE_NXZ	; CvActionInfo::isShiftDownAlt
	mov	BYTE PTR $T217729[ebp], al
	movzx	edx, BYTE PTR $T217729[ebp]
	push	edx
	mov	eax, DWORD PTR $T217728[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR $T217728[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	??$SetField@_N@Table@FLua@@QAEXABVValue@1@_N@Z ; FLua::Table::SetField<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217420[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 88   : 		kEntry["CtrlDownAlt"]		= pEntry->isCtrlDownAlt();

	push	OFFSET ??_C@_0M@MPNOPFE@CtrlDownAlt?$AA@
	lea	edx, DWORD PTR $T217421[ebp]
	push	edx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv645[ebp], eax
	mov	eax, DWORD PTR tv645[ebp]
	mov	DWORD PTR $T217751[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?isCtrlDownAlt@CvActionInfo@@QBE_NXZ	; CvActionInfo::isCtrlDownAlt
	mov	BYTE PTR $T217752[ebp], al
	movzx	ecx, BYTE PTR $T217752[ebp]
	push	ecx
	mov	edx, DWORD PTR $T217751[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR $T217751[ebp]
	mov	ecx, DWORD PTR [eax]
	call	??$SetField@_N@Table@FLua@@QAEXABVValue@1@_N@Z ; FLua::Table::SetField<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217421[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 89   : 
; 90   : 		kEntry["HotKey"]			= pEntry->getHotKeyString();

	push	OFFSET ??_C@_06BMHDPEFH@HotKey?$AA@
	lea	ecx, DWORD PTR $T217422[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv671[ebp], eax
	mov	edx, DWORD PTR tv671[ebp]
	mov	DWORD PTR $T217774[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?getHotKeyString@CvActionInfo@@QBEPBDXZ	; CvActionInfo::getHotKeyString
	mov	DWORD PTR $T217775[ebp], eax
	mov	eax, DWORD PTR $T217775[ebp]
	push	eax
	mov	ecx, DWORD PTR $T217774[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR $T217774[ebp]
	mov	ecx, DWORD PTR [edx]
	call	??$SetField@PBD@Table@FLua@@QAEXABVValue@1@PBD@Z ; FLua::Table::SetField<char const *>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217422[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 91   : 		kEntry["Help"]				= pEntry->GetHelp();

	push	OFFSET ??_C@_04DDFEFHOJ@Help?$AA@
	lea	eax, DWORD PTR $T217423[ebp]
	push	eax
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv731[ebp], eax
	mov	ecx, DWORD PTR tv731[ebp]
	mov	DWORD PTR $T217797[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?GetHelp@CvActionInfo@@QBEPBDXZ		; CvActionInfo::GetHelp
	mov	DWORD PTR $T217798[ebp], eax
	mov	edx, DWORD PTR $T217798[ebp]
	push	edx
	mov	eax, DWORD PTR $T217797[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR $T217797[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	??$SetField@PBD@Table@FLua@@QAEXABVValue@1@PBD@Z ; FLua::Table::SetField<char const *>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217423[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 92   : 		kEntry["DisabledHelp"]		= pEntry->GetDisabledHelp();

	push	OFFSET ??_C@_0N@NEBCCCLG@DisabledHelp?$AA@
	lea	edx, DWORD PTR $T217424[ebp]
	push	edx
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ; FLua::Table::operator[]<char const *>
	mov	DWORD PTR tv717[ebp], eax
	mov	eax, DWORD PTR tv717[ebp]
	mov	DWORD PTR $T217820[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	mov	ecx, DWORD PTR _pEntry$216888[ebp]
	call	?GetDisabledHelp@CvActionInfo@@QBEPBDXZ	; CvActionInfo::GetDisabledHelp
	mov	DWORD PTR $T217821[ebp], eax
	mov	ecx, DWORD PTR $T217821[ebp]
	push	ecx
	mov	edx, DWORD PTR $T217820[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR $T217820[ebp]
	mov	ecx, DWORD PTR [eax]
	call	??$SetField@PBD@Table@FLua@@QAEXABVValue@1@PBD@Z ; FLua::Table::SetField<char const *>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T217424[ebp+4]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value

; 93   : 
; 94   : 		lua_rawseti(L, t, idx);

	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawseti
	add	esp, 12					; 0000000cH

; 95   : 
; 96   : 		++idx;

	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$[ebp], ecx

; 97   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value
	jmp	$LN2@pRegisterA
$LN1@pRegisterA:

; 98   : 
; 99   : 	return 0;

	xor	eax, eax

; 100  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _kEntry$216889[ebp]
	jmp	??1Table@FLua@@QAE@XZ			; FLua::Table::~Table
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$1:
	lea	ecx, DWORD PTR $T217397[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$2:
	lea	ecx, DWORD PTR $T217398[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$3:
	lea	ecx, DWORD PTR $T217399[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$4:
	lea	ecx, DWORD PTR $T217400[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$5:
	lea	ecx, DWORD PTR $T217401[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$6:
	lea	ecx, DWORD PTR $T217402[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$7:
	lea	ecx, DWORD PTR $T217403[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$8:
	lea	ecx, DWORD PTR $T217404[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$9:
	lea	ecx, DWORD PTR $T217405[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$10:
	lea	ecx, DWORD PTR $T217406[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$11:
	lea	ecx, DWORD PTR $T217407[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$12:
	lea	ecx, DWORD PTR $T217408[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$13:
	lea	ecx, DWORD PTR $T217409[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$14:
	lea	ecx, DWORD PTR $T217410[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$15:
	lea	ecx, DWORD PTR $T217411[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$16:
	lea	ecx, DWORD PTR $T217412[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$17:
	lea	ecx, DWORD PTR $T217413[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$18:
	lea	ecx, DWORD PTR $T217414[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$19:
	lea	ecx, DWORD PTR $T217415[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$20:
	lea	ecx, DWORD PTR $T217416[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$21:
	lea	ecx, DWORD PTR $T217417[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$22:
	lea	ecx, DWORD PTR $T217418[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$23:
	lea	ecx, DWORD PTR $T217419[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$24:
	lea	ecx, DWORD PTR $T217420[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$25:
	lea	ecx, DWORD PTR $T217421[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$26:
	lea	ecx, DWORD PTR $T217422[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$27:
	lea	ecx, DWORD PTR $T217423[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__unwindfunclet$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z$28:
	lea	ecx, DWORD PTR $T217424[ebp]
	jmp	??1Field@Table@FLua@@QAE@XZ
__ehhandler$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-780]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?pRegisterActions@CvLuaGameInfo@@CAHPAUlua_State@@@Z ENDP ; CvLuaGameInfo::pRegisterActions
; Function compile flags: /Odtp
;	COMDAT ??1Field@Table@FLua@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Field@Table@FLua@@QAE@XZ PROC			; FLua::Table::Field::~Field, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value
	mov	esp, ebp
	pop	ebp
	ret	0
??1Field@Table@FLua@@QAE@XZ ENDP			; FLua::Table::Field::~Field
_TEXT	ENDS
PUBLIC	??_C@_0O@JBLDCHBP@GameInfoTypes?$AA@		; `string'
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	_lua_pushinteger:PROC
EXTRN	?GetInfoTypes@CvGlobals@@QBEABV?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@XZ:PROC ; CvGlobals::GetInfoTypes
;	COMDAT ??_C@_0O@JBLDCHBP@GameInfoTypes?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
CONST	SEGMENT
??_C@_0O@JBLDCHBP@GameInfoTypes?$AA@ DB 'GameInfoTypes', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\lua\cvluagameinfo.cpp
CONST	ENDS
;	COMDAT ?pRegisterTypesInfo@CvLuaGameInfo@@CAHPAUlua_State@@@Z
_TEXT	SEGMENT
$T217919 = -28						; size = 4
$T217884 = -24						; size = 4
$T217856 = -20						; size = 4
$T217852 = -16						; size = 4
$T217846 = -12						; size = 4
_it$217043 = -8						; size = 4
_kInfosMap$ = -4					; size = 4
_L$ = 8							; size = 4
?pRegisterTypesInfo@CvLuaGameInfo@@CAHPAUlua_State@@@Z PROC ; CvLuaGameInfo::pRegisterTypesInfo, COMDAT

; 103  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 104  : 	lua_newtable(L);

	push	0
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 105  : 	lua_pushvalue(L, -1);

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 106  : 	lua_setglobal(L, "GameInfoTypes");

	push	OFFSET ??_C@_0O@JBLDCHBP@GameInfoTypes?$AA@
	push	-10002					; ffffd8eeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 107  : 
; 108  : 	const CvGlobals::InfosMap& kInfosMap = GC.GetInfoTypes();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetInfoTypes@CvGlobals@@QBEABV?$hash_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$hash_compare@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@stdext@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@stdext@@XZ ; CvGlobals::GetInfoTypes
	mov	DWORD PTR _kInfosMap$[ebp], eax

; 109  : 	for(CvGlobals::InfosMap::const_iterator it = kInfosMap.begin();

	mov	eax, DWORD PTR _kInfosMap$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T217852[ebp], ecx
	mov	edx, DWORD PTR $T217852[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T217856[ebp], eax
	mov	ecx, DWORD PTR $T217856[ebp]
	mov	DWORD PTR _it$217043[ebp], ecx

; 110  : 	        it != kInfosMap.end(); ++ it)

	jmp	SHORT $LN3@pRegisterT
$LN16@pRegisterT:
	mov	edx, DWORD PTR _it$217043[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _it$217043[ebp], eax
$LN3@pRegisterT:
	mov	ecx, DWORD PTR _kInfosMap$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T217884[ebp], edx
	mov	eax, DWORD PTR $T217884[ebp]
	mov	DWORD PTR $T217846[ebp], eax
	mov	ecx, DWORD PTR _it$217043[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T217846[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@pRegisterT

; 111  : 	{
; 112  : 		lua_pushinteger(L, (*it).second);

	mov	edx, DWORD PTR _it$217043[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 113  : 		lua_setfield(L, -2, (*it).first.c_str());

	mov	edx, DWORD PTR _it$217043[ebp]
	add	edx, 8
	mov	DWORD PTR $T217919[ebp], edx
	mov	ecx, DWORD PTR $T217919[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 114  : 	}

	jmp	SHORT $LN16@pRegisterT
$LN1@pRegisterT:

; 115  : 
; 116  : 	return 0;

	xor	eax, eax

; 117  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?pRegisterTypesInfo@CvLuaGameInfo@@CAHPAUlua_State@@@Z ENDP ; CvLuaGameInfo::pRegisterTypesInfo
_TEXT	ENDS
PUBLIC	??$?0PBD@Field@Table@FLua@@AAE@ABV12@PBD@Z	; FLua::Table::Field::Field<char const *>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\flua\include\fluatypes.h
;	COMDAT ??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T217923 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_key$ = 12						; size = 4
??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z PROC		; FLua::Table::operator[]<char const *>, COMDAT
; _this$ = ecx

; 299  : 		template<class T> inline Field operator [](T key) { return Field(*this, key); }

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T217923[ebp], 0
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0PBD@Field@Table@FLua@@AAE@ABV12@PBD@Z ; FLua::Table::Field::Field<char const *>
	mov	edx, DWORD PTR $T217923[ebp]
	or	edx, 1
	mov	DWORD PTR $T217923[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$?APBD@Table@FLua@@QAE?AVField@01@PBD@Z ENDP		; FLua::Table::operator[]<char const *>
_TEXT	ENDS
EXTRN	_lua_settop:PROC
EXTRN	?Set@Value@FLua@@QAEXPAUlua_State@@H@Z:PROC	; FLua::Value::Set
EXTRN	_lua_pushstring:PROC
EXTRN	_lua_checkstack:PROC
EXTRN	??0Value@FLua@@QAE@XZ:PROC			; FLua::Value::Value
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\flua\include\fluacommon.h
xdata$x	SEGMENT
__unwindtable$??$?0PBD@Field@Table@FLua@@AAE@ABV12@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0PBD@Field@Table@FLua@@AAE@ABV12@PBD@Z$0
__ehfuncinfo$??$?0PBD@Field@Table@FLua@@AAE@ABV12@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0PBD@Field@Table@FLua@@AAE@ABV12@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\flua\include\fluatypes.h
xdata$x	ENDS
;	COMDAT ??$?0PBD@Field@Table@FLua@@AAE@ABV12@PBD@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T217949 = -24						; size = 4
_keyAnalog$217207 = -20					; size = 4
_L$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_kTable$ = 8						; size = 4
_key$ = 12						; size = 4
??$?0PBD@Field@Table@FLua@@AAE@ABV12@PBD@Z PROC		; FLua::Table::Field::Field<char const *>, COMDAT
; _this$ = ecx

; 265  : 			template<class T> Field(const Table &kTable, T key) : m_kTable((Table&)kTable) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0PBD@Field@Table@FLua@@AAE@ABV12@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _kTable$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0Value@FLua@@QAE@XZ			; FLua::Value::Value
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 266  : 				typedef Details::PushAnalog<T>::Result KeyAnalog;
; 267  : 				lua_State *L = kTable.GetLuaState();

	mov	edx, DWORD PTR _kTable$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T217949[ebp], eax
	mov	ecx, DWORD PTR $T217949[ebp]
	mov	DWORD PTR _L$[ebp], ecx

; 268  : 				if( L != NULL )

	cmp	DWORD PTR _L$[ebp], 0
	je	SHORT $LN2@Field

; 269  : 				{
; 270  : 					KeyAnalog keyAnalog = Details::ToLuaAnalog<KeyAnalog>::Convert(key);

	mov	edx, DWORD PTR _key$[ebp]
	mov	DWORD PTR _keyAnalog$217207[ebp], edx

; 271  : 					lua_checkstack(L, 1);

	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_checkstack
	add	esp, 8

; 272  : 					Details::Push(L, keyAnalog); // Push the key

	mov	ecx, DWORD PTR _keyAnalog$217207[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 273  : 					m_kKey.Set(L, -1);	// Ref the key

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Set@Value@FLua@@QAEXPAUlua_State@@H@Z	; FLua::Value::Set

; 274  : 					lua_pop(L, 1); // Pop the key

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_settop
	add	esp, 8
$LN2@Field:

; 275  : 				}
; 276  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0PBD@Field@Table@FLua@@AAE@ABV12@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value
__ehhandler$??$?0PBD@Field@Table@FLua@@AAE@ABV12@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0PBD@Field@Table@FLua@@AAE@ABV12@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0PBD@Field@Table@FLua@@AAE@ABV12@PBD@Z ENDP		; FLua::Table::Field::Field<char const *>
PUBLIC	??_C@_0CK@ILAFJLND@Invalid?5key?5sent?5to?5FLua?3?3Table?3@ ; `string'
PUBLIC	??_C@_0CG@IHIEJLDN@nil?5key?5sent?5to?5FLua?3?3Table?3?3Set@ ; `string'
PUBLIC	??_C@_0ED@FEEIEOLF@Key?5sent?5to?5FLua?3?3Table?3?3SetFiel@ ; `string'
EXTRN	_lua_rawset:PROC
EXTRN	_lua_type:PROC
EXTRN	?Push@Value@FLua@@QBE_NXZ:PROC			; FLua::Value::Push
EXTRN	?Push@Table@FLua@@QBE_NXZ:PROC			; FLua::Table::Push
EXTRN	?Error@Details@FLua@@YAXPBDZZ:PROC		; FLua::Details::Error
;	COMDAT ??_C@_0CK@ILAFJLND@Invalid?5key?5sent?5to?5FLua?3?3Table?3@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\flua\include\fluacommon.h
CONST	SEGMENT
??_C@_0CK@ILAFJLND@Invalid?5key?5sent?5to?5FLua?3?3Table?3@ DB 'Invalid k'
	DB	'ey sent to FLua::Table::SetField', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IHIEJLDN@nil?5key?5sent?5to?5FLua?3?3Table?3?3Set@
CONST	SEGMENT
??_C@_0CG@IHIEJLDN@nil?5key?5sent?5to?5FLua?3?3Table?3?3Set@ DB 'nil key '
	DB	'sent to FLua::Table::SetField', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@FEEIEOLF@Key?5sent?5to?5FLua?3?3Table?3?3SetFiel@
CONST	SEGMENT
??_C@_0ED@FEEIEOLF@Key?5sent?5to?5FLua?3?3Table?3?3SetFiel@ DB 'Key sent '
	DB	'to FLua::Table::SetField belongs to a different lua state', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\flua\include\fluatypes.h
CONST	ENDS
;	COMDAT ??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T217974 = -12						; size = 4
_analog$217239 = -8					; size = 4
_L$ = -4						; size = 4
_kKey$ = 8						; size = 4
_val$ = 12						; size = 4
??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z PROC	; FLua::Table::SetField<int>, COMDAT
; _this$ = ecx

; 336  : 		void SetField(const Value &kKey, T val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 337  : 			lua_State *L = m_kLuaVal.GetLuaState();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _L$[ebp], ecx

; 338  : 			if( L != kKey.GetLuaState() ) {

	mov	edx, DWORD PTR _kKey$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T217974[ebp], eax
	mov	ecx, DWORD PTR _L$[ebp]
	cmp	ecx, DWORD PTR $T217974[ebp]
	je	SHORT $LN7@SetField

; 339  : 				Details::Error("Key sent to FLua::Table::SetField belongs to a different lua state");

	push	OFFSET ??_C@_0ED@FEEIEOLF@Key?5sent?5to?5FLua?3?3Table?3?3SetFiel@
	call	?Error@Details@FLua@@YAXPBDZZ		; FLua::Details::Error
	add	esp, 4
	jmp	$LN8@SetField
$LN7@SetField:

; 340  : 			}
; 341  : 			else if( Push() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Push@Table@FLua@@QBE_NXZ		; FLua::Table::Push
	movzx	edx, al
	test	edx, edx
	je	$LN8@SetField

; 342  : 				if( kKey.Push() ) {

	mov	ecx, DWORD PTR _kKey$[ebp]
	call	?Push@Value@FLua@@QBE_NXZ		; FLua::Value::Push
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@SetField

; 343  : 					if( lua_isnil(L, -1) )

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@SetField

; 344  : 					{
; 345  : 						lua_pop(L, 1); // Pop the nil key

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 346  : 						Details::Error("nil key sent to FLua::Table::SetField");

	push	OFFSET ??_C@_0CG@IHIEJLDN@nil?5key?5sent?5to?5FLua?3?3Table?3?3Set@
	call	?Error@Details@FLua@@YAXPBDZZ		; FLua::Details::Error
	add	esp, 4

; 347  : 					}
; 348  : 					else

	jmp	SHORT $LN2@SetField

; 349  : 					{
; 350  : 						typedef Details::PushAnalog<T>::Result Analog;
; 351  : 						Analog analog = Details::ToLuaAnalog<Analog>::Convert(val);

$LN14@SetField:
	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _analog$217239[ebp], eax

; 352  : 						lua_checkstack(L, 1);

	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_checkstack
	add	esp, 8

; 353  : 						Details::Push(L, analog); // Push the value

	mov	edx, DWORD PTR _analog$217239[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushinteger
	add	esp, 8

; 354  : 						lua_rawset(L, -3); // Set the field (pops key and value)

	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawset
	add	esp, 8
$LN2@SetField:

; 355  : 					}

	jmp	SHORT $LN1@SetField
$LN4@SetField:

; 356  : 				}
; 357  : 				else Details::Error("Invalid key sent to FLua::Table::SetField");

	push	OFFSET ??_C@_0CK@ILAFJLND@Invalid?5key?5sent?5to?5FLua?3?3Table?3@
	call	?Error@Details@FLua@@YAXPBDZZ		; FLua::Details::Error
	add	esp, 4
$LN1@SetField:

; 358  : 				lua_pop(L, 1); // Pop the table

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8
$LN8@SetField:

; 359  : 			}
; 360  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??$SetField@H@Table@FLua@@QAEXABVValue@1@H@Z ENDP	; FLua::Table::SetField<int>
_TEXT	ENDS
EXTRN	_lua_pushboolean:PROC
; Function compile flags: /Odtp
;	COMDAT ??$SetField@_N@Table@FLua@@QAEXABVValue@1@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T217989 = -12						; size = 4
_analog$217276 = -5					; size = 1
_L$ = -4						; size = 4
_kKey$ = 8						; size = 4
_val$ = 12						; size = 1
??$SetField@_N@Table@FLua@@QAEXABVValue@1@_N@Z PROC	; FLua::Table::SetField<bool>, COMDAT
; _this$ = ecx

; 336  : 		void SetField(const Value &kKey, T val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 337  : 			lua_State *L = m_kLuaVal.GetLuaState();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _L$[ebp], ecx

; 338  : 			if( L != kKey.GetLuaState() ) {

	mov	edx, DWORD PTR _kKey$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T217989[ebp], eax
	mov	ecx, DWORD PTR _L$[ebp]
	cmp	ecx, DWORD PTR $T217989[ebp]
	je	SHORT $LN7@SetField@2

; 339  : 				Details::Error("Key sent to FLua::Table::SetField belongs to a different lua state");

	push	OFFSET ??_C@_0ED@FEEIEOLF@Key?5sent?5to?5FLua?3?3Table?3?3SetFiel@
	call	?Error@Details@FLua@@YAXPBDZZ		; FLua::Details::Error
	add	esp, 4
	jmp	$LN8@SetField@2
$LN7@SetField@2:

; 340  : 			}
; 341  : 			else if( Push() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Push@Table@FLua@@QBE_NXZ		; FLua::Table::Push
	movzx	edx, al
	test	edx, edx
	je	$LN8@SetField@2

; 342  : 				if( kKey.Push() ) {

	mov	ecx, DWORD PTR _kKey$[ebp]
	call	?Push@Value@FLua@@QBE_NXZ		; FLua::Value::Push
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@SetField@2

; 343  : 					if( lua_isnil(L, -1) )

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@SetField@2

; 344  : 					{
; 345  : 						lua_pop(L, 1); // Pop the nil key

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 346  : 						Details::Error("nil key sent to FLua::Table::SetField");

	push	OFFSET ??_C@_0CG@IHIEJLDN@nil?5key?5sent?5to?5FLua?3?3Table?3?3Set@
	call	?Error@Details@FLua@@YAXPBDZZ		; FLua::Details::Error
	add	esp, 4

; 347  : 					}
; 348  : 					else

	jmp	SHORT $LN2@SetField@2

; 349  : 					{
; 350  : 						typedef Details::PushAnalog<T>::Result Analog;
; 351  : 						Analog analog = Details::ToLuaAnalog<Analog>::Convert(val);

$LN14@SetField@2:
	mov	al, BYTE PTR _val$[ebp]
	mov	BYTE PTR _analog$217276[ebp], al

; 352  : 						lua_checkstack(L, 1);

	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_checkstack
	add	esp, 8

; 353  : 						Details::Push(L, analog); // Push the value

	movzx	edx, BYTE PTR _analog$217276[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushboolean
	add	esp, 8

; 354  : 						lua_rawset(L, -3); // Set the field (pops key and value)

	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawset
	add	esp, 8
$LN2@SetField@2:

; 355  : 					}

	jmp	SHORT $LN1@SetField@2
$LN4@SetField@2:

; 356  : 				}
; 357  : 				else Details::Error("Invalid key sent to FLua::Table::SetField");

	push	OFFSET ??_C@_0CK@ILAFJLND@Invalid?5key?5sent?5to?5FLua?3?3Table?3@
	call	?Error@Details@FLua@@YAXPBDZZ		; FLua::Details::Error
	add	esp, 4
$LN1@SetField@2:

; 358  : 				lua_pop(L, 1); // Pop the table

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8
$LN8@SetField@2:

; 359  : 			}
; 360  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??$SetField@_N@Table@FLua@@QAEXABVValue@1@_N@Z ENDP	; FLua::Table::SetField<bool>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$SetField@PBD@Table@FLua@@QAEXABVValue@1@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T218004 = -12						; size = 4
_analog$217303 = -8					; size = 4
_L$ = -4						; size = 4
_kKey$ = 8						; size = 4
_val$ = 12						; size = 4
??$SetField@PBD@Table@FLua@@QAEXABVValue@1@PBD@Z PROC	; FLua::Table::SetField<char const *>, COMDAT
; _this$ = ecx

; 336  : 		void SetField(const Value &kKey, T val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 337  : 			lua_State *L = m_kLuaVal.GetLuaState();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _L$[ebp], ecx

; 338  : 			if( L != kKey.GetLuaState() ) {

	mov	edx, DWORD PTR _kKey$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T218004[ebp], eax
	mov	ecx, DWORD PTR _L$[ebp]
	cmp	ecx, DWORD PTR $T218004[ebp]
	je	SHORT $LN7@SetField@3

; 339  : 				Details::Error("Key sent to FLua::Table::SetField belongs to a different lua state");

	push	OFFSET ??_C@_0ED@FEEIEOLF@Key?5sent?5to?5FLua?3?3Table?3?3SetFiel@
	call	?Error@Details@FLua@@YAXPBDZZ		; FLua::Details::Error
	add	esp, 4
	jmp	$LN8@SetField@3
$LN7@SetField@3:

; 340  : 			}
; 341  : 			else if( Push() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Push@Table@FLua@@QBE_NXZ		; FLua::Table::Push
	movzx	edx, al
	test	edx, edx
	je	$LN8@SetField@3

; 342  : 				if( kKey.Push() ) {

	mov	ecx, DWORD PTR _kKey$[ebp]
	call	?Push@Value@FLua@@QBE_NXZ		; FLua::Value::Push
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@SetField@3

; 343  : 					if( lua_isnil(L, -1) )

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@SetField@3

; 344  : 					{
; 345  : 						lua_pop(L, 1); // Pop the nil key

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 346  : 						Details::Error("nil key sent to FLua::Table::SetField");

	push	OFFSET ??_C@_0CG@IHIEJLDN@nil?5key?5sent?5to?5FLua?3?3Table?3?3Set@
	call	?Error@Details@FLua@@YAXPBDZZ		; FLua::Details::Error
	add	esp, 4

; 347  : 					}
; 348  : 					else

	jmp	SHORT $LN2@SetField@3

; 349  : 					{
; 350  : 						typedef Details::PushAnalog<T>::Result Analog;
; 351  : 						Analog analog = Details::ToLuaAnalog<Analog>::Convert(val);

$LN14@SetField@3:
	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _analog$217303[ebp], eax

; 352  : 						lua_checkstack(L, 1);

	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_checkstack
	add	esp, 8

; 353  : 						Details::Push(L, analog); // Push the value

	mov	edx, DWORD PTR _analog$217303[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 354  : 						lua_rawset(L, -3); // Set the field (pops key and value)

	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawset
	add	esp, 8
$LN2@SetField@3:

; 355  : 					}

	jmp	SHORT $LN1@SetField@3
$LN4@SetField@3:

; 356  : 				}
; 357  : 				else Details::Error("Invalid key sent to FLua::Table::SetField");

	push	OFFSET ??_C@_0CK@ILAFJLND@Invalid?5key?5sent?5to?5FLua?3?3Table?3@
	call	?Error@Details@FLua@@YAXPBDZZ		; FLua::Details::Error
	add	esp, 4
$LN1@SetField@3:

; 358  : 				lua_pop(L, 1); // Pop the table

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8
$LN8@SetField@3:

; 359  : 			}
; 360  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??$SetField@PBD@Table@FLua@@QAEXABVValue@1@PBD@Z ENDP	; FLua::Table::SetField<char const *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1Table@FLua@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Table@FLua@@QAE@XZ PROC				; FLua::Table::~Table, COMDAT
; _this$ = ecx

; 218  : 		~Table() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Value@FLua@@QAE@XZ			; FLua::Value::~Value
	mov	esp, ebp
	pop	ebp
	ret	0
??1Table@FLua@@QAE@XZ ENDP				; FLua::Table::~Table
_TEXT	ENDS
END
