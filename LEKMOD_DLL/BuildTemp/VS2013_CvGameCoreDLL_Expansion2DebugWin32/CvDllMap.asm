; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvDllMap.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05OCFELOIJ@1?40?40?$AA@			; `string'
CONST	SEGMENT
_guidICvUnknown DD 0d89ba82fH
	DW	09fa3H
	DW	04696H
	DB	0b3H
	DB	0f4H
	DB	052H
	DB	0bdH
	DB	0b1H
	DB	01H
	DB	0cfH
	DB	0b2H
_guidICvMap1 DD	08b71d2b1H
	DW	03673H
	DW	041a2H
	DB	0b6H
	DB	063H
	DB	0c6H
	DB	07cH
	DB	02H
	DB	0e1H
	DB	06fH
	DB	057H
CONST	ENDS
_DATA	SEGMENT
_CIV5_XP2_DLL_VERSION DD FLAT:??_C@_05OCFELOIJ@1?40?40?$AA@
_DATA	ENDS
;	COMDAT ??_C@_05OCFELOIJ@1?40?40?$AA@
CONST	SEGMENT
??_C@_05OCFELOIJ@1?40?40?$AA@ DB '1.0.0', 00H		; `string'
CONST	ENDS
PUBLIC	??_7CvDllMap@@6B@				; CvDllMap::`vftable'
PUBLIC	??_7ICvMap1@@6B@				; ICvMap1::`vftable'
PUBLIC	??_7ICvUnknown@@6B@				; ICvUnknown::`vftable'
PUBLIC	??0CvDllMap@@QAE@PAVCvMap@@@Z			; CvDllMap::CvDllMap
PUBLIC	?QueryInterface@CvDllMap@@UAGPAXU_GUID@@@Z	; CvDllMap::QueryInterface
PUBLIC	?Destroy@CvDllMap@@EAGXXZ			; CvDllMap::Destroy
PUBLIC	?Init@CvDllMap@@UAGXPAUCvMapInitData@@@Z	; CvDllMap::Init
PUBLIC	?Uninit@CvDllMap@@UAGXXZ			; CvDllMap::Uninit
PUBLIC	?UpdateSymbolVisibility@CvDllMap@@UAGXXZ	; CvDllMap::UpdateSymbolVisibility
PUBLIC	?UpdateLayout@CvDllMap@@UAGX_N@Z		; CvDllMap::UpdateLayout
PUBLIC	?UpdateDeferredFog@CvDllMap@@UAGXXZ		; CvDllMap::UpdateDeferredFog
PUBLIC	?FindCity@CvDllMap@@UAGPAVICvCity1@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PAV2@@Z ; CvDllMap::FindCity
PUBLIC	?NumPlots@CvDllMap@@UBGHXZ			; CvDllMap::NumPlots
PUBLIC	?PlotNum@CvDllMap@@UBGHHH@Z			; CvDllMap::PlotNum
PUBLIC	?GetGridWidth@CvDllMap@@UBGHXZ			; CvDllMap::GetGridWidth
PUBLIC	?GetGridHeight@CvDllMap@@UBGHXZ			; CvDllMap::GetGridHeight
PUBLIC	?IsWrapX@CvDllMap@@UBG_NXZ			; CvDllMap::IsWrapX
PUBLIC	?IsWrapY@CvDllMap@@UBG_NXZ			; CvDllMap::IsWrapY
PUBLIC	?GetPlotByIndex@CvDllMap@@UBGPAVICvPlot1@@H@Z	; CvDllMap::GetPlotByIndex
PUBLIC	?GetPlot@CvDllMap@@UBGPAVICvPlot1@@HH@Z		; CvDllMap::GetPlot
PUBLIC	?RecalculateLandmasses@CvDllMap@@UAGXXZ		; CvDllMap::RecalculateLandmasses
PUBLIC	?Read@CvDllMap@@UAGXAAVFDataStream@@@Z		; CvDllMap::Read
PUBLIC	?Write@CvDllMap@@UBGXAAVFDataStream@@@Z		; CvDllMap::Write
PUBLIC	?Validate@CvDllMap@@UAGHXZ			; CvDllMap::Validate
EXTRN	__purecall:PROC
;	COMDAT ??_7CvDllMap@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllmap.cpp
CONST	SEGMENT
??_7CvDllMap@@6B@ DD FLAT:?QueryInterface@CvDllMap@@UAGPAXU_GUID@@@Z ; CvDllMap::`vftable'
	DD	FLAT:?Destroy@CvDllMap@@EAGXXZ
	DD	FLAT:?Init@CvDllMap@@UAGXPAUCvMapInitData@@@Z
	DD	FLAT:?Uninit@CvDllMap@@UAGXXZ
	DD	FLAT:?UpdateSymbolVisibility@CvDllMap@@UAGXXZ
	DD	FLAT:?UpdateLayout@CvDllMap@@UAGX_N@Z
	DD	FLAT:?UpdateDeferredFog@CvDllMap@@UAGXXZ
	DD	FLAT:?FindCity@CvDllMap@@UAGPAVICvCity1@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PAV2@@Z
	DD	FLAT:?NumPlots@CvDllMap@@UBGHXZ
	DD	FLAT:?PlotNum@CvDllMap@@UBGHHH@Z
	DD	FLAT:?GetGridWidth@CvDllMap@@UBGHXZ
	DD	FLAT:?GetGridHeight@CvDllMap@@UBGHXZ
	DD	FLAT:?IsWrapX@CvDllMap@@UBG_NXZ
	DD	FLAT:?IsWrapY@CvDllMap@@UBG_NXZ
	DD	FLAT:?GetPlotByIndex@CvDllMap@@UBGPAVICvPlot1@@H@Z
	DD	FLAT:?GetPlot@CvDllMap@@UBGPAVICvPlot1@@HH@Z
	DD	FLAT:?RecalculateLandmasses@CvDllMap@@UAGXXZ
	DD	FLAT:?Read@CvDllMap@@UAGXAAVFDataStream@@@Z
	DD	FLAT:?Write@CvDllMap@@UBGXAAVFDataStream@@@Z
	DD	FLAT:?Validate@CvDllMap@@UAGHXZ
CONST	ENDS
;	COMDAT ??_7ICvMap1@@6B@
CONST	SEGMENT
??_7ICvMap1@@6B@ DD FLAT:__purecall			; ICvMap1::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ICvUnknown@@6B@
CONST	SEGMENT
??_7ICvUnknown@@6B@ DD FLAT:__purecall			; ICvUnknown::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvDllMap@@QAE@PAVCvMap@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pMap$ = 8						; size = 4
??0CvDllMap@@QAE@PAVCvMap@@@Z PROC			; CvDllMap::CvDllMap, COMDAT
; _this$ = ecx

; 22   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICvUnknown@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ICvMap1@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7CvDllMap@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pMap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 23   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CvDllMap@@QAE@PAVCvMap@@@Z ENDP			; CvDllMap::CvDllMap
_TEXT	ENDS
PUBLIC	??1CvDllMap@@QAE@XZ				; CvDllMap::~CvDllMap
; Function compile flags: /Odtp
;	COMDAT ??1CvDllMap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvDllMap@@QAE@XZ PROC				; CvDllMap::~CvDllMap, COMDAT
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvDllMap@@6B@

; 27   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CvDllMap@@QAE@XZ ENDP				; CvDllMap::~CvDllMap
_TEXT	ENDS
PUBLIC	?IncrementReference@CvDllMap@@QAEIXZ		; CvDllMap::IncrementReference
; Function compile flags: /Odtp
;	COMDAT ?QueryInterface@CvDllMap@@UAGPAXU_GUID@@@Z
_TEXT	SEGMENT
tv90 = -88						; size = 4
tv161 = -84						; size = 4
tv85 = -80						; size = 4
tv137 = -76						; size = 4
$T218271 = -72						; size = 16
$T218270 = -56						; size = 16
$T218269 = -40						; size = 16
$T218268 = -20						; size = 16
_this$ = 8						; size = 4
_guidInterface$ = 12					; size = 16
?QueryInterface@CvDllMap@@UAGPAXU_GUID@@@Z PROC		; CvDllMap::QueryInterface, COMDAT

; 30   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 31   : 	if(guidInterface == ICvUnknown::GetInterfaceId() ||
; 32   : 	        guidInterface == ICvMap1::GetInterfaceId())

	mov	eax, DWORD PTR _guidICvUnknown
	mov	DWORD PTR $T218269[ebp], eax
	mov	ecx, DWORD PTR _guidICvUnknown+4
	mov	DWORD PTR $T218269[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvUnknown+8
	mov	DWORD PTR $T218269[ebp+8], edx
	mov	eax, DWORD PTR _guidICvUnknown+12
	mov	DWORD PTR $T218269[ebp+12], eax
	mov	ecx, DWORD PTR $T218269[ebp]
	mov	DWORD PTR $T218268[ebp], ecx
	mov	edx, DWORD PTR $T218269[ebp+4]
	mov	DWORD PTR $T218268[ebp+4], edx
	mov	eax, DWORD PTR $T218269[ebp+8]
	mov	DWORD PTR $T218268[ebp+8], eax
	mov	ecx, DWORD PTR $T218269[ebp+12]
	mov	DWORD PTR $T218268[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T218268[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv137[ebp], edx
	repe cmpsb
	je	SHORT $LN17@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv137[ebp], eax
$LN17@QueryInter:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv85[ebp], 0
	sete	dl
	test	edx, edx
	jne	SHORT $LN1@QueryInter
	mov	eax, DWORD PTR _guidICvMap1
	mov	DWORD PTR $T218271[ebp], eax
	mov	ecx, DWORD PTR _guidICvMap1+4
	mov	DWORD PTR $T218271[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvMap1+8
	mov	DWORD PTR $T218271[ebp+8], edx
	mov	eax, DWORD PTR _guidICvMap1+12
	mov	DWORD PTR $T218271[ebp+12], eax
	mov	ecx, DWORD PTR $T218271[ebp]
	mov	DWORD PTR $T218270[ebp], ecx
	mov	edx, DWORD PTR $T218271[ebp+4]
	mov	DWORD PTR $T218270[ebp+4], edx
	mov	eax, DWORD PTR $T218271[ebp+8]
	mov	DWORD PTR $T218270[ebp+8], eax
	mov	ecx, DWORD PTR $T218271[ebp+12]
	mov	DWORD PTR $T218270[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T218270[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv161[ebp], edx
	repe cmpsb
	je	SHORT $LN18@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv161[ebp], eax
$LN18@QueryInter:
	mov	ecx, DWORD PTR tv161[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv90[ebp], 0
	sete	dl
	test	edx, edx
	je	SHORT $LN2@QueryInter
$LN1@QueryInter:

; 33   : 	{
; 34   : 		IncrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncrementReference@CvDllMap@@QAEIXZ	; CvDllMap::IncrementReference

; 35   : 		return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN3@QueryInter
$LN2@QueryInter:

; 36   : 	}
; 37   : 
; 38   : 	return NULL;

	xor	eax, eax
$LN3@QueryInter:

; 39   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?QueryInterface@CvDllMap@@UAGPAXU_GUID@@@Z ENDP		; CvDllMap::QueryInterface
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IncrementReference@CvDllMap@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IncrementReference@CvDllMap@@QAEIXZ PROC		; CvDllMap::IncrementReference, COMDAT
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 43   : 	++m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 44   : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 45   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IncrementReference@CvDllMap@@QAEIXZ ENDP		; CvDllMap::IncrementReference
_TEXT	ENDS
PUBLIC	??3CvDllMap@@SAXPAX@Z				; CvDllMap::operator delete
PUBLIC	?DecrementReference@CvDllMap@@QAEIXZ		; CvDllMap::DecrementReference
; Function compile flags: /Odtp
;	COMDAT ?DecrementReference@CvDllMap@@QAEIXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T218303 = -8						; size = 4
$T218302 = -4						; size = 4
?DecrementReference@CvDllMap@@QAEIXZ PROC		; CvDllMap::DecrementReference, COMDAT
; _this$ = ecx

; 48   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 	if(m_uiRefCount == 1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN2@DecrementR

; 50   : 	{
; 51   : 		delete this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T218303[ebp], ecx
	mov	edx, DWORD PTR $T218303[ebp]
	mov	DWORD PTR $T218302[ebp], edx
	cmp	DWORD PTR $T218302[ebp], 0
	je	SHORT $LN5@DecrementR
	mov	ecx, DWORD PTR $T218302[ebp]
	call	??1CvDllMap@@QAE@XZ			; CvDllMap::~CvDllMap
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN8@DecrementR
	mov	ecx, DWORD PTR $T218302[ebp]
	push	ecx
	call	??3CvDllMap@@SAXPAX@Z			; CvDllMap::operator delete
	add	esp, 4
$LN8@DecrementR:
	mov	edx, DWORD PTR $T218302[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN6@DecrementR
$LN5@DecrementR:
	mov	DWORD PTR tv70[ebp], 0
$LN6@DecrementR:

; 52   : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@DecrementR

; 53   : 	}
; 54   : 	else

	jmp	SHORT $LN3@DecrementR
$LN2@DecrementR:

; 55   : 	{
; 56   : 		--m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 57   : 		return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN3@DecrementR:

; 58   : 	}
; 59   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DecrementReference@CvDllMap@@QAEIXZ ENDP		; CvDllMap::DecrementReference
_TEXT	ENDS
PUBLIC	?GetReferenceCount@CvDllMap@@QAEIXZ		; CvDllMap::GetReferenceCount
; Function compile flags: /Odtp
;	COMDAT ?GetReferenceCount@CvDllMap@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReferenceCount@CvDllMap@@QAEIXZ PROC		; CvDllMap::GetReferenceCount, COMDAT
; _this$ = ecx

; 62   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 64   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetReferenceCount@CvDllMap@@QAEIXZ ENDP		; CvDllMap::GetReferenceCount
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Destroy@CvDllMap@@EAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Destroy@CvDllMap@@EAGXXZ PROC				; CvDllMap::Destroy, COMDAT

; 67   : {

	push	ebp
	mov	ebp, esp

; 68   : 	DecrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecrementReference@CvDllMap@@QAEIXZ	; CvDllMap::DecrementReference

; 69   : }

	pop	ebp
	ret	4
?Destroy@CvDllMap@@EAGXXZ ENDP				; CvDllMap::Destroy
_TEXT	ENDS
EXTRN	?Free@CvDllGameContext@@SAXPAX@Z:PROC		; CvDllGameContext::Free
; Function compile flags: /Odtp
;	COMDAT ??3CvDllMap@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CvDllMap@@SAXPAX@Z PROC				; CvDllMap::operator delete, COMDAT

; 72   : {

	push	ebp
	mov	ebp, esp

; 73   : 	CvDllGameContext::Free(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
	add	esp, 4

; 74   : }

	pop	ebp
	ret	0
??3CvDllMap@@SAXPAX@Z ENDP				; CvDllMap::operator delete
_TEXT	ENDS
PUBLIC	??2CvDllMap@@SAPAXI@Z				; CvDllMap::operator new
EXTRN	?Allocate@CvDllGameContext@@SAPAXI@Z:PROC	; CvDllGameContext::Allocate
; Function compile flags: /Odtp
;	COMDAT ??2CvDllMap@@SAPAXI@Z
_TEXT	SEGMENT
_bytes$ = 8						; size = 4
??2CvDllMap@@SAPAXI@Z PROC				; CvDllMap::operator new, COMDAT

; 77   : {

	push	ebp
	mov	ebp, esp

; 78   : 	return CvDllGameContext::Allocate(bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	call	?Allocate@CvDllGameContext@@SAPAXI@Z	; CvDllGameContext::Allocate
	add	esp, 4

; 79   : }

	pop	ebp
	ret	0
??2CvDllMap@@SAPAXI@Z ENDP				; CvDllMap::operator new
_TEXT	ENDS
PUBLIC	?GetInstance@CvDllMap@@QAEPAVCvMap@@XZ		; CvDllMap::GetInstance
; Function compile flags: /Odtp
;	COMDAT ?GetInstance@CvDllMap@@QAEPAVCvMap@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInstance@CvDllMap@@QAEPAVCvMap@@XZ PROC		; CvDllMap::GetInstance, COMDAT
; _this$ = ecx

; 82   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 	return m_pMap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 84   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInstance@CvDllMap@@QAEPAVCvMap@@XZ ENDP		; CvDllMap::GetInstance
_TEXT	ENDS
EXTRN	?init@CvMap@@QAEXPAUCvMapInitData@@@Z:PROC	; CvMap::init
; Function compile flags: /Odtp
;	COMDAT ?Init@CvDllMap@@UAGXPAUCvMapInitData@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pInitData$ = 12					; size = 4
?Init@CvDllMap@@UAGXPAUCvMapInitData@@@Z PROC		; CvDllMap::Init, COMDAT

; 87   : {

	push	ebp
	mov	ebp, esp

; 88   : 	m_pMap->init(pInitData);

	mov	eax, DWORD PTR _pInitData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?init@CvMap@@QAEXPAUCvMapInitData@@@Z	; CvMap::init

; 89   : }

	pop	ebp
	ret	8
?Init@CvDllMap@@UAGXPAUCvMapInitData@@@Z ENDP		; CvDllMap::Init
_TEXT	ENDS
EXTRN	?uninit@CvMap@@QAEXXZ:PROC			; CvMap::uninit
; Function compile flags: /Odtp
;	COMDAT ?Uninit@CvDllMap@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Uninit@CvDllMap@@UAGXXZ PROC				; CvDllMap::Uninit, COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp

; 93   : 	m_pMap->uninit();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?uninit@CvMap@@QAEXXZ			; CvMap::uninit

; 94   : }

	pop	ebp
	ret	4
?Uninit@CvDllMap@@UAGXXZ ENDP				; CvDllMap::Uninit
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?UpdateSymbolVisibility@CvDllMap@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?UpdateSymbolVisibility@CvDllMap@@UAGXXZ PROC		; CvDllMap::UpdateSymbolVisibility, COMDAT

; 97   : {

	push	ebp
	mov	ebp, esp

; 98   : 	// Unused
; 99   : }

	pop	ebp
	ret	4
?UpdateSymbolVisibility@CvDllMap@@UAGXXZ ENDP		; CvDllMap::UpdateSymbolVisibility
_TEXT	ENDS
EXTRN	?updateLayout@CvMap@@QAEX_N@Z:PROC		; CvMap::updateLayout
; Function compile flags: /Odtp
;	COMDAT ?UpdateLayout@CvDllMap@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bDebug$ = 12						; size = 1
?UpdateLayout@CvDllMap@@UAGX_N@Z PROC			; CvDllMap::UpdateLayout, COMDAT

; 102  : {

	push	ebp
	mov	ebp, esp

; 103  : 	m_pMap->updateLayout(bDebug);

	movzx	eax, BYTE PTR _bDebug$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?updateLayout@CvMap@@QAEX_N@Z		; CvMap::updateLayout

; 104  : }

	pop	ebp
	ret	8
?UpdateLayout@CvDllMap@@UAGX_N@Z ENDP			; CvDllMap::UpdateLayout
_TEXT	ENDS
EXTRN	?updateDeferredFog@CvMap@@QAEXXZ:PROC		; CvMap::updateDeferredFog
; Function compile flags: /Odtp
;	COMDAT ?UpdateDeferredFog@CvDllMap@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?UpdateDeferredFog@CvDllMap@@UAGXXZ PROC		; CvDllMap::UpdateDeferredFog, COMDAT

; 107  : {

	push	ebp
	mov	ebp, esp

; 108  : 	m_pMap->updateDeferredFog();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?updateDeferredFog@CvMap@@QAEXXZ	; CvMap::updateDeferredFog

; 109  : }

	pop	ebp
	ret	4
?UpdateDeferredFog@CvDllMap@@UAGXXZ ENDP		; CvDllMap::UpdateDeferredFog
_TEXT	ENDS
EXTRN	??3CvDllCity@@SAXPAX@Z:PROC			; CvDllCity::operator delete
EXTRN	??0CvDllCity@@QAE@PAVCvCity@@@Z:PROC		; CvDllCity::CvDllCity
EXTRN	??2CvDllCity@@SAPAXI@Z:PROC			; CvDllCity::operator new
EXTRN	?findCity@CvMap@@QAEPAVCvCity@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PBV2@@Z:PROC ; CvMap::findCity
EXTRN	?GetInstance@CvDllCity@@QAEPAVCvCity@@XZ:PROC	; CvDllCity::GetInstance
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FindCity@CvDllMap@@UAGPAVICvCity1@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindCity@CvDllMap@@UAGPAVICvCity1@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PAV2@@Z$0
__ehfuncinfo$?FindCity@CvDllMap@@UAGPAVICvCity1@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindCity@CvDllMap@@UAGPAVICvCity1@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?FindCity@CvDllMap@@UAGPAVICvCity1@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PAV2@@Z
_TEXT	SEGMENT
tv90 = -36						; size = 4
tv95 = -32						; size = 4
$T218333 = -28						; size = 4
$T218332 = -24						; size = 4
_pkSkipCity$ = -20					; size = 4
_pkCity$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_iX$ = 12						; size = 4
_iY$ = 16						; size = 4
_eOwner$ = 20						; size = 4
_eTeam$ = 24						; size = 4
_bSameArea$ = 28					; size = 1
_bCoastalOnly$ = 32					; size = 1
_eTeamAtWarWith$ = 36					; size = 4
_eDirection$ = 40					; size = 4
_pSkipCity$ = 44					; size = 4
?FindCity@CvDllMap@@UAGPAVICvCity1@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PAV2@@Z PROC ; CvDllMap::FindCity, COMDAT

; 120  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindCity@CvDllMap@@UAGPAVICvCity1@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 121  : 	CvCity* pkSkipCity = NULL;

	mov	DWORD PTR _pkSkipCity$[ebp], 0

; 122  : 	if(pSkipCity)

	cmp	DWORD PTR _pSkipCity$[ebp], 0
	je	SHORT $LN1@FindCity

; 123  : 	{
; 124  : 		pkSkipCity = static_cast<CvDllCity*>(pSkipCity)->GetInstance();

	mov	ecx, DWORD PTR _pSkipCity$[ebp]
	call	?GetInstance@CvDllCity@@QAEPAVCvCity@@XZ ; CvDllCity::GetInstance
	mov	DWORD PTR _pkSkipCity$[ebp], eax
$LN1@FindCity:

; 125  : 	}
; 126  : 
; 127  : 	CvCity* pkCity = m_pMap->findCity(iX, iY, eOwner, eTeam, bSameArea, bCoastalOnly, eTeamAtWarWith, eDirection, pkSkipCity);

	mov	eax, DWORD PTR _pkSkipCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eDirection$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eTeamAtWarWith$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bCoastalOnly$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bSameArea$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eTeam$[ebp]
	push	edx
	mov	eax, DWORD PTR _eOwner$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iX$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?findCity@CvMap@@QAEPAVCvCity@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PBV2@@Z ; CvMap::findCity
	mov	DWORD PTR _pkCity$[ebp], eax

; 128  : 	return (NULL != pkCity)? new CvDllCity(pkCity) : NULL;

	cmp	DWORD PTR _pkCity$[ebp], 0
	je	SHORT $LN6@FindCity
	push	12					; 0000000cH
	call	??2CvDllCity@@SAPAXI@Z			; CvDllCity::operator new
	add	esp, 4
	mov	DWORD PTR $T218333[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T218333[ebp], 0
	je	SHORT $LN4@FindCity
	mov	ecx, DWORD PTR _pkCity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T218333[ebp]
	call	??0CvDllCity@@QAE@PAVCvCity@@@Z		; CvDllCity::CvDllCity
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN5@FindCity
$LN4@FindCity:
	mov	DWORD PTR tv95[ebp], 0
$LN5@FindCity:
	mov	edx, DWORD PTR tv95[ebp]
	mov	DWORD PTR $T218332[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T218332[ebp]
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN7@FindCity
$LN6@FindCity:
	mov	DWORD PTR tv90[ebp], 0
$LN7@FindCity:
	mov	eax, DWORD PTR tv90[ebp]

; 129  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FindCity@CvDllMap@@UAGPAVICvCity1@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PAV2@@Z$0:
	mov	eax, DWORD PTR $T218333[ebp]
	push	eax
	call	??3CvDllCity@@SAXPAX@Z			; CvDllCity::operator delete
	pop	ecx
	ret	0
__ehhandler$?FindCity@CvDllMap@@UAGPAVICvCity1@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindCity@CvDllMap@@UAGPAVICvCity1@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindCity@CvDllMap@@UAGPAVICvCity1@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PAV2@@Z ENDP ; CvDllMap::FindCity
; Function compile flags: /Odtp
;	COMDAT ?NumPlots@CvDllMap@@UBGHXZ
_TEXT	SEGMENT
$T218355 = -4						; size = 4
_this$ = 8						; size = 4
?NumPlots@CvDllMap@@UBGHXZ PROC				; CvDllMap::NumPlots, COMDAT

; 132  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 133  : 	return m_pMap->numPlots();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4028]
	mov	DWORD PTR $T218355[ebp], edx
	mov	eax, DWORD PTR $T218355[ebp]

; 134  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?NumPlots@CvDllMap@@UBGHXZ ENDP				; CvDllMap::NumPlots
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?PlotNum@CvDllMap@@UBGHHH@Z
_TEXT	SEGMENT
$T218362 = -4						; size = 4
_this$ = 8						; size = 4
_iX$ = 12						; size = 4
_iY$ = 16						; size = 4
?PlotNum@CvDllMap@@UBGHHH@Z PROC			; CvDllMap::PlotNum, COMDAT

; 137  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 138  : 	return m_pMap->plotNum(iX, iY);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T218362[ebp], edx
	mov	eax, DWORD PTR _iY$[ebp]
	imul	eax, DWORD PTR $T218362[ebp]
	add	eax, DWORD PTR _iX$[ebp]

; 139  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PlotNum@CvDllMap@@UBGHHH@Z ENDP			; CvDllMap::PlotNum
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetGridWidth@CvDllMap@@UBGHXZ
_TEXT	SEGMENT
$T218372 = -4						; size = 4
_this$ = 8						; size = 4
?GetGridWidth@CvDllMap@@UBGHXZ PROC			; CvDllMap::GetGridWidth, COMDAT

; 142  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 143  : 	return m_pMap->getGridWidth();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T218372[ebp], edx
	mov	eax, DWORD PTR $T218372[ebp]

; 144  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetGridWidth@CvDllMap@@UBGHXZ ENDP			; CvDllMap::GetGridWidth
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetGridHeight@CvDllMap@@UBGHXZ
_TEXT	SEGMENT
$T218378 = -4						; size = 4
_this$ = 8						; size = 4
?GetGridHeight@CvDllMap@@UBGHXZ PROC			; CvDllMap::GetGridHeight, COMDAT

; 147  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 148  : 	return m_pMap->getGridHeight();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T218378[ebp], edx
	mov	eax, DWORD PTR $T218378[ebp]

; 149  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetGridHeight@CvDllMap@@UBGHXZ ENDP			; CvDllMap::GetGridHeight
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IsWrapX@CvDllMap@@UBG_NXZ
_TEXT	SEGMENT
$T218384 = -1						; size = 1
_this$ = 8						; size = 4
?IsWrapX@CvDllMap@@UBG_NXZ PROC				; CvDllMap::IsWrapX, COMDAT

; 152  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 153  : 	return m_pMap->isWrapX();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T218384[ebp], dl
	mov	al, BYTE PTR $T218384[ebp]

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsWrapX@CvDllMap@@UBG_NXZ ENDP				; CvDllMap::IsWrapX
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IsWrapY@CvDllMap@@UBG_NXZ
_TEXT	SEGMENT
$T218390 = -1						; size = 1
_this$ = 8						; size = 4
?IsWrapY@CvDllMap@@UBG_NXZ PROC				; CvDllMap::IsWrapY, COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 158  : 	return m_pMap->isWrapY();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	dl, BYTE PTR [ecx+4057]
	mov	BYTE PTR $T218390[ebp], dl
	mov	al, BYTE PTR $T218390[ebp]

; 159  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsWrapY@CvDllMap@@UBG_NXZ ENDP				; CvDllMap::IsWrapY
_TEXT	ENDS
EXTRN	??3CvDllPlot@@SAXPAX@Z:PROC			; CvDllPlot::operator delete
EXTRN	??0CvDllPlot@@QAE@PAVCvPlot@@@Z:PROC		; CvDllPlot::CvDllPlot
EXTRN	??2CvDllPlot@@SAPAXI@Z:PROC			; CvDllPlot::operator new
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
xdata$x	SEGMENT
__unwindtable$?GetPlotByIndex@CvDllMap@@UBGPAVICvPlot1@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPlotByIndex@CvDllMap@@UBGPAVICvPlot1@@H@Z$0
__ehfuncinfo$?GetPlotByIndex@CvDllMap@@UBGPAVICvPlot1@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPlotByIndex@CvDllMap@@UBGPAVICvPlot1@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllmap.cpp
xdata$x	ENDS
;	COMDAT ?GetPlotByIndex@CvDllMap@@UBGPAVICvPlot1@@H@Z
_TEXT	SEGMENT
tv79 = -48						; size = 4
tv84 = -44						; size = 4
tv94 = -40						; size = 4
$T218417 = -36						; size = 4
$T218410 = -32						; size = 4
$T218403 = -28						; size = 4
$T218394 = -24						; size = 4
$T218393 = -20						; size = 4
_pkPlot$218170 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_iIndex$ = 12						; size = 4
?GetPlotByIndex@CvDllMap@@UBGPAVICvPlot1@@H@Z PROC	; CvDllMap::GetPlotByIndex, COMDAT

; 162  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetPlotByIndex@CvDllMap@@UBGPAVICvPlot1@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 163  : 	if (m_pMap->numPlots() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4028]
	mov	DWORD PTR $T218403[ebp], edx
	cmp	DWORD PTR $T218403[ebp], 0
	je	$LN1@GetPlotByI

; 164  : 	{
; 165  : 		CvPlot* pkPlot = m_pMap->plotByIndex(iIndex);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T218417[ebp], ecx
	cmp	DWORD PTR _iIndex$[ebp], 0
	jl	SHORT $LN13@GetPlotByI
	mov	edx, DWORD PTR $T218417[ebp]
	mov	eax, DWORD PTR [edx+4028]
	mov	DWORD PTR $T218410[ebp], eax
	mov	ecx, DWORD PTR _iIndex$[ebp]
	cmp	ecx, DWORD PTR $T218410[ebp]
	jge	SHORT $LN13@GetPlotByI
	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 484				; 000001e4H
	mov	eax, DWORD PTR $T218417[ebp]
	add	edx, DWORD PTR [eax+4068]
	mov	DWORD PTR tv94[ebp], edx
	jmp	SHORT $LN11@GetPlotByI
$LN13@GetPlotByI:
	mov	DWORD PTR tv94[ebp], 0
$LN11@GetPlotByI:
	mov	ecx, DWORD PTR tv94[ebp]
	mov	DWORD PTR _pkPlot$218170[ebp], ecx

; 166  : 		return (NULL != pkPlot)? new CvDllPlot(pkPlot) : NULL;

	cmp	DWORD PTR _pkPlot$218170[ebp], 0
	je	SHORT $LN6@GetPlotByI
	push	12					; 0000000cH
	call	??2CvDllPlot@@SAPAXI@Z			; CvDllPlot::operator new
	add	esp, 4
	mov	DWORD PTR $T218394[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T218394[ebp], 0
	je	SHORT $LN4@GetPlotByI
	mov	edx, DWORD PTR _pkPlot$218170[ebp]
	push	edx
	mov	ecx, DWORD PTR $T218394[ebp]
	call	??0CvDllPlot@@QAE@PAVCvPlot@@@Z		; CvDllPlot::CvDllPlot
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN5@GetPlotByI
$LN4@GetPlotByI:
	mov	DWORD PTR tv84[ebp], 0
$LN5@GetPlotByI:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T218393[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T218393[ebp]
	mov	DWORD PTR tv79[ebp], ecx
	jmp	SHORT $LN7@GetPlotByI
$LN6@GetPlotByI:
	mov	DWORD PTR tv79[ebp], 0
$LN7@GetPlotByI:
	mov	eax, DWORD PTR tv79[ebp]
	jmp	SHORT $LN2@GetPlotByI
$LN1@GetPlotByI:

; 167  : 	}
; 168  : 	return NULL;

	xor	eax, eax
$LN2@GetPlotByI:

; 169  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPlotByIndex@CvDllMap@@UBGPAVICvPlot1@@H@Z$0:
	mov	eax, DWORD PTR $T218394[ebp]
	push	eax
	call	??3CvDllPlot@@SAXPAX@Z			; CvDllPlot::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetPlotByIndex@CvDllMap@@UBGPAVICvPlot1@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetPlotByIndex@CvDllMap@@UBGPAVICvPlot1@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetPlotByIndex@CvDllMap@@UBGPAVICvPlot1@@H@Z ENDP	; CvDllMap::GetPlotByIndex
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
xdata$x	SEGMENT
__unwindtable$?GetPlot@CvDllMap@@UBGPAVICvPlot1@@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPlot@CvDllMap@@UBGPAVICvPlot1@@HH@Z$0
__ehfuncinfo$?GetPlot@CvDllMap@@UBGPAVICvPlot1@@HH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPlot@CvDllMap@@UBGPAVICvPlot1@@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllmap.cpp
xdata$x	ENDS
;	COMDAT ?GetPlot@CvDllMap@@UBGPAVICvPlot1@@HH@Z
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv85 = -80						; size = 4
tv150 = -76						; size = 4
tv165 = -72						; size = 4
$T218538 = -68						; size = 4
$T218493 = -64						; size = 4
$T218480 = -60						; size = 4
$T218476 = -56						; size = 4
$T218462 = -52						; size = 4
$T218458 = -45						; size = 1
$T218447 = -44						; size = 4
$T218443 = -37						; size = 1
_iMapY$218537 = -36					; size = 4
_iMapX$218536 = -32					; size = 4
$T218436 = -28						; size = 4
$T218427 = -24						; size = 4
$T218426 = -20						; size = 4
_pkPlot$218181 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_iX$ = 12						; size = 4
_iY$ = 16						; size = 4
?GetPlot@CvDllMap@@UBGPAVICvPlot1@@HH@Z PROC		; CvDllMap::GetPlot, COMDAT

; 172  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetPlot@CvDllMap@@UBGPAVICvPlot1@@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 173  : 	if (m_pMap->numPlots() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4028]
	mov	DWORD PTR $T218436[ebp], edx
	cmp	DWORD PTR $T218436[ebp], 0
	je	$LN1@GetPlot

; 174  : 	{
; 175  : 		CvPlot* pkPlot = m_pMap->plot(iX, iY);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T218538[ebp], ecx
	cmp	DWORD PTR _iX$[ebp], -2147483647	; 80000001H
	je	SHORT $LN11@GetPlot
	cmp	DWORD PTR _iY$[ebp], -2147483647	; 80000001H
	jne	SHORT $LN12@GetPlot
$LN11@GetPlot:
	mov	DWORD PTR _pkPlot$218181[ebp], 0
	jmp	$LN13@GetPlot
$LN12@GetPlot:
	mov	edx, DWORD PTR $T218538[ebp]
	mov	al, BYTE PTR [edx+4056]
	mov	BYTE PTR $T218443[ebp], al
	mov	ecx, DWORD PTR $T218538[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T218447[ebp], edx
	movzx	eax, BYTE PTR $T218443[ebp]
	test	eax, eax
	je	SHORT $LN24@GetPlot
	cmp	DWORD PTR _iX$[ebp], 0
	jge	SHORT $LN23@GetPlot
	mov	eax, DWORD PTR _iX$[ebp]
	cdq
	idiv	DWORD PTR $T218447[ebp]
	add	edx, DWORD PTR $T218447[ebp]
	mov	DWORD PTR _iMapX$218536[ebp], edx
	jmp	SHORT $LN25@GetPlot
	jmp	SHORT $LN24@GetPlot
$LN23@GetPlot:
	mov	ecx, DWORD PTR _iX$[ebp]
	cmp	ecx, DWORD PTR $T218447[ebp]
	jl	SHORT $LN24@GetPlot
	mov	eax, DWORD PTR _iX$[ebp]
	cdq
	idiv	DWORD PTR $T218447[ebp]
	mov	DWORD PTR _iMapX$218536[ebp], edx
	jmp	SHORT $LN25@GetPlot
$LN24@GetPlot:
	mov	edx, DWORD PTR _iX$[ebp]
	mov	DWORD PTR _iMapX$218536[ebp], edx
$LN25@GetPlot:
	mov	eax, DWORD PTR $T218538[ebp]
	mov	cl, BYTE PTR [eax+4057]
	mov	BYTE PTR $T218458[ebp], cl
	mov	edx, DWORD PTR $T218538[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T218462[ebp], eax
	movzx	ecx, BYTE PTR $T218458[ebp]
	test	ecx, ecx
	je	SHORT $LN34@GetPlot
	cmp	DWORD PTR _iY$[ebp], 0
	jge	SHORT $LN33@GetPlot
	mov	eax, DWORD PTR _iY$[ebp]
	cdq
	idiv	DWORD PTR $T218462[ebp]
	add	edx, DWORD PTR $T218462[ebp]
	mov	DWORD PTR _iMapY$218537[ebp], edx
	jmp	SHORT $LN35@GetPlot
	jmp	SHORT $LN34@GetPlot
$LN33@GetPlot:
	mov	edx, DWORD PTR _iY$[ebp]
	cmp	edx, DWORD PTR $T218462[ebp]
	jl	SHORT $LN34@GetPlot
	mov	eax, DWORD PTR _iY$[ebp]
	cdq
	idiv	DWORD PTR $T218462[ebp]
	mov	DWORD PTR _iMapY$218537[ebp], edx
	jmp	SHORT $LN35@GetPlot
$LN34@GetPlot:
	mov	eax, DWORD PTR _iY$[ebp]
	mov	DWORD PTR _iMapY$218537[ebp], eax
$LN35@GetPlot:
	cmp	DWORD PTR _iMapX$218536[ebp], 0
	jl	SHORT $LN39@GetPlot
	mov	ecx, DWORD PTR $T218538[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T218476[ebp], edx
	mov	eax, DWORD PTR _iMapX$218536[ebp]
	cmp	eax, DWORD PTR $T218476[ebp]
	jge	SHORT $LN39@GetPlot
	cmp	DWORD PTR _iMapY$218537[ebp], 0
	jl	SHORT $LN39@GetPlot
	mov	ecx, DWORD PTR $T218538[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T218480[ebp], edx
	mov	eax, DWORD PTR _iMapY$218537[ebp]
	cmp	eax, DWORD PTR $T218480[ebp]
	jge	SHORT $LN39@GetPlot
	mov	DWORD PTR tv165[ebp], 1
	jmp	SHORT $LN37@GetPlot
$LN39@GetPlot:
	mov	DWORD PTR tv165[ebp], 0
$LN37@GetPlot:
	cmp	DWORD PTR tv165[ebp], 0
	je	SHORT $LN15@GetPlot
	mov	ecx, DWORD PTR $T218538[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T218493[ebp], edx
	mov	eax, DWORD PTR _iMapY$218537[ebp]
	imul	eax, DWORD PTR $T218493[ebp]
	add	eax, DWORD PTR _iMapX$218536[ebp]
	imul	eax, 484				; 000001e4H
	mov	ecx, DWORD PTR $T218538[ebp]
	add	eax, DWORD PTR [ecx+4068]
	mov	DWORD PTR tv150[ebp], eax
	jmp	SHORT $LN16@GetPlot
$LN15@GetPlot:
	mov	DWORD PTR tv150[ebp], 0
$LN16@GetPlot:
	mov	edx, DWORD PTR tv150[ebp]
	mov	DWORD PTR _pkPlot$218181[ebp], edx
$LN13@GetPlot:

; 176  : 		return (NULL != pkPlot)? new CvDllPlot(pkPlot) : NULL;

	cmp	DWORD PTR _pkPlot$218181[ebp], 0
	je	SHORT $LN6@GetPlot
	push	12					; 0000000cH
	call	??2CvDllPlot@@SAPAXI@Z			; CvDllPlot::operator new
	add	esp, 4
	mov	DWORD PTR $T218427[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T218427[ebp], 0
	je	SHORT $LN4@GetPlot
	mov	eax, DWORD PTR _pkPlot$218181[ebp]
	push	eax
	mov	ecx, DWORD PTR $T218427[ebp]
	call	??0CvDllPlot@@QAE@PAVCvPlot@@@Z		; CvDllPlot::CvDllPlot
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN5@GetPlot
$LN4@GetPlot:
	mov	DWORD PTR tv85[ebp], 0
$LN5@GetPlot:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T218426[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T218426[ebp]
	mov	DWORD PTR tv80[ebp], edx
	jmp	SHORT $LN7@GetPlot
$LN6@GetPlot:
	mov	DWORD PTR tv80[ebp], 0
$LN7@GetPlot:
	mov	eax, DWORD PTR tv80[ebp]
	jmp	SHORT $LN2@GetPlot
$LN1@GetPlot:

; 177  : 	}
; 178  : 	return NULL;

	xor	eax, eax
$LN2@GetPlot:

; 179  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPlot@CvDllMap@@UBGPAVICvPlot1@@HH@Z$0:
	mov	eax, DWORD PTR $T218427[ebp]
	push	eax
	call	??3CvDllPlot@@SAXPAX@Z			; CvDllPlot::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetPlot@CvDllMap@@UBGPAVICvPlot1@@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetPlot@CvDllMap@@UBGPAVICvPlot1@@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetPlot@CvDllMap@@UBGPAVICvPlot1@@HH@Z ENDP		; CvDllMap::GetPlot
EXTRN	?recalculateLandmasses@CvMap@@QAEXXZ:PROC	; CvMap::recalculateLandmasses
; Function compile flags: /Odtp
;	COMDAT ?RecalculateLandmasses@CvDllMap@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?RecalculateLandmasses@CvDllMap@@UAGXXZ PROC		; CvDllMap::RecalculateLandmasses, COMDAT

; 182  : {

	push	ebp
	mov	ebp, esp

; 183  : 	m_pMap->recalculateLandmasses();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?recalculateLandmasses@CvMap@@QAEXXZ	; CvMap::recalculateLandmasses

; 184  : }

	pop	ebp
	ret	4
?RecalculateLandmasses@CvDllMap@@UAGXXZ ENDP		; CvDllMap::RecalculateLandmasses
_TEXT	ENDS
EXTRN	?Read@CvMap@@QAEXAAVFDataStream@@@Z:PROC	; CvMap::Read
; Function compile flags: /Odtp
;	COMDAT ?Read@CvDllMap@@UAGXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_kStream$ = 12						; size = 4
?Read@CvDllMap@@UAGXAAVFDataStream@@@Z PROC		; CvDllMap::Read, COMDAT

; 187  : {

	push	ebp
	mov	ebp, esp

; 188  : 	m_pMap->Read(kStream);

	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Read@CvMap@@QAEXAAVFDataStream@@@Z	; CvMap::Read

; 189  : }

	pop	ebp
	ret	8
?Read@CvDllMap@@UAGXAAVFDataStream@@@Z ENDP		; CvDllMap::Read
_TEXT	ENDS
EXTRN	?Write@CvMap@@QBEXAAVFDataStream@@@Z:PROC	; CvMap::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@CvDllMap@@UBGXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_kStream$ = 12						; size = 4
?Write@CvDllMap@@UBGXAAVFDataStream@@@Z PROC		; CvDllMap::Write, COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp

; 193  : 	m_pMap->Write(kStream);

	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Write@CvMap@@QBEXAAVFDataStream@@@Z	; CvMap::Write

; 194  : }

	pop	ebp
	ret	8
?Write@CvDllMap@@UBGXAAVFDataStream@@@Z ENDP		; CvDllMap::Write
_TEXT	ENDS
EXTRN	?Validate@CvMap@@QAEHXZ:PROC			; CvMap::Validate
; Function compile flags: /Odtp
;	COMDAT ?Validate@CvDllMap@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Validate@CvDllMap@@UAGHXZ PROC				; CvDllMap::Validate, COMDAT

; 197  : {

	push	ebp
	mov	ebp, esp

; 198  : 	return m_pMap->Validate();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Validate@CvMap@@QAEHXZ			; CvMap::Validate

; 199  : }

	pop	ebp
	ret	4
?Validate@CvDllMap@@UAGHXZ ENDP				; CvDllMap::Validate
_TEXT	ENDS
END
