; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvUnitCombat.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
PUBLIC	??_C@_0BD@HLIALPAH@Capture?5Enemy?5Roll?$AA@	; `string'
PUBLIC	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ		; CvPlot::getPlotCity
PUBLIC	?isCity@CvPlot@@QBE_NXZ				; CvPlot::isCity
PUBLIC	?GenerateMeleeCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z ; CvUnitCombat::GenerateMeleeCombatInfo
EXTRN	?setAttackerAdvances@CvCombatInfo@@QAEX_N@Z:PROC ; CvCombatInfo::setAttackerAdvances
EXTRN	?isDelayedDeath@CvUnit@@QBE_NXZ:PROC		; CvUnit::isDelayedDeath
EXTRN	?setDefenderCaptured@CvCombatInfo@@QAEX_N@Z:PROC ; CvCombatInfo::setDefenderCaptured
EXTRN	?GetCaptureChance@CvUnit@@QAEHPAV1@@Z:PROC	; CvUnit::GetCaptureChance
EXTRN	?getJonRandNum@CvGame@@QAEHHPBD@Z:PROC		; CvGame::getJonRandNum
EXTRN	?AreUnitsOfSameType@CvUnit@@QBE_NABV1@_N@Z:PROC	; CvUnit::AreUnitsOfSameType
EXTRN	?IsCaptureDefeatedEnemy@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsCaptureDefeatedEnemy
EXTRN	?getNumDefenders@CvPlot@@QBEHW4PlayerTypes@@@Z:PROC ; CvPlot::getNumDefenders
EXTRN	?setFearDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z:PROC ; CvCombatInfo::setFearDamageInflicted
EXTRN	?CanFallBackFromMelee@CvUnit@@IAE_NAAV1@@Z:PROC	; CvUnit::CanFallBackFromMelee
EXTRN	?GetHeavyChargeDownhill@CvUnit@@QBEHXZ:PROC	; CvUnit::GetHeavyChargeDownhill
EXTRN	?IsCanHeavyCharge@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsCanHeavyCharge
EXTRN	?isFlatlands@CvPlot@@QBE_NXZ:PROC		; CvPlot::isFlatlands
EXTRN	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ:PROC ; CvUnit::getDomainType
EXTRN	?GetMaxRangedCombatStrength@CvUnit@@QBEHPBV1@PBVCvCity@@_N2@Z:PROC ; CvUnit::GetMaxRangedCombatStrength
EXTRN	?GetMaxDefenseStrength@CvUnit@@QBEHPBVCvPlot@@PBV1@_N@Z:PROC ; CvUnit::GetMaxDefenseStrength
EXTRN	?setDefenderRetaliates@CvCombatInfo@@QAEX_N@Z:PROC ; CvCombatInfo::setDefenderRetaliates
EXTRN	?setAttackIsRanged@CvCombatInfo@@QAEX_N@Z:PROC	; CvCombatInfo::setAttackIsRanged
EXTRN	?maxXPValue@CvUnit@@QBEHXZ:PROC			; CvUnit::maxXPValue
EXTRN	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z:PROC ; CvCombatInfo::setUpdateGlobal
EXTRN	?isBarbarian@CvCity@@QBE_NXZ:PROC		; CvCity::isBarbarian
EXTRN	?isBarbarian@CvUnit@@QBE_NXZ:PROC		; CvUnit::isBarbarian
EXTRN	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z:PROC ; CvCombatInfo::setInBorders
EXTRN	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z:PROC ; CvCombatInfo::setMaxExperienceAllowed
EXTRN	?isMinorCiv@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isMinorCiv
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
EXTRN	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z:PROC ; CvCombatInfo::setExperience
EXTRN	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z:PROC ; CvCombatInfo::setDamageInflicted
EXTRN	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z:PROC ; CvCombatInfo::setFinalDamage
EXTRN	?getDamage@CvCity@@QBEHXZ:PROC			; CvCity::getDamage
EXTRN	?getCombatDamage@CvUnit@@QBEHHHH_N00@Z:PROC	; CvUnit::getCombatDamage
EXTRN	?getDamage@CvUnit@@QBEHXZ:PROC			; CvUnit::getDamage
EXTRN	?getStrengthValue@CvCity@@QBEH_N@Z:PROC		; CvCity::getStrengthValue
EXTRN	?GetMaxAttackStrength@CvUnit@@QBEHPBVCvPlot@@0PBV1@@Z:PROC ; CvUnit::GetMaxAttackStrength
EXTRN	?plot@CvUnit@@QBEPAVCvPlot@@XZ:PROC		; CvUnit::plot
EXTRN	?GetMaxHitPoints@CvCity@@QBEHXZ:PROC		; CvCity::GetMaxHitPoints
EXTRN	?setPlot@CvCombatInfo@@QAEXPAVCvPlot@@@Z:PROC	; CvCombatInfo::setPlot
EXTRN	?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z:PROC ; CvCombatInfo::setUnit
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
;	COMDAT ??_C@_0BD@HLIALPAH@Capture?5Enemy?5Roll?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_0BD@HLIALPAH@Capture?5Enemy?5Roll?$AA@ DB 'Capture Enemy Roll', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
CONST	ENDS
;	COMDAT ?GenerateMeleeCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z
_TEXT	SEGMENT
tv593 = -268						; size = 4
tv537 = -264						; size = 4
tv481 = -260						; size = 4
tv429 = -256						; size = 4
tv417 = -252						; size = 4
tv316 = -248						; size = 4
tv231 = -244						; size = 4
$T223776 = -240						; size = 4
$T223772 = -236						; size = 4
$T223768 = -232						; size = 4
$T223759 = -228						; size = 4
$T223755 = -224						; size = 4
$T223751 = -220						; size = 4
$T223747 = -216						; size = 4
$T223738 = -212						; size = 4
$T223731 = -208						; size = 4
$T223727 = -204						; size = 4
$T223718 = -200						; size = 4
$T223714 = -196						; size = 4
$T223705 = -192						; size = 4
$T223696 = -188						; size = 4
$T223689 = -184						; size = 4
$T223688 = -180						; size = 4
$T223687 = -176						; size = 4
$T223679 = -172						; size = 4
$T223678 = -168						; size = 4
$T223677 = -164						; size = 4
$T223669 = -160						; size = 4
$T223665 = -156						; size = 4
$T223661 = -152						; size = 4
$T223657 = -148						; size = 4
$T223648 = -144						; size = 4
$T223644 = -140						; size = 4
$T223640 = -136						; size = 4
$T223631 = -132						; size = 4
$T223627 = -128						; size = 4
$T223618 = -124						; size = 4
$T223609 = -120						; size = 4
$T223605 = -116						; size = 4
$T223601 = -112						; size = 4
_iCaptureRoll$221172 = -100				; size = 4
_iAttackerEffectiveStrength$221163 = -96		; size = 4
_iDefenderTotalDamageInflicted$221159 = -92		; size = 4
_bAdvance$221168 = -85					; size = 1
_iExperience$221165 = -84				; size = 4
_iDefenderDamageInflicted$221156 = -80			; size = 4
_iAttackerDamageInflicted$221155 = -76			; size = 4
_iAttackerStrength$221149 = -72				; size = 4
_isAttackingFromHigherElevation$221147 = -65		; size = 1
_iDefenderEffectiveStrength$221164 = -64		; size = 4
_bIsGlobalXPAwarded$221166 = -57			; size = 1
_iDefenderStrength$221148 = -56				; size = 4
_iAttackerTotalDamageInflicted$221158 = -52		; size = 4
_iDefenderTotalDamageInflicted$221141 = -48		; size = 4
_iExperience$221143 = -44				; size = 4
_iDefenderDamageInflicted$221139 = -40			; size = 4
_iAttackerDamageInflicted$221138 = -36			; size = 4
_iAttackerStrength$221136 = -32				; size = 4
_iMaxExperience$221144 = -28				; size = 4
_bIsGlobalXPAwarded$221145 = -21			; size = 1
_pkCity$221134 = -20					; size = 4
_iMaxCityHP$221135 = -16				; size = 4
_iDefenderStrength$221137 = -12				; size = 4
_iAttackerTotalDamageInflicted$221140 = -8		; size = 4
_iMaxHP$ = -4						; size = 4
_kAttacker$ = 8						; size = 4
_pkDefender$ = 12					; size = 4
_plot$ = 16						; size = 4
_pkCombatInfo$ = 20					; size = 4
?GenerateMeleeCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z PROC ; CvUnitCombat::GenerateMeleeCombatInfo, COMDAT

; 102  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH

; 103  : 	int iMaxHP = GC.getMAX_HIT_POINTS();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR _iMaxHP$[ebp], eax

; 104  : 
; 105  : 	pkCombatInfo->setUnit(BATTLE_UNIT_ATTACKER, &kAttacker);

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvCombatInfo::setUnit

; 106  : 	pkCombatInfo->setUnit(BATTLE_UNIT_DEFENDER, pkDefender);

	mov	edx, DWORD PTR _pkDefender$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvCombatInfo::setUnit

; 107  : 	pkCombatInfo->setPlot(&plot);

	mov	eax, DWORD PTR _plot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setPlot@CvCombatInfo@@QAEXPAVCvPlot@@@Z ; CvCombatInfo::setPlot

; 108  : 
; 109  : 	// Attacking a City
; 110  : 	if(plot.isCity())

	mov	ecx, DWORD PTR _plot$[ebp]
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	movzx	ecx, al
	test	ecx, ecx
	je	$LN20@GenerateMe

; 111  : 	{
; 112  : 		// Unit vs. City (non-ranged so the city will retaliate
; 113  : 		CvCity* pkCity = plot.getPlotCity();

	mov	ecx, DWORD PTR _plot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pkCity$221134[ebp], eax

; 114  : 		int iMaxCityHP = pkCity->GetMaxHitPoints();

	mov	ecx, DWORD PTR _pkCity$221134[ebp]
	call	?GetMaxHitPoints@CvCity@@QBEHXZ		; CvCity::GetMaxHitPoints
	mov	DWORD PTR _iMaxCityHP$221135[ebp], eax

; 115  : 
; 116  : 		int iAttackerStrength = kAttacker.GetMaxAttackStrength(kAttacker.plot(), &plot, NULL);

	push	0
	mov	edx, DWORD PTR _plot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetMaxAttackStrength@CvUnit@@QBEHPBVCvPlot@@0PBV1@@Z ; CvUnit::GetMaxAttackStrength
	mov	DWORD PTR _iAttackerStrength$221136[ebp], eax

; 117  : 		int iDefenderStrength = pkCity->getStrengthValue();

	push	0
	mov	ecx, DWORD PTR _pkCity$221134[ebp]
	call	?getStrengthValue@CvCity@@QBEH_N@Z	; CvCity::getStrengthValue
	mov	DWORD PTR _iDefenderStrength$221137[ebp], eax

; 118  : 
; 119  : 		int iAttackerDamageInflicted = kAttacker.getCombatDamage(iAttackerStrength, iDefenderStrength, kAttacker.getDamage(), /*bIncludeRand*/ true, /*bAttackerIsCity*/ false, /*bDefenderIsCity*/ true);

	push	1
	push	0
	push	1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	push	eax
	mov	eax, DWORD PTR _iDefenderStrength$221137[ebp]
	push	eax
	mov	ecx, DWORD PTR _iAttackerStrength$221136[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getCombatDamage@CvUnit@@QBEHHHH_N00@Z	; CvUnit::getCombatDamage
	mov	DWORD PTR _iAttackerDamageInflicted$221138[ebp], eax

; 120  : 		int iDefenderDamageInflicted = kAttacker.getCombatDamage(iDefenderStrength, iAttackerStrength, pkCity->getDamage(), /*bIncludeRand*/ true, /*bAttackerIsCity*/ true, /*bDefenderIsCity*/ false);

	push	0
	push	1
	push	1
	mov	ecx, DWORD PTR _pkCity$221134[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	push	eax
	mov	edx, DWORD PTR _iAttackerStrength$221136[ebp]
	push	edx
	mov	eax, DWORD PTR _iDefenderStrength$221137[ebp]
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getCombatDamage@CvUnit@@QBEHHHH_N00@Z	; CvUnit::getCombatDamage
	mov	DWORD PTR _iDefenderDamageInflicted$221139[ebp], eax

; 121  : 
; 122  : 		int iAttackerTotalDamageInflicted = iAttackerDamageInflicted + pkCity->getDamage();

	mov	ecx, DWORD PTR _pkCity$221134[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	add	eax, DWORD PTR _iAttackerDamageInflicted$221138[ebp]
	mov	DWORD PTR _iAttackerTotalDamageInflicted$221140[ebp], eax

; 123  : 		int iDefenderTotalDamageInflicted = iDefenderDamageInflicted + kAttacker.getDamage();

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	add	eax, DWORD PTR _iDefenderDamageInflicted$221139[ebp]
	mov	DWORD PTR _iDefenderTotalDamageInflicted$221141[ebp], eax

; 124  : 
; 125  : 		// Will both the attacker die, and the city fall? If so, the unit wins
; 126  : 		if(iAttackerTotalDamageInflicted >= iMaxCityHP && iDefenderTotalDamageInflicted >= iMaxHP)

	mov	ecx, DWORD PTR _iAttackerTotalDamageInflicted$221140[ebp]
	cmp	ecx, DWORD PTR _iMaxCityHP$221135[ebp]
	jl	SHORT $LN19@GenerateMe
	mov	edx, DWORD PTR _iDefenderTotalDamageInflicted$221141[ebp]
	cmp	edx, DWORD PTR _iMaxHP$[ebp]
	jl	SHORT $LN19@GenerateMe

; 127  : 		{
; 128  : 			iDefenderDamageInflicted = iMaxHP - kAttacker.getDamage() - 1;

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	ecx, DWORD PTR _iMaxHP$[ebp]
	sub	ecx, eax
	sub	ecx, 1
	mov	DWORD PTR _iDefenderDamageInflicted$221139[ebp], ecx

; 129  : 			iDefenderTotalDamageInflicted = iMaxHP - 1;

	mov	edx, DWORD PTR _iMaxHP$[ebp]
	sub	edx, 1
	mov	DWORD PTR _iDefenderTotalDamageInflicted$221141[ebp], edx
$LN19@GenerateMe:

; 130  : 		}
; 131  : 
; 132  : 		pkCombatInfo->setFinalDamage(BATTLE_UNIT_ATTACKER, iDefenderTotalDamageInflicted);

	mov	eax, DWORD PTR _iDefenderTotalDamageInflicted$221141[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFinalDamage

; 133  : 		pkCombatInfo->setDamageInflicted(BATTLE_UNIT_ATTACKER, iAttackerDamageInflicted);

	mov	ecx, DWORD PTR _iAttackerDamageInflicted$221138[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted

; 134  : 		pkCombatInfo->setFinalDamage(BATTLE_UNIT_DEFENDER, iAttackerTotalDamageInflicted);

	mov	edx, DWORD PTR _iAttackerTotalDamageInflicted$221140[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFinalDamage

; 135  : 		pkCombatInfo->setDamageInflicted(BATTLE_UNIT_DEFENDER, iDefenderDamageInflicted);

	mov	eax, DWORD PTR _iDefenderDamageInflicted$221139[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted

; 136  : 		
; 137  : 		int iExperience = /*5*/ GC.getEXPERIENCE_ATTACKING_CITY_MELEE();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7548
	mov	DWORD PTR _iExperience$221143[ebp], ecx

; 138  : 
; 139  : 		pkCombatInfo->setExperience(BATTLE_UNIT_ATTACKER, iExperience);

	mov	edx, DWORD PTR _iExperience$221143[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience

; 140  : 		int iMaxExperience = (GET_PLAYER(pkCity->getOwner()).isMinorCiv()) ? 30 : MAX_INT; // NQMP GJS - cap XP from fighting CS to 30

	mov	eax, DWORD PTR _pkCity$221134[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T223601[ebp], ecx
	mov	edx, DWORD PTR $T223601[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T223605[ebp], edx
	mov	ecx, DWORD PTR $T223605[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	and	eax, -2147483617			; 8000001fH
	add	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _iMaxExperience$221144[ebp], eax

; 141  : 		pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_ATTACKER, iMaxExperience);

	mov	ecx, DWORD PTR _iMaxExperience$221144[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed

; 142  : 		pkCombatInfo->setInBorders(BATTLE_UNIT_ATTACKER, plot.getOwner() == pkCity->getOwner());

	mov	edx, DWORD PTR _plot$[ebp]
	movsx	eax, BYTE PTR [edx+4]
	mov	DWORD PTR $T223609[ebp], eax
	mov	ecx, DWORD PTR _pkCity$221134[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T223618[ebp], edx
	mov	eax, DWORD PTR $T223609[ebp]
	cmp	eax, DWORD PTR $T223618[ebp]
	sete	cl
	movzx	edx, cl
	push	edx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders

; 143  : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 144  : 		bool bIsGlobalXPAwarded = !kAttacker.isBarbarian() && !GET_PLAYER(kAttacker.getOwner()).isMinorCiv() && !pkCity->isBarbarian() && !GET_PLAYER(pkCity->getOwner()).isMinorCiv();

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	eax, al
	test	eax, eax
	jne	$LN23@GenerateMe
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T223627[ebp], edx
	mov	eax, DWORD PTR $T223627[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T223631[ebp], eax
	mov	ecx, DWORD PTR $T223631[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN23@GenerateMe
	mov	ecx, DWORD PTR _pkCity$221134[ebp]
	call	?isBarbarian@CvCity@@QBE_NXZ		; CvCity::isBarbarian
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN23@GenerateMe
	mov	eax, DWORD PTR _pkCity$221134[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T223640[ebp], ecx
	mov	edx, DWORD PTR $T223640[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T223644[ebp], edx
	mov	ecx, DWORD PTR $T223644[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN23@GenerateMe
	mov	DWORD PTR tv231[ebp], 1
	jmp	SHORT $LN24@GenerateMe
$LN23@GenerateMe:
	mov	DWORD PTR tv231[ebp], 0
$LN24@GenerateMe:
	mov	cl, BYTE PTR tv231[ebp]
	mov	BYTE PTR _bIsGlobalXPAwarded$221145[ebp], cl

; 145  : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, bIsGlobalXPAwarded);

	movzx	edx, BYTE PTR _bIsGlobalXPAwarded$221145[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal

; 146  : #else
; 147  : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, !kAttacker.isBarbarian());
; 148  : #endif
; 149  : 
; 150  : 		pkCombatInfo->setExperience(BATTLE_UNIT_DEFENDER, 0);

	push	0
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience

; 151  : 		pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_DEFENDER, kAttacker.maxXPValue());

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?maxXPValue@CvUnit@@QBEHXZ		; CvUnit::maxXPValue
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed

; 152  : 		pkCombatInfo->setInBorders(BATTLE_UNIT_DEFENDER, plot.getOwner() == kAttacker.getOwner());

	mov	eax, DWORD PTR _plot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR $T223648[ebp], ecx
	mov	edx, DWORD PTR _kAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T223657[ebp], eax
	mov	ecx, DWORD PTR $T223648[ebp]
	cmp	ecx, DWORD PTR $T223657[ebp]
	sete	dl
	movzx	eax, dl
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders

; 153  : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 154  : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_DEFENDER, bIsGlobalXPAwarded);

	movzx	ecx, BYTE PTR _bIsGlobalXPAwarded$221145[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal

; 155  : #else
; 156  : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_DEFENDER, !pkCity->isBarbarian());
; 157  : #endif
; 158  : 
; 159  : 		pkCombatInfo->setAttackIsRanged(false);

	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setAttackIsRanged@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setAttackIsRanged

; 160  : 		pkCombatInfo->setDefenderRetaliates(true);

	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDefenderRetaliates@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setDefenderRetaliates

; 161  : 	}
; 162  : 	// Attacking a Unit
; 163  : 	else

	jmp	$LN18@GenerateMe
$LN20@GenerateMe:

; 164  : 	{
; 165  : 		// Unit vs. Unit
; 166  : 		CvAssert(pkDefender != NULL);
; 167  : 
; 168  : #ifdef NQ_HEAVY_CHARGE_DOWNHILL
; 169  : 		bool isAttackingFromHigherElevation;
; 170  : #endif
; 171  : 		int iDefenderStrength = pkDefender->GetMaxDefenseStrength(&plot, &kAttacker);

	push	0
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	mov	eax, DWORD PTR _plot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?GetMaxDefenseStrength@CvUnit@@QBEHPBVCvPlot@@PBV1@_N@Z ; CvUnit::GetMaxDefenseStrength
	mov	DWORD PTR _iDefenderStrength$221148[ebp], eax

; 172  : 		int iAttackerStrength = 0;

	mov	DWORD PTR _iAttackerStrength$221149[ebp], 0

; 173  : 		if(kAttacker.GetMaxRangedCombatStrength(NULL, /*pCity*/ NULL, true, true) > 0 && kAttacker.getDomainType() == DOMAIN_AIR)

	push	1
	push	1
	push	0
	push	0
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetMaxRangedCombatStrength@CvUnit@@QBEHPBV1@PBVCvCity@@_N2@Z ; CvUnit::GetMaxRangedCombatStrength
	test	eax, eax
	jle	SHORT $LN17@GenerateMe
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ ; CvUnit::getDomainType
	cmp	eax, 1
	jne	SHORT $LN17@GenerateMe

; 174  : 		{
; 175  : 			iAttackerStrength = kAttacker.GetMaxRangedCombatStrength(NULL, /*pCity*/ NULL, true, true);

	push	1
	push	1
	push	0
	push	0
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetMaxRangedCombatStrength@CvUnit@@QBEHPBV1@PBVCvCity@@_N2@Z ; CvUnit::GetMaxRangedCombatStrength
	mov	DWORD PTR _iAttackerStrength$221149[ebp], eax

; 176  : 			if(pkDefender->getDomainType() != DOMAIN_AIR)

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ ; CvUnit::getDomainType
	cmp	eax, 1
	je	SHORT $LN16@GenerateMe

; 177  : 			{
; 178  : 				iDefenderStrength /= 2;

	mov	eax, DWORD PTR _iDefenderStrength$221148[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _iDefenderStrength$221148[ebp], eax
$LN16@GenerateMe:

; 179  : 			}
; 180  : 		}
; 181  : 		else

	jmp	SHORT $LN15@GenerateMe
$LN17@GenerateMe:

; 182  : 		{
; 183  : 			iAttackerStrength = kAttacker.GetMaxAttackStrength(kAttacker.plot(), &plot, pkDefender);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	push	ecx
	mov	edx, DWORD PTR _plot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetMaxAttackStrength@CvUnit@@QBEHPBVCvPlot@@0PBV1@@Z ; CvUnit::GetMaxAttackStrength
	mov	DWORD PTR _iAttackerStrength$221149[ebp], eax
$LN15@GenerateMe:

; 184  : 		}
; 185  : 
; 186  : #ifndef AUI_UNIT_FIX_HEAVY_CHARGE_BONUS_INTEGRATED_INTO_STACKS
; 187  : #ifdef NQ_HEAVY_CHARGE_DOWNHILL
; 188  : 		isAttackingFromHigherElevation =
; 189  : 			(kAttacker.plot()->isMountain() && !pkDefender->plot()->isMountain()) ||
; 190  : 			(kAttacker.plot()->isHills() && pkDefender->plot()->isFlatlands());

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR $T223661[ebp], eax
	mov	eax, DWORD PTR $T223661[ebp]
	movsx	ecx, BYTE PTR [eax+5]
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN25@GenerateMe
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR $T223665[ebp], eax
	mov	eax, DWORD PTR $T223665[ebp]
	movsx	ecx, BYTE PTR [eax+5]
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN27@GenerateMe
$LN25@GenerateMe:
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR $T223669[ebp], eax
	mov	eax, DWORD PTR $T223669[ebp]
	movsx	ecx, BYTE PTR [eax+5]
	sub	ecx, 1
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN26@GenerateMe
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	ecx, eax
	call	?isFlatlands@CvPlot@@QBE_NXZ		; CvPlot::isFlatlands
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN27@GenerateMe
$LN26@GenerateMe:
	mov	DWORD PTR tv316[ebp], 0
	jmp	SHORT $LN28@GenerateMe
$LN27@GenerateMe:
	mov	DWORD PTR tv316[ebp], 1
$LN28@GenerateMe:
	mov	cl, BYTE PTR tv316[ebp]
	mov	BYTE PTR _isAttackingFromHigherElevation$221147[ebp], cl

; 191  : 		
; 192  : 		if ((kAttacker.IsCanHeavyCharge() || (kAttacker.GetHeavyChargeDownhill() > 0 && isAttackingFromHigherElevation))
; 193  : 			&& !pkDefender->CanFallBackFromMelee(kAttacker))

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?IsCanHeavyCharge@CvUnit@@QBE_NXZ	; CvUnit::IsCanHeavyCharge
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN13@GenerateMe
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetHeavyChargeDownhill@CvUnit@@QBEHXZ	; CvUnit::GetHeavyChargeDownhill
	test	eax, eax
	jle	SHORT $LN14@GenerateMe
	movzx	eax, BYTE PTR _isAttackingFromHigherElevation$221147[ebp]
	test	eax, eax
	je	SHORT $LN14@GenerateMe
$LN13@GenerateMe:
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?CanFallBackFromMelee@CvUnit@@IAE_NAAV1@@Z ; CvUnit::CanFallBackFromMelee
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN14@GenerateMe

; 194  : 		{
; 195  : 			iAttackerStrength = (iAttackerStrength * 150) / 100;

	mov	eax, DWORD PTR _iAttackerStrength$221149[ebp]
	imul	eax, 150				; 00000096H
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iAttackerStrength$221149[ebp], eax
$LN14@GenerateMe:

; 196  : 		}
; 197  : #else
; 198  : 		if (kAttacker.IsCanHeavyCharge() && !pkDefender->CanFallBackFromMelee(kAttacker))
; 199  : 		{
; 200  : 			iAttackerStrength = (iAttackerStrength * 150) / 100;
; 201  : 		}
; 202  : #endif
; 203  : #endif
; 204  : 
; 205  : 		int iAttackerDamageInflicted = kAttacker.getCombatDamage(iAttackerStrength, iDefenderStrength, kAttacker.getDamage(), /*bIncludeRand*/ true, /*bAttackerIsCity*/ false, /*bDefenderIsCity*/ false);

	push	0
	push	0
	push	1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	push	eax
	mov	edx, DWORD PTR _iDefenderStrength$221148[ebp]
	push	edx
	mov	eax, DWORD PTR _iAttackerStrength$221149[ebp]
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getCombatDamage@CvUnit@@QBEHHHH_N00@Z	; CvUnit::getCombatDamage
	mov	DWORD PTR _iAttackerDamageInflicted$221155[ebp], eax

; 206  : 		int iDefenderDamageInflicted = pkDefender->getCombatDamage(iDefenderStrength, iAttackerStrength, pkDefender->getDamage(), /*bIncludeRand*/ true, /*bAttackerIsCity*/ false, /*bDefenderIsCity*/ false);

	push	0
	push	0
	push	1
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	push	eax
	mov	ecx, DWORD PTR _iAttackerStrength$221149[ebp]
	push	ecx
	mov	edx, DWORD PTR _iDefenderStrength$221148[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getCombatDamage@CvUnit@@QBEHHHH_N00@Z	; CvUnit::getCombatDamage
	mov	DWORD PTR _iDefenderDamageInflicted$221156[ebp], eax

; 207  : 
; 208  : 		if(kAttacker.getDomainType() == DOMAIN_AIR && pkDefender->getDomainType() != DOMAIN_AIR)

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ ; CvUnit::getDomainType
	cmp	eax, 1
	jne	SHORT $LN12@GenerateMe
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ ; CvUnit::getDomainType
	cmp	eax, 1
	je	SHORT $LN12@GenerateMe

; 209  : 		{
; 210  : 			iAttackerDamageInflicted /= 2;

	mov	eax, DWORD PTR _iAttackerDamageInflicted$221155[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _iAttackerDamageInflicted$221155[ebp], eax

; 211  : 			iDefenderDamageInflicted /= 3;

	mov	eax, DWORD PTR _iDefenderDamageInflicted$221156[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _iDefenderDamageInflicted$221156[ebp], eax
$LN12@GenerateMe:

; 212  : 		}
; 213  : 
; 214  : 		int iAttackerTotalDamageInflicted = iAttackerDamageInflicted + pkDefender->getDamage();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	add	eax, DWORD PTR _iAttackerDamageInflicted$221155[ebp]
	mov	DWORD PTR _iAttackerTotalDamageInflicted$221158[ebp], eax

; 215  : 		int iDefenderTotalDamageInflicted = iDefenderDamageInflicted + kAttacker.getDamage();

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	add	eax, DWORD PTR _iDefenderDamageInflicted$221156[ebp]
	mov	DWORD PTR _iDefenderTotalDamageInflicted$221159[ebp], eax

; 216  : 
; 217  : 		// Will both units be killed by this? :o If so, take drastic corrective measures
; 218  : 		if(iAttackerTotalDamageInflicted >= iMaxHP && iDefenderTotalDamageInflicted >= iMaxHP)

	mov	edx, DWORD PTR _iAttackerTotalDamageInflicted$221158[ebp]
	cmp	edx, DWORD PTR _iMaxHP$[ebp]
	jl	SHORT $LN11@GenerateMe
	mov	eax, DWORD PTR _iDefenderTotalDamageInflicted$221159[ebp]
	cmp	eax, DWORD PTR _iMaxHP$[ebp]
	jl	SHORT $LN11@GenerateMe

; 219  : 		{
; 220  : 			// He who hath the least amount of damage survives with 1 HP left
; 221  : 			if(iAttackerTotalDamageInflicted > iDefenderTotalDamageInflicted)

	mov	ecx, DWORD PTR _iAttackerTotalDamageInflicted$221158[ebp]
	cmp	ecx, DWORD PTR _iDefenderTotalDamageInflicted$221159[ebp]
	jle	SHORT $LN10@GenerateMe

; 222  : 			{
; 223  : 				iDefenderDamageInflicted = iMaxHP - kAttacker.getDamage() - 1;

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	edx, DWORD PTR _iMaxHP$[ebp]
	sub	edx, eax
	sub	edx, 1
	mov	DWORD PTR _iDefenderDamageInflicted$221156[ebp], edx

; 224  : 				iDefenderTotalDamageInflicted = iMaxHP - 1;

	mov	eax, DWORD PTR _iMaxHP$[ebp]
	sub	eax, 1
	mov	DWORD PTR _iDefenderTotalDamageInflicted$221159[ebp], eax

; 225  : 				iAttackerTotalDamageInflicted = iMaxHP;

	mov	ecx, DWORD PTR _iMaxHP$[ebp]
	mov	DWORD PTR _iAttackerTotalDamageInflicted$221158[ebp], ecx

; 226  : 			}
; 227  : 			else

	jmp	SHORT $LN11@GenerateMe
$LN10@GenerateMe:

; 228  : 			{
; 229  : 				iAttackerDamageInflicted = iMaxHP - pkDefender->getDamage() - 1;

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	edx, DWORD PTR _iMaxHP$[ebp]
	sub	edx, eax
	sub	edx, 1
	mov	DWORD PTR _iAttackerDamageInflicted$221155[ebp], edx

; 230  : 				iAttackerTotalDamageInflicted = iMaxHP - 1;

	mov	eax, DWORD PTR _iMaxHP$[ebp]
	sub	eax, 1
	mov	DWORD PTR _iAttackerTotalDamageInflicted$221158[ebp], eax

; 231  : 				iDefenderTotalDamageInflicted = iMaxHP;

	mov	ecx, DWORD PTR _iMaxHP$[ebp]
	mov	DWORD PTR _iDefenderTotalDamageInflicted$221159[ebp], ecx
$LN11@GenerateMe:

; 232  : 			}
; 233  : 		}
; 234  : 
; 235  : 		pkCombatInfo->setFinalDamage(BATTLE_UNIT_ATTACKER, iDefenderTotalDamageInflicted);

	mov	edx, DWORD PTR _iDefenderTotalDamageInflicted$221159[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFinalDamage

; 236  : 		pkCombatInfo->setDamageInflicted(BATTLE_UNIT_ATTACKER, iAttackerDamageInflicted);

	mov	eax, DWORD PTR _iAttackerDamageInflicted$221155[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted

; 237  : 		pkCombatInfo->setFinalDamage(BATTLE_UNIT_DEFENDER, iAttackerTotalDamageInflicted);

	mov	ecx, DWORD PTR _iAttackerTotalDamageInflicted$221158[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFinalDamage

; 238  : 		pkCombatInfo->setDamageInflicted(BATTLE_UNIT_DEFENDER, iDefenderDamageInflicted);

	mov	edx, DWORD PTR _iDefenderDamageInflicted$221156[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted

; 239  : 
; 240  : 		// Fear Damage
; 241  : 		pkCombatInfo->setFearDamageInflicted(BATTLE_UNIT_ATTACKER, kAttacker.getCombatDamage(iAttackerStrength, iDefenderStrength, kAttacker.getDamage(), true, false, true));

	push	1
	push	0
	push	1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	push	eax
	mov	eax, DWORD PTR _iDefenderStrength$221148[ebp]
	push	eax
	mov	ecx, DWORD PTR _iAttackerStrength$221149[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getCombatDamage@CvUnit@@QBEHHHH_N00@Z	; CvUnit::getCombatDamage
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFearDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFearDamageInflicted

; 242  : 		//	pkCombatInfo->setFearDamageInflicted( BATTLE_UNIT_DEFENDER, getCombatDamage(iDefenderStrength, iAttackerStrength, pDefender->getDamage(), true, false, true) );
; 243  : 
; 244  : #ifndef NQM_PRUNING
; 245  : 		int iAttackerEffectiveStrength = iAttackerStrength * (iMaxHP - range(kAttacker.getDamage(), 0, iMaxHP-1)) / iMaxHP;

	mov	edx, DWORD PTR _iMaxHP$[ebp]
	sub	edx, 1
	mov	DWORD PTR $T223678[ebp], edx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	DWORD PTR $T223677[ebp], eax
	cmp	DWORD PTR $T223677[ebp], 0
	jge	SHORT $LN92@GenerateMe
	mov	DWORD PTR $T223679[ebp], 0
	jmp	SHORT $LN93@GenerateMe
	jmp	SHORT $LN93@GenerateMe
$LN92@GenerateMe:
	mov	eax, DWORD PTR $T223677[ebp]
	cmp	eax, DWORD PTR $T223678[ebp]
	jle	SHORT $LN90@GenerateMe
	mov	ecx, DWORD PTR $T223678[ebp]
	mov	DWORD PTR $T223679[ebp], ecx
	jmp	SHORT $LN93@GenerateMe
	jmp	SHORT $LN93@GenerateMe
$LN90@GenerateMe:
	mov	edx, DWORD PTR $T223677[ebp]
	mov	DWORD PTR $T223679[ebp], edx
$LN93@GenerateMe:
	mov	eax, DWORD PTR _iMaxHP$[ebp]
	sub	eax, DWORD PTR $T223679[ebp]
	imul	eax, DWORD PTR _iAttackerStrength$221149[ebp]
	cdq
	idiv	DWORD PTR _iMaxHP$[ebp]
	mov	DWORD PTR _iAttackerEffectiveStrength$221163[ebp], eax

; 246  : 		iAttackerEffectiveStrength = iAttackerEffectiveStrength > 0 ? iAttackerEffectiveStrength : 1;

	cmp	DWORD PTR _iAttackerEffectiveStrength$221163[ebp], 0
	jle	SHORT $LN29@GenerateMe
	mov	ecx, DWORD PTR _iAttackerEffectiveStrength$221163[ebp]
	mov	DWORD PTR tv417[ebp], ecx
	jmp	SHORT $LN30@GenerateMe
$LN29@GenerateMe:
	mov	DWORD PTR tv417[ebp], 1
$LN30@GenerateMe:
	mov	edx, DWORD PTR tv417[ebp]
	mov	DWORD PTR _iAttackerEffectiveStrength$221163[ebp], edx

; 247  : 		int iDefenderEffectiveStrength = iDefenderStrength * (iMaxHP - range(pkDefender->getDamage(), 0, iMaxHP-1)) / iMaxHP;

	mov	eax, DWORD PTR _iMaxHP$[ebp]
	sub	eax, 1
	mov	DWORD PTR $T223688[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	DWORD PTR $T223687[ebp], eax
	cmp	DWORD PTR $T223687[ebp], 0
	jge	SHORT $LN98@GenerateMe
	mov	DWORD PTR $T223689[ebp], 0
	jmp	SHORT $LN99@GenerateMe
	jmp	SHORT $LN99@GenerateMe
$LN98@GenerateMe:
	mov	ecx, DWORD PTR $T223687[ebp]
	cmp	ecx, DWORD PTR $T223688[ebp]
	jle	SHORT $LN96@GenerateMe
	mov	edx, DWORD PTR $T223688[ebp]
	mov	DWORD PTR $T223689[ebp], edx
	jmp	SHORT $LN99@GenerateMe
	jmp	SHORT $LN99@GenerateMe
$LN96@GenerateMe:
	mov	eax, DWORD PTR $T223687[ebp]
	mov	DWORD PTR $T223689[ebp], eax
$LN99@GenerateMe:
	mov	ecx, DWORD PTR _iMaxHP$[ebp]
	sub	ecx, DWORD PTR $T223689[ebp]
	mov	eax, ecx
	imul	eax, DWORD PTR _iDefenderStrength$221148[ebp]
	cdq
	idiv	DWORD PTR _iMaxHP$[ebp]
	mov	DWORD PTR _iDefenderEffectiveStrength$221164[ebp], eax

; 248  : 		iDefenderEffectiveStrength = iDefenderEffectiveStrength > 0 ? iDefenderEffectiveStrength : 1;

	cmp	DWORD PTR _iDefenderEffectiveStrength$221164[ebp], 0
	jle	SHORT $LN31@GenerateMe
	mov	edx, DWORD PTR _iDefenderEffectiveStrength$221164[ebp]
	mov	DWORD PTR tv429[ebp], edx
	jmp	SHORT $LN32@GenerateMe
$LN31@GenerateMe:
	mov	DWORD PTR tv429[ebp], 1
$LN32@GenerateMe:
	mov	eax, DWORD PTR tv429[ebp]
	mov	DWORD PTR _iDefenderEffectiveStrength$221164[ebp], eax

; 249  : #endif
; 250  : 
; 251  : 		//int iExperience = kAttacker.defenseXPValue();
; 252  : 		//iExperience = ((iExperience * iAttackerEffectiveStrength) / iDefenderEffectiveStrength); // is this right? looks like more for less [Jon: Yes, it's XP for the defender]
; 253  : 		//iExperience = range(iExperience, GC.getMIN_EXPERIENCE_PER_COMBAT(), GC.getMAX_EXPERIENCE_PER_COMBAT());
; 254  : 		int iExperience = /*4*/ GC.getEXPERIENCE_DEFENDING_UNIT_MELEE();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7516
	mov	DWORD PTR _iExperience$221165[ebp], ecx

; 255  : 		pkCombatInfo->setExperience(BATTLE_UNIT_DEFENDER, iExperience);

	mov	edx, DWORD PTR _iExperience$221165[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience

; 256  : 		pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_DEFENDER, kAttacker.maxXPValue());

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?maxXPValue@CvUnit@@QBEHXZ		; CvUnit::maxXPValue
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed

; 257  : 		pkCombatInfo->setInBorders(BATTLE_UNIT_DEFENDER, plot.getOwner() == pkDefender->getOwner());

	mov	eax, DWORD PTR _plot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR $T223696[ebp], ecx
	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T223705[ebp], eax
	mov	ecx, DWORD PTR $T223696[ebp]
	cmp	ecx, DWORD PTR $T223705[ebp]
	sete	dl
	movzx	eax, dl
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders

; 258  : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 259  : 		bool bIsGlobalXPAwarded = !kAttacker.isBarbarian() && !GET_PLAYER(kAttacker.getOwner()).isMinorCiv() && !pkDefender->isBarbarian() && !GET_PLAYER(pkDefender->getOwner()).isMinorCiv();

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN33@GenerateMe
	mov	edx, DWORD PTR _kAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T223714[ebp], eax
	mov	ecx, DWORD PTR $T223714[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T223718[ebp], ecx
	mov	ecx, DWORD PTR $T223718[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN33@GenerateMe
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN33@GenerateMe
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T223727[ebp], edx
	mov	eax, DWORD PTR $T223727[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T223731[ebp], eax
	mov	ecx, DWORD PTR $T223731[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN33@GenerateMe
	mov	DWORD PTR tv481[ebp], 1
	jmp	SHORT $LN34@GenerateMe
$LN33@GenerateMe:
	mov	DWORD PTR tv481[ebp], 0
$LN34@GenerateMe:
	mov	dl, BYTE PTR tv481[ebp]
	mov	BYTE PTR _bIsGlobalXPAwarded$221166[ebp], dl

; 260  : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_DEFENDER, bIsGlobalXPAwarded);

	movzx	eax, BYTE PTR _bIsGlobalXPAwarded$221166[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal

; 261  : #else
; 262  : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_DEFENDER, !kAttacker.isBarbarian());
; 263  : #endif
; 264  : 
; 265  : 		//iExperience = ((iExperience * iDefenderEffectiveStrength) / iAttackerEffectiveStrength);
; 266  : 		//iExperience = range(iExperience, GC.getMIN_EXPERIENCE_PER_COMBAT(), GC.getMAX_EXPERIENCE_PER_COMBAT());
; 267  : 		iExperience = /*6*/ GC.getEXPERIENCE_ATTACKING_UNIT_MELEE();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7512
	mov	DWORD PTR _iExperience$221165[ebp], ecx

; 268  : 		pkCombatInfo->setExperience(BATTLE_UNIT_ATTACKER, iExperience);

	mov	edx, DWORD PTR _iExperience$221165[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience

; 269  : 		pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_ATTACKER, pkDefender->maxXPValue());

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?maxXPValue@CvUnit@@QBEHXZ		; CvUnit::maxXPValue
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed

; 270  : 		pkCombatInfo->setInBorders(BATTLE_UNIT_ATTACKER, plot.getOwner() == kAttacker.getOwner());

	mov	eax, DWORD PTR _plot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR $T223738[ebp], ecx
	mov	edx, DWORD PTR _kAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T223747[ebp], eax
	mov	ecx, DWORD PTR $T223738[ebp]
	cmp	ecx, DWORD PTR $T223747[ebp]
	sete	dl
	movzx	eax, dl
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders

; 271  : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 272  : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, bIsGlobalXPAwarded);

	movzx	ecx, BYTE PTR _bIsGlobalXPAwarded$221166[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal

; 273  : #else
; 274  : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, !pkDefender->isBarbarian());
; 275  : #endif
; 276  : 
; 277  : 		pkCombatInfo->setAttackIsRanged(false);

	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setAttackIsRanged@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setAttackIsRanged

; 278  : 
; 279  : #ifdef NQ_HEAVY_CHARGE_DOWNHILL
; 280  : 		isAttackingFromHigherElevation = false;

	mov	BYTE PTR _isAttackingFromHigherElevation$221147[ebp], 0

; 281  : 		if (kAttacker.GetHeavyChargeDownhill() > 0)

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetHeavyChargeDownhill@CvUnit@@QBEHXZ	; CvUnit::GetHeavyChargeDownhill
	test	eax, eax
	jle	$LN8@GenerateMe

; 282  : 		{
; 283  : 			isAttackingFromHigherElevation = 
; 284  : 				(kAttacker.plot()->isMountain() && !pkDefender->plot()->isMountain()) ||
; 285  : 				(kAttacker.plot()->isHills() && pkDefender->plot()->isFlatlands());

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR $T223751[ebp], eax
	mov	edx, DWORD PTR $T223751[ebp]
	movsx	eax, BYTE PTR [edx+5]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN35@GenerateMe
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR $T223755[ebp], eax
	mov	edx, DWORD PTR $T223755[ebp]
	movsx	eax, BYTE PTR [edx+5]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN37@GenerateMe
$LN35@GenerateMe:
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR $T223759[ebp], eax
	mov	edx, DWORD PTR $T223759[ebp]
	movsx	eax, BYTE PTR [edx+5]
	sub	eax, 1
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN36@GenerateMe
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	ecx, eax
	call	?isFlatlands@CvPlot@@QBE_NXZ		; CvPlot::isFlatlands
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN37@GenerateMe
$LN36@GenerateMe:
	mov	DWORD PTR tv537[ebp], 0
	jmp	SHORT $LN38@GenerateMe
$LN37@GenerateMe:
	mov	DWORD PTR tv537[ebp], 1
$LN38@GenerateMe:
	mov	al, BYTE PTR tv537[ebp]
	mov	BYTE PTR _isAttackingFromHigherElevation$221147[ebp], al
$LN8@GenerateMe:

; 286  : 		}
; 287  : #endif
; 288  : 		bool bAdvance = true;

	mov	BYTE PTR _bAdvance$221168[ebp], 1

; 289  : 		if(plot.getNumDefenders(pkDefender->getOwner()) > 1)

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T223768[ebp], edx
	mov	eax, DWORD PTR $T223768[ebp]
	push	eax
	mov	ecx, DWORD PTR _plot$[ebp]
	call	?getNumDefenders@CvPlot@@QBEHW4PlayerTypes@@@Z ; CvPlot::getNumDefenders
	cmp	eax, 1
	jle	SHORT $LN7@GenerateMe

; 290  : 		{
; 291  : 			bAdvance = false;

	mov	BYTE PTR _bAdvance$221168[ebp], 0
	jmp	$LN6@GenerateMe
$LN7@GenerateMe:

; 292  : 		}
; 293  : 		else if(iAttackerTotalDamageInflicted >= iMaxHP && kAttacker.IsCaptureDefeatedEnemy() && kAttacker.AreUnitsOfSameType(*pkDefender))

	mov	ecx, DWORD PTR _iAttackerTotalDamageInflicted$221158[ebp]
	cmp	ecx, DWORD PTR _iMaxHP$[ebp]
	jl	SHORT $LN5@GenerateMe
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?IsCaptureDefeatedEnemy@CvUnit@@QBE_NXZ	; CvUnit::IsCaptureDefeatedEnemy
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@GenerateMe
	push	0
	mov	eax, DWORD PTR _pkDefender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?AreUnitsOfSameType@CvUnit@@QBE_NABV1@_N@Z ; CvUnit::AreUnitsOfSameType
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@GenerateMe

; 294  : 		{
; 295  : 			int iCaptureRoll = GC.getGame().getJonRandNum(100, "Capture Enemy Roll");

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T223772[ebp], edx
	push	OFFSET ??_C@_0BD@HLIALPAH@Capture?5Enemy?5Roll?$AA@
	push	100					; 00000064H
	mov	ecx, DWORD PTR $T223772[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	DWORD PTR _iCaptureRoll$221172[ebp], eax

; 296  : 
; 297  : 			if (iCaptureRoll < kAttacker.GetCaptureChance(pkDefender))

	mov	eax, DWORD PTR _pkDefender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetCaptureChance@CvUnit@@QAEHPAV1@@Z	; CvUnit::GetCaptureChance
	cmp	DWORD PTR _iCaptureRoll$221172[ebp], eax
	jge	SHORT $LN4@GenerateMe

; 298  : 			{
; 299  : 				bAdvance = false;

	mov	BYTE PTR _bAdvance$221168[ebp], 0

; 300  : 				pkCombatInfo->setDefenderCaptured(true);

	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDefenderCaptured@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setDefenderCaptured
$LN4@GenerateMe:

; 301  : 			}
; 302  : 		}
; 303  : #ifdef NQ_HEAVY_CHARGE_DOWNHILL
; 304  : 		else if ((kAttacker.IsCanHeavyCharge() || (kAttacker.GetHeavyChargeDownhill() > 0 && isAttackingFromHigherElevation))

	jmp	SHORT $LN6@GenerateMe
$LN5@GenerateMe:

; 305  : 			&& !pkDefender->isDelayedDeath() && (iAttackerDamageInflicted > iDefenderDamageInflicted) )

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?IsCanHeavyCharge@CvUnit@@QBE_NXZ	; CvUnit::IsCanHeavyCharge
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@GenerateMe
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetHeavyChargeDownhill@CvUnit@@QBEHXZ	; CvUnit::GetHeavyChargeDownhill
	test	eax, eax
	jle	SHORT $LN6@GenerateMe
	movzx	edx, BYTE PTR _isAttackingFromHigherElevation$221147[ebp]
	test	edx, edx
	je	SHORT $LN6@GenerateMe
$LN1@GenerateMe:
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?isDelayedDeath@CvUnit@@QBE_NXZ		; CvUnit::isDelayedDeath
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@GenerateMe
	mov	ecx, DWORD PTR _iAttackerDamageInflicted$221155[ebp]
	cmp	ecx, DWORD PTR _iDefenderDamageInflicted$221156[ebp]
	jle	SHORT $LN6@GenerateMe

; 306  : #else
; 307  : 		else if (kAttacker.IsCanHeavyCharge() && !pkDefender->isDelayedDeath() && (iAttackerDamageInflicted > iDefenderDamageInflicted) )
; 308  : #endif
; 309  : 		{
; 310  : 			bAdvance = true;

	mov	BYTE PTR _bAdvance$221168[ebp], 1
$LN6@GenerateMe:

; 311  : 		}
; 312  : 
; 313  : 		pkCombatInfo->setAttackerAdvances(bAdvance);

	movzx	edx, BYTE PTR _bAdvance$221168[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setAttackerAdvances@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setAttackerAdvances

; 314  : 		pkCombatInfo->setDefenderRetaliates(true);

	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDefenderRetaliates@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setDefenderRetaliates
$LN18@GenerateMe:

; 315  : 	}
; 316  : 
; 317  : 	GC.GetEngineUserInterface()->setDirty(UnitInfo_DIRTY_BIT, true);

	mov	eax, DWORD PTR $T223776[ebp]
	mov	DWORD PTR tv593[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv593[ebp], ecx
	push	1
	push	19					; 00000013H
	mov	edx, DWORD PTR tv593[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv593[ebp]
	mov	edx, DWORD PTR [eax+260]
	call	edx

; 318  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateMeleeCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z ENDP ; CvUnitCombat::GenerateMeleeCombatInfo
_TEXT	ENDS
PUBLIC	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ		; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	??_C@_0CB@ENHCCJB@TXT_KEY_MISC_ENEMY_UNIT_WITHDRAW@ ; `string'
PUBLIC	??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z ; GetLocalizedText<char const *,int,char const *,int>
PUBLIC	??_C@_0BP@HNPBMJOC@TXT_KEY_MISC_YOU_UNIT_WITHDRAW?$AA@ ; `string'
PUBLIC	??_C@_0BC@DCAPLCAP@TXT_KEY_UNIT_LOST?$AA@	; `string'
PUBLIC	??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z ; GetLocalizedText<char const *,char const *,char const *,int>
PUBLIC	??_C@_0CE@NGODCANA@TXT_KEY_MISC_YOU_UNIT_WAS_DESTRO@ ; `string'
PUBLIC	??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z ; GetLocalizedText<char const *,char const *,int>
PUBLIC	??_C@_0CM@LNPONPCG@TXT_KEY_MISC_YOU_UNIT_WAS_DESTRO@ ; `string'
PUBLIC	??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z ; GetLocalizedText<char const *,int,char const *>
PUBLIC	??_C@_0CG@MAFGHNID@TXT_KEY_MISC_YOU_UNIT_DESTROYED_@ ; `string'
PUBLIC	?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z ; CvUnitCombat::ApplyPostCombatTraitEffects
PUBLIC	??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z ; GetLocalizedText<char const *,int,int,char const *,char const *>
PUBLIC	??_C@_0CD@DLJIGMBM@TXT_KEY_MISC_YOU_KILLED_ENEMY_UN@ ; `string'
PUBLIC	??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z ; GetLocalizedText<char const *,char const *,int,int>
PUBLIC	??_C@_0CF@KKNLAFFL@TXT_KEY_MISC_YOU_UNIT_DIED_ATTAC@ ; `string'
PUBLIC	__real@bf800000
PUBLIC	__real@00000000
PUBLIC	__$ArrayPad$
PUBLIC	?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveMeleeCombat
EXTRN	?CombatResolved@CvTacticalAI@@QAEXPAX_N1@Z:PROC	; CvTacticalAI::CombatResolved
EXTRN	?GetTacticalAI@CvPlayer@@QBEPAVCvTacticalAI@@XZ:PROC ; CvPlayer::GetTacticalAI
EXTRN	?ShowDamageDeltaText@CvUnit@@SAXHPAVCvPlot@@MPBVCvString@@@Z:PROC ; CvUnit::ShowDamageDeltaText
EXTRN	?IsDead@CvUnit@@QBE_NXZ:PROC			; CvUnit::IsDead
EXTRN	?finishMoves@CvUnit@@QAEXXZ:PROC		; CvUnit::finishMoves
EXTRN	?isOutOfAttacks@CvUnit@@QBE_NXZ:PROC		; CvUnit::isOutOfAttacks
EXTRN	?canMoveAfterAttacking@CvUnit@@QBE_NXZ:PROC	; CvUnit::canMoveAfterAttacking
EXTRN	?IsSelected@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsSelected
EXTRN	?isBlitz@CvUnit@@QBE_NXZ:PROC			; CvUnit::isBlitz
EXTRN	?canMove@CvUnit@@QBE_NXZ:PROC			; CvUnit::canMove
EXTRN	?changeMoves@CvUnit@@QAEXH@Z:PROC		; CvUnit::changeMoves
EXTRN	?movementCost@CvPlot@@QBEHPBVCvUnit@@PBV1@H@Z:PROC ; CvPlot::movementCost
EXTRN	?getMoves@CvUnit@@QBEHXZ:PROC			; CvUnit::getMoves
EXTRN	?PublishQueuedVisualizationMoves@CvUnit@@IAEXXZ:PROC ; CvUnit::PublishQueuedVisualizationMoves
EXTRN	?UnitMove@CvUnit@@QAE_NPAVCvPlot@@_NPAV1@1@Z:PROC ; CvUnit::UnitMove
EXTRN	?move@CvUnit@@QAEXAAVCvPlot@@_N@Z:PROC		; CvUnit::move
EXTRN	?getAttackerAdvancedVisualization@CvCombatInfo@@QBE_NXZ:PROC ; CvCombatInfo::getAttackerAdvancedVisualization
EXTRN	?getNumVisibleEnemyDefenders@CvPlot@@QBEHPBVCvUnit@@@Z:PROC ; CvPlot::getNumVisibleEnemyDefenders
EXTRN	?getAttackerAdvances@CvCombatInfo@@QBE_NXZ:PROC	; CvCombatInfo::getAttackerAdvances
EXTRN	?DoFallBackFromMelee@CvUnit@@IAE_NAAV1@@Z:PROC	; CvUnit::DoFallBackFromMelee
EXTRN	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z:PROC	; CvUnit::kill
EXTRN	?isSuicide@CvUnit@@QBE_NXZ:PROC			; CvUnit::isSuicide
EXTRN	?ClearMissionQueue@CvUnit@@QAEXH@Z:PROC		; CvUnit::ClearMissionQueue
EXTRN	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z:PROC	; CvUnit::setCombatUnit
EXTRN	?DoTestBarbarianThreatToMinorsWithThisUnitsDeath@CvUnit@@QAEXW4PlayerTypes@@@Z:PROC ; CvUnit::DoTestBarbarianThreatToMinorsWithThisUnitsDeath
EXTRN	?SetCapturedAsIs@CvUnit@@QAEX_N@Z:PROC		; CvUnit::SetCapturedAsIs
EXTRN	?setCapturingPlayer@CvUnit@@QAEXW4PlayerTypes@@@Z:PROC ; CvUnit::setCapturingPlayer
EXTRN	?getDefenderCaptured@CvCombatInfo@@QBE_NXZ:PROC	; CvCombatInfo::getDefenderCaptured
EXTRN	__imp_??1String@Localization@@UAE@XZ:PROC
EXTRN	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z:PROC ; CvNotifications::Add
EXTRN	__imp_?toUTF8@String@Localization@@QAEPBDXZ:PROC
EXTRN	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ:PROC	; CvUnit::getUnitType
EXTRN	__imp_?Lookup@Localization@@YA?AVString@1@PBD@Z:PROC
EXTRN	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ:PROC ; CvPlayer::GetNotifications
EXTRN	?getVisualOwner@CvUnit@@QBE?AW4PlayerTypes@@W4TeamTypes@@@Z:PROC ; CvUnit::getVisualOwner
EXTRN	?testPromotionReady@CvUnit@@QAEXXZ:PROC		; CvUnit::testPromotionReady
EXTRN	?getVisualCivAdjective@CvUnit@@QBEPBDW4TeamTypes@@@Z:PROC ; CvUnit::getVisualCivAdjective
EXTRN	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ:PROC	; CvUnit::getTeam
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	?getNameKey@CvUnit@@QBEPBDXZ:PROC		; CvUnit::getNameKey
EXTRN	?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z:PROC ; CvGlobals::WrapUnitPointer
EXTRN	?KilledUnitWithUnit@CvPlayerAchievements@@QAEXPAVCvUnit@@0@Z:PROC ; CvPlayerAchievements::KilledUnitWithUnit
EXTRN	?AttackedUnitWithUnit@CvPlayerAchievements@@QAEXPAVCvUnit@@0@Z:PROC ; CvPlayerAchievements::AttackedUnitWithUnit
EXTRN	?changeExperience@CvUnit@@QAEXHH_N00@Z:PROC	; CvUnit::changeExperience
EXTRN	?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z:PROC ; CvCombatInfo::getExperience
EXTRN	?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z:PROC ; CvCombatInfo::getMaxExperienceAllowed
EXTRN	?getInBorders@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z:PROC ; CvCombatInfo::getInBorders
EXTRN	?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z:PROC ; CvCombatInfo::getUpdateGlobal
EXTRN	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z:PROC ; CvUnit::changeDamage
EXTRN	?isGameMultiPlayer@CvGame@@QBE_NXZ:PROC		; CvGame::isGameMultiPlayer
EXTRN	?isHuman@CvUnit@@QBE_NXZ:PROC			; CvUnit::isHuman
EXTRN	?GetCurrHitPoints@CvUnit@@QBEHXZ:PROC		; CvUnit::GetCurrHitPoints
EXTRN	?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z:PROC ; CvCombatInfo::getDamageInflicted
EXTRN	?IsCanDefend@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::IsCanDefend
EXTRN	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ:PROC ; CvGame::getActivePlayer
EXTRN	?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ:PROC	; CvCombatInfo::getPlot
EXTRN	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z:PROC ; CvCombatInfo::getUnit
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0CB@ENHCCJB@TXT_KEY_MISC_ENEMY_UNIT_WITHDRAW@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CB@ENHCCJB@TXT_KEY_MISC_ENEMY_UNIT_WITHDRAW@ DB 'TXT_KEY_MISC_ENEM'
	DB	'Y_UNIT_WITHDRAW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HNPBMJOC@TXT_KEY_MISC_YOU_UNIT_WITHDRAW?$AA@
CONST	SEGMENT
??_C@_0BP@HNPBMJOC@TXT_KEY_MISC_YOU_UNIT_WITHDRAW?$AA@ DB 'TXT_KEY_MISC_Y'
	DB	'OU_UNIT_WITHDRAW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DCAPLCAP@TXT_KEY_UNIT_LOST?$AA@
CONST	SEGMENT
??_C@_0BC@DCAPLCAP@TXT_KEY_UNIT_LOST?$AA@ DB 'TXT_KEY_UNIT_LOST', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NGODCANA@TXT_KEY_MISC_YOU_UNIT_WAS_DESTRO@
CONST	SEGMENT
??_C@_0CE@NGODCANA@TXT_KEY_MISC_YOU_UNIT_WAS_DESTRO@ DB 'TXT_KEY_MISC_YOU'
	DB	'_UNIT_WAS_DESTROYED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LNPONPCG@TXT_KEY_MISC_YOU_UNIT_WAS_DESTRO@
CONST	SEGMENT
??_C@_0CM@LNPONPCG@TXT_KEY_MISC_YOU_UNIT_WAS_DESTRO@ DB 'TXT_KEY_MISC_YOU'
	DB	'_UNIT_WAS_DESTROYED_UNKNOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MAFGHNID@TXT_KEY_MISC_YOU_UNIT_DESTROYED_@
CONST	SEGMENT
??_C@_0CG@MAFGHNID@TXT_KEY_MISC_YOU_UNIT_DESTROYED_@ DB 'TXT_KEY_MISC_YOU'
	DB	'_UNIT_DESTROYED_ENEMY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DLJIGMBM@TXT_KEY_MISC_YOU_KILLED_ENEMY_UN@
CONST	SEGMENT
??_C@_0CD@DLJIGMBM@TXT_KEY_MISC_YOU_KILLED_ENEMY_UN@ DB 'TXT_KEY_MISC_YOU'
	DB	'_KILLED_ENEMY_UNIT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KKNLAFFL@TXT_KEY_MISC_YOU_UNIT_DIED_ATTAC@
CONST	SEGMENT
??_C@_0CF@KKNLAFFL@TXT_KEY_MISC_YOU_UNIT_DIED_ATTAC@ DB 'TXT_KEY_MISC_YOU'
	DB	'_UNIT_DIED_ATTACKING', 00H			; `string'
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$8
	DD	04H
	DD	FLAT:__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$9
	DD	04H
	DD	FLAT:__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$10
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$11
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$12
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$14
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
_TEXT	SEGMENT
tv915 = -960						; size = 4
tv893 = -956						; size = 4
tv868 = -952						; size = 4
tv1227 = -948						; size = 4
tv815 = -944						; size = 4
tv788 = -940						; size = 4
tv692 = -936						; size = 4
tv1236 = -932						; size = 4
tv645 = -928						; size = 4
tv583 = -924						; size = 4
tv550 = -920						; size = 4
tv1235 = -916						; size = 4
tv1234 = -912						; size = 4
tv444 = -908						; size = 4
tv1233 = -904						; size = 4
tv414 = -900						; size = 4
tv358 = -896						; size = 4
tv66 = -892						; size = 4
tv305 = -888						; size = 4
tv974 = -884						; size = 4
tv274 = -880						; size = 4
tv157 = -876						; size = 4
$T224425 = -872						; size = 4
$T224421 = -868						; size = 4
$T224412 = -864						; size = 4
_inst$224407 = -860					; size = 4
$T224403 = -856						; size = 4
$T224391 = -852						; size = 4
_inst$224386 = -848					; size = 4
$T224382 = -844						; size = 4
$T224373 = -840						; size = 4
__Ptr$224372 = -836					; size = 4
$T224368 = -832						; size = 4
__Cvtptr$224366 = -828					; size = 4
__Ans$224367 = -824					; size = 4
$T224357 = -820						; size = 4
$T224350 = -816						; size = 4
$T224344 = -812						; size = 4
$T224340 = -808						; size = 4
$T224336 = -804						; size = 4
$T224332 = -800						; size = 4
$T224328 = -796						; size = 4
$T224319 = -792						; size = 4
$T224310 = -788						; size = 4
$T224301 = -784						; size = 4
$T224297 = -780						; size = 4
$T224293 = -776						; size = 4
$T224285 = -772						; size = 4
$T224281 = -768						; size = 4
$T224272 = -764						; size = 4
$T224263 = -760						; size = 4
$T224259 = -756						; size = 4
$T224255 = -752						; size = 4
$T224247 = -748						; size = 4
$T224243 = -744						; size = 4
_inst$224233 = -740					; size = 4
$T224230 = -736						; size = 4
$T224220 = -732						; size = 4
$T224211 = -728						; size = 4
$T224207 = -724						; size = 4
$T224198 = -720						; size = 4
$T224189 = -716						; size = 4
$T224180 = -712						; size = 4
$T224176 = -708						; size = 4
$T224167 = -704						; size = 4
$T224158 = -700						; size = 4
$T224154 = -696						; size = 4
$T224150 = -692						; size = 4
$T224146 = -688						; size = 4
$T224133 = -684						; size = 4
$T224125 = -680						; size = 4
$T224121 = -676						; size = 4
$T224112 = -672						; size = 4
$T224103 = -668						; size = 4
$T224099 = -664						; size = 4
$T224095 = -660						; size = 4
$T224087 = -656						; size = 4
$T224083 = -652						; size = 4
$T224071 = -648						; size = 4
_inst$224067 = -644					; size = 4
$T224063 = -640						; size = 4
$T224053 = -636						; size = 4
__Ptr$224051 = -632					; size = 4
$T224048 = -628						; size = 4
__Cvtptr$224046 = -624					; size = 4
__Ans$224047 = -620					; size = 4
_inst$224034 = -616					; size = 4
$T224030 = -612						; size = 4
$T224020 = -608						; size = 4
$T224011 = -604						; size = 4
$T224007 = -600						; size = 4
$T224003 = -596						; size = 4
$T223995 = -592						; size = 4
$T223991 = -588						; size = 4
$T223982 = -584						; size = 4
$T223973 = -580						; size = 4
$T223969 = -576						; size = 4
$T223965 = -572						; size = 4
$T223957 = -568						; size = 4
$T223953 = -564						; size = 4
$T223941 = -560						; size = 4
_inst$223936 = -556					; size = 4
$T223932 = -552						; size = 4
$T223923 = -548						; size = 4
__Ptr$223922 = -544					; size = 4
$T223918 = -540						; size = 4
__Cvtptr$223916 = -536					; size = 4
__Ans$223917 = -532					; size = 4
$T223901 = -528						; size = 4
$T223886 = -524						; size = 4
$T223877 = -520						; size = 4
$T223873 = -516						; size = 4
$T223869 = -512						; size = 4
$T223860 = -508						; size = 4
$T223851 = -504						; size = 4
$T223847 = -500						; size = 4
$T223843 = -496						; size = 4
$T223839 = -492						; size = 4
$T223816 = -488						; size = 4
$T223815 = -484						; size = 4
$T223814 = -480						; size = 4
$T223813 = -476						; size = 4
$T223806 = -472						; size = 28
$T223805 = -444						; size = 4
$T223804 = -440						; size = 4
$T223803 = -436						; size = 28
$T223802 = -408						; size = 4
$T223801 = -404						; size = 4
$T223800 = -400						; size = 28
$T223799 = -372						; size = 4
$T223798 = -368						; size = 4
$T223797 = -364						; size = 4
$T223796 = -360						; size = 28
$T223795 = -332						; size = 4
$T223794 = -328						; size = 4
$T223793 = -324						; size = 28
$T223792 = -296						; size = 4
$T223791 = -292						; size = 4
$T223790 = -288						; size = 4
$T223789 = -284						; size = 4
$T223788 = -280						; size = 28
$T223787 = -252						; size = 4
$T223786 = -248						; size = 4
$T223785 = -244						; size = 4
$T223784 = -240						; size = 28
$T223783 = -212						; size = 4
$T223782 = -208						; size = 4
$T223781 = -204						; size = 4
$T223780 = -200						; size = 4
_pDllAttacker$221411 = -196				; size = 4
_bCanAdvance$221399 = -190				; size = 1
_isAttackingFromHigherElevation$221395 = -189		; size = 1
_strSummary$221356 = -188				; size = 80
_pNotification$221354 = -104				; size = 4
_pDefender$221305 = -100				; size = 4
_kDefenderOwner$221199 = -96				; size = 4
_pAttacker$221247 = -92					; size = 4
_iDefenderDamageInflicted$221194 = -88			; size = 4
_iAttackerFearDamageInflicted$221195 = -84		; size = 4
_iAttackerDamageInflicted$221193 = -80			; size = 4
_kAttackerOwner$221197 = -76				; size = 4
_iActivePlayerID$ = -72					; size = 4
_pkTargetPlot$ = -68					; size = 4
_strBuffer$ = -64					; size = 28
__$ArrayPad$ = -36					; size = 4
_bDefenderDead$ = -29					; size = 1
_iAttackerDamageDelta$ = -28				; size = 4
_pkDefender$ = -24					; size = 4
_pkAttacker$ = -20					; size = 4
_bAttackerDead$ = -14					; size = 1
_bAttackerDidMoreDamage$ = -13				; size = 1
__$EHRec$ = -12						; size = 12
_kCombatInfo$ = 8					; size = 4
_uiParentEventID$ = 12					; size = 4
?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z PROC ; CvUnitCombat::ResolveMeleeCombat, COMDAT

; 322  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 948				; 000003b4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 323  : 	// After combat stuff
; 324  : 	CvString strBuffer;

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 325  : 	bool bAttackerDead = false;

	mov	BYTE PTR _bAttackerDead$[ebp], 0

; 326  : 	bool bDefenderDead = false;

	mov	BYTE PTR _bDefenderDead$[ebp], 0

; 327  : 	int iAttackerDamageDelta = 0;

	mov	DWORD PTR _iAttackerDamageDelta$[ebp], 0

; 328  : 
; 329  : 	CvUnit* pkAttacker = kCombatInfo.getUnit(BATTLE_UNIT_ATTACKER);

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pkAttacker$[ebp], eax

; 330  : 	CvUnit* pkDefender = kCombatInfo.getUnit(BATTLE_UNIT_DEFENDER);

	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pkDefender$[ebp], eax

; 331  : 	CvPlot* pkTargetPlot = kCombatInfo.getPlot();

	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ	; CvCombatInfo::getPlot
	mov	DWORD PTR _pkTargetPlot$[ebp], eax

; 332  : 	if(!pkTargetPlot && pkDefender)

	cmp	DWORD PTR _pkTargetPlot$[ebp], 0
	jne	SHORT $LN42@ResolveMel
	cmp	DWORD PTR _pkDefender$[ebp], 0
	je	SHORT $LN42@ResolveMel

; 333  : 		pkTargetPlot = pkDefender->plot();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR _pkTargetPlot$[ebp], eax
$LN42@ResolveMel:

; 334  : 
; 335  : 	CvAssert_Debug(pkAttacker && pkDefender && pkTargetPlot);
; 336  : 
; 337  : 	int iActivePlayerID = GC.getGame().getActivePlayer();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T223839[ebp], eax
	mov	ecx, DWORD PTR $T223839[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	mov	DWORD PTR _iActivePlayerID$[ebp], eax

; 338  : 
; 339  : 	bool bAttackerDidMoreDamage = false;

	mov	BYTE PTR _bAttackerDidMoreDamage$[ebp], 0

; 340  : 
; 341  : 	if(pkAttacker != NULL && pkDefender != NULL && pkTargetPlot != NULL &&
; 342  : 	        pkDefender->IsCanDefend()) 		// Did the defender actually defend?

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	$LN21@ResolveMel
	cmp	DWORD PTR _pkDefender$[ebp], 0
	je	$LN21@ResolveMel
	cmp	DWORD PTR _pkTargetPlot$[ebp], 0
	je	$LN21@ResolveMel
	push	0
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?IsCanDefend@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::IsCanDefend
	movzx	ecx, al
	test	ecx, ecx
	je	$LN21@ResolveMel

; 343  : 	{
; 344  : 		// Internal variables
; 345  : 		int iAttackerDamageInflicted = kCombatInfo.getDamageInflicted(BATTLE_UNIT_ATTACKER);

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getDamageInflicted
	mov	DWORD PTR _iAttackerDamageInflicted$221193[ebp], eax

; 346  : 		int iDefenderDamageInflicted = kCombatInfo.getDamageInflicted(BATTLE_UNIT_DEFENDER);

	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getDamageInflicted
	mov	DWORD PTR _iDefenderDamageInflicted$221194[ebp], eax

; 347  : 		int iAttackerFearDamageInflicted = 0;//pInfo->getFearDamageInflicted( BATTLE_UNIT_ATTACKER );

	mov	DWORD PTR _iAttackerFearDamageInflicted$221195[ebp], 0

; 348  : 
; 349  : 		bAttackerDidMoreDamage = iAttackerDamageInflicted > iDefenderDamageInflicted;

	mov	edx, DWORD PTR _iAttackerDamageInflicted$221193[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR _iDefenderDamageInflicted$221194[ebp]
	setg	al
	mov	BYTE PTR _bAttackerDidMoreDamage$[ebp], al

; 350  : 
; 351  : 		//One Hit
; 352  : 		if(pkDefender->GetCurrHitPoints() == GC.getMAX_HIT_POINTS() && iAttackerDamageInflicted >= pkDefender->GetCurrHitPoints()  // Defender at full hit points and will the damage be more than the full hit points?
; 353  : 		        && pkAttacker->isHuman() && !GC.getGame().isGameMultiPlayer())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T223843[ebp], ecx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?GetCurrHitPoints@CvUnit@@QBEHXZ	; CvUnit::GetCurrHitPoints
	cmp	eax, DWORD PTR $T223843[ebp]
	jne	SHORT $LN40@ResolveMel
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?GetCurrHitPoints@CvUnit@@QBEHXZ	; CvUnit::GetCurrHitPoints
	cmp	DWORD PTR _iAttackerDamageInflicted$221193[ebp], eax
	jl	SHORT $LN40@ResolveMel
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isHuman@CvUnit@@QBE_NXZ		; CvUnit::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN40@ResolveMel
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T223847[ebp], eax
	mov	ecx, DWORD PTR $T223847[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN40@ResolveMel

; 354  : 		{
; 355  : 			gDLL->UnlockAchievement(ACHIEVEMENT_ONEHITKILL);

	mov	edx, DWORD PTR $T223851[ebp]
	mov	DWORD PTR tv157[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv157[ebp], eax
	push	60					; 0000003cH
	mov	ecx, DWORD PTR tv157[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv157[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax
$LN40@ResolveMel:

; 356  : 		}
; 357  : 
; 358  : 		pkDefender->changeDamage(iAttackerDamageInflicted, pkAttacker->getOwner());

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T223860[ebp], edx
	push	0
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR $T223860[ebp]
	push	eax
	mov	ecx, DWORD PTR _iAttackerDamageInflicted$221193[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::changeDamage

; 359  : 		iAttackerDamageDelta = pkAttacker->changeDamage(iDefenderDamageInflicted, pkDefender->getOwner(), -1.f);		// Signal that we don't want the popup text.  It will be added later when the unit is at its final location

	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T223869[ebp], eax
	push	0
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR $T223869[ebp]
	push	ecx
	mov	edx, DWORD PTR _iDefenderDamageInflicted$221194[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::changeDamage
	mov	DWORD PTR _iAttackerDamageDelta$[ebp], eax

; 360  : 
; 361  : 		// Update experience for both sides.
; 362  : 		pkDefender->changeExperience(
; 363  : 		    kCombatInfo.getExperience(BATTLE_UNIT_DEFENDER),
; 364  : 		    kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_DEFENDER),
; 365  : 		    true,
; 366  : 		    kCombatInfo.getInBorders(BATTLE_UNIT_DEFENDER),
; 367  : 		    kCombatInfo.getUpdateGlobal(BATTLE_UNIT_DEFENDER));

	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getUpdateGlobal
	movzx	eax, al
	push	eax
	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getInBorders@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getInBorders
	movzx	ecx, al
	push	ecx
	push	1
	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getMaxExperienceAllowed
	push	eax
	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getExperience
	push	eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?changeExperience@CvUnit@@QAEXHH_N00@Z	; CvUnit::changeExperience

; 368  : 
; 369  : 		pkAttacker->changeExperience(
; 370  : 		    kCombatInfo.getExperience(BATTLE_UNIT_ATTACKER),
; 371  : 		    kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_ATTACKER),
; 372  : 		    true,
; 373  : 		    kCombatInfo.getInBorders(BATTLE_UNIT_ATTACKER),
; 374  : 		    kCombatInfo.getUpdateGlobal(BATTLE_UNIT_ATTACKER));

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getUpdateGlobal
	movzx	edx, al
	push	edx
	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getInBorders@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getInBorders
	movzx	eax, al
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getMaxExperienceAllowed
	push	eax
	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getExperience
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?changeExperience@CvUnit@@QAEXHH_N00@Z	; CvUnit::changeExperience

; 375  : 
; 376  : 		// Anyone eat it?
; 377  : 		bAttackerDead = (pkAttacker->getDamage() >= GC.getMAX_HIT_POINTS());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T223873[ebp], ecx
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	xor	edx, edx
	cmp	eax, DWORD PTR $T223873[ebp]
	setge	dl
	mov	BYTE PTR _bAttackerDead$[ebp], dl

; 378  : 		bDefenderDead = (pkDefender->getDamage() >= GC.getMAX_HIT_POINTS());

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T223877[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T223877[ebp]
	setge	cl
	mov	BYTE PTR _bDefenderDead$[ebp], cl

; 379  : 
; 380  : 		CvPlayerAI& kAttackerOwner = GET_PLAYER(pkAttacker->getOwner());

	mov	edx, DWORD PTR _pkAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T223886[ebp], eax
	mov	ecx, DWORD PTR $T223886[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kAttackerOwner$221197[ebp], ecx

; 381  : 		kAttackerOwner.GetPlayerAchievements().AttackedUnitWithUnit(pkAttacker, pkDefender);

	mov	edx, DWORD PTR _pkDefender$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkAttacker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kAttackerOwner$221197[ebp]
	add	ecx, 63156				; 0000f6b4H
	call	?AttackedUnitWithUnit@CvPlayerAchievements@@QAEXPAVCvUnit@@0@Z ; CvPlayerAchievements::AttackedUnitWithUnit

; 382  : 
; 383  : 		// Attacker died
; 384  : 		if(bAttackerDead)

	movzx	ecx, BYTE PTR _bAttackerDead$[ebp]
	test	ecx, ecx
	je	$LN39@ResolveMel

; 385  : 		{
; 386  : 			CvPlayerAI& kDefenderOwner = GET_PLAYER(pkDefender->getOwner());

	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T223901[ebp], eax
	mov	ecx, DWORD PTR $T223901[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kDefenderOwner$221199[ebp], ecx

; 387  : 			kDefenderOwner.GetPlayerAchievements().KilledUnitWithUnit(pkDefender, pkAttacker);

	mov	edx, DWORD PTR _pkAttacker$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkDefender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kDefenderOwner$221199[ebp]
	add	ecx, 63156				; 0000f6b4H
	call	?KilledUnitWithUnit@CvPlayerAchievements@@QAEXPAVCvUnit@@0@Z ; CvPlayerAchievements::KilledUnitWithUnit

; 388  : 
; 389  : 			auto_ptr<ICvUnit1> pAttacker = GC.WrapUnitPointer(pkAttacker);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T223780[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z ; CvGlobals::WrapUnitPointer
	mov	DWORD PTR $T223918[ebp], eax
	mov	eax, DWORD PTR $T223918[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Cvtptr$223916[ebp], ecx
	mov	edx, DWORD PTR __Cvtptr$223916[ebp]
	mov	DWORD PTR __Ans$223917[ebp], edx
	mov	eax, DWORD PTR $T223918[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR __Ans$223917[ebp]
	mov	DWORD PTR $T223781[ebp], ecx
	mov	edx, DWORD PTR $T223781[ebp]
	mov	DWORD PTR $T223923[ebp], edx
	mov	eax, DWORD PTR $T223923[ebp]
	mov	DWORD PTR __Ptr$223922[ebp], eax
	mov	DWORD PTR $T223923[ebp], 0
	mov	ecx, DWORD PTR __Ptr$223922[ebp]
	mov	DWORD PTR _pAttacker$221247[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T223780[ebp]
	mov	DWORD PTR $T223932[ebp], edx
	cmp	DWORD PTR $T223932[ebp], 0
	je	SHORT $LN113@ResolveMel
	mov	eax, DWORD PTR $T223932[ebp]
	mov	DWORD PTR _inst$223936[ebp], eax
	mov	ecx, DWORD PTR _inst$223936[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inst$223936[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
$LN113@ResolveMel:

; 390  : 			gDLL->GameplayUnitDestroyedInCombat(pAttacker.get());

	mov	edx, DWORD PTR $T223941[ebp]
	mov	DWORD PTR tv274[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv274[ebp], eax
	mov	ecx, DWORD PTR _pAttacker$221247[ebp]
	push	ecx
	mov	edx, DWORD PTR tv274[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv274[ebp]
	mov	edx, DWORD PTR [eax+600]
	call	edx

; 391  : 
; 392  : 			if(iActivePlayerID == pkAttacker->getOwner())

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T223953[ebp], ecx
	mov	edx, DWORD PTR _iActivePlayerID$[ebp]
	cmp	edx, DWORD PTR $T223953[ebp]
	jne	$LN38@ResolveMel

; 393  : 			{
; 394  : 				strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_DIED_ATTACKING", pkAttacker->getNameKey(), pkDefender->getNameKey(), iAttackerDamageInflicted, iAttackerFearDamageInflicted);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T223782[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T223783[ebp], eax
	lea	eax, DWORD PTR _iAttackerFearDamageInflicted$221195[ebp]
	push	eax
	lea	ecx, DWORD PTR _iAttackerDamageInflicted$221193[ebp]
	push	ecx
	lea	edx, DWORD PTR $T223782[ebp]
	push	edx
	lea	eax, DWORD PTR $T223783[ebp]
	push	eax
	push	OFFSET ??_C@_0CF@KKNLAFFL@TXT_KEY_MISC_YOU_UNIT_DIED_ATTAC@
	lea	ecx, DWORD PTR $T223784[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z ; GetLocalizedText<char const *,char const *,int,int>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv974[ebp], eax
	mov	edx, DWORD PTR tv974[ebp]
	mov	DWORD PTR $T223957[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR $T223957[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T223784[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 395  : 				GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitDefeatScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	mov	ecx, DWORD PTR $T223965[ebp]
	mov	DWORD PTR tv305[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv305[ebp], edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T223969[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T223973[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T223982[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T223969[ebp]
	push	eax
	mov	ecx, DWORD PTR $T223973[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T223982[ebp]
	push	edx
	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv305[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv305[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN38@ResolveMel:

; 396  : 			}
; 397  : 			if(iActivePlayerID == pkDefender->getOwner())

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T223991[ebp], edx
	mov	eax, DWORD PTR _iActivePlayerID$[ebp]
	cmp	eax, DWORD PTR $T223991[ebp]
	jne	$LN37@ResolveMel

; 398  : 			{
; 399  : 				strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_KILLED_ENEMY_UNIT", pkDefender->getNameKey(), iAttackerDamageInflicted, iAttackerFearDamageInflicted, pkAttacker->getNameKey(), pkAttacker->getVisualCivAdjective(pkDefender->getTeam()));

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getVisualCivAdjective@CvUnit@@QBEPBDW4TeamTypes@@@Z ; CvUnit::getVisualCivAdjective
	mov	DWORD PTR $T223785[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T223786[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T223787[ebp], eax
	lea	ecx, DWORD PTR $T223785[ebp]
	push	ecx
	lea	edx, DWORD PTR $T223786[ebp]
	push	edx
	lea	eax, DWORD PTR _iAttackerFearDamageInflicted$221195[ebp]
	push	eax
	lea	ecx, DWORD PTR _iAttackerDamageInflicted$221193[ebp]
	push	ecx
	lea	edx, DWORD PTR $T223787[ebp]
	push	edx
	push	OFFSET ??_C@_0CD@DLJIGMBM@TXT_KEY_MISC_YOU_KILLED_ENEMY_UN@
	lea	eax, DWORD PTR $T223788[ebp]
	push	eax
	call	??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z ; GetLocalizedText<char const *,int,int,char const *,char const *>
	add	esp, 28					; 0000001cH
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR tv66[ebp]
	mov	DWORD PTR $T223995[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR $T223995[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T223788[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 400  : 				GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitVictoryScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	mov	eax, DWORD PTR $T224003[ebp]
	mov	DWORD PTR tv358[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv358[ebp], ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T224007[ebp], eax
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T224011[ebp], edx
	mov	eax, DWORD PTR _pkDefender$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T224020[ebp], ecx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR $T224007[ebp]
	push	edx
	mov	eax, DWORD PTR $T224011[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR $T224020[ebp]
	push	ecx
	mov	edx, DWORD PTR _uiParentEventID$[ebp]
	push	edx
	mov	eax, DWORD PTR tv358[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv358[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN37@ResolveMel:

; 401  : 			}
; 402  : #ifndef AUI_UNIT_TEST_PROMOTION_READY_MOVED
; 403  : 			pkDefender->testPromotionReady();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?testPromotionReady@CvUnit@@QAEXXZ	; CvUnit::testPromotionReady

; 404  : #endif
; 405  : 
; 406  : 			ApplyPostCombatTraitEffects(pkDefender, pkAttacker);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkDefender$[ebp]
	push	edx
	call	?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z ; CvUnitCombat::ApplyPostCombatTraitEffects
	add	esp, 8

; 407  : 
; 408  : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _pAttacker$221247[ebp]
	mov	DWORD PTR $T224030[ebp], eax
	cmp	DWORD PTR $T224030[ebp], 0
	je	SHORT $LN160@ResolveMel
	mov	ecx, DWORD PTR $T224030[ebp]
	mov	DWORD PTR _inst$224034[ebp], ecx
	mov	edx, DWORD PTR _inst$224034[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$224034[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN160@ResolveMel:

; 409  : 		// Defender died
; 410  : 		else if(bDefenderDead)

	jmp	$LN28@ResolveMel
$LN39@ResolveMel:
	movzx	eax, BYTE PTR _bDefenderDead$[ebp]
	test	eax, eax
	je	$LN35@ResolveMel

; 411  : 		{
; 412  : 			kAttackerOwner.GetPlayerAchievements().KilledUnitWithUnit(pkAttacker, pkDefender);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kAttackerOwner$221197[ebp]
	add	ecx, 63156				; 0000f6b4H
	call	?KilledUnitWithUnit@CvPlayerAchievements@@QAEXPAVCvUnit@@0@Z ; CvPlayerAchievements::KilledUnitWithUnit

; 413  : 
; 414  : 			auto_ptr<ICvUnit1> pDefender = GC.WrapUnitPointer(pkDefender);

	mov	eax, DWORD PTR _pkDefender$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T223789[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z ; CvGlobals::WrapUnitPointer
	mov	DWORD PTR $T224048[ebp], eax
	mov	edx, DWORD PTR $T224048[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Cvtptr$224046[ebp], eax
	mov	ecx, DWORD PTR __Cvtptr$224046[ebp]
	mov	DWORD PTR __Ans$224047[ebp], ecx
	mov	edx, DWORD PTR $T224048[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR __Ans$224047[ebp]
	mov	DWORD PTR $T223790[ebp], eax
	mov	ecx, DWORD PTR $T223790[ebp]
	mov	DWORD PTR $T224053[ebp], ecx
	mov	edx, DWORD PTR $T224053[ebp]
	mov	DWORD PTR __Ptr$224051[ebp], edx
	mov	DWORD PTR $T224053[ebp], 0
	mov	eax, DWORD PTR __Ptr$224051[ebp]
	mov	DWORD PTR _pDefender$221305[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR $T223789[ebp]
	mov	DWORD PTR $T224063[ebp], ecx
	cmp	DWORD PTR $T224063[ebp], 0
	je	SHORT $LN173@ResolveMel
	mov	edx, DWORD PTR $T224063[ebp]
	mov	DWORD PTR _inst$224067[ebp], edx
	mov	eax, DWORD PTR _inst$224067[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$224067[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN173@ResolveMel:

; 415  : 			gDLL->GameplayUnitDestroyedInCombat(pDefender.get());

	mov	ecx, DWORD PTR $T224071[ebp]
	mov	DWORD PTR tv414[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv414[ebp], edx
	mov	eax, DWORD PTR _pDefender$221305[ebp]
	push	eax
	mov	ecx, DWORD PTR tv414[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv414[ebp]
	mov	eax, DWORD PTR [edx+600]
	call	eax

; 416  : 
; 417  : 			if(iActivePlayerID == pkAttacker->getOwner())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224083[ebp], edx
	mov	eax, DWORD PTR _iActivePlayerID$[ebp]
	cmp	eax, DWORD PTR $T224083[ebp]
	jne	$LN34@ResolveMel

; 418  : 			{
; 419  : 				strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_DESTROYED_ENEMY", pkAttacker->getNameKey(), iDefenderDamageInflicted, pkDefender->getNameKey());

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T223791[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T223792[ebp], eax
	lea	ecx, DWORD PTR $T223791[ebp]
	push	ecx
	lea	edx, DWORD PTR _iDefenderDamageInflicted$221194[ebp]
	push	edx
	lea	eax, DWORD PTR $T223792[ebp]
	push	eax
	push	OFFSET ??_C@_0CG@MAFGHNID@TXT_KEY_MISC_YOU_UNIT_DESTROYED_@
	lea	ecx, DWORD PTR $T223793[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z ; GetLocalizedText<char const *,int,char const *>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv1233[ebp], eax
	mov	edx, DWORD PTR tv1233[ebp]
	mov	DWORD PTR $T224087[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR $T224087[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T223793[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 420  : 				GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitVictoryScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	mov	ecx, DWORD PTR $T224095[ebp]
	mov	DWORD PTR tv444[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv444[ebp], edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T224099[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T224103[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224112[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T224099[ebp]
	push	eax
	mov	ecx, DWORD PTR $T224103[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T224112[ebp]
	push	edx
	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv444[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv444[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN34@ResolveMel:

; 421  : 			}
; 422  : 
; 423  : 			if(pkAttacker->getVisualOwner(pkDefender->getTeam()) != pkAttacker->getOwner())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224121[ebp], edx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getVisualOwner@CvUnit@@QBE?AW4PlayerTypes@@W4TeamTypes@@@Z ; CvUnit::getVisualOwner
	cmp	eax, DWORD PTR $T224121[ebp]
	je	SHORT $LN33@ResolveMel

; 424  : 			{
; 425  : 				strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_WAS_DESTROYED_UNKNOWN", pkDefender->getNameKey(), pkAttacker->getNameKey(), iDefenderDamageInflicted);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T223794[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T223795[ebp], eax
	lea	eax, DWORD PTR _iDefenderDamageInflicted$221194[ebp]
	push	eax
	lea	ecx, DWORD PTR $T223794[ebp]
	push	ecx
	lea	edx, DWORD PTR $T223795[ebp]
	push	edx
	push	OFFSET ??_C@_0CM@LNPONPCG@TXT_KEY_MISC_YOU_UNIT_WAS_DESTRO@
	lea	eax, DWORD PTR $T223796[ebp]
	push	eax
	call	??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z ; GetLocalizedText<char const *,char const *,int>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv1234[ebp], eax
	mov	ecx, DWORD PTR tv1234[ebp]
	mov	DWORD PTR $T224125[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	edx, DWORD PTR $T224125[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T223796[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 426  : 			}
; 427  : 			else

	jmp	$LN32@ResolveMel
$LN33@ResolveMel:

; 428  : 			{
; 429  : 				strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_WAS_DESTROYED", pkDefender->getNameKey(), pkAttacker->getNameKey(), pkAttacker->getVisualCivAdjective(pkDefender->getTeam()), iDefenderDamageInflicted);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getVisualCivAdjective@CvUnit@@QBEPBDW4TeamTypes@@@Z ; CvUnit::getVisualCivAdjective
	mov	DWORD PTR $T223797[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T223798[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T223799[ebp], eax
	lea	eax, DWORD PTR _iDefenderDamageInflicted$221194[ebp]
	push	eax
	lea	ecx, DWORD PTR $T223797[ebp]
	push	ecx
	lea	edx, DWORD PTR $T223798[ebp]
	push	edx
	lea	eax, DWORD PTR $T223799[ebp]
	push	eax
	push	OFFSET ??_C@_0CE@NGODCANA@TXT_KEY_MISC_YOU_UNIT_WAS_DESTRO@
	lea	ecx, DWORD PTR $T223800[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z ; GetLocalizedText<char const *,char const *,char const *,int>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv1235[ebp], eax
	mov	edx, DWORD PTR tv1235[ebp]
	mov	DWORD PTR $T224133[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR $T224133[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T223800[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN32@ResolveMel:

; 430  : 			}
; 431  : 			if(iActivePlayerID == pkDefender->getOwner())

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224146[ebp], edx
	mov	eax, DWORD PTR _iActivePlayerID$[ebp]
	cmp	eax, DWORD PTR $T224146[ebp]
	jne	SHORT $LN31@ResolveMel

; 432  : 			{
; 433  : 				GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*,GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitDefeatScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	mov	ecx, DWORD PTR $T224150[ebp]
	mov	DWORD PTR tv550[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv550[ebp], edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T224154[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T224158[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224167[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T224154[ebp]
	push	eax
	mov	ecx, DWORD PTR $T224158[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T224167[ebp]
	push	edx
	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv550[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv550[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN31@ResolveMel:

; 434  : 			}
; 435  : 			CvNotifications* pNotification = GET_PLAYER(pkDefender->getOwner()).GetNotifications();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224176[ebp], edx
	mov	eax, DWORD PTR $T224176[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224180[ebp], eax
	mov	ecx, DWORD PTR $T224180[ebp]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotification$221354[ebp], eax

; 436  : 			if(pNotification)

	cmp	DWORD PTR _pNotification$221354[ebp], 0
	je	$LN30@ResolveMel

; 437  : 			{
; 438  : 				Localization::String strSummary = Localization::Lookup("TXT_KEY_UNIT_LOST");

	push	OFFSET ??_C@_0BC@DCAPLCAP@TXT_KEY_UNIT_LOST?$AA@
	lea	ecx, DWORD PTR _strSummary$221356[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 8

; 439  : 				pNotification->Add(NOTIFICATION_UNIT_DIED, strBuffer, strSummary.toUTF8(), pkDefender->getX(), pkDefender->getY(), (int) pkDefender->getUnitType(), pkDefender->getOwner());

	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T224189[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR $T224198[ebp], edx
	mov	eax, DWORD PTR _pkDefender$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T224207[ebp], ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T224211[ebp], eax
	mov	edx, DWORD PTR $T224189[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	mov	eax, DWORD PTR $T224198[ebp]
	push	eax
	mov	ecx, DWORD PTR $T224207[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strSummary$221356[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	edx, DWORD PTR $T224211[ebp]
	push	edx
	push	-16309126				; ff07247aH
	mov	ecx, DWORD PTR _pNotification$221354[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 440  : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _strSummary$221356[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN30@ResolveMel:

; 441  : 
; 442  : #ifndef AUI_UNIT_TEST_PROMOTION_READY_MOVED
; 443  : 			pkAttacker->testPromotionReady();

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?testPromotionReady@CvUnit@@QAEXXZ	; CvUnit::testPromotionReady

; 444  : #endif
; 445  : 
; 446  : 			ApplyPostCombatTraitEffects(pkAttacker, pkDefender);

	mov	eax, DWORD PTR _pkDefender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	push	ecx
	call	?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z ; CvUnitCombat::ApplyPostCombatTraitEffects
	add	esp, 8

; 447  : 
; 448  : 			// If defender captured, mark who captured him
; 449  : 			if (kCombatInfo.getDefenderCaptured())

	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getDefenderCaptured@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getDefenderCaptured
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN29@ResolveMel

; 450  : 			{
; 451  : 				pkDefender->setCapturingPlayer(pkAttacker->getOwner());

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T224220[ebp], ecx
	mov	edx, DWORD PTR $T224220[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?setCapturingPlayer@CvUnit@@QAEXW4PlayerTypes@@@Z ; CvUnit::setCapturingPlayer

; 452  : 				pkDefender->SetCapturedAsIs(true);

	push	1
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?SetCapturedAsIs@CvUnit@@QAEX_N@Z	; CvUnit::SetCapturedAsIs
$LN29@ResolveMel:

; 453  : 			}
; 454  : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _pDefender$221305[ebp]
	mov	DWORD PTR $T224230[ebp], eax
	cmp	DWORD PTR $T224230[ebp], 0
	je	SHORT $LN253@ResolveMel
	mov	ecx, DWORD PTR $T224230[ebp]
	mov	DWORD PTR _inst$224233[ebp], ecx
	mov	edx, DWORD PTR _inst$224233[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$224233[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN253@ResolveMel:

; 455  : 		// Nobody died
; 456  : 		else

	jmp	$LN28@ResolveMel
$LN35@ResolveMel:

; 457  : 		{
; 458  : 			if(iActivePlayerID == pkAttacker->getOwner())

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T224243[ebp], ecx
	mov	edx, DWORD PTR _iActivePlayerID$[ebp]
	cmp	edx, DWORD PTR $T224243[ebp]
	jne	$LN27@ResolveMel

; 459  : 			{
; 460  : 				strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_WITHDRAW", pkAttacker->getNameKey(), iDefenderDamageInflicted, pkDefender->getNameKey(), iAttackerDamageInflicted);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T223801[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T223802[ebp], eax
	lea	eax, DWORD PTR _iAttackerDamageInflicted$221193[ebp]
	push	eax
	lea	ecx, DWORD PTR $T223801[ebp]
	push	ecx
	lea	edx, DWORD PTR _iDefenderDamageInflicted$221194[ebp]
	push	edx
	lea	eax, DWORD PTR $T223802[ebp]
	push	eax
	push	OFFSET ??_C@_0BP@HNPBMJOC@TXT_KEY_MISC_YOU_UNIT_WITHDRAW?$AA@
	lea	ecx, DWORD PTR $T223803[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z ; GetLocalizedText<char const *,int,char const *,int>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv583[ebp], eax
	mov	edx, DWORD PTR tv583[ebp]
	mov	DWORD PTR $T224247[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	eax, DWORD PTR $T224247[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T223803[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 461  : 				GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_OUR_WITHDRAWL", MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	mov	ecx, DWORD PTR $T224255[ebp]
	mov	DWORD PTR tv645[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv645[ebp], edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T224259[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T224263[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224272[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T224259[ebp]
	push	eax
	mov	ecx, DWORD PTR $T224263[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T224272[ebp]
	push	edx
	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv645[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv645[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN27@ResolveMel:

; 462  : 			}
; 463  : 			if(iActivePlayerID == pkDefender->getOwner())

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224281[ebp], edx
	mov	eax, DWORD PTR _iActivePlayerID$[ebp]
	cmp	eax, DWORD PTR $T224281[ebp]
	jne	$LN26@ResolveMel

; 464  : 			{
; 465  : 				strBuffer = GetLocalizedText("TXT_KEY_MISC_ENEMY_UNIT_WITHDRAW", pkAttacker->getNameKey(), iDefenderDamageInflicted, pkDefender->getNameKey(), iAttackerDamageInflicted);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T223804[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T223805[ebp], eax
	lea	ecx, DWORD PTR _iAttackerDamageInflicted$221193[ebp]
	push	ecx
	lea	edx, DWORD PTR $T223804[ebp]
	push	edx
	lea	eax, DWORD PTR _iDefenderDamageInflicted$221194[ebp]
	push	eax
	lea	ecx, DWORD PTR $T223805[ebp]
	push	ecx
	push	OFFSET ??_C@_0CB@ENHCCJB@TXT_KEY_MISC_ENEMY_UNIT_WITHDRAW@
	lea	edx, DWORD PTR $T223806[ebp]
	push	edx
	call	??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z ; GetLocalizedText<char const *,int,char const *,int>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv1236[ebp], eax
	mov	eax, DWORD PTR tv1236[ebp]
	mov	DWORD PTR $T224285[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR $T224285[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T223806[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 466  : 				GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_THEIR_WITHDRAWL", MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	mov	edx, DWORD PTR $T224293[ebp]
	mov	DWORD PTR tv692[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv692[ebp], eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T224297[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T224301[ebp], ecx
	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T224310[ebp], eax
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR $T224297[ebp]
	push	ecx
	mov	edx, DWORD PTR $T224301[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T224310[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv692[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv692[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN26@ResolveMel:

; 467  : 			}
; 468  : 
; 469  : #ifndef AUI_UNIT_TEST_PROMOTION_READY_MOVED
; 470  : 			pkDefender->testPromotionReady();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?testPromotionReady@CvUnit@@QAEXXZ	; CvUnit::testPromotionReady

; 471  : 			pkAttacker->testPromotionReady();

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?testPromotionReady@CvUnit@@QAEXXZ	; CvUnit::testPromotionReady
$LN28@ResolveMel:

; 472  : #endif
; 473  : 
; 474  : 		}
; 475  : 
; 476  : 		// Minors want Barbs near them dead
; 477  : 		if(bAttackerDead)

	movzx	eax, BYTE PTR _bAttackerDead$[ebp]
	test	eax, eax
	je	SHORT $LN25@ResolveMel

; 478  : 		{
; 479  : 			if(pkAttacker->isBarbarian())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN24@ResolveMel

; 480  : 				pkAttacker->DoTestBarbarianThreatToMinorsWithThisUnitsDeath(pkDefender->getOwner());

	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T224319[ebp], eax
	mov	ecx, DWORD PTR $T224319[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?DoTestBarbarianThreatToMinorsWithThisUnitsDeath@CvUnit@@QAEXW4PlayerTypes@@@Z ; CvUnit::DoTestBarbarianThreatToMinorsWithThisUnitsDeath
$LN24@ResolveMel:

; 481  : 		}

	jmp	SHORT $LN21@ResolveMel
$LN25@ResolveMel:

; 482  : 		else if(bDefenderDead)

	movzx	edx, BYTE PTR _bDefenderDead$[ebp]
	test	edx, edx
	je	SHORT $LN21@ResolveMel

; 483  : 		{
; 484  : 			if(pkDefender->isBarbarian())

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@ResolveMel

; 485  : 				pkDefender->DoTestBarbarianThreatToMinorsWithThisUnitsDeath(pkAttacker->getOwner());

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224328[ebp], edx
	mov	eax, DWORD PTR $T224328[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?DoTestBarbarianThreatToMinorsWithThisUnitsDeath@CvUnit@@QAEXW4PlayerTypes@@@Z ; CvUnit::DoTestBarbarianThreatToMinorsWithThisUnitsDeath
$LN21@ResolveMel:

; 486  : 		}
; 487  : 	}
; 488  : 
; 489  : 	if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	SHORT $LN20@ResolveMel

; 490  : 	{
; 491  : 		pkAttacker->setCombatUnit(NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 492  : 		pkAttacker->ClearMissionQueue(GetPostCombatDelay());

	call	?GetPostCombatDelay@@YAHXZ		; GetPostCombatDelay
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?ClearMissionQueue@CvUnit@@QAEXH@Z	; CvUnit::ClearMissionQueue
$LN20@ResolveMel:

; 493  : 	}
; 494  : 	if(pkDefender)

	cmp	DWORD PTR _pkDefender$[ebp], 0
	je	SHORT $LN19@ResolveMel

; 495  : 	{
; 496  : 		pkDefender->setCombatUnit(NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 497  : 		pkDefender->ClearMissionQueue();

	push	1
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?ClearMissionQueue@CvUnit@@QAEXH@Z	; CvUnit::ClearMissionQueue

; 498  : 	}
; 499  : 	else

	jmp	SHORT $LN18@ResolveMel
$LN19@ResolveMel:

; 500  : 		bDefenderDead = true;

	mov	BYTE PTR _bDefenderDead$[ebp], 1
$LN18@ResolveMel:

; 501  : 
; 502  : 	if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	$LN17@ResolveMel

; 503  : 	{
; 504  : 		if(pkAttacker->isSuicide())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isSuicide@CvUnit@@QBE_NXZ		; CvUnit::isSuicide
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN16@ResolveMel

; 505  : 		{
; 506  : 			pkAttacker->setCombatUnit(NULL);	// Must clear this if doing a delayed kill, should this be part of the kill method?

	push	0
	push	0
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 507  : 			pkAttacker->kill(true);

	push	-1
	push	1
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z	; CvUnit::kill

; 508  : 		}
; 509  : 		else

	jmp	$LN1@ResolveMel
$LN16@ResolveMel:

; 510  : 		{
; 511  : #ifdef AUI_WARNING_FIXES
; 512  : 			if (pkTargetPlot && pkDefender)
; 513  : #else
; 514  : 			if(pkTargetPlot)

	cmp	DWORD PTR _pkTargetPlot$[ebp], 0
	je	$LN331@ResolveMel

; 515  : #endif
; 516  : 			{
; 517  : #ifdef NQ_HEAVY_CHARGE_DOWNHILL
; 518  : 				bool isAttackingFromHigherElevation = false;

	mov	BYTE PTR _isAttackingFromHigherElevation$221395[ebp], 0

; 519  : 				if (pkAttacker->GetHeavyChargeDownhill() > 0)

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?GetHeavyChargeDownhill@CvUnit@@QBEHXZ	; CvUnit::GetHeavyChargeDownhill
	test	eax, eax
	jle	$LN13@ResolveMel

; 520  : 				{
; 521  : 					isAttackingFromHigherElevation = 
; 522  : 						(pkAttacker->plot()->isMountain() && !pkDefender->plot()->isMountain()) ||
; 523  : 						(pkAttacker->plot()->isHills() && pkDefender->plot()->isFlatlands());

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR $T224332[ebp], eax
	mov	edx, DWORD PTR $T224332[ebp]
	movsx	eax, BYTE PTR [edx+5]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN45@ResolveMel
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR $T224336[ebp], eax
	mov	edx, DWORD PTR $T224336[ebp]
	movsx	eax, BYTE PTR [edx+5]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN47@ResolveMel
$LN45@ResolveMel:
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR $T224340[ebp], eax
	mov	edx, DWORD PTR $T224340[ebp]
	movsx	eax, BYTE PTR [edx+5]
	sub	eax, 1
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN46@ResolveMel
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	ecx, eax
	call	?isFlatlands@CvPlot@@QBE_NXZ		; CvPlot::isFlatlands
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN47@ResolveMel
$LN46@ResolveMel:
	mov	DWORD PTR tv788[ebp], 0
	jmp	SHORT $LN48@ResolveMel
$LN47@ResolveMel:
	mov	DWORD PTR tv788[ebp], 1
$LN48@ResolveMel:
	mov	al, BYTE PTR tv788[ebp]
	mov	BYTE PTR _isAttackingFromHigherElevation$221395[ebp], al
$LN13@ResolveMel:

; 524  : 				}
; 525  : 				if ((pkAttacker->IsCanHeavyCharge() || (pkAttacker->GetHeavyChargeDownhill() > 0 && isAttackingFromHigherElevation))
; 526  : 					&& !pkDefender->isDelayedDeath() && bAttackerDidMoreDamage)

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?IsCanHeavyCharge@CvUnit@@QBE_NXZ	; CvUnit::IsCanHeavyCharge
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN11@ResolveMel
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?GetHeavyChargeDownhill@CvUnit@@QBEHXZ	; CvUnit::GetHeavyChargeDownhill
	test	eax, eax
	jle	SHORT $LN12@ResolveMel
	movzx	edx, BYTE PTR _isAttackingFromHigherElevation$221395[ebp]
	test	edx, edx
	je	SHORT $LN12@ResolveMel
$LN11@ResolveMel:
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?isDelayedDeath@CvUnit@@QBE_NXZ		; CvUnit::isDelayedDeath
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN12@ResolveMel
	movzx	ecx, BYTE PTR _bAttackerDidMoreDamage$[ebp]
	test	ecx, ecx
	je	SHORT $LN12@ResolveMel

; 527  : #else
; 528  : 				if (pkAttacker->IsCanHeavyCharge() && !pkDefender->isDelayedDeath() && bAttackerDidMoreDamage)
; 529  : #endif
; 530  : 				{
; 531  : 					pkDefender->DoFallBackFromMelee(*pkAttacker);

	mov	edx, DWORD PTR _pkAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?DoFallBackFromMelee@CvUnit@@IAE_NAAV1@@Z ; CvUnit::DoFallBackFromMelee
$LN12@ResolveMel:

; 532  : 				}
; 533  : 
; 534  : 				bool bCanAdvance = kCombatInfo.getAttackerAdvances() && pkTargetPlot->getNumVisibleEnemyDefenders(pkAttacker) == 0;

	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getAttackerAdvances@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getAttackerAdvances
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN49@ResolveMel
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkTargetPlot$[ebp]
	call	?getNumVisibleEnemyDefenders@CvPlot@@QBEHPBVCvUnit@@@Z ; CvPlot::getNumVisibleEnemyDefenders
	test	eax, eax
	jne	SHORT $LN49@ResolveMel
	mov	DWORD PTR tv815[ebp], 1
	jmp	SHORT $LN50@ResolveMel
$LN49@ResolveMel:
	mov	DWORD PTR tv815[ebp], 0
$LN50@ResolveMel:
	mov	dl, BYTE PTR tv815[ebp]
	mov	BYTE PTR _bCanAdvance$221399[ebp], dl

; 535  : 				if(bCanAdvance)

	movzx	eax, BYTE PTR _bCanAdvance$221399[ebp]
	test	eax, eax
	je	SHORT $LN10@ResolveMel

; 536  : 				{
; 537  : 					if(kCombatInfo.getAttackerAdvancedVisualization())

	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getAttackerAdvancedVisualization@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getAttackerAdvancedVisualization
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@ResolveMel

; 538  : 						// The combat vis has already 'moved' the unit.  Have the game side just do its movement calculations and pop the unit to the new location.
; 539  : 						pkAttacker->move(*pkTargetPlot, false);

	push	0
	mov	edx, DWORD PTR _pkTargetPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?move@CvUnit@@QAEXAAVCvPlot@@_N@Z	; CvUnit::move

; 540  : 					else

	jmp	SHORT $LN8@ResolveMel
$LN9@ResolveMel:

; 541  : 						pkAttacker->UnitMove(pkTargetPlot, true, pkAttacker);

	push	0
	mov	eax, DWORD PTR _pkAttacker$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkTargetPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?UnitMove@CvUnit@@QAE_NPAVCvPlot@@_NPAV1@1@Z ; CvUnit::UnitMove
$LN8@ResolveMel:

; 542  : 
; 543  : 					pkAttacker->PublishQueuedVisualizationMoves();

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?PublishQueuedVisualizationMoves@CvUnit@@IAEXXZ ; CvUnit::PublishQueuedVisualizationMoves

; 544  : 				}
; 545  : 				else

	jmp	$LN331@ResolveMel
$LN10@ResolveMel:

; 546  : 				{
; 547  : #ifdef NQ_FIX_MOVES_THAT_CONSUME_ALL_MOVEMENT
; 548  : 					pkAttacker->changeMoves(-1 * std::max(GC.getMOVE_DENOMINATOR(), pkTargetPlot->movementCost(pkAttacker, pkAttacker->plot(), pkAttacker->getMoves())));

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getMoves@CvUnit@@QBEHXZ		; CvUnit::getMoves
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	push	eax
	mov	edx, DWORD PTR _pkAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkTargetPlot$[ebp]
	call	?movementCost@CvPlot@@QBEHPBVCvUnit@@PBV1@H@Z ; CvPlot::movementCost
	mov	DWORD PTR $T223813[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6236
	mov	DWORD PTR $T224344[ebp], eax
	mov	ecx, DWORD PTR $T224344[ebp]
	mov	DWORD PTR $T223814[ebp], ecx
	mov	edx, DWORD PTR $T223814[ebp]
	cmp	edx, DWORD PTR $T223813[ebp]
	jge	SHORT $LN312@ResolveMel
	lea	eax, DWORD PTR $T223813[ebp]
	mov	DWORD PTR tv1227[ebp], eax
	jmp	SHORT $LN313@ResolveMel
$LN312@ResolveMel:
	lea	ecx, DWORD PTR $T223814[ebp]
	mov	DWORD PTR tv1227[ebp], ecx
$LN313@ResolveMel:
	mov	edx, DWORD PTR tv1227[ebp]
	mov	DWORD PTR $T224350[ebp], edx
	mov	eax, DWORD PTR $T224350[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, -1
	push	ecx
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?changeMoves@CvUnit@@QAEXH@Z		; CvUnit::changeMoves

; 549  : #else
; 550  : 					pkAttacker->changeMoves(-1 * std::max(GC.getMOVE_DENOMINATOR(), pkTargetPlot->movementCost(pkAttacker, pkAttacker->plot())));
; 551  : #endif
; 552  : 
; 553  : 					if(!pkAttacker->canMove() || !pkAttacker->isBlitz())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?canMove@CvUnit@@QBE_NXZ		; CvUnit::canMove
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@ResolveMel
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isBlitz@CvUnit@@QBE_NXZ		; CvUnit::isBlitz
	movzx	eax, al
	test	eax, eax
	jne	$LN331@ResolveMel
$LN5@ResolveMel:

; 554  : 					{
; 555  : 						if(pkAttacker->IsSelected())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?IsSelected@CvUnit@@QBE_NXZ		; CvUnit::IsSelected
	movzx	ecx, al
	test	ecx, ecx
	je	$LN331@ResolveMel

; 556  : 						{
; 557  : 							if(GC.GetEngineUserInterface()->GetLengthSelectionList() > 1)

	mov	edx, DWORD PTR $T224357[ebp]
	mov	DWORD PTR tv868[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv868[ebp], eax
	mov	ecx, DWORD PTR tv868[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv868[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax
	cmp	eax, 1
	jle	$LN331@ResolveMel

; 558  : 							{
; 559  : 								auto_ptr<ICvUnit1> pDllAttacker = GC.WrapUnitPointer(pkAttacker);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T223815[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z ; CvGlobals::WrapUnitPointer
	mov	DWORD PTR $T224368[ebp], eax
	mov	eax, DWORD PTR $T224368[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Cvtptr$224366[ebp], ecx
	mov	edx, DWORD PTR __Cvtptr$224366[ebp]
	mov	DWORD PTR __Ans$224367[ebp], edx
	mov	eax, DWORD PTR $T224368[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR __Ans$224367[ebp]
	mov	DWORD PTR $T223816[ebp], ecx
	mov	edx, DWORD PTR $T223816[ebp]
	mov	DWORD PTR $T224373[ebp], edx
	mov	eax, DWORD PTR $T224373[ebp]
	mov	DWORD PTR __Ptr$224372[ebp], eax
	mov	DWORD PTR $T224373[ebp], 0
	mov	ecx, DWORD PTR __Ptr$224372[ebp]
	mov	DWORD PTR _pDllAttacker$221411[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	edx, DWORD PTR $T223815[ebp]
	mov	DWORD PTR $T224382[ebp], edx
	cmp	DWORD PTR $T224382[ebp], 0
	je	SHORT $LN324@ResolveMel
	mov	eax, DWORD PTR $T224382[ebp]
	mov	DWORD PTR _inst$224386[ebp], eax
	mov	ecx, DWORD PTR _inst$224386[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inst$224386[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
$LN324@ResolveMel:

; 560  : 								GC.GetEngineUserInterface()->RemoveFromSelectionList(pDllAttacker.get());

	mov	edx, DWORD PTR $T224391[ebp]
	mov	DWORD PTR tv893[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv893[ebp], eax
	mov	ecx, DWORD PTR _pDllAttacker$221411[ebp]
	push	ecx
	mov	edx, DWORD PTR tv893[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv893[ebp]
	mov	edx, DWORD PTR [eax+68]
	call	edx

; 561  : 							}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _pDllAttacker$221411[ebp]
	mov	DWORD PTR $T224403[ebp], eax
	cmp	DWORD PTR $T224403[ebp], 0
	je	SHORT $LN333@ResolveMel
	mov	ecx, DWORD PTR $T224403[ebp]
	mov	DWORD PTR _inst$224407[ebp], ecx
	mov	edx, DWORD PTR _inst$224407[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$224407[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN333@ResolveMel:
$LN331@ResolveMel:

; 562  : 						}
; 563  : 					}
; 564  : 				}
; 565  : 			}
; 566  : 
; 567  : 			// If a Unit loses his moves after attacking, do so
; 568  : #ifdef NQ_UNIT_TURN_ENDS_ON_FINAL_ATTACK
; 569  : 			if(!pkAttacker->canMoveAfterAttacking() && pkAttacker->isOutOfAttacks())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?canMoveAfterAttacking@CvUnit@@QBE_NXZ	; CvUnit::canMoveAfterAttacking
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@ResolveMel
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isOutOfAttacks@CvUnit@@QBE_NXZ		; CvUnit::isOutOfAttacks
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@ResolveMel

; 570  : #else
; 571  : 			if(!pkAttacker->canMoveAfterAttacking())
; 572  : #endif
; 573  : 			{
; 574  : 				pkAttacker->finishMoves();

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?finishMoves@CvUnit@@QAEXXZ		; CvUnit::finishMoves

; 575  : 				GC.GetEngineUserInterface()->changeCycleSelectionCounter(1);

	mov	edx, DWORD PTR $T224412[ebp]
	mov	DWORD PTR tv915[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv915[ebp], eax
	push	1
	mov	ecx, DWORD PTR tv915[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv915[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
$LN2@ResolveMel:

; 576  : 			}
; 577  : 
; 578  : 			// Now that the attacker is in their final location, show any damage popup
; 579  : 			if (!pkAttacker->IsDead() && iAttackerDamageDelta != 0)

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?IsDead@CvUnit@@QBE_NXZ			; CvUnit::IsDead
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@ResolveMel
	cmp	DWORD PTR _iAttackerDamageDelta$[ebp], 0
	je	SHORT $LN1@ResolveMel

; 580  : 				CvUnit::ShowDamageDeltaText(iAttackerDamageDelta, pkAttacker->plot());

	push	0
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	push	eax
	mov	edx, DWORD PTR _iAttackerDamageDelta$[ebp]
	push	edx
	call	?ShowDamageDeltaText@CvUnit@@SAXHPAVCvPlot@@MPBVCvString@@@Z ; CvUnit::ShowDamageDeltaText
	add	esp, 16					; 00000010H
$LN1@ResolveMel:

; 581  : 		}
; 582  : 
; 583  : 		// Report that combat is over in case we want to queue another attack
; 584  : 		GET_PLAYER(pkAttacker->getOwner()).GetTacticalAI()->CombatResolved(pkAttacker, bDefenderDead);

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T224421[ebp], ecx
	mov	edx, DWORD PTR $T224421[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224425[ebp], edx
	push	0
	movzx	eax, BYTE PTR _bDefenderDead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T224425[ebp]
	call	?GetTacticalAI@CvPlayer@@QBEPAVCvTacticalAI@@XZ ; CvPlayer::GetTacticalAI
	mov	ecx, eax
	call	?CombatResolved@CvTacticalAI@@QAEXPAX_N1@Z ; CvTacticalAI::CombatResolved
$LN17@ResolveMel:

; 585  : 	}
; 586  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$0:
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$2:
	lea	ecx, DWORD PTR _pAttacker$221247[ebp]
	jmp	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ	; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$3:
	lea	ecx, DWORD PTR $T223784[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$4:
	lea	ecx, DWORD PTR $T223788[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$6:
	lea	ecx, DWORD PTR _pDefender$221305[ebp]
	jmp	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ	; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$7:
	lea	ecx, DWORD PTR $T223793[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$8:
	lea	ecx, DWORD PTR $T223796[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$9:
	lea	ecx, DWORD PTR $T223800[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$10:
	lea	ecx, DWORD PTR _strSummary$221356[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$11:
	lea	ecx, DWORD PTR $T223803[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$12:
	lea	ecx, DWORD PTR $T223806[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$14:
	lea	ecx, DWORD PTR _pDllAttacker$221411[ebp]
	jmp	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ	; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
__ehhandler$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-952]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ENDP ; CvUnitCombat::ResolveMeleeCombat
EXTRN	?quickCombat@CvPreGame@@YA_NXZ:PROC		; CvPreGame::quickCombat
; Function compile flags: /Odtp
;	COMDAT ?GetPostCombatDelay@@YAHXZ
_TEXT	SEGMENT
?GetPostCombatDelay@@YAHXZ PROC				; GetPostCombatDelay, COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp

; 33   : 	return CvPreGame::quickCombat()?POST_QUICK_COMBAT_DELAY:POST_COMBAT_DELAY;

	call	?quickCombat@CvPreGame@@YA_NXZ		; CvPreGame::quickCombat
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	and	eax, 109				; 0000006dH
	add	eax, 1

; 34   : }

	pop	ebp
	ret	0
?GetPostCombatDelay@@YAHXZ ENDP				; GetPostCombatDelay
_TEXT	ENDS
PUBLIC	?GenerateRangedCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z ; CvUnitCombat::GenerateRangedCombatInfo
EXTRN	?isRangedSupportFire@CvUnit@@QBE_NXZ:PROC	; CvUnit::isRangedSupportFire
EXTRN	?GetRangeCombatDamage@CvUnit@@QBEHPBV1@PAVCvCity@@_NH@Z:PROC ; CvUnit::GetRangeCombatDamage
; Function compile flags: /Odtp
;	COMDAT ?GenerateRangedCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z
_TEXT	SEGMENT
tv323 = -148						; size = 4
tv285 = -144						; size = 4
tv357 = -140						; size = 4
tv78 = -136						; size = 4
$T224608 = -132						; size = 4
$T224604 = -128						; size = 4
$T224595 = -124						; size = 4
$T224588 = -120						; size = 4
$T224584 = -116						; size = 4
$T224583 = -112						; size = 4
$T224559 = -96						; size = 4
$T224555 = -92						; size = 4
$T224541 = -84						; size = 4
$T224537 = -80						; size = 4
$T224522 = -76						; size = 4
$T224516 = -72						; size = 4
$T224512 = -68						; size = 4
$T224489 = -60						; size = 4
$T224483 = -56						; size = 4
$T224479 = -52						; size = 4
$T224453 = -44						; size = 4
$T224452 = -40						; size = 4
$T224451 = -36						; size = 4
$T224450 = -32						; size = 4
_pCity$221435 = -28					; size = 4
_iMaxXP$ = -24						; size = 4
_iTotalDamage$ = -20					; size = 4
_iExperience$ = -16					; size = 4
_iDamage$ = -12						; size = 4
_bIsGlobalXPAwarded$ = -6				; size = 1
_bBarbarian$ = -5					; size = 1
_eDefenderOwner$ = -4					; size = 4
_kAttacker$ = 8						; size = 4
_pkDefender$ = 12					; size = 4
_plot$ = 16						; size = 4
_pkCombatInfo$ = 20					; size = 4
?GenerateRangedCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z PROC ; CvUnitCombat::GenerateRangedCombatInfo, COMDAT

; 599  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	push	esi

; 600  : 	pkCombatInfo->setUnit(BATTLE_UNIT_ATTACKER, &kAttacker);

	mov	eax, DWORD PTR _kAttacker$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvCombatInfo::setUnit

; 601  : 	pkCombatInfo->setUnit(BATTLE_UNIT_DEFENDER, pkDefender);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvCombatInfo::setUnit

; 602  : 	pkCombatInfo->setPlot(&plot);

	mov	edx, DWORD PTR _plot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setPlot@CvCombatInfo@@QAEXPAVCvPlot@@@Z ; CvCombatInfo::setPlot

; 603  : 
; 604  : 	//////////////////////////////////////////////////////////////////////
; 605  : 
; 606  : 	bool bBarbarian = false;

	mov	BYTE PTR _bBarbarian$[ebp], 0

; 607  : 	int iExperience = 0;

	mov	DWORD PTR _iExperience$[ebp], 0

; 608  : 	int iMaxXP = 0;

	mov	DWORD PTR _iMaxXP$[ebp], 0

; 609  : 	int iDamage = 0;

	mov	DWORD PTR _iDamage$[ebp], 0

; 610  : 	int iTotalDamage = 0;

	mov	DWORD PTR _iTotalDamage$[ebp], 0

; 611  : #ifdef DEL_RANGED_COUNTERATTACKS
; 612  : 	int iDamageToAttacker = 0;
; 613  : 	int iTotalDamageToAttacker = 0;
; 614  : 	const CvPlot* pFromPlot = kAttacker.plot();
; 615  : 	const int iMaxHP = GC.getMAX_HIT_POINTS();
; 616  : #endif
; 617  : 	PlayerTypes eDefenderOwner;
; 618  : 	if(!plot.isCity())

	mov	ecx, DWORD PTR _plot$[ebp]
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	movzx	eax, al
	test	eax, eax
	jne	$LN8@GenerateRa

; 619  : 	{
; 620  : 		CvAssert(pkDefender != NULL);
; 621  : 
; 622  : 		eDefenderOwner = pkDefender->getOwner();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _eDefenderOwner$[ebp], edx

; 623  : 
; 624  : 		iExperience = /*2*/ GC.getEXPERIENCE_ATTACKING_UNIT_RANGED();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7528
	mov	DWORD PTR _iExperience$[ebp], eax

; 625  : 		if(pkDefender->isBarbarian())

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@GenerateRa

; 626  : 			bBarbarian = true;

	mov	BYTE PTR _bBarbarian$[ebp], 1
$LN7@GenerateRa:

; 627  : 		iMaxXP = pkDefender->maxXPValue();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?maxXPValue@CvUnit@@QBEHXZ		; CvUnit::maxXPValue
	mov	DWORD PTR _iMaxXP$[ebp], eax

; 628  : 
; 629  : 		//CvAssert(pkDefender->IsCanDefend());
; 630  : 
; 631  : 		iDamage = kAttacker.GetRangeCombatDamage(pkDefender, /*pCity*/ NULL, /*bIncludeRand*/ true);

	push	0
	push	1
	push	0
	mov	edx, DWORD PTR _pkDefender$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetRangeCombatDamage@CvUnit@@QBEHPBV1@PAVCvCity@@_NH@Z ; CvUnit::GetRangeCombatDamage
	mov	DWORD PTR _iDamage$[ebp], eax

; 632  : #ifdef DEL_RANGED_COUNTERATTACKS
; 633  : 		iTotalDamage = pkDefender->getDamage() + iDamage;
; 634  : 
; 635  : 		if (GC.getGame().isOption("GAMEOPTION_ENABLE_RANGED_COUNTERATTACKS"))
; 636  : 		{
; 637  : 			if (!kAttacker.isRangedSupportFire() && !pkDefender->IsCityAttackOnly() &&
; 638  : 				// Ranged unit counterattacks
; 639  : 				(pkDefender->canRangeStrike() && pkDefender->canEverRangeStrikeAt(pFromPlot->getX(), pFromPlot->getY())) || 
; 640  : 				// Melee unit counterattacks
; 641  : 				(pkDefender->IsCanAttackWithMove() && plot.isAdjacent(pFromPlot) && pkDefender->PlotValid(pFromPlot) && pkDefender->PlotValid(&plot)))
; 642  : 			{
; 643  : 				if (pkDefender->IsCanAttackRanged())
; 644  : 				{
; 645  : 					iDamageToAttacker = pkDefender->GetRangeCombatDamage(&kAttacker, NULL, true);
; 646  : 				}
; 647  : 				else if (iTotalDamage < iMaxHP)
; 648  : 				{
; 649  : 					// Melee unit (defender) is counterattacking by attacking into the plot from which they were bombarded, where the attacker is
; 650  : 					int iAttackerStrength = kAttacker.GetMaxDefenseStrength(pFromPlot, pkDefender);
; 651  : 					int iDefenderStrength = pkDefender->GetMaxAttackStrength(&plot, pFromPlot, &kAttacker);
; 652  : 					iDamageToAttacker = pkDefender->getCombatDamage(iDefenderStrength, iAttackerStrength, iTotalDamage, /*bIncludeRand*/ true, /*bAttackerIsCity*/ false, /*bDefenderIsCity*/ false);
; 653  : 				}
; 654  : 			}
; 655  : 
; 656  : 			iTotalDamageToAttacker = iDamageToAttacker + kAttacker.getDamage();
; 657  : 
; 658  : 			// Will both units be killed by this? If so, take drastic corrective measures
; 659  : 			if (iTotalDamage >= iMaxHP && iTotalDamageToAttacker >= iMaxHP)
; 660  : 			{
; 661  : 				// He who hath the least amount of damage survives with 1 HP left
; 662  : 				if (iTotalDamage > iTotalDamageToAttacker)
; 663  : 				{
; 664  : 					iDamageToAttacker = iMaxHP - kAttacker.getDamage() - 1;
; 665  : 					iTotalDamageToAttacker = iMaxHP - 1;
; 666  : 					iTotalDamage = iMaxHP;
; 667  : 				}
; 668  : 				else
; 669  : 				{
; 670  : 					iDamage = iMaxHP - pkDefender->getDamage() - 1;
; 671  : 					iTotalDamage = iMaxHP - 1;
; 672  : 					iTotalDamageToAttacker = iMaxHP;
; 673  : 				}
; 674  : 			}
; 675  : 		}
; 676  : #else
; 677  : 		if(iDamage + pkDefender->getDamage() > GC.getMAX_HIT_POINTS())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T224479[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	add	eax, DWORD PTR _iDamage$[ebp]
	cmp	eax, DWORD PTR $T224479[ebp]
	jle	SHORT $LN6@GenerateRa

; 678  : 		{
; 679  : 			iDamage = GC.getMAX_HIT_POINTS() - pkDefender->getDamage();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T224483[ebp], ecx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	edx, DWORD PTR $T224483[ebp]
	sub	edx, eax
	mov	DWORD PTR _iDamage$[ebp], edx
$LN6@GenerateRa:

; 680  : 		}
; 681  : 
; 682  : 		iTotalDamage = std::max(pkDefender->getDamage(), pkDefender->getDamage() + iDamage);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	add	eax, DWORD PTR _iDamage$[ebp]
	mov	DWORD PTR $T224450[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	DWORD PTR $T224451[ebp], eax
	mov	eax, DWORD PTR $T224451[ebp]
	cmp	eax, DWORD PTR $T224450[ebp]
	jge	SHORT $LN34@GenerateRa
	lea	ecx, DWORD PTR $T224450[ebp]
	mov	DWORD PTR tv78[ebp], ecx
	jmp	SHORT $LN35@GenerateRa
$LN34@GenerateRa:
	lea	edx, DWORD PTR $T224451[ebp]
	mov	DWORD PTR tv78[ebp], edx
$LN35@GenerateRa:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR $T224489[ebp], eax
	mov	ecx, DWORD PTR $T224489[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _iTotalDamage$[ebp], edx

; 683  : #endif
; 684  : 	}
; 685  : 	else

	jmp	$LN5@GenerateRa
$LN8@GenerateRa:

; 686  : 	{
; 687  : 		if (kAttacker.isRangedSupportFire()) return; // can't attack cities with this

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isRangedSupportFire@CvUnit@@QBE_NXZ	; CvUnit::isRangedSupportFire
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@GenerateRa
	jmp	$LN9@GenerateRa
$LN4@GenerateRa:

; 688  : 
; 689  : 		CvCity* pCity = plot.getPlotCity();

	mov	ecx, DWORD PTR _plot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$221435[ebp], eax

; 690  : 		CvAssert(pCity != NULL);
; 691  : 		if(!pCity) return;

	cmp	DWORD PTR _pCity$221435[ebp], 0
	jne	SHORT $LN41@GenerateRa
	jmp	$LN9@GenerateRa

; 692  : 
; 693  : 		eDefenderOwner = plot.getOwner();

$LN41@GenerateRa:
	mov	ecx, DWORD PTR _plot$[ebp]
	movsx	edx, BYTE PTR [ecx+4]
	mov	DWORD PTR _eDefenderOwner$[ebp], edx

; 694  : 		/*		iDefenderStrength = pCity->getStrengthValue() / 2;
; 695  : 		iOldDamage = pCity->getDamage();*/
; 696  : 
; 697  : 		iExperience = /*3*/ GC.getEXPERIENCE_ATTACKING_CITY_RANGED();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7552
	mov	DWORD PTR _iExperience$[ebp], eax

; 698  : 
; 699  : 		if(pCity->isBarbarian())

	mov	ecx, DWORD PTR _pCity$221435[ebp]
	call	?isBarbarian@CvCity@@QBE_NXZ		; CvCity::isBarbarian
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN47@GenerateRa

; 700  : 			bBarbarian = true;

	mov	BYTE PTR _bBarbarian$[ebp], 1

; 701  : 		iMaxXP = (GET_PLAYER(pCity->getOwner()).isMinorCiv()) ? 30 : 1000; // NQMP GJS - cap XP from fighting CS to 30

$LN47@GenerateRa:
	mov	edx, DWORD PTR _pCity$221435[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T224512[ebp], eax
	mov	ecx, DWORD PTR $T224512[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224516[ebp], ecx
	mov	ecx, DWORD PTR $T224516[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	edx, al
	neg	edx
	sbb	edx, edx
	and	edx, -970				; fffffc36H
	add	edx, 1000				; 000003e8H
	mov	DWORD PTR _iMaxXP$[ebp], edx

; 702  : 
; 703  : 		iDamage = kAttacker.GetRangeCombatDamage(/*pDefender*/ NULL, pCity, /*bIncludeRand*/ true);

	push	0
	push	1
	mov	eax, DWORD PTR _pCity$221435[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetRangeCombatDamage@CvUnit@@QBEHPBV1@PAVCvCity@@_NH@Z ; CvUnit::GetRangeCombatDamage
	mov	DWORD PTR _iDamage$[ebp], eax

; 704  : 
; 705  : 		// Cities can't be knocked to less than 1 HP
; 706  : 		if(iDamage + pCity->getDamage() >= pCity->GetMaxHitPoints())

	mov	ecx, DWORD PTR _pCity$221435[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	mov	esi, eax
	add	esi, DWORD PTR _iDamage$[ebp]
	mov	ecx, DWORD PTR _pCity$221435[ebp]
	call	?GetMaxHitPoints@CvCity@@QBEHXZ		; CvCity::GetMaxHitPoints
	cmp	esi, eax
	jl	SHORT $LN1@GenerateRa

; 707  : 		{
; 708  : 			iDamage = pCity->GetMaxHitPoints() - pCity->getDamage() - 1;

	mov	ecx, DWORD PTR _pCity$221435[ebp]
	call	?GetMaxHitPoints@CvCity@@QBEHXZ		; CvCity::GetMaxHitPoints
	mov	esi, eax
	mov	ecx, DWORD PTR _pCity$221435[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	sub	esi, eax
	sub	esi, 1
	mov	DWORD PTR _iDamage$[ebp], esi
$LN1@GenerateRa:

; 709  : 		}
; 710  : 
; 711  : #ifdef DEL_RANGED_COUNTERATTACKS
; 712  : 		iTotalDamage = pCity->getDamage() + iDamage;
; 713  : 
; 714  : 		if (GC.getGame().isOption("GAMEOPTION_ENABLE_RANGED_COUNTERATTACKS"))
; 715  : 		{
; 716  : 			if (pCity->canRangeStrikeAt(pFromPlot->getX(), pFromPlot->getY(), true))
; 717  : 			{
; 718  : 				iDamageToAttacker = pCity->rangeCombatDamage(&kAttacker, NULL, true);
; 719  : 			}
; 720  : 
; 721  : 			iTotalDamageToAttacker = iDamageToAttacker + kAttacker.getDamage();
; 722  : 		}
; 723  : #else
; 724  : 		iTotalDamage = std::max(pCity->getDamage(), pCity->getDamage() + iDamage);

	mov	ecx, DWORD PTR _pCity$221435[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	add	eax, DWORD PTR _iDamage$[ebp]
	mov	DWORD PTR $T224452[ebp], eax
	mov	ecx, DWORD PTR _pCity$221435[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	mov	DWORD PTR $T224453[ebp], eax
	mov	ecx, DWORD PTR $T224453[ebp]
	cmp	ecx, DWORD PTR $T224452[ebp]
	jge	SHORT $LN53@GenerateRa
	lea	edx, DWORD PTR $T224452[ebp]
	mov	DWORD PTR tv357[ebp], edx
	jmp	SHORT $LN54@GenerateRa
$LN53@GenerateRa:
	lea	eax, DWORD PTR $T224453[ebp]
	mov	DWORD PTR tv357[ebp], eax
$LN54@GenerateRa:
	mov	ecx, DWORD PTR tv357[ebp]
	mov	DWORD PTR $T224522[ebp], ecx
	mov	edx, DWORD PTR $T224522[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _iTotalDamage$[ebp], eax
$LN5@GenerateRa:

; 725  : #endif
; 726  : 	}
; 727  : 	//////////////////////////////////////////////////////////////////////
; 728  : 
; 729  : #ifdef DEL_RANGED_COUNTERATTACKS
; 730  : 	pkCombatInfo->setFinalDamage(BATTLE_UNIT_ATTACKER, iTotalDamageToAttacker);				// Total damage to the unit
; 731  : #else
; 732  : 	pkCombatInfo->setFinalDamage(BATTLE_UNIT_ATTACKER, 0);				// Total damage to the unit

	push	0
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFinalDamage

; 733  : #endif
; 734  : 	pkCombatInfo->setDamageInflicted(BATTLE_UNIT_ATTACKER, iDamage);		// Damage inflicted this round

	mov	ecx, DWORD PTR _iDamage$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted

; 735  : 	pkCombatInfo->setFinalDamage(BATTLE_UNIT_DEFENDER, iTotalDamage);		// Total damage to the unit

	mov	edx, DWORD PTR _iTotalDamage$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFinalDamage

; 736  : #ifdef DEL_RANGED_COUNTERATTACKS
; 737  : 	pkCombatInfo->setDamageInflicted(BATTLE_UNIT_DEFENDER, iDamageToAttacker);			// Damage inflicted this round
; 738  : #else
; 739  : 	pkCombatInfo->setDamageInflicted(BATTLE_UNIT_DEFENDER, 0);			// Damage inflicted this round

	push	0
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted

; 740  : #endif
; 741  : 
; 742  : 	// Fear Damage
; 743  : 	pkCombatInfo->setFearDamageInflicted(BATTLE_UNIT_ATTACKER, 0);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFearDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFearDamageInflicted

; 744  : 	// pkCombatInfo->setFearDamageInflicted( BATTLE_UNIT_DEFENDER, 0 );
; 745  : 
; 746  : 	pkCombatInfo->setExperience(BATTLE_UNIT_ATTACKER, iExperience);

	mov	eax, DWORD PTR _iExperience$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience

; 747  : 	pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_ATTACKER, iMaxXP);

	mov	ecx, DWORD PTR _iMaxXP$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed

; 748  : 	pkCombatInfo->setInBorders(BATTLE_UNIT_ATTACKER, plot.getOwner() == eDefenderOwner);

	mov	edx, DWORD PTR _plot$[ebp]
	movsx	eax, BYTE PTR [edx+4]
	cmp	eax, DWORD PTR _eDefenderOwner$[ebp]
	sete	cl
	movzx	edx, cl
	push	edx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders

; 749  : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 750  : 	bool bIsGlobalXPAwarded = !kAttacker.isBarbarian() && !GET_PLAYER(kAttacker.getOwner()).isMinorCiv() && 
; 751  : 		(plot.isCity() || (!pkDefender->isBarbarian() && !GET_PLAYER(pkDefender->getOwner()).isMinorCiv())) &&
; 752  : 		(!plot.isCity() || (!plot.getPlotCity()->isBarbarian() && !GET_PLAYER(plot.getPlotCity()->getOwner()).isMinorCiv()));

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	eax, al
	test	eax, eax
	jne	$LN12@GenerateRa
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224537[ebp], edx
	mov	eax, DWORD PTR $T224537[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224541[ebp], eax
	mov	ecx, DWORD PTR $T224541[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN12@GenerateRa
	mov	ecx, DWORD PTR _plot$[ebp]
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN13@GenerateRa
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	eax, al
	test	eax, eax
	jne	$LN12@GenerateRa
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224555[ebp], edx
	mov	eax, DWORD PTR $T224555[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224559[ebp], eax
	mov	ecx, DWORD PTR $T224559[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN12@GenerateRa
$LN13@GenerateRa:
	mov	ecx, DWORD PTR _plot$[ebp]
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN15@GenerateRa
	mov	ecx, DWORD PTR _plot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	ecx, eax
	call	?isBarbarian@CvCity@@QBE_NXZ		; CvCity::isBarbarian
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN12@GenerateRa
	mov	ecx, DWORD PTR _plot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR $T224583[ebp], eax
	mov	ecx, DWORD PTR $T224583[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T224584[ebp], edx
	mov	eax, DWORD PTR $T224584[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224588[ebp], eax
	mov	ecx, DWORD PTR $T224588[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN12@GenerateRa
$LN15@GenerateRa:
	mov	DWORD PTR tv285[ebp], 1
	jmp	SHORT $LN16@GenerateRa
$LN12@GenerateRa:
	mov	DWORD PTR tv285[ebp], 0
$LN16@GenerateRa:
	mov	dl, BYTE PTR tv285[ebp]
	mov	BYTE PTR _bIsGlobalXPAwarded$[ebp], dl

; 753  : 	pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, bIsGlobalXPAwarded);

	movzx	eax, BYTE PTR _bIsGlobalXPAwarded$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal

; 754  : #else
; 755  : 	pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, !kAttacker.isBarbarian());
; 756  : #endif
; 757  : 
; 758  : 	iExperience = /*2*/ GC.getEXPERIENCE_DEFENDING_UNIT_RANGED();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7532
	mov	DWORD PTR _iExperience$[ebp], ecx

; 759  : 	pkCombatInfo->setExperience(BATTLE_UNIT_DEFENDER, iExperience);

	mov	edx, DWORD PTR _iExperience$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience

; 760  : 	pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_DEFENDER, kAttacker.maxXPValue());

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?maxXPValue@CvUnit@@QBEHXZ		; CvUnit::maxXPValue
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed

; 761  : 	pkCombatInfo->setInBorders(BATTLE_UNIT_DEFENDER, plot.getOwner() == kAttacker.getOwner());

	mov	eax, DWORD PTR _plot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR $T224595[ebp], ecx
	mov	edx, DWORD PTR _kAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T224604[ebp], eax
	mov	ecx, DWORD PTR $T224595[ebp]
	cmp	ecx, DWORD PTR $T224604[ebp]
	sete	dl
	movzx	eax, dl
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders

; 762  : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 763  : 	pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_DEFENDER, bIsGlobalXPAwarded);

	movzx	ecx, BYTE PTR _bIsGlobalXPAwarded$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal

; 764  : #else
; 765  : 	pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_DEFENDER, !bBarbarian && !kAttacker.isBarbarian());
; 766  : #endif
; 767  : 
; 768  : 	pkCombatInfo->setAttackIsRanged(true);

	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setAttackIsRanged@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setAttackIsRanged

; 769  : #ifdef DEL_RANGED_COUNTERATTACKS
; 770  : 	pkCombatInfo->setDefenderRetaliates(iDamageToAttacker > 0);
; 771  : #else
; 772  : 	// Defender doesn't retaliate.  We'll keep this separate from the ranged attack flag in case something changes to allow
; 773  : 	// some units to retaliate on a ranged attack (Archer vs. Archers maybe?)
; 774  : 	pkCombatInfo->setDefenderRetaliates(false);

	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDefenderRetaliates@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setDefenderRetaliates

; 775  : #endif
; 776  : 
; 777  : 	GC.GetEngineUserInterface()->setDirty(UnitInfo_DIRTY_BIT, true);

	mov	edx, DWORD PTR $T224608[ebp]
	mov	DWORD PTR tv323[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv323[ebp], eax
	push	1
	push	19					; 00000013H
	mov	ecx, DWORD PTR tv323[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv323[ebp]
	mov	eax, DWORD PTR [edx+260]
	call	eax
$LN9@GenerateRa:

; 778  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateRangedCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z ENDP ; CvUnitCombat::GenerateRangedCombatInfo
_TEXT	ENDS
PUBLIC	?GenerateRangedCombatInfo@CvUnitCombat@@SAXAAVCvCity@@PAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z ; CvUnitCombat::GenerateRangedCombatInfo
EXTRN	?rangeCombatDamage@CvCity@@QBEHPBVCvUnit@@PAV1@_N@Z:PROC ; CvCity::rangeCombatDamage
EXTRN	?setCity@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvCity@@@Z:PROC ; CvCombatInfo::setCity
; Function compile flags: /Odtp
;	COMDAT ?GenerateRangedCombatInfo@CvUnitCombat@@SAXAAVCvCity@@PAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z
_TEXT	SEGMENT
tv247 = -100						; size = 4
tv198 = -96						; size = 4
tv76 = -92						; size = 4
$T224706 = -88						; size = 4
$T224702 = -84						; size = 4
$T224693 = -80						; size = 4
$T224689 = -76						; size = 4
$T224685 = -72						; size = 4
$T224673 = -68						; size = 4
$T224669 = -64						; size = 4
$T224660 = -60						; size = 4
$T224656 = -56						; size = 4
$T224641 = -52						; size = 4
$T224635 = -48						; size = 4
$T224631 = -44						; size = 4
$T224612 = -36						; size = 4
$T224611 = -32						; size = 4
_iTotalDamage$ = -28					; size = 4
_iExperience$ = -24					; size = 4
_iDamage$ = -20						; size = 4
_bIsGlobalXPAwarded$ = -13				; size = 1
_iMaxExperience$ = -12					; size = 4
_bBarbarian$ = -5					; size = 1
_eDefenderOwner$ = -4					; size = 4
_kAttacker$ = 8						; size = 4
_pkDefender$ = 12					; size = 4
_plot$ = 16						; size = 4
_pkCombatInfo$ = 20					; size = 4
?GenerateRangedCombatInfo@CvUnitCombat@@SAXAAVCvCity@@PAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z PROC ; CvUnitCombat::GenerateRangedCombatInfo, COMDAT

; 792  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H

; 793  : 	pkCombatInfo->setCity(BATTLE_UNIT_ATTACKER, &kAttacker);

	mov	eax, DWORD PTR _kAttacker$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setCity@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvCity@@@Z ; CvCombatInfo::setCity

; 794  : 	pkCombatInfo->setUnit(BATTLE_UNIT_DEFENDER, pkDefender);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvCombatInfo::setUnit

; 795  : 	pkCombatInfo->setPlot(&plot);

	mov	edx, DWORD PTR _plot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setPlot@CvCombatInfo@@QAEXPAVCvPlot@@@Z ; CvCombatInfo::setPlot

; 796  : 
; 797  : 	//////////////////////////////////////////////////////////////////////
; 798  : 
; 799  : 	bool bBarbarian = false;

	mov	BYTE PTR _bBarbarian$[ebp], 0

; 800  : 	int iDamage = 0;

	mov	DWORD PTR _iDamage$[ebp], 0

; 801  : 	int iTotalDamage = 0;

	mov	DWORD PTR _iTotalDamage$[ebp], 0

; 802  : 	PlayerTypes eDefenderOwner = NO_PLAYER;

	mov	DWORD PTR _eDefenderOwner$[ebp], -1

; 803  : #ifdef DEL_RANGED_COUNTERATTACKS
; 804  : 	int iDamageToAttacker = 0;
; 805  : 	int iTotalDamageToAttacker = 0;
; 806  : 	const CvPlot* pFromPlot = kAttacker.plot();
; 807  : 	const int iMaxHP = GC.getMAX_HIT_POINTS();
; 808  : #endif
; 809  : 	if(!plot.isCity())

	mov	ecx, DWORD PTR _plot$[ebp]
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	movzx	eax, al
	test	eax, eax
	jne	$LN1@GenerateRa@2

; 810  : 	{
; 811  : 		CvAssert(pkDefender != NULL);
; 812  : 
; 813  : 		eDefenderOwner = pkDefender->getOwner();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _eDefenderOwner$[ebp], edx

; 814  : 
; 815  : 		if(pkDefender->isBarbarian())

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@GenerateRa@2

; 816  : 			bBarbarian = true;

	mov	BYTE PTR _bBarbarian$[ebp], 1
$LN3@GenerateRa@2:

; 817  : 
; 818  : 		//CvAssert(pkDefender->IsCanDefend());
; 819  : 
; 820  : 		iDamage = kAttacker.rangeCombatDamage(pkDefender);

	push	1
	push	0
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?rangeCombatDamage@CvCity@@QBEHPBVCvUnit@@PAV1@_N@Z ; CvCity::rangeCombatDamage
	mov	DWORD PTR _iDamage$[ebp], eax

; 821  : 
; 822  : #ifdef DEL_RANGED_COUNTERATTACKS
; 823  : 		iTotalDamage = pkDefender->getDamage() + iDamage;
; 824  : 
; 825  : 		if (GC.getGame().isOption("GAMEOPTION_ENABLE_RANGED_COUNTERATTACKS"))
; 826  : 		{
; 827  : 			if (// Ranged unit counterattacks
; 828  : 				(pkDefender->canRangeStrike() && pkDefender->canEverRangeStrikeAt(pFromPlot->getX(), pFromPlot->getY())) ||
; 829  : 				// Melee unit counterattacks
; 830  : 				(pkDefender->IsCanAttackWithMove() && plot.isAdjacent(pFromPlot) && pkDefender->PlotValid(pFromPlot) && pkDefender->PlotValid(&plot)))
; 831  : 			{
; 832  : 				if (pkDefender->IsCanAttackRanged())
; 833  : 				{
; 834  : 					iDamageToAttacker = pkDefender->GetRangeCombatDamage(NULL, &kAttacker, true);
; 835  : 				}
; 836  : 				else if (iTotalDamage < iMaxHP)
; 837  : 				{
; 838  : 					// Melee unit (defender) is counterattacking by attacking into the plot from which they were bombarded, where the attacker is
; 839  : 					int iAttackerStrength = kAttacker.getStrengthValue();
; 840  : 					int iDefenderStrength = pkDefender->GetMaxAttackStrength(&plot, pFromPlot, NULL);
; 841  : 					iDefenderStrength *= /*40*/ GC.getCITY_RANGED_ATTACK_STRENGTH_MULTIPLIER();
; 842  : 					iDefenderStrength /= 100;
; 843  : 
; 844  : 					// Damage steps: city deals ranged damage to melee unit -> unit deals melee damage to city with the same -60% strength penalty that cities have for ranged attacks
; 845  : 					iDamageToAttacker = pkDefender->getCombatDamage(iDefenderStrength, iAttackerStrength, iTotalDamage, /*bIncludeRand*/ true, /*bAttackerIsCity*/ false, /*bDefenderIsCity*/ true);
; 846  : 				}
; 847  : 			}
; 848  : 
; 849  : 			iTotalDamageToAttacker = iDamageToAttacker + kAttacker.getDamage();
; 850  : 
; 851  : 			// Cities can't be knocked to less than 1 HP by counterattacks
; 852  : 			if (iTotalDamageToAttacker >= kAttacker.GetMaxHitPoints())
; 853  : 			{
; 854  : 				iTotalDamageToAttacker = kAttacker.GetMaxHitPoints() - kAttacker.getDamage() - 1;
; 855  : 			}
; 856  : 		}
; 857  : #else
; 858  : 		if(iDamage + pkDefender->getDamage() > GC.getMAX_HIT_POINTS())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T224631[ebp], edx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	add	eax, DWORD PTR _iDamage$[ebp]
	cmp	eax, DWORD PTR $T224631[ebp]
	jle	SHORT $LN2@GenerateRa@2

; 859  : 		{
; 860  : 			iDamage = GC.getMAX_HIT_POINTS() - pkDefender->getDamage();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T224635[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	ecx, DWORD PTR $T224635[ebp]
	sub	ecx, eax
	mov	DWORD PTR _iDamage$[ebp], ecx
$LN2@GenerateRa@2:

; 861  : 		}
; 862  : 
; 863  : 		iTotalDamage = std::max(pkDefender->getDamage(), pkDefender->getDamage() + iDamage);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	add	eax, DWORD PTR _iDamage$[ebp]
	mov	DWORD PTR $T224611[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	DWORD PTR $T224612[ebp], eax
	mov	edx, DWORD PTR $T224612[ebp]
	cmp	edx, DWORD PTR $T224611[ebp]
	jge	SHORT $LN24@GenerateRa@2
	lea	eax, DWORD PTR $T224611[ebp]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN25@GenerateRa@2
$LN24@GenerateRa@2:
	lea	ecx, DWORD PTR $T224612[ebp]
	mov	DWORD PTR tv76[ebp], ecx
$LN25@GenerateRa@2:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T224641[ebp], edx
	mov	eax, DWORD PTR $T224641[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _iTotalDamage$[ebp], ecx
$LN1@GenerateRa@2:

; 864  : #endif
; 865  : 	}
; 866  : 	else
; 867  : 	{
; 868  : 		FAssertMsg(false, "City vs. City not supported.");	// Don't even think about it Jon....
; 869  : 	}
; 870  : 
; 871  : 	//////////////////////////////////////////////////////////////////////
; 872  : 
; 873  : #ifdef DEL_RANGED_COUNTERATTACKS
; 874  : 	pkCombatInfo->setFinalDamage(BATTLE_UNIT_ATTACKER, iTotalDamageToAttacker);				// Total damage to the unit
; 875  : #else
; 876  : 	pkCombatInfo->setFinalDamage(BATTLE_UNIT_ATTACKER, 0);				// Total damage to the unit

	push	0
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFinalDamage

; 877  : #endif
; 878  : 	pkCombatInfo->setDamageInflicted(BATTLE_UNIT_ATTACKER, iDamage);		// Damage inflicted this round

	mov	edx, DWORD PTR _iDamage$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted

; 879  : 	pkCombatInfo->setFinalDamage(BATTLE_UNIT_DEFENDER, iTotalDamage);		// Total damage to the unit

	mov	eax, DWORD PTR _iTotalDamage$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFinalDamage

; 880  : #ifdef DEL_RANGED_COUNTERATTACKS
; 881  : 	pkCombatInfo->setDamageInflicted(BATTLE_UNIT_DEFENDER, iDamageToAttacker);			// Damage inflicted this round
; 882  : #else
; 883  : 	pkCombatInfo->setDamageInflicted(BATTLE_UNIT_DEFENDER, 0);			// Damage inflicted this round

	push	0
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted

; 884  : #endif
; 885  : 
; 886  : 	// Fear Damage
; 887  : 	pkCombatInfo->setFearDamageInflicted(BATTLE_UNIT_ATTACKER, 0);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFearDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFearDamageInflicted

; 888  : 	// pkCombatInfo->setFearDamageInflicted( BATTLE_UNIT_DEFENDER, 0 );
; 889  : 
; 890  : 	pkCombatInfo->setExperience(BATTLE_UNIT_ATTACKER, 0);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience

; 891  : 	pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_ATTACKER, 0);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed

; 892  : 	pkCombatInfo->setInBorders(BATTLE_UNIT_ATTACKER, plot.getOwner() == eDefenderOwner);

	mov	ecx, DWORD PTR _plot$[ebp]
	movsx	edx, BYTE PTR [ecx+4]
	cmp	edx, DWORD PTR _eDefenderOwner$[ebp]
	sete	al
	movzx	ecx, al
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders

; 893  : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 894  : 	bool bIsGlobalXPAwarded = !kAttacker.isBarbarian() && !GET_PLAYER(kAttacker.getOwner()).isMinorCiv() && !pkDefender->isBarbarian() && !GET_PLAYER(pkDefender->getOwner()).isMinorCiv();

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isBarbarian@CvCity@@QBE_NXZ		; CvCity::isBarbarian
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN7@GenerateRa@2
	mov	eax, DWORD PTR _kAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T224656[ebp], ecx
	mov	edx, DWORD PTR $T224656[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224660[ebp], edx
	mov	ecx, DWORD PTR $T224660[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@GenerateRa@2
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN7@GenerateRa@2
	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T224669[ebp], eax
	mov	ecx, DWORD PTR $T224669[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224673[ebp], ecx
	mov	ecx, DWORD PTR $T224673[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN7@GenerateRa@2
	mov	DWORD PTR tv198[ebp], 1
	jmp	SHORT $LN8@GenerateRa@2
$LN7@GenerateRa@2:
	mov	DWORD PTR tv198[ebp], 0
$LN8@GenerateRa@2:
	mov	al, BYTE PTR tv198[ebp]
	mov	BYTE PTR _bIsGlobalXPAwarded$[ebp], al

; 895  : 	pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, bIsGlobalXPAwarded);

	movzx	ecx, BYTE PTR _bIsGlobalXPAwarded$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal

; 896  : #else
; 897  : 	pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, !kAttacker.isBarbarian());
; 898  : #endif
; 899  : 
; 900  : 	int iExperience = /*2*/ GC.getEXPERIENCE_DEFENDING_UNIT_RANGED();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7532
	mov	DWORD PTR _iExperience$[ebp], edx

; 901  : 	pkCombatInfo->setExperience(BATTLE_UNIT_DEFENDER, iExperience);

	mov	eax, DWORD PTR _iExperience$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience

; 902  : 	int iMaxExperience = (GET_PLAYER(kAttacker.getOwner()).isMinorCiv()) ? 30 : MAX_INT; // NQMP GJS - cap XP from fighting CS to 30

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T224685[ebp], edx
	mov	eax, DWORD PTR $T224685[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224689[ebp], eax
	mov	ecx, DWORD PTR $T224689[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	and	ecx, -2147483617			; 8000001fH
	add	ecx, 2147483647				; 7fffffffH
	mov	DWORD PTR _iMaxExperience$[ebp], ecx

; 903  : 	pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_DEFENDER, iMaxExperience);

	mov	edx, DWORD PTR _iMaxExperience$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed

; 904  : 	pkCombatInfo->setInBorders(BATTLE_UNIT_DEFENDER, plot.getOwner() == kAttacker.getOwner());

	mov	eax, DWORD PTR _plot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR $T224693[ebp], ecx
	mov	edx, DWORD PTR _kAttacker$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T224702[ebp], eax
	mov	ecx, DWORD PTR $T224693[ebp]
	cmp	ecx, DWORD PTR $T224702[ebp]
	sete	dl
	movzx	eax, dl
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders

; 905  : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 906  : 	pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_DEFENDER, bIsGlobalXPAwarded);

	movzx	ecx, BYTE PTR _bIsGlobalXPAwarded$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal

; 907  : #else
; 908  : 	pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_DEFENDER, !bBarbarian && !kAttacker.isBarbarian());
; 909  : #endif
; 910  : 
; 911  : 	pkCombatInfo->setAttackIsRanged(true);

	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setAttackIsRanged@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setAttackIsRanged

; 912  : #ifdef DEL_RANGED_COUNTERATTACKS
; 913  : 	pkCombatInfo->setDefenderRetaliates(iDamageToAttacker > 0);
; 914  : #else
; 915  : 	// Defender doesn't retaliate.  We'll keep this separate from the ranged attack flag in case something changes to allow
; 916  : 	// some units to retaliate on a ranged attack (Archer vs. Archers maybe?)
; 917  : 	pkCombatInfo->setDefenderRetaliates(false);

	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDefenderRetaliates@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setDefenderRetaliates

; 918  : #endif
; 919  : 
; 920  : 	GC.GetEngineUserInterface()->setDirty(UnitInfo_DIRTY_BIT, true);

	mov	edx, DWORD PTR $T224706[ebp]
	mov	DWORD PTR tv247[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv247[ebp], eax
	push	1
	push	19					; 00000013H
	mov	ecx, DWORD PTR tv247[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv247[ebp]
	mov	eax, DWORD PTR [edx+260]
	call	eax

; 921  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateRangedCombatInfo@CvUnitCombat@@SAXAAVCvCity@@PAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z ENDP ; CvUnitCombat::GenerateRangedCombatInfo
_TEXT	ENDS
PUBLIC	??_C@_0CH@OGLGMFCF@TXT_KEY_MISC_YOUR_CITY_ATTACKED_@ ; `string'
PUBLIC	??_C@_0CF@KOEDAAEG@TXT_KEY_MISC_YOU_ARE_ATTACKED_BY@ ; `string'
PUBLIC	??_C@_0BP@OGGPFFII@TXT_KEY_MISC_YOU_ATTACK_BY_AIR?$AA@ ; `string'
PUBLIC	??_C@_0CP@KDGBDBAA@TXT_KEY_MISC_YOU_ARE_ATTACKED_BY@ ; `string'
PUBLIC	??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z ; GetLocalizedText<char const *,char const *>
PUBLIC	??_C@_0CJ@CEOPEHCM@TXT_KEY_MISC_YOU_ATTACK_BY_AIR_A@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveRangedUnitVsCombat
EXTRN	?clearCombat@CvCity@@QAEXXZ:PROC		; CvCity::clearCombat
EXTRN	?getNameKey@CvCity@@QBEPBDXZ:PROC		; CvCity::getNameKey
EXTRN	?changeDamage@CvCity@@QAEXH@Z:PROC		; CvCity::changeDamage
EXTRN	?IsHeadMission@CvUnitMission@@SAPBUMissionData@@V?$FObjectHandle@VCvUnit@@@@H@Z:PROC ; CvUnitMission::IsHeadMission
EXTRN	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ:PROC ; CvUnit::getDestructionNotification
EXTRN	?getMISSION_WAIT_FOR@CvTypes@@YA?BW4MissionTypes@@XZ:PROC ; CvTypes::getMISSION_WAIT_FOR
;	COMDAT ??_C@_0CH@OGLGMFCF@TXT_KEY_MISC_YOUR_CITY_ATTACKED_@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CH@OGLGMFCF@TXT_KEY_MISC_YOUR_CITY_ATTACKED_@ DB 'TXT_KEY_MISC_YOU'
	DB	'R_CITY_ATTACKED_BY_AIR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KOEDAAEG@TXT_KEY_MISC_YOU_ARE_ATTACKED_BY@
CONST	SEGMENT
??_C@_0CF@KOEDAAEG@TXT_KEY_MISC_YOU_ARE_ATTACKED_BY@ DB 'TXT_KEY_MISC_YOU'
	DB	'_ARE_ATTACKED_BY_AIR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OGGPFFII@TXT_KEY_MISC_YOU_ATTACK_BY_AIR?$AA@
CONST	SEGMENT
??_C@_0BP@OGGPFFII@TXT_KEY_MISC_YOU_ATTACK_BY_AIR?$AA@ DB 'TXT_KEY_MISC_Y'
	DB	'OU_ATTACK_BY_AIR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@KDGBDBAA@TXT_KEY_MISC_YOU_ARE_ATTACKED_BY@
CONST	SEGMENT
??_C@_0CP@KDGBDBAA@TXT_KEY_MISC_YOU_ARE_ATTACKED_BY@ DB 'TXT_KEY_MISC_YOU'
	DB	'_ARE_ATTACKED_BY_AIR_AND_DEATH', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CEOPEHCM@TXT_KEY_MISC_YOU_ATTACK_BY_AIR_A@
CONST	SEGMENT
??_C@_0CJ@CEOPEHCM@TXT_KEY_MISC_YOU_ATTACK_BY_AIR_A@ DB 'TXT_KEY_MISC_YOU'
	DB	'_ATTACK_BY_AIR_AND_DEATH', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$7
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
_TEXT	SEGMENT
tv747 = -556						; size = 4
tv520 = -552						; size = 4
tv519 = -548						; size = 4
tv746 = -544						; size = 4
tv197 = -540						; size = 4
tv264 = -536						; size = 4
tv76 = -532						; size = 4
tv527 = -528						; size = 4
$T225026 = -524						; size = 4
$T225022 = -520						; size = 4
$T225013 = -516						; size = 4
$T225004 = -512						; size = 4
$T225000 = -508						; size = 4
$T224992 = -504						; size = 4
$T224988 = -500						; size = 4
$T224984 = -496						; size = 4
$T224970 = -488						; size = 4
$T224960 = -484						; size = 4
$T224951 = -480						; size = 4
$T224942 = -476						; size = 4
$T224938 = -472						; size = 4
$T224934 = -468						; size = 4
$T224930 = -464						; size = 4
$T224917 = -460						; size = 4
$T224913 = -456						; size = 4
$T224904 = -452						; size = 4
$T224900 = -448						; size = 4
$T224892 = -444						; size = 4
$T224888 = -440						; size = 4
$T224884 = -436						; size = 4
$T224875 = -432						; size = 4
$T224871 = -428						; size = 4
$T224867 = -424						; size = 4
$T224863 = -420						; size = 4
$T224848 = -416						; size = 4
$T224839 = -412						; size = 4
$T224835 = -408						; size = 4
$T224826 = -404						; size = 4
$T224817 = -400						; size = 4
$T224808 = -396						; size = 4
$T224804 = -392						; size = 4
$T224791 = -388						; size = 4
$T224787 = -384						; size = 4
$T224778 = -380						; size = 4
$T224774 = -376						; size = 4
$T224766 = -372						; size = 4
$T224762 = -368						; size = 4
$T224758 = -364						; size = 4
$T224749 = -360						; size = 4
$T224725 = -352						; size = 28
$T224724 = -324						; size = 4
$T224723 = -320						; size = 4
$T224722 = -316						; size = 4
$T224721 = -312						; size = 28
$T224720 = -284						; size = 4
$T224719 = -280						; size = 4
$T224718 = -276						; size = 28
$T224717 = -248						; size = 4
$T224716 = -244						; size = 4
$T224715 = -240						; size = 28
$T224714 = -212						; size = 4
$T224713 = -208						; size = 4
$T224712 = -204						; size = 28
$T224711 = -176						; size = 4
$T224710 = -172						; size = 4
_pCity$221517 = -168					; size = 4
_strSummary$221496 = -164				; size = 80
_pNotifications$221494 = -80				; size = 4
_kAttackerOwner$221499 = -76				; size = 4
_pkDefender$221474 = -72				; size = 4
_bTargetDied$ = -65					; size = 1
_pkTargetPlot$ = -64					; size = 4
_pkDLLInterface$ = -60					; size = 4
_strBuffer$ = -56					; size = 28
__$ArrayPad$ = -28					; size = 4
_iDamage$ = -24						; size = 4
_bBarbarian$ = -17					; size = 1
_pkAttacker$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kCombatInfo$ = 8					; size = 4
_uiParentEventID$ = 12					; size = 4
?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z PROC ; CvUnitCombat::ResolveRangedUnitVsCombat, COMDAT

; 929  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 544				; 00000220H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 930  : 	bool bTargetDied = false;

	mov	BYTE PTR _bTargetDied$[ebp], 0

; 931  : 	int iDamage = kCombatInfo.getDamageInflicted(BATTLE_UNIT_ATTACKER);

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getDamageInflicted
	mov	DWORD PTR _iDamage$[ebp], eax

; 932  : //	int iExperience = kCombatInfo.getExperience(BATTLE_UNIT_ATTACKER);
; 933  : //	int iMaxXP = kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_ATTACKER);
; 934  : 	bool bBarbarian = false;

	mov	BYTE PTR _bBarbarian$[ebp], 0

; 935  : 
; 936  : 	CvUnit* pkAttacker = kCombatInfo.getUnit(BATTLE_UNIT_ATTACKER);

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pkAttacker$[ebp], eax

; 937  : 	CvAssert_Debug(pkAttacker);
; 938  : 
; 939  : 	CvPlot* pkTargetPlot = kCombatInfo.getPlot();

	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ	; CvCombatInfo::getPlot
	mov	DWORD PTR _pkTargetPlot$[ebp], eax

; 940  : 	CvAssert_Debug(pkTargetPlot);
; 941  : 
; 942  : #ifdef DEL_RANGED_COUNTERATTACKS
; 943  : 	bool bAttackerDied = false;
; 944  : 	int iDamageToAttacker = kCombatInfo.getDamageInflicted(BATTLE_UNIT_DEFENDER);
; 945  : 	int iAttackerFearDamageInflicted = 0;//pInfo->getFearDamageInflicted( BATTLE_UNIT_ATTACKER );
; 946  : #endif
; 947  : 
; 948  : 	ICvUserInterface2* pkDLLInterface = GC.GetEngineUserInterface();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR _pkDLLInterface$[ebp], eax

; 949  : 	CvString strBuffer;

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 950  : 
; 951  : 	if(pkTargetPlot)

	cmp	DWORD PTR _pkTargetPlot$[ebp], 0
	je	$LN22@ResolveRan

; 952  : 	{
; 953  : 		if(!pkTargetPlot->isCity())

	mov	ecx, DWORD PTR _pkTargetPlot$[ebp]
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN21@ResolveRan

; 954  : 		{
; 955  : 			// Unit
; 956  : 			CvUnit* pkDefender = kCombatInfo.getUnit(BATTLE_UNIT_DEFENDER);

	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pkDefender$221474[ebp], eax

; 957  : 			CvAssert_Debug(pkDefender != NULL);
; 958  : 			if(pkDefender)

	cmp	DWORD PTR _pkDefender$221474[ebp], 0
	je	$LN20@ResolveRan

; 959  : 			{
; 960  : 				bBarbarian = pkDefender->isBarbarian();

	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	mov	BYTE PTR _bBarbarian$[ebp], al

; 961  : 
; 962  : 				if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	$LN19@ResolveRan

; 963  : 				{
; 964  : #ifdef DEL_RANGED_COUNTERATTACKS
; 965  : 					pkDefender->changeDamage(iDamage, pkAttacker->getOwner());
; 966  : 					pkAttacker->changeDamage(iDamageToAttacker, pkDefender->getOwner());
; 967  : 
; 968  : 					pkDefender->changeExperience(
; 969  : 						kCombatInfo.getExperience(BATTLE_UNIT_DEFENDER),
; 970  : 						kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_DEFENDER),
; 971  : 						true,
; 972  : 						kCombatInfo.getInBorders(BATTLE_UNIT_DEFENDER),
; 973  : 						kCombatInfo.getUpdateGlobal(BATTLE_UNIT_DEFENDER));
; 974  : 					pkAttacker->changeExperience(
; 975  : 						kCombatInfo.getExperience(BATTLE_UNIT_ATTACKER),
; 976  : 						kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_ATTACKER),
; 977  : 						true,
; 978  : 						kCombatInfo.getInBorders(BATTLE_UNIT_ATTACKER),
; 979  : 						kCombatInfo.getUpdateGlobal(BATTLE_UNIT_ATTACKER));
; 980  : 
; 981  : 																															// Anyone eat it?
; 982  : 					bAttackerDied = (pkAttacker->getDamage() >= GC.getMAX_HIT_POINTS());
; 983  : 					bTargetDied = (pkDefender->getDamage() >= GC.getMAX_HIT_POINTS());
; 984  : 
; 985  : 					if (bTargetDied)
; 986  : #else
; 987  : 					// Defender died
; 988  : 					if(iDamage + pkDefender->getDamage() >= GC.getMAX_HIT_POINTS())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T224749[ebp], edx
	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	add	eax, DWORD PTR _iDamage$[ebp]
	cmp	eax, DWORD PTR $T224749[ebp]
	jl	$LN18@ResolveRan

; 989  : #endif
; 990  : 					{
; 991  : 						if(pkAttacker->getOwner() == GC.getGame().getActivePlayer())

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T224758[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T224762[ebp], edx
	mov	ecx, DWORD PTR $T224762[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T224758[ebp], eax
	jne	$LN17@ResolveRan

; 992  : 						{
; 993  : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_ATTACK_BY_AIR_AND_DEATH", pkAttacker->getNameKey(), pkDefender->getNameKey());

	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T224710[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T224711[ebp], eax
	lea	eax, DWORD PTR $T224710[ebp]
	push	eax
	lea	ecx, DWORD PTR $T224711[ebp]
	push	ecx
	push	OFFSET ??_C@_0CJ@CEOPEHCM@TXT_KEY_MISC_YOU_ATTACK_BY_AIR_A@
	lea	edx, DWORD PTR $T224712[ebp]
	push	edx
	call	??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z ; GetLocalizedText<char const *,char const *>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv527[ebp], eax
	mov	eax, DWORD PTR tv527[ebp]
	mov	DWORD PTR $T224766[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T224766[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T224712[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 994  : 							pkDLLInterface->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_COMBAT", MESSAGE_TYPE_INFO, pkDefender->getUnitInfo().GetButton(), (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T224774[ebp], eax
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T224778[ebp], edx
	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T224787[ebp], ecx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR $T224774[ebp]
	push	edx
	mov	eax, DWORD PTR $T224778[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR $T224787[ebp]
	push	ecx
	mov	edx, DWORD PTR _uiParentEventID$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN17@ResolveRan:

; 995  : 						}
; 996  : 
; 997  : 						strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_ARE_ATTACKED_BY_AIR_AND_DEATH", pkDefender->getNameKey(), pkAttacker->getNameKey());

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T224713[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T224714[ebp], eax
	lea	ecx, DWORD PTR $T224713[ebp]
	push	ecx
	lea	edx, DWORD PTR $T224714[ebp]
	push	edx
	push	OFFSET ??_C@_0CP@KDGBDBAA@TXT_KEY_MISC_YOU_ARE_ATTACKED_BY@
	lea	eax, DWORD PTR $T224715[ebp]
	push	eax
	call	??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z ; GetLocalizedText<char const *,char const *>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv76[ebp], eax
	mov	ecx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T224791[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T224791[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T224715[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 998  : 						CvNotifications* pNotifications = GET_PLAYER(pkDefender->getOwner()).GetNotifications();

	mov	eax, DWORD PTR _pkDefender$221474[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T224804[ebp], ecx
	mov	edx, DWORD PTR $T224804[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224808[ebp], edx
	mov	ecx, DWORD PTR $T224808[ebp]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$221494[ebp], eax

; 999  : 						if(pNotifications)

	cmp	DWORD PTR _pNotifications$221494[ebp], 0
	je	$LN16@ResolveRan

; 1000 : 						{
; 1001 : 							Localization::String strSummary = Localization::Lookup("TXT_KEY_UNIT_LOST");

	push	OFFSET ??_C@_0BC@DCAPLCAP@TXT_KEY_UNIT_LOST?$AA@
	lea	eax, DWORD PTR _strSummary$221496[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1002 : 							pNotifications->Add(NOTIFICATION_UNIT_DIED, strBuffer, strSummary.toUTF8(), pkDefender->getX(), pkDefender->getY(), (int) pkDefender->getUnitType(), pkDefender->getOwner());

	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224817[ebp], edx
	mov	eax, DWORD PTR _pkDefender$221474[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR $T224826[ebp], ecx
	mov	edx, DWORD PTR _pkDefender$221474[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR $T224835[ebp], eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T224839[ebp], eax
	mov	ecx, DWORD PTR $T224817[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	mov	edx, DWORD PTR $T224826[ebp]
	push	edx
	mov	eax, DWORD PTR $T224835[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$221496[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	ecx, DWORD PTR $T224839[ebp]
	push	ecx
	push	-16309126				; ff07247aH
	mov	ecx, DWORD PTR _pNotifications$221494[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 1003 : 						}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strSummary$221496[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN16@ResolveRan:

; 1004 : 
; 1005 : #ifdef DEL_RANGED_COUNTERATTACKS
; 1006 : #ifndef AUI_UNIT_TEST_PROMOTION_READY_MOVED
; 1007 : 						pkAttacker->testPromotionReady();
; 1008 : #endif
; 1009 : #else
; 1010 : 						bTargetDied = true;

	mov	BYTE PTR _bTargetDied$[ebp], 1

; 1011 : #endif
; 1012 : 
; 1013 : 						CvPlayerAI& kAttackerOwner = GET_PLAYER(pkAttacker->getOwner());

	mov	edx, DWORD PTR _pkAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T224848[ebp], eax
	mov	ecx, DWORD PTR $T224848[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kAttackerOwner$221499[ebp], ecx

; 1014 : 						kAttackerOwner.GetPlayerAchievements().KilledUnitWithUnit(pkAttacker, pkDefender);

	mov	edx, DWORD PTR _pkDefender$221474[ebp]
	push	edx
	mov	eax, DWORD PTR _pkAttacker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kAttackerOwner$221499[ebp]
	add	ecx, 63156				; 0000f6b4H
	call	?KilledUnitWithUnit@CvPlayerAchievements@@QAEXPAVCvUnit@@0@Z ; CvPlayerAchievements::KilledUnitWithUnit

; 1015 : 
; 1016 : 						ApplyPostCombatTraitEffects(pkAttacker, pkDefender);

	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkAttacker$[ebp]
	push	edx
	call	?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z ; CvUnitCombat::ApplyPostCombatTraitEffects
	add	esp, 8

; 1017 : 
; 1018 : 						if(bBarbarian)

	movzx	eax, BYTE PTR _bBarbarian$[ebp]
	test	eax, eax
	je	SHORT $LN15@ResolveRan

; 1019 : 						{
; 1020 : 							pkDefender->DoTestBarbarianThreatToMinorsWithThisUnitsDeath(pkAttacker->getOwner());

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224863[ebp], edx
	mov	eax, DWORD PTR $T224863[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	call	?DoTestBarbarianThreatToMinorsWithThisUnitsDeath@CvUnit@@QAEXW4PlayerTypes@@@Z ; CvUnit::DoTestBarbarianThreatToMinorsWithThisUnitsDeath
$LN15@ResolveRan:

; 1021 : 						}
; 1022 : 
; 1023 : 						//One Hit
; 1024 : 						if(pkDefender->GetCurrHitPoints() == GC.getMAX_HIT_POINTS() && pkAttacker->isHuman() && !GC.getGame().isGameMultiPlayer())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T224867[ebp], ecx
	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	call	?GetCurrHitPoints@CvUnit@@QBEHXZ	; CvUnit::GetCurrHitPoints
	cmp	eax, DWORD PTR $T224867[ebp]
	jne	SHORT $LN14@ResolveRan
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isHuman@CvUnit@@QBE_NXZ		; CvUnit::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN14@ResolveRan
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T224871[ebp], eax
	mov	ecx, DWORD PTR $T224871[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN14@ResolveRan

; 1025 : 						{
; 1026 : 							gDLL->UnlockAchievement(ACHIEVEMENT_ONEHITKILL);

	mov	edx, DWORD PTR $T224875[ebp]
	mov	DWORD PTR tv264[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv264[ebp], eax
	push	60					; 0000003cH
	mov	ecx, DWORD PTR tv264[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv264[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax
$LN14@ResolveRan:

; 1027 : 						}
; 1028 : 					}
; 1029 : #ifdef DEL_RANGED_COUNTERATTACKS
; 1030 : 					else if (bAttackerDied)
; 1031 : 					{
; 1032 : 						CvPlayerAI& kDefenderOwner = GET_PLAYER(pkDefender->getOwner());
; 1033 : 						kDefenderOwner.GetPlayerAchievements().KilledUnitWithUnit(pkDefender, pkAttacker);
; 1034 : 
; 1035 : 						auto_ptr<ICvUnit1> pAttacker = GC.WrapUnitPointer(pkAttacker);
; 1036 : 						gDLL->GameplayUnitDestroyedInCombat(pAttacker.get());
; 1037 : 
; 1038 : 						if (GC.getGame().getActivePlayer() == pkAttacker->getOwner())
; 1039 : 						{
; 1040 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_DIED_ATTACKING", pkAttacker->getNameKey(), pkDefender->getNameKey(), iDamage, iAttackerFearDamageInflicted);
; 1041 : 							GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitDefeatScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);
; 1042 : 						}
; 1043 : 						if (GC.getGame().getActivePlayer() == pkDefender->getOwner())
; 1044 : 						{
; 1045 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_KILLED_ENEMY_UNIT", pkDefender->getNameKey(), iDamage, iAttackerFearDamageInflicted, pkAttacker->getNameKey(), pkAttacker->getVisualCivAdjective(pkDefender->getTeam()));
; 1046 : 							GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitVictoryScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);
; 1047 : 						}
; 1048 : #ifndef AUI_UNIT_TEST_PROMOTION_READY_MOVED
; 1049 : 						pkDefender->testPromotionReady();
; 1050 : #endif
; 1051 : 
; 1052 : 						ApplyPostCombatTraitEffects(pkDefender, pkAttacker);
; 1053 : 					}
; 1054 : #endif
; 1055 : 					// Nobody died
; 1056 : 					else

	jmp	$LN13@ResolveRan
$LN18@ResolveRan:

; 1057 : 					{
; 1058 : 						if(pkAttacker->getOwner() == GC.getGame().getActivePlayer())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224884[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T224888[ebp], eax
	mov	ecx, DWORD PTR $T224888[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T224884[ebp], eax
	jne	$LN12@ResolveRan

; 1059 : 						{
; 1060 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_ATTACK_BY_AIR", pkAttacker->getNameKey(), pkDefender->getNameKey(), iDamage);

	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T224716[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T224717[ebp], eax
	lea	ecx, DWORD PTR _iDamage$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T224716[ebp]
	push	edx
	lea	eax, DWORD PTR $T224717[ebp]
	push	eax
	push	OFFSET ??_C@_0BP@OGGPFFII@TXT_KEY_MISC_YOU_ATTACK_BY_AIR?$AA@
	lea	ecx, DWORD PTR $T224718[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z ; GetLocalizedText<char const *,char const *,int>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv197[ebp], eax
	mov	edx, DWORD PTR tv197[ebp]
	mov	DWORD PTR $T224892[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR $T224892[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T224718[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1061 : 							pkDLLInterface->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_COMBAT", MESSAGE_TYPE_INFO, pkDefender->getUnitInfo().GetButton(), (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T224900[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T224904[ebp], ecx
	mov	edx, DWORD PTR _pkAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T224913[ebp], eax
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR $T224900[ebp]
	push	ecx
	mov	edx, DWORD PTR $T224904[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T224913[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN12@ResolveRan:

; 1062 : 						}
; 1063 : 						strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_ARE_ATTACKED_BY_AIR", pkDefender->getNameKey(), pkAttacker->getNameKey(), iDamage);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T224719[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T224720[ebp], eax
	lea	eax, DWORD PTR _iDamage$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T224719[ebp]
	push	ecx
	lea	edx, DWORD PTR $T224720[ebp]
	push	edx
	push	OFFSET ??_C@_0CF@KOEDAAEG@TXT_KEY_MISC_YOU_ARE_ATTACKED_BY@
	lea	eax, DWORD PTR $T224721[ebp]
	push	eax
	call	??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z ; GetLocalizedText<char const *,char const *,int>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv746[ebp], eax
	mov	ecx, DWORD PTR tv746[ebp]
	mov	DWORD PTR $T224917[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR $T224917[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T224721[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN13@ResolveRan:

; 1064 : #if defined(DEL_RANGED_COUNTERATTACKS) && !defined(AUI_UNIT_TEST_PROMOTION_READY_MOVED)
; 1065 : 						pkAttacker->testPromotionReady();
; 1066 : 						pkDefender->testPromotionReady();
; 1067 : #endif
; 1068 : 					}
; 1069 : 
; 1070 : 					//red icon over attacking unit
; 1071 : 					if(pkDefender->getOwner() == GC.getGame().getActivePlayer())

	mov	eax, DWORD PTR _pkDefender$221474[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T224930[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T224934[ebp], edx
	mov	ecx, DWORD PTR $T224934[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T224930[ebp], eax
	jne	SHORT $LN11@ResolveRan

; 1072 : 					{
; 1073 : 						pkDLLInterface->AddMessage(uiParentEventID, pkDefender->getOwner(), false, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_COMBAT", MESSAGE_TYPE_INFO, pkAttacker->m_pUnitInfo->GetButton(), (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkAttacker->getX(), pkAttacker->getY(), true, true*/);

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T224938[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T224942[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224951[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T224938[ebp]
	push	eax
	mov	ecx, DWORD PTR $T224942[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR $T224951[ebp]
	push	edx
	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN11@ResolveRan:

; 1074 : 					}
; 1075 : 					//white icon over defending unit
; 1076 : 					//pkDLLInterface->AddMessage(uiParentEventID, pkDefender->getOwner(), false, 0, ""/*, "AS2D_COMBAT", MESSAGE_TYPE_DISPLAY_ONLY, pkDefender->getUnitInfo().GetButton(), (ColorTypes)GC.getInfoTypeForString("COLOR_WHITE"), pkDefender->getX(), pkDefender->getY(), true, true*/);
; 1077 : 
; 1078 : #ifndef DEL_RANGED_COUNTERATTACKS
; 1079 : 					//set damage but don't update entity damage visibility
; 1080 : 					pkDefender->changeDamage(iDamage, pkAttacker->getOwner());

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T224960[ebp], edx
	push	0
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR $T224960[ebp]
	push	eax
	mov	ecx, DWORD PTR _iDamage$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	call	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::changeDamage

; 1081 : 
; 1082 : 					// Update experience
; 1083 : 					pkDefender->changeExperience(
; 1084 : 					    kCombatInfo.getExperience(BATTLE_UNIT_DEFENDER),
; 1085 : 					    kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_DEFENDER),
; 1086 : 					    true,
; 1087 : 					    kCombatInfo.getInBorders(BATTLE_UNIT_DEFENDER),
; 1088 : 					    kCombatInfo.getUpdateGlobal(BATTLE_UNIT_DEFENDER));

	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getUpdateGlobal
	movzx	edx, al
	push	edx
	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getInBorders@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getInBorders
	movzx	eax, al
	push	eax
	push	1
	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getMaxExperienceAllowed
	push	eax
	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getExperience
	push	eax
	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	call	?changeExperience@CvUnit@@QAEXHH_N00@Z	; CvUnit::changeExperience
$LN19@ResolveRan:

; 1089 : #endif
; 1090 : 				}
; 1091 : 
; 1092 : 				pkDefender->setCombatUnit(NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 1093 : 				if(!CvUnitMission::IsHeadMission(pkDefender, CvTypes::getMISSION_WAIT_FOR()))		// If the top mission was not a 'wait for', then clear it.

	call	?getMISSION_WAIT_FOR@CvTypes@@YA?BW4MissionTypes@@XZ ; CvTypes::getMISSION_WAIT_FOR
	push	eax
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR $T224722[ebp], esp
	mov	DWORD PTR $T224970[ebp], ecx
	mov	edx, DWORD PTR $T224970[ebp]
	mov	eax, DWORD PTR _pkDefender$221474[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T224970[ebp]
	mov	BYTE PTR [ecx+4], 0
	mov	edx, DWORD PTR $T224970[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN152@ResolveRan
	mov	eax, DWORD PTR $T224970[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN152@ResolveRan:
	mov	ecx, DWORD PTR $T224970[ebp]
	mov	DWORD PTR tv519[ebp], ecx
	call	?IsHeadMission@CvUnitMission@@SAPBUMissionData@@V?$FObjectHandle@VCvUnit@@@@H@Z ; CvUnitMission::IsHeadMission
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv520[ebp], eax
	cmp	DWORD PTR tv520[ebp], 0
	jne	SHORT $LN10@ResolveRan

; 1094 : 					pkDefender->ClearMissionQueue();

	push	1
	mov	ecx, DWORD PTR _pkDefender$221474[ebp]
	call	?ClearMissionQueue@CvUnit@@QAEXH@Z	; CvUnit::ClearMissionQueue
$LN10@ResolveRan:

; 1095 : 			}
; 1096 : 			else

	jmp	SHORT $LN9@ResolveRan
$LN20@ResolveRan:

; 1097 : 				bTargetDied = true;

	mov	BYTE PTR _bTargetDied$[ebp], 1
$LN9@ResolveRan:

; 1098 : 		}
; 1099 : 		else

	jmp	$LN4@ResolveRan
$LN21@ResolveRan:

; 1100 : 		{
; 1101 : 			// City
; 1102 : 			CvCity* pCity = pkTargetPlot->getPlotCity();

	mov	ecx, DWORD PTR _pkTargetPlot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$221517[ebp], eax

; 1103 : 			CvAssert_Debug(pCity != NULL);
; 1104 : 			if(pCity)

	cmp	DWORD PTR _pCity$221517[ebp], 0
	je	$LN7@ResolveRan

; 1105 : 			{
; 1106 : 				if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	$LN5@ResolveRan

; 1107 : 				{
; 1108 : 					bBarbarian = pCity->isBarbarian();

	mov	ecx, DWORD PTR _pCity$221517[ebp]
	call	?isBarbarian@CvCity@@QBE_NXZ		; CvCity::isBarbarian
	mov	BYTE PTR _bBarbarian$[ebp], al

; 1109 : 					pCity->changeDamage(iDamage);

	mov	edx, DWORD PTR _iDamage$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$221517[ebp]
	call	?changeDamage@CvCity@@QAEXH@Z		; CvCity::changeDamage

; 1110 : 
; 1111 : #ifdef DEL_RANGED_COUNTERATTACKS
; 1112 : 					pkAttacker->changeDamage(iDamageToAttacker, pCity->getOwner());
; 1113 : 
; 1114 : 					pkAttacker->changeExperience(
; 1115 : 						kCombatInfo.getExperience(BATTLE_UNIT_ATTACKER),
; 1116 : 						kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_ATTACKER),
; 1117 : 						true,
; 1118 : 						kCombatInfo.getInBorders(BATTLE_UNIT_ATTACKER),
; 1119 : 						kCombatInfo.getUpdateGlobal(BATTLE_UNIT_ATTACKER));
; 1120 : 
; 1121 : 					// Anyone eat it?
; 1122 : 					bAttackerDied = (pkAttacker->getDamage() >= GC.getMAX_HIT_POINTS());
; 1123 : 
; 1124 : 					if (bAttackerDied)
; 1125 : 					{
; 1126 : 						auto_ptr<ICvUnit1> pAttacker = GC.WrapUnitPointer(pkAttacker);
; 1127 : 						gDLL->GameplayUnitDestroyedInCombat(pAttacker.get());
; 1128 : 
; 1129 : 						if (GC.getGame().getActivePlayer() == pkAttacker->getOwner())
; 1130 : 						{
; 1131 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_DIED_ATTACKING_CITY", pkAttacker->getNameKey(), pCity->getNameKey(), iDamage, iAttackerFearDamageInflicted);
; 1132 : 							pkDLLInterface->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitDefeatScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);
; 1133 : 						}
; 1134 : 						if (GC.getGame().getActivePlayer() == pCity->getOwner())
; 1135 : 						{
; 1136 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_KILLED_ENEMY_UNIT_CITY", pCity->getNameKey(), iDamageToAttacker, iAttackerFearDamageInflicted, pkAttacker->getNameKey(), pkAttacker->getVisualCivAdjective(pCity->getTeam()));
; 1137 : 							pkDLLInterface->AddMessage(uiParentEventID, pCity->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitVictoryScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);
; 1138 : 						}
; 1139 : 					}
; 1140 : 					else
; 1141 : 					{
; 1142 : #ifndef AUI_UNIT_TEST_PROMOTION_READY_MOVED
; 1143 : 						pkAttacker->testPromotionReady();
; 1144 : #endif
; 1145 : #endif
; 1146 : 					if(pCity->getOwner() == GC.getGame().getActivePlayer())

	mov	eax, DWORD PTR _pCity$221517[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T224984[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T224988[ebp], edx
	mov	ecx, DWORD PTR $T224988[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T224984[ebp], eax
	jne	$LN5@ResolveRan

; 1147 : 					{
; 1148 : 						strBuffer = GetLocalizedText("TXT_KEY_MISC_YOUR_CITY_ATTACKED_BY_AIR", pCity->getNameKey(), pkAttacker->getNameKey(), iDamage);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T224723[ebp], eax
	mov	ecx, DWORD PTR _pCity$221517[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T224724[ebp], eax
	lea	eax, DWORD PTR _iDamage$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T224723[ebp]
	push	ecx
	lea	edx, DWORD PTR $T224724[ebp]
	push	edx
	push	OFFSET ??_C@_0CH@OGLGMFCF@TXT_KEY_MISC_YOUR_CITY_ATTACKED_@
	lea	eax, DWORD PTR $T224725[ebp]
	push	eax
	call	??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z ; GetLocalizedText<char const *,char const *,int>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv747[ebp], eax
	mov	ecx, DWORD PTR tv747[ebp]
	mov	DWORD PTR $T224992[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	edx, DWORD PTR $T224992[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T224725[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1149 : 						//red icon over attacking unit
; 1150 : 						pkDLLInterface->AddMessage(uiParentEventID, pCity->getOwner(), false, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_COMBAT", MESSAGE_TYPE_INFO, pkAttacker->m_pUnitInfo->GetButton(), (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkAttacker->getX(), pkAttacker->getY(), true, true*/);

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T225000[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T225004[ebp], eax
	mov	ecx, DWORD PTR _pCity$221517[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T225013[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T225000[ebp]
	push	eax
	mov	ecx, DWORD PTR $T225004[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR $T225013[ebp]
	push	edx
	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN5@ResolveRan:

; 1151 : 					}
; 1152 : #ifdef DEL_RANGED_COUNTERATTACKS
; 1153 : 						if (GC.getGame().getActivePlayer() == pkAttacker->getOwner())
; 1154 : 						{
; 1155 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_ATTACK_BY_AIR", pkAttacker->getNameKey(), pCity->getNameKey(), iDamage);
; 1156 : 							pkDLLInterface->AddMessage(uiParentEventID, pkAttacker->getOwner(), false, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitDefeatScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);
; 1157 : 						}
; 1158 : 					}
; 1159 : #endif
; 1160 : 				}
; 1161 : 
; 1162 : 				pCity->clearCombat();

	mov	ecx, DWORD PTR _pCity$221517[ebp]
	call	?clearCombat@CvCity@@QAEXXZ		; CvCity::clearCombat

; 1163 : 			}
; 1164 : 			else

	jmp	SHORT $LN4@ResolveRan
$LN7@ResolveRan:

; 1165 : 				bTargetDied = true;

	mov	BYTE PTR _bTargetDied$[ebp], 1
$LN4@ResolveRan:

; 1166 : 		}
; 1167 : 	}
; 1168 : 	else

	jmp	SHORT $LN3@ResolveRan
$LN22@ResolveRan:

; 1169 : 		bTargetDied = true;

	mov	BYTE PTR _bTargetDied$[ebp], 1
$LN3@ResolveRan:

; 1170 : 
; 1171 : 	if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	$LN2@ResolveRan

; 1172 : 	{
; 1173 : #ifndef DEL_RANGED_COUNTERATTACKS
; 1174 : 		// Unit gains XP for executing a Range Strike
; 1175 : 		if(iDamage > 0) // && iDefenderStrength > 0)

	cmp	DWORD PTR _iDamage$[ebp], 0
	jle	SHORT $LN1@ResolveRan

; 1176 : 		{
; 1177 : 			pkAttacker->changeExperience(
; 1178 : 			    kCombatInfo.getExperience(BATTLE_UNIT_ATTACKER),
; 1179 : 			    kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_ATTACKER),
; 1180 : 			    true,
; 1181 : 			    kCombatInfo.getInBorders(BATTLE_UNIT_ATTACKER),
; 1182 : 			    kCombatInfo.getUpdateGlobal(BATTLE_UNIT_ATTACKER));

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getUpdateGlobal
	movzx	ecx, al
	push	ecx
	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getInBorders@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getInBorders
	movzx	edx, al
	push	edx
	push	1
	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getMaxExperienceAllowed
	push	eax
	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getExperience
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?changeExperience@CvUnit@@QAEXHH_N00@Z	; CvUnit::changeExperience
$LN1@ResolveRan:

; 1183 : 		}
; 1184 : 
; 1185 : #ifndef AUI_UNIT_TEST_PROMOTION_READY_MOVED
; 1186 : 		pkAttacker->testPromotionReady();

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?testPromotionReady@CvUnit@@QAEXXZ	; CvUnit::testPromotionReady

; 1187 : #endif
; 1188 : #endif
; 1189 : 
; 1190 : 		pkAttacker->setCombatUnit(NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 1191 : 		pkAttacker->ClearMissionQueue(GetPostCombatDelay());

	call	?GetPostCombatDelay@@YAHXZ		; GetPostCombatDelay
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?ClearMissionQueue@CvUnit@@QAEXH@Z	; CvUnit::ClearMissionQueue

; 1192 : 
; 1193 : 		// Report that combat is over in case we want to queue another attack
; 1194 : 		GET_PLAYER(pkAttacker->getOwner()).GetTacticalAI()->CombatResolved(pkAttacker, bTargetDied);

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T225022[ebp], ecx
	mov	edx, DWORD PTR $T225022[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225026[ebp], edx
	push	0
	movzx	eax, BYTE PTR _bTargetDied$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T225026[ebp]
	call	?GetTacticalAI@CvPlayer@@QBEPAVCvTacticalAI@@XZ ; CvPlayer::GetTacticalAI
	mov	ecx, eax
	call	?CombatResolved@CvTacticalAI@@QAEXPAX_N1@Z ; CvTacticalAI::CombatResolved
$LN2@ResolveRan:

; 1195 : 	}
; 1196 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$0:
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$1:
	lea	ecx, DWORD PTR $T224712[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$2:
	lea	ecx, DWORD PTR $T224715[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$3:
	lea	ecx, DWORD PTR _strSummary$221496[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$4:
	lea	ecx, DWORD PTR $T224718[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$5:
	lea	ecx, DWORD PTR $T224721[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$7:
	lea	ecx, DWORD PTR $T224725[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-548]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ENDP ; CvUnitCombat::ResolveRangedUnitVsCombat
PUBLIC	??_C@_0CG@IKCFGOGK@TXT_KEY_MISC_YOU_ARE_ATTACKED_BY@ ; `string'
PUBLIC	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z	; operator<<<int>
PUBLIC	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
PUBLIC	??_C@_0CE@CHJGNNPM@TXT_KEY_MISC_YOUR_CITY_RANGE_ATT@ ; `string'
PUBLIC	?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveRangedCityVsUnitCombat
EXTRN	?DoYieldsFromKill@CvPlayer@@QAEXW4UnitTypes@@0HH_NH@Z:PROC ; CvPlayer::DoYieldsFromKill
EXTRN	?getCity@CvCombatInfo@@QBEPAVCvCity@@W4BattleUnitTypes@@@Z:PROC ; CvCombatInfo::getCity
;	COMDAT ??_C@_0CG@IKCFGOGK@TXT_KEY_MISC_YOU_ARE_ATTACKED_BY@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
CONST	SEGMENT
??_C@_0CG@IKCFGOGK@TXT_KEY_MISC_YOU_ARE_ATTACKED_BY@ DB 'TXT_KEY_MISC_YOU'
	DB	'_ARE_ATTACKED_BY_CITY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@CHJGNNPM@TXT_KEY_MISC_YOUR_CITY_RANGE_ATT@
CONST	SEGMENT
??_C@_0CE@CHJGNNPM@TXT_KEY_MISC_YOUR_CITY_RANGE_ATT@ DB 'TXT_KEY_MISC_YOU'
	DB	'R_CITY_RANGE_ATTACK', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$3
__ehfuncinfo$?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
_TEXT	SEGMENT
tv364 = -492						; size = 4
tv363 = -488						; size = 4
$T225212 = -484						; size = 4
$T225208 = -480						; size = 4
$T225199 = -476						; size = 4
$T225189 = -472						; size = 4
$T225180 = -468						; size = 4
$T225171 = -464						; size = 4
$T225159 = -460						; size = 4
$T225150 = -456						; size = 4
$T225141 = -452						; size = 4
$T225132 = -448						; size = 4
$T225123 = -444						; size = 4
$T225119 = -440						; size = 4
$T225110 = -436						; size = 4
$T225106 = -432						; size = 4
$T225097 = -428						; size = 4
$T225093 = -424						; size = 4
$T225084 = -420						; size = 4
$T225075 = -416						; size = 4
$T225071 = -412						; size = 4
$T225057 = -404						; size = 4
$T225045 = -400						; size = 4
$T225044 = -396						; size = 4
$T225043 = -392						; size = 4
$T225042 = -388						; size = 4
$T225041 = -384						; size = 4
$T225040 = -380						; size = 4
$T225039 = -376						; size = 4
_strSummary$221570 = -372				; size = 80
_localizedText$221566 = -292				; size = 80
_pNotifications$221564 = -212				; size = 4
_kAttackingPlayer$221573 = -208				; size = 4
_localizedText$221558 = -204				; size = 80
_localizedText$221547 = -124				; size = 80
_pkDefender$221543 = -44				; size = 4
_bTargetDied$ = -37					; size = 1
_iActivePlayerID$ = -36					; size = 4
_pkTargetPlot$ = -32					; size = 4
_pkDLLInterface$ = -28					; size = 4
_iDamage$ = -24						; size = 4
_bBarbarian$ = -17					; size = 1
_pkAttacker$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kCombatInfo$ = 8					; size = 4
_uiParentEventID$ = 12					; size = 4
?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z PROC ; CvUnitCombat::ResolveRangedCityVsUnitCombat, COMDAT

; 1203 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 480				; 000001e0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1204 : 	bool bTargetDied = false;

	mov	BYTE PTR _bTargetDied$[ebp], 0

; 1205 : 	int iDamage = kCombatInfo.getDamageInflicted(BATTLE_UNIT_ATTACKER);

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getDamageInflicted
	mov	DWORD PTR _iDamage$[ebp], eax

; 1206 : 	bool bBarbarian = false;

	mov	BYTE PTR _bBarbarian$[ebp], 0

; 1207 : 
; 1208 : 	CvCity* pkAttacker = kCombatInfo.getCity(BATTLE_UNIT_ATTACKER);

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getCity@CvCombatInfo@@QBEPAVCvCity@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getCity
	mov	DWORD PTR _pkAttacker$[ebp], eax

; 1209 : 	CvAssert_Debug(pkAttacker);
; 1210 : 
; 1211 : 	if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	SHORT $LN13@ResolveRan@2

; 1212 : 		pkAttacker->clearCombat();

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?clearCombat@CvCity@@QAEXXZ		; CvCity::clearCombat
$LN13@ResolveRan@2:

; 1213 : 
; 1214 : 	CvPlot* pkTargetPlot = kCombatInfo.getPlot();

	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ	; CvCombatInfo::getPlot
	mov	DWORD PTR _pkTargetPlot$[ebp], eax

; 1215 : 	CvAssert_Debug(pkTargetPlot);
; 1216 : 
; 1217 : 	ICvUserInterface2* pkDLLInterface = GC.GetEngineUserInterface();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR _pkDLLInterface$[ebp], eax

; 1218 : 	int iActivePlayerID = GC.getGame().getActivePlayer();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225057[ebp], ecx
	mov	ecx, DWORD PTR $T225057[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	mov	DWORD PTR _iActivePlayerID$[ebp], eax

; 1219 : 
; 1220 : #ifdef DEL_RANGED_COUNTERATTACKS
; 1221 : 	int iDamageToCity = kCombatInfo.getDamageInflicted(BATTLE_UNIT_DEFENDER);
; 1222 : 
; 1223 : 	CvString strBuffer;
; 1224 : #endif
; 1225 : 
; 1226 : 	if(pkTargetPlot)

	cmp	DWORD PTR _pkTargetPlot$[ebp], 0
	je	$LN2@ResolveRan@2

; 1227 : 	{
; 1228 : 		if(!pkTargetPlot->isCity())

	mov	ecx, DWORD PTR _pkTargetPlot$[ebp]
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	movzx	edx, al
	test	edx, edx
	jne	$LN11@ResolveRan@2

; 1229 : 		{
; 1230 : 			CvUnit* pkDefender = kCombatInfo.getUnit(BATTLE_UNIT_DEFENDER);

	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pkDefender$221543[ebp], eax

; 1231 : 			CvAssert_Debug(pkDefender != NULL);
; 1232 : 			if(pkDefender)

	cmp	DWORD PTR _pkDefender$221543[ebp], 0
	je	$LN10@ResolveRan@2

; 1233 : 			{
; 1234 : 				bBarbarian = pkDefender->isBarbarian();

	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	mov	BYTE PTR _bBarbarian$[ebp], al

; 1235 : 
; 1236 : 				if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	$LN9@ResolveRan@2

; 1237 : 				{
; 1238 : #ifdef DEL_RANGED_COUNTERATTACKS
; 1239 : 					pkDefender->changeDamage(iDamage, pkAttacker->getOwner());
; 1240 : 					pkAttacker->changeDamage(iDamageToCity);
; 1241 : 
; 1242 : 					pkDefender->changeExperience(
; 1243 : 						kCombatInfo.getExperience(BATTLE_UNIT_DEFENDER),
; 1244 : 						kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_DEFENDER),
; 1245 : 						true,
; 1246 : 						kCombatInfo.getInBorders(BATTLE_UNIT_DEFENDER),
; 1247 : 						kCombatInfo.getUpdateGlobal(BATTLE_UNIT_DEFENDER));
; 1248 : 
; 1249 : 					if (pkDefender->IsDead())
; 1250 : 					{
; 1251 : 						CvNotifications* pNotifications = GET_PLAYER(pkDefender->getOwner()).GetNotifications();
; 1252 : 						if (pNotifications)
; 1253 : 						{
; 1254 : 							Localization::String localizedText = Localization::Lookup("TXT_KEY_MISC_YOU_ARE_ATTACKED_BY_CITY");
; 1255 : 							localizedText << pkDefender->getNameKey() << pkAttacker->getNameKey() << iDamage;
; 1256 : 							Localization::String strSummary = Localization::Lookup("TXT_KEY_UNIT_LOST");
; 1257 : 							pNotifications->Add(NOTIFICATION_UNIT_DIED, localizedText.toUTF8(), strSummary.toUTF8(), pkDefender->getX(), pkDefender->getY(), (int)pkDefender->getUnitType(), pkDefender->getOwner());
; 1258 : 						}
; 1259 : 
; 1260 : 						if (pkAttacker->getOwner() == iActivePlayerID && iDamageToCity > 0)
; 1261 : 						{
; 1262 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_KILLED_ENEMY_UNIT_CITY", pkAttacker->getNameKey(), iDamageToCity, pkDefender->getNameKey(), pkDefender->getVisualCivAdjective(pkAttacker->getTeam()));
; 1263 : 							pkDLLInterface->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitVictoryScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkPlot->getX(), pkPlot->getY()*/);
; 1264 : 						}
; 1265 : 
; 1266 : 						// Earn bonuses for kills?
; 1267 : 						CvPlayer& kAttackingPlayer = GET_PLAYER(pkAttacker->getOwner());
; 1268 : 						kAttackingPlayer.DoYieldsFromKill(NO_UNIT, pkDefender->getUnitType(), pkDefender->getX(), pkDefender->getY(), pkDefender->isBarbarian(), 0);
; 1269 : 					}
; 1270 : 					// Neither side lost
; 1271 : 					else if (iDamageToCity > 0)
; 1272 : 					{
; 1273 : 						if (pkDefender->getOwner() == iActivePlayerID)
; 1274 : 						{
; 1275 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_WITHDRAW_CITY", pkDefender->getNameKey(), iDamage, pkAttacker->getNameKey(), iDamageToCity);
; 1276 : 							pkDLLInterface->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_OUR_WITHDRAWL", MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkPlot->getX(), pkPlot->getY()*/);
; 1277 : 						}
; 1278 : 						if (pkAttacker->getOwner() == iActivePlayerID)
; 1279 : 						{
; 1280 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_ENEMY_UNIT_WITHDRAW_CITY", pkDefender->getNameKey(), iDamageToCity, pkAttacker->getNameKey(), iDamage);
; 1281 : 							pkDLLInterface->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_THEIR_WITHDRAWL", MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkPlot->getX(), pkPlot->getY()*/);
; 1282 : 						}
; 1283 : 
; 1284 : 						ApplyPostCityCombatEffects(pkDefender, pkAttacker, iDamageToCity);
; 1285 : 					}
; 1286 : #else
; 1287 : 					// Info message for the attacking player
; 1288 : 					if(iActivePlayerID == pkAttacker->getOwner())

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T225071[ebp], ecx
	mov	edx, DWORD PTR _iActivePlayerID$[ebp]
	cmp	edx, DWORD PTR $T225071[ebp]
	jne	$LN8@ResolveRan@2

; 1289 : 					{
; 1290 : 						Localization::String localizedText = Localization::Lookup("TXT_KEY_MISC_YOUR_CITY_RANGE_ATTACK");

	push	OFFSET ??_C@_0CE@CHJGNNPM@TXT_KEY_MISC_YOUR_CITY_RANGE_ATT@
	lea	eax, DWORD PTR _localizedText$221547[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1291 : 						localizedText << pkAttacker->getNameKey() << pkDefender->getNameKey() << iDamage;

	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225039[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T225040[ebp], eax
	lea	ecx, DWORD PTR _iDamage$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225039[ebp]
	push	edx
	lea	eax, DWORD PTR $T225040[ebp]
	push	eax
	lea	ecx, DWORD PTR _localizedText$221547[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 1292 : 						pkDLLInterface->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), localizedText.toUTF8());//, "AS2D_COMBAT", MESSAGE_TYPE_INFO, pDefender->getUnitInfo().GetButton(), (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pPlot->getX(), pPlot->getY());

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T225075[ebp], edx
	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T225084[ebp], ecx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _localizedText$221547[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	edx, DWORD PTR $T225075[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T225084[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx

; 1293 : 					}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _localizedText$221547[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN8@ResolveRan@2:

; 1294 : 
; 1295 : 					// Red icon over defending unit
; 1296 : 					if(iActivePlayerID == pkDefender->getOwner())

	mov	eax, DWORD PTR _pkDefender$221543[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T225093[ebp], ecx
	mov	edx, DWORD PTR _iActivePlayerID$[ebp]
	cmp	edx, DWORD PTR $T225093[ebp]
	jne	$LN7@ResolveRan@2

; 1297 : 					{
; 1298 : 						Localization::String localizedText = Localization::Lookup("TXT_KEY_MISC_YOU_ARE_ATTACKED_BY_CITY");

	push	OFFSET ??_C@_0CG@IKCFGOGK@TXT_KEY_MISC_YOU_ARE_ATTACKED_BY@
	lea	eax, DWORD PTR _localizedText$221558[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1299 : 						localizedText << pkDefender->getNameKey() << pkAttacker->getNameKey() << iDamage;

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T225041[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225042[ebp], eax
	lea	ecx, DWORD PTR _iDamage$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225041[ebp]
	push	edx
	lea	eax, DWORD PTR $T225042[ebp]
	push	eax
	lea	ecx, DWORD PTR _localizedText$221558[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 1300 : 						pkDLLInterface->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), localizedText.toUTF8());//, "AS2D_COMBAT", MESSAGE_TYPE_COMBAT_MESSAGE, pDefender->getUnitInfo().GetButton(), (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pDefender->getX(), pDefender->getY(), true, true);

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T225097[ebp], edx
	mov	eax, DWORD PTR _pkDefender$221543[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T225106[ebp], ecx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _localizedText$221558[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	edx, DWORD PTR $T225097[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T225106[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx

; 1301 : 					}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _localizedText$221558[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN7@ResolveRan@2:

; 1302 : 
; 1303 : 					if(iDamage + pkDefender->getDamage() >= GC.getMAX_HIT_POINTS())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T225110[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	add	eax, DWORD PTR _iDamage$[ebp]
	cmp	eax, DWORD PTR $T225110[ebp]
	jl	$LN6@ResolveRan@2

; 1304 : 					{
; 1305 : 						CvNotifications* pNotifications = GET_PLAYER(pkDefender->getOwner()).GetNotifications();

	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T225119[ebp], edx
	mov	eax, DWORD PTR $T225119[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225123[ebp], eax
	mov	ecx, DWORD PTR $T225123[ebp]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$221564[ebp], eax

; 1306 : 						if(pNotifications)

	cmp	DWORD PTR _pNotifications$221564[ebp], 0
	je	$LN5@ResolveRan@2

; 1307 : 						{
; 1308 : 							Localization::String localizedText = Localization::Lookup("TXT_KEY_MISC_YOU_ARE_ATTACKED_BY_CITY");

	push	OFFSET ??_C@_0CG@IKCFGOGK@TXT_KEY_MISC_YOU_ARE_ATTACKED_BY@
	lea	ecx, DWORD PTR _localizedText$221566[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 1309 : 							localizedText << pkDefender->getNameKey() << pkAttacker->getNameKey() << iDamage;

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T225043[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225044[ebp], eax
	lea	edx, DWORD PTR _iDamage$[ebp]
	push	edx
	lea	eax, DWORD PTR $T225043[ebp]
	push	eax
	lea	ecx, DWORD PTR $T225044[ebp]
	push	ecx
	lea	edx, DWORD PTR _localizedText$221566[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 1310 : 							Localization::String strSummary = Localization::Lookup("TXT_KEY_UNIT_LOST");

	push	OFFSET ??_C@_0BC@DCAPLCAP@TXT_KEY_UNIT_LOST?$AA@
	lea	eax, DWORD PTR _strSummary$221570[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1311 : 							pNotifications->Add(NOTIFICATION_UNIT_DIED, localizedText.toUTF8(), strSummary.toUTF8(), pkDefender->getX(), pkDefender->getY(), (int) pkDefender->getUnitType(), pkDefender->getOwner());

	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T225132[ebp], edx
	mov	eax, DWORD PTR _pkDefender$221543[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR $T225141[ebp], ecx
	mov	edx, DWORD PTR _pkDefender$221543[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR $T225150[ebp], eax
	mov	ecx, DWORD PTR $T225132[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	mov	edx, DWORD PTR $T225141[ebp]
	push	edx
	mov	eax, DWORD PTR $T225150[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$221570[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _localizedText$221566[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	-16309126				; ff07247aH
	mov	ecx, DWORD PTR _pNotifications$221564[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 1312 : 						}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _strSummary$221570[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _localizedText$221566[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN5@ResolveRan@2:

; 1313 : 						bTargetDied = true;

	mov	BYTE PTR _bTargetDied$[ebp], 1

; 1314 : 
; 1315 : 						// Earn bonuses for kills?
; 1316 : 						CvPlayer& kAttackingPlayer = GET_PLAYER(pkAttacker->getOwner());

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T225159[ebp], edx
	mov	eax, DWORD PTR $T225159[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kAttackingPlayer$221573[ebp], eax

; 1317 : 						kAttackingPlayer.DoYieldsFromKill(NO_UNIT, pkDefender->getUnitType(), pkDefender->getX(), pkDefender->getY(), pkDefender->isBarbarian(), 0);

	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR $T225171[ebp], edx
	mov	eax, DWORD PTR _pkDefender$221543[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T225180[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	edx, al
	push	edx
	mov	eax, DWORD PTR $T225171[ebp]
	push	eax
	mov	ecx, DWORD PTR $T225180[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	push	-1
	mov	ecx, DWORD PTR _kAttackingPlayer$221573[ebp]
	call	?DoYieldsFromKill@CvPlayer@@QAEXW4UnitTypes@@0HH_NH@Z ; CvPlayer::DoYieldsFromKill
$LN6@ResolveRan@2:

; 1318 : 					}
; 1319 : 
; 1320 : 					//set damage but don't update entity damage visibility
; 1321 : 					pkDefender->changeDamage(iDamage, pkAttacker->getOwner());

	mov	edx, DWORD PTR _pkAttacker$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T225189[ebp], eax
	push	0
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR $T225189[ebp]
	push	ecx
	mov	edx, DWORD PTR _iDamage$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	call	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::changeDamage

; 1322 : 
; 1323 : 					// Update experience
; 1324 : 					pkDefender->changeExperience(
; 1325 : 					    kCombatInfo.getExperience(BATTLE_UNIT_DEFENDER),
; 1326 : 					    kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_DEFENDER),
; 1327 : 					    true,
; 1328 : 					    kCombatInfo.getInBorders(BATTLE_UNIT_DEFENDER),
; 1329 : 					    kCombatInfo.getUpdateGlobal(BATTLE_UNIT_DEFENDER));

	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getUpdateGlobal
	movzx	eax, al
	push	eax
	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getInBorders@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getInBorders
	movzx	ecx, al
	push	ecx
	push	1
	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getMaxExperienceAllowed
	push	eax
	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getExperience
	push	eax
	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	call	?changeExperience@CvUnit@@QAEXHH_N00@Z	; CvUnit::changeExperience
$LN9@ResolveRan@2:

; 1330 : #endif
; 1331 : 				}
; 1332 : 
; 1333 : 				pkDefender->setCombatUnit(NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 1334 : 				if(!CvUnitMission::IsHeadMission(pkDefender, CvTypes::getMISSION_WAIT_FOR()))		// If the top mission was not a 'wait for', then clear it.

	call	?getMISSION_WAIT_FOR@CvTypes@@YA?BW4MissionTypes@@XZ ; CvTypes::getMISSION_WAIT_FOR
	push	eax
	sub	esp, 8
	mov	edx, esp
	mov	DWORD PTR $T225045[ebp], esp
	mov	DWORD PTR $T225199[ebp], edx
	mov	eax, DWORD PTR $T225199[ebp]
	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T225199[ebp]
	mov	BYTE PTR [edx+4], 0
	mov	eax, DWORD PTR $T225199[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN91@ResolveRan@2
	mov	ecx, DWORD PTR $T225199[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN91@ResolveRan@2:
	mov	edx, DWORD PTR $T225199[ebp]
	mov	DWORD PTR tv363[ebp], edx
	call	?IsHeadMission@CvUnitMission@@SAPBUMissionData@@V?$FObjectHandle@VCvUnit@@@@H@Z ; CvUnitMission::IsHeadMission
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv364[ebp], eax
	cmp	DWORD PTR tv364[ebp], 0
	jne	SHORT $LN4@ResolveRan@2

; 1335 : 					pkDefender->ClearMissionQueue();

	push	1
	mov	ecx, DWORD PTR _pkDefender$221543[ebp]
	call	?ClearMissionQueue@CvUnit@@QAEXH@Z	; CvUnit::ClearMissionQueue
$LN4@ResolveRan@2:

; 1336 : 			}
; 1337 : 			else

	jmp	SHORT $LN3@ResolveRan@2
$LN10@ResolveRan@2:

; 1338 : 				bTargetDied = true;

	mov	BYTE PTR _bTargetDied$[ebp], 1
$LN3@ResolveRan@2:

; 1339 : 		}
; 1340 : 		else

	jmp	SHORT $LN2@ResolveRan@2
$LN11@ResolveRan@2:

; 1341 : 		{
; 1342 : 			CvAssert(false);	// Left as an exercise for the reader
; 1343 : 			bTargetDied = true;

	mov	BYTE PTR _bTargetDied$[ebp], 1
$LN2@ResolveRan@2:

; 1344 : 		}
; 1345 : 	}
; 1346 : 
; 1347 : 	// Report that combat is over in case we want to queue another attack
; 1348 : 	if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	SHORT $LN1@ResolveRan@2

; 1349 : 		GET_PLAYER(pkAttacker->getOwner()).GetTacticalAI()->CombatResolved((void*)pkAttacker, bTargetDied, true);

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T225208[ebp], ecx
	mov	edx, DWORD PTR $T225208[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225212[ebp], edx
	push	1
	movzx	eax, BYTE PTR _bTargetDied$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T225212[ebp]
	call	?GetTacticalAI@CvPlayer@@QBEPAVCvTacticalAI@@XZ ; CvPlayer::GetTacticalAI
	mov	ecx, eax
	call	?CombatResolved@CvTacticalAI@@QAEXPAX_N1@Z ; CvTacticalAI::CombatResolved
$LN1@ResolveRan@2:

; 1350 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$0:
	lea	ecx, DWORD PTR _localizedText$221547[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$1:
	lea	ecx, DWORD PTR _localizedText$221558[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$2:
	lea	ecx, DWORD PTR _localizedText$221566[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$3:
	lea	ecx, DWORD PTR _strSummary$221570[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__ehhandler$?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-484]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ENDP ; CvUnitCombat::ResolveRangedCityVsUnitCombat
PUBLIC	?ApplyPostCityCombatEffects@CvUnitCombat@@KAXPAVCvUnit@@PAVCvCity@@H@Z ; CvUnitCombat::ApplyPostCityCombatEffects
PUBLIC	??_C@_0CG@OKMGANJ@TXT_KEY_MISC_ENEMY_UNIT_WITHDRAW@ ; `string'
PUBLIC	??_C@_0CE@HDJNMEBC@TXT_KEY_MISC_YOU_UNIT_WITHDRAW_C@ ; `string'
PUBLIC	??_C@_0CD@JKKLGOJN@TXT_KEY_MISC_YOU_CITY_WAS_CAPTUR@ ; `string'
PUBLIC	??_C@_0CK@MGGGGIOI@TXT_KEY_MISC_YOU_UNIT_CAPTURED_E@ ; `string'
PUBLIC	??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z ; GetLocalizedText<char const *,int,char const *,char const *>
PUBLIC	??_C@_0CI@BPAJNLDF@TXT_KEY_MISC_YOU_KILLED_ENEMY_UN@ ; `string'
PUBLIC	??_C@_0CK@KJHCGPCH@TXT_KEY_MISC_YOU_UNIT_DIED_ATTAC@ ; `string'
PUBLIC	??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z ; GetLocalizedText<char const *,int>
PUBLIC	??_C@_0CN@OKIGEIKD@TXT_KEY_MISC_YOU_CITY_RANSOMED_B@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveCityMeleeCombat
EXTRN	?isNoCapture@CvUnit@@QBE_NXZ:PROC		; CvUnit::isNoCapture
EXTRN	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ:PROC	; CvCity::getTeam
EXTRN	?isHuman@CvCity@@QBE_NXZ:PROC			; CvCity::isHuman
EXTRN	?GetPlayer@CvCity@@QAEPAVCvPlayer@@XZ:PROC	; CvCity::GetPlayer
EXTRN	?ChangeGold@CvTreasury@@QAEXH@Z:PROC		; CvTreasury::ChangeGold
EXTRN	?GetGold@CvTreasury@@QBEHXZ:PROC		; CvTreasury::GetGold
EXTRN	?GetTreasury@CvPlayer@@QBEPAVCvTreasury@@XZ:PROC ; CvPlayer::GetTreasury
EXTRN	?setDamage@CvCity@@QAEXH_N@Z:PROC		; CvCity::setDamage
EXTRN	?plot@CvCity@@QBEPAVCvPlot@@XZ:PROC		; CvCity::plot
;	COMDAT ??_C@_0CG@OKMGANJ@TXT_KEY_MISC_ENEMY_UNIT_WITHDRAW@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CG@OKMGANJ@TXT_KEY_MISC_ENEMY_UNIT_WITHDRAW@ DB 'TXT_KEY_MISC_ENEM'
	DB	'Y_UNIT_WITHDRAW_CITY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HDJNMEBC@TXT_KEY_MISC_YOU_UNIT_WITHDRAW_C@
CONST	SEGMENT
??_C@_0CE@HDJNMEBC@TXT_KEY_MISC_YOU_UNIT_WITHDRAW_C@ DB 'TXT_KEY_MISC_YOU'
	DB	'_UNIT_WITHDRAW_CITY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JKKLGOJN@TXT_KEY_MISC_YOU_CITY_WAS_CAPTUR@
CONST	SEGMENT
??_C@_0CD@JKKLGOJN@TXT_KEY_MISC_YOU_CITY_WAS_CAPTUR@ DB 'TXT_KEY_MISC_YOU'
	DB	'_CITY_WAS_CAPTURED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MGGGGIOI@TXT_KEY_MISC_YOU_UNIT_CAPTURED_E@
CONST	SEGMENT
??_C@_0CK@MGGGGIOI@TXT_KEY_MISC_YOU_UNIT_CAPTURED_E@ DB 'TXT_KEY_MISC_YOU'
	DB	'_UNIT_CAPTURED_ENEMY_CITY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BPAJNLDF@TXT_KEY_MISC_YOU_KILLED_ENEMY_UN@
CONST	SEGMENT
??_C@_0CI@BPAJNLDF@TXT_KEY_MISC_YOU_KILLED_ENEMY_UN@ DB 'TXT_KEY_MISC_YOU'
	DB	'_KILLED_ENEMY_UNIT_CITY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KJHCGPCH@TXT_KEY_MISC_YOU_UNIT_DIED_ATTAC@
CONST	SEGMENT
??_C@_0CK@KJHCGPCH@TXT_KEY_MISC_YOU_UNIT_DIED_ATTAC@ DB 'TXT_KEY_MISC_YOU'
	DB	'_UNIT_DIED_ATTACKING_CITY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@OKIGEIKD@TXT_KEY_MISC_YOU_CITY_RANSOMED_B@
CONST	SEGMENT
??_C@_0CN@OKIGEIKD@TXT_KEY_MISC_YOU_CITY_RANSOMED_B@ DB 'TXT_KEY_MISC_YOU'
	DB	'_CITY_RANSOMED_BY_BARBARIANS', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$8
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$9
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
_TEXT	SEGMENT
tv691 = -692						; size = 4
tv643 = -688						; size = 4
tv941 = -684						; size = 4
tv564 = -680						; size = 4
tv940 = -676						; size = 4
tv512 = -672						; size = 4
tv939 = -668						; size = 4
tv460 = -664						; size = 4
tv938 = -660						; size = 4
tv405 = -656						; size = 4
tv937 = -652						; size = 4
tv353 = -648						; size = 4
tv161 = -644						; size = 4
tv323 = -640						; size = 4
tv292 = -636						; size = 4
tv244 = -632						; size = 4
tv734 = -628						; size = 4
$T225675 = -624						; size = 4
$T225671 = -620						; size = 4
$T225662 = -616						; size = 4
$T225658 = -612						; size = 4
$T225654 = -608						; size = 4
$T225645 = -604						; size = 4
$T225641 = -600						; size = 4
$T225637 = -596						; size = 4
$T225629 = -592						; size = 4
$T225625 = -588						; size = 4
$T225616 = -584						; size = 4
$T225607 = -580						; size = 4
$T225603 = -576						; size = 4
$T225599 = -572						; size = 4
$T225591 = -568						; size = 4
$T225587 = -564						; size = 4
$T225578 = -560						; size = 4
$T225569 = -556						; size = 4
$T225565 = -552						; size = 4
$T225561 = -548						; size = 4
$T225553 = -544						; size = 4
$T225549 = -540						; size = 4
$T225540 = -536						; size = 4
$T225531 = -532						; size = 4
$T225527 = -528						; size = 4
$T225523 = -524						; size = 4
$T225515 = -520						; size = 4
$T225511 = -516						; size = 4
_inst$225501 = -512					; size = 4
$T225497 = -508						; size = 4
$T225488 = -504						; size = 4
$T225479 = -500						; size = 4
$T225475 = -496						; size = 4
$T225471 = -492						; size = 4
$T225463 = -488						; size = 4
$T225459 = -484						; size = 4
$T225450 = -480						; size = 4
$T225441 = -476						; size = 4
$T225437 = -472						; size = 4
$T225433 = -468						; size = 4
$T225425 = -464						; size = 4
$T225421 = -460						; size = 4
$T225409 = -456						; size = 4
_inst$225404 = -452					; size = 4
$T225400 = -448						; size = 4
$T225391 = -444						; size = 4
__Ptr$225390 = -440					; size = 4
$T225386 = -436						; size = 4
__Cvtptr$225384 = -432					; size = 4
__Ans$225385 = -428					; size = 4
$T225375 = -424						; size = 4
$T225371 = -420						; size = 4
$T225367 = -416						; size = 4
$T225363 = -412						; size = 4
$T225362 = -408						; size = 4
$T225353 = -404						; size = 4
$T225344 = -400						; size = 4
$T225340 = -396						; size = 4
$T225336 = -392						; size = 4
$T225328 = -388						; size = 4
$T225324 = -384						; size = 4
$T225315 = -380						; size = 4
$T225311 = -376						; size = 4
$T225302 = -372						; size = 4
$T225298 = -368						; size = 4
$T225289 = -364						; size = 4
$T225285 = -360						; size = 4
$T225276 = -356						; size = 4
$T225272 = -352						; size = 4
$T225264 = -348						; size = 4
$T225245 = -344						; size = 28
$T225244 = -316						; size = 4
$T225243 = -312						; size = 4
$T225242 = -308						; size = 28
$T225241 = -280						; size = 4
$T225240 = -276						; size = 4
$T225239 = -272						; size = 28
$T225238 = -244						; size = 4
$T225237 = -240						; size = 4
$T225236 = -236						; size = 4
$T225235 = -232						; size = 28
$T225234 = -204						; size = 4
$T225233 = -200						; size = 4
$T225232 = -196						; size = 28
$T225231 = -168						; size = 4
$T225230 = -164						; size = 4
$T225229 = -160						; size = 4
$T225228 = -156						; size = 28
$T225227 = -128						; size = 4
$T225226 = -124						; size = 4
$T225225 = -120						; size = 4
$T225224 = -116						; size = 4
$T225223 = -112						; size = 28
$T225222 = -84						; size = 4
_pAttacker$221617 = -80					; size = 4
_iNumGoldStolen$221600 = -76				; size = 4
_iActivePlayerID$ = -72					; size = 4
_strBuffer$ = -68					; size = 28
__$ArrayPad$ = -40					; size = 4
_pkDefender$ = -36					; size = 4
_iDefenderDamageInflicted$ = -32			; size = 4
_iAttackerDamageInflicted$ = -28			; size = 4
_bCityConquered$ = -21					; size = 1
_pkAttacker$ = -20					; size = 4
_pkPlot$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_kCombatInfo$ = 8					; size = 4
_uiParentEventID$ = 12					; size = 4
?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z PROC ; CvUnitCombat::ResolveCityMeleeCombat, COMDAT

; 1362 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 680				; 000002a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1363 : 	CvUnit* pkAttacker = kCombatInfo.getUnit(BATTLE_UNIT_ATTACKER);

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pkAttacker$[ebp], eax

; 1364 : 	CvCity* pkDefender = kCombatInfo.getCity(BATTLE_UNIT_DEFENDER);

	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getCity@CvCombatInfo@@QBEPAVCvCity@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getCity
	mov	DWORD PTR _pkDefender$[ebp], eax

; 1365 : 
; 1366 : 	CvAssert_Debug(pkAttacker && pkDefender);
; 1367 : 
; 1368 : 	CvPlot* pkPlot = kCombatInfo.getPlot();

	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ	; CvCombatInfo::getPlot
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1369 : 	if(!pkPlot && pkDefender)

	cmp	DWORD PTR _pkPlot$[ebp], 0
	jne	SHORT $LN25@ResolveCit
	cmp	DWORD PTR _pkDefender$[ebp], 0
	je	SHORT $LN25@ResolveCit

; 1370 : 		pkPlot = pkDefender->plot();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	mov	DWORD PTR _pkPlot$[ebp], eax
$LN25@ResolveCit:

; 1371 : 
; 1372 : 	CvAssert_Debug(pkPlot);
; 1373 : 
; 1374 : 	int iAttackerDamageInflicted = kCombatInfo.getDamageInflicted(BATTLE_UNIT_ATTACKER);

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getDamageInflicted
	mov	DWORD PTR _iAttackerDamageInflicted$[ebp], eax

; 1375 : 	int iDefenderDamageInflicted = kCombatInfo.getDamageInflicted(BATTLE_UNIT_DEFENDER);

	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getDamageInflicted
	mov	DWORD PTR _iDefenderDamageInflicted$[ebp], eax

; 1376 : 
; 1377 : 	if(pkAttacker && pkDefender)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	SHORT $LN24@ResolveCit
	cmp	DWORD PTR _pkDefender$[ebp], 0
	je	SHORT $LN24@ResolveCit

; 1378 : 	{
; 1379 : 		pkAttacker->changeDamage(iDefenderDamageInflicted, pkDefender->getOwner());

	mov	eax, DWORD PTR _pkDefender$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T225264[ebp], ecx
	push	0
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR $T225264[ebp]
	push	edx
	mov	eax, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::changeDamage

; 1380 : 		pkDefender->changeDamage(iAttackerDamageInflicted);

	mov	ecx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?changeDamage@CvCity@@QAEXH@Z		; CvCity::changeDamage

; 1381 : 
; 1382 : 		pkAttacker->changeExperience(kCombatInfo.getExperience(BATTLE_UNIT_ATTACKER),
; 1383 : 		                             kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_ATTACKER),
; 1384 : 		                             true,
; 1385 : 		                             false,
; 1386 : 		                             kCombatInfo.getUpdateGlobal(BATTLE_UNIT_ATTACKER));

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getUpdateGlobal
	movzx	edx, al
	push	edx
	push	0
	push	1
	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getMaxExperienceAllowed
	push	eax
	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getExperience
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?changeExperience@CvUnit@@QAEXHH_N00@Z	; CvUnit::changeExperience
$LN24@ResolveCit:

; 1387 : 	}
; 1388 : 
; 1389 : 	bool bCityConquered = false;

	mov	BYTE PTR _bCityConquered$[ebp], 0

; 1390 : 
; 1391 : 	if(pkDefender)

	cmp	DWORD PTR _pkDefender$[ebp], 0
	je	SHORT $LN23@ResolveCit

; 1392 : 		pkDefender->clearCombat();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?clearCombat@CvCity@@QAEXXZ		; CvCity::clearCombat

; 1393 : 	else

	jmp	SHORT $LN22@ResolveCit
$LN23@ResolveCit:

; 1394 : 		bCityConquered = true;

	mov	BYTE PTR _bCityConquered$[ebp], 1
$LN22@ResolveCit:

; 1395 : 
; 1396 : 	if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	SHORT $LN20@ResolveCit

; 1397 : 	{
; 1398 : 		pkAttacker->setCombatUnit(NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 1399 : 		pkAttacker->ClearMissionQueue(GetPostCombatDelay());

	call	?GetPostCombatDelay@@YAHXZ		; GetPostCombatDelay
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?ClearMissionQueue@CvUnit@@QAEXH@Z	; CvUnit::ClearMissionQueue

; 1400 : 
; 1401 : 		if(pkAttacker->isSuicide())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isSuicide@CvUnit@@QBE_NXZ		; CvUnit::isSuicide
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@ResolveCit

; 1402 : 		{
; 1403 : 			pkAttacker->setCombatUnit(NULL);	// Must clear this if doing a delayed kill, should this be part of the kill method?

	push	0
	push	0
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 1404 : 			pkAttacker->kill(true);

	push	-1
	push	1
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z	; CvUnit::kill
$LN20@ResolveCit:

; 1405 : 		}
; 1406 : 	}
; 1407 : 
; 1408 : 	CvString strBuffer;

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1409 : 	int iActivePlayerID = GC.getGame().getActivePlayer();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225272[ebp], ecx
	mov	ecx, DWORD PTR $T225272[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	mov	DWORD PTR _iActivePlayerID$[ebp], eax

; 1410 : 
; 1411 : 	// Barbarians don't capture Cities
; 1412 : 	if(pkAttacker && pkDefender)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	$LN5@ResolveCit
	cmp	DWORD PTR _pkDefender$[ebp], 0
	je	$LN5@ResolveCit

; 1413 : 	{
; 1414 : 		if(pkAttacker->isBarbarian() && (pkDefender->getDamage() >= pkDefender->GetMaxHitPoints()))

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	edx, al
	test	edx, edx
	je	$LN18@ResolveCit
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	mov	esi, eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?GetMaxHitPoints@CvCity@@QBEHXZ		; CvCity::GetMaxHitPoints
	cmp	esi, eax
	jl	$LN18@ResolveCit

; 1415 : 		{
; 1416 : 			// 1 HP left
; 1417 : 			pkDefender->setDamage(pkDefender->GetMaxHitPoints() - 1);

	push	0
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?GetMaxHitPoints@CvCity@@QBEHXZ		; CvCity::GetMaxHitPoints
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?setDamage@CvCity@@QAEXH_N@Z		; CvCity::setDamage

; 1418 : 
; 1419 : 			int iNumGoldStolen = GC.getBARBARIAN_CITY_GOLD_RANSOM();	// 200

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7072
	mov	DWORD PTR $T225276[ebp], eax
	mov	ecx, DWORD PTR $T225276[ebp]
	mov	DWORD PTR _iNumGoldStolen$221600[ebp], ecx

; 1420 : 
; 1421 : 			if(iNumGoldStolen > GET_PLAYER(pkDefender->getOwner()).GetTreasury()->GetGold())

	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T225285[ebp], eax
	mov	ecx, DWORD PTR $T225285[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225289[ebp], ecx
	mov	ecx, DWORD PTR $T225289[ebp]
	call	?GetTreasury@CvPlayer@@QBEPAVCvTreasury@@XZ ; CvPlayer::GetTreasury
	mov	ecx, eax
	call	?GetGold@CvTreasury@@QBEHXZ		; CvTreasury::GetGold
	cmp	DWORD PTR _iNumGoldStolen$221600[ebp], eax
	jle	SHORT $LN17@ResolveCit

; 1422 : 			{
; 1423 : 				iNumGoldStolen = GET_PLAYER(pkDefender->getOwner()).GetTreasury()->GetGold();

	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T225298[ebp], eax
	mov	ecx, DWORD PTR $T225298[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225302[ebp], ecx
	mov	ecx, DWORD PTR $T225302[ebp]
	call	?GetTreasury@CvPlayer@@QBEPAVCvTreasury@@XZ ; CvPlayer::GetTreasury
	mov	ecx, eax
	call	?GetGold@CvTreasury@@QBEHXZ		; CvTreasury::GetGold
	mov	DWORD PTR _iNumGoldStolen$221600[ebp], eax
$LN17@ResolveCit:

; 1424 : 			}
; 1425 : 
; 1426 : 			// City is ransomed for Gold
; 1427 : 			GET_PLAYER(pkDefender->getOwner()).GetTreasury()->ChangeGold(-iNumGoldStolen);

	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T225311[ebp], eax
	mov	ecx, DWORD PTR $T225311[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225315[ebp], ecx
	mov	edx, DWORD PTR _iNumGoldStolen$221600[ebp]
	neg	edx
	push	edx
	mov	ecx, DWORD PTR $T225315[ebp]
	call	?GetTreasury@CvPlayer@@QBEPAVCvTreasury@@XZ ; CvPlayer::GetTreasury
	mov	ecx, eax
	call	?ChangeGold@CvTreasury@@QAEXH@Z		; CvTreasury::ChangeGold

; 1428 : 
; 1429 : 			if(pkDefender->getOwner() == iActivePlayerID)

	mov	eax, DWORD PTR _pkDefender$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T225324[ebp], ecx
	mov	edx, DWORD PTR $T225324[ebp]
	cmp	edx, DWORD PTR _iActivePlayerID$[ebp]
	jne	$LN16@ResolveCit

; 1430 : 			{
; 1431 : 				strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_CITY_RANSOMED_BY_BARBARIANS", pkDefender->getNameKey(), iNumGoldStolen);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T225222[ebp], eax
	lea	eax, DWORD PTR _iNumGoldStolen$221600[ebp]
	push	eax
	lea	ecx, DWORD PTR $T225222[ebp]
	push	ecx
	push	OFFSET ??_C@_0CN@OKIGEIKD@TXT_KEY_MISC_YOU_CITY_RANSOMED_B@
	lea	edx, DWORD PTR $T225223[ebp]
	push	edx
	call	??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z ; GetLocalizedText<char const *,int>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv734[ebp], eax
	mov	eax, DWORD PTR tv734[ebp]
	mov	DWORD PTR $T225328[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T225328[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T225223[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1432 : 				GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*,GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitDefeatScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkPlot->getX(), pkPlot->getY()*/);

	mov	edx, DWORD PTR $T225336[ebp]
	mov	DWORD PTR tv244[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv244[ebp], eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T225340[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T225344[ebp], ecx
	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T225353[ebp], eax
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR $T225340[ebp]
	push	ecx
	mov	edx, DWORD PTR $T225344[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T225353[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv244[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv244[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN16@ResolveCit:

; 1433 : 			}
; 1434 : 
; 1435 : 			if( pkDefender->GetPlayer()->GetID() == GC.getGame().getActivePlayer() && pkDefender->isHuman() && !GC.getGame().isGameMultiPlayer())

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?GetPlayer@CvCity@@QAEPAVCvPlayer@@XZ	; CvCity::GetPlayer
	mov	DWORD PTR $T225362[ebp], eax
	mov	eax, DWORD PTR $T225362[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T225363[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225367[ebp], edx
	mov	ecx, DWORD PTR $T225367[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T225363[ebp], eax
	jne	SHORT $LN15@ResolveCit
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?isHuman@CvCity@@QBE_NXZ		; CvCity::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@ResolveCit
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225371[ebp], ecx
	mov	ecx, DWORD PTR $T225371[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN15@ResolveCit

; 1436 : 			{
; 1437 : 				gDLL->UnlockAchievement(ACHIEVEMENT_REALLY_SUCK);

	mov	eax, DWORD PTR $T225375[ebp]
	mov	DWORD PTR tv292[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv292[ebp], ecx
	push	118					; 00000076H
	mov	edx, DWORD PTR tv292[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv292[ebp]
	mov	edx, DWORD PTR [eax+828]
	call	edx
$LN15@ResolveCit:

; 1438 : 			}
; 1439 : 
; 1440 : 			// Barb goes away after ransom
; 1441 : 			pkAttacker->kill(true, NO_PLAYER);

	push	-1
	push	1
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z	; CvUnit::kill

; 1442 : 
; 1443 : 			// Treat this as a conquest
; 1444 : 			bCityConquered = true;

	mov	BYTE PTR _bCityConquered$[ebp], 1
	jmp	$LN5@ResolveCit
$LN18@ResolveCit:

; 1445 : 		}
; 1446 : 		// Attacker died
; 1447 : 		else if(pkAttacker->IsDead())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?IsDead@CvUnit@@QBE_NXZ			; CvUnit::IsDead
	movzx	eax, al
	test	eax, eax
	je	$LN13@ResolveCit

; 1448 : 		{
; 1449 : 			auto_ptr<ICvUnit1> pAttacker = GC.WrapUnitPointer(pkAttacker);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225224[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z ; CvGlobals::WrapUnitPointer
	mov	DWORD PTR $T225386[ebp], eax
	mov	eax, DWORD PTR $T225386[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Cvtptr$225384[ebp], ecx
	mov	edx, DWORD PTR __Cvtptr$225384[ebp]
	mov	DWORD PTR __Ans$225385[ebp], edx
	mov	eax, DWORD PTR $T225386[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR __Ans$225385[ebp]
	mov	DWORD PTR $T225225[ebp], ecx
	mov	edx, DWORD PTR $T225225[ebp]
	mov	DWORD PTR $T225391[ebp], edx
	mov	eax, DWORD PTR $T225391[ebp]
	mov	DWORD PTR __Ptr$225390[ebp], eax
	mov	DWORD PTR $T225391[ebp], 0
	mov	ecx, DWORD PTR __Ptr$225390[ebp]
	mov	DWORD PTR _pAttacker$221617[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T225224[ebp]
	mov	DWORD PTR $T225400[ebp], edx
	cmp	DWORD PTR $T225400[ebp], 0
	je	SHORT $LN104@ResolveCit
	mov	eax, DWORD PTR $T225400[ebp]
	mov	DWORD PTR _inst$225404[ebp], eax
	mov	ecx, DWORD PTR _inst$225404[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inst$225404[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
$LN104@ResolveCit:

; 1450 : 			gDLL->GameplayUnitDestroyedInCombat(pAttacker.get());

	mov	edx, DWORD PTR $T225409[ebp]
	mov	DWORD PTR tv323[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv323[ebp], eax
	mov	ecx, DWORD PTR _pAttacker$221617[ebp]
	push	ecx
	mov	edx, DWORD PTR tv323[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv323[ebp]
	mov	edx, DWORD PTR [eax+600]
	call	edx

; 1451 : 			if(pkAttacker->getOwner() == iActivePlayerID)

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T225421[ebp], ecx
	mov	edx, DWORD PTR $T225421[ebp]
	cmp	edx, DWORD PTR _iActivePlayerID$[ebp]
	jne	$LN12@ResolveCit

; 1452 : 			{
; 1453 : 				strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_DIED_ATTACKING_CITY", pkAttacker->getNameKey(), pkDefender->getNameKey(), iAttackerDamageInflicted);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T225226[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225227[ebp], eax
	lea	eax, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T225226[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225227[ebp]
	push	edx
	push	OFFSET ??_C@_0CK@KJHCGPCH@TXT_KEY_MISC_YOU_UNIT_DIED_ATTAC@
	lea	eax, DWORD PTR $T225228[ebp]
	push	eax
	call	??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z ; GetLocalizedText<char const *,char const *,int>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv161[ebp], eax
	mov	ecx, DWORD PTR tv161[ebp]
	mov	DWORD PTR $T225425[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR $T225425[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T225228[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1454 : 				GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitDefeatScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkPlot->getX(), pkPlot->getY()*/);

	mov	eax, DWORD PTR $T225433[ebp]
	mov	DWORD PTR tv353[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv353[ebp], ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T225437[ebp], eax
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T225441[ebp], edx
	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T225450[ebp], ecx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR $T225437[ebp]
	push	edx
	mov	eax, DWORD PTR $T225441[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR $T225450[ebp]
	push	ecx
	mov	edx, DWORD PTR _uiParentEventID$[ebp]
	push	edx
	mov	eax, DWORD PTR tv353[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv353[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN12@ResolveCit:

; 1455 : 			}
; 1456 : 			if(pkDefender->getOwner() == iActivePlayerID)

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T225459[ebp], edx
	mov	eax, DWORD PTR $T225459[ebp]
	cmp	eax, DWORD PTR _iActivePlayerID$[ebp]
	jne	$LN11@ResolveCit

; 1457 : 			{
; 1458 : 				strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_KILLED_ENEMY_UNIT_CITY", pkDefender->getNameKey(), iAttackerDamageInflicted, pkAttacker->getNameKey(), pkAttacker->getVisualCivAdjective(pkDefender->getTeam()));

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getVisualCivAdjective@CvUnit@@QBEPBDW4TeamTypes@@@Z ; CvUnit::getVisualCivAdjective
	mov	DWORD PTR $T225229[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225230[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T225231[ebp], eax
	lea	ecx, DWORD PTR $T225229[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225230[ebp]
	push	edx
	lea	eax, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T225231[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@BPAJNLDF@TXT_KEY_MISC_YOU_KILLED_ENEMY_UN@
	lea	edx, DWORD PTR $T225232[ebp]
	push	edx
	call	??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z ; GetLocalizedText<char const *,int,char const *,char const *>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv937[ebp], eax
	mov	eax, DWORD PTR tv937[ebp]
	mov	DWORD PTR $T225463[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR $T225463[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T225232[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1459 : 				GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitVictoryScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkPlot->getX(), pkPlot->getY()*/);

	mov	edx, DWORD PTR $T225471[ebp]
	mov	DWORD PTR tv405[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv405[ebp], eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T225475[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T225479[ebp], ecx
	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T225488[ebp], eax
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR $T225475[ebp]
	push	ecx
	mov	edx, DWORD PTR $T225479[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T225488[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv405[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv405[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN11@ResolveCit:

; 1460 : 			}
; 1461 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _pAttacker$221617[ebp]
	mov	DWORD PTR $T225497[ebp], eax
	cmp	DWORD PTR $T225497[ebp], 0
	je	SHORT $LN151@ResolveCit
	mov	ecx, DWORD PTR $T225497[ebp]
	mov	DWORD PTR _inst$225501[ebp], ecx
	mov	edx, DWORD PTR _inst$225501[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$225501[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN151@ResolveCit:

; 1462 : 		// City conquest
; 1463 : 		else if(pkDefender->getDamage() >= pkDefender->GetMaxHitPoints())

	jmp	$LN5@ResolveCit
$LN13@ResolveCit:
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	mov	esi, eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?GetMaxHitPoints@CvCity@@QBEHXZ		; CvCity::GetMaxHitPoints
	cmp	esi, eax
	jl	$LN9@ResolveCit

; 1464 : 		{
; 1465 : 			if(!pkAttacker->isNoCapture())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isNoCapture@CvUnit@@QBE_NXZ		; CvUnit::isNoCapture
	movzx	eax, al
	test	eax, eax
	jne	$LN8@ResolveCit

; 1466 : 			{
; 1467 : 				if(pkAttacker->getOwner() == iActivePlayerID)

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T225511[ebp], edx
	mov	eax, DWORD PTR $T225511[ebp]
	cmp	eax, DWORD PTR _iActivePlayerID$[ebp]
	jne	$LN7@ResolveCit

; 1468 : 				{
; 1469 : 					strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_CAPTURED_ENEMY_CITY", pkAttacker->getNameKey(), iDefenderDamageInflicted, pkDefender->getNameKey());

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T225233[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225234[ebp], eax
	lea	ecx, DWORD PTR $T225233[ebp]
	push	ecx
	lea	edx, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	edx
	lea	eax, DWORD PTR $T225234[ebp]
	push	eax
	push	OFFSET ??_C@_0CK@MGGGGIOI@TXT_KEY_MISC_YOU_UNIT_CAPTURED_E@
	lea	ecx, DWORD PTR $T225235[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z ; GetLocalizedText<char const *,int,char const *>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv938[ebp], eax
	mov	edx, DWORD PTR tv938[ebp]
	mov	DWORD PTR $T225515[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR $T225515[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T225235[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1470 : 					GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitVictoryScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkPlot->getX(), pkPlot->getY()*/);

	mov	ecx, DWORD PTR $T225523[ebp]
	mov	DWORD PTR tv460[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv460[ebp], edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T225527[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T225531[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T225540[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T225527[ebp]
	push	eax
	mov	ecx, DWORD PTR $T225531[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T225540[ebp]
	push	edx
	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv460[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv460[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN7@ResolveCit:

; 1471 : 				}
; 1472 : 				if(pkDefender->getOwner() == iActivePlayerID)

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T225549[ebp], edx
	mov	eax, DWORD PTR $T225549[ebp]
	cmp	eax, DWORD PTR _iActivePlayerID$[ebp]
	jne	$LN6@ResolveCit

; 1473 : 				{
; 1474 : 					strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_CITY_WAS_CAPTURED", pkDefender->getNameKey(), pkAttacker->getNameKey(), pkAttacker->getVisualCivAdjective(pkDefender->getTeam()), iDefenderDamageInflicted);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getVisualCivAdjective@CvUnit@@QBEPBDW4TeamTypes@@@Z ; CvUnit::getVisualCivAdjective
	mov	DWORD PTR $T225236[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225237[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T225238[ebp], eax
	lea	ecx, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225236[ebp]
	push	edx
	lea	eax, DWORD PTR $T225237[ebp]
	push	eax
	lea	ecx, DWORD PTR $T225238[ebp]
	push	ecx
	push	OFFSET ??_C@_0CD@JKKLGOJN@TXT_KEY_MISC_YOU_CITY_WAS_CAPTUR@
	lea	edx, DWORD PTR $T225239[ebp]
	push	edx
	call	??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z ; GetLocalizedText<char const *,char const *,char const *,int>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv939[ebp], eax
	mov	eax, DWORD PTR tv939[ebp]
	mov	DWORD PTR $T225553[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR $T225553[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T225239[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1475 : 					GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*,GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitDefeatScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkPlot->getX(), pkPlot->getY()*/);

	mov	edx, DWORD PTR $T225561[ebp]
	mov	DWORD PTR tv512[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv512[ebp], eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T225565[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T225569[ebp], ecx
	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T225578[ebp], eax
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR $T225565[ebp]
	push	ecx
	mov	edx, DWORD PTR $T225569[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T225578[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv512[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv512[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN6@ResolveCit:

; 1476 : 				}
; 1477 : 
; 1478 : 				pkAttacker->UnitMove(pkPlot, true, pkAttacker);

	push	0
	mov	eax, DWORD PTR _pkAttacker$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?UnitMove@CvUnit@@QAE_NPAVCvPlot@@_NPAV1@1@Z ; CvUnit::UnitMove

; 1479 : 
; 1480 : 				bCityConquered = true;

	mov	BYTE PTR _bCityConquered$[ebp], 1
$LN8@ResolveCit:

; 1481 : 			}
; 1482 : 		}
; 1483 : 		// Neither side lost
; 1484 : 		else

	jmp	$LN5@ResolveCit
$LN9@ResolveCit:

; 1485 : 		{
; 1486 : 			if(pkAttacker->getOwner() == iActivePlayerID)

	mov	edx, DWORD PTR _pkAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T225587[ebp], eax
	mov	ecx, DWORD PTR $T225587[ebp]
	cmp	ecx, DWORD PTR _iActivePlayerID$[ebp]
	jne	$LN4@ResolveCit

; 1487 : 			{
; 1488 : 				strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_WITHDRAW_CITY", pkAttacker->getNameKey(), iDefenderDamageInflicted, pkDefender->getNameKey(), iAttackerDamageInflicted);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T225240[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225241[ebp], eax
	lea	edx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	edx
	lea	eax, DWORD PTR $T225240[ebp]
	push	eax
	lea	ecx, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225241[ebp]
	push	edx
	push	OFFSET ??_C@_0CE@HDJNMEBC@TXT_KEY_MISC_YOU_UNIT_WITHDRAW_C@
	lea	eax, DWORD PTR $T225242[ebp]
	push	eax
	call	??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z ; GetLocalizedText<char const *,int,char const *,int>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv940[ebp], eax
	mov	ecx, DWORD PTR tv940[ebp]
	mov	DWORD PTR $T225591[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR $T225591[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T225242[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1489 : 				GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_OUR_WITHDRAWL", MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkPlot->getX(), pkPlot->getY()*/);

	mov	eax, DWORD PTR $T225599[ebp]
	mov	DWORD PTR tv564[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv564[ebp], ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T225603[ebp], eax
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T225607[ebp], edx
	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T225616[ebp], ecx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR $T225603[ebp]
	push	edx
	mov	eax, DWORD PTR $T225607[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR $T225616[ebp]
	push	ecx
	mov	edx, DWORD PTR _uiParentEventID$[ebp]
	push	edx
	mov	eax, DWORD PTR tv564[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv564[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN4@ResolveCit:

; 1490 : 			}
; 1491 : 			if(pkDefender->getOwner() == iActivePlayerID)

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T225625[ebp], edx
	mov	eax, DWORD PTR $T225625[ebp]
	cmp	eax, DWORD PTR _iActivePlayerID$[ebp]
	jne	$LN3@ResolveCit

; 1492 : 			{
; 1493 : 				strBuffer = GetLocalizedText("TXT_KEY_MISC_ENEMY_UNIT_WITHDRAW_CITY", pkAttacker->getNameKey(), iDefenderDamageInflicted, pkDefender->getNameKey(), iAttackerDamageInflicted);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T225243[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225244[ebp], eax
	lea	ecx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225243[ebp]
	push	edx
	lea	eax, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T225244[ebp]
	push	ecx
	push	OFFSET ??_C@_0CG@OKMGANJ@TXT_KEY_MISC_ENEMY_UNIT_WITHDRAW@
	lea	edx, DWORD PTR $T225245[ebp]
	push	edx
	call	??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z ; GetLocalizedText<char const *,int,char const *,int>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv941[ebp], eax
	mov	eax, DWORD PTR tv941[ebp]
	mov	DWORD PTR $T225629[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR $T225629[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T225245[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1494 : 				GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_THEIR_WITHDRAWL", MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkPlot->getX(), pkPlot->getY()*/);

	mov	edx, DWORD PTR $T225637[ebp]
	mov	DWORD PTR tv643[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv643[ebp], eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T225641[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T225645[ebp], ecx
	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T225654[ebp], eax
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR $T225641[ebp]
	push	ecx
	mov	edx, DWORD PTR $T225645[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T225654[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv643[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv643[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN3@ResolveCit:

; 1495 : 			}
; 1496 : 			pkAttacker->changeMoves(-GC.getMOVE_DENOMINATOR());

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6236
	mov	DWORD PTR $T225658[ebp], eax
	mov	ecx, DWORD PTR $T225658[ebp]
	neg	ecx
	push	ecx
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?changeMoves@CvUnit@@QAEXH@Z		; CvUnit::changeMoves

; 1497 : 
; 1498 : 			ApplyPostCityCombatEffects(pkAttacker, pkDefender, iAttackerDamageInflicted);

	mov	edx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkDefender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	push	ecx
	call	?ApplyPostCityCombatEffects@CvUnitCombat@@KAXPAVCvUnit@@PAVCvCity@@H@Z ; CvUnitCombat::ApplyPostCityCombatEffects
	add	esp, 12					; 0000000cH
$LN5@ResolveCit:

; 1499 : 		}
; 1500 : 	}
; 1501 : 
; 1502 : 	if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	$LN2@ResolveCit

; 1503 : 	{
; 1504 : 		pkAttacker->PublishQueuedVisualizationMoves();

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?PublishQueuedVisualizationMoves@CvUnit@@IAEXXZ ; CvUnit::PublishQueuedVisualizationMoves

; 1505 : 
; 1506 : #ifdef NQ_UNIT_TURN_ENDS_ON_FINAL_ATTACK
; 1507 : 		if(!pkAttacker->canMoveAfterAttacking() && pkAttacker->isOutOfAttacks())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?canMoveAfterAttacking@CvUnit@@QBE_NXZ	; CvUnit::canMoveAfterAttacking
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@ResolveCit
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isOutOfAttacks@CvUnit@@QBE_NXZ		; CvUnit::isOutOfAttacks
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@ResolveCit

; 1508 : #else
; 1509 : 		if(!pkAttacker->canMoveAfterAttacking())
; 1510 : #endif
; 1511 : 		{
; 1512 : 			pkAttacker->finishMoves();

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?finishMoves@CvUnit@@QAEXXZ		; CvUnit::finishMoves

; 1513 : 			GC.GetEngineUserInterface()->changeCycleSelectionCounter(1);

	mov	ecx, DWORD PTR $T225662[ebp]
	mov	DWORD PTR tv691[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv691[ebp], edx
	push	1
	mov	eax, DWORD PTR tv691[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv691[ebp]
	mov	eax, DWORD PTR [edx+224]
	call	eax
$LN1@ResolveCit:

; 1514 : 		}
; 1515 : 
; 1516 : 		// Report that combat is over in case we want to queue another attack
; 1517 : 		GET_PLAYER(pkAttacker->getOwner()).GetTacticalAI()->CombatResolved(pkAttacker, bCityConquered);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T225671[ebp], edx
	mov	eax, DWORD PTR $T225671[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225675[ebp], eax
	push	0
	movzx	ecx, BYTE PTR _bCityConquered$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T225675[ebp]
	call	?GetTacticalAI@CvPlayer@@QBEPAVCvTacticalAI@@XZ ; CvPlayer::GetTacticalAI
	mov	ecx, eax
	call	?CombatResolved@CvTacticalAI@@QAEXPAX_N1@Z ; CvTacticalAI::CombatResolved
$LN2@ResolveCit:

; 1518 : 	}
; 1519 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$0:
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$1:
	lea	ecx, DWORD PTR $T225223[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$3:
	lea	ecx, DWORD PTR _pAttacker$221617[ebp]
	jmp	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ	; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$4:
	lea	ecx, DWORD PTR $T225228[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$5:
	lea	ecx, DWORD PTR $T225232[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$6:
	lea	ecx, DWORD PTR $T225235[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$7:
	lea	ecx, DWORD PTR $T225239[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$8:
	lea	ecx, DWORD PTR $T225242[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$9:
	lea	ecx, DWORD PTR $T225245[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-688]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ENDP ; CvUnitCombat::ResolveCityMeleeCombat
PUBLIC	??_C@_0BC@JKPJHJAF@UNIT_AMERICAN_B17?$AA@	; `string'
PUBLIC	??_C@_0BF@MHMJAKMM@Intercept?5Rand?5?$CIAir?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0N@LAMFDLJA@Evasion?5Rand?$AA@		; `string'
PUBLIC	?GenerateAirCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z ; CvUnitCombat::GenerateAirCombatInfo
EXTRN	?setAttackIsBombingMission@CvCombatInfo@@QAEX_N@Z:PROC ; CvCombatInfo::setAttackIsBombingMission
EXTRN	__imp___stricmp:PROC
EXTRN	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z:PROC ; CvGlobals::getUnitInfo
EXTRN	?GetAirStrikeDefenseDamage@CvCity@@QBEHPBVCvUnit@@_N@Z:PROC ; CvCity::GetAirStrikeDefenseDamage
EXTRN	?GetAirStrikeDefenseDamage@CvUnit@@QBEHPBV1@_N@Z:PROC ; CvUnit::GetAirStrikeDefenseDamage
EXTRN	?GetAirCombatDamage@CvUnit@@QBEHPBV1@PAVCvCity@@_NH@Z:PROC ; CvUnit::GetAirCombatDamage
EXTRN	?GetInterceptionDamage@CvUnit@@QBEHPBV1@_N@Z:PROC ; CvUnit::GetInterceptionDamage
EXTRN	?currInterceptionProbability@CvUnit@@QBEHXZ:PROC ; CvUnit::currInterceptionProbability
EXTRN	?evasionProbability@CvUnit@@QBEHXZ:PROC		; CvUnit::evasionProbability
EXTRN	?GetBestInterceptor@CvUnit@@QBEPAV1@ABVCvPlot@@PAV1@_N2@Z:PROC ; CvUnit::GetBestInterceptor
;	COMDAT ??_C@_0BC@JKPJHJAF@UNIT_AMERICAN_B17?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_0BC@JKPJHJAF@UNIT_AMERICAN_B17?$AA@ DB 'UNIT_AMERICAN_B17', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MHMJAKMM@Intercept?5Rand?5?$CIAir?$CJ?$AA@
CONST	SEGMENT
??_C@_0BF@MHMJAKMM@Intercept?5Rand?5?$CIAir?$CJ?$AA@ DB 'Intercept Rand ('
	DB	'Air)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LAMFDLJA@Evasion?5Rand?$AA@
CONST	SEGMENT
??_C@_0N@LAMFDLJA@Evasion?5Rand?$AA@ DB 'Evasion Rand', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
CONST	ENDS
;	COMDAT ?GenerateAirCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z
_TEXT	SEGMENT
tv460 = -244						; size = 4
tv403 = -240						; size = 4
tv311 = -236						; size = 4
tv253 = -232						; size = 4
tv494 = -228						; size = 4
tv179 = -224						; size = 4
tv147 = -220						; size = 4
$T225916 = -216						; size = 4
$T225912 = -212						; size = 4
$T225903 = -208						; size = 4
$T225896 = -204						; size = 4
$T225887 = -200						; size = 4
$T225880 = -196						; size = 4
$T225876 = -192						; size = 4
$T225875 = -188						; size = 4
$T225851 = -172						; size = 4
$T225847 = -168						; size = 4
$T225833 = -160						; size = 4
$T225829 = -156						; size = 4
$T225817 = -152						; size = 4
$T225813 = -148						; size = 4
$T225809 = -144						; size = 4
$T225802 = -140						; size = 4
$T225796 = -136						; size = 4
$T225789 = -132						; size = 4
$T225783 = -128						; size = 4
$T225779 = -124						; size = 4
$T225756 = -116						; size = 4
$T225750 = -112						; size = 4
$T225746 = -108						; size = 4
$T225739 = -104						; size = 4
$T225733 = -100						; size = 4
$T225729 = -96						; size = 4
$T225709 = -88						; size = 4
$T225705 = -84						; size = 4
$T225695 = -80						; size = 4
$T225694 = -76						; size = 4
$T225693 = -72						; size = 4
$T225692 = -68						; size = 4
$T225691 = -64						; size = 4
$T225690 = -60						; size = 4
$T225689 = -56						; size = 4
$T225688 = -52						; size = 4
_pCity$221700 = -48					; size = 4
_pkUnitInfo$221709 = -44				; size = 4
_iMaxXP$ = -40						; size = 4
_iDefenderTotalDamageInflicted$ = -36			; size = 4
_iInterceptionDamage$ = -32				; size = 4
_iExperience$ = -28					; size = 4
_iDefenderDamageInflicted$ = -24			; size = 4
_iAttackerDamageInflicted$ = -20			; size = 4
_pInterceptor$ = -16					; size = 4
_bIsGlobalXPAwarded$ = -10				; size = 1
_bBarbarian$ = -9					; size = 1
_iAttackerTotalDamageInflicted$ = -8			; size = 4
_eDefenderOwner$ = -4					; size = 4
_kAttacker$ = 8						; size = 4
_pkDefender$ = 12					; size = 4
_plot$ = 16						; size = 4
_pkCombatInfo$ = 20					; size = 4
?GenerateAirCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z PROC ; CvUnitCombat::GenerateAirCombatInfo, COMDAT

; 1532 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	esi

; 1533 : 	int iExperience = 0;

	mov	DWORD PTR _iExperience$[ebp], 0

; 1534 : 
; 1535 : 	pkCombatInfo->setUnit(BATTLE_UNIT_ATTACKER, &kAttacker);

	mov	eax, DWORD PTR _kAttacker$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvCombatInfo::setUnit

; 1536 : 	pkCombatInfo->setUnit(BATTLE_UNIT_DEFENDER, pkDefender);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvCombatInfo::setUnit

; 1537 : 	pkCombatInfo->setPlot(&plot);

	mov	edx, DWORD PTR _plot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setPlot@CvCombatInfo@@QAEXPAVCvPlot@@@Z ; CvCombatInfo::setPlot

; 1538 : 
; 1539 : 	//////////////////////////////////////////////////////////////////////
; 1540 : 
; 1541 : 	// Any interception to be done?
; 1542 : 	CvUnit* pInterceptor = kAttacker.GetBestInterceptor(plot, pkDefender);

	push	0
	push	0
	mov	eax, DWORD PTR _pkDefender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _plot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetBestInterceptor@CvUnit@@QBEPAV1@ABVCvPlot@@PAV1@_N2@Z ; CvUnit::GetBestInterceptor
	mov	DWORD PTR _pInterceptor$[ebp], eax

; 1543 : 	int iInterceptionDamage = 0;

	mov	DWORD PTR _iInterceptionDamage$[ebp], 0

; 1544 : 
; 1545 : 	if(pInterceptor != NULL && pInterceptor != pkDefender)

	cmp	DWORD PTR _pInterceptor$[ebp], 0
	je	$LN16@GenerateAi
	mov	edx, DWORD PTR _pInterceptor$[ebp]
	cmp	edx, DWORD PTR _pkDefender$[ebp]
	je	SHORT $LN16@GenerateAi

; 1546 : 	{
; 1547 : 		pkCombatInfo->setUnit(BATTLE_UNIT_INTERCEPTOR, pInterceptor);

	mov	eax, DWORD PTR _pInterceptor$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvCombatInfo::setUnit

; 1548 : 		// Does the attacker evade?
; 1549 : 		if(GC.getGame().getJonRandNum(100, "Evasion Rand") >= kAttacker.evasionProbability())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225705[ebp], ecx
	push	OFFSET ??_C@_0N@LAMFDLJA@Evasion?5Rand?$AA@
	push	100					; 00000064H
	mov	ecx, DWORD PTR $T225705[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	esi, eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?evasionProbability@CvUnit@@QBEHXZ	; CvUnit::evasionProbability
	cmp	esi, eax
	jl	SHORT $LN15@GenerateAi

; 1550 : 		{
; 1551 : 			// Is the interception successful?
; 1552 : 			if(GC.getGame().getJonRandNum(100, "Intercept Rand (Air)") < pInterceptor->currInterceptionProbability())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225709[ebp], edx
	push	OFFSET ??_C@_0BF@MHMJAKMM@Intercept?5Rand?5?$CIAir?$CJ?$AA@
	push	100					; 00000064H
	mov	ecx, DWORD PTR $T225709[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	esi, eax
	mov	ecx, DWORD PTR _pInterceptor$[ebp]
	call	?currInterceptionProbability@CvUnit@@QBEHXZ ; CvUnit::currInterceptionProbability
	cmp	esi, eax
	jge	SHORT $LN15@GenerateAi

; 1553 : 			{
; 1554 : 				iInterceptionDamage = pInterceptor->GetInterceptionDamage(&kAttacker);

	push	1
	mov	eax, DWORD PTR _kAttacker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInterceptor$[ebp]
	call	?GetInterceptionDamage@CvUnit@@QBEHPBV1@_N@Z ; CvUnit::GetInterceptionDamage
	mov	DWORD PTR _iInterceptionDamage$[ebp], eax
$LN15@GenerateAi:

; 1555 : 			}
; 1556 : 		}
; 1557 : 		pkCombatInfo->setDamageInflicted(BATTLE_UNIT_INTERCEPTOR, iInterceptionDamage);		// Damage inflicted this round

	mov	ecx, DWORD PTR _iInterceptionDamage$[ebp]
	push	ecx
	push	2
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted
$LN16@GenerateAi:

; 1558 : 	}
; 1559 : 
; 1560 : 	//////////////////////////////////////////////////////////////////////
; 1561 : 
; 1562 : 	bool bBarbarian = false;

	mov	BYTE PTR _bBarbarian$[ebp], 0

; 1563 : 	int iMaxXP = 0;

	mov	DWORD PTR _iMaxXP$[ebp], 0

; 1564 : 
; 1565 : 	int iAttackerDamageInflicted;
; 1566 : 	int iDefenderDamageInflicted;
; 1567 : 
; 1568 : 	int iAttackerTotalDamageInflicted;
; 1569 : 	int iDefenderTotalDamageInflicted;
; 1570 : 
; 1571 : 	PlayerTypes eDefenderOwner;
; 1572 : 
; 1573 : 	// Target is a Unit
; 1574 : 	if(!plot.isCity())

	mov	ecx, DWORD PTR _plot$[ebp]
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	movzx	edx, al
	test	edx, edx
	jne	$LN13@GenerateAi

; 1575 : 	{
; 1576 : 		CvAssert(pkDefender != NULL);
; 1577 : 		if(!pkDefender)

	cmp	DWORD PTR _pkDefender$[ebp], 0
	jne	SHORT $LN36@GenerateAi

; 1578 : 			return;

	jmp	$LN17@GenerateAi

; 1579 : 
; 1580 : 		eDefenderOwner = pkDefender->getOwner();

$LN36@GenerateAi:
	mov	eax, DWORD PTR _pkDefender$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _eDefenderOwner$[ebp], ecx

; 1581 : 
; 1582 : 		iExperience = /*4*/ GC.getEXPERIENCE_ATTACKING_UNIT_AIR();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7520
	mov	DWORD PTR _iExperience$[ebp], edx

; 1583 : 		if(pkDefender->isBarbarian())

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@GenerateAi

; 1584 : 			bBarbarian = true;

	mov	BYTE PTR _bBarbarian$[ebp], 1
$LN11@GenerateAi:

; 1585 : 		iMaxXP = pkDefender->maxXPValue();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?maxXPValue@CvUnit@@QBEHXZ		; CvUnit::maxXPValue
	mov	DWORD PTR _iMaxXP$[ebp], eax

; 1586 : 
; 1587 : 		// Calculate attacker damage
; 1588 : 		iAttackerDamageInflicted = kAttacker.GetAirCombatDamage(pkDefender, /*pCity*/ NULL, /*bIncludeRand*/ true, iInterceptionDamage);

	mov	ecx, DWORD PTR _iInterceptionDamage$[ebp]
	push	ecx
	push	1
	push	0
	mov	edx, DWORD PTR _pkDefender$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetAirCombatDamage@CvUnit@@QBEHPBV1@PAVCvCity@@_NH@Z ; CvUnit::GetAirCombatDamage
	mov	DWORD PTR _iAttackerDamageInflicted$[ebp], eax

; 1589 : 
; 1590 : 		if(iAttackerDamageInflicted + pkDefender->getDamage() > GC.getMAX_HIT_POINTS())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T225729[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	add	eax, DWORD PTR _iAttackerDamageInflicted$[ebp]
	cmp	eax, DWORD PTR $T225729[ebp]
	jle	SHORT $LN10@GenerateAi

; 1591 : 		{
; 1592 : 			iAttackerDamageInflicted = GC.getMAX_HIT_POINTS() - pkDefender->getDamage();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T225733[ebp], ecx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	edx, DWORD PTR $T225733[ebp]
	sub	edx, eax
	mov	DWORD PTR _iAttackerDamageInflicted$[ebp], edx
$LN10@GenerateAi:

; 1593 : 		}
; 1594 : 
; 1595 : 		iAttackerTotalDamageInflicted = std::max(pkDefender->getDamage(), pkDefender->getDamage() + iAttackerDamageInflicted);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	add	eax, DWORD PTR _iAttackerDamageInflicted$[ebp]
	mov	DWORD PTR $T225688[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	DWORD PTR $T225689[ebp], eax
	mov	eax, DWORD PTR $T225689[ebp]
	cmp	eax, DWORD PTR $T225688[ebp]
	jge	SHORT $LN46@GenerateAi
	lea	ecx, DWORD PTR $T225688[ebp]
	mov	DWORD PTR tv147[ebp], ecx
	jmp	SHORT $LN47@GenerateAi
$LN46@GenerateAi:
	lea	edx, DWORD PTR $T225689[ebp]
	mov	DWORD PTR tv147[ebp], edx
$LN47@GenerateAi:
	mov	eax, DWORD PTR tv147[ebp]
	mov	DWORD PTR $T225739[ebp], eax
	mov	ecx, DWORD PTR $T225739[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _iAttackerTotalDamageInflicted$[ebp], edx

; 1596 : 
; 1597 : 		// Calculate defense damage
; 1598 : 		iDefenderDamageInflicted = pkDefender->GetAirStrikeDefenseDamage(&kAttacker);

	push	1
	mov	eax, DWORD PTR _kAttacker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?GetAirStrikeDefenseDamage@CvUnit@@QBEHPBV1@_N@Z ; CvUnit::GetAirStrikeDefenseDamage
	mov	DWORD PTR _iDefenderDamageInflicted$[ebp], eax

; 1599 : 
; 1600 : 		if(iDefenderDamageInflicted + kAttacker.getDamage() > GC.getMAX_HIT_POINTS())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T225746[ebp], ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	add	eax, DWORD PTR _iDefenderDamageInflicted$[ebp]
	cmp	eax, DWORD PTR $T225746[ebp]
	jle	SHORT $LN9@GenerateAi

; 1601 : 		{
; 1602 : 			iDefenderDamageInflicted = GC.getMAX_HIT_POINTS() - kAttacker.getDamage();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T225750[ebp], edx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	ecx, DWORD PTR $T225750[ebp]
	sub	ecx, eax
	mov	DWORD PTR _iDefenderDamageInflicted$[ebp], ecx
$LN9@GenerateAi:

; 1603 : 		}
; 1604 : 
; 1605 : 		iDefenderTotalDamageInflicted = std::max(kAttacker.getDamage(), kAttacker.getDamage() + (iDefenderDamageInflicted + iInterceptionDamage));

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	edx, DWORD PTR _iDefenderDamageInflicted$[ebp]
	add	edx, DWORD PTR _iInterceptionDamage$[ebp]
	add	eax, edx
	mov	DWORD PTR $T225690[ebp], eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	DWORD PTR $T225691[ebp], eax
	mov	eax, DWORD PTR $T225691[ebp]
	cmp	eax, DWORD PTR $T225690[ebp]
	jge	SHORT $LN54@GenerateAi
	lea	ecx, DWORD PTR $T225690[ebp]
	mov	DWORD PTR tv179[ebp], ecx
	jmp	SHORT $LN55@GenerateAi
$LN54@GenerateAi:
	lea	edx, DWORD PTR $T225691[ebp]
	mov	DWORD PTR tv179[ebp], edx
$LN55@GenerateAi:
	mov	eax, DWORD PTR tv179[ebp]
	mov	DWORD PTR $T225756[ebp], eax
	mov	ecx, DWORD PTR $T225756[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _iDefenderTotalDamageInflicted$[ebp], edx

; 1606 : 	}
; 1607 : 	// Target is a City
; 1608 : 	else

	jmp	$LN8@GenerateAi
$LN13@GenerateAi:

; 1609 : 	{
; 1610 : 		CvCity* pCity = plot.getPlotCity();

	mov	ecx, DWORD PTR _plot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$221700[ebp], eax

; 1611 : 		CvAssert(pCity != NULL);
; 1612 : 		if(!pCity) return;

	cmp	DWORD PTR _pCity$221700[ebp], 0
	jne	SHORT $LN61@GenerateAi
	jmp	$LN17@GenerateAi

; 1613 : 
; 1614 : 		eDefenderOwner = plot.getOwner();

$LN61@GenerateAi:
	mov	eax, DWORD PTR _plot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR _eDefenderOwner$[ebp], ecx

; 1615 : 
; 1616 : 		/*		iDefenderStrength = pCity->getStrengthValue() / 2;
; 1617 : 		iOldDamage = pCity->getDamage();*/
; 1618 : 
; 1619 : 		iExperience = /*4*/ GC.getEXPERIENCE_ATTACKING_CITY_AIR();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7556
	mov	DWORD PTR _iExperience$[ebp], edx

; 1620 : 
; 1621 : 		if(pCity->isBarbarian())

	mov	ecx, DWORD PTR _pCity$221700[ebp]
	call	?isBarbarian@CvCity@@QBE_NXZ		; CvCity::isBarbarian
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN67@GenerateAi

; 1622 : 			bBarbarian = true;

	mov	BYTE PTR _bBarbarian$[ebp], 1

; 1623 : 		iMaxXP = (GET_PLAYER(pCity->getOwner()).isMinorCiv()) ? 30 : 1000; // NQMP GJS - cap XP from fighting CS to 30

$LN67@GenerateAi:
	mov	ecx, DWORD PTR _pCity$221700[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T225779[ebp], edx
	mov	eax, DWORD PTR $T225779[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225783[ebp], eax
	mov	ecx, DWORD PTR $T225783[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	and	ecx, -970				; fffffc36H
	add	ecx, 1000				; 000003e8H
	mov	DWORD PTR _iMaxXP$[ebp], ecx

; 1624 : 
; 1625 : 		iAttackerDamageInflicted = kAttacker.GetAirCombatDamage(/*pUnit*/ NULL, pCity, /*bIncludeRand*/ true, iInterceptionDamage);

	mov	edx, DWORD PTR _iInterceptionDamage$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _pCity$221700[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetAirCombatDamage@CvUnit@@QBEHPBV1@PAVCvCity@@_NH@Z ; CvUnit::GetAirCombatDamage
	mov	DWORD PTR _iAttackerDamageInflicted$[ebp], eax

; 1626 : 
; 1627 : 		// Cities can't be knocked to less than 1 HP
; 1628 : 		if(iAttackerDamageInflicted + pCity->getDamage() >= pCity->GetMaxHitPoints())

	mov	ecx, DWORD PTR _pCity$221700[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	mov	esi, eax
	add	esi, DWORD PTR _iAttackerDamageInflicted$[ebp]
	mov	ecx, DWORD PTR _pCity$221700[ebp]
	call	?GetMaxHitPoints@CvCity@@QBEHXZ		; CvCity::GetMaxHitPoints
	cmp	esi, eax
	jl	SHORT $LN5@GenerateAi

; 1629 : 		{
; 1630 : 			iAttackerDamageInflicted = pCity->GetMaxHitPoints() - pCity->getDamage() - 1;

	mov	ecx, DWORD PTR _pCity$221700[ebp]
	call	?GetMaxHitPoints@CvCity@@QBEHXZ		; CvCity::GetMaxHitPoints
	mov	esi, eax
	mov	ecx, DWORD PTR _pCity$221700[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	sub	esi, eax
	sub	esi, 1
	mov	DWORD PTR _iAttackerDamageInflicted$[ebp], esi
$LN5@GenerateAi:

; 1631 : 		}
; 1632 : 
; 1633 : 		iAttackerTotalDamageInflicted = std::max(pCity->getDamage(), pCity->getDamage() + iAttackerDamageInflicted);

	mov	ecx, DWORD PTR _pCity$221700[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	add	eax, DWORD PTR _iAttackerDamageInflicted$[ebp]
	mov	DWORD PTR $T225692[ebp], eax
	mov	ecx, DWORD PTR _pCity$221700[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	mov	DWORD PTR $T225693[ebp], eax
	mov	ecx, DWORD PTR $T225693[ebp]
	cmp	ecx, DWORD PTR $T225692[ebp]
	jge	SHORT $LN73@GenerateAi
	lea	edx, DWORD PTR $T225692[ebp]
	mov	DWORD PTR tv494[ebp], edx
	jmp	SHORT $LN74@GenerateAi
$LN73@GenerateAi:
	lea	eax, DWORD PTR $T225693[ebp]
	mov	DWORD PTR tv494[ebp], eax
$LN74@GenerateAi:
	mov	ecx, DWORD PTR tv494[ebp]
	mov	DWORD PTR $T225789[ebp], ecx
	mov	edx, DWORD PTR $T225789[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _iAttackerTotalDamageInflicted$[ebp], eax

; 1634 : 
; 1635 : 		// Calculate defense damage
; 1636 : 		iDefenderDamageInflicted = pCity->GetAirStrikeDefenseDamage(&kAttacker);

	push	1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCity$221700[ebp]
	call	?GetAirStrikeDefenseDamage@CvCity@@QBEHPBVCvUnit@@_N@Z ; CvCity::GetAirStrikeDefenseDamage
	mov	DWORD PTR _iDefenderDamageInflicted$[ebp], eax

; 1637 : 
; 1638 : 		if(iDefenderDamageInflicted + kAttacker.getDamage() > pCity->GetMaxHitPoints())

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	esi, eax
	add	esi, DWORD PTR _iDefenderDamageInflicted$[ebp]
	mov	ecx, DWORD PTR _pCity$221700[ebp]
	call	?GetMaxHitPoints@CvCity@@QBEHXZ		; CvCity::GetMaxHitPoints
	cmp	esi, eax
	jle	SHORT $LN4@GenerateAi

; 1639 : 		{
; 1640 : 			iDefenderDamageInflicted = GC.getMAX_HIT_POINTS() - kAttacker.getDamage();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T225796[ebp], edx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	ecx, DWORD PTR $T225796[ebp]
	sub	ecx, eax
	mov	DWORD PTR _iDefenderDamageInflicted$[ebp], ecx
$LN4@GenerateAi:

; 1641 : 		}
; 1642 : 
; 1643 : 		iDefenderTotalDamageInflicted = std::max(kAttacker.getDamage(), kAttacker.getDamage() + (iDefenderDamageInflicted + iInterceptionDamage));

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	edx, DWORD PTR _iDefenderDamageInflicted$[ebp]
	add	edx, DWORD PTR _iInterceptionDamage$[ebp]
	add	eax, edx
	mov	DWORD PTR $T225694[ebp], eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	DWORD PTR $T225695[ebp], eax
	mov	eax, DWORD PTR $T225695[ebp]
	cmp	eax, DWORD PTR $T225694[ebp]
	jge	SHORT $LN79@GenerateAi
	lea	ecx, DWORD PTR $T225694[ebp]
	mov	DWORD PTR tv253[ebp], ecx
	jmp	SHORT $LN80@GenerateAi
$LN79@GenerateAi:
	lea	edx, DWORD PTR $T225695[ebp]
	mov	DWORD PTR tv253[ebp], edx
$LN80@GenerateAi:
	mov	eax, DWORD PTR tv253[ebp]
	mov	DWORD PTR $T225802[ebp], eax
	mov	ecx, DWORD PTR $T225802[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _iDefenderTotalDamageInflicted$[ebp], edx

; 1644 : 
; 1645 : 		//Achievement for Washington
; 1646 : 		CvUnitEntry* pkUnitInfo = GC.getUnitInfo(kAttacker.getUnitType());

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo
	mov	DWORD PTR _pkUnitInfo$221709[ebp], eax

; 1647 : 		if(pkUnitInfo)

	cmp	DWORD PTR _pkUnitInfo$221709[ebp], 0
	je	$LN8@GenerateAi

; 1648 : 		{
; 1649 : 			if(kAttacker.isHuman() && !GC.getGame().isGameMultiPlayer() && _stricmp(pkUnitInfo->GetType(), "UNIT_AMERICAN_B17") == 0)

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isHuman@CvUnit@@QBE_NXZ		; CvUnit::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@GenerateAi
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225809[ebp], ecx
	mov	ecx, DWORD PTR $T225809[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN8@GenerateAi
	mov	ecx, DWORD PTR _pkUnitInfo$221709[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T225813[ebp], eax
	push	OFFSET ??_C@_0BC@JKPJHJAF@UNIT_AMERICAN_B17?$AA@
	mov	eax, DWORD PTR $T225813[ebp]
	push	eax
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@GenerateAi

; 1650 : 			{
; 1651 : 				gDLL->UnlockAchievement(ACHIEVEMENT_SPECIAL_B17);

	mov	ecx, DWORD PTR $T225817[ebp]
	mov	DWORD PTR tv311[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv311[ebp], edx
	push	98					; 00000062H
	mov	eax, DWORD PTR tv311[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv311[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax
$LN8@GenerateAi:

; 1652 : 			}
; 1653 : 		}
; 1654 : 	}
; 1655 : 	//////////////////////////////////////////////////////////////////////
; 1656 : 
; 1657 : 	pkCombatInfo->setFinalDamage(BATTLE_UNIT_ATTACKER, iDefenderTotalDamageInflicted);				// Total damage to the unit

	mov	ecx, DWORD PTR _iDefenderTotalDamageInflicted$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFinalDamage

; 1658 : 	pkCombatInfo->setDamageInflicted(BATTLE_UNIT_ATTACKER, iAttackerDamageInflicted);		// Damage inflicted this round

	mov	edx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted

; 1659 : 	pkCombatInfo->setFinalDamage(BATTLE_UNIT_DEFENDER, iAttackerTotalDamageInflicted);		// Total damage to the unit

	mov	eax, DWORD PTR _iAttackerTotalDamageInflicted$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFinalDamage

; 1660 : 	pkCombatInfo->setDamageInflicted(BATTLE_UNIT_DEFENDER, iDefenderDamageInflicted);			// Damage inflicted this round

	mov	ecx, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted

; 1661 : 
; 1662 : 	// Fear Damage
; 1663 : 	pkCombatInfo->setFearDamageInflicted(BATTLE_UNIT_ATTACKER, 0);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFearDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFearDamageInflicted

; 1664 : 	// pkCombatInfo->setFearDamageInflicted( BATTLE_UNIT_DEFENDER, 0 );
; 1665 : 
; 1666 : 	pkCombatInfo->setExperience(BATTLE_UNIT_ATTACKER, iExperience);

	mov	edx, DWORD PTR _iExperience$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience

; 1667 : 	pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_ATTACKER, iMaxXP);

	mov	eax, DWORD PTR _iMaxXP$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed

; 1668 : 	pkCombatInfo->setInBorders(BATTLE_UNIT_ATTACKER, plot.getOwner() == eDefenderOwner);

	mov	ecx, DWORD PTR _plot$[ebp]
	movsx	edx, BYTE PTR [ecx+4]
	cmp	edx, DWORD PTR _eDefenderOwner$[ebp]
	sete	al
	movzx	ecx, al
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders

; 1669 : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 1670 : 	bool bIsGlobalXPAwarded = !kAttacker.isBarbarian() && !GET_PLAYER(kAttacker.getOwner()).isMinorCiv() &&
; 1671 : 		(plot.isCity() || (!pkDefender->isBarbarian() && !GET_PLAYER(pkDefender->getOwner()).isMinorCiv())) &&
; 1672 : 		(!plot.isCity() || (!plot.getPlotCity()->isBarbarian() && !GET_PLAYER(plot.getPlotCity()->getOwner()).isMinorCiv()));

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	edx, al
	test	edx, edx
	jne	$LN20@GenerateAi
	mov	eax, DWORD PTR _kAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T225829[ebp], ecx
	mov	edx, DWORD PTR $T225829[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225833[ebp], edx
	mov	ecx, DWORD PTR $T225833[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	$LN20@GenerateAi
	mov	ecx, DWORD PTR _plot$[ebp]
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN21@GenerateAi
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	edx, al
	test	edx, edx
	jne	$LN20@GenerateAi
	mov	eax, DWORD PTR _pkDefender$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T225847[ebp], ecx
	mov	edx, DWORD PTR $T225847[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225851[ebp], edx
	mov	ecx, DWORD PTR $T225851[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN20@GenerateAi
$LN21@GenerateAi:
	mov	ecx, DWORD PTR _plot$[ebp]
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN23@GenerateAi
	mov	ecx, DWORD PTR _plot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	ecx, eax
	call	?isBarbarian@CvCity@@QBE_NXZ		; CvCity::isBarbarian
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN20@GenerateAi
	mov	ecx, DWORD PTR _plot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR $T225875[ebp], eax
	mov	eax, DWORD PTR $T225875[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T225876[ebp], ecx
	mov	edx, DWORD PTR $T225876[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225880[ebp], edx
	mov	ecx, DWORD PTR $T225880[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN20@GenerateAi
$LN23@GenerateAi:
	mov	DWORD PTR tv403[ebp], 1
	jmp	SHORT $LN24@GenerateAi
$LN20@GenerateAi:
	mov	DWORD PTR tv403[ebp], 0
$LN24@GenerateAi:
	mov	cl, BYTE PTR tv403[ebp]
	mov	BYTE PTR _bIsGlobalXPAwarded$[ebp], cl

; 1673 : 	pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, bIsGlobalXPAwarded);

	movzx	edx, BYTE PTR _bIsGlobalXPAwarded$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal

; 1674 : #else
; 1675 : 	pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, !kAttacker.isBarbarian());
; 1676 : #endif
; 1677 : 
; 1678 : 	iExperience = /*2*/ GC.getEXPERIENCE_DEFENDING_UNIT_AIR();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7524
	mov	DWORD PTR _iExperience$[ebp], eax

; 1679 : 	pkCombatInfo->setExperience(BATTLE_UNIT_DEFENDER, iExperience);

	mov	ecx, DWORD PTR _iExperience$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience

; 1680 : 	pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_DEFENDER, MAX_INT);

	push	2147483647				; 7fffffffH
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed

; 1681 : 	pkCombatInfo->setInBorders(BATTLE_UNIT_DEFENDER, plot.getOwner() == kAttacker.getOwner());

	mov	edx, DWORD PTR _plot$[ebp]
	movsx	eax, BYTE PTR [edx+4]
	mov	DWORD PTR $T225887[ebp], eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T225896[ebp], edx
	mov	eax, DWORD PTR $T225887[ebp]
	cmp	eax, DWORD PTR $T225896[ebp]
	sete	cl
	movzx	edx, cl
	push	edx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders

; 1682 : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 1683 : 	pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_DEFENDER, bIsGlobalXPAwarded);

	movzx	eax, BYTE PTR _bIsGlobalXPAwarded$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal

; 1684 : #else
; 1685 : 	pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_DEFENDER, !bBarbarian);
; 1686 : #endif
; 1687 : 
; 1688 : 	if (iInterceptionDamage > 0)

	cmp	DWORD PTR _iInterceptionDamage$[ebp], 0
	jle	SHORT $LN1@GenerateAi

; 1689 : 	{
; 1690 : 		iExperience = /*2*/ GC.getEXPERIENCE_DEFENDING_AIR_SWEEP_GROUND();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7544
	mov	DWORD PTR _iExperience$[ebp], ecx

; 1691 : 		pkCombatInfo->setExperience( BATTLE_UNIT_INTERCEPTOR, iExperience );

	mov	edx, DWORD PTR _iExperience$[ebp]
	push	edx
	push	2
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience

; 1692 : 		pkCombatInfo->setMaxExperienceAllowed( BATTLE_UNIT_INTERCEPTOR, MAX_INT );

	push	2147483647				; 7fffffffH
	push	2
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed

; 1693 : 		pkCombatInfo->setInBorders( BATTLE_UNIT_INTERCEPTOR, plot.getOwner() == kAttacker.getOwner() );

	mov	eax, DWORD PTR _plot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR $T225903[ebp], ecx
	mov	edx, DWORD PTR _kAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T225912[ebp], eax
	mov	ecx, DWORD PTR $T225903[ebp]
	cmp	ecx, DWORD PTR $T225912[ebp]
	sete	dl
	movzx	eax, dl
	push	eax
	push	2
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders

; 1694 : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 1695 : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_INTERCEPTOR, bIsGlobalXPAwarded);

	movzx	ecx, BYTE PTR _bIsGlobalXPAwarded$[ebp]
	push	ecx
	push	2
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal
$LN1@GenerateAi:

; 1696 : #else
; 1697 : 		pkCombatInfo->setUpdateGlobal( BATTLE_UNIT_INTERCEPTOR, !bBarbarian );
; 1698 : #endif
; 1699 : 	}
; 1700 : 
; 1701 : 	pkCombatInfo->setAttackIsBombingMission(true);

	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setAttackIsBombingMission@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setAttackIsBombingMission

; 1702 : 	pkCombatInfo->setDefenderRetaliates(true);

	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDefenderRetaliates@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setDefenderRetaliates

; 1703 : 
; 1704 : 	GC.GetEngineUserInterface()->setDirty(UnitInfo_DIRTY_BIT, true);

	mov	edx, DWORD PTR $T225916[ebp]
	mov	DWORD PTR tv460[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv460[ebp], eax
	push	1
	push	19					; 00000013H
	mov	ecx, DWORD PTR tv460[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv460[ebp]
	mov	eax, DWORD PTR [edx+260]
	call	eax
$LN17@GenerateAi:

; 1705 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateAirCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z ENDP ; CvUnitCombat::GenerateAirCombatInfo
_TEXT	ENDS
PUBLIC	??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z ; GetLocalizedText<char const *,char const *,char const *,int,char const *>
PUBLIC	??_C@_0CI@FBOMCEJB@TXT_KEY_MISC_ENEMY_AIR_UNIT_INTE@ ; `string'
PUBLIC	??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z ; GetLocalizedText<char const *,char const *,char const *,char const *>
PUBLIC	??_C@_0CG@MJKGJKJF@TXT_KEY_MISC_ENEMY_AIR_UNIT_DEST@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveAirUnitVsCombat
EXTRN	?setMadeInterception@CvUnit@@QAEX_N@Z:PROC	; CvUnit::setMadeInterception
;	COMDAT ??_C@_0CI@FBOMCEJB@TXT_KEY_MISC_ENEMY_AIR_UNIT_INTE@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CI@FBOMCEJB@TXT_KEY_MISC_ENEMY_AIR_UNIT_INTE@ DB 'TXT_KEY_MISC_ENE'
	DB	'MY_AIR_UNIT_INTERCEPTED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MJKGJKJF@TXT_KEY_MISC_ENEMY_AIR_UNIT_DEST@
CONST	SEGMENT
??_C@_0CG@MJKGJKJF@TXT_KEY_MISC_ENEMY_AIR_UNIT_DEST@ DB 'TXT_KEY_MISC_ENE'
	DB	'MY_AIR_UNIT_DESTROYED', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$8
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$9
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$10
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$11
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$13
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$14
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
_TEXT	SEGMENT
tv1313 = -952						; size = 4
tv1312 = -948						; size = 4
tv927 = -944						; size = 4
tv926 = -940						; size = 4
tv1279 = -936						; size = 4
tv1278 = -932						; size = 4
tv548 = -928						; size = 4
tv1277 = -924						; size = 4
tv1276 = -920						; size = 4
tv1275 = -916						; size = 4
tv147 = -912						; size = 4
tv936 = -908						; size = 4
tv240 = -904						; size = 4
tv180 = -900						; size = 4
$T226507 = -896						; size = 4
$T226503 = -892						; size = 4
$T226494 = -888						; size = 4
$T226490 = -884						; size = 4
$T226481 = -880						; size = 4
$T226477 = -876						; size = 4
$T226469 = -872						; size = 4
$T226465 = -868						; size = 4
$T226456 = -864						; size = 4
$T226447 = -860						; size = 4
$T226443 = -856						; size = 4
$T226435 = -852						; size = 4
$T226431 = -848						; size = 4
$T226422 = -844						; size = 4
$T226408 = -836						; size = 4
$T226398 = -832						; size = 4
$T226389 = -828						; size = 4
$T226385 = -824						; size = 4
$T226377 = -820						; size = 4
$T226373 = -816						; size = 4
$T226364 = -812						; size = 4
$T226360 = -808						; size = 4
$T226352 = -804						; size = 4
$T226348 = -800						; size = 4
$T226339 = -796						; size = 4
$T226330 = -792						; size = 4
$T226326 = -788						; size = 4
$T226318 = -784						; size = 4
$T226314 = -780						; size = 4
$T226305 = -776						; size = 4
$T226301 = -772						; size = 4
$T226292 = -768						; size = 4
$T226283 = -764						; size = 4
$T226274 = -760						; size = 4
$T226270 = -756						; size = 4
$T226261 = -752						; size = 4
$T226252 = -748						; size = 4
$T226248 = -744						; size = 4
$T226240 = -740						; size = 4
$T226236 = -736						; size = 4
$T226227 = -732						; size = 4
$T226218 = -728						; size = 4
$T226214 = -724						; size = 4
$T226206 = -720						; size = 4
$T226202 = -716						; size = 4
$T226187 = -712						; size = 4
_inst$226177 = -708					; size = 4
$T226174 = -704						; size = 4
$T226164 = -700						; size = 4
$T226155 = -696						; size = 4
$T226151 = -692						; size = 4
$T226143 = -688						; size = 4
$T226139 = -684						; size = 4
$T226130 = -680						; size = 4
$T226126 = -676						; size = 4
$T226118 = -672						; size = 4
$T226114 = -668						; size = 4
$T226105 = -664						; size = 4
$T226096 = -660						; size = 4
$T226092 = -656						; size = 4
$T226084 = -652						; size = 4
$T226080 = -648						; size = 4
$T226065 = -644						; size = 4
$T226053 = -640						; size = 4
_inst$226049 = -636					; size = 4
$T226045 = -632						; size = 4
$T226035 = -628						; size = 4
__Ptr$226033 = -624					; size = 4
$T226030 = -620						; size = 4
__Cvtptr$226028 = -616					; size = 4
__Ans$226029 = -612					; size = 4
$T226019 = -608						; size = 4
$T226010 = -604						; size = 4
$T226001 = -600						; size = 4
$T225997 = -596						; size = 4
$T225993 = -592						; size = 4
$T225980 = -584						; size = 4
$T225958 = -580						; size = 28
$T225957 = -552						; size = 4
$T225956 = -548						; size = 4
$T225955 = -544						; size = 28
$T225954 = -516						; size = 4
$T225953 = -512						; size = 4
$T225952 = -508						; size = 4
$T225951 = -504						; size = 28
$T225950 = -476						; size = 4
$T225949 = -472						; size = 4
$T225948 = -468						; size = 28
$T225947 = -440						; size = 4
$T225946 = -436						; size = 4
$T225945 = -432						; size = 4
$T225944 = -428						; size = 4
$T225943 = -424						; size = 28
$T225942 = -396						; size = 4
$T225941 = -392						; size = 4
$T225940 = -388						; size = 28
$T225939 = -360						; size = 4
$T225938 = -356						; size = 4
$T225937 = -352						; size = 28
$T225936 = -324						; size = 4
$T225935 = -320						; size = 4
$T225934 = -316						; size = 28
$T225933 = -288						; size = 4
$T225932 = -284						; size = 4
$T225931 = -280						; size = 4
$T225930 = -276						; size = 4
$T225929 = -272						; size = 28
$T225928 = -244						; size = 4
$T225927 = -240						; size = 4
$T225926 = -236						; size = 4
$T225925 = -232						; size = 4
$T225924 = -228						; size = 28
$T225923 = -200						; size = 4
$T225922 = -196						; size = 4
$T225921 = -192						; size = 4
$T225920 = -188						; size = 4
_pCity$221822 = -184					; size = 4
_strSummary$221785 = -180				; size = 80
_pNotifications$221783 = -100				; size = 4
_kAttackerOwner$221774 = -96				; size = 4
_kDefenderOwner$221742 = -92				; size = 4
_pAttacker$221739 = -88					; size = 4
_pkDefender$221733 = -84				; size = 4
_bTargetDied$ = -77					; size = 1
_iActivePlayerID$ = -76					; size = 4
_iInterceptionDamage$ = -72				; size = 4
_pkTargetPlot$ = -68					; size = 4
_pkDLLInterface$ = -64					; size = 4
_strBuffer$ = -60					; size = 28
__$ArrayPad$ = -32					; size = 4
_iDefenderDamageInflicted$ = -28			; size = 4
_iAttackerDamageInflicted$ = -24			; size = 4
_pInterceptor$ = -20					; size = 4
_pkAttacker$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kCombatInfo$ = 8					; size = 4
_uiParentEventID$ = 12					; size = 4
?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z PROC ; CvUnitCombat::ResolveAirUnitVsCombat, COMDAT

; 1713 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 940				; 000003acH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1714 : 	bool bTargetDied = false;

	mov	BYTE PTR _bTargetDied$[ebp], 0

; 1715 : 	int iAttackerDamageInflicted = kCombatInfo.getDamageInflicted(BATTLE_UNIT_ATTACKER);

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getDamageInflicted
	mov	DWORD PTR _iAttackerDamageInflicted$[ebp], eax

; 1716 : 	int iDefenderDamageInflicted = kCombatInfo.getDamageInflicted(BATTLE_UNIT_DEFENDER);

	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getDamageInflicted
	mov	DWORD PTR _iDefenderDamageInflicted$[ebp], eax

; 1717 : 
; 1718 : 	CvUnit* pkAttacker = kCombatInfo.getUnit(BATTLE_UNIT_ATTACKER);

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pkAttacker$[ebp], eax

; 1719 : 
; 1720 : 	// If there's no valid attacker, then get out of here
; 1721 : 	CvAssert_Debug(pkAttacker);
; 1722 : 
; 1723 : 	// Interception?
; 1724 : 	int iInterceptionDamage = kCombatInfo.getDamageInflicted(BATTLE_UNIT_INTERCEPTOR);

	push	2
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getDamageInflicted
	mov	DWORD PTR _iInterceptionDamage$[ebp], eax

; 1725 : 	if(iInterceptionDamage > 0)

	cmp	DWORD PTR _iInterceptionDamage$[ebp], 0
	jle	SHORT $LN37@ResolveAir

; 1726 : 		iDefenderDamageInflicted += iInterceptionDamage;

	mov	eax, DWORD PTR _iDefenderDamageInflicted$[ebp]
	add	eax, DWORD PTR _iInterceptionDamage$[ebp]
	mov	DWORD PTR _iDefenderDamageInflicted$[ebp], eax
$LN37@ResolveAir:

; 1727 : 
; 1728 : 	CvUnit* pInterceptor = kCombatInfo.getUnit(BATTLE_UNIT_INTERCEPTOR);

	push	2
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pInterceptor$[ebp], eax

; 1729 : 	CvAssert_Debug(pInterceptor);
; 1730 : 	if(pInterceptor)

	cmp	DWORD PTR _pInterceptor$[ebp], 0
	je	SHORT $LN36@ResolveAir

; 1731 : 	{
; 1732 : 		pInterceptor->setMadeInterception(true);

	push	1
	mov	ecx, DWORD PTR _pInterceptor$[ebp]
	call	?setMadeInterception@CvUnit@@QAEX_N@Z	; CvUnit::setMadeInterception

; 1733 : 		pInterceptor->setCombatUnit(NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _pInterceptor$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 1734 : 		pInterceptor->changeExperience(
; 1735 : 			kCombatInfo.getExperience(BATTLE_UNIT_INTERCEPTOR),
; 1736 : 			kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_INTERCEPTOR),
; 1737 : 			true,
; 1738 : 			kCombatInfo.getInBorders(BATTLE_UNIT_INTERCEPTOR),
; 1739 : 			kCombatInfo.getUpdateGlobal(BATTLE_UNIT_INTERCEPTOR));

	push	2
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getUpdateGlobal
	movzx	ecx, al
	push	ecx
	push	2
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getInBorders@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getInBorders
	movzx	edx, al
	push	edx
	push	1
	push	2
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getMaxExperienceAllowed
	push	eax
	push	2
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getExperience
	push	eax
	mov	ecx, DWORD PTR _pInterceptor$[ebp]
	call	?changeExperience@CvUnit@@QAEXHH_N00@Z	; CvUnit::changeExperience
$LN36@ResolveAir:

; 1740 : 	}
; 1741 : 
; 1742 : 	CvPlot* pkTargetPlot = kCombatInfo.getPlot();

	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ	; CvCombatInfo::getPlot
	mov	DWORD PTR _pkTargetPlot$[ebp], eax

; 1743 : 	CvAssert_Debug(pkTargetPlot);
; 1744 : 
; 1745 : 	ICvUserInterface2* pkDLLInterface = GC.GetEngineUserInterface();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR _pkDLLInterface$[ebp], eax

; 1746 : 	int iActivePlayerID = GC.getGame().getActivePlayer();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225980[ebp], ecx
	mov	ecx, DWORD PTR $T225980[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	mov	DWORD PTR _iActivePlayerID$[ebp], eax

; 1747 : 	CvString strBuffer;

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1748 : 
; 1749 : 	if(pkTargetPlot)

	cmp	DWORD PTR _pkTargetPlot$[ebp], 0
	je	$LN35@ResolveAir

; 1750 : 	{
; 1751 : 		if(!pkTargetPlot->isCity())

	mov	ecx, DWORD PTR _pkTargetPlot$[ebp]
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	movzx	edx, al
	test	edx, edx
	jne	$LN34@ResolveAir

; 1752 : 		{
; 1753 : 			// Target was a Unit
; 1754 : 			CvUnit* pkDefender = kCombatInfo.getUnit(BATTLE_UNIT_DEFENDER);

	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pkDefender$221733[ebp], eax

; 1755 : 			CvAssert_Debug(pkDefender != NULL);
; 1756 : 
; 1757 : 			if(pkDefender)

	cmp	DWORD PTR _pkDefender$221733[ebp], 0
	je	$LN33@ResolveAir

; 1758 : 			{
; 1759 : 				if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	$LN16@ResolveAir

; 1760 : 				{
; 1761 : 					//One Hit
; 1762 : 					if(pkDefender->GetCurrHitPoints() == GC.getMAX_HIT_POINTS() && pkAttacker->isHuman() && !GC.getGame().isGameMultiPlayer())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T225993[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?GetCurrHitPoints@CvUnit@@QBEHXZ	; CvUnit::GetCurrHitPoints
	cmp	eax, DWORD PTR $T225993[ebp]
	jne	SHORT $LN31@ResolveAir
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isHuman@CvUnit@@QBE_NXZ		; CvUnit::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN31@ResolveAir
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225997[ebp], edx
	mov	ecx, DWORD PTR $T225997[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN31@ResolveAir

; 1763 : 					{
; 1764 : 						gDLL->UnlockAchievement(ACHIEVEMENT_ONEHITKILL);

	mov	ecx, DWORD PTR $T226001[ebp]
	mov	DWORD PTR tv180[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv180[ebp], edx
	push	60					; 0000003cH
	mov	eax, DWORD PTR tv180[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv180[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax
$LN31@ResolveAir:

; 1765 : 					}
; 1766 : 
; 1767 : 					pkAttacker->changeDamage(iDefenderDamageInflicted, pkDefender->getOwner());

	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226010[ebp], edx
	push	0
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR $T226010[ebp]
	push	eax
	mov	ecx, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::changeDamage

; 1768 : 					pkDefender->changeDamage(iAttackerDamageInflicted, pkAttacker->getOwner());

	mov	edx, DWORD PTR _pkAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T226019[ebp], eax
	push	0
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR $T226019[ebp]
	push	ecx
	mov	edx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::changeDamage

; 1769 : 
; 1770 : 					// Update experience
; 1771 : 					pkDefender->changeExperience(
; 1772 : 					    kCombatInfo.getExperience(BATTLE_UNIT_DEFENDER),
; 1773 : 					    kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_DEFENDER),
; 1774 : 					    true,
; 1775 : 					    kCombatInfo.getInBorders(BATTLE_UNIT_DEFENDER),
; 1776 : 					    kCombatInfo.getUpdateGlobal(BATTLE_UNIT_DEFENDER));

	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getUpdateGlobal
	movzx	eax, al
	push	eax
	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getInBorders@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getInBorders
	movzx	ecx, al
	push	ecx
	push	1
	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getMaxExperienceAllowed
	push	eax
	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getExperience
	push	eax
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?changeExperience@CvUnit@@QAEXHH_N00@Z	; CvUnit::changeExperience

; 1777 : 
; 1778 : 					// Attacker died
; 1779 : 					if(pkAttacker->IsDead())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?IsDead@CvUnit@@QBE_NXZ			; CvUnit::IsDead
	movzx	edx, al
	test	edx, edx
	je	$LN30@ResolveAir

; 1780 : 					{
; 1781 : 						auto_ptr<ICvUnit1> pAttacker = GC.WrapUnitPointer(pkAttacker);

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T225920[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z ; CvGlobals::WrapUnitPointer
	mov	DWORD PTR $T226030[ebp], eax
	mov	edx, DWORD PTR $T226030[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Cvtptr$226028[ebp], eax
	mov	ecx, DWORD PTR __Cvtptr$226028[ebp]
	mov	DWORD PTR __Ans$226029[ebp], ecx
	mov	edx, DWORD PTR $T226030[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR __Ans$226029[ebp]
	mov	DWORD PTR $T225921[ebp], eax
	mov	ecx, DWORD PTR $T225921[ebp]
	mov	DWORD PTR $T226035[ebp], ecx
	mov	edx, DWORD PTR $T226035[ebp]
	mov	DWORD PTR __Ptr$226033[ebp], edx
	mov	DWORD PTR $T226035[ebp], 0
	mov	eax, DWORD PTR __Ptr$226033[ebp]
	mov	DWORD PTR _pAttacker$221739[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T225920[ebp]
	mov	DWORD PTR $T226045[ebp], ecx
	cmp	DWORD PTR $T226045[ebp], 0
	je	SHORT $LN89@ResolveAir
	mov	edx, DWORD PTR $T226045[ebp]
	mov	DWORD PTR _inst$226049[ebp], edx
	mov	eax, DWORD PTR _inst$226049[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$226049[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN89@ResolveAir:

; 1782 : 						gDLL->GameplayUnitDestroyedInCombat(pAttacker.get());

	mov	ecx, DWORD PTR $T226053[ebp]
	mov	DWORD PTR tv240[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv240[ebp], edx
	mov	eax, DWORD PTR _pAttacker$221739[ebp]
	push	eax
	mov	ecx, DWORD PTR tv240[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv240[ebp]
	mov	eax, DWORD PTR [edx+600]
	call	eax

; 1783 : 
; 1784 : 						CvPlayerAI& kDefenderOwner = GET_PLAYER(pkDefender->getOwner());

	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226065[ebp], edx
	mov	eax, DWORD PTR $T226065[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kDefenderOwner$221742[ebp], eax

; 1785 : 						kDefenderOwner.GetPlayerAchievements().KilledUnitWithUnit(pkDefender, pkAttacker);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkDefender$221733[ebp]
	push	edx
	mov	ecx, DWORD PTR _kDefenderOwner$221742[ebp]
	add	ecx, 63156				; 0000f6b4H
	call	?KilledUnitWithUnit@CvPlayerAchievements@@QAEXPAVCvUnit@@0@Z ; CvPlayerAchievements::KilledUnitWithUnit

; 1786 : 
; 1787 : 						if(iActivePlayerID == pkAttacker->getOwner())

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T226080[ebp], ecx
	mov	edx, DWORD PTR _iActivePlayerID$[ebp]
	cmp	edx, DWORD PTR $T226080[ebp]
	jne	$LN29@ResolveAir

; 1788 : 						{
; 1789 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_DIED_ATTACKING", pkAttacker->getNameKey(), pkDefender->getNameKey(), iAttackerDamageInflicted);

	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225922[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225923[ebp], eax
	lea	eax, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T225922[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225923[ebp]
	push	edx
	push	OFFSET ??_C@_0CF@KKNLAFFL@TXT_KEY_MISC_YOU_UNIT_DIED_ATTAC@
	lea	eax, DWORD PTR $T225924[ebp]
	push	eax
	call	??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z ; GetLocalizedText<char const *,char const *,int>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv936[ebp], eax
	mov	ecx, DWORD PTR tv936[ebp]
	mov	DWORD PTR $T226084[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T226084[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T225924[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1790 : 							pkDLLInterface->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitDefeatScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226092[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T226096[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226105[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T226092[ebp]
	push	eax
	mov	ecx, DWORD PTR $T226096[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T226105[ebp]
	push	edx
	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN29@ResolveAir:

; 1791 : 						}
; 1792 : 						if(iActivePlayerID == pkDefender->getOwner())

	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226114[ebp], edx
	mov	eax, DWORD PTR _iActivePlayerID$[ebp]
	cmp	eax, DWORD PTR $T226114[ebp]
	jne	$LN26@ResolveAir

; 1793 : 						{
; 1794 : 							if (iInterceptionDamage > 0 && pInterceptor)

	cmp	DWORD PTR _iInterceptionDamage$[ebp], 0
	jle	$LN27@ResolveAir
	cmp	DWORD PTR _pInterceptor$[ebp], 0
	je	$LN27@ResolveAir

; 1795 : 							{
; 1796 : 								strBuffer = GetLocalizedText("TXT_KEY_MISC_ENEMY_AIR_UNIT_DESTROYED", pInterceptor->getNameKey(), pkAttacker->getVisualCivAdjective(pkDefender->getTeam()), pkAttacker->getNameKey(), pkDefender->getNameKey());

	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225925[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225926[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getVisualCivAdjective@CvUnit@@QBEPBDW4TeamTypes@@@Z ; CvUnit::getVisualCivAdjective
	mov	DWORD PTR $T225927[ebp], eax
	mov	ecx, DWORD PTR _pInterceptor$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225928[ebp], eax
	lea	ecx, DWORD PTR $T225925[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225926[ebp]
	push	edx
	lea	eax, DWORD PTR $T225927[ebp]
	push	eax
	lea	ecx, DWORD PTR $T225928[ebp]
	push	ecx
	push	OFFSET ??_C@_0CG@MJKGJKJF@TXT_KEY_MISC_ENEMY_AIR_UNIT_DEST@
	lea	edx, DWORD PTR $T225929[ebp]
	push	edx
	call	??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z ; GetLocalizedText<char const *,char const *,char const *,char const *>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv147[ebp], eax
	mov	eax, DWORD PTR tv147[ebp]
	mov	DWORD PTR $T226118[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T226118[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T225929[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1797 : 								pkDLLInterface->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitVictoryScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226126[ebp], eax
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T226130[ebp], edx
	mov	eax, DWORD PTR _pkDefender$221733[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T226139[ebp], ecx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR $T226126[ebp]
	push	edx
	mov	eax, DWORD PTR $T226130[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR $T226139[ebp]
	push	ecx
	mov	edx, DWORD PTR _uiParentEventID$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 1798 : 							}
; 1799 : 							else

	jmp	$LN26@ResolveAir
$LN27@ResolveAir:

; 1800 : 							{
; 1801 : 								strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_KILLED_ENEMY_UNIT", pkDefender->getNameKey(), iAttackerDamageInflicted, 0, pkAttacker->getNameKey(), pkAttacker->getVisualCivAdjective(pkDefender->getTeam()));

	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getVisualCivAdjective@CvUnit@@QBEPBDW4TeamTypes@@@Z ; CvUnit::getVisualCivAdjective
	mov	DWORD PTR $T225930[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225931[ebp], eax
	mov	DWORD PTR $T225932[ebp], 0
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225933[ebp], eax
	lea	ecx, DWORD PTR $T225930[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225931[ebp]
	push	edx
	lea	eax, DWORD PTR $T225932[ebp]
	push	eax
	lea	ecx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225933[ebp]
	push	edx
	push	OFFSET ??_C@_0CD@DLJIGMBM@TXT_KEY_MISC_YOU_KILLED_ENEMY_UN@
	lea	eax, DWORD PTR $T225934[ebp]
	push	eax
	call	??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z ; GetLocalizedText<char const *,int,int,char const *,char const *>
	add	esp, 28					; 0000001cH
	mov	DWORD PTR tv1275[ebp], eax
	mov	ecx, DWORD PTR tv1275[ebp]
	mov	DWORD PTR $T226143[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR $T226143[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T225934[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1802 : 								pkDLLInterface->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitVictoryScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226151[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T226155[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226164[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T226151[ebp]
	push	eax
	mov	ecx, DWORD PTR $T226155[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T226164[ebp]
	push	edx
	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN26@ResolveAir:

; 1803 : 							}
; 1804 : 						}
; 1805 : 
; 1806 : 						ApplyPostCombatTraitEffects(pkDefender, pkAttacker);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkDefender$221733[ebp]
	push	edx
	call	?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z ; CvUnitCombat::ApplyPostCombatTraitEffects
	add	esp, 8

; 1807 : 					}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _pAttacker$221739[ebp]
	mov	DWORD PTR $T226174[ebp], eax
	cmp	DWORD PTR $T226174[ebp], 0
	je	SHORT $LN153@ResolveAir
	mov	ecx, DWORD PTR $T226174[ebp]
	mov	DWORD PTR _inst$226177[ebp], ecx
	mov	edx, DWORD PTR _inst$226177[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$226177[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN153@ResolveAir:

; 1808 : 					// Defender died
; 1809 : 					else if(pkDefender->IsDead())

	jmp	$LN16@ResolveAir
$LN30@ResolveAir:
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?IsDead@CvUnit@@QBE_NXZ			; CvUnit::IsDead
	movzx	eax, al
	test	eax, eax
	je	$LN24@ResolveAir

; 1810 : 					{
; 1811 : 						CvPlayerAI& kAttackerOwner = GET_PLAYER(pkAttacker->getOwner());

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226187[ebp], edx
	mov	eax, DWORD PTR $T226187[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kAttackerOwner$221774[ebp], eax

; 1812 : 						kAttackerOwner.GetPlayerAchievements().KilledUnitWithUnit(pkAttacker, pkDefender);

	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kAttackerOwner$221774[ebp]
	add	ecx, 63156				; 0000f6b4H
	call	?KilledUnitWithUnit@CvPlayerAchievements@@QAEXPAVCvUnit@@0@Z ; CvPlayerAchievements::KilledUnitWithUnit

; 1813 : 
; 1814 : 						if(iActivePlayerID == pkAttacker->getOwner())

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T226202[ebp], ecx
	mov	edx, DWORD PTR _iActivePlayerID$[ebp]
	cmp	edx, DWORD PTR $T226202[ebp]
	jne	$LN23@ResolveAir

; 1815 : 						{
; 1816 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_ATTACK_BY_AIR_AND_DEATH", pkAttacker->getNameKey(), pkDefender->getNameKey());

	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225935[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225936[ebp], eax
	lea	eax, DWORD PTR $T225935[ebp]
	push	eax
	lea	ecx, DWORD PTR $T225936[ebp]
	push	ecx
	push	OFFSET ??_C@_0CJ@CEOPEHCM@TXT_KEY_MISC_YOU_ATTACK_BY_AIR_A@
	lea	edx, DWORD PTR $T225937[ebp]
	push	edx
	call	??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z ; GetLocalizedText<char const *,char const *>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv1276[ebp], eax
	mov	eax, DWORD PTR tv1276[ebp]
	mov	DWORD PTR $T226206[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR $T226206[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T225937[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1817 : 							pkDLLInterface->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_COMBAT", MESSAGE_TYPE_INFO, pkDefender->getUnitInfo().GetButton(), (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226214[ebp], eax
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T226218[ebp], edx
	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T226227[ebp], ecx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR $T226214[ebp]
	push	edx
	mov	eax, DWORD PTR $T226218[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR $T226227[ebp]
	push	ecx
	mov	edx, DWORD PTR _uiParentEventID$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN23@ResolveAir:

; 1818 : 						}
; 1819 : 						if(iActivePlayerID == pkDefender->getOwner())

	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226236[ebp], edx
	mov	eax, DWORD PTR _iActivePlayerID$[ebp]
	cmp	eax, DWORD PTR $T226236[ebp]
	jne	$LN22@ResolveAir

; 1820 : 						{
; 1821 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_ARE_ATTACKED_BY_AIR_AND_DEATH", pkDefender->getNameKey(), pkAttacker->getNameKey());

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225938[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225939[ebp], eax
	lea	ecx, DWORD PTR $T225938[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225939[ebp]
	push	edx
	push	OFFSET ??_C@_0CP@KDGBDBAA@TXT_KEY_MISC_YOU_ARE_ATTACKED_BY@
	lea	eax, DWORD PTR $T225940[ebp]
	push	eax
	call	??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z ; GetLocalizedText<char const *,char const *>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv1277[ebp], eax
	mov	ecx, DWORD PTR tv1277[ebp]
	mov	DWORD PTR $T226240[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	edx, DWORD PTR $T226240[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T225940[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1822 : 							pkDLLInterface->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_COMBAT", MESSAGE_TYPE_INFO, pkDefender->getUnitInfo().GetButton(), (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226248[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T226252[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226261[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T226248[ebp]
	push	eax
	mov	ecx, DWORD PTR $T226252[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T226261[ebp]
	push	edx
	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN22@ResolveAir:

; 1823 : 						}
; 1824 : 
; 1825 : 						CvNotifications* pNotifications = GET_PLAYER(pkDefender->getOwner()).GetNotifications();

	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226270[ebp], edx
	mov	eax, DWORD PTR $T226270[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226274[ebp], eax
	mov	ecx, DWORD PTR $T226274[ebp]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$221783[ebp], eax

; 1826 : 						if(pNotifications)

	cmp	DWORD PTR _pNotifications$221783[ebp], 0
	je	$LN21@ResolveAir

; 1827 : 						{
; 1828 : 							Localization::String strSummary = Localization::Lookup("TXT_KEY_UNIT_LOST");

	push	OFFSET ??_C@_0BC@DCAPLCAP@TXT_KEY_UNIT_LOST?$AA@
	lea	ecx, DWORD PTR _strSummary$221785[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 7

; 1829 : 							pNotifications->Add(NOTIFICATION_UNIT_DIED, strBuffer, strSummary.toUTF8(), pkDefender->getX(), pkDefender->getY(), (int) pkDefender->getUnitType(), pkDefender->getOwner());

	mov	edx, DWORD PTR _pkDefender$221733[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T226283[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR $T226292[ebp], edx
	mov	eax, DWORD PTR _pkDefender$221733[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T226301[ebp], ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226305[ebp], eax
	mov	edx, DWORD PTR $T226283[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	mov	eax, DWORD PTR $T226292[ebp]
	push	eax
	mov	ecx, DWORD PTR $T226301[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strSummary$221785[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	edx, DWORD PTR $T226305[ebp]
	push	edx
	push	-16309126				; ff07247aH
	mov	ecx, DWORD PTR _pNotifications$221783[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 1830 : 						}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strSummary$221785[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN21@ResolveAir:

; 1831 : 
; 1832 : 						bTargetDied = true;

	mov	BYTE PTR _bTargetDied$[ebp], 1

; 1833 : 
; 1834 : 						ApplyPostCombatTraitEffects(pkAttacker, pkDefender);

	mov	eax, DWORD PTR _pkDefender$221733[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	push	ecx
	call	?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z ; CvUnitCombat::ApplyPostCombatTraitEffects
	add	esp, 8

; 1835 : 					}
; 1836 : 					// Nobody died
; 1837 : 					else

	jmp	$LN16@ResolveAir
$LN24@ResolveAir:

; 1838 : 					{
; 1839 : 						if(iActivePlayerID == pkAttacker->getOwner())

	mov	edx, DWORD PTR _pkAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T226314[ebp], eax
	mov	ecx, DWORD PTR _iActivePlayerID$[ebp]
	cmp	ecx, DWORD PTR $T226314[ebp]
	jne	$LN19@ResolveAir

; 1840 : 						{
; 1841 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_ATTACK_BY_AIR", pkAttacker->getNameKey(), pkDefender->getNameKey(), iDefenderDamageInflicted);

	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225941[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225942[ebp], eax
	lea	edx, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	edx
	lea	eax, DWORD PTR $T225941[ebp]
	push	eax
	lea	ecx, DWORD PTR $T225942[ebp]
	push	ecx
	push	OFFSET ??_C@_0BP@OGGPFFII@TXT_KEY_MISC_YOU_ATTACK_BY_AIR?$AA@
	lea	edx, DWORD PTR $T225943[ebp]
	push	edx
	call	??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z ; GetLocalizedText<char const *,char const *,int>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv548[ebp], eax
	mov	eax, DWORD PTR tv548[ebp]
	mov	DWORD PTR $T226318[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR $T226318[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T225943[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1842 : 							pkDLLInterface->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_COMBAT", MESSAGE_TYPE_INFO, pkDefender->getUnitInfo().GetButton(), (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226326[ebp], eax
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T226330[ebp], edx
	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T226339[ebp], ecx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR $T226326[ebp]
	push	edx
	mov	eax, DWORD PTR $T226330[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR $T226339[ebp]
	push	ecx
	mov	edx, DWORD PTR _uiParentEventID$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN19@ResolveAir:

; 1843 : 						}
; 1844 : 						if(iActivePlayerID == pkDefender->getOwner())

	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226348[ebp], edx
	mov	eax, DWORD PTR _iActivePlayerID$[ebp]
	cmp	eax, DWORD PTR $T226348[ebp]
	jne	$LN16@ResolveAir

; 1845 : 						{
; 1846 : 							if (iInterceptionDamage > 0 && pInterceptor)

	cmp	DWORD PTR _iInterceptionDamage$[ebp], 0
	jle	$LN17@ResolveAir
	cmp	DWORD PTR _pInterceptor$[ebp], 0
	je	$LN17@ResolveAir

; 1847 : 							{
; 1848 : 								strBuffer = GetLocalizedText("TXT_KEY_MISC_ENEMY_AIR_UNIT_INTERCEPTED", pInterceptor->getNameKey(), pkAttacker->getVisualCivAdjective(pkDefender->getTeam()), pkAttacker->getNameKey(), iDefenderDamageInflicted, pkDefender->getNameKey());

	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225944[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225945[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getVisualCivAdjective@CvUnit@@QBEPBDW4TeamTypes@@@Z ; CvUnit::getVisualCivAdjective
	mov	DWORD PTR $T225946[ebp], eax
	mov	ecx, DWORD PTR _pInterceptor$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225947[ebp], eax
	lea	ecx, DWORD PTR $T225944[ebp]
	push	ecx
	lea	edx, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	edx
	lea	eax, DWORD PTR $T225945[ebp]
	push	eax
	lea	ecx, DWORD PTR $T225946[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225947[ebp]
	push	edx
	push	OFFSET ??_C@_0CI@FBOMCEJB@TXT_KEY_MISC_ENEMY_AIR_UNIT_INTE@
	lea	eax, DWORD PTR $T225948[ebp]
	push	eax
	call	??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z ; GetLocalizedText<char const *,char const *,char const *,int,char const *>
	add	esp, 28					; 0000001cH
	mov	DWORD PTR tv1278[ebp], eax
	mov	ecx, DWORD PTR tv1278[ebp]
	mov	DWORD PTR $T226352[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	edx, DWORD PTR $T226352[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T225948[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1849 : 								pkDLLInterface->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitVictoryScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226360[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T226364[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226373[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T226360[ebp]
	push	eax
	mov	ecx, DWORD PTR $T226364[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T226373[ebp]
	push	edx
	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 1850 : 							}
; 1851 : 							else

	jmp	$LN16@ResolveAir
$LN17@ResolveAir:

; 1852 : 							{
; 1853 : 								strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_ARE_ATTACKED_BY_AIR", pkDefender->getNameKey(), pkAttacker->getNameKey(), iAttackerDamageInflicted);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225949[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225950[ebp], eax
	lea	ecx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225949[ebp]
	push	edx
	lea	eax, DWORD PTR $T225950[ebp]
	push	eax
	push	OFFSET ??_C@_0CF@KOEDAAEG@TXT_KEY_MISC_YOU_ARE_ATTACKED_BY@
	lea	ecx, DWORD PTR $T225951[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z ; GetLocalizedText<char const *,char const *,int>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv1279[ebp], eax
	mov	edx, DWORD PTR tv1279[ebp]
	mov	DWORD PTR $T226377[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	eax, DWORD PTR $T226377[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T225951[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1854 : 								pkDLLInterface->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_COMBAT", MESSAGE_TYPE_INFO, pkDefender->getUnitInfo().GetButton(), (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226385[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T226389[ebp], ecx
	mov	edx, DWORD PTR _pkDefender$221733[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T226398[ebp], eax
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR $T226385[ebp]
	push	ecx
	mov	edx, DWORD PTR $T226389[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T226398[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN16@ResolveAir:

; 1855 : 							}
; 1856 : 						}
; 1857 : 					}
; 1858 : 				}
; 1859 : 
; 1860 : 				//set damage but don't update entity damage visibility
; 1861 : 				//pkDefender->changeDamage(iDamage, pkAttacker->getOwner());
; 1862 : 
; 1863 : 				pkDefender->setCombatUnit(NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 1864 : 				if(!CvUnitMission::IsHeadMission(pkDefender, CvTypes::getMISSION_WAIT_FOR()))		// If the top mission was not a 'wait for', then clear it.

	call	?getMISSION_WAIT_FOR@CvTypes@@YA?BW4MissionTypes@@XZ ; CvTypes::getMISSION_WAIT_FOR
	push	eax
	sub	esp, 8
	mov	eax, esp
	mov	DWORD PTR $T225952[ebp], esp
	mov	DWORD PTR $T226408[ebp], eax
	mov	ecx, DWORD PTR $T226408[ebp]
	mov	edx, DWORD PTR _pkDefender$221733[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T226408[ebp]
	mov	BYTE PTR [eax+4], 0
	mov	ecx, DWORD PTR $T226408[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN268@ResolveAir
	mov	edx, DWORD PTR $T226408[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN268@ResolveAir:
	mov	eax, DWORD PTR $T226408[ebp]
	mov	DWORD PTR tv926[ebp], eax
	call	?IsHeadMission@CvUnitMission@@SAPBUMissionData@@V?$FObjectHandle@VCvUnit@@@@H@Z ; CvUnitMission::IsHeadMission
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv927[ebp], eax
	cmp	DWORD PTR tv927[ebp], 0
	jne	SHORT $LN15@ResolveAir

; 1865 : 					pkDefender->ClearMissionQueue();

	push	1
	mov	ecx, DWORD PTR _pkDefender$221733[ebp]
	call	?ClearMissionQueue@CvUnit@@QAEXH@Z	; CvUnit::ClearMissionQueue
$LN15@ResolveAir:

; 1866 : 			}
; 1867 : 			else

	jmp	SHORT $LN14@ResolveAir
$LN33@ResolveAir:

; 1868 : 				bTargetDied = true;

	mov	BYTE PTR _bTargetDied$[ebp], 1
$LN14@ResolveAir:

; 1869 : 		}
; 1870 : 		else

	jmp	$LN7@ResolveAir
$LN34@ResolveAir:

; 1871 : 		{
; 1872 : 			// Target was a City
; 1873 : 			CvCity* pCity = pkTargetPlot->getPlotCity();

	mov	ecx, DWORD PTR _pkTargetPlot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$221822[ebp], eax

; 1874 : 			CvAssert_Debug(pCity != NULL);
; 1875 : 
; 1876 : 			if(pCity)

	cmp	DWORD PTR _pCity$221822[ebp], 0
	je	$LN12@ResolveAir

; 1877 : 			{
; 1878 : 				pCity->clearCombat();

	mov	ecx, DWORD PTR _pCity$221822[ebp]
	call	?clearCombat@CvCity@@QAEXXZ		; CvCity::clearCombat

; 1879 : 				if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	$LN8@ResolveAir

; 1880 : 				{
; 1881 : 					pCity->changeDamage(iAttackerDamageInflicted);

	mov	ecx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCity$221822[ebp]
	call	?changeDamage@CvCity@@QAEXH@Z		; CvCity::changeDamage

; 1882 : 					pkAttacker->changeDamage(iDefenderDamageInflicted, pCity->getOwner());

	mov	edx, DWORD PTR _pCity$221822[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T226422[ebp], eax
	push	0
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR $T226422[ebp]
	push	ecx
	mov	edx, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::changeDamage

; 1883 : 
; 1884 : 					//		iUnitDamage = std::max(pCity->getDamage(), pCity->getDamage() + iDamage);
; 1885 : 
; 1886 : 					if(pkAttacker->IsDead())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?IsDead@CvUnit@@QBE_NXZ			; CvUnit::IsDead
	movzx	eax, al
	test	eax, eax
	je	$LN9@ResolveAir

; 1887 : 					{
; 1888 : 						if(iActivePlayerID == pkAttacker->getOwner())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226431[ebp], edx
	mov	eax, DWORD PTR _iActivePlayerID$[ebp]
	cmp	eax, DWORD PTR $T226431[ebp]
	jne	$LN9@ResolveAir

; 1889 : 						{
; 1890 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_DIED_ATTACKING_CITY", pkAttacker->getNameKey(), pCity->getNameKey(), iAttackerDamageInflicted);

	mov	ecx, DWORD PTR _pCity$221822[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T225953[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225954[ebp], eax
	lea	ecx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225953[ebp]
	push	edx
	lea	eax, DWORD PTR $T225954[ebp]
	push	eax
	push	OFFSET ??_C@_0CK@KJHCGPCH@TXT_KEY_MISC_YOU_UNIT_DIED_ATTAC@
	lea	ecx, DWORD PTR $T225955[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z ; GetLocalizedText<char const *,char const *,int>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv1312[ebp], eax
	mov	edx, DWORD PTR tv1312[ebp]
	mov	DWORD PTR $T226435[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	eax, DWORD PTR $T226435[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T225955[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1891 : 							pkDLLInterface->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitDefeatScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226443[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T226447[ebp], ecx
	mov	edx, DWORD PTR _pkAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T226456[ebp], eax
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR $T226443[ebp]
	push	ecx
	mov	edx, DWORD PTR $T226447[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T226456[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN9@ResolveAir:

; 1892 : 						}
; 1893 : 					}
; 1894 : 
; 1895 : 					if(pCity->getOwner() == iActivePlayerID)

	mov	eax, DWORD PTR _pCity$221822[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T226465[ebp], ecx
	mov	edx, DWORD PTR $T226465[ebp]
	cmp	edx, DWORD PTR _iActivePlayerID$[ebp]
	jne	$LN8@ResolveAir

; 1896 : 					{
; 1897 : 						strBuffer = GetLocalizedText("TXT_KEY_MISC_YOUR_CITY_ATTACKED_BY_AIR", pCity->getNameKey(), pkAttacker->getNameKey(), iDefenderDamageInflicted);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T225956[ebp], eax
	mov	ecx, DWORD PTR _pCity$221822[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T225957[ebp], eax
	lea	eax, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T225956[ebp]
	push	ecx
	lea	edx, DWORD PTR $T225957[ebp]
	push	edx
	push	OFFSET ??_C@_0CH@OGLGMFCF@TXT_KEY_MISC_YOUR_CITY_ATTACKED_@
	lea	eax, DWORD PTR $T225958[ebp]
	push	eax
	call	??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z ; GetLocalizedText<char const *,char const *,int>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv1313[ebp], eax
	mov	ecx, DWORD PTR tv1313[ebp]
	mov	DWORD PTR $T226469[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	edx, DWORD PTR $T226469[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T225958[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1898 : 						//red icon over attacking unit
; 1899 : 						pkDLLInterface->AddMessage(uiParentEventID, pCity->getOwner(), false, GC.getEVENT_MESSAGE_TIME(), strBuffer);

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226477[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T226481[ebp], eax
	mov	ecx, DWORD PTR _pCity$221822[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T226490[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T226477[ebp]
	push	eax
	mov	ecx, DWORD PTR $T226481[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR $T226490[ebp]
	push	edx
	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pkDLLInterface$[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN8@ResolveAir:

; 1900 : 					}
; 1901 : 				}
; 1902 : 			}
; 1903 : 			else

	jmp	SHORT $LN7@ResolveAir
$LN12@ResolveAir:

; 1904 : 				bTargetDied = true;

	mov	BYTE PTR _bTargetDied$[ebp], 1
$LN7@ResolveAir:

; 1905 : 		}
; 1906 : 	}
; 1907 : 	else

	jmp	SHORT $LN6@ResolveAir
$LN35@ResolveAir:

; 1908 : 		bTargetDied = true;

	mov	BYTE PTR _bTargetDied$[ebp], 1
$LN6@ResolveAir:

; 1909 : 
; 1910 : 	// Suicide Unit (e.g. Missiles)
; 1911 : 	if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	$LN5@ResolveAir

; 1912 : 	{
; 1913 : 		if(pkAttacker->isSuicide())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isSuicide@CvUnit@@QBE_NXZ		; CvUnit::isSuicide
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@ResolveAir

; 1914 : 		{
; 1915 : 			pkAttacker->setCombatUnit(NULL);	// Must clear this if doing a delayed kill, should this be part of the kill method?

	push	0
	push	0
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 1916 : 			pkAttacker->kill(true);

	push	-1
	push	1
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z	; CvUnit::kill

; 1917 : 		}
; 1918 : 		else

	jmp	$LN1@ResolveAir
$LN4@ResolveAir:

; 1919 : 		{
; 1920 : 			// Experience
; 1921 : 			if(iAttackerDamageInflicted > 0)

	cmp	DWORD PTR _iAttackerDamageInflicted$[ebp], 0
	jle	SHORT $LN2@ResolveAir

; 1922 : 			{
; 1923 : 				pkAttacker->changeExperience(kCombatInfo.getExperience(BATTLE_UNIT_ATTACKER),
; 1924 : 				                             kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_ATTACKER),
; 1925 : 				                             true,
; 1926 : 				                             kCombatInfo.getInBorders(BATTLE_UNIT_ATTACKER),
; 1927 : 				                             kCombatInfo.getUpdateGlobal(BATTLE_UNIT_ATTACKER));

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getUpdateGlobal
	movzx	edx, al
	push	edx
	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getInBorders@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getInBorders
	movzx	eax, al
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getMaxExperienceAllowed
	push	eax
	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getExperience
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?changeExperience@CvUnit@@QAEXHH_N00@Z	; CvUnit::changeExperience

; 1928 : 
; 1929 : #ifndef AUI_UNIT_TEST_PROMOTION_READY_MOVED
; 1930 : 				// Promotion time?
; 1931 : 				pkAttacker->testPromotionReady();

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?testPromotionReady@CvUnit@@QAEXXZ	; CvUnit::testPromotionReady
$LN2@ResolveAir:

; 1932 : #endif
; 1933 : 
; 1934 : 			}
; 1935 : 
; 1936 : 			// Clean up some stuff
; 1937 : 			pkAttacker->setCombatUnit(NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 1938 : 			pkAttacker->ClearMissionQueue(GetPostCombatDelay());

	call	?GetPostCombatDelay@@YAHXZ		; GetPostCombatDelay
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?ClearMissionQueue@CvUnit@@QAEXH@Z	; CvUnit::ClearMissionQueue

; 1939 : 
; 1940 : 			// Spend a move for this attack
; 1941 : 			pkAttacker->changeMoves(-GC.getMOVE_DENOMINATOR());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6236
	mov	DWORD PTR $T226494[ebp], ecx
	mov	edx, DWORD PTR $T226494[ebp]
	neg	edx
	push	edx
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?changeMoves@CvUnit@@QAEXH@Z		; CvUnit::changeMoves

; 1942 : 
; 1943 : 			// Can't move or attack again
; 1944 : #ifdef NQ_UNIT_TURN_ENDS_ON_FINAL_ATTACK
; 1945 : 			if(!pkAttacker->canMoveAfterAttacking() && pkAttacker->isOutOfAttacks())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?canMoveAfterAttacking@CvUnit@@QBE_NXZ	; CvUnit::canMoveAfterAttacking
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@ResolveAir
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isOutOfAttacks@CvUnit@@QBE_NXZ		; CvUnit::isOutOfAttacks
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@ResolveAir

; 1946 : #else
; 1947 : 			if(!pkAttacker->canMoveAfterAttacking())
; 1948 : #endif
; 1949 : 			{
; 1950 : 				pkAttacker->finishMoves();

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?finishMoves@CvUnit@@QAEXXZ		; CvUnit::finishMoves
$LN1@ResolveAir:

; 1951 : 			}
; 1952 : 		}
; 1953 : 
; 1954 : 		// Report that combat is over in case we want to queue another attack
; 1955 : 		GET_PLAYER(pkAttacker->getOwner()).GetTacticalAI()->CombatResolved(pkAttacker, bTargetDied);

	mov	edx, DWORD PTR _pkAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T226503[ebp], eax
	mov	ecx, DWORD PTR $T226503[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226507[ebp], ecx
	push	0
	movzx	edx, BYTE PTR _bTargetDied$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkAttacker$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T226507[ebp]
	call	?GetTacticalAI@CvPlayer@@QBEPAVCvTacticalAI@@XZ ; CvPlayer::GetTacticalAI
	mov	ecx, eax
	call	?CombatResolved@CvTacticalAI@@QAEXPAX_N1@Z ; CvTacticalAI::CombatResolved
$LN5@ResolveAir:

; 1956 : 	}
; 1957 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$0:
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$2:
	lea	ecx, DWORD PTR _pAttacker$221739[ebp]
	jmp	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ	; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$3:
	lea	ecx, DWORD PTR $T225924[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$4:
	lea	ecx, DWORD PTR $T225929[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$5:
	lea	ecx, DWORD PTR $T225934[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$6:
	lea	ecx, DWORD PTR $T225937[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$7:
	lea	ecx, DWORD PTR $T225940[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$8:
	lea	ecx, DWORD PTR _strSummary$221785[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$9:
	lea	ecx, DWORD PTR $T225943[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$10:
	lea	ecx, DWORD PTR $T225948[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$11:
	lea	ecx, DWORD PTR $T225951[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$13:
	lea	ecx, DWORD PTR $T225955[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$14:
	lea	ecx, DWORD PTR $T225958[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-944]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ENDP ; CvUnitCombat::ResolveAirUnitVsCombat
PUBLIC	?GenerateAirSweepCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z ; CvUnitCombat::GenerateAirSweepCombatInfo
EXTRN	?setAttackIsAirSweep@CvCombatInfo@@QAEX_N@Z:PROC ; CvCombatInfo::setAttackIsAirSweep
EXTRN	?GetAirSweepCombatModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::GetAirSweepCombatModifier
; Function compile flags: /Odtp
;	COMDAT ?GenerateAirSweepCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z
_TEXT	SEGMENT
tv307 = -132						; size = 4
tv249 = -128						; size = 4
tv237 = -124						; size = 4
tv149 = -120						; size = 4
$T226617 = -116						; size = 4
$T226613 = -112						; size = 4
$T226604 = -108						; size = 4
$T226597 = -104						; size = 4
$T226588 = -100						; size = 4
$T226584 = -96						; size = 4
$T226583 = -92						; size = 4
$T226582 = -88						; size = 4
$T226574 = -84						; size = 4
$T226573 = -80						; size = 4
$T226572 = -76						; size = 4
$T226558 = -72						; size = 4
$T226554 = -68						; size = 4
$T226550 = -64						; size = 4
$T226541 = -60						; size = 4
$T226537 = -56						; size = 4
_iAttackerEffectiveStrength$221862 = -52		; size = 4
_iDefenderTotalDamageInflicted$221858 = -48		; size = 4
_iExperience$221864 = -44				; size = 4
_iDefenderDamageInflicted$221856 = -40			; size = 4
_iAttackerDamageInflicted$221855 = -36			; size = 4
_iDefenderEffectiveStrength$221863 = -32		; size = 4
_iAttackerTotalDamageInflicted$221857 = -28		; size = 4
_iInterceptionDamage$221853 = -24			; size = 4
_iDefenderExperience$ = -20				; size = 4
_iAttackerStrength$ = -16				; size = 4
_bIsGlobalXPAwarded$ = -9				; size = 1
_iDefenderStrength$ = -8				; size = 4
_iMaxHP$ = -4						; size = 4
_kAttacker$ = 8						; size = 4
_pkDefender$ = 12					; size = 4
_plot$ = 16						; size = 4
_pkCombatInfo$ = 20					; size = 4
?GenerateAirSweepCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z PROC ; CvUnitCombat::GenerateAirSweepCombatInfo, COMDAT

; 1961 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H

; 1962 : 	int iMaxHP = GC.getMAX_HIT_POINTS();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR _iMaxHP$[ebp], eax

; 1963 : 
; 1964 : 	pkCombatInfo->setUnit(BATTLE_UNIT_ATTACKER, &kAttacker);

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvCombatInfo::setUnit

; 1965 : 	pkCombatInfo->setUnit(BATTLE_UNIT_DEFENDER, pkDefender);

	mov	edx, DWORD PTR _pkDefender$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvCombatInfo::setUnit

; 1966 : 	pkCombatInfo->setPlot(&plot);

	mov	eax, DWORD PTR _plot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setPlot@CvCombatInfo@@QAEXPAVCvPlot@@@Z ; CvCombatInfo::setPlot

; 1967 : 
; 1968 : 	// Unit vs. Unit
; 1969 : 	CvAssert(pkDefender != NULL);
; 1970 : 
; 1971 : 	int iAttackerStrength = kAttacker.GetMaxRangedCombatStrength(pkDefender, /*pCity*/ NULL, true, false);

	push	0
	push	1
	push	0
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetMaxRangedCombatStrength@CvUnit@@QBEHPBV1@PBVCvCity@@_N2@Z ; CvUnit::GetMaxRangedCombatStrength
	mov	DWORD PTR _iAttackerStrength$[ebp], eax

; 1972 : 
; 1973 : 	// Mod to air sweep strength
; 1974 : 	iAttackerStrength *= (100 + kAttacker.GetAirSweepCombatModifier());

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetAirSweepCombatModifier@CvUnit@@QBEHXZ ; CvUnit::GetAirSweepCombatModifier
	add	eax, 100				; 00000064H
	imul	eax, DWORD PTR _iAttackerStrength$[ebp]
	mov	DWORD PTR _iAttackerStrength$[ebp], eax

; 1975 : 	iAttackerStrength /= 100;

	mov	eax, DWORD PTR _iAttackerStrength$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iAttackerStrength$[ebp], eax

; 1976 : 
; 1977 : 	int iDefenderStrength = 0;

	mov	DWORD PTR _iDefenderStrength$[ebp], 0

; 1978 : 
; 1979 : 	int iDefenderExperience = 0;

	mov	DWORD PTR _iDefenderExperience$[ebp], 0

; 1980 : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 1981 : 	bool bIsGlobalXPAwarded = !kAttacker.isBarbarian() && !GET_PLAYER(kAttacker.getOwner()).isMinorCiv() && !pkDefender->isBarbarian() && !GET_PLAYER(pkDefender->getOwner()).isMinorCiv();

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN8@GenerateAi@2
	mov	eax, DWORD PTR _kAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T226537[ebp], ecx
	mov	edx, DWORD PTR $T226537[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226541[ebp], edx
	mov	ecx, DWORD PTR $T226541[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@GenerateAi@2
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN8@GenerateAi@2
	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T226550[ebp], eax
	mov	ecx, DWORD PTR $T226550[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226554[ebp], ecx
	mov	ecx, DWORD PTR $T226554[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN8@GenerateAi@2
	mov	DWORD PTR tv149[ebp], 1
	jmp	SHORT $LN9@GenerateAi@2
$LN8@GenerateAi@2:
	mov	DWORD PTR tv149[ebp], 0
$LN9@GenerateAi@2:
	mov	al, BYTE PTR tv149[ebp]
	mov	BYTE PTR _bIsGlobalXPAwarded$[ebp], al

; 1982 : #endif
; 1983 : 
; 1984 : 	// Ground AA interceptor
; 1985 : 	if(pkDefender->getDomainType() != DOMAIN_AIR)

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ ; CvUnit::getDomainType
	cmp	eax, 1
	je	SHORT $LN5@GenerateAi@2

; 1986 : 	{
; 1987 : 		int iInterceptionDamage = pkDefender->GetInterceptionDamage(&kAttacker);

	push	1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?GetInterceptionDamage@CvUnit@@QBEHPBV1@_N@Z ; CvUnit::GetInterceptionDamage
	mov	DWORD PTR _iInterceptionDamage$221853[ebp], eax

; 1988 : 
; 1989 : 		// Reduce damage for performing a sweep
; 1990 : 		iInterceptionDamage *= /*75*/ GC.getAIR_SWEEP_INTERCEPTION_DAMAGE_MOD();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7452
	mov	DWORD PTR $T226558[ebp], edx
	mov	eax, DWORD PTR _iInterceptionDamage$221853[ebp]
	imul	eax, DWORD PTR $T226558[ebp]
	mov	DWORD PTR _iInterceptionDamage$221853[ebp], eax

; 1991 : 		iInterceptionDamage /= 100;

	mov	eax, DWORD PTR _iInterceptionDamage$221853[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iInterceptionDamage$221853[ebp], eax

; 1992 : 
; 1993 : 		iDefenderExperience = /*2*/ GC.getEXPERIENCE_DEFENDING_AIR_SWEEP_GROUND();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7544
	mov	DWORD PTR _iDefenderExperience$[ebp], edx

; 1994 : 
; 1995 : 		pkCombatInfo->setDamageInflicted(BATTLE_UNIT_DEFENDER, iInterceptionDamage);		// Damage inflicted this round

	mov	eax, DWORD PTR _iInterceptionDamage$221853[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted

; 1996 : #ifdef AUI_UNIT_COMBAT_FIX_AIR_SWEEP_VS_GROUND_INTERCEPTOR
; 1997 : 		int iTotalInterceptionDamage = iInterceptionDamage + kAttacker.getDamage();
; 1998 : 		pkCombatInfo->setFinalDamage(BATTLE_UNIT_ATTACKER, iTotalInterceptionDamage);
; 1999 : 		pkCombatInfo->setDamageInflicted(BATTLE_UNIT_ATTACKER, 0);
; 2000 : 		pkCombatInfo->setFinalDamage(BATTLE_UNIT_DEFENDER, pkDefender->getDamage());
; 2001 : 
; 2002 : 		pkCombatInfo->setExperience(BATTLE_UNIT_DEFENDER, iDefenderExperience);
; 2003 : 		pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_ATTACKER, pkDefender->maxXPValue());
; 2004 : 		pkCombatInfo->setInBorders(BATTLE_UNIT_ATTACKER, plot.getOwner() == pkDefender->getOwner());
; 2005 : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 2006 : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, bIsGlobalXPAwarded);
; 2007 : #else
; 2008 : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, !kAttacker.isBarbarian());
; 2009 : #endif
; 2010 : 
; 2011 : 		pkCombatInfo->setExperience(BATTLE_UNIT_ATTACKER, 0);
; 2012 : 		pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_DEFENDER, kAttacker.maxXPValue());
; 2013 : 		pkCombatInfo->setInBorders(BATTLE_UNIT_DEFENDER, plot.getOwner() == kAttacker.getOwner());
; 2014 : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 2015 : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_DEFENDER, bIsGlobalXPAwarded);
; 2016 : #else
; 2017 : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_DEFENDER, !pkDefender->isBarbarian());
; 2018 : #endif
; 2019 : #endif
; 2020 : 	}
; 2021 : 	// Air interceptor
; 2022 : 	else

	jmp	$LN4@GenerateAi@2
$LN5@GenerateAi@2:

; 2023 : 	{
; 2024 : 		iDefenderStrength = pkDefender->GetMaxRangedCombatStrength(&kAttacker, /*pCity*/ NULL, false, false);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?GetMaxRangedCombatStrength@CvUnit@@QBEHPBV1@PBVCvCity@@_N2@Z ; CvUnit::GetMaxRangedCombatStrength
	mov	DWORD PTR _iDefenderStrength$[ebp], eax

; 2025 : 
; 2026 : 		int iAttackerDamageInflicted = kAttacker.getCombatDamage(iAttackerStrength, iDefenderStrength, kAttacker.getDamage(), /*bIncludeRand*/ true, /*bAttackerIsCity*/ false, /*bDefenderIsCity*/ false);

	push	0
	push	0
	push	1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	push	eax
	mov	edx, DWORD PTR _iDefenderStrength$[ebp]
	push	edx
	mov	eax, DWORD PTR _iAttackerStrength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getCombatDamage@CvUnit@@QBEHHHH_N00@Z	; CvUnit::getCombatDamage
	mov	DWORD PTR _iAttackerDamageInflicted$221855[ebp], eax

; 2027 : 		int iDefenderDamageInflicted = pkDefender->getCombatDamage(iDefenderStrength, iAttackerStrength, pkDefender->getDamage(), /*bIncludeRand*/ true, /*bAttackerIsCity*/ false, /*bDefenderIsCity*/ false);

	push	0
	push	0
	push	1
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	push	eax
	mov	ecx, DWORD PTR _iAttackerStrength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iDefenderStrength$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getCombatDamage@CvUnit@@QBEHHHH_N00@Z	; CvUnit::getCombatDamage
	mov	DWORD PTR _iDefenderDamageInflicted$221856[ebp], eax

; 2028 : 
; 2029 : 		int iAttackerTotalDamageInflicted = iAttackerDamageInflicted + pkDefender->getDamage();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	add	eax, DWORD PTR _iAttackerDamageInflicted$221855[ebp]
	mov	DWORD PTR _iAttackerTotalDamageInflicted$221857[ebp], eax

; 2030 : 		int iDefenderTotalDamageInflicted = iDefenderDamageInflicted + kAttacker.getDamage();

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	add	eax, DWORD PTR _iDefenderDamageInflicted$221856[ebp]
	mov	DWORD PTR _iDefenderTotalDamageInflicted$221858[ebp], eax

; 2031 : 
; 2032 : 		// Will both units be killed by this? :o If so, take drastic corrective measures
; 2033 : 		if(iAttackerTotalDamageInflicted >= iMaxHP && iDefenderTotalDamageInflicted >= iMaxHP)

	mov	eax, DWORD PTR _iAttackerTotalDamageInflicted$221857[ebp]
	cmp	eax, DWORD PTR _iMaxHP$[ebp]
	jl	SHORT $LN3@GenerateAi@2
	mov	ecx, DWORD PTR _iDefenderTotalDamageInflicted$221858[ebp]
	cmp	ecx, DWORD PTR _iMaxHP$[ebp]
	jl	SHORT $LN3@GenerateAi@2

; 2034 : 		{
; 2035 : 			// He who hath the least amount of damage survives with 1 HP left
; 2036 : 			if(iAttackerTotalDamageInflicted > iDefenderTotalDamageInflicted)

	mov	edx, DWORD PTR _iAttackerTotalDamageInflicted$221857[ebp]
	cmp	edx, DWORD PTR _iDefenderTotalDamageInflicted$221858[ebp]
	jle	SHORT $LN2@GenerateAi@2

; 2037 : 			{
; 2038 : 				iDefenderDamageInflicted = iMaxHP - kAttacker.getDamage() - 1;

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	ecx, DWORD PTR _iMaxHP$[ebp]
	sub	ecx, eax
	sub	ecx, 1
	mov	DWORD PTR _iDefenderDamageInflicted$221856[ebp], ecx

; 2039 : 				iDefenderTotalDamageInflicted = iMaxHP - 1;

	mov	edx, DWORD PTR _iMaxHP$[ebp]
	sub	edx, 1
	mov	DWORD PTR _iDefenderTotalDamageInflicted$221858[ebp], edx

; 2040 : 				iAttackerTotalDamageInflicted = iMaxHP;

	mov	eax, DWORD PTR _iMaxHP$[ebp]
	mov	DWORD PTR _iAttackerTotalDamageInflicted$221857[ebp], eax

; 2041 : 			}
; 2042 : 			else

	jmp	SHORT $LN3@GenerateAi@2
$LN2@GenerateAi@2:

; 2043 : 			{
; 2044 : 				iAttackerDamageInflicted = iMaxHP - pkDefender->getDamage() - 1;

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	ecx, DWORD PTR _iMaxHP$[ebp]
	sub	ecx, eax
	sub	ecx, 1
	mov	DWORD PTR _iAttackerDamageInflicted$221855[ebp], ecx

; 2045 : 				iAttackerTotalDamageInflicted = iMaxHP - 1;

	mov	edx, DWORD PTR _iMaxHP$[ebp]
	sub	edx, 1
	mov	DWORD PTR _iAttackerTotalDamageInflicted$221857[ebp], edx

; 2046 : 				iDefenderTotalDamageInflicted = iMaxHP;

	mov	eax, DWORD PTR _iMaxHP$[ebp]
	mov	DWORD PTR _iDefenderTotalDamageInflicted$221858[ebp], eax
$LN3@GenerateAi@2:

; 2047 : 			}
; 2048 : 		}
; 2049 : 
; 2050 : 		iDefenderExperience = /*6*/ GC.getEXPERIENCE_DEFENDING_AIR_SWEEP_AIR();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7540
	mov	DWORD PTR _iDefenderExperience$[ebp], ecx

; 2051 : 
; 2052 : 		pkCombatInfo->setFinalDamage(BATTLE_UNIT_ATTACKER, iDefenderTotalDamageInflicted);

	mov	edx, DWORD PTR _iDefenderTotalDamageInflicted$221858[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFinalDamage

; 2053 : 		pkCombatInfo->setDamageInflicted(BATTLE_UNIT_ATTACKER, iAttackerDamageInflicted);

	mov	eax, DWORD PTR _iAttackerDamageInflicted$221855[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted

; 2054 : 		pkCombatInfo->setFinalDamage(BATTLE_UNIT_DEFENDER, iAttackerTotalDamageInflicted);

	mov	ecx, DWORD PTR _iAttackerTotalDamageInflicted$221857[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFinalDamage

; 2055 : 		pkCombatInfo->setDamageInflicted(BATTLE_UNIT_DEFENDER, iDefenderDamageInflicted);

	mov	edx, DWORD PTR _iDefenderDamageInflicted$221856[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted

; 2056 : 
; 2057 : 		// Fear Damage
; 2058 : 		//pkCombatInfo->setFearDamageInflicted( BATTLE_UNIT_ATTACKER, kAttacker.getCombatDamage(iAttackerStrength, iDefenderStrength, kAttacker.getDamage(), true, false, true) );
; 2059 : 		//	pkCombatInfo->setFearDamageInflicted( BATTLE_UNIT_DEFENDER, getCombatDamage(iDefenderStrength, iAttackerStrength, pDefender->getDamage(), true, false, true) );
; 2060 : 
; 2061 : #ifndef NQM_PRUNING
; 2062 : 		int iAttackerEffectiveStrength = iAttackerStrength * (iMaxHP - range(kAttacker.getDamage(), 0, iMaxHP-1)) / iMaxHP;

	mov	eax, DWORD PTR _iMaxHP$[ebp]
	sub	eax, 1
	mov	DWORD PTR $T226573[ebp], eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	DWORD PTR $T226572[ebp], eax
	cmp	DWORD PTR $T226572[ebp], 0
	jge	SHORT $LN37@GenerateAi@2
	mov	DWORD PTR $T226574[ebp], 0
	jmp	SHORT $LN38@GenerateAi@2
	jmp	SHORT $LN38@GenerateAi@2
$LN37@GenerateAi@2:
	mov	ecx, DWORD PTR $T226572[ebp]
	cmp	ecx, DWORD PTR $T226573[ebp]
	jle	SHORT $LN35@GenerateAi@2
	mov	edx, DWORD PTR $T226573[ebp]
	mov	DWORD PTR $T226574[ebp], edx
	jmp	SHORT $LN38@GenerateAi@2
	jmp	SHORT $LN38@GenerateAi@2
$LN35@GenerateAi@2:
	mov	eax, DWORD PTR $T226572[ebp]
	mov	DWORD PTR $T226574[ebp], eax
$LN38@GenerateAi@2:
	mov	ecx, DWORD PTR _iMaxHP$[ebp]
	sub	ecx, DWORD PTR $T226574[ebp]
	mov	eax, ecx
	imul	eax, DWORD PTR _iAttackerStrength$[ebp]
	cdq
	idiv	DWORD PTR _iMaxHP$[ebp]
	mov	DWORD PTR _iAttackerEffectiveStrength$221862[ebp], eax

; 2063 : 		iAttackerEffectiveStrength = iAttackerEffectiveStrength > 0 ? iAttackerEffectiveStrength : 1;

	cmp	DWORD PTR _iAttackerEffectiveStrength$221862[ebp], 0
	jle	SHORT $LN10@GenerateAi@2
	mov	edx, DWORD PTR _iAttackerEffectiveStrength$221862[ebp]
	mov	DWORD PTR tv237[ebp], edx
	jmp	SHORT $LN11@GenerateAi@2
$LN10@GenerateAi@2:
	mov	DWORD PTR tv237[ebp], 1
$LN11@GenerateAi@2:
	mov	eax, DWORD PTR tv237[ebp]
	mov	DWORD PTR _iAttackerEffectiveStrength$221862[ebp], eax

; 2064 : 		int iDefenderEffectiveStrength = iDefenderStrength * (iMaxHP - range(pkDefender->getDamage(), 0, iMaxHP-1)) / iMaxHP;

	mov	ecx, DWORD PTR _iMaxHP$[ebp]
	sub	ecx, 1
	mov	DWORD PTR $T226583[ebp], ecx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	DWORD PTR $T226582[ebp], eax
	cmp	DWORD PTR $T226582[ebp], 0
	jge	SHORT $LN43@GenerateAi@2
	mov	DWORD PTR $T226584[ebp], 0
	jmp	SHORT $LN44@GenerateAi@2
	jmp	SHORT $LN44@GenerateAi@2
$LN43@GenerateAi@2:
	mov	edx, DWORD PTR $T226582[ebp]
	cmp	edx, DWORD PTR $T226583[ebp]
	jle	SHORT $LN41@GenerateAi@2
	mov	eax, DWORD PTR $T226583[ebp]
	mov	DWORD PTR $T226584[ebp], eax
	jmp	SHORT $LN44@GenerateAi@2
	jmp	SHORT $LN44@GenerateAi@2
$LN41@GenerateAi@2:
	mov	ecx, DWORD PTR $T226582[ebp]
	mov	DWORD PTR $T226584[ebp], ecx
$LN44@GenerateAi@2:
	mov	edx, DWORD PTR _iMaxHP$[ebp]
	sub	edx, DWORD PTR $T226584[ebp]
	mov	eax, edx
	imul	eax, DWORD PTR _iDefenderStrength$[ebp]
	cdq
	idiv	DWORD PTR _iMaxHP$[ebp]
	mov	DWORD PTR _iDefenderEffectiveStrength$221863[ebp], eax

; 2065 : 		iDefenderEffectiveStrength = iDefenderEffectiveStrength > 0 ? iDefenderEffectiveStrength : 1;

	cmp	DWORD PTR _iDefenderEffectiveStrength$221863[ebp], 0
	jle	SHORT $LN12@GenerateAi@2
	mov	eax, DWORD PTR _iDefenderEffectiveStrength$221863[ebp]
	mov	DWORD PTR tv249[ebp], eax
	jmp	SHORT $LN13@GenerateAi@2
$LN12@GenerateAi@2:
	mov	DWORD PTR tv249[ebp], 1
$LN13@GenerateAi@2:
	mov	ecx, DWORD PTR tv249[ebp]
	mov	DWORD PTR _iDefenderEffectiveStrength$221863[ebp], ecx

; 2066 : #endif
; 2067 : 
; 2068 : 		//int iExperience = kAttacker.defenseXPValue();
; 2069 : 		//iExperience = ((iExperience * iAttackerEffectiveStrength) / iDefenderEffectiveStrength); // is this right? looks like more for less [Jon: Yes, it's XP for the defender]
; 2070 : 		//iExperience = range(iExperience, GC.getMIN_EXPERIENCE_PER_COMBAT(), GC.getMAX_EXPERIENCE_PER_COMBAT());
; 2071 : 		pkCombatInfo->setExperience(BATTLE_UNIT_DEFENDER, iDefenderExperience);

	mov	edx, DWORD PTR _iDefenderExperience$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience

; 2072 : 		pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_ATTACKER, pkDefender->maxXPValue());

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?maxXPValue@CvUnit@@QBEHXZ		; CvUnit::maxXPValue
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed

; 2073 : 		pkCombatInfo->setInBorders(BATTLE_UNIT_ATTACKER, plot.getOwner() == pkDefender->getOwner());

	mov	eax, DWORD PTR _plot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR $T226588[ebp], ecx
	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T226597[ebp], eax
	mov	ecx, DWORD PTR $T226588[ebp]
	cmp	ecx, DWORD PTR $T226597[ebp]
	sete	dl
	movzx	eax, dl
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders

; 2074 : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 2075 : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, bIsGlobalXPAwarded);

	movzx	ecx, BYTE PTR _bIsGlobalXPAwarded$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal

; 2076 : #else
; 2077 : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, !kAttacker.isBarbarian());
; 2078 : #endif
; 2079 : 
; 2080 : 		//iExperience = ((iExperience * iDefenderEffectiveStrength) / iAttackerEffectiveStrength);
; 2081 : 		//iExperience = range(iExperience, GC.getMIN_EXPERIENCE_PER_COMBAT(), GC.getMAX_EXPERIENCE_PER_COMBAT());
; 2082 : 		int iExperience = /*6*/ GC.getEXPERIENCE_ATTACKING_AIR_SWEEP();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7536
	mov	DWORD PTR _iExperience$221864[ebp], edx

; 2083 : 		pkCombatInfo->setExperience(BATTLE_UNIT_ATTACKER, iExperience);

	mov	eax, DWORD PTR _iExperience$221864[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience

; 2084 : 		pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_DEFENDER, kAttacker.maxXPValue());

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?maxXPValue@CvUnit@@QBEHXZ		; CvUnit::maxXPValue
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed

; 2085 : 		pkCombatInfo->setInBorders(BATTLE_UNIT_DEFENDER, plot.getOwner() == kAttacker.getOwner());

	mov	ecx, DWORD PTR _plot$[ebp]
	movsx	edx, BYTE PTR [ecx+4]
	mov	DWORD PTR $T226604[ebp], edx
	mov	eax, DWORD PTR _kAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T226613[ebp], ecx
	mov	edx, DWORD PTR $T226604[ebp]
	cmp	edx, DWORD PTR $T226613[ebp]
	sete	al
	movzx	ecx, al
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders

; 2086 : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 2087 : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_DEFENDER, bIsGlobalXPAwarded);

	movzx	edx, BYTE PTR _bIsGlobalXPAwarded$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal
$LN4@GenerateAi@2:

; 2088 : #else
; 2089 : 		pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_DEFENDER, !pkDefender->isBarbarian());
; 2090 : #endif
; 2091 : 	}
; 2092 : 
; 2093 : 	pkCombatInfo->setAttackIsRanged(false);

	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setAttackIsRanged@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setAttackIsRanged

; 2094 : 	pkCombatInfo->setAttackIsAirSweep(true);

	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setAttackIsAirSweep@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setAttackIsAirSweep

; 2095 : 	pkCombatInfo->setAttackerAdvances(false);

	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setAttackerAdvances@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setAttackerAdvances

; 2096 : 	pkCombatInfo->setDefenderRetaliates(true);

	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDefenderRetaliates@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setDefenderRetaliates

; 2097 : 
; 2098 : 	GC.GetEngineUserInterface()->setDirty(UnitInfo_DIRTY_BIT, true);

	mov	eax, DWORD PTR $T226617[ebp]
	mov	DWORD PTR tv307[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv307[ebp], ecx
	push	1
	push	19					; 00000013H
	mov	edx, DWORD PTR tv307[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv307[ebp]
	mov	edx, DWORD PTR [eax+260]
	call	edx

; 2099 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateAirSweepCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z ENDP ; CvUnitCombat::GenerateAirSweepCombatInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveAirSweep
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z DD 019930522H
	DD	010H
	DD	FLAT:__unwindtable$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$8
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$10
	DD	07H
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$11
	DD	07H
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$12
	DD	07H
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$13
	DD	07H
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$14
	DD	07H
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$15
	DD	07H
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$16
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$17
	DD	00H
	DD	FLAT:__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$18
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
_TEXT	SEGMENT
tv811 = -1116						; size = 4
tv1260 = -1112						; size = 4
tv764 = -1108						; size = 4
tv693 = -1104						; size = 4
tv1259 = -1100						; size = 4
tv1258 = -1096						; size = 4
tv637 = -1092						; size = 4
tv1257 = -1088						; size = 4
tv1256 = -1084						; size = 4
tv563 = -1080						; size = 4
tv1255 = -1076						; size = 4
tv533 = -1072						; size = 4
tv486 = -1068						; size = 4
tv1254 = -1064						; size = 4
tv401 = -1060						; size = 4
tv1253 = -1056						; size = 4
tv370 = -1052						; size = 4
tv325 = -1048						; size = 4
tv66 = -1044						; size = 4
tv272 = -1040						; size = 4
tv946 = -1036						; size = 4
tv241 = -1032						; size = 4
tv144 = -1028						; size = 4
$T227292 = -1024					; size = 4
$T227288 = -1020					; size = 4
$T227279 = -1016					; size = 4
$T227275 = -1012					; size = 4
$T227266 = -1008					; size = 4
$T227262 = -1004					; size = 4
$T227258 = -1000					; size = 4
$T227250 = -996						; size = 4
$T227246 = -992						; size = 4
$T227237 = -988						; size = 4
$T227228 = -984						; size = 4
$T227224 = -980						; size = 4
$T227220 = -976						; size = 4
$T227212 = -972						; size = 4
$T227208 = -968						; size = 4
_inst$227198 = -964					; size = 4
$T227195 = -960						; size = 4
$T227185 = -956						; size = 4
$T227181 = -952						; size = 4
$T227172 = -948						; size = 4
$T227163 = -944						; size = 4
$T227150 = -940						; size = 4
$T227142 = -936						; size = 4
$T227138 = -932						; size = 4
$T227129 = -928						; size = 4
$T227125 = -924						; size = 4
$T227116 = -920						; size = 4
$T227107 = -916						; size = 4
$T227103 = -912						; size = 4
$T227099 = -908						; size = 4
$T227091 = -904						; size = 4
$T227083 = -900						; size = 4
$T227079 = -896						; size = 4
$T227070 = -892						; size = 4
$T227061 = -888						; size = 4
$T227052 = -884						; size = 4
$T227048 = -880						; size = 4
$T227044 = -876						; size = 4
$T227036 = -872						; size = 4
$T227032 = -868						; size = 4
$T227020 = -864						; size = 4
_inst$227015 = -860					; size = 4
$T227011 = -856						; size = 4
$T227002 = -852						; size = 4
__Ptr$227001 = -848					; size = 4
$T226997 = -844						; size = 4
__Cvtptr$226995 = -840					; size = 4
__Ans$226996 = -836					; size = 4
_inst$226985 = -832					; size = 4
$T226981 = -828						; size = 4
$T226972 = -824						; size = 4
$T226963 = -820						; size = 4
$T226959 = -816						; size = 4
$T226955 = -812						; size = 4
$T226947 = -808						; size = 4
$T226943 = -804						; size = 4
$T226934 = -800						; size = 4
$T226925 = -796						; size = 4
$T226921 = -792						; size = 4
$T226917 = -788						; size = 4
$T226909 = -784						; size = 4
$T226905 = -780						; size = 4
$T226893 = -776						; size = 4
_inst$226888 = -772					; size = 4
$T226884 = -768						; size = 4
$T226875 = -764						; size = 4
__Ptr$226874 = -760					; size = 4
$T226870 = -756						; size = 4
__Cvtptr$226868 = -752					; size = 4
__Ans$226869 = -748					; size = 4
_inst$226858 = -744					; size = 4
$T226854 = -740						; size = 4
$T226845 = -736						; size = 4
$T226836 = -732						; size = 4
$T226832 = -728						; size = 4
$T226828 = -724						; size = 4
$T226820 = -720						; size = 4
$T226816 = -716						; size = 4
$T226807 = -712						; size = 4
$T226798 = -708						; size = 4
$T226794 = -704						; size = 4
$T226790 = -700						; size = 4
$T226782 = -696						; size = 4
$T226778 = -692						; size = 4
$T226766 = -688						; size = 4
_inst$226761 = -684					; size = 4
$T226757 = -680						; size = 4
$T226748 = -676						; size = 4
__Ptr$226747 = -672					; size = 4
$T226743 = -668						; size = 4
__Cvtptr$226741 = -664					; size = 4
__Ans$226742 = -660					; size = 4
$T226732 = -656						; size = 4
$T226728 = -652						; size = 4
$T226724 = -648						; size = 4
$T226720 = -644						; size = 4
$T226711 = -640						; size = 4
$T226702 = -636						; size = 4
$T226698 = -632						; size = 4
$T226694 = -628						; size = 4
$T226667 = -624						; size = 28
$T226666 = -596						; size = 4
$T226665 = -592						; size = 4
$T226664 = -588						; size = 28
$T226663 = -560						; size = 4
$T226662 = -556						; size = 4
$T226661 = -552						; size = 28
$T226660 = -524						; size = 4
$T226659 = -520						; size = 4
$T226658 = -516						; size = 4
$T226657 = -512						; size = 28
$T226656 = -484						; size = 4
$T226655 = -480						; size = 4
$T226654 = -476						; size = 28
$T226653 = -448						; size = 4
$T226652 = -444						; size = 4
$T226651 = -440						; size = 4
$T226650 = -436						; size = 28
$T226649 = -408						; size = 4
$T226648 = -404						; size = 4
$T226647 = -400						; size = 28
$T226646 = -372						; size = 4
$T226645 = -368						; size = 4
$T226644 = -364						; size = 4
$T226643 = -360						; size = 4
$T226642 = -356						; size = 28
$T226641 = -328						; size = 4
$T226640 = -324						; size = 4
$T226639 = -320						; size = 4
$T226638 = -316						; size = 4
$T226637 = -312						; size = 28
$T226636 = -284						; size = 4
$T226635 = -280						; size = 4
$T226634 = -276						; size = 4
$T226633 = -272						; size = 4
$T226632 = -268						; size = 4
$T226631 = -264						; size = 28
$T226630 = -236						; size = 4
$T226629 = -232						; size = 4
$T226628 = -228						; size = 4
$T226627 = -224						; size = 4
$T226626 = -220						; size = 28
$T226625 = -192						; size = 4
$T226624 = -188						; size = 4
$T226623 = -184						; size = 4
$T226622 = -180						; size = 4
$T226621 = -176						; size = 4
_strSummary$221947 = -172				; size = 80
_pNotification$221936 = -92				; size = 4
_pDefender$221919 = -88					; size = 4
_pAttacker$221902 = -84					; size = 4
_pAttacker$221885 = -80					; size = 4
_iActivePlayerID$221881 = -76				; size = 4
_pkTargetPlot$ = -72					; size = 4
_strBuffer$ = -68					; size = 28
__$ArrayPad$ = -40					; size = 4
_bDefenderDead$ = -33					; size = 1
_pkDefender$ = -32					; size = 4
_iDefenderDamageInflicted$ = -28			; size = 4
_iAttackerDamageInflicted$ = -24			; size = 4
_pkAttacker$ = -20					; size = 4
_bAttackerDead$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_kCombatInfo$ = 8					; size = 4
_uiParentEventID$ = 12					; size = 4
?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z PROC ; CvUnitCombat::ResolveAirSweep, COMDAT

; 2103 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1104				; 00000450H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2104 : 	// After combat stuff
; 2105 : 	CvString strBuffer;

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2106 : 	bool bAttackerDead = false;

	mov	BYTE PTR _bAttackerDead$[ebp], 0

; 2107 : 	bool bDefenderDead = false;

	mov	BYTE PTR _bDefenderDead$[ebp], 0

; 2108 : 
; 2109 : 	CvUnit* pkAttacker = kCombatInfo.getUnit(BATTLE_UNIT_ATTACKER);

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pkAttacker$[ebp], eax

; 2110 : 	CvUnit* pkDefender = kCombatInfo.getUnit(BATTLE_UNIT_DEFENDER);

	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pkDefender$[ebp], eax

; 2111 : 	CvPlot* pkTargetPlot = kCombatInfo.getPlot();

	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ	; CvCombatInfo::getPlot
	mov	DWORD PTR _pkTargetPlot$[ebp], eax

; 2112 : 	if(!pkTargetPlot && pkDefender)

	cmp	DWORD PTR _pkTargetPlot$[ebp], 0
	jne	SHORT $LN28@ResolveAir@2
	cmp	DWORD PTR _pkDefender$[ebp], 0
	je	SHORT $LN28@ResolveAir@2

; 2113 : 		pkTargetPlot = pkDefender->plot();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR _pkTargetPlot$[ebp], eax
$LN28@ResolveAir@2:

; 2114 : 
; 2115 : 	CvAssert_Debug(pkAttacker && pkDefender && pkTargetPlot);
; 2116 : 
; 2117 : 	// Internal variables
; 2118 : 	int iAttackerDamageInflicted = kCombatInfo.getDamageInflicted(BATTLE_UNIT_ATTACKER);

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getDamageInflicted
	mov	DWORD PTR _iAttackerDamageInflicted$[ebp], eax

; 2119 : 	int iDefenderDamageInflicted = kCombatInfo.getDamageInflicted(BATTLE_UNIT_DEFENDER);

	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getDamageInflicted
	mov	DWORD PTR _iDefenderDamageInflicted$[ebp], eax

; 2120 : 
; 2121 : 	// Made interception!
; 2122 : 	if(pkDefender)

	cmp	DWORD PTR _pkDefender$[ebp], 0
	je	$LN27@ResolveAir@2

; 2123 : 	{
; 2124 : 		pkDefender->setMadeInterception(true);

	push	1
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?setMadeInterception@CvUnit@@QAEX_N@Z	; CvUnit::setMadeInterception

; 2125 : 		if(pkAttacker && pkTargetPlot)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	$LN7@ResolveAir@2
	cmp	DWORD PTR _pkTargetPlot$[ebp], 0
	je	$LN7@ResolveAir@2

; 2126 : 		{
; 2127 : 			//One Hit
; 2128 : 			if(pkDefender->GetCurrHitPoints() == GC.getMAX_HIT_POINTS() && pkAttacker->isHuman() && !GC.getGame().isGameMultiPlayer())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T226694[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?GetCurrHitPoints@CvUnit@@QBEHXZ	; CvUnit::GetCurrHitPoints
	cmp	eax, DWORD PTR $T226694[ebp]
	jne	SHORT $LN25@ResolveAir@2
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isHuman@CvUnit@@QBE_NXZ		; CvUnit::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN25@ResolveAir@2
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T226698[ebp], edx
	mov	ecx, DWORD PTR $T226698[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN25@ResolveAir@2

; 2129 : 			{
; 2130 : 				gDLL->UnlockAchievement(ACHIEVEMENT_ONEHITKILL);

	mov	ecx, DWORD PTR $T226702[ebp]
	mov	DWORD PTR tv144[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv144[ebp], edx
	push	60					; 0000003cH
	mov	eax, DWORD PTR tv144[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv144[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax
$LN25@ResolveAir@2:

; 2131 : 			}
; 2132 : 
; 2133 : 			pkDefender->changeDamage(iAttackerDamageInflicted, pkAttacker->getOwner());

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226711[ebp], edx
	push	0
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR $T226711[ebp]
	push	eax
	mov	ecx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::changeDamage

; 2134 : 			pkAttacker->changeDamage(iDefenderDamageInflicted, pkDefender->getOwner());

	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T226720[ebp], eax
	push	0
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR $T226720[ebp]
	push	ecx
	mov	edx, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::changeDamage

; 2135 : 
; 2136 : 			// Update experience for both sides.
; 2137 : 			pkDefender->changeExperience(
; 2138 : 			    kCombatInfo.getExperience(BATTLE_UNIT_DEFENDER),
; 2139 : 			    kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_DEFENDER),
; 2140 : 			    true,
; 2141 : 			    kCombatInfo.getInBorders(BATTLE_UNIT_DEFENDER),
; 2142 : 			    kCombatInfo.getUpdateGlobal(BATTLE_UNIT_DEFENDER));

	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getUpdateGlobal
	movzx	eax, al
	push	eax
	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getInBorders@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getInBorders
	movzx	ecx, al
	push	ecx
	push	1
	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getMaxExperienceAllowed
	push	eax
	push	1
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getExperience
	push	eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?changeExperience@CvUnit@@QAEXHH_N00@Z	; CvUnit::changeExperience

; 2143 : 
; 2144 : 			pkAttacker->changeExperience(
; 2145 : 			    kCombatInfo.getExperience(BATTLE_UNIT_ATTACKER),
; 2146 : 			    kCombatInfo.getMaxExperienceAllowed(BATTLE_UNIT_ATTACKER),
; 2147 : 			    true,
; 2148 : 			    kCombatInfo.getInBorders(BATTLE_UNIT_ATTACKER),
; 2149 : 			    kCombatInfo.getUpdateGlobal(BATTLE_UNIT_ATTACKER));

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getUpdateGlobal
	movzx	edx, al
	push	edx
	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getInBorders@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getInBorders
	movzx	eax, al
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getMaxExperienceAllowed
	push	eax
	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getExperience
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?changeExperience@CvUnit@@QAEXHH_N00@Z	; CvUnit::changeExperience

; 2150 : 
; 2151 : 			// Anyone eat it?
; 2152 : 			bAttackerDead = (pkAttacker->getDamage() >= GC.getMAX_HIT_POINTS());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T226724[ebp], ecx
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	xor	edx, edx
	cmp	eax, DWORD PTR $T226724[ebp]
	setge	dl
	mov	BYTE PTR _bAttackerDead$[ebp], dl

; 2153 : 			bDefenderDead = (pkDefender->getDamage() >= GC.getMAX_HIT_POINTS());

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T226728[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T226728[ebp]
	setge	cl
	mov	BYTE PTR _bDefenderDead$[ebp], cl

; 2154 : 
; 2155 : 			int iActivePlayerID = GC.getGame().getActivePlayer();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T226732[ebp], edx
	mov	ecx, DWORD PTR $T226732[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	mov	DWORD PTR _iActivePlayerID$221881[ebp], eax

; 2156 : 
; 2157 : 			//////////////////////////////////////////////////////////////////////////
; 2158 : 
; 2159 : #ifndef AUI_UNIT_COMBAT_FIX_AIR_SWEEP_VS_GROUND_INTERCEPTOR
; 2160 : 			// Ground AA interceptor
; 2161 : 			if(pkDefender->getDomainType() != DOMAIN_AIR)

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ ; CvUnit::getDomainType
	cmp	eax, 1
	je	$LN24@ResolveAir@2

; 2162 : 			{
; 2163 : 				// Attacker died
; 2164 : 				if(bAttackerDead)

	movzx	eax, BYTE PTR _bAttackerDead$[ebp]
	test	eax, eax
	je	$LN126@ResolveAir@2

; 2165 : 				{
; 2166 : 					auto_ptr<ICvUnit1> pAttacker = GC.WrapUnitPointer(pkAttacker);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T226621[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z ; CvGlobals::WrapUnitPointer
	mov	DWORD PTR $T226743[ebp], eax
	mov	eax, DWORD PTR $T226743[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Cvtptr$226741[ebp], ecx
	mov	edx, DWORD PTR __Cvtptr$226741[ebp]
	mov	DWORD PTR __Ans$226742[ebp], edx
	mov	eax, DWORD PTR $T226743[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR __Ans$226742[ebp]
	mov	DWORD PTR $T226622[ebp], ecx
	mov	edx, DWORD PTR $T226622[ebp]
	mov	DWORD PTR $T226748[ebp], edx
	mov	eax, DWORD PTR $T226748[ebp]
	mov	DWORD PTR __Ptr$226747[ebp], eax
	mov	DWORD PTR $T226748[ebp], 0
	mov	ecx, DWORD PTR __Ptr$226747[ebp]
	mov	DWORD PTR _pAttacker$221885[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T226621[ebp]
	mov	DWORD PTR $T226757[ebp], edx
	cmp	DWORD PTR $T226757[ebp], 0
	je	SHORT $LN81@ResolveAir@2
	mov	eax, DWORD PTR $T226757[ebp]
	mov	DWORD PTR _inst$226761[ebp], eax
	mov	ecx, DWORD PTR _inst$226761[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inst$226761[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
$LN81@ResolveAir@2:

; 2167 : 					gDLL->GameplayUnitDestroyedInCombat(pAttacker.get());

	mov	edx, DWORD PTR $T226766[ebp]
	mov	DWORD PTR tv241[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv241[ebp], eax
	mov	ecx, DWORD PTR _pAttacker$221885[ebp]
	push	ecx
	mov	edx, DWORD PTR tv241[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv241[ebp]
	mov	edx, DWORD PTR [eax+600]
	call	edx

; 2168 : 
; 2169 : 					if(iActivePlayerID == pkAttacker->getOwner())

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T226778[ebp], ecx
	mov	edx, DWORD PTR _iActivePlayerID$221881[ebp]
	cmp	edx, DWORD PTR $T226778[ebp]
	jne	$LN22@ResolveAir@2

; 2170 : 					{
; 2171 : 						strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_DIED_ATTACKING", pkAttacker->getNameKey(), pkDefender->getNameKey(), iAttackerDamageInflicted, 0);

	mov	DWORD PTR $T226623[ebp], 0
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226624[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226625[ebp], eax
	lea	eax, DWORD PTR $T226623[ebp]
	push	eax
	lea	ecx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T226624[ebp]
	push	edx
	lea	eax, DWORD PTR $T226625[ebp]
	push	eax
	push	OFFSET ??_C@_0CF@KKNLAFFL@TXT_KEY_MISC_YOU_UNIT_DIED_ATTAC@
	lea	ecx, DWORD PTR $T226626[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z ; GetLocalizedText<char const *,char const *,int,int>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv946[ebp], eax
	mov	edx, DWORD PTR tv946[ebp]
	mov	DWORD PTR $T226782[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR $T226782[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T226626[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2172 : 						GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitDefeatScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	mov	ecx, DWORD PTR $T226790[ebp]
	mov	DWORD PTR tv272[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv272[ebp], edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226794[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T226798[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226807[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T226794[ebp]
	push	eax
	mov	ecx, DWORD PTR $T226798[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T226807[ebp]
	push	edx
	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv272[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv272[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN22@ResolveAir@2:

; 2173 : 					}
; 2174 : 					if(iActivePlayerID == pkDefender->getOwner())

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226816[ebp], edx
	mov	eax, DWORD PTR _iActivePlayerID$221881[ebp]
	cmp	eax, DWORD PTR $T226816[ebp]
	jne	$LN21@ResolveAir@2

; 2175 : 					{
; 2176 : 						strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_KILLED_ENEMY_UNIT", pkDefender->getNameKey(), iAttackerDamageInflicted, 0, pkAttacker->getNameKey(), pkAttacker->getVisualCivAdjective(pkDefender->getTeam()));

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getVisualCivAdjective@CvUnit@@QBEPBDW4TeamTypes@@@Z ; CvUnit::getVisualCivAdjective
	mov	DWORD PTR $T226627[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226628[ebp], eax
	mov	DWORD PTR $T226629[ebp], 0
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226630[ebp], eax
	lea	ecx, DWORD PTR $T226627[ebp]
	push	ecx
	lea	edx, DWORD PTR $T226628[ebp]
	push	edx
	lea	eax, DWORD PTR $T226629[ebp]
	push	eax
	lea	ecx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T226630[ebp]
	push	edx
	push	OFFSET ??_C@_0CD@DLJIGMBM@TXT_KEY_MISC_YOU_KILLED_ENEMY_UN@
	lea	eax, DWORD PTR $T226631[ebp]
	push	eax
	call	??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z ; GetLocalizedText<char const *,int,int,char const *,char const *>
	add	esp, 28					; 0000001cH
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR tv66[ebp]
	mov	DWORD PTR $T226820[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR $T226820[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T226631[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2177 : 						GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitVictoryScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	mov	eax, DWORD PTR $T226828[ebp]
	mov	DWORD PTR tv325[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv325[ebp], ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226832[ebp], eax
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T226836[ebp], edx
	mov	eax, DWORD PTR _pkDefender$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T226845[ebp], ecx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR $T226832[ebp]
	push	edx
	mov	eax, DWORD PTR $T226836[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR $T226845[ebp]
	push	ecx
	mov	edx, DWORD PTR _uiParentEventID$[ebp]
	push	edx
	mov	eax, DWORD PTR tv325[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv325[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN21@ResolveAir@2:

; 2178 : 					}
; 2179 : #ifndef AUI_UNIT_TEST_PROMOTION_READY_MOVED
; 2180 : 					pkDefender->testPromotionReady();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?testPromotionReady@CvUnit@@QAEXXZ	; CvUnit::testPromotionReady

; 2181 : #endif
; 2182 : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _pAttacker$221885[ebp]
	mov	DWORD PTR $T226854[ebp], ecx
	cmp	DWORD PTR $T226854[ebp], 0
	je	SHORT $LN128@ResolveAir@2
	mov	edx, DWORD PTR $T226854[ebp]
	mov	DWORD PTR _inst$226858[ebp], edx
	mov	eax, DWORD PTR _inst$226858[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$226858[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN128@ResolveAir@2:
$LN126@ResolveAir@2:

; 2183 : 			}
; 2184 : 			// Air AA interceptor
; 2185 : 			else

	jmp	$LN7@ResolveAir@2
$LN24@ResolveAir@2:

; 2186 : #endif
; 2187 : 			{
; 2188 : 				// Attacker died
; 2189 : 				if(bAttackerDead)

	movzx	ecx, BYTE PTR _bAttackerDead$[ebp]
	test	ecx, ecx
	je	$LN19@ResolveAir@2

; 2190 : 				{
; 2191 : 					auto_ptr<ICvUnit1> pAttacker = GC.WrapUnitPointer(pkAttacker);

	mov	edx, DWORD PTR _pkAttacker$[ebp]
	push	edx
	lea	eax, DWORD PTR $T226632[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z ; CvGlobals::WrapUnitPointer
	mov	DWORD PTR $T226870[ebp], eax
	mov	ecx, DWORD PTR $T226870[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Cvtptr$226868[ebp], edx
	mov	eax, DWORD PTR __Cvtptr$226868[ebp]
	mov	DWORD PTR __Ans$226869[ebp], eax
	mov	ecx, DWORD PTR $T226870[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR __Ans$226869[ebp]
	mov	DWORD PTR $T226633[ebp], edx
	mov	eax, DWORD PTR $T226633[ebp]
	mov	DWORD PTR $T226875[ebp], eax
	mov	ecx, DWORD PTR $T226875[ebp]
	mov	DWORD PTR __Ptr$226874[ebp], ecx
	mov	DWORD PTR $T226875[ebp], 0
	mov	edx, DWORD PTR __Ptr$226874[ebp]
	mov	DWORD PTR _pAttacker$221902[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR $T226632[ebp]
	mov	DWORD PTR $T226884[ebp], eax
	cmp	DWORD PTR $T226884[ebp], 0
	je	SHORT $LN139@ResolveAir@2
	mov	ecx, DWORD PTR $T226884[ebp]
	mov	DWORD PTR _inst$226888[ebp], ecx
	mov	edx, DWORD PTR _inst$226888[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$226888[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN139@ResolveAir@2:

; 2192 : 					gDLL->GameplayUnitDestroyedInCombat(pAttacker.get());

	mov	eax, DWORD PTR $T226893[ebp]
	mov	DWORD PTR tv370[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv370[ebp], ecx
	mov	edx, DWORD PTR _pAttacker$221902[ebp]
	push	edx
	mov	eax, DWORD PTR tv370[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv370[ebp]
	mov	eax, DWORD PTR [edx+600]
	call	eax

; 2193 : 
; 2194 : 					if(iActivePlayerID == pkAttacker->getOwner())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T226905[ebp], edx
	mov	eax, DWORD PTR _iActivePlayerID$221881[ebp]
	cmp	eax, DWORD PTR $T226905[ebp]
	jne	$LN18@ResolveAir@2

; 2195 : 					{
; 2196 : 						strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_DIED_ATTACKING", pkAttacker->getNameKey(), pkDefender->getNameKey(), iAttackerDamageInflicted, 0);

	mov	DWORD PTR $T226634[ebp], 0
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226635[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226636[ebp], eax
	lea	ecx, DWORD PTR $T226634[ebp]
	push	ecx
	lea	edx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	edx
	lea	eax, DWORD PTR $T226635[ebp]
	push	eax
	lea	ecx, DWORD PTR $T226636[ebp]
	push	ecx
	push	OFFSET ??_C@_0CF@KKNLAFFL@TXT_KEY_MISC_YOU_UNIT_DIED_ATTAC@
	lea	edx, DWORD PTR $T226637[ebp]
	push	edx
	call	??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z ; GetLocalizedText<char const *,char const *,int,int>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv1253[ebp], eax
	mov	eax, DWORD PTR tv1253[ebp]
	mov	DWORD PTR $T226909[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR $T226909[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T226637[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2197 : 						GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitDefeatScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	mov	edx, DWORD PTR $T226917[ebp]
	mov	DWORD PTR tv401[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv401[ebp], eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226921[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T226925[ebp], ecx
	mov	edx, DWORD PTR _pkAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T226934[ebp], eax
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR $T226921[ebp]
	push	ecx
	mov	edx, DWORD PTR $T226925[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T226934[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv401[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv401[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN18@ResolveAir@2:

; 2198 : 					}
; 2199 : 					if(iActivePlayerID == pkDefender->getOwner())

	mov	eax, DWORD PTR _pkDefender$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T226943[ebp], ecx
	mov	edx, DWORD PTR _iActivePlayerID$221881[ebp]
	cmp	edx, DWORD PTR $T226943[ebp]
	jne	$LN17@ResolveAir@2

; 2200 : 					{
; 2201 : 						strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_KILLED_ENEMY_UNIT", pkDefender->getNameKey(), iAttackerDamageInflicted, 0, pkAttacker->getNameKey(), pkAttacker->getVisualCivAdjective(pkDefender->getTeam()));

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getVisualCivAdjective@CvUnit@@QBEPBDW4TeamTypes@@@Z ; CvUnit::getVisualCivAdjective
	mov	DWORD PTR $T226638[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226639[ebp], eax
	mov	DWORD PTR $T226640[ebp], 0
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226641[ebp], eax
	lea	eax, DWORD PTR $T226638[ebp]
	push	eax
	lea	ecx, DWORD PTR $T226639[ebp]
	push	ecx
	lea	edx, DWORD PTR $T226640[ebp]
	push	edx
	lea	eax, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T226641[ebp]
	push	ecx
	push	OFFSET ??_C@_0CD@DLJIGMBM@TXT_KEY_MISC_YOU_KILLED_ENEMY_UN@
	lea	edx, DWORD PTR $T226642[ebp]
	push	edx
	call	??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z ; GetLocalizedText<char const *,int,int,char const *,char const *>
	add	esp, 28					; 0000001cH
	mov	DWORD PTR tv1254[ebp], eax
	mov	eax, DWORD PTR tv1254[ebp]
	mov	DWORD PTR $T226947[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR $T226947[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T226642[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2202 : 						GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitVictoryScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	mov	edx, DWORD PTR $T226955[ebp]
	mov	DWORD PTR tv486[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv486[ebp], eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226959[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T226963[ebp], ecx
	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T226972[ebp], eax
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR $T226959[ebp]
	push	ecx
	mov	edx, DWORD PTR $T226963[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T226972[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv486[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv486[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN17@ResolveAir@2:

; 2203 : 					}
; 2204 : 
; 2205 : #ifndef AUI_UNIT_TEST_PROMOTION_READY_MOVED
; 2206 : 					pkDefender->testPromotionReady();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?testPromotionReady@CvUnit@@QAEXXZ	; CvUnit::testPromotionReady

; 2207 : #endif
; 2208 : 
; 2209 : 					ApplyPostCombatTraitEffects(pkDefender, pkAttacker);

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	push	ecx
	call	?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z ; CvUnitCombat::ApplyPostCombatTraitEffects
	add	esp, 8

; 2210 : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _pAttacker$221902[ebp]
	mov	DWORD PTR $T226981[ebp], edx
	cmp	DWORD PTR $T226981[ebp], 0
	je	SHORT $LN186@ResolveAir@2
	mov	eax, DWORD PTR $T226981[ebp]
	mov	DWORD PTR _inst$226985[ebp], eax
	mov	ecx, DWORD PTR _inst$226985[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inst$226985[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
$LN186@ResolveAir@2:

; 2211 : 				// Defender died
; 2212 : 				else if(bDefenderDead)

	jmp	$LN7@ResolveAir@2
$LN19@ResolveAir@2:
	movzx	edx, BYTE PTR _bDefenderDead$[ebp]
	test	edx, edx
	je	$LN15@ResolveAir@2

; 2213 : 				{
; 2214 : 					auto_ptr<ICvUnit1> pDefender = GC.WrapUnitPointer(pkDefender);

	mov	eax, DWORD PTR _pkDefender$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T226643[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z ; CvGlobals::WrapUnitPointer
	mov	DWORD PTR $T226997[ebp], eax
	mov	edx, DWORD PTR $T226997[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Cvtptr$226995[ebp], eax
	mov	ecx, DWORD PTR __Cvtptr$226995[ebp]
	mov	DWORD PTR __Ans$226996[ebp], ecx
	mov	edx, DWORD PTR $T226997[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR __Ans$226996[ebp]
	mov	DWORD PTR $T226644[ebp], eax
	mov	ecx, DWORD PTR $T226644[ebp]
	mov	DWORD PTR $T227002[ebp], ecx
	mov	edx, DWORD PTR $T227002[ebp]
	mov	DWORD PTR __Ptr$227001[ebp], edx
	mov	DWORD PTR $T227002[ebp], 0
	mov	eax, DWORD PTR __Ptr$227001[ebp]
	mov	DWORD PTR _pDefender$221919[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR $T226643[ebp]
	mov	DWORD PTR $T227011[ebp], ecx
	cmp	DWORD PTR $T227011[ebp], 0
	je	SHORT $LN197@ResolveAir@2
	mov	edx, DWORD PTR $T227011[ebp]
	mov	DWORD PTR _inst$227015[ebp], edx
	mov	eax, DWORD PTR _inst$227015[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$227015[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN197@ResolveAir@2:

; 2215 : 					gDLL->GameplayUnitDestroyedInCombat(pDefender.get());

	mov	ecx, DWORD PTR $T227020[ebp]
	mov	DWORD PTR tv533[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv533[ebp], edx
	mov	eax, DWORD PTR _pDefender$221919[ebp]
	push	eax
	mov	ecx, DWORD PTR tv533[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv533[ebp]
	mov	eax, DWORD PTR [edx+600]
	call	eax

; 2216 : 
; 2217 : 					if(iActivePlayerID == pkAttacker->getOwner())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T227032[ebp], edx
	mov	eax, DWORD PTR _iActivePlayerID$221881[ebp]
	cmp	eax, DWORD PTR $T227032[ebp]
	jne	$LN14@ResolveAir@2

; 2218 : 					{
; 2219 : 						strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_DESTROYED_ENEMY", pkAttacker->getNameKey(), iDefenderDamageInflicted, pkDefender->getNameKey());

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226645[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226646[ebp], eax
	lea	ecx, DWORD PTR $T226645[ebp]
	push	ecx
	lea	edx, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	edx
	lea	eax, DWORD PTR $T226646[ebp]
	push	eax
	push	OFFSET ??_C@_0CG@MAFGHNID@TXT_KEY_MISC_YOU_UNIT_DESTROYED_@
	lea	ecx, DWORD PTR $T226647[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z ; GetLocalizedText<char const *,int,char const *>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv1255[ebp], eax
	mov	edx, DWORD PTR tv1255[ebp]
	mov	DWORD PTR $T227036[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	eax, DWORD PTR $T227036[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T226647[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2220 : 						GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitVictoryScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	mov	ecx, DWORD PTR $T227044[ebp]
	mov	DWORD PTR tv563[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv563[ebp], edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T227048[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T227052[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T227061[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T227048[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227052[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T227061[ebp]
	push	edx
	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv563[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv563[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN14@ResolveAir@2:

; 2221 : 					}
; 2222 : 					if(iActivePlayerID == pkDefender->getOwner())

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T227070[ebp], edx
	mov	eax, DWORD PTR _iActivePlayerID$221881[ebp]
	cmp	eax, DWORD PTR $T227070[ebp]
	jne	$LN13@ResolveAir@2

; 2223 : 					{
; 2224 : 						if(pkAttacker->getVisualOwner(pkDefender->getTeam()) != pkAttacker->getOwner())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T227079[ebp], edx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getVisualOwner@CvUnit@@QBE?AW4PlayerTypes@@W4TeamTypes@@@Z ; CvUnit::getVisualOwner
	cmp	eax, DWORD PTR $T227079[ebp]
	je	SHORT $LN12@ResolveAir@2

; 2225 : 						{
; 2226 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_WAS_DESTROYED_UNKNOWN", pkDefender->getNameKey(), pkAttacker->getNameKey(), iDefenderDamageInflicted);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226648[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226649[ebp], eax
	lea	eax, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T226648[ebp]
	push	ecx
	lea	edx, DWORD PTR $T226649[ebp]
	push	edx
	push	OFFSET ??_C@_0CM@LNPONPCG@TXT_KEY_MISC_YOU_UNIT_WAS_DESTRO@
	lea	eax, DWORD PTR $T226650[ebp]
	push	eax
	call	??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z ; GetLocalizedText<char const *,char const *,int>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv1256[ebp], eax
	mov	ecx, DWORD PTR tv1256[ebp]
	mov	DWORD PTR $T227083[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	edx, DWORD PTR $T227083[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T226650[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2227 : 						}
; 2228 : 						else

	jmp	$LN11@ResolveAir@2
$LN12@ResolveAir@2:

; 2229 : 						{
; 2230 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_WAS_DESTROYED", pkDefender->getNameKey(), pkAttacker->getNameKey(), pkAttacker->getVisualCivAdjective(pkDefender->getTeam()), iDefenderDamageInflicted);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getVisualCivAdjective@CvUnit@@QBEPBDW4TeamTypes@@@Z ; CvUnit::getVisualCivAdjective
	mov	DWORD PTR $T226651[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226652[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226653[ebp], eax
	lea	eax, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T226651[ebp]
	push	ecx
	lea	edx, DWORD PTR $T226652[ebp]
	push	edx
	lea	eax, DWORD PTR $T226653[ebp]
	push	eax
	push	OFFSET ??_C@_0CE@NGODCANA@TXT_KEY_MISC_YOU_UNIT_WAS_DESTRO@
	lea	ecx, DWORD PTR $T226654[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z ; GetLocalizedText<char const *,char const *,char const *,int>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv1257[ebp], eax
	mov	edx, DWORD PTR tv1257[ebp]
	mov	DWORD PTR $T227091[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	eax, DWORD PTR $T227091[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T226654[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN11@ResolveAir@2:

; 2231 : 						}
; 2232 : 						GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*,GC.getEraInfo(GC.getGame().getCurrentEra())->getAudioUnitDefeatScript(), MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	mov	ecx, DWORD PTR $T227099[ebp]
	mov	DWORD PTR tv637[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv637[ebp], edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T227103[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T227107[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T227116[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T227103[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227107[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T227116[ebp]
	push	edx
	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv637[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv637[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN13@ResolveAir@2:

; 2233 : 					}
; 2234 : 
; 2235 : 					CvNotifications* pNotification = GET_PLAYER(pkDefender->getOwner()).GetNotifications();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T227125[ebp], edx
	mov	eax, DWORD PTR $T227125[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227129[ebp], eax
	mov	ecx, DWORD PTR $T227129[ebp]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotification$221936[ebp], eax

; 2236 : 					if(pNotification)

	cmp	DWORD PTR _pNotification$221936[ebp], 0
	je	$LN10@ResolveAir@2

; 2237 : 					{
; 2238 : 						if(pkAttacker->getVisualOwner(pkDefender->getTeam()) != pkAttacker->getOwner())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T227138[ebp], edx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getVisualOwner@CvUnit@@QBE?AW4PlayerTypes@@W4TeamTypes@@@Z ; CvUnit::getVisualOwner
	cmp	eax, DWORD PTR $T227138[ebp]
	je	SHORT $LN9@ResolveAir@2

; 2239 : 						{
; 2240 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_WAS_DESTROYED_UNKNOWN", pkDefender->getNameKey(), pkAttacker->getNameKey(), iDefenderDamageInflicted);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226655[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226656[ebp], eax
	lea	eax, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T226655[ebp]
	push	ecx
	lea	edx, DWORD PTR $T226656[ebp]
	push	edx
	push	OFFSET ??_C@_0CM@LNPONPCG@TXT_KEY_MISC_YOU_UNIT_WAS_DESTRO@
	lea	eax, DWORD PTR $T226657[ebp]
	push	eax
	call	??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z ; GetLocalizedText<char const *,char const *,int>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv1258[ebp], eax
	mov	ecx, DWORD PTR tv1258[ebp]
	mov	DWORD PTR $T227142[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	edx, DWORD PTR $T227142[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T226657[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2241 : 						}
; 2242 : 						else

	jmp	$LN8@ResolveAir@2
$LN9@ResolveAir@2:

; 2243 : 						{
; 2244 : 							strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_WAS_DESTROYED", pkDefender->getNameKey(), pkAttacker->getNameKey(), pkAttacker->getVisualCivAdjective(pkDefender->getTeam()), iDefenderDamageInflicted);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getVisualCivAdjective@CvUnit@@QBEPBDW4TeamTypes@@@Z ; CvUnit::getVisualCivAdjective
	mov	DWORD PTR $T226658[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226659[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226660[ebp], eax
	lea	eax, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T226658[ebp]
	push	ecx
	lea	edx, DWORD PTR $T226659[ebp]
	push	edx
	lea	eax, DWORD PTR $T226660[ebp]
	push	eax
	push	OFFSET ??_C@_0CE@NGODCANA@TXT_KEY_MISC_YOU_UNIT_WAS_DESTRO@
	lea	ecx, DWORD PTR $T226661[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z ; GetLocalizedText<char const *,char const *,char const *,int>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv1259[ebp], eax
	mov	edx, DWORD PTR tv1259[ebp]
	mov	DWORD PTR $T227150[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	eax, DWORD PTR $T227150[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T226661[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN8@ResolveAir@2:

; 2245 : 						}
; 2246 : 						Localization::String strSummary = Localization::Lookup("TXT_KEY_UNIT_LOST");

	push	OFFSET ??_C@_0BC@DCAPLCAP@TXT_KEY_UNIT_LOST?$AA@
	lea	ecx, DWORD PTR _strSummary$221947[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH

; 2247 : 						pNotification->Add(NOTIFICATION_UNIT_DIED, strBuffer, strSummary.toUTF8(), pkDefender->getX(), pkDefender->getY(), (int) pkDefender->getUnitType(), pkDefender->getOwner());

	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T227163[ebp], eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR $T227172[ebp], edx
	mov	eax, DWORD PTR _pkDefender$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T227181[ebp], ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T227185[ebp], eax
	mov	edx, DWORD PTR $T227163[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	mov	eax, DWORD PTR $T227172[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227181[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strSummary$221947[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	edx, DWORD PTR $T227185[ebp]
	push	edx
	push	-16309126				; ff07247aH
	mov	ecx, DWORD PTR _pNotification$221936[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2248 : 					}

	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _strSummary$221947[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN10@ResolveAir@2:

; 2249 : 
; 2250 : #ifndef AUI_UNIT_TEST_PROMOTION_READY_MOVED
; 2251 : 					pkAttacker->testPromotionReady();

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?testPromotionReady@CvUnit@@QAEXXZ	; CvUnit::testPromotionReady

; 2252 : #endif
; 2253 : 
; 2254 : 					ApplyPostCombatTraitEffects(pkAttacker, pkDefender);

	mov	eax, DWORD PTR _pkDefender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	push	ecx
	call	?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z ; CvUnitCombat::ApplyPostCombatTraitEffects
	add	esp, 8

; 2255 : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _pDefender$221919[ebp]
	mov	DWORD PTR $T227195[ebp], edx
	cmp	DWORD PTR $T227195[ebp], 0
	je	SHORT $LN287@ResolveAir@2
	mov	eax, DWORD PTR $T227195[ebp]
	mov	DWORD PTR _inst$227198[ebp], eax
	mov	ecx, DWORD PTR _inst$227198[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inst$227198[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
$LN287@ResolveAir@2:

; 2256 : 				// Nobody died
; 2257 : 				else

	jmp	$LN7@ResolveAir@2
$LN15@ResolveAir@2:

; 2258 : 				{
; 2259 : 					if(iActivePlayerID == pkAttacker->getOwner())

	mov	edx, DWORD PTR _pkAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T227208[ebp], eax
	mov	ecx, DWORD PTR _iActivePlayerID$221881[ebp]
	cmp	ecx, DWORD PTR $T227208[ebp]
	jne	$LN6@ResolveAir@2

; 2260 : 					{
; 2261 : 						strBuffer = GetLocalizedText("TXT_KEY_MISC_YOU_UNIT_WITHDRAW", pkAttacker->getNameKey(), iDefenderDamageInflicted, pkDefender->getNameKey(), iAttackerDamageInflicted);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226662[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226663[ebp], eax
	lea	edx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	edx
	lea	eax, DWORD PTR $T226662[ebp]
	push	eax
	lea	ecx, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T226663[ebp]
	push	edx
	push	OFFSET ??_C@_0BP@HNPBMJOC@TXT_KEY_MISC_YOU_UNIT_WITHDRAW?$AA@
	lea	eax, DWORD PTR $T226664[ebp]
	push	eax
	call	??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z ; GetLocalizedText<char const *,int,char const *,int>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv693[ebp], eax
	mov	ecx, DWORD PTR tv693[ebp]
	mov	DWORD PTR $T227212[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	edx, DWORD PTR $T227212[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T226664[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2262 : 						GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkAttacker->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_OUR_WITHDRAWL", MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_GREEN"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	mov	eax, DWORD PTR $T227220[ebp]
	mov	DWORD PTR tv764[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv764[ebp], ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T227224[ebp], eax
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T227228[ebp], edx
	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T227237[ebp], ecx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR $T227224[ebp]
	push	edx
	mov	eax, DWORD PTR $T227228[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR $T227237[ebp]
	push	ecx
	mov	edx, DWORD PTR _uiParentEventID$[ebp]
	push	edx
	mov	eax, DWORD PTR tv764[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv764[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN6@ResolveAir@2:

; 2263 : 					}
; 2264 : 					if(iActivePlayerID == pkDefender->getOwner())

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T227246[ebp], edx
	mov	eax, DWORD PTR _iActivePlayerID$221881[ebp]
	cmp	eax, DWORD PTR $T227246[ebp]
	jne	$LN5@ResolveAir@2

; 2265 : 					{
; 2266 : 						strBuffer = GetLocalizedText("TXT_KEY_MISC_ENEMY_UNIT_WITHDRAW", pkAttacker->getNameKey(), iDefenderDamageInflicted, pkDefender->getNameKey(), iAttackerDamageInflicted);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226665[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	mov	DWORD PTR $T226666[ebp], eax
	lea	ecx, DWORD PTR _iAttackerDamageInflicted$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T226665[ebp]
	push	edx
	lea	eax, DWORD PTR _iDefenderDamageInflicted$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T226666[ebp]
	push	ecx
	push	OFFSET ??_C@_0CB@ENHCCJB@TXT_KEY_MISC_ENEMY_UNIT_WITHDRAW@
	lea	edx, DWORD PTR $T226667[ebp]
	push	edx
	call	??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z ; GetLocalizedText<char const *,int,char const *,int>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv1260[ebp], eax
	mov	eax, DWORD PTR tv1260[ebp]
	mov	DWORD PTR $T227250[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	ecx, DWORD PTR $T227250[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T226667[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2267 : 						GC.GetEngineUserInterface()->AddMessage(uiParentEventID, pkDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer/*, "AS2D_THEIR_WITHDRAWL", MESSAGE_TYPE_INFO, NULL, (ColorTypes)GC.getInfoTypeForString("COLOR_RED"), pkTargetPlot->getX(), pkTargetPlot->getY()*/);

	mov	edx, DWORD PTR $T227258[ebp]
	mov	DWORD PTR tv811[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv811[ebp], eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T227262[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T227266[ebp], ecx
	mov	edx, DWORD PTR _pkDefender$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T227275[ebp], eax
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR $T227262[ebp]
	push	ecx
	mov	edx, DWORD PTR $T227266[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T227275[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv811[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv811[ebp]
	mov	edx, DWORD PTR [eax+160]
	call	edx
$LN5@ResolveAir@2:

; 2268 : 					}
; 2269 : 
; 2270 : #ifndef AUI_UNIT_TEST_PROMOTION_READY_MOVED
; 2271 : 					pkDefender->testPromotionReady();

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?testPromotionReady@CvUnit@@QAEXXZ	; CvUnit::testPromotionReady

; 2272 : 					pkAttacker->testPromotionReady();

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?testPromotionReady@CvUnit@@QAEXXZ	; CvUnit::testPromotionReady
$LN7@ResolveAir@2:

; 2273 : #endif
; 2274 : 				}
; 2275 : 			}
; 2276 : 		}
; 2277 : 	}
; 2278 : 	else

	jmp	SHORT $LN4@ResolveAir@2
$LN27@ResolveAir@2:

; 2279 : 		bDefenderDead = true;

	mov	BYTE PTR _bDefenderDead$[ebp], 1
$LN4@ResolveAir@2:

; 2280 : 
; 2281 : 	// Clean up some stuff
; 2282 : 	if(pkDefender)

	cmp	DWORD PTR _pkDefender$[ebp], 0
	je	SHORT $LN3@ResolveAir@2

; 2283 : 	{
; 2284 : 		pkDefender->setCombatUnit(NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 2285 : 		pkDefender->ClearMissionQueue();

	push	1
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	call	?ClearMissionQueue@CvUnit@@QAEXH@Z	; CvUnit::ClearMissionQueue
$LN3@ResolveAir@2:

; 2286 : #ifdef NQM_UNIT_COMBAT_WITHDRAW_INTERCEPT_AFTER_SWEEP_IF_AT_OR_BELOW_TARGET_HEALTH
; 2287 : 		if (pkDefender->GetActivityType() == ACTIVITY_INTERCEPT)
; 2288 : 		{
; 2289 : 			int iEffectiveDefenderHP = pkDefender->GetCurrHitPoints();
; 2290 : 			if (pkDefender->isAlwaysHeal() && pkDefender->isOutOfInterceptions() && !GET_PLAYER(pkDefender->getOwner()).isEndTurn() && pkDefender->canHeal(pkDefender->plot()))
; 2291 : 				iEffectiveDefenderHP += pkDefender->healRate(pkDefender->plot());
; 2292 : 			if (iEffectiveDefenderHP * NQM_UNIT_COMBAT_WITHDRAW_INTERCEPT_AFTER_SWEEP_IF_AT_OR_BELOW_TARGET_HEALTH <= GC.getMAX_HIT_POINTS() * 100)
; 2293 : 				pkDefender->SetActivityType(ACTIVITY_AWAKE);
; 2294 : 		}
; 2295 : #endif
; 2296 : 	}
; 2297 : 
; 2298 : 	if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	$LN2@ResolveAir@2

; 2299 : 	{
; 2300 : 		pkAttacker->setCombatUnit(NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 2301 : 		pkAttacker->ClearMissionQueue(GetPostCombatDelay());

	call	?GetPostCombatDelay@@YAHXZ		; GetPostCombatDelay
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?ClearMissionQueue@CvUnit@@QAEXH@Z	; CvUnit::ClearMissionQueue

; 2302 : 
; 2303 : 		// Spend a move for this attack
; 2304 : 		pkAttacker->changeMoves(-GC.getMOVE_DENOMINATOR());

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6236
	mov	DWORD PTR $T227279[ebp], eax
	mov	ecx, DWORD PTR $T227279[ebp]
	neg	ecx
	push	ecx
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?changeMoves@CvUnit@@QAEXH@Z		; CvUnit::changeMoves

; 2305 : 
; 2306 : 		// Can't move or attack again
; 2307 : #ifdef NQ_UNIT_TURN_ENDS_ON_FINAL_ATTACK
; 2308 : 		if(!pkAttacker->canMoveAfterAttacking() && pkAttacker->isOutOfAttacks())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?canMoveAfterAttacking@CvUnit@@QBE_NXZ	; CvUnit::canMoveAfterAttacking
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@ResolveAir@2
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isOutOfAttacks@CvUnit@@QBE_NXZ		; CvUnit::isOutOfAttacks
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@ResolveAir@2

; 2309 : #else
; 2310 : 		if(!pkAttacker->canMoveAfterAttacking())
; 2311 : #endif
; 2312 : 		{
; 2313 : 			pkAttacker->finishMoves();

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?finishMoves@CvUnit@@QAEXXZ		; CvUnit::finishMoves
$LN1@ResolveAir@2:

; 2314 : 		}
; 2315 : 
; 2316 : 		// Report that combat is over in case we want to queue another attack
; 2317 : 		GET_PLAYER(pkAttacker->getOwner()).GetTacticalAI()->CombatResolved(pkAttacker, bDefenderDead);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T227288[ebp], edx
	mov	eax, DWORD PTR $T227288[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227292[ebp], eax
	push	0
	movzx	ecx, BYTE PTR _bDefenderDead$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T227292[ebp]
	call	?GetTacticalAI@CvPlayer@@QBEPAVCvTacticalAI@@XZ ; CvPlayer::GetTacticalAI
	mov	ecx, eax
	call	?CombatResolved@CvTacticalAI@@QAEXPAX_N1@Z ; CvTacticalAI::CombatResolved
$LN2@ResolveAir@2:

; 2318 : 	}
; 2319 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$0:
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$2:
	lea	ecx, DWORD PTR _pAttacker$221885[ebp]
	jmp	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ	; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$3:
	lea	ecx, DWORD PTR $T226626[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$4:
	lea	ecx, DWORD PTR $T226631[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$6:
	lea	ecx, DWORD PTR _pAttacker$221902[ebp]
	jmp	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ	; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$7:
	lea	ecx, DWORD PTR $T226637[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$8:
	lea	ecx, DWORD PTR $T226642[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$10:
	lea	ecx, DWORD PTR _pDefender$221919[ebp]
	jmp	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ	; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$11:
	lea	ecx, DWORD PTR $T226647[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$12:
	lea	ecx, DWORD PTR $T226650[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$13:
	lea	ecx, DWORD PTR $T226654[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$14:
	lea	ecx, DWORD PTR $T226657[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$15:
	lea	ecx, DWORD PTR $T226661[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$16:
	lea	ecx, DWORD PTR _strSummary$221947[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$17:
	lea	ecx, DWORD PTR $T226664[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$18:
	lea	ecx, DWORD PTR $T226667[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ENDP ; CvUnitCombat::ResolveAirSweep
PUBLIC	?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z ; CvUnitCombat::GenerateNuclearExplosionDamage
PUBLIC	??_C@_0BC@LAAFACEA@NuclearDetonation?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GenerateNuclearCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z ; CvUnitCombat::GenerateNuclearCombatInfo
EXTRN	?setDamageMemberCount@CvCombatInfo@@QAEXH@Z:PROC ; CvCombatInfo::setDamageMemberCount
EXTRN	?getDamageMembers@CvCombatInfo@@QAEPAUCvCombatMemberEntry@@XZ:PROC ; CvCombatInfo::getDamageMembers
EXTRN	?getMaxDamageMemberCount@CvCombatInfo@@QBEHXZ:PROC ; CvCombatInfo::getMaxDamageMemberCount
EXTRN	?setAttackNuclearLevel@CvCombatInfo@@QAEXH@Z:PROC ; CvCombatInfo::setAttackNuclearLevel
EXTRN	?GetNukeDamageLevel@CvUnit@@QBEHXZ:PROC		; CvUnit::GetNukeDamageLevel
EXTRN	?setReconPlot@CvUnit@@QAEXPAVCvPlot@@@Z:PROC	; CvUnit::setReconPlot
EXTRN	??1CvLuaArgsHandle@@QAE@XZ:PROC			; CvLuaArgsHandle::~CvLuaArgsHandle
EXTRN	?CallHook@LuaSupport@@YA_NPAVICvEngineScriptSystem1@@PBDPAVICvEngineScriptSystemArgs1@@AA_N@Z:PROC ; LuaSupport::CallHook
EXTRN	??0CvLuaArgsHandle@@QAE@XZ:PROC			; CvLuaArgsHandle::CvLuaArgsHandle
EXTRN	?declareWar@CvTeam@@QAEXW4TeamTypes@@_N@Z:PROC	; CvTeam::declareWar
EXTRN	?m_aTeams@CvTeam@@1PAV1@A:DWORD			; CvTeam::m_aTeams
EXTRN	?isEnemy@CvUnit@@QBE_NW4TeamTypes@@PBVCvPlot@@@Z:PROC ; CvUnit::isEnemy
EXTRN	?isNukeVictim@CvUnit@@QBE_NPBVCvPlot@@W4TeamTypes@@@Z:PROC ; CvUnit::isNukeVictim
;	COMDAT ??_C@_0BC@LAAFACEA@NuclearDetonation?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BC@LAAFACEA@NuclearDetonation?$AA@ DB 'NuclearDetonation', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GenerateNuclearCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GenerateNuclearCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GenerateNuclearCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z$1
__ehfuncinfo$?GenerateNuclearCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GenerateNuclearCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?GenerateNuclearCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z
_TEXT	SEGMENT
tv280 = -208						; size = 4
tv187 = -204						; size = 4
tv180 = -200						; size = 4
tv171 = -196						; size = 4
tv162 = -192						; size = 4
tv153 = -188						; size = 4
tv142 = -184						; size = 4
$T227398 = -180						; size = 4
$T227394 = -176						; size = 4
$T227385 = -172						; size = 4
$T227381 = -168						; size = 4
$T227372 = -164						; size = 4
$T227347 = -160						; size = 4
$T227335 = -156						; size = 4
$T227331 = -152						; size = 4
_playerID$227320 = -148					; size = 4
_bResult$221990 = -141					; size = 1
_args$221989 = -140					; size = 4
_bBystander$ = -133					; size = 1
_iDamageMembers$ = -132					; size = 4
_strBuffer$ = -128					; size = 28
_bWar$ = -97						; size = 1
_iI$ = -96						; size = 4
_iPlotTeam$ = -92					; size = 4
_pkScriptSystem$ = -88					; size = 4
_abTeamsAffected$ = -84					; size = 64
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kAttacker$ = 8						; size = 4
_plot$ = 12						; size = 4
_pkCombatInfo$ = 16					; size = 4
?GenerateNuclearCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z PROC ; CvUnitCombat::GenerateNuclearCombatInfo, COMDAT

; 2332 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GenerateNuclearCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 196				; 000000c4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2333 : 	pkCombatInfo->setUnit(BATTLE_UNIT_ATTACKER, &kAttacker);

	mov	eax, DWORD PTR _kAttacker$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvCombatInfo::setUnit

; 2334 : 	pkCombatInfo->setUnit(BATTLE_UNIT_DEFENDER, NULL);

	push	0
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvCombatInfo::setUnit

; 2335 : 	pkCombatInfo->setPlot(&plot);

	mov	ecx, DWORD PTR _plot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setPlot@CvCombatInfo@@QAEXPAVCvPlot@@@Z ; CvCombatInfo::setPlot

; 2336 : 
; 2337 : 	//////////////////////////////////////////////////////////////////////
; 2338 : 
; 2339 : 	CvString strBuffer;

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2340 : 	bool abTeamsAffected[MAX_TEAMS];
; 2341 : 	int iI;
; 2342 : 	for(iI = 0; iI < MAX_TEAMS; iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN11@GenerateNu
$LN10@GenerateNu:
	mov	edx, DWORD PTR _iI$[ebp]
	add	edx, 1
	mov	DWORD PTR _iI$[ebp], edx
$LN11@GenerateNu:
	cmp	DWORD PTR _iI$[ebp], 64			; 00000040H
	jge	SHORT $LN23@GenerateNu

; 2343 : 	{
; 2344 : 		abTeamsAffected[iI] = kAttacker.isNukeVictim(&plot, ((TeamTypes)iI));

	mov	eax, DWORD PTR _iI$[ebp]
	push	eax
	mov	ecx, DWORD PTR _plot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isNukeVictim@CvUnit@@QBE_NPBVCvPlot@@W4TeamTypes@@@Z ; CvUnit::isNukeVictim
	mov	edx, DWORD PTR _iI$[ebp]
	mov	BYTE PTR _abTeamsAffected$[ebp+edx], al

; 2345 : 	}

	jmp	SHORT $LN10@GenerateNu

; 2346 : 
; 2347 : 	int iPlotTeam = plot.getTeam();

$LN23@GenerateNu:
	mov	eax, DWORD PTR _plot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR _playerID$227320[ebp], ecx
	cmp	DWORD PTR _playerID$227320[ebp], -1
	je	SHORT $LN20@GenerateNu
	mov	edx, DWORD PTR _playerID$227320[ebp]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR _iPlotTeam$[ebp], eax
	jmp	SHORT $LN21@GenerateNu
	jmp	SHORT $LN21@GenerateNu
$LN20@GenerateNu:
	mov	DWORD PTR _iPlotTeam$[ebp], -1
$LN21@GenerateNu:

; 2348 : 	bool bWar = false;

	mov	BYTE PTR _bWar$[ebp], 0

; 2349 : 	bool bBystander = false;

	mov	BYTE PTR _bBystander$[ebp], 0

; 2350 : 
; 2351 : 	for(iI = 0; iI < MAX_TEAMS; iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN8@GenerateNu
$LN7@GenerateNu:
	mov	eax, DWORD PTR _iI$[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$[ebp], eax
$LN8@GenerateNu:
	cmp	DWORD PTR _iI$[ebp], 64			; 00000040H
	jge	SHORT $LN6@GenerateNu

; 2352 : 	{
; 2353 : 		if(abTeamsAffected[iI])

	mov	ecx, DWORD PTR _iI$[ebp]
	movzx	edx, BYTE PTR _abTeamsAffected$[ebp+ecx]
	test	edx, edx
	je	SHORT $LN5@GenerateNu

; 2354 : 		{
; 2355 : 			if(!kAttacker.isEnemy((TeamTypes)iI))

	push	0
	mov	eax, DWORD PTR _iI$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isEnemy@CvUnit@@QBE_NW4TeamTypes@@PBVCvPlot@@@Z ; CvUnit::isEnemy
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN5@GenerateNu

; 2356 : 			{
; 2357 : 				GET_TEAM(kAttacker.getTeam()).declareWar(((TeamTypes)iI));

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	mov	DWORD PTR $T227331[ebp], eax
	push	0
	mov	edx, DWORD PTR _iI$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T227331[ebp]
	imul	ecx, 2984				; 00000ba8H
	add	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	call	?declareWar@CvTeam@@QAEXW4TeamTypes@@_N@Z ; CvTeam::declareWar

; 2358 : 
; 2359 : 				if (iPlotTeam == iI) 

	mov	eax, DWORD PTR _iPlotTeam$[ebp]
	cmp	eax, DWORD PTR _iI$[ebp]
	jne	SHORT $LN3@GenerateNu

; 2360 : 				{
; 2361 : 					bWar = true;

	mov	BYTE PTR _bWar$[ebp], 1

; 2362 : 				} 
; 2363 : 				else 

	jmp	SHORT $LN5@GenerateNu
$LN3@GenerateNu:

; 2364 : 				{
; 2365 : 					bBystander = true;

	mov	BYTE PTR _bBystander$[ebp], 1
$LN5@GenerateNu:

; 2366 : 				}
; 2367 : 			}
; 2368 : 		}
; 2369 : 	}

	jmp	SHORT $LN7@GenerateNu
$LN6@GenerateNu:

; 2370 : 
; 2371 : 	ICvEngineScriptSystem1* pkScriptSystem = gDLL->GetScriptSystem();

	mov	ecx, DWORD PTR $T227335[ebp]
	mov	DWORD PTR tv142[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv142[ebp], edx
	mov	eax, DWORD PTR tv142[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv142[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pkScriptSystem$[ebp], eax

; 2372 : 	if (pkScriptSystem) 

	cmp	DWORD PTR _pkScriptSystem$[ebp], 0
	je	$LN1@GenerateNu

; 2373 : 	{	
; 2374 : 		CvLuaArgsHandle args;

	lea	ecx, DWORD PTR _args$221989[ebp]
	call	??0CvLuaArgsHandle@@QAE@XZ		; CvLuaArgsHandle::CvLuaArgsHandle
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 2375 : 
; 2376 : 		args->Push(kAttacker.getOwner());

	mov	ecx, DWORD PTR _args$221989[ebp]
	mov	DWORD PTR tv153[ebp], ecx
	mov	edx, DWORD PTR _kAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T227347[ebp], eax
	mov	ecx, DWORD PTR $T227347[ebp]
	push	ecx
	mov	edx, DWORD PTR tv153[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv153[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx

; 2377 : 		args->Push(plot.getX());

	mov	eax, DWORD PTR _args$221989[ebp]
	mov	DWORD PTR tv162[ebp], eax
	mov	ecx, DWORD PTR _plot$[ebp]
	movsx	edx, WORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR tv162[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv162[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 2378 : 		args->Push(plot.getY());

	mov	ecx, DWORD PTR _args$221989[ebp]
	mov	DWORD PTR tv171[ebp], ecx
	mov	edx, DWORD PTR _plot$[ebp]
	movsx	eax, WORD PTR [edx+2]
	push	eax
	mov	ecx, DWORD PTR tv171[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv171[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 2379 : 		args->Push(bWar);

	mov	ecx, DWORD PTR _args$221989[ebp]
	mov	DWORD PTR tv180[ebp], ecx
	movzx	edx, BYTE PTR _bWar$[ebp]
	push	edx
	mov	eax, DWORD PTR tv180[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv180[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 2380 : 		args->Push(bBystander);

	mov	ecx, DWORD PTR _args$221989[ebp]
	mov	DWORD PTR tv187[ebp], ecx
	movzx	edx, BYTE PTR _bBystander$[ebp]
	push	edx
	mov	eax, DWORD PTR tv187[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv187[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 2381 : 
; 2382 : 		bool bResult;
; 2383 : 		LuaSupport::CallHook(pkScriptSystem, "NuclearDetonation", args.get(), bResult);

	lea	ecx, DWORD PTR _bResult$221990[ebp]
	push	ecx
	mov	edx, DWORD PTR _args$221989[ebp]
	push	edx
	push	OFFSET ??_C@_0BC@LAAFACEA@NuclearDetonation?$AA@
	mov	eax, DWORD PTR _pkScriptSystem$[ebp]
	push	eax
	call	?CallHook@LuaSupport@@YA_NPAVICvEngineScriptSystem1@@PBDPAVICvEngineScriptSystemArgs1@@AA_N@Z ; LuaSupport::CallHook
	add	esp, 16					; 00000010H

; 2384 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _args$221989[ebp]
	call	??1CvLuaArgsHandle@@QAE@XZ		; CvLuaArgsHandle::~CvLuaArgsHandle
$LN1@GenerateNu:

; 2385 : 
; 2386 : 	kAttacker.setReconPlot(&plot);

	mov	ecx, DWORD PTR _plot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setReconPlot@CvUnit@@QAEXPAVCvPlot@@@Z	; CvUnit::setReconPlot

; 2387 : 
; 2388 : 	//////////////////////////////////////////////////////////////////////
; 2389 : 
; 2390 : 	pkCombatInfo->setFinalDamage(BATTLE_UNIT_ATTACKER, 0);		// Total damage to the unit

	push	0
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFinalDamage

; 2391 : 	pkCombatInfo->setDamageInflicted(BATTLE_UNIT_ATTACKER, 0);	// Damage inflicted this round

	push	0
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted

; 2392 : 	pkCombatInfo->setFinalDamage(BATTLE_UNIT_DEFENDER, 0);		// Total damage to the unit

	push	0
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFinalDamage

; 2393 : 	pkCombatInfo->setDamageInflicted(BATTLE_UNIT_DEFENDER, 0);	// Damage inflicted this round

	push	0
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted

; 2394 : 
; 2395 : 	pkCombatInfo->setFearDamageInflicted(BATTLE_UNIT_ATTACKER, 0);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setFearDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFearDamageInflicted

; 2396 : 
; 2397 : 	pkCombatInfo->setExperience(BATTLE_UNIT_ATTACKER, 0);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience

; 2398 : 	pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_ATTACKER, 0);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed

; 2399 : 	pkCombatInfo->setInBorders(BATTLE_UNIT_ATTACKER, plot.getOwner() != kAttacker.getOwner());	// Not really correct

	mov	edx, DWORD PTR _plot$[ebp]
	movsx	eax, BYTE PTR [edx+4]
	mov	DWORD PTR $T227372[ebp], eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T227381[ebp], edx
	mov	eax, DWORD PTR $T227372[ebp]
	cmp	eax, DWORD PTR $T227381[ebp]
	setne	cl
	movzx	edx, cl
	push	edx
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders

; 2400 : #ifdef NQ_NO_GG_POINTS_FROM_CS_OR_BARBS
; 2401 : 	pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, false); // Since experience earned is 0 anyway, no need to bother

	push	0
	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal

; 2402 : #else
; 2403 : 	pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_ATTACKER, !kAttacker.isBarbarian());
; 2404 : #endif
; 2405 : 
; 2406 : 	pkCombatInfo->setExperience(BATTLE_UNIT_DEFENDER, 0);

	push	0
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience

; 2407 : 	pkCombatInfo->setMaxExperienceAllowed(BATTLE_UNIT_DEFENDER, 0);

	push	0
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed

; 2408 : 	pkCombatInfo->setInBorders(BATTLE_UNIT_DEFENDER, plot.getOwner() == kAttacker.getOwner());

	mov	eax, DWORD PTR _plot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR $T227385[ebp], ecx
	mov	edx, DWORD PTR _kAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T227394[ebp], eax
	mov	ecx, DWORD PTR $T227385[ebp]
	cmp	ecx, DWORD PTR $T227394[ebp]
	sete	dl
	movzx	eax, dl
	push	eax
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders

; 2409 : 	pkCombatInfo->setUpdateGlobal(BATTLE_UNIT_DEFENDER, false);

	push	0
	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal

; 2410 : 
; 2411 : 	pkCombatInfo->setAttackIsBombingMission(true);

	push	1
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setAttackIsBombingMission@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setAttackIsBombingMission

; 2412 : 	pkCombatInfo->setDefenderRetaliates(false);

	push	0
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDefenderRetaliates@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setDefenderRetaliates

; 2413 : 	pkCombatInfo->setAttackNuclearLevel(kAttacker.GetNukeDamageLevel() + 1);

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetNukeDamageLevel@CvUnit@@QBEHXZ	; CvUnit::GetNukeDamageLevel
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setAttackNuclearLevel@CvCombatInfo@@QAEXH@Z ; CvCombatInfo::setAttackNuclearLevel

; 2414 : 
; 2415 : 	// Set all of the units in the blast radius to defenders and calculate their damage
; 2416 : 	int iDamageMembers = 0;

	mov	DWORD PTR _iDamageMembers$[ebp], 0

; 2417 : 	GenerateNuclearExplosionDamage(&plot, kAttacker.GetNukeDamageLevel(), &kAttacker, pkCombatInfo->getDamageMembers(), &iDamageMembers, pkCombatInfo->getMaxDamageMemberCount());

	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?getMaxDamageMemberCount@CvCombatInfo@@QBEHXZ ; CvCombatInfo::getMaxDamageMemberCount
	push	eax
	lea	ecx, DWORD PTR _iDamageMembers$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?getDamageMembers@CvCombatInfo@@QAEPAUCvCombatMemberEntry@@XZ ; CvCombatInfo::getDamageMembers
	push	eax
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetNukeDamageLevel@CvUnit@@QBEHXZ	; CvUnit::GetNukeDamageLevel
	push	eax
	mov	eax, DWORD PTR _plot$[ebp]
	push	eax
	call	?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z ; CvUnitCombat::GenerateNuclearExplosionDamage
	add	esp, 24					; 00000018H

; 2418 : 	pkCombatInfo->setDamageMemberCount(iDamageMembers);

	mov	ecx, DWORD PTR _iDamageMembers$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkCombatInfo$[ebp]
	call	?setDamageMemberCount@CvCombatInfo@@QAEXH@Z ; CvCombatInfo::setDamageMemberCount

; 2419 : 
; 2420 : 	GC.GetEngineUserInterface()->setDirty(UnitInfo_DIRTY_BIT, true);

	mov	edx, DWORD PTR $T227398[ebp]
	mov	DWORD PTR tv280[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv280[ebp], eax
	push	1
	push	19					; 00000013H
	mov	ecx, DWORD PTR tv280[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv280[ebp]
	mov	eax, DWORD PTR [edx+260]
	call	eax

; 2421 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GenerateNuclearCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z$0:
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GenerateNuclearCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z$1:
	lea	ecx, DWORD PTR _args$221989[ebp]
	jmp	??1CvLuaArgsHandle@@QAE@XZ		; CvLuaArgsHandle::~CvLuaArgsHandle
__ehhandler$?GenerateNuclearCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-200]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GenerateNuclearCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GenerateNuclearCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z ENDP ; CvUnitCombat::GenerateNuclearCombatInfo
PUBLIC	?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z ; CvUnitCombat::ApplyNuclearExplosionDamage
PUBLIC	??0CvCombatMemberEntry@@QAE@XZ			; CvCombatMemberEntry::CvCombatMemberEntry
PUBLIC	?ApplyNuclearExplosionDamage@CvUnitCombat@@SAIPAVCvPlot@@HPAVCvUnit@@@Z ; CvUnitCombat::ApplyNuclearExplosionDamage
; Function compile flags: /Odtp
;	COMDAT ?ApplyNuclearExplosionDamage@CvUnitCombat@@SAIPAVCvPlot@@HPAVCvUnit@@@Z
_TEXT	SEGMENT
$T227418 = -2316					; size = 4
$T227417 = -2312					; size = 4
_iDamageMembers$ = -2308				; size = 4
_kDamageMembers$ = -2304				; size = 2304
_pkTargetPlot$ = 8					; size = 4
_iDamageLevel$ = 12					; size = 4
___formal$ = 16						; size = 4
?ApplyNuclearExplosionDamage@CvUnitCombat@@SAIPAVCvPlot@@HPAVCvUnit@@@Z PROC ; CvUnitCombat::ApplyNuclearExplosionDamage, COMDAT

; 2425 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2316				; 0000090cH

; 2426 : 	CvCombatMemberEntry kDamageMembers[MAX_NUKE_DAMAGE_MEMBERS];

	mov	DWORD PTR $T227418[ebp], 64		; 00000040H
	lea	eax, DWORD PTR _kDamageMembers$[ebp]
	mov	DWORD PTR $T227417[ebp], eax
$LN4@ApplyNucle:
	mov	ecx, DWORD PTR $T227418[ebp]
	sub	ecx, 1
	mov	DWORD PTR $T227418[ebp], ecx
	js	SHORT $LN5@ApplyNucle
	mov	ecx, DWORD PTR $T227417[ebp]
	call	??0CvCombatMemberEntry@@QAE@XZ		; CvCombatMemberEntry::CvCombatMemberEntry
	mov	edx, DWORD PTR $T227417[ebp]
	add	edx, 36					; 00000024H
	mov	DWORD PTR $T227417[ebp], edx
	jmp	SHORT $LN4@ApplyNucle
$LN5@ApplyNucle:

; 2427 : 	int iDamageMembers = 0;

	mov	DWORD PTR _iDamageMembers$[ebp], 0

; 2428 : 	GenerateNuclearExplosionDamage(pkTargetPlot, iDamageLevel, NULL, &kDamageMembers[0], &iDamageMembers, MAX_NUKE_DAMAGE_MEMBERS);

	push	64					; 00000040H
	lea	eax, DWORD PTR _iDamageMembers$[ebp]
	push	eax
	lea	ecx, DWORD PTR _kDamageMembers$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _iDamageLevel$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkTargetPlot$[ebp]
	push	eax
	call	?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z ; CvUnitCombat::GenerateNuclearExplosionDamage
	add	esp, 24					; 00000018H

; 2429 : 	return ApplyNuclearExplosionDamage(&kDamageMembers[0], iDamageMembers, NULL, pkTargetPlot, iDamageLevel);

	mov	ecx, DWORD PTR _iDamageLevel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkTargetPlot$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _iDamageMembers$[ebp]
	push	eax
	lea	ecx, DWORD PTR _kDamageMembers$[ebp]
	push	ecx
	call	?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z ; CvUnitCombat::ApplyNuclearExplosionDamage
	add	esp, 20					; 00000014H

; 2430 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ApplyNuclearExplosionDamage@CvUnitCombat@@SAIPAVCvPlot@@HPAVCvUnit@@@Z ENDP ; CvUnitCombat::ApplyNuclearExplosionDamage
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1?$auto_ptr@VICvCity1@@@std@@QAE@XZ		; std::auto_ptr<ICvCity1>::~auto_ptr<ICvCity1>
PUBLIC	??_C@_0BD@CMABGBIJ@Population?5Nuked?52?$AA@	; `string'
PUBLIC	??_C@_0BD@HCMDCEK@Population?5Nuked?51?$AA@	; `string'
PUBLIC	??_C@_0N@FGCIKGCD@Nuke?5Fallout?$AA@		; `string'
PUBLIC	?plotXYWithRangeCheck@@YAPAVCvPlot@@HHHHH@Z	; plotXYWithRangeCheck
EXTRN	??3CvDllCity@@SAXPAX@Z:PROC			; CvDllCity::operator delete
EXTRN	?changePopulation@CvCity@@QAEXH_N@Z:PROC	; CvCity::changePopulation
EXTRN	?getNukeModifier@CvCity@@QBEHXZ:PROC		; CvCity::getNukeModifier
EXTRN	?getPopulation@CvCity@@QBEHXZ:PROC		; CvCity::getPopulation
EXTRN	?CheckForMurder@CvPlayer@@QAEXW4PlayerTypes@@@Z:PROC ; CvPlayer::CheckForMurder
EXTRN	?kill@CvCity@@QAEXXZ:PROC			; CvCity::kill
EXTRN	??0CvDllCity@@QAE@PAVCvCity@@@Z:PROC		; CvDllCity::CvDllCity
EXTRN	??2CvDllCity@@SAPAXI@Z:PROC			; CvDllCity::operator new
EXTRN	?IsOriginalCapital@CvCity@@QBE_NXZ:PROC		; CvCity::IsOriginalCapital
EXTRN	?setCombatUnit@CvCity@@QAEXPAVCvUnit@@_N@Z:PROC	; CvCity::setCombatUnit
EXTRN	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z:PROC	; CvPlayer::getCity
EXTRN	?setFeatureType@CvPlot@@QAEXW4FeatureTypes@@H@Z:PROC ; CvPlot::setFeatureType
EXTRN	?SetImprovementPillaged@CvPlot@@QAEX_N@Z:PROC	; CvPlot::SetImprovementPillaged
EXTRN	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ:PROC ; CvPlot::getImprovementType
EXTRN	?isNukeImmune@CvFeatureInfo@@QBE_NXZ:PROC	; CvFeatureInfo::isNukeImmune
EXTRN	?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z:PROC ; CvGlobals::getFeatureInfo
EXTRN	?ChangeNumTimesNuked@CvDiplomacyAI@@QAEXW4PlayerTypes@@H@Z:PROC ; CvDiplomacyAI::ChangeNumTimesNuked
EXTRN	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ:PROC ; CvPlayer::GetDiplomacyAI
EXTRN	?IsCanAttackRanged@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsCanAttackRanged
EXTRN	?SetAutomateType@CvUnit@@QAEXW4AutomateTypes@@@Z:PROC ; CvUnit::SetAutomateType
EXTRN	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z:PROC	; CvPlayer::getUnit
;	COMDAT ??_C@_0BD@CMABGBIJ@Population?5Nuked?52?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
CONST	SEGMENT
??_C@_0BD@CMABGBIJ@Population?5Nuked?52?$AA@ DB 'Population Nuked 2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HCMDCEK@Population?5Nuked?51?$AA@
CONST	SEGMENT
??_C@_0BD@HCMDCEK@Population?5Nuked?51?$AA@ DB 'Population Nuked 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FGCIKGCD@Nuke?5Fallout?$AA@
CONST	SEGMENT
??_C@_0N@FGCIKGCD@Nuke?5Fallout?$AA@ DB 'Nuke Fallout', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z$1
__ehfuncinfo$?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z
_TEXT	SEGMENT
tv406 = -364						; size = 4
tv377 = -360						; size = 4
tv338 = -356						; size = 4
tv321 = -352						; size = 4
tv311 = -348						; size = 4
tv562 = -344						; size = 4
tv567 = -340						; size = 4
tv544 = -336						; size = 4
tv549 = -332						; size = 4
tv500 = -328						; size = 4
tv505 = -324						; size = 4
tv482 = -320						; size = 4
tv487 = -316						; size = 4
tv67 = -312						; size = 4
$T227824 = -308						; size = 4
$T227820 = -304						; size = 4
$T227811 = -300						; size = 4
$T227796 = -296						; size = 4
$T227787 = -292						; size = 4
$T227781 = -288						; size = 4
$T227777 = -284						; size = 4
$T227773 = -280						; size = 4
$T227769 = -276						; size = 4
$T227762 = -272						; size = 4
$T227758 = -268						; size = 4
$T227754 = -264						; size = 4
$T227750 = -260						; size = 4
_inst$227742 = -256					; size = 4
$T227738 = -252						; size = 4
$T227726 = -248						; size = 4
$T227706 = -244						; size = 4
$T227702 = -240						; size = 4
$T227698 = -236						; size = 4
$T227691 = -232						; size = 4
$T227687 = -228						; size = 4
$T227678 = -224						; size = 4
$T227674 = -220						; size = 4
$T227670 = -216						; size = 4
$T227620 = -212						; size = 4
$T227616 = -208						; size = 4
$T227612 = -204						; size = 4
$T227608 = -200						; size = 4
$T227604 = -196						; size = 4
$T227600 = -192						; size = 4
_f$227596 = -186					; size = 1
_f$227587 = -185					; size = 1
$T227556 = -160						; size = 4
$T227552 = -156						; size = 4
$T227545 = -152						; size = 4
$T227541 = -148						; size = 4
$T227537 = -144						; size = 4
$T227528 = -140						; size = 4
$T227524 = -136						; size = 4
$T227509 = -132						; size = 4
$T227500 = -128						; size = 4
$T227496 = -124						; size = 4
$T227492 = -120						; size = 4
$T227442 = -116						; size = 4
$T227431 = -112						; size = 4
$T227430 = -108						; size = 4
$T227429 = -104						; size = 4
$T227426 = -100						; size = 4
$T227425 = -96						; size = 4
_iBaseDamage$222136 = -92				; size = 4
_iNukedPopulation$222143 = -88				; size = 4
_iRandDamage2$222138 = -84				; size = 4
_iRandDamage1$222137 = -80				; size = 4
_eOldOwner$222134 = -76					; size = 4
_pkDllCity$222124 = -72					; size = 4
_pkCity$222068 = -68					; size = 4
_kEntry$222066 = -64					; size = 4
_i$222062 = -60						; size = 4
_pkFeatureInfo$222050 = -56				; size = 4
_pLoopCity$222046 = -52					; size = 4
_pLoopPlot$222044 = -48					; size = 4
_iDY$222040 = -44					; size = 4
_iDX$222036 = -40					; size = 4
_pkUnit$222027 = -36					; size = 4
_kEntry$222025 = -32					; size = 4
_i$222021 = -28						; size = 4
_iBlastRadius$ = -24					; size = 4
_eAttackerOwner$ = -20					; size = 4
_uiOpposingDamageCount$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
_pkDamageArray$ = 8					; size = 4
_iDamageMembers$ = 12					; size = 4
_pkAttacker$ = 16					; size = 4
_pkTargetPlot$ = 20					; size = 4
_iDamageLevel$ = 24					; size = 4
?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z PROC ; CvUnitCombat::ApplyNuclearExplosionDamage, COMDAT

; 2434 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 352				; 00000160H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2435 : 	uint uiOpposingDamageCount = 0;

	mov	DWORD PTR _uiOpposingDamageCount$[ebp], 0

; 2436 : 	PlayerTypes eAttackerOwner = pkAttacker?pkAttacker->getOwner():NO_PLAYER;

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	SHORT $LN43@ApplyNucle@2
	mov	eax, DWORD PTR $T227442[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR tv67[ebp], edx
	jmp	SHORT $LN44@ApplyNucle@2
$LN43@ApplyNucle@2:
	mov	DWORD PTR tv67[ebp], -1
$LN44@ApplyNucle@2:
	mov	eax, DWORD PTR tv67[ebp]
	mov	DWORD PTR _eAttackerOwner$[ebp], eax

; 2437 : 
; 2438 : 	// Do all the units first
; 2439 : 	for(int i = 0; i < iDamageMembers; ++i)

	mov	DWORD PTR _i$222021[ebp], 0
	jmp	SHORT $LN40@ApplyNucle@2
$LN39@ApplyNucle@2:
	mov	ecx, DWORD PTR _i$222021[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$222021[ebp], ecx
$LN40@ApplyNucle@2:
	mov	edx, DWORD PTR _i$222021[ebp]
	cmp	edx, DWORD PTR _iDamageMembers$[ebp]
	jge	$LN38@ApplyNucle@2

; 2440 : 	{
; 2441 : 		const CvCombatMemberEntry& kEntry = pkDamageArray[i];

	mov	eax, DWORD PTR _i$222021[ebp]
	imul	eax, 36					; 00000024H
	add	eax, DWORD PTR _pkDamageArray$[ebp]
	mov	DWORD PTR _kEntry$222025[ebp], eax

; 2442 : 		if(kEntry.IsUnit())

	mov	ecx, DWORD PTR _kEntry$222025[ebp]
	cmp	DWORD PTR [ecx], -1
	je	SHORT $LN59@ApplyNucle@2
	mov	edx, DWORD PTR _kEntry$222025[ebp]
	cmp	DWORD PTR [edx+4], -1
	je	SHORT $LN59@ApplyNucle@2
	mov	DWORD PTR tv487[ebp], 1
	jmp	SHORT $LN60@ApplyNucle@2
$LN59@ApplyNucle@2:
	mov	DWORD PTR tv487[ebp], 0
$LN60@ApplyNucle@2:
	movzx	eax, BYTE PTR tv487[ebp]
	test	eax, eax
	je	SHORT $LN55@ApplyNucle@2
	mov	ecx, DWORD PTR _kEntry$222025[ebp]
	movzx	edx, WORD PTR [ecx+8]
	and	edx, 1
	jne	SHORT $LN55@ApplyNucle@2
	mov	DWORD PTR tv482[ebp], 1
	jmp	SHORT $LN56@ApplyNucle@2
$LN55@ApplyNucle@2:
	mov	DWORD PTR tv482[ebp], 0
$LN56@ApplyNucle@2:
	movzx	eax, BYTE PTR tv482[ebp]
	test	eax, eax
	je	$LN36@ApplyNucle@2

; 2443 : 		{
; 2444 : 			CvUnit* pkUnit = GET_PLAYER(kEntry.GetPlayer()).getUnit(kEntry.GetUnitID());

	mov	ecx, DWORD PTR _kEntry$222025[ebp]
	cmp	DWORD PTR [ecx], -1
	je	SHORT $LN71@ApplyNucle@2
	mov	edx, DWORD PTR _kEntry$222025[ebp]
	cmp	DWORD PTR [edx+4], -1
	je	SHORT $LN71@ApplyNucle@2
	mov	DWORD PTR tv505[ebp], 1
	jmp	SHORT $LN72@ApplyNucle@2
$LN71@ApplyNucle@2:
	mov	DWORD PTR tv505[ebp], 0
$LN72@ApplyNucle@2:
	movzx	eax, BYTE PTR tv505[ebp]
	test	eax, eax
	je	SHORT $LN67@ApplyNucle@2
	mov	ecx, DWORD PTR _kEntry$222025[ebp]
	movzx	edx, WORD PTR [ecx+8]
	and	edx, 1
	jne	SHORT $LN67@ApplyNucle@2
	mov	DWORD PTR tv500[ebp], 1
	jmp	SHORT $LN68@ApplyNucle@2
$LN67@ApplyNucle@2:
	mov	DWORD PTR tv500[ebp], 0
$LN68@ApplyNucle@2:
	movzx	eax, BYTE PTR tv500[ebp]
	test	eax, eax
	je	SHORT $LN62@ApplyNucle@2
	mov	ecx, DWORD PTR _kEntry$222025[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T227492[ebp], edx
	jmp	SHORT $LN61@ApplyNucle@2
	jmp	SHORT $LN61@ApplyNucle@2
$LN62@ApplyNucle@2:
	mov	DWORD PTR $T227492[ebp], -1
$LN61@ApplyNucle@2:
	mov	eax, DWORD PTR _kEntry$222025[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T227496[ebp], ecx
	mov	edx, DWORD PTR $T227496[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227500[ebp], edx
	mov	eax, DWORD PTR $T227492[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227500[ebp]
	call	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z	; CvPlayer::getUnit
	mov	DWORD PTR _pkUnit$222027[ebp], eax

; 2445 : 			if(pkUnit)

	cmp	DWORD PTR _pkUnit$222027[ebp], 0
	je	$LN36@ApplyNucle@2

; 2446 : 			{
; 2447 : 				// Apply the damage
; 2448 : 				pkUnit->setCombatUnit(NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkUnit$222027[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 2449 : 				pkUnit->ClearMissionQueue();

	push	1
	mov	ecx, DWORD PTR _pkUnit$222027[ebp]
	call	?ClearMissionQueue@CvUnit@@QAEXH@Z	; CvUnit::ClearMissionQueue

; 2450 : 				pkUnit->SetAutomateType(NO_AUTOMATE); // kick unit out of automation

	push	-1
	mov	ecx, DWORD PTR _pkUnit$222027[ebp]
	call	?SetAutomateType@CvUnit@@QAEXW4AutomateTypes@@@Z ; CvUnit::SetAutomateType

; 2451 : 
; 2452 : 				if((eAttackerOwner == NO_PLAYER || pkUnit->getOwner() != eAttackerOwner) && !pkUnit->isBarbarian())

	cmp	DWORD PTR _eAttackerOwner$[ebp], -1
	je	SHORT $LN34@ApplyNucle@2
	mov	ecx, DWORD PTR _pkUnit$222027[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T227509[ebp], edx
	mov	eax, DWORD PTR $T227509[ebp]
	cmp	eax, DWORD PTR _eAttackerOwner$[ebp]
	je	SHORT $LN35@ApplyNucle@2
$LN34@ApplyNucle@2:
	mov	ecx, DWORD PTR _pkUnit$222027[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN35@ApplyNucle@2

; 2453 : 					uiOpposingDamageCount++;	// Count the number of non-barbarian opposing units

	mov	edx, DWORD PTR _uiOpposingDamageCount$[ebp]
	add	edx, 1
	mov	DWORD PTR _uiOpposingDamageCount$[ebp], edx
$LN35@ApplyNucle@2:

; 2454 : 
; 2455 : 				if(pkUnit->IsCombatUnit() || pkUnit->IsCanAttackRanged())

	mov	eax, DWORD PTR _pkUnit$222027[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+1044], 0
	setg	cl
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN32@ApplyNucle@2
	mov	ecx, DWORD PTR _pkUnit$222027[ebp]
	call	?IsCanAttackRanged@CvUnit@@QBE_NXZ	; CvUnit::IsCanAttackRanged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN33@ApplyNucle@2
$LN32@ApplyNucle@2:

; 2456 : 				{
; 2457 : 					pkUnit->changeDamage(kEntry.GetDamage(), eAttackerOwner);

	push	0
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _eAttackerOwner$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kEntry$222025[ebp]
	movsx	eax, WORD PTR [edx+10]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$222027[ebp]
	call	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::changeDamage
	jmp	SHORT $LN30@ApplyNucle@2
$LN33@ApplyNucle@2:

; 2458 : 				}
; 2459 : 				else if(kEntry.GetDamage() >= /*6*/ GC.getNUKE_NON_COMBAT_DEATH_THRESHOLD())

	mov	ecx, DWORD PTR _kEntry$222025[ebp]
	movsx	edx, WORD PTR [ecx+10]
	mov	DWORD PTR $T227524[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6636
	mov	DWORD PTR $T227528[ebp], eax
	mov	ecx, DWORD PTR $T227524[ebp]
	cmp	ecx, DWORD PTR $T227528[ebp]
	jl	SHORT $LN30@ApplyNucle@2

; 2460 : 				{
; 2461 : 					pkUnit->kill(false, eAttackerOwner);

	mov	edx, DWORD PTR _eAttackerOwner$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pkUnit$222027[ebp]
	call	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z	; CvUnit::kill
$LN30@ApplyNucle@2:

; 2462 : 				}
; 2463 : 
; 2464 : #ifdef AUI_WARNING_FIXES
; 2465 : 				if (pkAttacker)
; 2466 : #endif
; 2467 : 				GET_PLAYER(kEntry.GetPlayer()).GetDiplomacyAI()->ChangeNumTimesNuked(pkAttacker->getOwner(), 1);

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T227537[ebp], ecx
	mov	edx, DWORD PTR _kEntry$222025[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T227541[ebp], eax
	mov	ecx, DWORD PTR $T227541[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227545[ebp], ecx
	push	1
	mov	edx, DWORD PTR $T227537[ebp]
	push	edx
	mov	ecx, DWORD PTR $T227545[ebp]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?ChangeNumTimesNuked@CvDiplomacyAI@@QAEXW4PlayerTypes@@H@Z ; CvDiplomacyAI::ChangeNumTimesNuked
$LN36@ApplyNucle@2:

; 2468 : 			}
; 2469 : 		}
; 2470 : 	}

	jmp	$LN39@ApplyNucle@2
$LN38@ApplyNucle@2:

; 2471 : 
; 2472 : 	// Then the terrain effects
; 2473 : 	int iBlastRadius = GC.getNUKE_BLAST_RADIUS();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6672
	mov	DWORD PTR _iBlastRadius$[ebp], eax

; 2474 : 
; 2475 : #ifdef AUI_HEXSPACE_DX_LOOPS
; 2476 : 	int iMaxDX, iDX;
; 2477 : 	CvPlot* pLoopPlot;
; 2478 : 	if (pkTargetPlot)
; 2479 : 	{
; 2480 : 		for (int iDY = -iBlastRadius; iDY <= iBlastRadius; iDY++)
; 2481 : 		{
; 2482 : 			iMaxDX = iBlastRadius - MAX(0, iDY);
; 2483 : 			for (iDX = -iBlastRadius - MIN(0, iDY); iDX <= iMaxDX; iDX++) // MIN() and MAX() stuff is to reduce loops (hexspace!)
; 2484 : 			{
; 2485 : 				// No need for range check because loops are set up properly
; 2486 : 				pLoopPlot = plotXY(pkTargetPlot->getX(), pkTargetPlot->getY(), iDX, iDY);
; 2487 : #else
; 2488 : 	for(int iDX = -(iBlastRadius); iDX <= iBlastRadius; iDX++)

	mov	ecx, DWORD PTR _iBlastRadius$[ebp]
	neg	ecx
	mov	DWORD PTR _iDX$222036[ebp], ecx
	jmp	SHORT $LN29@ApplyNucle@2
$LN28@ApplyNucle@2:
	mov	edx, DWORD PTR _iDX$222036[ebp]
	add	edx, 1
	mov	DWORD PTR _iDX$222036[ebp], edx
$LN29@ApplyNucle@2:
	mov	eax, DWORD PTR _iDX$222036[ebp]
	cmp	eax, DWORD PTR _iBlastRadius$[ebp]
	jg	$LN27@ApplyNucle@2

; 2489 : 	{
; 2490 : 		for(int iDY = -(iBlastRadius); iDY <= iBlastRadius; iDY++)

	mov	ecx, DWORD PTR _iBlastRadius$[ebp]
	neg	ecx
	mov	DWORD PTR _iDY$222040[ebp], ecx
	jmp	SHORT $LN26@ApplyNucle@2
$LN25@ApplyNucle@2:
	mov	edx, DWORD PTR _iDY$222040[ebp]
	add	edx, 1
	mov	DWORD PTR _iDY$222040[ebp], edx
$LN26@ApplyNucle@2:
	mov	eax, DWORD PTR _iDY$222040[ebp]
	cmp	eax, DWORD PTR _iBlastRadius$[ebp]
	jg	$LN24@ApplyNucle@2

; 2491 : 		{
; 2492 : 			CvPlot* pLoopPlot = plotXYWithRangeCheck(pkTargetPlot->getX(), pkTargetPlot->getY(), iDX, iDY, iBlastRadius);

	mov	ecx, DWORD PTR _pkTargetPlot$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR $T227552[ebp], edx
	mov	eax, DWORD PTR _pkTargetPlot$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR $T227556[ebp], ecx
	mov	edx, DWORD PTR _iBlastRadius$[ebp]
	push	edx
	mov	eax, DWORD PTR _iDY$222040[ebp]
	push	eax
	mov	ecx, DWORD PTR _iDX$222036[ebp]
	push	ecx
	mov	edx, DWORD PTR $T227552[ebp]
	push	edx
	mov	eax, DWORD PTR $T227556[ebp]
	push	eax
	call	?plotXYWithRangeCheck@@YAPAVCvPlot@@HHHHH@Z ; plotXYWithRangeCheck
	add	esp, 20					; 00000014H
	mov	DWORD PTR _pLoopPlot$222044[ebp], eax

; 2493 : #endif
; 2494 : 
; 2495 : 			if(pLoopPlot != NULL)

	cmp	DWORD PTR _pLoopPlot$222044[ebp], 0
	je	$LN14@ApplyNucle@2

; 2496 : 			{
; 2497 : 				// if we remove roads, don't remove them on the city... XXX
; 2498 : 				CvCity* pLoopCity = pLoopPlot->getPlotCity();

	mov	ecx, DWORD PTR _pLoopPlot$222044[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pLoopCity$222046[ebp], eax

; 2499 : 
; 2500 : 				if(pLoopCity == NULL)

	cmp	DWORD PTR _pLoopCity$222046[ebp], 0
	jne	$LN14@ApplyNucle@2

; 2501 : 				{
; 2502 : 					if(!(pLoopPlot->isWater()) && !(pLoopPlot->isImpassable()))

	mov	ecx, DWORD PTR _pLoopPlot$222044[ebp]
	movsx	edx, BYTE PTR [ecx+5]
	xor	eax, eax
	cmp	edx, 3
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN14@ApplyNucle@2
	mov	edx, DWORD PTR _pLoopPlot$222044[ebp]
	mov	al, BYTE PTR [edx+462]
	shr	al, 7
	and	al, 1
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN14@ApplyNucle@2

; 2503 : 					{
; 2504 : 						if(pLoopPlot->getFeatureType() != NO_FEATURE)

	mov	edx, DWORD PTR _pLoopPlot$222044[ebp]
	mov	al, BYTE PTR [edx+432]
	mov	BYTE PTR _f$227587[ebp], al
	movsx	ecx, BYTE PTR _f$227587[ebp]
	cmp	ecx, -1
	je	$LN20@ApplyNucle@2

; 2505 : 						{
; 2506 : 							CvFeatureInfo* pkFeatureInfo = GC.getFeatureInfo(pLoopPlot->getFeatureType());

	mov	edx, DWORD PTR _pLoopPlot$222044[ebp]
	mov	al, BYTE PTR [edx+432]
	mov	BYTE PTR _f$227596[ebp], al
	movsx	ecx, BYTE PTR _f$227596[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z ; CvGlobals::getFeatureInfo
	mov	DWORD PTR _pkFeatureInfo$222050[ebp], eax

; 2507 : 							if(pkFeatureInfo && !pkFeatureInfo->isNukeImmune())

	cmp	DWORD PTR _pkFeatureInfo$222050[ebp], 0
	je	SHORT $LN18@ApplyNucle@2
	mov	ecx, DWORD PTR _pkFeatureInfo$222050[ebp]
	call	?isNukeImmune@CvFeatureInfo@@QBE_NXZ	; CvFeatureInfo::isNukeImmune
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN18@ApplyNucle@2

; 2508 : 							{
; 2509 : 								if(pLoopPlot == pkTargetPlot || GC.getGame().getJonRandNum(100, "Nuke Fallout") < GC.getNUKE_FALLOUT_PROB())

	mov	eax, DWORD PTR _pLoopPlot$222044[ebp]
	cmp	eax, DWORD PTR _pkTargetPlot$[ebp]
	je	SHORT $LN17@ApplyNucle@2
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T227600[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6620
	mov	DWORD PTR $T227604[ebp], edx
	push	OFFSET ??_C@_0N@FGCIKGCD@Nuke?5Fallout?$AA@
	push	100					; 00000064H
	mov	ecx, DWORD PTR $T227600[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	cmp	eax, DWORD PTR $T227604[ebp]
	jge	SHORT $LN18@ApplyNucle@2
$LN17@ApplyNucle@2:

; 2510 : 								{
; 2511 : 									if(pLoopPlot->getImprovementType() != NO_IMPROVEMENT)

	mov	ecx, DWORD PTR _pLoopPlot$222044[ebp]
	call	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ ; CvPlot::getImprovementType
	cmp	eax, -1
	je	SHORT $LN16@ApplyNucle@2

; 2512 : 									{
; 2513 : 										pLoopPlot->SetImprovementPillaged(true);

	push	1
	mov	ecx, DWORD PTR _pLoopPlot$222044[ebp]
	call	?SetImprovementPillaged@CvPlot@@QAEX_N@Z ; CvPlot::SetImprovementPillaged
$LN16@ApplyNucle@2:

; 2514 : 									}
; 2515 : 									pLoopPlot->setFeatureType((FeatureTypes)(GC.getNUKE_FEATURE()));

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8404
	mov	DWORD PTR $T227608[ebp], eax
	push	-1
	mov	ecx, DWORD PTR $T227608[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pLoopPlot$222044[ebp]
	call	?setFeatureType@CvPlot@@QAEXW4FeatureTypes@@H@Z ; CvPlot::setFeatureType
$LN18@ApplyNucle@2:

; 2516 : 								}
; 2517 : 							}
; 2518 : 						}
; 2519 : 						else

	jmp	SHORT $LN14@ApplyNucle@2
$LN20@ApplyNucle@2:

; 2520 : 						{
; 2521 : 							if(pLoopPlot == pkTargetPlot || GC.getGame().getJonRandNum(100, "Nuke Fallout") < GC.getNUKE_FALLOUT_PROB())

	mov	edx, DWORD PTR _pLoopPlot$222044[ebp]
	cmp	edx, DWORD PTR _pkTargetPlot$[ebp]
	je	SHORT $LN13@ApplyNucle@2
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T227612[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6620
	mov	DWORD PTR $T227616[ebp], ecx
	push	OFFSET ??_C@_0N@FGCIKGCD@Nuke?5Fallout?$AA@
	push	100					; 00000064H
	mov	ecx, DWORD PTR $T227612[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	cmp	eax, DWORD PTR $T227616[ebp]
	jge	SHORT $LN14@ApplyNucle@2
$LN13@ApplyNucle@2:

; 2522 : 							{
; 2523 : 								if(pLoopPlot->getImprovementType() != NO_IMPROVEMENT)

	mov	ecx, DWORD PTR _pLoopPlot$222044[ebp]
	call	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ ; CvPlot::getImprovementType
	cmp	eax, -1
	je	SHORT $LN12@ApplyNucle@2

; 2524 : 								{
; 2525 : 									pLoopPlot->SetImprovementPillaged(true);

	push	1
	mov	ecx, DWORD PTR _pLoopPlot$222044[ebp]
	call	?SetImprovementPillaged@CvPlot@@QAEX_N@Z ; CvPlot::SetImprovementPillaged
$LN12@ApplyNucle@2:

; 2526 : 								}
; 2527 : 								pLoopPlot->setFeatureType((FeatureTypes)(GC.getNUKE_FEATURE()));

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8404
	mov	DWORD PTR $T227620[ebp], edx
	push	-1
	mov	eax, DWORD PTR $T227620[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLoopPlot$222044[ebp]
	call	?setFeatureType@CvPlot@@QAEXW4FeatureTypes@@H@Z ; CvPlot::setFeatureType
$LN14@ApplyNucle@2:

; 2528 : 							}
; 2529 : 						}
; 2530 : 					}
; 2531 : 				}
; 2532 : 			}
; 2533 : 		}

	jmp	$LN25@ApplyNucle@2
$LN24@ApplyNucle@2:

; 2534 : 	}

	jmp	$LN28@ApplyNucle@2
$LN27@ApplyNucle@2:

; 2535 : #ifdef AUI_HEXSPACE_DX_LOOPS
; 2536 : 	}
; 2537 : #endif
; 2538 : 
; 2539 : 	// Then the cities
; 2540 : 	for(int i = 0; i < iDamageMembers; ++i)

	mov	DWORD PTR _i$222062[ebp], 0
	jmp	SHORT $LN11@ApplyNucle@2
$LN10@ApplyNucle@2:
	mov	ecx, DWORD PTR _i$222062[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$222062[ebp], ecx
$LN11@ApplyNucle@2:
	mov	edx, DWORD PTR _i$222062[ebp]
	cmp	edx, DWORD PTR _iDamageMembers$[ebp]
	jge	$LN9@ApplyNucle@2

; 2541 : 	{
; 2542 : 		const CvCombatMemberEntry& kEntry = pkDamageArray[i];

	mov	eax, DWORD PTR _i$222062[ebp]
	imul	eax, 36					; 00000024H
	add	eax, DWORD PTR _pkDamageArray$[ebp]
	mov	DWORD PTR _kEntry$222066[ebp], eax

; 2543 : 		if(kEntry.IsCity())

	mov	ecx, DWORD PTR _kEntry$222066[ebp]
	cmp	DWORD PTR [ecx], -1
	je	SHORT $LN155@ApplyNucle@2
	mov	edx, DWORD PTR _kEntry$222066[ebp]
	cmp	DWORD PTR [edx+4], -1
	je	SHORT $LN155@ApplyNucle@2
	mov	DWORD PTR tv549[ebp], 1
	jmp	SHORT $LN156@ApplyNucle@2
$LN155@ApplyNucle@2:
	mov	DWORD PTR tv549[ebp], 0
$LN156@ApplyNucle@2:
	movzx	eax, BYTE PTR tv549[ebp]
	test	eax, eax
	je	SHORT $LN151@ApplyNucle@2
	mov	ecx, DWORD PTR _kEntry$222066[ebp]
	movzx	edx, WORD PTR [ecx+8]
	and	edx, 1
	je	SHORT $LN151@ApplyNucle@2
	mov	DWORD PTR tv544[ebp], 1
	jmp	SHORT $LN152@ApplyNucle@2
$LN151@ApplyNucle@2:
	mov	DWORD PTR tv544[ebp], 0
$LN152@ApplyNucle@2:
	movzx	eax, BYTE PTR tv544[ebp]
	test	eax, eax
	je	$LN3@ApplyNucle@2

; 2544 : 		{
; 2545 : 			CvCity* pkCity = GET_PLAYER(kEntry.GetPlayer()).getCity(kEntry.GetCityID());

	mov	ecx, DWORD PTR _kEntry$222066[ebp]
	cmp	DWORD PTR [ecx], -1
	je	SHORT $LN167@ApplyNucle@2
	mov	edx, DWORD PTR _kEntry$222066[ebp]
	cmp	DWORD PTR [edx+4], -1
	je	SHORT $LN167@ApplyNucle@2
	mov	DWORD PTR tv567[ebp], 1
	jmp	SHORT $LN168@ApplyNucle@2
$LN167@ApplyNucle@2:
	mov	DWORD PTR tv567[ebp], 0
$LN168@ApplyNucle@2:
	movzx	eax, BYTE PTR tv567[ebp]
	test	eax, eax
	je	SHORT $LN163@ApplyNucle@2
	mov	ecx, DWORD PTR _kEntry$222066[ebp]
	movzx	edx, WORD PTR [ecx+8]
	and	edx, 1
	je	SHORT $LN163@ApplyNucle@2
	mov	DWORD PTR tv562[ebp], 1
	jmp	SHORT $LN164@ApplyNucle@2
$LN163@ApplyNucle@2:
	mov	DWORD PTR tv562[ebp], 0
$LN164@ApplyNucle@2:
	movzx	eax, BYTE PTR tv562[ebp]
	test	eax, eax
	je	SHORT $LN158@ApplyNucle@2
	mov	ecx, DWORD PTR _kEntry$222066[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T227670[ebp], edx
	jmp	SHORT $LN157@ApplyNucle@2
	jmp	SHORT $LN157@ApplyNucle@2
$LN158@ApplyNucle@2:
	mov	DWORD PTR $T227670[ebp], -1
$LN157@ApplyNucle@2:
	mov	eax, DWORD PTR _kEntry$222066[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T227674[ebp], ecx
	mov	edx, DWORD PTR $T227674[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227678[ebp], edx
	mov	eax, DWORD PTR $T227670[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227678[ebp]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	DWORD PTR _pkCity$222068[ebp], eax

; 2546 : 			if(pkCity)

	cmp	DWORD PTR _pkCity$222068[ebp], 0
	je	$LN3@ApplyNucle@2

; 2547 : 			{
; 2548 : 				pkCity->setCombatUnit(NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkCity$222068[ebp]
	call	?setCombatUnit@CvCity@@QAEXPAVCvUnit@@_N@Z ; CvCity::setCombatUnit

; 2549 : 
; 2550 : 				if(eAttackerOwner == NO_PLAYER || pkCity->getOwner() != eAttackerOwner)

	cmp	DWORD PTR _eAttackerOwner$[ebp], -1
	je	SHORT $LN5@ApplyNucle@2
	mov	ecx, DWORD PTR _pkCity$222068[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T227687[ebp], edx
	mov	eax, DWORD PTR $T227687[ebp]
	cmp	eax, DWORD PTR _eAttackerOwner$[ebp]
	je	SHORT $LN6@ApplyNucle@2
$LN5@ApplyNucle@2:

; 2551 : 					uiOpposingDamageCount++;

	mov	ecx, DWORD PTR _uiOpposingDamageCount$[ebp]
	add	ecx, 1
	mov	DWORD PTR _uiOpposingDamageCount$[ebp], ecx
$LN6@ApplyNucle@2:

; 2552 : 
; 2553 : 				if(kEntry.GetFinalDamage() >= pkCity->GetMaxHitPoints() && !pkCity->IsOriginalCapital())

	mov	edx, DWORD PTR _kEntry$222066[ebp]
	movsx	eax, WORD PTR [edx+12]
	mov	DWORD PTR $T227691[ebp], eax
	mov	ecx, DWORD PTR _pkCity$222068[ebp]
	call	?GetMaxHitPoints@CvCity@@QBEHXZ		; CvCity::GetMaxHitPoints
	cmp	DWORD PTR $T227691[ebp], eax
	jl	$LN4@ApplyNucle@2
	mov	ecx, DWORD PTR _pkCity$222068[ebp]
	call	?IsOriginalCapital@CvCity@@QBE_NXZ	; CvCity::IsOriginalCapital
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN4@ApplyNucle@2

; 2554 : 				{
; 2555 : 					auto_ptr<ICvCity1> pkDllCity(new CvDllCity(pkCity));

	push	12					; 0000000cH
	call	??2CvDllCity@@SAPAXI@Z			; CvDllCity::operator new
	add	esp, 4
	mov	DWORD PTR $T227426[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T227426[ebp], 0
	je	SHORT $LN45@ApplyNucle@2
	mov	edx, DWORD PTR _pkCity$222068[ebp]
	push	edx
	mov	ecx, DWORD PTR $T227426[ebp]
	call	??0CvDllCity@@QAE@PAVCvCity@@@Z		; CvDllCity::CvDllCity
	mov	DWORD PTR tv311[ebp], eax
	jmp	SHORT $LN46@ApplyNucle@2
$LN45@ApplyNucle@2:
	mov	DWORD PTR tv311[ebp], 0
$LN46@ApplyNucle@2:
	mov	eax, DWORD PTR tv311[ebp]
	mov	DWORD PTR $T227425[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T227425[ebp]
	mov	DWORD PTR _pkDllCity$222124[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 2556 : 					gDLL->GameplayCitySetDamage(pkDllCity.get(), 0, pkCity->getDamage()); // to stop the fires

	mov	edx, DWORD PTR $T227698[ebp]
	mov	DWORD PTR tv321[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv321[ebp], eax
	mov	ecx, DWORD PTR _pkDllCity$222124[ebp]
	mov	DWORD PTR $T227702[ebp], ecx
	mov	ecx, DWORD PTR _pkCity$222068[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	push	eax
	push	0
	mov	edx, DWORD PTR $T227702[ebp]
	push	edx
	mov	eax, DWORD PTR tv321[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv321[ebp]
	mov	eax, DWORD PTR [edx+660]
	call	eax

; 2557 : 					gDLL->GameplayCityDestroyed(pkDllCity.get(), NO_PLAYER);

	mov	ecx, DWORD PTR $T227706[ebp]
	mov	DWORD PTR tv338[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv338[ebp], edx
	push	-1
	mov	eax, DWORD PTR _pkDllCity$222124[ebp]
	push	eax
	mov	ecx, DWORD PTR tv338[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv338[ebp]
	mov	eax, DWORD PTR [edx+652]
	call	eax

; 2558 : 
; 2559 : 					PlayerTypes eOldOwner = pkCity->getOwner();

	mov	ecx, DWORD PTR _pkCity$222068[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR _eOldOwner$222134[ebp], edx

; 2560 : 					pkCity->kill();

	mov	ecx, DWORD PTR _pkCity$222068[ebp]
	call	?kill@CvCity@@QAEXXZ			; CvCity::kill

; 2561 : 
; 2562 : 					// slewis - check for killing a player
; 2563 : #ifdef AUI_WARNING_FIXES
; 2564 : 					if (pkAttacker)
; 2565 : #endif
; 2566 : 					GET_PLAYER(pkAttacker->getOwner()).CheckForMurder(eOldOwner);

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T227726[ebp], ecx
	mov	edx, DWORD PTR _eOldOwner$222134[ebp]
	push	edx
	mov	ecx, DWORD PTR $T227726[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?CheckForMurder@CvPlayer@@QAEXW4PlayerTypes@@@Z ; CvPlayer::CheckForMurder

; 2567 : 				}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _pkDllCity$222124[ebp]
	mov	DWORD PTR $T227738[ebp], eax
	cmp	DWORD PTR $T227738[ebp], 0
	je	SHORT $LN201@ApplyNucle@2
	mov	ecx, DWORD PTR $T227738[ebp]
	mov	DWORD PTR _inst$227742[ebp], ecx
	mov	edx, DWORD PTR _inst$227742[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$227742[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN201@ApplyNucle@2:

; 2568 : 				else

	jmp	$LN3@ApplyNucle@2
$LN4@ApplyNucle@2:

; 2569 : 				{
; 2570 : 					// Unlike the city hit points, the population damage is calculated when the pre-calculated damage is applied.
; 2571 : 					// This is simply to save space in the damage array, since the combat visualization does not need it.
; 2572 : 					// It can be moved into the pre-calculated damage array if needed.
; 2573 : 					int iBaseDamage, iRandDamage1, iRandDamage2;
; 2574 : 					// How much destruction is unleashed on nearby Cities?
; 2575 : 					if(iDamageLevel == 1)

	cmp	DWORD PTR _iDamageLevel$[ebp], 1
	jne	SHORT $LN2@ApplyNucle@2

; 2576 : 					{
; 2577 : 						iBaseDamage = /*30*/ GC.getNUKE_LEVEL1_POPULATION_DEATH_BASE();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6640
	mov	DWORD PTR _iBaseDamage$222136[ebp], eax

; 2578 : 						iRandDamage1 = GC.getGame().getJonRandNum(/*20*/ GC.getNUKE_LEVEL1_POPULATION_DEATH_RAND_1(), "Population Nuked 1");

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6644
	mov	DWORD PTR $T227750[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T227754[ebp], edx
	push	OFFSET ??_C@_0BD@HCMDCEK@Population?5Nuked?51?$AA@
	mov	eax, DWORD PTR $T227750[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227754[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	DWORD PTR _iRandDamage1$222137[ebp], eax

; 2579 : 						iRandDamage2 = GC.getGame().getJonRandNum(/*20*/ GC.getNUKE_LEVEL1_POPULATION_DEATH_RAND_2(), "Population Nuked 2");

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6648
	mov	DWORD PTR $T227758[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T227762[ebp], edx
	push	OFFSET ??_C@_0BD@CMABGBIJ@Population?5Nuked?52?$AA@
	mov	eax, DWORD PTR $T227758[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227762[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	DWORD PTR _iRandDamage2$222138[ebp], eax

; 2580 : 					}
; 2581 : 					else

	jmp	SHORT $LN1@ApplyNucle@2
$LN2@ApplyNucle@2:

; 2582 : 					{
; 2583 : 						iBaseDamage = /*60*/ GC.getNUKE_LEVEL2_POPULATION_DEATH_BASE();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6652
	mov	DWORD PTR _iBaseDamage$222136[ebp], ecx

; 2584 : 						iRandDamage1 = GC.getGame().getJonRandNum(/*10*/ GC.getNUKE_LEVEL2_POPULATION_DEATH_RAND_1(), "Population Nuked 1");

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6656
	mov	DWORD PTR $T227769[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T227773[ebp], eax
	push	OFFSET ??_C@_0BD@HCMDCEK@Population?5Nuked?51?$AA@
	mov	ecx, DWORD PTR $T227769[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T227773[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	DWORD PTR _iRandDamage1$222137[ebp], eax

; 2585 : 						iRandDamage2 = GC.getGame().getJonRandNum(/*10*/ GC.getNUKE_LEVEL2_POPULATION_DEATH_RAND_2(), "Population Nuked 2");

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6660
	mov	DWORD PTR $T227777[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T227781[ebp], eax
	push	OFFSET ??_C@_0BD@CMABGBIJ@Population?5Nuked?52?$AA@
	mov	ecx, DWORD PTR $T227777[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T227781[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	DWORD PTR _iRandDamage2$222138[ebp], eax
$LN1@ApplyNucle@2:

; 2586 : 					}
; 2587 : 
; 2588 : 					int iNukedPopulation = pkCity->getPopulation() * (iBaseDamage + iRandDamage1 + iRandDamage2) / 100;

	mov	ecx, DWORD PTR _pkCity$222068[ebp]
	call	?getPopulation@CvCity@@QBEHXZ		; CvCity::getPopulation
	mov	edx, DWORD PTR _iBaseDamage$222136[ebp]
	add	edx, DWORD PTR _iRandDamage1$222137[ebp]
	add	edx, DWORD PTR _iRandDamage2$222138[ebp]
	imul	eax, edx
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iNukedPopulation$222143[ebp], eax

; 2589 : 
; 2590 : 					iNukedPopulation *= std::max(0, (pkCity->getNukeModifier() + 100));

	mov	ecx, DWORD PTR _pkCity$222068[ebp]
	call	?getNukeModifier@CvCity@@QBEHXZ		; CvCity::getNukeModifier
	add	eax, 100				; 00000064H
	mov	DWORD PTR $T227429[ebp], eax
	mov	DWORD PTR $T227430[ebp], 0
	mov	edx, DWORD PTR $T227430[ebp]
	cmp	edx, DWORD PTR $T227429[ebp]
	jge	SHORT $LN226@ApplyNucle@2
	lea	eax, DWORD PTR $T227429[ebp]
	mov	DWORD PTR tv377[ebp], eax
	jmp	SHORT $LN227@ApplyNucle@2
$LN226@ApplyNucle@2:
	lea	ecx, DWORD PTR $T227430[ebp]
	mov	DWORD PTR tv377[ebp], ecx
$LN227@ApplyNucle@2:
	mov	edx, DWORD PTR tv377[ebp]
	mov	DWORD PTR $T227787[ebp], edx
	mov	eax, DWORD PTR $T227787[ebp]
	mov	ecx, DWORD PTR _iNukedPopulation$222143[ebp]
	imul	ecx, DWORD PTR [eax]
	mov	DWORD PTR _iNukedPopulation$222143[ebp], ecx

; 2591 : 					iNukedPopulation /= 100;

	mov	eax, DWORD PTR _iNukedPopulation$222143[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iNukedPopulation$222143[ebp], eax

; 2592 : 
; 2593 : 					pkCity->changePopulation(-(std::min((pkCity->getPopulation() - 1), iNukedPopulation)));

	mov	ecx, DWORD PTR _pkCity$222068[ebp]
	call	?getPopulation@CvCity@@QBEHXZ		; CvCity::getPopulation
	sub	eax, 1
	mov	DWORD PTR $T227431[ebp], eax
	mov	edx, DWORD PTR _iNukedPopulation$222143[ebp]
	cmp	edx, DWORD PTR $T227431[ebp]
	jge	SHORT $LN230@ApplyNucle@2
	lea	eax, DWORD PTR _iNukedPopulation$222143[ebp]
	mov	DWORD PTR tv406[ebp], eax
	jmp	SHORT $LN231@ApplyNucle@2
$LN230@ApplyNucle@2:
	lea	ecx, DWORD PTR $T227431[ebp]
	mov	DWORD PTR tv406[ebp], ecx
$LN231@ApplyNucle@2:
	mov	edx, DWORD PTR tv406[ebp]
	mov	DWORD PTR $T227796[ebp], edx
	push	1
	mov	eax, DWORD PTR $T227796[ebp]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	push	ecx
	mov	ecx, DWORD PTR _pkCity$222068[ebp]
	call	?changePopulation@CvCity@@QAEXH_N@Z	; CvCity::changePopulation

; 2594 : 
; 2595 : 					// Add damage to the city
; 2596 : 					pkCity->setDamage(kEntry.GetFinalDamage());

	push	0
	mov	edx, DWORD PTR _kEntry$222066[ebp]
	movsx	eax, WORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _pkCity$222068[ebp]
	call	?setDamage@CvCity@@QAEXH_N@Z		; CvCity::setDamage

; 2597 : 
; 2598 : #ifdef AUI_WARNING_FIXES
; 2599 : 					if (pkAttacker)
; 2600 : #endif
; 2601 : 					GET_PLAYER(pkCity->getOwner()).GetDiplomacyAI()->ChangeNumTimesNuked(pkAttacker->getOwner(), 1);

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T227811[ebp], edx
	mov	eax, DWORD PTR _pkCity$222068[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T227820[ebp], ecx
	mov	edx, DWORD PTR $T227820[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227824[ebp], edx
	push	1
	mov	eax, DWORD PTR $T227811[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227824[ebp]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?ChangeNumTimesNuked@CvDiplomacyAI@@QAEXW4PlayerTypes@@H@Z ; CvDiplomacyAI::ChangeNumTimesNuked
$LN3@ApplyNucle@2:

; 2602 : 				}
; 2603 : 			}
; 2604 : 		}
; 2605 : 	}

	jmp	$LN10@ApplyNucle@2
$LN9@ApplyNucle@2:

; 2606 : 	return uiOpposingDamageCount;

	mov	eax, DWORD PTR _uiOpposingDamageCount$[ebp]

; 2607 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z$0:
	mov	eax, DWORD PTR $T227426[ebp]
	push	eax
	call	??3CvDllCity@@SAXPAX@Z			; CvDllCity::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z$1:
	lea	ecx, DWORD PTR _pkDllCity$222124[ebp]
	jmp	??1?$auto_ptr@VICvCity1@@@std@@QAE@XZ	; std::auto_ptr<ICvCity1>::~auto_ptr<ICvCity1>
__ehhandler$?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-356]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z ENDP ; CvUnitCombat::ApplyNuclearExplosionDamage
PUBLIC	?plotXY@@YAPAVCvPlot@@HHHH@Z			; plotXY
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
;	COMDAT ?plotXYWithRangeCheck@@YAPAVCvPlot@@HHHHH@Z
_TEXT	SEGMENT
tv83 = -96						; size = 4
tv81 = -92						; size = 4
tv78 = -88						; size = 4
tv74 = -84						; size = 4
tv71 = -80						; size = 4
_iAbsDY$216982 = -20					; size = 4
_iAbsDX$216981 = -16					; size = 4
_iAbsDY$216979 = -12					; size = 4
_iAbsDX$216978 = -8					; size = 4
_hexRange$ = -4						; size = 4
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
_iDX$ = 16						; size = 4
_iDY$ = 20						; size = 4
_iRange$ = 24						; size = 4
?plotXYWithRangeCheck@@YAPAVCvPlot@@HHHHH@Z PROC	; plotXYWithRangeCheck, COMDAT

; 233  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H

; 234  : #ifdef NQM_GAME_CORE_UTILS_OPTIMIZATIONS
; 235  : 	// I'm assuming iDX and iDY are in hex-space
; 236  : 	if (hexDistance(iDX, iDY) > iRange)
; 237  : #else
; 238  : 	int hexRange;
; 239  : 
; 240  : 	// I'm assuming iDX and iDY are in hex-space
; 241  : 	if((iDX >= 0) == (iDY >= 0))  // the signs match

	xor	eax, eax
	cmp	DWORD PTR _iDX$[ebp], 0
	setge	al
	xor	ecx, ecx
	cmp	DWORD PTR _iDY$[ebp], 0
	setge	cl
	cmp	eax, ecx
	jne	SHORT $LN3@plotXYWith

; 242  : 	{
; 243  : 		int iAbsDX = iDX >= 0 ? iDX : -iDX;

	cmp	DWORD PTR _iDX$[ebp], 0
	jl	SHORT $LN6@plotXYWith
	mov	edx, DWORD PTR _iDX$[ebp]
	mov	DWORD PTR tv71[ebp], edx
	jmp	SHORT $LN7@plotXYWith
$LN6@plotXYWith:
	mov	eax, DWORD PTR _iDX$[ebp]
	neg	eax
	mov	DWORD PTR tv71[ebp], eax
$LN7@plotXYWith:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _iAbsDX$216978[ebp], ecx

; 244  : 		int iAbsDY = iDY >= 0 ? iDY : -iDY;

	cmp	DWORD PTR _iDY$[ebp], 0
	jl	SHORT $LN8@plotXYWith
	mov	edx, DWORD PTR _iDY$[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN9@plotXYWith
$LN8@plotXYWith:
	mov	eax, DWORD PTR _iDY$[ebp]
	neg	eax
	mov	DWORD PTR tv74[ebp], eax
$LN9@plotXYWith:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _iAbsDY$216979[ebp], ecx

; 245  : 		hexRange = iAbsDX + iAbsDY;

	mov	edx, DWORD PTR _iAbsDX$216978[ebp]
	add	edx, DWORD PTR _iAbsDY$216979[ebp]
	mov	DWORD PTR _hexRange$[ebp], edx

; 246  : 	}
; 247  : 	else

	jmp	SHORT $LN2@plotXYWith
$LN3@plotXYWith:

; 248  : 	{
; 249  : 		int iAbsDX = iDX >= 0 ? iDX : -iDX;

	cmp	DWORD PTR _iDX$[ebp], 0
	jl	SHORT $LN10@plotXYWith
	mov	eax, DWORD PTR _iDX$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN11@plotXYWith
$LN10@plotXYWith:
	mov	ecx, DWORD PTR _iDX$[ebp]
	neg	ecx
	mov	DWORD PTR tv78[ebp], ecx
$LN11@plotXYWith:
	mov	edx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _iAbsDX$216981[ebp], edx

; 250  : 		int iAbsDY = iDY >= 0 ? iDY : -iDY;

	cmp	DWORD PTR _iDY$[ebp], 0
	jl	SHORT $LN12@plotXYWith
	mov	eax, DWORD PTR _iDY$[ebp]
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN13@plotXYWith
$LN12@plotXYWith:
	mov	ecx, DWORD PTR _iDY$[ebp]
	neg	ecx
	mov	DWORD PTR tv81[ebp], ecx
$LN13@plotXYWith:
	mov	edx, DWORD PTR tv81[ebp]
	mov	DWORD PTR _iAbsDY$216982[ebp], edx

; 251  : 		hexRange = iAbsDX >= iAbsDY ? iAbsDX : iAbsDY;

	mov	eax, DWORD PTR _iAbsDX$216981[ebp]
	cmp	eax, DWORD PTR _iAbsDY$216982[ebp]
	jl	SHORT $LN14@plotXYWith
	mov	ecx, DWORD PTR _iAbsDX$216981[ebp]
	mov	DWORD PTR tv83[ebp], ecx
	jmp	SHORT $LN15@plotXYWith
$LN14@plotXYWith:
	mov	edx, DWORD PTR _iAbsDY$216982[ebp]
	mov	DWORD PTR tv83[ebp], edx
$LN15@plotXYWith:
	mov	eax, DWORD PTR tv83[ebp]
	mov	DWORD PTR _hexRange$[ebp], eax
$LN2@plotXYWith:

; 252  : 	}
; 253  : 
; 254  : 	if(hexRange > iRange)

	mov	ecx, DWORD PTR _hexRange$[ebp]
	cmp	ecx, DWORD PTR _iRange$[ebp]
	jle	SHORT $LN1@plotXYWith

; 255  : #endif
; 256  : 	{
; 257  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN4@plotXYWith
$LN1@plotXYWith:

; 258  : 	}
; 259  : 
; 260  : 	return plotXY(iX, iY, iDX, iDY);

	mov	edx, DWORD PTR _iDY$[ebp]
	push	edx
	mov	eax, DWORD PTR _iDX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iX$[ebp]
	push	edx
	call	?plotXY@@YAPAVCvPlot@@HHHH@Z		; plotXY
	add	esp, 16					; 00000010H
$LN4@plotXYWith:

; 261  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?plotXYWithRangeCheck@@YAPAVCvPlot@@HHHHH@Z ENDP	; plotXYWithRangeCheck
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?plotXY@@YAPAVCvPlot@@HHHH@Z
_TEXT	SEGMENT
tv148 = -72						; size = 4
tv163 = -68						; size = 4
tv86 = -64						; size = 4
tv82 = -60						; size = 4
$T228085 = -56						; size = 4
$T228040 = -52						; size = 4
$T228027 = -48						; size = 4
$T228023 = -44						; size = 4
$T228009 = -40						; size = 4
$T228005 = -33						; size = 1
$T227994 = -32						; size = 4
$T227990 = -25						; size = 1
_iMapY$228084 = -24					; size = 4
_iMapX$228083 = -20					; size = 4
$T227983 = -16						; size = 4
_iPlotHexX$ = -12					; size = 4
_iPlotY$ = -8						; size = 4
_iStartHexX$ = -4					; size = 4
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
_iDX$ = 16						; size = 4
_iDY$ = 20						; size = 4
?plotXY@@YAPAVCvPlot@@HHHH@Z PROC			; plotXY, COMDAT

; 213  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H

; 214  : 	// convert the start coord to hex-space coordinates
; 215  : 	int iStartHexX = xToHexspaceX(iX, iY);

	cmp	DWORD PTR _iY$[ebp], 0
	jl	SHORT $LN5@plotXY
	mov	eax, DWORD PTR _iY$[ebp]
	sar	eax, 1
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN3@plotXY
$LN5@plotXY:
	mov	eax, DWORD PTR _iY$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv82[ebp], eax
$LN3@plotXY:
	mov	ecx, DWORD PTR _iX$[ebp]
	sub	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _iStartHexX$[ebp], ecx

; 216  : 
; 217  : 	int iPlotHexX = iStartHexX + iDX;

	mov	edx, DWORD PTR _iStartHexX$[ebp]
	add	edx, DWORD PTR _iDX$[ebp]
	mov	DWORD PTR _iPlotHexX$[ebp], edx

; 218  : 	int iPlotY = iY + iDY; // Y is the same in both coordinate systems

	mov	eax, DWORD PTR _iY$[ebp]
	add	eax, DWORD PTR _iDY$[ebp]
	mov	DWORD PTR _iPlotY$[ebp], eax

; 219  : 
; 220  : 	// convert from hex-space coordinates to the storage array
; 221  : 	iPlotHexX = hexspaceXToX(iPlotHexX, iPlotY);

	js	SHORT $LN9@plotXY
	mov	ecx, DWORD PTR _iPlotY$[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv86[ebp], ecx
	jmp	SHORT $LN7@plotXY
$LN9@plotXY:
	mov	eax, DWORD PTR _iPlotY$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv86[ebp], eax
$LN7@plotXY:
	mov	edx, DWORD PTR _iPlotHexX$[ebp]
	add	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _iPlotHexX$[ebp], edx

; 222  : 
; 223  : 	return GC.getMap().plot(iPlotHexX , iPlotY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T227983[ebp], eax
	cmp	DWORD PTR _iPlotHexX$[ebp], -2147483647	; 80000001H
	je	SHORT $LN13@plotXY
	cmp	DWORD PTR _iPlotY$[ebp], -2147483647	; 80000001H
	jne	SHORT $LN14@plotXY
$LN13@plotXY:
	mov	DWORD PTR $T228085[ebp], 0
	jmp	$LN15@plotXY
$LN14@plotXY:
	mov	ecx, DWORD PTR $T227983[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T227990[ebp], dl
	mov	eax, DWORD PTR $T227983[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T227994[ebp], ecx
	movzx	edx, BYTE PTR $T227990[ebp]
	test	edx, edx
	je	SHORT $LN26@plotXY
	cmp	DWORD PTR _iPlotHexX$[ebp], 0
	jge	SHORT $LN25@plotXY
	mov	eax, DWORD PTR _iPlotHexX$[ebp]
	cdq
	idiv	DWORD PTR $T227994[ebp]
	add	edx, DWORD PTR $T227994[ebp]
	mov	DWORD PTR _iMapX$228083[ebp], edx
	jmp	SHORT $LN27@plotXY
	jmp	SHORT $LN26@plotXY
$LN25@plotXY:
	mov	eax, DWORD PTR _iPlotHexX$[ebp]
	cmp	eax, DWORD PTR $T227994[ebp]
	jl	SHORT $LN26@plotXY
	mov	eax, DWORD PTR _iPlotHexX$[ebp]
	cdq
	idiv	DWORD PTR $T227994[ebp]
	mov	DWORD PTR _iMapX$228083[ebp], edx
	jmp	SHORT $LN27@plotXY
$LN26@plotXY:
	mov	ecx, DWORD PTR _iPlotHexX$[ebp]
	mov	DWORD PTR _iMapX$228083[ebp], ecx
$LN27@plotXY:
	mov	edx, DWORD PTR $T227983[ebp]
	mov	al, BYTE PTR [edx+4057]
	mov	BYTE PTR $T228005[ebp], al
	mov	ecx, DWORD PTR $T227983[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T228009[ebp], edx
	movzx	eax, BYTE PTR $T228005[ebp]
	test	eax, eax
	je	SHORT $LN36@plotXY
	cmp	DWORD PTR _iPlotY$[ebp], 0
	jge	SHORT $LN35@plotXY
	mov	eax, DWORD PTR _iPlotY$[ebp]
	cdq
	idiv	DWORD PTR $T228009[ebp]
	add	edx, DWORD PTR $T228009[ebp]
	mov	DWORD PTR _iMapY$228084[ebp], edx
	jmp	SHORT $LN37@plotXY
	jmp	SHORT $LN36@plotXY
$LN35@plotXY:
	mov	ecx, DWORD PTR _iPlotY$[ebp]
	cmp	ecx, DWORD PTR $T228009[ebp]
	jl	SHORT $LN36@plotXY
	mov	eax, DWORD PTR _iPlotY$[ebp]
	cdq
	idiv	DWORD PTR $T228009[ebp]
	mov	DWORD PTR _iMapY$228084[ebp], edx
	jmp	SHORT $LN37@plotXY
$LN36@plotXY:
	mov	edx, DWORD PTR _iPlotY$[ebp]
	mov	DWORD PTR _iMapY$228084[ebp], edx
$LN37@plotXY:
	cmp	DWORD PTR _iMapX$228083[ebp], 0
	jl	SHORT $LN41@plotXY
	mov	eax, DWORD PTR $T227983[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T228023[ebp], ecx
	mov	edx, DWORD PTR _iMapX$228083[ebp]
	cmp	edx, DWORD PTR $T228023[ebp]
	jge	SHORT $LN41@plotXY
	cmp	DWORD PTR _iMapY$228084[ebp], 0
	jl	SHORT $LN41@plotXY
	mov	eax, DWORD PTR $T227983[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T228027[ebp], ecx
	mov	edx, DWORD PTR _iMapY$228084[ebp]
	cmp	edx, DWORD PTR $T228027[ebp]
	jge	SHORT $LN41@plotXY
	mov	DWORD PTR tv163[ebp], 1
	jmp	SHORT $LN39@plotXY
$LN41@plotXY:
	mov	DWORD PTR tv163[ebp], 0
$LN39@plotXY:
	cmp	DWORD PTR tv163[ebp], 0
	je	SHORT $LN17@plotXY
	mov	eax, DWORD PTR $T227983[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T228040[ebp], ecx
	mov	edx, DWORD PTR _iMapY$228084[ebp]
	imul	edx, DWORD PTR $T228040[ebp]
	add	edx, DWORD PTR _iMapX$228083[ebp]
	imul	edx, 484				; 000001e4H
	mov	eax, DWORD PTR $T227983[ebp]
	add	edx, DWORD PTR [eax+4068]
	mov	DWORD PTR tv148[ebp], edx
	jmp	SHORT $LN18@plotXY
$LN17@plotXY:
	mov	DWORD PTR tv148[ebp], 0
$LN18@plotXY:
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR $T228085[ebp], ecx
$LN15@plotXY:
	mov	eax, DWORD PTR $T228085[ebp]

; 224  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?plotXY@@YAPAVCvPlot@@HHHH@Z ENDP			; plotXY
_TEXT	ENDS
PUBLIC	??1?$FFastSmallFixedList@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ ; FFastSmallFixedList<IDInfo,25,1,297,0>::~FFastSmallFixedList<IDInfo,25,1,297,0>
PUBLIC	??1?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<IDInfo,25,1,297,0>::~FStaticVector<IDInfo,25,1,297,0>
PUBLIC	??_C@_0O@HAICKHHL@Nuke?5Damage?52?$AA@		; `string'
PUBLIC	??_C@_0O@FLKPPELI@Nuke?5Damage?51?$AA@		; `string'
PUBLIC	?getAt@?$FFastSmallFixedList@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAEPAUIDInfo@@H@Z ; FFastSmallFixedList<IDInfo,25,1,297,0>::getAt
PUBLIC	?push_back@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAEIABUIDInfo@@@Z ; FStaticVector<IDInfo,25,1,297,0>::push_back
PUBLIC	?resize@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAEXI@Z ; FStaticVector<IDInfo,25,1,297,0>::resize
PUBLIC	??0?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<IDInfo,25,1,297,0>::FStaticVector<IDInfo,25,1,297,0>
PUBLIC	__$ArrayPad$
EXTRN	?isNukeImmune@CvUnit@@QBE_NXZ:PROC		; CvUnit::isNukeImmune
EXTRN	?getUnit@@YAPAVCvUnit@@ABUIDInfo@@@Z:PROC	; getUnit
EXTRN	?nextUnitNode@CvPlot@@QAEPAUIDInfo@@PAU2@@Z:PROC ; CvPlot::nextUnitNode
EXTRN	?headUnitNode@CvPlot@@QAEPAUIDInfo@@XZ:PROC	; CvPlot::headUnitNode
;	COMDAT ??_C@_0O@HAICKHHL@Nuke?5Damage?52?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0O@HAICKHHL@Nuke?5Damage?52?$AA@ DB 'Nuke Damage 2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FLKPPELI@Nuke?5Damage?51?$AA@
CONST	SEGMENT
??_C@_0O@FLKPPELI@Nuke?5Damage?51?$AA@ DB 'Nuke Damage 1', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z$0
__ehfuncinfo$?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z
_TEXT	SEGMENT
tv197 = -428						; size = 4
tv185 = -424						; size = 4
tv168 = -420						; size = 4
$T228246 = -404						; size = 4
$T228242 = -400						; size = 4
$T228238 = -396						; size = 4
$T228231 = -392						; size = 4
$T228225 = -388						; size = 4
$T228221 = -384						; size = 4
$T228214 = -380						; size = 4
$T228210 = -376						; size = 4
$T228203 = -372						; size = 4
$T228197 = -368						; size = 4
$T228188 = -364						; size = 4
$T228178 = -360						; size = 4
$T228174 = -356						; size = 4
$T228170 = -352						; size = 4
$T228166 = -348						; size = 4
$T228162 = -344						; size = 4
_iIndex$228155 = -340					; size = 4
_uSize$228142 = -336					; size = 4
$T228105 = -308						; size = 4
$T228101 = -304						; size = 4
$T228093 = -300						; size = 4
$T228092 = -296						; size = 4
$T228091 = -292						; size = 4
$T228090 = -288						; size = 4
$T228089 = -284						; size = 4
_iTotalDamage$222326 = -280				; size = 4
_pkDamageEntry$222330 = -276				; size = 4
_bKillCity$222320 = -269				; size = 1
_iNukeDamage$222305 = -268				; size = 4
_pkDamageEntry$222313 = -264				; size = 4
_pLoopUnit$222301 = -260				; size = 4
_pUnitNode$222294 = -256				; size = 4
_oldUnits$222293 = -252					; size = 216
__$ArrayPad$ = -36					; size = 4
_pLoopCity$222171 = -32					; size = 4
_pLoopPlot$222169 = -28					; size = 4
_iDY$222165 = -24					; size = 4
_iDX$222161 = -20					; size = 4
_iBlastRadius$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pkTargetPlot$ = 8					; size = 4
_iDamageLevel$ = 12					; size = 4
_pkAttacker$ = 16					; size = 4
_pkDamageArray$ = 20					; size = 4
_piDamageMembers$ = 24					; size = 4
_iMaxDamageMembers$ = 28				; size = 4
?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z PROC ; CvUnitCombat::GenerateNuclearExplosionDamage, COMDAT

; 2613 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 416				; 000001a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2614 : 	int iBlastRadius = GC.getNUKE_BLAST_RADIUS();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6672
	mov	DWORD PTR _iBlastRadius$[ebp], eax

; 2615 : 
; 2616 : 	*piDamageMembers = 0;

	mov	ecx, DWORD PTR _piDamageMembers$[ebp]
	mov	DWORD PTR [ecx], 0

; 2617 : 
; 2618 : #ifdef AUI_HEXSPACE_DX_LOOPS
; 2619 : 	int iMaxDX, iDX;
; 2620 : 	CvPlot* pLoopPlot;
; 2621 : 	for (int iDY = -iBlastRadius; iDY <= iBlastRadius; iDY++)
; 2622 : 	{
; 2623 : 		iMaxDX = iBlastRadius - MAX(0, iDY);
; 2624 : 		for (iDX = -iBlastRadius - MIN(0, iDY); iDX <= iMaxDX; iDX++) // MIN() and MAX() stuff is to reduce loops (hexspace!)
; 2625 : 		{
; 2626 : 			// No need for range check because loops are set up properly
; 2627 : 			pLoopPlot = plotXY(pkTargetPlot->getX(), pkTargetPlot->getY(), iDX, iDY);
; 2628 : #else
; 2629 : 	for(int iDX = -(iBlastRadius); iDX <= iBlastRadius; iDX++)

	mov	edx, DWORD PTR _iBlastRadius$[ebp]
	neg	edx
	mov	DWORD PTR _iDX$222161[ebp], edx
	jmp	SHORT $LN31@GenerateNu@2
$LN30@GenerateNu@2:
	mov	eax, DWORD PTR _iDX$222161[ebp]
	add	eax, 1
	mov	DWORD PTR _iDX$222161[ebp], eax
$LN31@GenerateNu@2:
	mov	ecx, DWORD PTR _iDX$222161[ebp]
	cmp	ecx, DWORD PTR _iBlastRadius$[ebp]
	jg	$LN32@GenerateNu@2

; 2630 : 	{
; 2631 : 		for(int iDY = -(iBlastRadius); iDY <= iBlastRadius; iDY++)

	mov	edx, DWORD PTR _iBlastRadius$[ebp]
	neg	edx
	mov	DWORD PTR _iDY$222165[ebp], edx
	jmp	SHORT $LN28@GenerateNu@2
$LN27@GenerateNu@2:
	mov	eax, DWORD PTR _iDY$222165[ebp]
	add	eax, 1
	mov	DWORD PTR _iDY$222165[ebp], eax
$LN28@GenerateNu@2:
	mov	ecx, DWORD PTR _iDY$222165[ebp]
	cmp	ecx, DWORD PTR _iBlastRadius$[ebp]
	jg	$LN26@GenerateNu@2

; 2632 : 		{
; 2633 : 			CvPlot* pLoopPlot = plotXYWithRangeCheck(pkTargetPlot->getX(), pkTargetPlot->getY(), iDX, iDY, iBlastRadius);

	mov	edx, DWORD PTR _pkTargetPlot$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	DWORD PTR $T228101[ebp], eax
	mov	ecx, DWORD PTR _pkTargetPlot$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	DWORD PTR $T228105[ebp], edx
	mov	eax, DWORD PTR _iBlastRadius$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iDY$222165[ebp]
	push	ecx
	mov	edx, DWORD PTR _iDX$222161[ebp]
	push	edx
	mov	eax, DWORD PTR $T228101[ebp]
	push	eax
	mov	ecx, DWORD PTR $T228105[ebp]
	push	ecx
	call	?plotXYWithRangeCheck@@YAPAVCvPlot@@HHHHH@Z ; plotXYWithRangeCheck
	add	esp, 20					; 00000014H
	mov	DWORD PTR _pLoopPlot$222169[ebp], eax

; 2634 : #endif
; 2635 : 
; 2636 : 			if(pLoopPlot != NULL)

	cmp	DWORD PTR _pLoopPlot$222169[ebp], 0
	je	$LN25@GenerateNu@2

; 2637 : 			{
; 2638 : 				CvCity* pLoopCity = pLoopPlot->getPlotCity();

	mov	ecx, DWORD PTR _pLoopPlot$222169[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pLoopCity$222171[ebp], eax

; 2639 : 
; 2640 : 				FFastSmallFixedList<IDInfo, 25, true, c_eCiv5GameplayDLL > oldUnits;

	lea	ecx, DWORD PTR _oldUnits$222293[ebp]
	call	??0?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<IDInfo,25,1,297,0>::FStaticVector<IDInfo,25,1,297,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	lea	ecx, DWORD PTR _oldUnits$222293[ebp]
	call	?resize@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAEXI@Z ; FStaticVector<IDInfo,25,1,297,0>::resize
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 2641 : 				IDInfo* pUnitNode = pLoopPlot->headUnitNode();

	mov	ecx, DWORD PTR _pLoopPlot$222169[ebp]
	call	?headUnitNode@CvPlot@@QAEPAUIDInfo@@XZ	; CvPlot::headUnitNode
	mov	DWORD PTR _pUnitNode$222294[ebp], eax
$LN24@GenerateNu@2:

; 2642 : 
; 2643 : 				while(pUnitNode != NULL)

	cmp	DWORD PTR _pUnitNode$222294[ebp], 0
	je	SHORT $LN23@GenerateNu@2

; 2644 : 				{
; 2645 : 					oldUnits.insertAtEnd(pUnitNode);

	mov	edx, DWORD PTR _pUnitNode$222294[ebp]
	push	edx
	lea	ecx, DWORD PTR _oldUnits$222293[ebp]
	call	?push_back@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAEIABUIDInfo@@@Z ; FStaticVector<IDInfo,25,1,297,0>::push_back

; 2646 : 					pUnitNode = pLoopPlot->nextUnitNode(pUnitNode);

	mov	eax, DWORD PTR _pUnitNode$222294[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLoopPlot$222169[ebp]
	call	?nextUnitNode@CvPlot@@QAEPAUIDInfo@@PAU2@@Z ; CvPlot::nextUnitNode
	mov	DWORD PTR _pUnitNode$222294[ebp], eax

; 2647 : 				}

	jmp	SHORT $LN24@GenerateNu@2
$LN23@GenerateNu@2:

; 2648 : 
; 2649 : 				pUnitNode = oldUnits.head();

	mov	ecx, DWORD PTR _oldUnits$222293[ebp+4]
	mov	DWORD PTR _uSize$228142[ebp], ecx
	cmp	DWORD PTR _uSize$228142[ebp], 0
	jbe	SHORT $LN69@GenerateNu@2
	xor	edx, edx
	shl	edx, 3
	add	edx, DWORD PTR _oldUnits$222293[ebp]
	mov	DWORD PTR _pUnitNode$222294[ebp], edx
	jmp	SHORT $LN22@GenerateNu@2
	jmp	SHORT $LN22@GenerateNu@2
$LN69@GenerateNu@2:
	mov	DWORD PTR _pUnitNode$222294[ebp], 0
$LN22@GenerateNu@2:

; 2650 : 
; 2651 : 				while(pUnitNode != NULL)

	cmp	DWORD PTR _pUnitNode$222294[ebp], 0
	je	$LN21@GenerateNu@2

; 2652 : 				{
; 2653 : 					CvUnit* pLoopUnit = ::getUnit(*pUnitNode);

	mov	eax, DWORD PTR _pUnitNode$222294[ebp]
	push	eax
	call	?getUnit@@YAPAVCvUnit@@ABUIDInfo@@@Z	; getUnit
	add	esp, 4
	mov	DWORD PTR _pLoopUnit$222301[ebp], eax

; 2654 : 					pUnitNode = oldUnits.next(pUnitNode);

	mov	ecx, DWORD PTR _pUnitNode$222294[ebp]
	add	ecx, 8
	xor	edx, edx
	shl	edx, 3
	add	edx, DWORD PTR _oldUnits$222293[ebp]
	sub	ecx, edx
	sar	ecx, 3
	mov	DWORD PTR _iIndex$228155[ebp], ecx
	mov	eax, DWORD PTR _iIndex$228155[ebp]
	push	eax
	lea	ecx, DWORD PTR _oldUnits$222293[ebp]
	call	?getAt@?$FFastSmallFixedList@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAEPAUIDInfo@@H@Z ; FFastSmallFixedList<IDInfo,25,1,297,0>::getAt
	mov	DWORD PTR _pUnitNode$222294[ebp], eax

; 2655 : 
; 2656 : 					if(pLoopUnit != NULL)

	cmp	DWORD PTR _pLoopUnit$222301[ebp], 0
	je	$LN20@GenerateNu@2

; 2657 : 					{
; 2658 : 						if(pLoopUnit != pkAttacker)

	mov	ecx, DWORD PTR _pLoopUnit$222301[ebp]
	cmp	ecx, DWORD PTR _pkAttacker$[ebp]
	je	$LN20@GenerateNu@2

; 2659 : 						{
; 2660 : 							if(!pLoopUnit->isNukeImmune() && !pLoopUnit->isDelayedDeath())

	mov	ecx, DWORD PTR _pLoopUnit$222301[ebp]
	call	?isNukeImmune@CvUnit@@QBE_NXZ		; CvUnit::isNukeImmune
	movzx	edx, al
	test	edx, edx
	jne	$LN20@GenerateNu@2
	mov	ecx, DWORD PTR _pLoopUnit$222301[ebp]
	call	?isDelayedDeath@CvUnit@@QBE_NXZ		; CvUnit::isDelayedDeath
	movzx	eax, al
	test	eax, eax
	jne	$LN20@GenerateNu@2

; 2661 : 							{
; 2662 : 								int iNukeDamage;
; 2663 : 								// How much destruction is unleashed on nearby Units?
; 2664 : 								if(iDamageLevel == 1 && pLoopPlot != pkTargetPlot)	// Nuke level 1, but NOT the plot that got hit directly (units there are killed)

	cmp	DWORD PTR _iDamageLevel$[ebp], 1
	jne	$LN17@GenerateNu@2
	mov	ecx, DWORD PTR _pLoopPlot$222169[ebp]
	cmp	ecx, DWORD PTR _pkTargetPlot$[ebp]
	je	SHORT $LN17@GenerateNu@2

; 2665 : 								{
; 2666 : 									iNukeDamage = (/*3*/ GC.getNUKE_UNIT_DAMAGE_BASE() + /*4*/ GC.getGame().getJonRandNum(GC.getNUKE_UNIT_DAMAGE_RAND_1(), "Nuke Damage 1") + /*4*/ GC.getGame().getJonRandNum(GC.getNUKE_UNIT_DAMAGE_RAND_2(), "Nuke Damage 2"));

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6624
	mov	DWORD PTR $T228162[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6628
	mov	DWORD PTR $T228166[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T228170[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6632
	mov	DWORD PTR $T228174[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T228178[ebp], eax
	push	OFFSET ??_C@_0O@FLKPPELI@Nuke?5Damage?51?$AA@
	mov	ecx, DWORD PTR $T228166[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228170[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	esi, eax
	add	esi, DWORD PTR $T228162[ebp]
	push	OFFSET ??_C@_0O@HAICKHHL@Nuke?5Damage?52?$AA@
	mov	edx, DWORD PTR $T228174[ebp]
	push	edx
	mov	ecx, DWORD PTR $T228178[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	add	esi, eax
	mov	DWORD PTR _iNukeDamage$222305[ebp], esi

; 2667 : 								}
; 2668 : 								// Wipe everything out
; 2669 : 								else

	jmp	SHORT $LN16@GenerateNu@2
$LN17@GenerateNu@2:

; 2670 : 								{
; 2671 : 									iNukeDamage = GC.getMAX_HIT_POINTS();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR _iNukeDamage$222305[ebp], eax
$LN16@GenerateNu@2:

; 2672 : 								}
; 2673 : 
; 2674 : 								if(pLoopCity != NULL)

	cmp	DWORD PTR _pLoopCity$222171[ebp], 0
	je	SHORT $LN15@GenerateNu@2

; 2675 : 								{
; 2676 : 									iNukeDamage *= std::max(0, (pLoopCity->getNukeModifier() + 100));

	mov	ecx, DWORD PTR _pLoopCity$222171[ebp]
	call	?getNukeModifier@CvCity@@QBEHXZ		; CvCity::getNukeModifier
	add	eax, 100				; 00000064H
	mov	DWORD PTR $T228089[ebp], eax
	mov	DWORD PTR $T228090[ebp], 0
	mov	ecx, DWORD PTR $T228090[ebp]
	cmp	ecx, DWORD PTR $T228089[ebp]
	jge	SHORT $LN94@GenerateNu@2
	lea	edx, DWORD PTR $T228089[ebp]
	mov	DWORD PTR tv168[ebp], edx
	jmp	SHORT $LN95@GenerateNu@2
$LN94@GenerateNu@2:
	lea	eax, DWORD PTR $T228090[ebp]
	mov	DWORD PTR tv168[ebp], eax
$LN95@GenerateNu@2:
	mov	ecx, DWORD PTR tv168[ebp]
	mov	DWORD PTR $T228188[ebp], ecx
	mov	edx, DWORD PTR $T228188[ebp]
	mov	eax, DWORD PTR _iNukeDamage$222305[ebp]
	imul	eax, DWORD PTR [edx]
	mov	DWORD PTR _iNukeDamage$222305[ebp], eax

; 2677 : 									iNukeDamage /= 100;

	mov	eax, DWORD PTR _iNukeDamage$222305[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iNukeDamage$222305[ebp], eax
$LN15@GenerateNu@2:

; 2678 : 								}
; 2679 : 
; 2680 : 								CvCombatMemberEntry* pkDamageEntry = AddCombatMember(pkDamageArray, piDamageMembers, iMaxDamageMembers, pLoopUnit);

	mov	edx, DWORD PTR _pLoopUnit$222301[ebp]
	push	edx
	mov	eax, DWORD PTR _iMaxDamageMembers$[ebp]
	push	eax
	mov	ecx, DWORD PTR _piDamageMembers$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkDamageArray$[ebp]
	push	edx
	call	?AddCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@PAHHPAVCvUnit@@@Z ; AddCombatMember
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pkDamageEntry$222313[ebp], eax

; 2681 : 								if(pkDamageEntry)

	cmp	DWORD PTR _pkDamageEntry$222313[ebp], 0
	je	$LN20@GenerateNu@2

; 2682 : 								{
; 2683 : 									pkDamageEntry->SetDamage(iNukeDamage);

	mov	eax, DWORD PTR _pkDamageEntry$222313[ebp]
	mov	cx, WORD PTR _iNukeDamage$222305[ebp]
	mov	WORD PTR [eax+10], cx

; 2684 : 									pkDamageEntry->SetFinalDamage(std::min(iNukeDamage + pLoopUnit->getDamage(), GC.getMAX_HIT_POINTS()));

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T228197[ebp], edx
	mov	eax, DWORD PTR $T228197[ebp]
	mov	DWORD PTR $T228091[ebp], eax
	mov	ecx, DWORD PTR _pLoopUnit$222301[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	add	eax, DWORD PTR _iNukeDamage$222305[ebp]
	mov	DWORD PTR $T228092[ebp], eax
	mov	ecx, DWORD PTR $T228091[ebp]
	cmp	ecx, DWORD PTR $T228092[ebp]
	jge	SHORT $LN102@GenerateNu@2
	lea	edx, DWORD PTR $T228091[ebp]
	mov	DWORD PTR tv185[ebp], edx
	jmp	SHORT $LN103@GenerateNu@2
$LN102@GenerateNu@2:
	lea	eax, DWORD PTR $T228092[ebp]
	mov	DWORD PTR tv185[ebp], eax
$LN103@GenerateNu@2:
	mov	ecx, DWORD PTR tv185[ebp]
	mov	DWORD PTR $T228203[ebp], ecx
	mov	edx, DWORD PTR $T228203[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T228210[ebp], eax
	mov	ecx, DWORD PTR _pkDamageEntry$222313[ebp]
	mov	dx, WORD PTR $T228210[ebp]
	mov	WORD PTR [ecx+12], dx

; 2685 : 									pkDamageEntry->SetMaxHitPoints(GC.getMAX_HIT_POINTS());

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T228214[ebp], eax
	mov	ecx, DWORD PTR _pkDamageEntry$222313[ebp]
	mov	dx, WORD PTR $T228214[ebp]
	mov	WORD PTR [ecx+14], dx

; 2686 : 									if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	SHORT $LN20@GenerateNu@2

; 2687 : 										pLoopUnit->setCombatUnit(pkAttacker);

	push	0
	mov	eax, DWORD PTR _pkAttacker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLoopUnit$222301[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit
$LN20@GenerateNu@2:

; 2688 : 								}
; 2689 : 								else
; 2690 : 								{
; 2691 : 									CvAssertMsg(*piDamageMembers < iMaxDamageMembers, "Ran out of entries for the nuclear damage array");
; 2692 : 								}
; 2693 : 							}
; 2694 : 						}
; 2695 : 					}
; 2696 : 				}

	jmp	$LN22@GenerateNu@2
$LN21@GenerateNu@2:

; 2697 : 
; 2698 : 				if(pLoopCity != NULL)

	cmp	DWORD PTR _pLoopCity$222171[ebp], 0
	je	$LN11@GenerateNu@2

; 2699 : 				{
; 2700 : 					bool bKillCity = false;

	mov	BYTE PTR _bKillCity$222320[ebp], 0

; 2701 : 
; 2702 : 					// Is the city wiped out? - no capitals!
; 2703 : 					if(!pLoopCity->IsOriginalCapital())

	mov	ecx, DWORD PTR _pLoopCity$222171[ebp]
	call	?IsOriginalCapital@CvCity@@QBE_NXZ	; CvCity::IsOriginalCapital
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN10@GenerateNu@2

; 2704 : 					{
; 2705 : 						if(iDamageLevel > 2)

	cmp	DWORD PTR _iDamageLevel$[ebp], 2
	jle	SHORT $LN9@GenerateNu@2

; 2706 : 						{
; 2707 : 							bKillCity = true;

	mov	BYTE PTR _bKillCity$222320[ebp], 1
	jmp	SHORT $LN10@GenerateNu@2
$LN9@GenerateNu@2:

; 2708 : 						}
; 2709 : 						else if(iDamageLevel > 1)

	cmp	DWORD PTR _iDamageLevel$[ebp], 1
	jle	SHORT $LN10@GenerateNu@2

; 2710 : 						{
; 2711 : 							if(pLoopCity->getPopulation() < /*5*/ GC.getNUKE_LEVEL2_ELIM_POPULATION_THRESHOLD())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6664
	mov	DWORD PTR $T228221[ebp], edx
	mov	ecx, DWORD PTR _pLoopCity$222171[ebp]
	call	?getPopulation@CvCity@@QBEHXZ		; CvCity::getPopulation
	cmp	eax, DWORD PTR $T228221[ebp]
	jge	SHORT $LN10@GenerateNu@2

; 2712 : 							{
; 2713 : 								bKillCity = true;

	mov	BYTE PTR _bKillCity$222320[ebp], 1
$LN10@GenerateNu@2:

; 2714 : 							}
; 2715 : 						}
; 2716 : 					}
; 2717 : 
; 2718 : 					int iTotalDamage;
; 2719 : 					if(bKillCity)

	movzx	eax, BYTE PTR _bKillCity$222320[ebp]
	test	eax, eax
	je	SHORT $LN5@GenerateNu@2

; 2720 : 					{
; 2721 : 						iTotalDamage = pLoopCity->GetMaxHitPoints();

	mov	ecx, DWORD PTR _pLoopCity$222171[ebp]
	call	?GetMaxHitPoints@CvCity@@QBEHXZ		; CvCity::GetMaxHitPoints
	mov	DWORD PTR _iTotalDamage$222326[ebp], eax

; 2722 : 					}
; 2723 : 					else

	jmp	$LN4@GenerateNu@2
$LN5@GenerateNu@2:

; 2724 : 					{
; 2725 : 						// Add damage to the city
; 2726 : 						iTotalDamage = (pLoopCity->GetMaxHitPoints() - pLoopCity->getDamage()) * /*50*/ GC.getNUKE_CITY_HIT_POINT_DAMAGE();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6668
	mov	DWORD PTR $T228225[ebp], ecx
	mov	ecx, DWORD PTR _pLoopCity$222171[ebp]
	call	?GetMaxHitPoints@CvCity@@QBEHXZ		; CvCity::GetMaxHitPoints
	mov	esi, eax
	mov	ecx, DWORD PTR _pLoopCity$222171[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	sub	esi, eax
	imul	esi, DWORD PTR $T228225[ebp]
	mov	DWORD PTR _iTotalDamage$222326[ebp], esi

; 2727 : 						iTotalDamage /= 100;

	mov	eax, DWORD PTR _iTotalDamage$222326[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iTotalDamage$222326[ebp], eax

; 2728 : 
; 2729 : 						iTotalDamage += pLoopCity->getDamage();

	mov	ecx, DWORD PTR _pLoopCity$222171[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	add	eax, DWORD PTR _iTotalDamage$222326[ebp]
	mov	DWORD PTR _iTotalDamage$222326[ebp], eax

; 2730 : 
; 2731 : 						// Can't bring a city below 1 HP
; 2732 : 						iTotalDamage = min(iTotalDamage, pLoopCity->GetMaxHitPoints() - 1);

	mov	ecx, DWORD PTR _pLoopCity$222171[ebp]
	call	?GetMaxHitPoints@CvCity@@QBEHXZ		; CvCity::GetMaxHitPoints
	sub	eax, 1
	mov	DWORD PTR $T228093[ebp], eax
	mov	edx, DWORD PTR $T228093[ebp]
	cmp	edx, DWORD PTR _iTotalDamage$222326[ebp]
	jge	SHORT $LN116@GenerateNu@2
	lea	eax, DWORD PTR $T228093[ebp]
	mov	DWORD PTR tv197[ebp], eax
	jmp	SHORT $LN117@GenerateNu@2
$LN116@GenerateNu@2:
	lea	ecx, DWORD PTR _iTotalDamage$222326[ebp]
	mov	DWORD PTR tv197[ebp], ecx
$LN117@GenerateNu@2:
	mov	edx, DWORD PTR tv197[ebp]
	mov	DWORD PTR $T228231[ebp], edx
	mov	eax, DWORD PTR $T228231[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _iTotalDamage$222326[ebp], ecx
$LN4@GenerateNu@2:

; 2733 : 					}
; 2734 : 
; 2735 : 					CvCombatMemberEntry* pkDamageEntry = AddCombatMember(pkDamageArray, piDamageMembers, iMaxDamageMembers, pLoopCity);

	mov	edx, DWORD PTR _pLoopCity$222171[ebp]
	push	edx
	mov	eax, DWORD PTR _iMaxDamageMembers$[ebp]
	push	eax
	mov	ecx, DWORD PTR _piDamageMembers$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkDamageArray$[ebp]
	push	edx
	call	?AddCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@PAHHPAVCvCity@@@Z ; AddCombatMember
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pkDamageEntry$222330[ebp], eax

; 2736 : 					if(pkDamageEntry)

	cmp	DWORD PTR _pkDamageEntry$222330[ebp], 0
	je	SHORT $LN11@GenerateNu@2

; 2737 : 					{
; 2738 : 						pkDamageEntry->SetDamage(iTotalDamage - pLoopCity->getDamage());

	mov	ecx, DWORD PTR _pLoopCity$222171[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	mov	ecx, DWORD PTR _iTotalDamage$222326[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T228238[ebp], ecx
	mov	edx, DWORD PTR _pkDamageEntry$222330[ebp]
	mov	ax, WORD PTR $T228238[ebp]
	mov	WORD PTR [edx+10], ax

; 2739 : 						pkDamageEntry->SetFinalDamage(iTotalDamage);

	mov	ecx, DWORD PTR _iTotalDamage$222326[ebp]
	mov	DWORD PTR $T228242[ebp], ecx
	mov	edx, DWORD PTR _pkDamageEntry$222330[ebp]
	mov	ax, WORD PTR $T228242[ebp]
	mov	WORD PTR [edx+12], ax

; 2740 : 						pkDamageEntry->SetMaxHitPoints(pLoopCity->GetMaxHitPoints());

	mov	ecx, DWORD PTR _pLoopCity$222171[ebp]
	call	?GetMaxHitPoints@CvCity@@QBEHXZ		; CvCity::GetMaxHitPoints
	mov	DWORD PTR $T228246[ebp], eax
	mov	ecx, DWORD PTR _pkDamageEntry$222330[ebp]
	mov	dx, WORD PTR $T228246[ebp]
	mov	WORD PTR [ecx+14], dx

; 2741 : 
; 2742 : 						if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	SHORT $LN11@GenerateNu@2

; 2743 : 							pLoopCity->setCombatUnit(pkAttacker);

	push	0
	mov	eax, DWORD PTR _pkAttacker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLoopCity$222171[ebp]
	call	?setCombatUnit@CvCity@@QAEXPAVCvUnit@@_N@Z ; CvCity::setCombatUnit
$LN11@GenerateNu@2:

; 2744 : 					}
; 2745 : 					else
; 2746 : 					{
; 2747 : 						CvAssertMsg(*piDamageMembers < iMaxDamageMembers, "Ran out of entries for the nuclear damage array");
; 2748 : 					}
; 2749 : 				}
; 2750 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _oldUnits$222293[ebp]
	call	??1?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<IDInfo,25,1,297,0>::~FStaticVector<IDInfo,25,1,297,0>
$LN25@GenerateNu@2:

; 2751 : 		}

	jmp	$LN27@GenerateNu@2
$LN26@GenerateNu@2:

; 2752 : 	}

	jmp	$LN30@GenerateNu@2
$LN32@GenerateNu@2:

; 2753 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z$1:
	lea	ecx, DWORD PTR _oldUnits$222293[ebp]
	jmp	??1?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<IDInfo,25,1,297,0>::~FStaticVector<IDInfo,25,1,297,0>
__unwindfunclet$?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z$0:
	lea	ecx, DWORD PTR _oldUnits$222293[ebp]
	jmp	??1?$FFastSmallFixedList@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ
__ehhandler$?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-424]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GenerateNuclearExplosionDamage@CvUnitCombat@@KAXPAVCvPlot@@HPAVCvUnit@@PAUCvCombatMemberEntry@@PAHH@Z ENDP ; CvUnitCombat::GenerateNuclearExplosionDamage
EXTRN	?GetIDInfo@CvUnit@@QBE?AUIDInfo@@XZ:PROC	; CvUnit::GetIDInfo
EXTRN	?GetCurrentEra@CvPlayer@@QBE?AW4EraTypes@@XZ:PROC ; CvPlayer::GetCurrentEra
; Function compile flags: /Odtp
;	COMDAT ?AddCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@PAHHPAVCvUnit@@@Z
_TEXT	SEGMENT
$T228317 = -24						; size = 4
$T228308 = -20						; size = 4
$T228299 = -16						; size = 4
$T228295 = -12						; size = 4
$T228286 = -8						; size = 8
_pkArray$ = 8						; size = 4
_piMembers$ = 12					; size = 4
_iMaxMembers$ = 16					; size = 4
_pkMember$ = 20						; size = 4
?AddCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@PAHHPAVCvUnit@@@Z PROC ; AddCombatMember, COMDAT

; 83   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 84   : 	if(pkMember)

	cmp	DWORD PTR _pkMember$[ebp], 0
	je	SHORT $LN1@AddCombatM

; 85   : 		return AddCombatMember(pkArray, piMembers, iMaxMembers, pkMember->GetIDInfo(), CvCombatMemberEntry::MEMBER_UNIT, pkMember->getX(), pkMember->getY(), GET_PLAYER(pkMember->getOwner()).GetCurrentEra());

	mov	eax, DWORD PTR _pkMember$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T228295[ebp], ecx
	mov	edx, DWORD PTR $T228295[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T228299[ebp], edx
	mov	eax, DWORD PTR _pkMember$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR $T228308[ebp], ecx
	mov	edx, DWORD PTR _pkMember$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR $T228317[ebp], eax
	mov	ecx, DWORD PTR $T228299[ebp]
	call	?GetCurrentEra@CvPlayer@@QBE?AW4EraTypes@@XZ ; CvPlayer::GetCurrentEra
	push	eax
	mov	ecx, DWORD PTR $T228308[ebp]
	push	ecx
	mov	edx, DWORD PTR $T228317[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR $T228286[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkMember$[ebp]
	call	?GetIDInfo@CvUnit@@QBE?AUIDInfo@@XZ	; CvUnit::GetIDInfo
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _iMaxMembers$[ebp]
	push	eax
	mov	ecx, DWORD PTR _piMembers$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkArray$[ebp]
	push	edx
	call	?AddCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@PAHHUIDInfo@@W4MEMBER_TYPE@1@HHW4EraTypes@@@Z ; AddCombatMember
	add	esp, 36					; 00000024H
	jmp	SHORT $LN2@AddCombatM
$LN1@AddCombatM:

; 86   : 
; 87   : 	return NULL;

	xor	eax, eax
$LN2@AddCombatM:

; 88   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AddCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@PAHHPAVCvUnit@@@Z ENDP ; AddCombatMember
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?AddCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@PAHHUIDInfo@@W4MEMBER_TYPE@1@HHW4EraTypes@@@Z
_TEXT	SEGMENT
_kEntry$221107 = -8					; size = 4
_iCount$221105 = -4					; size = 4
_pkArray$ = 8						; size = 4
_piMembers$ = 12					; size = 4
_iMaxMembers$ = 16					; size = 4
_kMember$ = 20						; size = 8
_eType$ = 28						; size = 4
_iX$ = 32						; size = 4
_iY$ = 36						; size = 4
_eEra$ = 40						; size = 4
?AddCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@PAHHUIDInfo@@W4MEMBER_TYPE@1@HHW4EraTypes@@@Z PROC ; AddCombatMember, COMDAT

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 60   : 	if(*piMembers < iMaxMembers)

	mov	eax, DWORD PTR _piMembers$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _iMaxMembers$[ebp]
	jge	$LN2@AddCombatM@2

; 61   : 	{
; 62   : 		int iCount = *piMembers;

	mov	edx, DWORD PTR _piMembers$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _iCount$221105[ebp], eax

; 63   : 		if(!FindCombatMember(pkArray, iCount, kMember, eType))

	mov	ecx, DWORD PTR _eType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kMember$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _kMember$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iCount$221105[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkArray$[ebp]
	push	edx
	call	?FindCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@HUIDInfo@@W4MEMBER_TYPE@1@@Z ; FindCombatMember
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	$LN2@AddCombatM@2

; 64   : 		{
; 65   : 			CvCombatMemberEntry& kEntry = pkArray[iCount];

	mov	eax, DWORD PTR _iCount$221105[ebp]
	imul	eax, 36					; 00000024H
	add	eax, DWORD PTR _pkArray$[ebp]
	mov	DWORD PTR _kEntry$221107[ebp], eax

; 66   : 			kEntry.SetPlayer(kMember.eOwner);

	mov	ecx, DWORD PTR _kEntry$221107[ebp]
	mov	edx, DWORD PTR _kMember$[ebp]
	mov	DWORD PTR [ecx], edx

; 67   : 			kEntry.SetID(kMember.iID, eType);

	mov	eax, DWORD PTR _kEntry$221107[ebp]
	mov	ecx, DWORD PTR _kMember$[ebp+4]
	mov	DWORD PTR [eax+4], ecx
	cmp	DWORD PTR _eType$[ebp], 0
	jne	SHORT $LN8@AddCombatM@2
	mov	edx, DWORD PTR _kEntry$221107[ebp]
	movzx	eax, WORD PTR [edx+8]
	and	eax, -2					; fffffffeH
	mov	ecx, DWORD PTR _kEntry$221107[ebp]
	mov	WORD PTR [ecx+8], ax
	jmp	SHORT $LN9@AddCombatM@2
$LN8@AddCombatM@2:
	mov	edx, DWORD PTR _kEntry$221107[ebp]
	movzx	eax, WORD PTR [edx+8]
	or	eax, 1
	mov	ecx, DWORD PTR _kEntry$221107[ebp]
	mov	WORD PTR [ecx+8], ax
$LN9@AddCombatM@2:

; 68   : 			kEntry.SetDamage(0);

	xor	edx, edx
	mov	eax, DWORD PTR _kEntry$221107[ebp]
	mov	WORD PTR [eax+10], dx

; 69   : 			kEntry.SetFinalDamage(0);

	xor	ecx, ecx
	mov	edx, DWORD PTR _kEntry$221107[ebp]
	mov	WORD PTR [edx+12], cx

; 70   : 			kEntry.SetMaxHitPoints(0);

	xor	eax, eax
	mov	ecx, DWORD PTR _kEntry$221107[ebp]
	mov	WORD PTR [ecx+14], ax

; 71   : 			kEntry.SetPlot(iX, iY);

	mov	edx, DWORD PTR _kEntry$221107[ebp]
	mov	ax, WORD PTR _iX$[ebp]
	mov	WORD PTR [edx+16], ax
	mov	ecx, DWORD PTR _kEntry$221107[ebp]
	mov	dx, WORD PTR _iY$[ebp]
	mov	WORD PTR [ecx+18], dx

; 72   : 			kEntry.SetEra(eEra);

	mov	eax, DWORD PTR _kEntry$221107[ebp]
	mov	ecx, DWORD PTR _eEra$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 73   : 			*piMembers += 1;

	mov	edx, DWORD PTR _piMembers$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _piMembers$[ebp]
	mov	DWORD PTR [ecx], eax

; 74   : 			return &(pkArray[iCount]);

	mov	eax, DWORD PTR _iCount$221105[ebp]
	imul	eax, 36					; 00000024H
	add	eax, DWORD PTR _pkArray$[ebp]
	jmp	SHORT $LN3@AddCombatM@2
$LN2@AddCombatM@2:

; 75   : 		}
; 76   : 	}
; 77   : 	return NULL;

	xor	eax, eax
$LN3@AddCombatM@2:

; 78   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AddCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@PAHHUIDInfo@@W4MEMBER_TYPE@1@HHW4EraTypes@@@Z ENDP ; AddCombatMember
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?FindCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@HUIDInfo@@W4MEMBER_TYPE@1@@Z
_TEXT	SEGMENT
tv128 = -16						; size = 4
$T228370 = -12						; size = 4
$T228366 = -8						; size = 4
$T228362 = -1						; size = 1
_pkArray$ = 8						; size = 4
_iMembers$ = 12						; size = 4
_kMember$ = 16						; size = 8
_eType$ = 24						; size = 4
?FindCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@HUIDInfo@@W4MEMBER_TYPE@1@@Z PROC ; FindCombatMember, COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 40   : 	if(iMembers > 0)

	cmp	DWORD PTR _iMembers$[ebp], 0
	jle	$LN5@FindCombat
$LN4@FindCombat:

; 41   : 	{
; 42   : 		while(iMembers--)

	mov	eax, DWORD PTR _iMembers$[ebp]
	mov	ecx, DWORD PTR _iMembers$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _iMembers$[ebp], ecx
	test	eax, eax
	je	$LN5@FindCombat

; 43   : 		{
; 44   : 			if(pkArray->IsType(eType))

	mov	edx, DWORD PTR _pkArray$[ebp]
	cmp	DWORD PTR [edx], -1
	je	SHORT $LN15@FindCombat
	mov	eax, DWORD PTR _pkArray$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN15@FindCombat
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN13@FindCombat
$LN15@FindCombat:
	mov	DWORD PTR tv128[ebp], 0
$LN13@FindCombat:
	movzx	ecx, BYTE PTR tv128[ebp]
	test	ecx, ecx
	je	SHORT $LN10@FindCombat
	mov	edx, DWORD PTR _pkArray$[ebp]
	movzx	eax, WORD PTR [edx+8]
	and	eax, 1
	je	SHORT $LN9@FindCombat
	xor	ecx, ecx
	cmp	DWORD PTR _eType$[ebp], 1
	sete	cl
	mov	BYTE PTR $T228362[ebp], cl
	jmp	SHORT $LN11@FindCombat
	jmp	SHORT $LN10@FindCombat
$LN9@FindCombat:
	xor	edx, edx
	cmp	DWORD PTR _eType$[ebp], 0
	sete	dl
	mov	BYTE PTR $T228362[ebp], dl
	jmp	SHORT $LN11@FindCombat
$LN10@FindCombat:
	mov	BYTE PTR $T228362[ebp], 0
$LN11@FindCombat:
	movzx	eax, BYTE PTR $T228362[ebp]
	test	eax, eax
	je	SHORT $LN2@FindCombat

; 45   : 			{
; 46   : 				if(pkArray->GetID() == kMember.iID && pkArray->GetPlayer() == kMember.eOwner)

	mov	ecx, DWORD PTR _pkArray$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T228366[ebp], edx
	mov	eax, DWORD PTR $T228366[ebp]
	cmp	eax, DWORD PTR _kMember$[ebp+4]
	jne	SHORT $LN2@FindCombat
	mov	ecx, DWORD PTR _pkArray$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T228370[ebp], edx
	mov	eax, DWORD PTR $T228370[ebp]
	cmp	eax, DWORD PTR _kMember$[ebp]
	jne	SHORT $LN2@FindCombat

; 47   : 					return pkArray;

	mov	eax, DWORD PTR _pkArray$[ebp]
	jmp	SHORT $LN6@FindCombat
$LN2@FindCombat:

; 48   : 			}
; 49   : 			++pkArray;

	mov	ecx, DWORD PTR _pkArray$[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR _pkArray$[ebp], ecx

; 50   : 		}

	jmp	$LN4@FindCombat
$LN5@FindCombat:

; 51   : 	}
; 52   : 
; 53   : 	return NULL;

	xor	eax, eax
$LN6@FindCombat:

; 54   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@HUIDInfo@@W4MEMBER_TYPE@1@@Z ENDP ; FindCombatMember
_TEXT	ENDS
EXTRN	?GetIDInfo@CvCity@@QBE?AUIDInfo@@XZ:PROC	; CvCity::GetIDInfo
; Function compile flags: /Odtp
;	COMDAT ?AddCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@PAHHPAVCvCity@@@Z
_TEXT	SEGMENT
$T228404 = -24						; size = 4
$T228395 = -20						; size = 4
$T228386 = -16						; size = 4
$T228382 = -12						; size = 4
$T228373 = -8						; size = 8
_pkArray$ = 8						; size = 4
_piMembers$ = 12					; size = 4
_iMaxMembers$ = 16					; size = 4
_pkMember$ = 20						; size = 4
?AddCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@PAHHPAVCvCity@@@Z PROC ; AddCombatMember, COMDAT

; 93   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 94   : 	if(pkMember)

	cmp	DWORD PTR _pkMember$[ebp], 0
	je	SHORT $LN1@AddCombatM@3

; 95   : 		return AddCombatMember(pkArray, piMembers, iMaxMembers, pkMember->GetIDInfo(), CvCombatMemberEntry::MEMBER_CITY, pkMember->getX(), pkMember->getY(), GET_PLAYER(pkMember->getOwner()).GetCurrentEra());

	mov	eax, DWORD PTR _pkMember$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T228382[ebp], ecx
	mov	edx, DWORD PTR $T228382[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T228386[ebp], edx
	mov	eax, DWORD PTR _pkMember$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR $T228395[ebp], ecx
	mov	edx, DWORD PTR _pkMember$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR $T228404[ebp], eax
	mov	ecx, DWORD PTR $T228386[ebp]
	call	?GetCurrentEra@CvPlayer@@QBE?AW4EraTypes@@XZ ; CvPlayer::GetCurrentEra
	push	eax
	mov	ecx, DWORD PTR $T228395[ebp]
	push	ecx
	mov	edx, DWORD PTR $T228404[ebp]
	push	edx
	push	1
	lea	eax, DWORD PTR $T228373[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkMember$[ebp]
	call	?GetIDInfo@CvCity@@QBE?AUIDInfo@@XZ	; CvCity::GetIDInfo
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _iMaxMembers$[ebp]
	push	eax
	mov	ecx, DWORD PTR _piMembers$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkArray$[ebp]
	push	edx
	call	?AddCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@PAHHUIDInfo@@W4MEMBER_TYPE@1@HHW4EraTypes@@@Z ; AddCombatMember
	add	esp, 36					; 00000024H
	jmp	SHORT $LN2@AddCombatM@3
$LN1@AddCombatM@3:

; 96   : 
; 97   : 	return NULL;

	xor	eax, eax
$LN2@AddCombatM@3:

; 98   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AddCombatMember@@YAPAUCvCombatMemberEntry@@PAU1@PAHHPAVCvCity@@@Z ENDP ; AddCombatMember
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$FFastSmallFixedList@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
??1?$FFastSmallFixedList@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ PROC ; FFastSmallFixedList<IDInfo,25,1,297,0>::~FFastSmallFixedList<IDInfo,25,1,297,0>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<IDInfo,25,1,297,0>::~FStaticVector<IDInfo,25,1,297,0>
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$FFastSmallFixedList@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ ENDP ; FFastSmallFixedList<IDInfo,25,1,297,0>::~FFastSmallFixedList<IDInfo,25,1,297,0>
_TEXT	ENDS
PUBLIC	??_C@_0BC@JBNLAHCE@CIVILIZATION_MAYA?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ResolveNuclearCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveNuclearCombat
EXTRN	?setAttackPlot@CvUnit@@QAEXPBVCvPlot@@_N@Z:PROC	; CvUnit::setAttackPlot
EXTRN	__imp__strncmp:PROC
EXTRN	?getCivilizationTypeKey@CvPlayer@@QBEPBDXZ:PROC	; CvPlayer::getCivilizationTypeKey
EXTRN	?getGameTurnYear@CvGame@@QAEHXZ:PROC		; CvGame::getGameTurnYear
EXTRN	?getDamageMembers@CvCombatInfo@@QBEPBUCvCombatMemberEntry@@XZ:PROC ; CvCombatInfo::getDamageMembers
EXTRN	?getDamageMemberCount@CvCombatInfo@@QBEHXZ:PROC	; CvCombatInfo::getDamageMemberCount
EXTRN	?getAttackNuclearLevel@CvCombatInfo@@QBEHXZ:PROC ; CvCombatInfo::getAttackNuclearLevel
EXTRN	?setTransportUnit@CvUnit@@QAEXPAV1@@Z:PROC	; CvUnit::setTransportUnit
EXTRN	?changeNukesExploded@CvGame@@QAEXH@Z:PROC	; CvGame::changeNukesExploded
;	COMDAT ??_C@_0BC@JBNLAHCE@CIVILIZATION_MAYA?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BC@JBNLAHCE@CIVILIZATION_MAYA?$AA@ DB 'CIVILIZATION_MAYA', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ResolveNuclearCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveNuclearCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$0
__ehfuncinfo$?ResolveNuclearCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ResolveNuclearCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?ResolveNuclearCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
_TEXT	SEGMENT
tv173 = -108						; size = 4
tv140 = -104						; size = 4
$T228496 = -100						; size = 4
$T228492 = -96						; size = 4
$T228483 = -92						; size = 4
$T228479 = -88						; size = 4
$T228475 = -84						; size = 4
$T228471 = -80						; size = 4
$T228467 = -76						; size = 4
$T228463 = -72						; size = 4
$T228459 = -68						; size = 4
$T228455 = -64						; size = 4
$T228446 = -60						; size = 4
_kPlayer$222348 = -56					; size = 4
_pkTargetPlot$ = -52					; size = 4
_strBuffer$ = -48					; size = 28
__$ArrayPad$ = -20					; size = 4
_pkAttacker$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kCombatInfo$ = 8					; size = 4
_uiParentEventID$ = 12					; size = 4
?ResolveNuclearCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z PROC ; CvUnitCombat::ResolveNuclearCombat, COMDAT

; 2759 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResolveNuclearCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2760 : 	UNREFERENCED_PARAMETER(uiParentEventID);
; 2761 : 
; 2762 : 	CvUnit* pkAttacker = kCombatInfo.getUnit(BATTLE_UNIT_ATTACKER);

	push	0
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pkAttacker$[ebp], eax

; 2763 : 	CvAssert_Debug(pkAttacker);
; 2764 : 
; 2765 : 	CvPlot* pkTargetPlot = kCombatInfo.getPlot();

	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ	; CvCombatInfo::getPlot
	mov	DWORD PTR _pkTargetPlot$[ebp], eax

; 2766 : 	CvAssert_Debug(pkTargetPlot);
; 2767 : 
; 2768 : 	CvString strBuffer;

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2769 : 
; 2770 : 	GC.getGame().changeNukesExploded(1);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T228446[ebp], eax
	push	1
	mov	ecx, DWORD PTR $T228446[ebp]
	call	?changeNukesExploded@CvGame@@QAEXH@Z	; CvGame::changeNukesExploded

; 2771 : 
; 2772 : 	if(pkAttacker)

	cmp	DWORD PTR _pkAttacker$[ebp], 0
	je	$LN9@ResolveNuc

; 2773 : 	{
; 2774 : 		// Make sure we are disconnected from any unit transporting the attacker (i.e. its a missile)
; 2775 : 		pkAttacker->setTransportUnit(NULL);

	push	0
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?setTransportUnit@CvUnit@@QAEXPAV1@@Z	; CvUnit::setTransportUnit

; 2776 : 
; 2777 : 		if(pkTargetPlot)

	cmp	DWORD PTR _pkTargetPlot$[ebp], 0
	je	$LN8@ResolveNuc

; 2778 : 		{
; 2779 : 			if(ApplyNuclearExplosionDamage(kCombatInfo.getDamageMembers(), kCombatInfo.getDamageMemberCount(), pkAttacker, pkTargetPlot, kCombatInfo.getAttackNuclearLevel() - 1) > 0)

	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getAttackNuclearLevel@CvCombatInfo@@QBEHXZ ; CvCombatInfo::getAttackNuclearLevel
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pkTargetPlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getDamageMemberCount@CvCombatInfo@@QBEHXZ ; CvCombatInfo::getDamageMemberCount
	push	eax
	mov	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?getDamageMembers@CvCombatInfo@@QBEPBUCvCombatMemberEntry@@XZ ; CvCombatInfo::getDamageMembers
	push	eax
	call	?ApplyNuclearExplosionDamage@CvUnitCombat@@KAIPBUCvCombatMemberEntry@@HPAVCvUnit@@PAVCvPlot@@H@Z ; CvUnitCombat::ApplyNuclearExplosionDamage
	add	esp, 20					; 00000014H
	test	eax, eax
	jbe	$LN8@ResolveNuc

; 2780 : 			{
; 2781 : 				if(pkAttacker->getOwner() == GC.getGame().getActivePlayer())

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T228455[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T228459[ebp], edx
	mov	ecx, DWORD PTR $T228459[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T228455[ebp], eax
	jne	$LN8@ResolveNuc

; 2782 : 				{
; 2783 : 					// Must damage someone to get the achievement.
; 2784 : 					gDLL->UnlockAchievement(ACHIEVEMENT_DROP_NUKE);

	mov	eax, DWORD PTR $T228463[ebp]
	mov	DWORD PTR tv140[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv140[ebp], ecx
	push	72					; 00000048H
	mov	edx, DWORD PTR tv140[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv140[ebp]
	mov	edx, DWORD PTR [eax+828]
	call	edx

; 2785 : 
; 2786 : 					if(GC.getGame().getGameTurnYear() == 2012)

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T228467[ebp], eax
	mov	ecx, DWORD PTR $T228467[ebp]
	call	?getGameTurnYear@CvGame@@QAEHXZ		; CvGame::getGameTurnYear
	cmp	eax, 2012				; 000007dcH
	jne	SHORT $LN8@ResolveNuc

; 2787 : 					{
; 2788 : 						CvPlayerAI& kPlayer = GET_PLAYER(GC.getGame().getActivePlayer());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T228471[ebp], ecx
	mov	ecx, DWORD PTR $T228471[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	mov	DWORD PTR $T228475[ebp], eax
	mov	edx, DWORD PTR $T228475[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$222348[ebp], edx

; 2789 : 						if(strncmp(kPlayer.getCivilizationTypeKey(), "CIVILIZATION_MAYA", 32) == 0)

	push	32					; 00000020H
	push	OFFSET ??_C@_0BC@JBNLAHCE@CIVILIZATION_MAYA?$AA@
	mov	ecx, DWORD PTR _kPlayer$222348[ebp]
	call	?getCivilizationTypeKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationTypeKey
	push	eax
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@ResolveNuc

; 2790 : 						{
; 2791 : 							gDLL->UnlockAchievement(ACHIEVEMENT_XP1_36);

	mov	eax, DWORD PTR $T228479[ebp]
	mov	DWORD PTR tv173[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv173[ebp], ecx
	push	226					; 000000e2H
	mov	edx, DWORD PTR tv173[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv173[ebp]
	mov	edx, DWORD PTR [eax+828]
	call	edx
$LN8@ResolveNuc:

; 2792 : 						}
; 2793 : 
; 2794 : 					}
; 2795 : 
; 2796 : 				}
; 2797 : 			}
; 2798 : 		}
; 2799 : 
; 2800 : 		// Suicide Unit (currently all nuclear attackers are)
; 2801 : 		if(pkAttacker->isSuicide())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isSuicide@CvUnit@@QBE_NXZ		; CvUnit::isSuicide
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@ResolveNuc

; 2802 : 		{
; 2803 : 			pkAttacker->setCombatUnit(NULL);	// Must clear this if doing a delayed kill, should this be part of the kill method?

	push	0
	push	0
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 2804 : 			pkAttacker->setAttackPlot(NULL, false);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?setAttackPlot@CvUnit@@QAEXPBVCvPlot@@_N@Z ; CvUnit::setAttackPlot

; 2805 : 			pkAttacker->kill(true);

	push	-1
	push	1
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z	; CvUnit::kill

; 2806 : 		}
; 2807 : 		else

	jmp	SHORT $LN38@ResolveNuc
$LN3@ResolveNuc:

; 2808 : 		{
; 2809 : 			CvAssertMsg(pkAttacker->isSuicide(), "A nuke unit that is not a one time use?");
; 2810 : 
; 2811 : 			// Clean up some stuff
; 2812 : 			pkAttacker->setCombatUnit(NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 2813 : 			pkAttacker->ClearMissionQueue(GetPostCombatDelay());

	call	?GetPostCombatDelay@@YAHXZ		; GetPostCombatDelay
	push	eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?ClearMissionQueue@CvUnit@@QAEXH@Z	; CvUnit::ClearMissionQueue

; 2814 : 			pkAttacker->SetAutomateType(NO_AUTOMATE); // kick unit out of automation

	push	-1
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?SetAutomateType@CvUnit@@QAEXW4AutomateTypes@@@Z ; CvUnit::SetAutomateType

; 2815 : 
; 2816 : 			// Spend a move for this attack
; 2817 : 			pkAttacker->changeMoves(-GC.getMOVE_DENOMINATOR());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6236
	mov	DWORD PTR $T228483[ebp], ecx
	mov	edx, DWORD PTR $T228483[ebp]
	neg	edx
	push	edx
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?changeMoves@CvUnit@@QAEXH@Z		; CvUnit::changeMoves

; 2818 : 
; 2819 : 			// Can't move or attack again
; 2820 : #ifdef NQ_UNIT_TURN_ENDS_ON_FINAL_ATTACK
; 2821 : 			if(!pkAttacker->canMoveAfterAttacking() && pkAttacker->isOutOfAttacks())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?canMoveAfterAttacking@CvUnit@@QBE_NXZ	; CvUnit::canMoveAfterAttacking
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN38@ResolveNuc
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?isOutOfAttacks@CvUnit@@QBE_NXZ		; CvUnit::isOutOfAttacks
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN38@ResolveNuc

; 2822 : #else
; 2823 : 			if(!pkAttacker->canMoveAfterAttacking())
; 2824 : #endif
; 2825 : 			{
; 2826 : 				pkAttacker->finishMoves();

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?finishMoves@CvUnit@@QAEXXZ		; CvUnit::finishMoves

; 2827 : 			}
; 2828 : 		}
; 2829 : 
; 2830 : 		// Report that combat is over in case we want to queue another attack
; 2831 : 		GET_PLAYER(pkAttacker->getOwner()).GetTacticalAI()->CombatResolved(pkAttacker, true);

$LN38@ResolveNuc:
	mov	edx, DWORD PTR _pkAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T228492[ebp], eax
	mov	ecx, DWORD PTR $T228492[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T228496[ebp], ecx
	push	0
	push	1
	mov	edx, DWORD PTR _pkAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T228496[ebp]
	call	?GetTacticalAI@CvPlayer@@QBEPAVCvTacticalAI@@XZ ; CvPlayer::GetTacticalAI
	mov	ecx, eax
	call	?CombatResolved@CvTacticalAI@@QAEXPAX_N1@Z ; CvTacticalAI::CombatResolved
$LN9@ResolveNuc:

; 2832 : 	}
; 2833 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResolveNuclearCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z$0:
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?ResolveNuclearCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResolveNuclearCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResolveNuclearCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ENDP ; CvUnitCombat::ResolveNuclearCombat
PUBLIC	__real@3f000000
PUBLIC	?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveCombat
EXTRN	??3CvDllUnit@@SAXPAX@Z:PROC			; CvDllUnit::operator delete
EXTRN	?getARTIFACT_BATTLE_MELEE@CvTypes@@YA?BW4GreatWorkArtifactClass@@XZ:PROC ; CvTypes::getARTIFACT_BATTLE_MELEE
EXTRN	?AddArchaeologicalRecord@CvPlot@@QAEXW4GreatWorkArtifactClass@@W4PlayerTypes@@1@Z:PROC ; CvPlot::AddArchaeologicalRecord
EXTRN	?getARTIFACT_BATTLE_RANGED@CvTypes@@YA?BW4GreatWorkArtifactClass@@XZ:PROC ; CvTypes::getARTIFACT_BATTLE_RANGED
EXTRN	?getAttackIsRanged@CvCombatInfo@@QBE_NXZ:PROC	; CvCombatInfo::getAttackIsRanged
EXTRN	?getAttackIsAirSweep@CvCombatInfo@@QBE_NXZ:PROC	; CvCombatInfo::getAttackIsAirSweep
EXTRN	?getAttackIsBombingMission@CvCombatInfo@@QBE_NXZ:PROC ; CvCombatInfo::getAttackIsBombingMission
EXTRN	?getAttackIsNuclear@CvCombatInfo@@QBE_NXZ:PROC	; CvCombatInfo::getAttackIsNuclear
EXTRN	?isInvisible@CvUnit@@QBE_NW4TeamTypes@@_N1@Z:PROC ; CvUnit::isInvisible
EXTRN	??0CvDllUnit@@QAE@PAVCvUnit@@@Z:PROC		; CvDllUnit::CvDllUnit
EXTRN	??2CvDllUnit@@SAPAXI@Z:PROC			; CvDllUnit::operator new
EXTRN	?getActiveTeam@CvGame@@QAE?AW4TeamTypes@@XZ:PROC ; CvGame::getActiveTeam
;	COMDAT __real@3f000000
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z$5
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z
_TEXT	SEGMENT
tv362 = -216						; size = 4
tv217 = -212						; size = 4
tv207 = -208						; size = 4
tv173 = -204						; size = 4
tv163 = -200						; size = 4
tv129 = -196						; size = 4
tv87 = -192						; size = 4
$T228681 = -188						; size = 4
$T228677 = -184						; size = 4
$T228673 = -180						; size = 4
$T228672 = -176						; size = 4
$T228663 = -172						; size = 4
$T228662 = -168						; size = 4
$T228653 = -164						; size = 4
$T228652 = -160						; size = 4
$T228643 = -156						; size = 4
$T228642 = -152						; size = 4
$T228633 = -148						; size = 4
$T228632 = -144						; size = 4
$T228623 = -140						; size = 4
$T228622 = -136						; size = 4
_inst$228612 = -132					; size = 4
$T228608 = -128						; size = 4
$T228599 = -124						; size = 4
$T228595 = -120						; size = 4
_inst$228587 = -116					; size = 4
$T228583 = -112						; size = 4
$T228574 = -108						; size = 4
$T228570 = -104						; size = 4
_inst$228562 = -100					; size = 4
$T228558 = -96						; size = 4
$T228549 = -92						; size = 4
$T228545 = -88						; size = 4
$T228530 = -84						; size = 4
$T228518 = -80						; size = 4
$T228517 = -76						; size = 4
$T228514 = -72						; size = 4
$T228513 = -68						; size = 4
$T228510 = -64						; size = 4
$T228509 = -60						; size = 4
_pPlot$222400 = -56					; size = 4
_pPlot$222395 = -52					; size = 4
_pPlot$222392 = -48					; size = 4
_pDllUnit$222383 = -44					; size = 4
_pDllUnit$222375 = -40					; size = 4
_pDllUnit$222367 = -36					; size = 4
_eActiveTeam$ = -32					; size = 4
_pAttacker$ = -28					; size = 4
_pDefenderSupport$ = -24				; size = 4
_pDefender$ = -20					; size = 4
_eAttackingPlayer$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
_kInfo$ = 8						; size = 4
_uiParentEventID$ = 12					; size = 4
?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z PROC ; CvUnitCombat::ResolveCombat, COMDAT

; 2837 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2838 : 	PlayerTypes eAttackingPlayer = NO_PLAYER;

	mov	DWORD PTR _eAttackingPlayer$[ebp], -1

; 2839 : 	// Restore visibility
; 2840 : 	CvUnit* pAttacker = kInfo.getUnit(BATTLE_UNIT_ATTACKER);

	push	0
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pAttacker$[ebp], eax

; 2841 : 
; 2842 : 	const TeamTypes eActiveTeam = GC.getGame().getActiveTeam();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T228530[ebp], eax
	mov	ecx, DWORD PTR $T228530[ebp]
	call	?getActiveTeam@CvGame@@QAE?AW4TeamTypes@@XZ ; CvGame::getActiveTeam
	mov	DWORD PTR _eActiveTeam$[ebp], eax

; 2843 : 
; 2844 : 	if(pAttacker)

	cmp	DWORD PTR _pAttacker$[ebp], 0
	je	$LN46@ResolveCom

; 2845 : 	{
; 2846 : 		eAttackingPlayer = pAttacker->getOwner();

	mov	ecx, DWORD PTR _pAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _eAttackingPlayer$[ebp], edx

; 2847 : 		auto_ptr<ICvUnit1> pDllUnit(new CvDllUnit(pAttacker));

	push	12					; 0000000cH
	call	??2CvDllUnit@@SAPAXI@Z			; CvDllUnit::operator new
	add	esp, 4
	mov	DWORD PTR $T228510[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228510[ebp], 0
	je	SHORT $LN22@ResolveCom
	mov	eax, DWORD PTR _pAttacker$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T228510[ebp]
	call	??0CvDllUnit@@QAE@PAVCvUnit@@@Z		; CvDllUnit::CvDllUnit
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN23@ResolveCom
$LN22@ResolveCom:
	mov	DWORD PTR tv87[ebp], 0
$LN23@ResolveCom:
	mov	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR $T228509[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T228509[ebp]
	mov	DWORD PTR _pDllUnit$222367[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 2848 : 		gDLL->GameplayUnitVisibility(pDllUnit.get(), !pAttacker->isInvisible(eActiveTeam, false));

	mov	eax, DWORD PTR $T228545[ebp]
	mov	DWORD PTR tv129[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv129[ebp], ecx
	mov	edx, DWORD PTR _pDllUnit$222367[ebp]
	mov	DWORD PTR $T228549[ebp], edx
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	push	0
	push	1
	push	0
	mov	eax, DWORD PTR _eActiveTeam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAttacker$[ebp]
	call	?isInvisible@CvUnit@@QBE_NW4TeamTypes@@_N1@Z ; CvUnit::isInvisible
	movzx	ecx, al
	test	ecx, ecx
	sete	dl
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR $T228549[ebp]
	push	ecx
	mov	edx, DWORD PTR tv129[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR [eax+640]
	call	edx

; 2849 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _pDllUnit$222367[ebp]
	mov	DWORD PTR $T228558[ebp], eax
	cmp	DWORD PTR $T228558[ebp], 0
	je	SHORT $LN48@ResolveCom
	mov	ecx, DWORD PTR $T228558[ebp]
	mov	DWORD PTR _inst$228562[ebp], ecx
	mov	edx, DWORD PTR _inst$228562[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$228562[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN48@ResolveCom:
$LN46@ResolveCom:

; 2850 : 
; 2851 : 	CvUnit* pDefender = kInfo.getUnit(BATTLE_UNIT_DEFENDER);

	push	1
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pDefender$[ebp], eax

; 2852 : 	if(pDefender)

	cmp	DWORD PTR _pDefender$[ebp], 0
	je	$LN57@ResolveCom

; 2853 : 	{
; 2854 : 		auto_ptr<ICvUnit1> pDllUnit(new CvDllUnit(pDefender));

	push	12					; 0000000cH
	call	??2CvDllUnit@@SAPAXI@Z			; CvDllUnit::operator new
	add	esp, 4
	mov	DWORD PTR $T228514[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T228514[ebp], 0
	je	SHORT $LN24@ResolveCom
	mov	eax, DWORD PTR _pDefender$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T228514[ebp]
	call	??0CvDllUnit@@QAE@PAVCvUnit@@@Z		; CvDllUnit::CvDllUnit
	mov	DWORD PTR tv163[ebp], eax
	jmp	SHORT $LN25@ResolveCom
$LN24@ResolveCom:
	mov	DWORD PTR tv163[ebp], 0
$LN25@ResolveCom:
	mov	ecx, DWORD PTR tv163[ebp]
	mov	DWORD PTR $T228513[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T228513[ebp]
	mov	DWORD PTR _pDllUnit$222375[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 3

; 2855 : 		gDLL->GameplayUnitVisibility(pDllUnit.get(), !pDefender->isInvisible(eActiveTeam, false));

	mov	eax, DWORD PTR $T228570[ebp]
	mov	DWORD PTR tv173[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv173[ebp], ecx
	mov	edx, DWORD PTR _pDllUnit$222375[ebp]
	mov	DWORD PTR $T228574[ebp], edx
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	push	0
	push	1
	push	0
	mov	eax, DWORD PTR _eActiveTeam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDefender$[ebp]
	call	?isInvisible@CvUnit@@QBE_NW4TeamTypes@@_N1@Z ; CvUnit::isInvisible
	movzx	ecx, al
	test	ecx, ecx
	sete	dl
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR $T228574[ebp]
	push	ecx
	mov	edx, DWORD PTR tv173[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv173[ebp]
	mov	edx, DWORD PTR [eax+640]
	call	edx

; 2856 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _pDllUnit$222375[ebp]
	mov	DWORD PTR $T228583[ebp], eax
	cmp	DWORD PTR $T228583[ebp], 0
	je	SHORT $LN59@ResolveCom
	mov	ecx, DWORD PTR $T228583[ebp]
	mov	DWORD PTR _inst$228587[ebp], ecx
	mov	edx, DWORD PTR _inst$228587[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$228587[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN59@ResolveCom:
$LN57@ResolveCom:

; 2857 : 
; 2858 : 	CvUnit* pDefenderSupport = kInfo.getUnit(BATTLE_UNIT_INTERCEPTOR);

	push	2
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pDefenderSupport$[ebp], eax

; 2859 : 	if(pDefenderSupport)

	cmp	DWORD PTR _pDefenderSupport$[ebp], 0
	je	$LN68@ResolveCom

; 2860 : 	{
; 2861 : 		auto_ptr<ICvUnit1> pDllUnit(new CvDllUnit(pDefenderSupport));

	push	12					; 0000000cH
	call	??2CvDllUnit@@SAPAXI@Z			; CvDllUnit::operator new
	add	esp, 4
	mov	DWORD PTR $T228518[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T228518[ebp], 0
	je	SHORT $LN26@ResolveCom
	mov	eax, DWORD PTR _pDefenderSupport$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T228518[ebp]
	call	??0CvDllUnit@@QAE@PAVCvUnit@@@Z		; CvDllUnit::CvDllUnit
	mov	DWORD PTR tv207[ebp], eax
	jmp	SHORT $LN27@ResolveCom
$LN26@ResolveCom:
	mov	DWORD PTR tv207[ebp], 0
$LN27@ResolveCom:
	mov	ecx, DWORD PTR tv207[ebp]
	mov	DWORD PTR $T228517[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T228517[ebp]
	mov	DWORD PTR _pDllUnit$222383[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 5

; 2862 : 		gDLL->GameplayUnitVisibility(pDllUnit.get(), !pDefenderSupport->isInvisible(eActiveTeam, false));

	mov	eax, DWORD PTR $T228595[ebp]
	mov	DWORD PTR tv217[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv217[ebp], ecx
	mov	edx, DWORD PTR _pDllUnit$222383[ebp]
	mov	DWORD PTR $T228599[ebp], edx
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	push	0
	push	1
	push	0
	mov	eax, DWORD PTR _eActiveTeam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDefenderSupport$[ebp]
	call	?isInvisible@CvUnit@@QBE_NW4TeamTypes@@_N1@Z ; CvUnit::isInvisible
	movzx	ecx, al
	test	ecx, ecx
	sete	dl
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR $T228599[ebp]
	push	ecx
	mov	edx, DWORD PTR tv217[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv217[ebp]
	mov	edx, DWORD PTR [eax+640]
	call	edx

; 2863 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _pDllUnit$222383[ebp]
	mov	DWORD PTR $T228608[ebp], eax
	cmp	DWORD PTR $T228608[ebp], 0
	je	SHORT $LN70@ResolveCom
	mov	ecx, DWORD PTR $T228608[ebp]
	mov	DWORD PTR _inst$228612[ebp], ecx
	mov	edx, DWORD PTR _inst$228612[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$228612[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN70@ResolveCom:
$LN68@ResolveCom:

; 2864 : 	// Nuclear Mission
; 2865 : 	if(kInfo.getAttackIsNuclear())

	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getAttackIsNuclear@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getAttackIsNuclear
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@ResolveCom

; 2866 : 	{
; 2867 : 		ResolveNuclearCombat(kInfo, uiParentEventID);

	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kInfo$[ebp]
	push	edx
	call	?ResolveNuclearCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveNuclearCombat
	add	esp, 8
	jmp	$LN2@ResolveCom
$LN16@ResolveCom:

; 2868 : 	}
; 2869 : 
; 2870 : 	// Bombing Mission
; 2871 : 	else if(kInfo.getAttackIsBombingMission())

	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getAttackIsBombingMission@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getAttackIsBombingMission
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN14@ResolveCom

; 2872 : 	{
; 2873 : 		ResolveAirUnitVsCombat(kInfo, uiParentEventID);

	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kInfo$[ebp]
	push	edx
	call	?ResolveAirUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveAirUnitVsCombat
	add	esp, 8
	jmp	$LN2@ResolveCom
$LN14@ResolveCom:

; 2874 : 	}
; 2875 : 
; 2876 : 	// Air Sweep Mission
; 2877 : 	else if(kInfo.getAttackIsAirSweep())

	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getAttackIsAirSweep@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getAttackIsAirSweep
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@ResolveCom

; 2878 : 	{
; 2879 : 		ResolveAirSweep(kInfo, uiParentEventID);

	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kInfo$[ebp]
	push	edx
	call	?ResolveAirSweep@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveAirSweep
	add	esp, 8
	jmp	$LN2@ResolveCom
$LN12@ResolveCom:

; 2880 : 	}
; 2881 : 
; 2882 : 	// Ranged Attack
; 2883 : 	else if(kInfo.getAttackIsRanged())

	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getAttackIsRanged@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getAttackIsRanged
	movzx	eax, al
	test	eax, eax
	je	$LN10@ResolveCom

; 2884 : 	{
; 2885 : 		if(kInfo.getUnit(BATTLE_UNIT_ATTACKER))

	push	0
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	test	eax, eax
	je	$LN9@ResolveCom

; 2886 : 		{
; 2887 : 			ResolveRangedUnitVsCombat(kInfo, uiParentEventID);

	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kInfo$[ebp]
	push	edx
	call	?ResolveRangedUnitVsCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveRangedUnitVsCombat
	add	esp, 8

; 2888 : 			CvPlot *pPlot = kInfo.getPlot();

	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ	; CvCombatInfo::getPlot
	mov	DWORD PTR _pPlot$222392[ebp], eax

; 2889 : 			if (kInfo.getUnit(BATTLE_UNIT_ATTACKER) && kInfo.getUnit(BATTLE_UNIT_DEFENDER) && pPlot)

	push	0
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	test	eax, eax
	je	SHORT $LN8@ResolveCom
	push	1
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	test	eax, eax
	je	SHORT $LN8@ResolveCom
	cmp	DWORD PTR _pPlot$222392[ebp], 0
	je	SHORT $LN8@ResolveCom

; 2890 : 			{
; 2891 : 				pPlot->AddArchaeologicalRecord(CvTypes::getARTIFACT_BATTLE_RANGED(), kInfo.getUnit(BATTLE_UNIT_ATTACKER)->getOwner(), kInfo.getUnit(BATTLE_UNIT_DEFENDER)->getOwner());

	push	1
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR $T228622[ebp], eax
	mov	eax, DWORD PTR $T228622[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T228623[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR $T228632[ebp], eax
	mov	edx, DWORD PTR $T228632[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T228633[ebp], eax
	mov	ecx, DWORD PTR $T228623[ebp]
	push	ecx
	mov	edx, DWORD PTR $T228633[ebp]
	push	edx
	call	?getARTIFACT_BATTLE_RANGED@CvTypes@@YA?BW4GreatWorkArtifactClass@@XZ ; CvTypes::getARTIFACT_BATTLE_RANGED
	push	eax
	mov	ecx, DWORD PTR _pPlot$222392[ebp]
	call	?AddArchaeologicalRecord@CvPlot@@QAEXW4GreatWorkArtifactClass@@W4PlayerTypes@@1@Z ; CvPlot::AddArchaeologicalRecord
$LN8@ResolveCom:

; 2892 : 			}
; 2893 : 		}
; 2894 : 		else

	jmp	$LN6@ResolveCom
$LN9@ResolveCom:

; 2895 : 		{
; 2896 : 			ResolveRangedCityVsUnitCombat(kInfo, uiParentEventID);

	mov	eax, DWORD PTR _uiParentEventID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kInfo$[ebp]
	push	ecx
	call	?ResolveRangedCityVsUnitCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveRangedCityVsUnitCombat
	add	esp, 8

; 2897 : 			CvPlot *pPlot = kInfo.getPlot();

	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ	; CvCombatInfo::getPlot
	mov	DWORD PTR _pPlot$222395[ebp], eax

; 2898 : 			if (kInfo.getCity(BATTLE_UNIT_ATTACKER) && kInfo.getUnit(BATTLE_UNIT_DEFENDER) && pPlot)

	push	0
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getCity@CvCombatInfo@@QBEPAVCvCity@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getCity
	test	eax, eax
	je	SHORT $LN6@ResolveCom
	push	1
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	test	eax, eax
	je	SHORT $LN6@ResolveCom
	cmp	DWORD PTR _pPlot$222395[ebp], 0
	je	SHORT $LN6@ResolveCom

; 2899 : 			{
; 2900 : 				pPlot->AddArchaeologicalRecord(CvTypes::getARTIFACT_BATTLE_RANGED(), kInfo.getCity(BATTLE_UNIT_ATTACKER)->getOwner(), kInfo.getUnit(BATTLE_UNIT_DEFENDER)->getOwner());

	push	1
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR $T228642[ebp], eax
	mov	edx, DWORD PTR $T228642[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T228643[ebp], eax
	push	0
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getCity@CvCombatInfo@@QBEPAVCvCity@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getCity
	mov	DWORD PTR $T228652[ebp], eax
	mov	ecx, DWORD PTR $T228652[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T228653[ebp], edx
	mov	eax, DWORD PTR $T228643[ebp]
	push	eax
	mov	ecx, DWORD PTR $T228653[ebp]
	push	ecx
	call	?getARTIFACT_BATTLE_RANGED@CvTypes@@YA?BW4GreatWorkArtifactClass@@XZ ; CvTypes::getARTIFACT_BATTLE_RANGED
	push	eax
	mov	ecx, DWORD PTR _pPlot$222395[ebp]
	call	?AddArchaeologicalRecord@CvPlot@@QAEXW4GreatWorkArtifactClass@@W4PlayerTypes@@1@Z ; CvPlot::AddArchaeologicalRecord
$LN6@ResolveCom:

; 2901 : 			}
; 2902 : 		}
; 2903 : 	}
; 2904 : 
; 2905 : 	// Melee Attack
; 2906 : 	else

	jmp	$LN2@ResolveCom
$LN10@ResolveCom:

; 2907 : 	{
; 2908 : 		if(kInfo.getCity(BATTLE_UNIT_DEFENDER))

	push	1
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getCity@CvCombatInfo@@QBEPAVCvCity@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getCity
	test	eax, eax
	je	SHORT $LN4@ResolveCom

; 2909 : 		{
; 2910 : 			ResolveCityMeleeCombat(kInfo, uiParentEventID);

	mov	edx, DWORD PTR _uiParentEventID$[ebp]
	push	edx
	mov	eax, DWORD PTR _kInfo$[ebp]
	push	eax
	call	?ResolveCityMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveCityMeleeCombat
	add	esp, 8

; 2911 : 		}
; 2912 : 		else

	jmp	$LN2@ResolveCom
$LN4@ResolveCom:

; 2913 : 		{
; 2914 : 			ResolveMeleeCombat(kInfo, uiParentEventID);

	mov	ecx, DWORD PTR _uiParentEventID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kInfo$[ebp]
	push	edx
	call	?ResolveMeleeCombat@CvUnitCombat@@KAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveMeleeCombat
	add	esp, 8

; 2915 : 			CvPlot *pPlot = kInfo.getPlot();

	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ	; CvCombatInfo::getPlot
	mov	DWORD PTR _pPlot$222400[ebp], eax

; 2916 : 			if (kInfo.getUnit(BATTLE_UNIT_ATTACKER) && kInfo.getUnit(BATTLE_UNIT_DEFENDER) && pPlot)

	push	0
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	test	eax, eax
	je	SHORT $LN2@ResolveCom
	push	1
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	test	eax, eax
	je	SHORT $LN2@ResolveCom
	cmp	DWORD PTR _pPlot$222400[ebp], 0
	je	SHORT $LN2@ResolveCom

; 2917 : 			{
; 2918 : 				pPlot->AddArchaeologicalRecord(CvTypes::getARTIFACT_BATTLE_MELEE(), kInfo.getUnit(BATTLE_UNIT_ATTACKER)->getOwner(), kInfo.getUnit(BATTLE_UNIT_DEFENDER)->getOwner());

	push	1
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR $T228662[ebp], eax
	mov	eax, DWORD PTR $T228662[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T228663[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _kInfo$[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR $T228672[ebp], eax
	mov	edx, DWORD PTR $T228672[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T228673[ebp], eax
	mov	ecx, DWORD PTR $T228663[ebp]
	push	ecx
	mov	edx, DWORD PTR $T228673[ebp]
	push	edx
	call	?getARTIFACT_BATTLE_MELEE@CvTypes@@YA?BW4GreatWorkArtifactClass@@XZ ; CvTypes::getARTIFACT_BATTLE_MELEE
	push	eax
	mov	ecx, DWORD PTR _pPlot$222400[ebp]
	call	?AddArchaeologicalRecord@CvPlot@@QAEXW4GreatWorkArtifactClass@@W4PlayerTypes@@1@Z ; CvPlot::AddArchaeologicalRecord
$LN2@ResolveCom:

; 2919 : 			}
; 2920 : 		}
; 2921 : 	}
; 2922 : 
; 2923 : 	// Clear popup blocking after combat resolves
; 2924 : 	if(eAttackingPlayer == GC.getGame().getActivePlayer())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T228677[ebp], eax
	mov	ecx, DWORD PTR $T228677[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR _eAttackingPlayer$[ebp], eax
	jne	SHORT $LN1@ResolveCom

; 2925 : 	{
; 2926 : 		GC.GetEngineUserInterface()->SetDontShowPopups(false);

	mov	ecx, DWORD PTR $T228681[ebp]
	mov	DWORD PTR tv362[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv362[ebp], edx
	push	0
	mov	eax, DWORD PTR tv362[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv362[ebp]
	mov	eax, DWORD PTR [edx+556]
	call	eax
$LN1@ResolveCom:

; 2927 : 	}
; 2928 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z$0:
	mov	eax, DWORD PTR $T228510[ebp]
	push	eax
	call	??3CvDllUnit@@SAXPAX@Z			; CvDllUnit::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z$1:
	lea	ecx, DWORD PTR _pDllUnit$222367[ebp]
	jmp	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ	; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
__unwindfunclet$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z$2:
	mov	eax, DWORD PTR $T228514[ebp]
	push	eax
	call	??3CvDllUnit@@SAXPAX@Z			; CvDllUnit::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z$3:
	lea	ecx, DWORD PTR _pDllUnit$222375[ebp]
	jmp	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ	; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
__unwindfunclet$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z$4:
	mov	eax, DWORD PTR $T228518[ebp]
	push	eax
	call	??3CvDllUnit@@SAXPAX@Z			; CvDllUnit::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z$5:
	lea	ecx, DWORD PTR _pDllUnit$222383[ebp]
	jmp	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ	; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
__ehhandler$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z ENDP ; CvUnitCombat::ResolveCombat
PUBLIC	??1?$auto_ptr@VICvCombatInfo1@@@std@@QAE@XZ	; std::auto_ptr<ICvCombatInfo1>::~auto_ptr<ICvCombatInfo1>
PUBLIC	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ		; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
PUBLIC	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
PUBLIC	?GetFireSupportUnit@CvUnitCombat@@SAPAVCvUnit@@W4PlayerTypes@@HHHH@Z ; CvUnitCombat::GetFireSupportUnit
PUBLIC	??_C@_0BG@FJJOPCKB@TXT_KEY_UNIT_CAPTURED?$AA@	; `string'
PUBLIC	??_C@_0BP@FAAJOHL@TXT_KEY_UNIT_CAPTURED_DETAILED?$AA@ ; `string'
PUBLIC	??_C@_0BM@KPFEJBAO@TXT_KEY_UNIT_CAPTURED_BARBS?$AA@ ; `string'
PUBLIC	??_C@_0CF@MLNPEONP@TXT_KEY_UNIT_CAPTURED_BARBS_DETA@ ; `string'
PUBLIC	??_C@_0CE@LHCEEBOG@TXT_KEY_MISC_FRIENDLY_UNIT_WITHD@ ; `string'
PUBLIC	??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z	; GetLocalizedText<char const *>
PUBLIC	??_C@_0CB@DNOIKEN@TXT_KEY_MISC_ENEMY_UNIT_WITHDREW@ ; `string'
PUBLIC	?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z ; CvUnitCombat::AttackRanged
PUBLIC	__$ArrayPad$
PUBLIC	?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z ; CvUnitCombat::Attack
EXTRN	??3CvDllCombatInfo@@SAXPAX@Z:PROC		; CvDllCombatInfo::operator delete
EXTRN	??0CvDllCombatInfo@@QAE@PAVCvCombatInfo@@@Z:PROC ; CvDllCombatInfo::CvDllCombatInfo
EXTRN	??2CvDllCombatInfo@@SAPAXI@Z:PROC		; CvDllCombatInfo::operator new
EXTRN	?setVisualizeCombat@CvCombatInfo@@QAEX_N@Z:PROC	; CvCombatInfo::setVisualizeCombat
EXTRN	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z:PROC ; CvGlobals::WrapPlotPointer
EXTRN	?isActiveVisible@CvPlot@@QBE_N_N@Z:PROC		; CvPlot::isActiveVisible
EXTRN	?setMadeAttack@CvUnit@@QAEX_N@Z:PROC		; CvUnit::setMadeAttack
EXTRN	?WaitFor@CvUnitMission@@SAXV?$FObjectHandle@VCvUnit@@@@0@Z:PROC ; CvUnitMission::WaitFor
EXTRN	?GetHeadMissionData@CvUnit@@QAEPBUMissionData@@XZ:PROC ; CvUnit::GetHeadMissionData
EXTRN	?canAdvance@CvUnit@@IBE_NABVCvPlot@@H@Z:PROC	; CvUnit::canAdvance
EXTRN	?GetTextKey@CvBaseInfo@@QBEPBDXZ:PROC		; CvBaseInfo::GetTextKey
EXTRN	?getNameKey@CvPlayer@@QBEPBDXZ:PROC		; CvPlayer::getNameKey
EXTRN	__imp_??4String@Localization@@QAEAAV01@ABV01@@Z:PROC
EXTRN	?getCaptureUnitType@CvUnit@@QBE?AW4UnitTypes@@W4CivilizationTypes@@@Z:PROC ; CvUnit::getCaptureUnitType
EXTRN	?getCivilizationType@CvPlayer@@QBE?AW4CivilizationTypes@@XZ:PROC ; CvPlayer::getCivilizationType
EXTRN	?IsCaptureWhileEmbarked@CvUnitEntry@@QBE_NXZ:PROC ; CvUnitEntry::IsCaptureWhileEmbarked
EXTRN	?getUnitInfo@CvUnit@@QBEAAVCvUnitEntry@@XZ:PROC	; CvUnit::getUnitInfo
EXTRN	__imp_??0String@Localization@@QAE@XZ:PROC
EXTRN	?setDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z:PROC ; CvUnit::setDamage
EXTRN	?setCombatTimer@CvUnit@@QAEXH@Z:PROC		; CvUnit::setCombatTimer
EXTRN	?getTime@CvMissionInfo@@QBEHXZ:PROC		; CvMissionInfo::getTime
EXTRN	?getMissionInfo@CvGlobals@@QAEPAVCvMissionInfo@@W4MissionTypes@@@Z:PROC ; CvGlobals::getMissionInfo
EXTRN	?setPlot@CvMissionDefinition@@QAEXPBVCvPlot@@@Z:PROC ; CvMissionDefinition::setPlot
EXTRN	?setUnit@CvMissionDefinition@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z:PROC ; CvMissionDefinition::setUnit
EXTRN	?setMissionType@CvMissionDefinition@@QAEXW4MissionTypes@@@Z:PROC ; CvMissionDefinition::setMissionType
EXTRN	?getMISSION_SURRENDER@CvTypes@@YA?BW4MissionTypes@@XZ:PROC ; CvTypes::getMISSION_SURRENDER
EXTRN	?setMissionTime@CvMissionDefinition@@QAEXM@Z:PROC ; CvMissionDefinition::setMissionTime
EXTRN	?getCombatTimer@CvUnit@@QBEHXZ:PROC		; CvUnit::getCombatTimer
EXTRN	??0CvMissionDefinition@@QAE@XZ:PROC		; CvMissionDefinition::CvMissionDefinition
EXTRN	?DoWithdrawFromMelee@CvUnit@@IAE_NAAV1@@Z:PROC	; CvUnit::DoWithdrawFromMelee
EXTRN	?CanWithdrawFromMelee@CvUnit@@IAE_NAAV1@@Z:PROC	; CvUnit::CanWithdrawFromMelee
EXTRN	?getExtraWithdrawal@CvUnit@@QBEHXZ:PROC		; CvUnit::getExtraWithdrawal
EXTRN	??0CvCombatInfo@@QAE@XZ:PROC			; CvCombatInfo::CvCombatInfo
EXTRN	?SetEverAttackedTutorial@CvGame@@QAEX_N@Z:PROC	; CvGame::SetEverAttackedTutorial
EXTRN	?getBestDefender@CvPlot@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4PlayerTypes@@0PBVCvUnit@@_N222@Z:PROC ; CvPlot::getBestDefender
EXTRN	?setFortifyTurns@CvUnit@@QAEXH@Z:PROC		; CvUnit::setFortifyTurns
;	COMDAT ??_C@_0BG@FJJOPCKB@TXT_KEY_UNIT_CAPTURED?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BG@FJJOPCKB@TXT_KEY_UNIT_CAPTURED?$AA@ DB 'TXT_KEY_UNIT_CAPTURED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FAAJOHL@TXT_KEY_UNIT_CAPTURED_DETAILED?$AA@
CONST	SEGMENT
??_C@_0BP@FAAJOHL@TXT_KEY_UNIT_CAPTURED_DETAILED?$AA@ DB 'TXT_KEY_UNIT_CA'
	DB	'PTURED_DETAILED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KPFEJBAO@TXT_KEY_UNIT_CAPTURED_BARBS?$AA@
CONST	SEGMENT
??_C@_0BM@KPFEJBAO@TXT_KEY_UNIT_CAPTURED_BARBS?$AA@ DB 'TXT_KEY_UNIT_CAPT'
	DB	'URED_BARBS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MLNPEONP@TXT_KEY_UNIT_CAPTURED_BARBS_DETA@
CONST	SEGMENT
??_C@_0CF@MLNPEONP@TXT_KEY_UNIT_CAPTURED_BARBS_DETA@ DB 'TXT_KEY_UNIT_CAP'
	DB	'TURED_BARBS_DETAILED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LHCEEBOG@TXT_KEY_MISC_FRIENDLY_UNIT_WITHD@
CONST	SEGMENT
??_C@_0CE@LHCEEBOG@TXT_KEY_MISC_FRIENDLY_UNIT_WITHD@ DB 'TXT_KEY_MISC_FRI'
	DB	'ENDLY_UNIT_WITHDREW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DNOIKEN@TXT_KEY_MISC_ENEMY_UNIT_WITHDREW@
CONST	SEGMENT
??_C@_0CB@DNOIKEN@TXT_KEY_MISC_ENEMY_UNIT_WITHDREW@ DB 'TXT_KEY_MISC_ENEM'
	DB	'Y_UNIT_WITHDREW', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z DD 019930522H
	DD	010H
	DD	FLAT:__unwindtable$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$8
	DD	06H
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$9
	DD	06H
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$10
	DD	06H
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$11
	DD	01H
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$12
	DD	01H
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$15
	DD	01H
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$16
	DD	01H
	DD	FLAT:__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$17
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
_TEXT	SEGMENT
tv732 = -2608						; size = 4
tv722 = -2604						; size = 4
tv700 = -2600						; size = 4
tv779 = -2596						; size = 4
tv776 = -2592						; size = 4
tv604 = -2588						; size = 4
tv774 = -2584						; size = 4
tv938 = -2580						; size = 4
tv772 = -2576						; size = 4
tv937 = -2572						; size = 4
tv770 = -2568						; size = 4
tv934 = -2564						; size = 4
tv768 = -2560						; size = 4
tv373 = -2556						; size = 4
tv766 = -2552						; size = 4
tv376 = -2548						; size = 4
tv1092 = -2544						; size = 4
tv1301 = -2540						; size = 4
tv335 = -2536						; size = 4
tv283 = -2532						; size = 4
tv933 = -2528						; size = 4
tv233 = -2524						; size = 4
tv786 = -2520						; size = 4
tv792 = -2516						; size = 4
_inst$229304 = -2512					; size = 4
$T229301 = -2508					; size = 4
$T229285 = -2504					; size = 4
$T229281 = -2500					; size = 4
_inst$229273 = -2496					; size = 4
$T229270 = -2492					; size = 4
$T229257 = -2488					; size = 4
_inst$229252 = -2484					; size = 4
$T229249 = -2480					; size = 4
$T229239 = -2476					; size = 4
__Ptr$229237 = -2472					; size = 4
$T229234 = -2468					; size = 4
__Cvtptr$229232 = -2464					; size = 4
__Ans$229233 = -2460					; size = 4
$T229223 = -2456					; size = 4
$T229219 = -2452					; size = 4
$T229209 = -2448					; size = 4
$T229199 = -2444					; size = 4
$T229190 = -2440					; size = 4
$T229181 = -2436					; size = 4
$T229172 = -2432					; size = 4
$T229168 = -2428					; size = 4
$T229159 = -2424					; size = 4
$T229155 = -2420					; size = 4
$T229146 = -2416					; size = 4
$T229142 = -2412					; size = 4
$T229133 = -2408					; size = 4
$T229124 = -2404					; size = 4
$T229120 = -2400					; size = 4
$T229111 = -2396					; size = 4
$T229107 = -2392					; size = 4
$T229098 = -2388					; size = 4
$T229094 = -2384					; size = 4
$T229090 = -2380					; size = 4
$T229081 = -2376					; size = 4
$T229077 = -2372					; size = 4
$T229073 = -2368					; size = 4
$T229064 = -2364					; size = 4
$T229060 = -2360					; size = 4
$T229056 = -2356					; size = 4
$T229052 = -2352					; size = 4
$T229048 = -2348					; size = 4
$T229036 = -2344					; size = 4
$T229027 = -2340					; size = 4
$T229023 = -2336					; size = 4
$T229019 = -2332					; size = 4
$T229010 = -2328					; size = 4
$T229006 = -2324					; size = 4
$T229002 = -2317					; size = 1
$T228993 = -2316					; size = 4
$T228986 = -2312					; size = 4
$T228979 = -2308					; size = 4
$T228975 = -2304					; size = 4
$T228971 = -2300					; size = 4
$T228962 = -2296					; size = 4
$T228958 = -2292					; size = 4
$T228954 = -2288					; size = 4
$T228950 = -2284					; size = 4
$T228942 = -2280					; size = 4
$T228938 = -2276					; size = 4
$T228934 = -2272					; size = 4
$T228930 = -2268					; size = 4
$T228921 = -2264					; size = 4
$T228917 = -2260					; size = 4
$T228908 = -2256					; size = 4
$T228904 = -2252					; size = 4
$T228900 = -2248					; size = 4
$T228892 = -2244					; size = 4
$T228888 = -2240					; size = 4
$T228884 = -2236					; size = 4
$T228880 = -2232					; size = 4
$T228868 = -2228					; size = 4
$T228864 = -2224					; size = 4
$T228844 = -2220					; size = 4
$T228840 = -2216					; size = 4
$T228831 = -2212					; size = 4
$T228827 = -2208					; size = 4
$T228818 = -2204					; size = 4
$T228814 = -2200					; size = 4
$T228810 = -2196					; size = 4
$T228806 = -2192					; size = 4
$T228802 = -2188					; size = 4
$T228765 = -2184					; size = 4
$T228748 = -2180					; size = 4
$T228714 = -2176					; size = 4
$T228711 = -2172					; size = 4
$T228710 = -2168					; size = 4
$T228709 = -2164					; size = 4
$T228708 = -2160					; size = 4
$T228707 = -2156					; size = 4
$T228706 = -2152					; size = 4
$T228705 = -2148					; size = 80
$T228704 = -2068					; size = 80
$T228703 = -1988					; size = 4
$T228702 = -1984					; size = 80
$T228701 = -1904					; size = 80
$T228700 = -1824					; size = 4
$T228699 = -1820					; size = 4
$T228698 = -1816					; size = 80
$T228697 = -1736					; size = 28
$T228696 = -1708					; size = 28
$T228695 = -1680					; size = 4
$T228694 = -1676					; size = 4
$T228693 = -1672					; size = 8
_pDefenderPlot$222528 = -1664				; size = 4
_pDllCombatInfo$222600 = -1660				; size = 4
_isTargetVisibleToActivePlayer$222477 = -1654		; size = 1
_quickCombat$222478 = -1653				; size = 1
_uiParentEventID$222476 = -1652				; size = 4
_pFireSupportUnit$222469 = -1648			; size = 4
_eSupportResult$222467 = -1644				; size = 4
_bAdvance$222464 = -1637				; size = 1
_pkSurrenderMission$222439 = -1636			; size = 4
_pNotification$222461 = -1632				; size = 4
_strMessage$222442 = -1628				; size = 80
_strSummary$222443 = -1548				; size = 80
_kMission$222438 = -1468				; size = 28
_eFireSupportResult$ = -1440				; size = 4
_kCombatInfo$ = -1436					; size = 1372
_strBuffer$ = -56					; size = 28
__$ArrayPad$ = -28					; size = 4
_eResult$ = -24						; size = 4
_pDefender$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
_kAttacker$ = 8						; size = 4
_targetPlot$ = 12					; size = 4
_eOption$ = 16						; size = 4
?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z PROC ; CvUnitCombat::Attack, COMDAT

; 2932 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2596				; 00000a24H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2933 : 	CvString strBuffer;

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2934 : 
; 2935 : 	//VALIDATE_OBJECT
; 2936 : 	CvAssert(kAttacker.canMoveInto(targetPlot, CvUnit::MOVEFLAG_ATTACK | CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE));
; 2937 : 	CvAssert(kAttacker.getCombatTimer() == 0);
; 2938 : 
; 2939 : 	CvUnitCombat::ATTACK_RESULT eResult = CvUnitCombat::ATTACK_ABORTED;

	mov	DWORD PTR _eResult$[ebp], 0

; 2940 : 
; 2941 : 	CvAssert(kAttacker.getCombatTimer() == 0);
; 2942 : 	//	CvAssert(pDefender != NULL);
; 2943 : 	CvAssert(!kAttacker.isFighting());
; 2944 : 
; 2945 : 	// Unit that attacks loses his Fort bonus
; 2946 : 	kAttacker.setFortifyTurns(0);

	push	0
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setFortifyTurns@CvUnit@@QAEXH@Z	; CvUnit::setFortifyTurns

; 2947 : 
; 2948 : 	UnitHandle pDefender;

	mov	DWORD PTR _pDefender$[ebp], 0
	mov	BYTE PTR _pDefender$[ebp+4], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 2949 : 	pDefender = targetPlot.getBestDefender(NO_PLAYER, kAttacker.getOwner(), &kAttacker, true);

	mov	eax, DWORD PTR _kAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T228748[ebp], ecx
	push	0
	push	0
	push	0
	push	1
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	mov	eax, DWORD PTR $T228748[ebp]
	push	eax
	push	-1
	lea	ecx, DWORD PTR $T228693[ebp]
	push	ecx
	mov	ecx, DWORD PTR _targetPlot$[ebp]
	call	?getBestDefender@CvPlot@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4PlayerTypes@@0PBVCvUnit@@_N222@Z ; CvPlot::getBestDefender
	mov	DWORD PTR tv792[ebp], eax
	mov	edx, DWORD PTR tv792[ebp]
	mov	DWORD PTR $T228765[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR $T228765[ebp]
	lea	ecx, DWORD PTR _pDefender$[ebp]
	cmp	eax, ecx
	je	SHORT $LN69@Attack
	cmp	DWORD PTR _pDefender$[ebp], 0
	je	SHORT $LN67@Attack
	mov	ecx, DWORD PTR _pDefender$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN67@Attack:
	mov	edx, DWORD PTR $T228765[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pDefender$[ebp], eax
	cmp	DWORD PTR _pDefender$[ebp], 0
	je	SHORT $LN69@Attack
	mov	ecx, DWORD PTR _pDefender$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN69@Attack:
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T228693[ebp], 0
	je	SHORT $LN74@Attack
	mov	ecx, DWORD PTR $T228693[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN74@Attack:

; 2950 : 
; 2951 : 	// JAR - without pDefender, nothing in here is going to work, just crash
; 2952 : 	if(!pDefender)

	xor	ecx, ecx
	cmp	DWORD PTR _pDefender$[ebp], 0
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN30@Attack

; 2953 : 	{
; 2954 : 		return eResult;

	mov	eax, DWORD PTR _eResult$[ebp]
	mov	DWORD PTR $T228694[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR _pDefender$[ebp], 0
	je	SHORT $LN81@Attack
	mov	ecx, DWORD PTR _pDefender$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN81@Attack:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T228694[ebp]
	jmp	$LN31@Attack
$LN30@Attack:

; 2955 : 	}
; 2956 : 
; 2957 : 	kAttacker.SetAutomateType(NO_AUTOMATE);

	push	-1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?SetAutomateType@CvUnit@@QAEXW4AutomateTypes@@@Z ; CvUnit::SetAutomateType

; 2958 : 	pDefender->SetAutomateType(NO_AUTOMATE);

	push	-1
	mov	ecx, DWORD PTR _pDefender$[ebp]
	call	?SetAutomateType@CvUnit@@QAEXW4AutomateTypes@@@Z ; CvUnit::SetAutomateType

; 2959 : 
; 2960 : 	// slewis - tutorial'd
; 2961 : 	if(kAttacker.getOwner() == GC.getGame().getActivePlayer())

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T228802[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T228806[ebp], eax
	mov	ecx, DWORD PTR $T228806[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T228802[ebp], eax
	jne	SHORT $LN29@Attack

; 2962 : 	{
; 2963 : 		GC.getGame().SetEverAttackedTutorial(true);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T228810[ebp], ecx
	push	1
	mov	ecx, DWORD PTR $T228810[ebp]
	call	?SetEverAttackedTutorial@CvGame@@QAEX_N@Z ; CvGame::SetEverAttackedTutorial
$LN29@Attack:

; 2964 : 	}
; 2965 : 	// end tutorial'd
; 2966 : 
; 2967 : 	// handle the Zulu special thrown spear first attack
; 2968 : 	ATTACK_RESULT eFireSupportResult = ATTACK_ABORTED;

	mov	DWORD PTR _eFireSupportResult$[ebp], 0

; 2969 : 	if (kAttacker.isRangedSupportFire() && pDefender->IsCanDefend())

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isRangedSupportFire@CvUnit@@QBE_NXZ	; CvUnit::isRangedSupportFire
	movzx	edx, al
	test	edx, edx
	je	$LN27@Attack
	mov	eax, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T228814[ebp], eax
	push	0
	mov	ecx, DWORD PTR $T228814[ebp]
	call	?IsCanDefend@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::IsCanDefend
	movzx	ecx, al
	test	ecx, ecx
	je	$LN27@Attack

; 2970 : 	{
; 2971 : 		eFireSupportResult = AttackRanged(kAttacker, pDefender->getX(), pDefender->getY(), CvUnitCombat::ATTACK_OPTION_NO_DEFENSIVE_SUPPORT);

	mov	edx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T228818[ebp], edx
	mov	eax, DWORD PTR $T228818[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR $T228827[ebp], ecx
	mov	edx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T228831[ebp], edx
	mov	eax, DWORD PTR $T228831[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T228840[ebp], ecx
	push	1
	mov	edx, DWORD PTR $T228827[ebp]
	push	edx
	mov	eax, DWORD PTR $T228840[ebp]
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	push	ecx
	call	?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z ; CvUnitCombat::AttackRanged
	add	esp, 16					; 00000010H
	mov	DWORD PTR _eFireSupportResult$[ebp], eax

; 2972 : 		if (pDefender->isDelayedDeath())

	mov	edx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T228844[ebp], edx
	mov	ecx, DWORD PTR $T228844[ebp]
	call	?isDelayedDeath@CvUnit@@QBE_NXZ		; CvUnit::isDelayedDeath
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@Attack

; 2973 : 		{
; 2974 : 			// Killed him, move to the plot if we can.
; 2975 : 			if(targetPlot.getNumVisibleEnemyDefenders(&kAttacker) == 0)

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _targetPlot$[ebp]
	call	?getNumVisibleEnemyDefenders@CvPlot@@QBEHPBVCvUnit@@@Z ; CvPlot::getNumVisibleEnemyDefenders
	test	eax, eax
	jne	SHORT $LN25@Attack

; 2976 : 			{
; 2977 : 				if (kAttacker.UnitMove(&targetPlot, true, &kAttacker, true))

	push	1
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _targetPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?UnitMove@CvUnit@@QAE_NPAVCvPlot@@_NPAV1@1@Z ; CvUnit::UnitMove
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN25@Attack

; 2978 : 					kAttacker.finishMoves();	// Burn all the moves we have

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?finishMoves@CvUnit@@QAEXXZ		; CvUnit::finishMoves
$LN25@Attack:

; 2979 : 			}
; 2980 : 			return eFireSupportResult;

	mov	edx, DWORD PTR _eFireSupportResult$[ebp]
	mov	DWORD PTR $T228695[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR _pDefender$[ebp], 0
	je	SHORT $LN115@Attack
	mov	ecx, DWORD PTR _pDefender$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN115@Attack:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T228695[ebp]
	jmp	$LN31@Attack
$LN27@Attack:

; 2981 : 		}
; 2982 : 	}
; 2983 : 
; 2984 : 	CvCombatInfo kCombatInfo;

	lea	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	??0CvCombatInfo@@QAE@XZ			; CvCombatInfo::CvCombatInfo

; 2985 : 	GenerateMeleeCombatInfo(kAttacker, pDefender.pointer(), targetPlot, &kCombatInfo);

	lea	eax, DWORD PTR _kCombatInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _targetPlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDefender$[ebp]
	push	edx
	mov	eax, DWORD PTR _kAttacker$[ebp]
	push	eax
	call	?GenerateMeleeCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z ; CvUnitCombat::GenerateMeleeCombatInfo
	add	esp, 16					; 00000010H

; 2986 : 
; 2987 : 	CvAssertMsg(!kAttacker.isDelayedDeath() && !pDefender->isDelayedDeath(), "Trying to battle and one of the units is already dead!");
; 2988 : 
; 2989 : #ifdef AUI_UNIT_FIX_NO_RETREAT_ON_CIVILIAN_GUARD
; 2990 : 	if (pDefender->getExtraWithdrawal() > 0 && pDefender->CanWithdrawFromMelee(kAttacker, &kCombatInfo))
; 2991 : #else
; 2992 : 	if(pDefender->getExtraWithdrawal() > 0 && pDefender->CanWithdrawFromMelee(kAttacker))

	mov	ecx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T228864[ebp], ecx
	mov	ecx, DWORD PTR $T228864[ebp]
	call	?getExtraWithdrawal@CvUnit@@QBEHXZ	; CvUnit::getExtraWithdrawal
	test	eax, eax
	jle	$LN24@Attack
	mov	edx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T228868[ebp], edx
	mov	eax, DWORD PTR _kAttacker$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T228868[ebp]
	call	?CanWithdrawFromMelee@CvUnit@@IAE_NAAV1@@Z ; CvUnit::CanWithdrawFromMelee
	movzx	ecx, al
	test	ecx, ecx
	je	$LN24@Attack

; 2993 : #endif
; 2994 : 	{
; 2995 : 		pDefender->DoWithdrawFromMelee(kAttacker);

	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pDefender$[ebp]
	call	?DoWithdrawFromMelee@CvUnit@@IAE_NAAV1@@Z ; CvUnit::DoWithdrawFromMelee

; 2996 : 
; 2997 : 		if(kAttacker.getOwner() == GC.getGame().getActivePlayer())

	mov	eax, DWORD PTR _kAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T228880[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T228884[ebp], edx
	mov	ecx, DWORD PTR $T228884[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T228880[ebp], eax
	jne	$LN23@Attack

; 2998 : 		{
; 2999 : 			strBuffer = GetLocalizedText("TXT_KEY_MISC_ENEMY_UNIT_WITHDREW", pDefender->getNameKey());

	mov	eax, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T228888[ebp], eax
	mov	ecx, DWORD PTR $T228888[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	push	eax
	push	OFFSET ??_C@_0CB@DNOIKEN@TXT_KEY_MISC_ENEMY_UNIT_WITHDREW@
	lea	ecx, DWORD PTR $T228696[ebp]
	push	ecx
	call	??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z ; GetLocalizedText<char const *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv786[ebp], eax
	mov	edx, DWORD PTR tv786[ebp]
	mov	DWORD PTR $T228892[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR $T228892[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T228696[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 3000 : 			GC.GetEngineUserInterface()->AddMessage(0, kAttacker.getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer);

	mov	ecx, DWORD PTR $T228900[ebp]
	mov	DWORD PTR tv233[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv233[ebp], edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T228904[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T228908[ebp], eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T228917[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T228904[ebp]
	push	eax
	mov	ecx, DWORD PTR $T228908[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T228917[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR tv233[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv233[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
	jmp	$LN21@Attack
$LN23@Attack:

; 3001 : 		}
; 3002 : 		else if(pDefender->getOwner() == GC.getGame().getActivePlayer())

	mov	ecx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T228921[ebp], ecx
	mov	edx, DWORD PTR $T228921[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T228930[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T228934[ebp], ecx
	mov	ecx, DWORD PTR $T228934[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T228930[ebp], eax
	jne	$LN21@Attack

; 3003 : 		{
; 3004 : 			strBuffer = GetLocalizedText("TXT_KEY_MISC_FRIENDLY_UNIT_WITHDREW", pDefender->getNameKey());

	mov	edx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T228938[ebp], edx
	mov	ecx, DWORD PTR $T228938[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	push	eax
	push	OFFSET ??_C@_0CE@LHCEEBOG@TXT_KEY_MISC_FRIENDLY_UNIT_WITHD@
	lea	eax, DWORD PTR $T228697[ebp]
	push	eax
	call	??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z ; GetLocalizedText<char const *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv933[ebp], eax
	mov	ecx, DWORD PTR tv933[ebp]
	mov	DWORD PTR $T228942[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR $T228942[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T228697[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 3005 : 			GC.GetEngineUserInterface()->AddMessage(0, pDefender->getOwner(), true, GC.getEVENT_MESSAGE_TIME(), strBuffer);

	mov	eax, DWORD PTR $T228950[ebp]
	mov	DWORD PTR tv283[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv283[ebp], ecx
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T228954[ebp], eax
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T228958[ebp], edx
	mov	eax, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T228962[ebp], eax
	mov	ecx, DWORD PTR $T228962[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T228971[ebp], edx
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR $T228954[ebp]
	push	eax
	mov	ecx, DWORD PTR $T228958[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T228971[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR tv283[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv283[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
$LN21@Attack:

; 3006 : 		}
; 3007 : 
; 3008 : 		// Move forward
; 3009 : 		if(targetPlot.getNumVisibleEnemyDefenders(&kAttacker) == 0)

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _targetPlot$[ebp]
	call	?getNumVisibleEnemyDefenders@CvPlot@@QBEHPBVCvUnit@@@Z ; CvPlot::getNumVisibleEnemyDefenders
	test	eax, eax
	jne	SHORT $LN20@Attack

; 3010 : 		{
; 3011 : 			kAttacker.UnitMove(&targetPlot, true, &kAttacker);

	push	0
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _targetPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?UnitMove@CvUnit@@QAE_NPAVCvPlot@@_NPAV1@1@Z ; CvUnit::UnitMove
$LN20@Attack:

; 3012 : 		}
; 3013 : 
; 3014 : //		kAttacker.setMadeAttack(true);   /* EFB: Doesn't work, causes tactical AI to not dequeue this attack; but we've decided you don't lose your attack anyway */
; 3015 : 		eResult = ATTACK_COMPLETED;

	mov	DWORD PTR _eResult$[ebp], 1
	jmp	$LN4@Attack
$LN24@Attack:

; 3016 : 	}
; 3017 : 
; 3018 : 	else if(!pDefender->IsCanDefend())

	mov	ecx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T228975[ebp], ecx
	push	0
	mov	ecx, DWORD PTR $T228975[ebp]
	call	?IsCanDefend@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::IsCanDefend
	movzx	edx, al
	test	edx, edx
	jne	$LN18@Attack

; 3019 : 	{
; 3020 : 		CvMissionDefinition kMission;

	lea	ecx, DWORD PTR _kMission$222438[ebp]
	call	??0CvMissionDefinition@@QAE@XZ		; CvMissionDefinition::CvMissionDefinition

; 3021 : 		kMission.setMissionTime(kAttacker.getCombatTimer() * gDLL->getSecsPerTurn());

	mov	eax, DWORD PTR $T228979[ebp]
	mov	DWORD PTR tv335[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv335[ebp], ecx
	mov	edx, DWORD PTR tv335[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv335[ebp]
	mov	edx, DWORD PTR [eax+408]
	call	edx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	fstp	DWORD PTR tv1301[ebp]
	call	?getCombatTimer@CvUnit@@QBEHXZ		; CvUnit::getCombatTimer
	mov	DWORD PTR tv1092[ebp], eax
	fild	DWORD PTR tv1092[ebp]
	fmul	DWORD PTR tv1301[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _kMission$222438[ebp]
	call	?setMissionTime@CvMissionDefinition@@QAEXM@Z ; CvMissionDefinition::setMissionTime

; 3022 : 		kMission.setMissionType(CvTypes::getMISSION_SURRENDER());

	call	?getMISSION_SURRENDER@CvTypes@@YA?BW4MissionTypes@@XZ ; CvTypes::getMISSION_SURRENDER
	push	eax
	lea	ecx, DWORD PTR _kMission$222438[ebp]
	call	?setMissionType@CvMissionDefinition@@QAEXW4MissionTypes@@@Z ; CvMissionDefinition::setMissionType

; 3023 : 		kMission.setUnit(BATTLE_UNIT_ATTACKER, &kAttacker);

	mov	eax, DWORD PTR _kAttacker$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _kMission$222438[ebp]
	call	?setUnit@CvMissionDefinition@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvMissionDefinition::setUnit

; 3024 : 		kMission.setUnit(BATTLE_UNIT_DEFENDER, pDefender.pointer());

	mov	ecx, DWORD PTR _pDefender$[ebp]
	push	ecx
	push	1
	lea	ecx, DWORD PTR _kMission$222438[ebp]
	call	?setUnit@CvMissionDefinition@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvMissionDefinition::setUnit

; 3025 : 		kMission.setPlot(&targetPlot);

	mov	edx, DWORD PTR _targetPlot$[ebp]
	push	edx
	lea	ecx, DWORD PTR _kMission$222438[ebp]
	call	?setPlot@CvMissionDefinition@@QAEXPBVCvPlot@@@Z ; CvMissionDefinition::setPlot

; 3026 : 
; 3027 : 		// Surrender mission
; 3028 : 		CvMissionInfo* pkSurrenderMission = GC.getMissionInfo(CvTypes::getMISSION_SURRENDER());

	call	?getMISSION_SURRENDER@CvTypes@@YA?BW4MissionTypes@@XZ ; CvTypes::getMISSION_SURRENDER
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getMissionInfo@CvGlobals@@QAEPAVCvMissionInfo@@W4MissionTypes@@@Z ; CvGlobals::getMissionInfo
	mov	DWORD PTR _pkSurrenderMission$222439[ebp], eax

; 3029 : 		if(pkSurrenderMission == NULL)

	cmp	DWORD PTR _pkSurrenderMission$222439[ebp], 0
	jne	SHORT $LN17@Attack

; 3030 : 		{
; 3031 : 			CvAssert(false);
; 3032 : 		}
; 3033 : 		else

	jmp	SHORT $LN16@Attack
$LN17@Attack:

; 3034 : 		{
; 3035 : 			kAttacker.setCombatTimer(pkSurrenderMission->getTime());

	mov	ecx, DWORD PTR _pkSurrenderMission$222439[ebp]
	call	?getTime@CvMissionInfo@@QBEHXZ		; CvMissionInfo::getTime
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setCombatTimer@CvUnit@@QAEXH@Z		; CvUnit::setCombatTimer
$LN16@Attack:

; 3036 : 		}
; 3037 : 
; 3038 : 		// Kill them!
; 3039 : 		pDefender->setDamage(GC.getMAX_HIT_POINTS());

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	mov	DWORD PTR $T228986[ebp], eax
	push	0
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	-1
	mov	ecx, DWORD PTR $T228986[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pDefender$[ebp]
	call	?setDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::setDamage

; 3040 : 
; 3041 : 		Localization::String strMessage;

	lea	ecx, DWORD PTR _strMessage$222442[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 3042 : 		Localization::String strSummary;

	lea	ecx, DWORD PTR _strSummary$222443[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 3043 : 
; 3044 : 		// Some units can't capture civilians. Embarked units are also not captured, they're simply killed. And some aren't a type that gets captured.
; 3045 : 		if(!kAttacker.isNoCapture() && (!pDefender->isEmbarked() || pDefender->getUnitInfo().IsCaptureWhileEmbarked()) && pDefender->getCaptureUnitType(GET_PLAYER(pDefender->getOwner()).getCivilizationType()) != NO_UNIT)

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isNoCapture@CvUnit@@QBE_NXZ		; CvUnit::isNoCapture
	movzx	edx, al
	test	edx, edx
	jne	$LN15@Attack
	mov	eax, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T228993[ebp], eax
	mov	ecx, DWORD PTR $T228993[ebp]
	mov	dl, BYTE PTR [ecx+1652]
	mov	BYTE PTR $T229002[ebp], dl
	movzx	eax, BYTE PTR $T229002[ebp]
	test	eax, eax
	je	SHORT $LN14@Attack
	mov	ecx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T229006[ebp], ecx
	mov	ecx, DWORD PTR $T229006[ebp]
	call	?getUnitInfo@CvUnit@@QBEAAVCvUnitEntry@@XZ ; CvUnit::getUnitInfo
	mov	ecx, eax
	call	?IsCaptureWhileEmbarked@CvUnitEntry@@QBE_NXZ ; CvUnitEntry::IsCaptureWhileEmbarked
	movzx	edx, al
	test	edx, edx
	je	$LN15@Attack
$LN14@Attack:
	mov	eax, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T229010[ebp], eax
	mov	ecx, DWORD PTR $T229010[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T229019[ebp], edx
	mov	eax, DWORD PTR $T229019[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T229023[ebp], eax
	mov	ecx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T229027[ebp], ecx
	mov	ecx, DWORD PTR $T229023[ebp]
	call	?getCivilizationType@CvPlayer@@QBE?AW4CivilizationTypes@@XZ ; CvPlayer::getCivilizationType
	push	eax
	mov	ecx, DWORD PTR $T229027[ebp]
	call	?getCaptureUnitType@CvUnit@@QBE?AW4UnitTypes@@W4CivilizationTypes@@@Z ; CvUnit::getCaptureUnitType
	cmp	eax, -1
	je	$LN15@Attack

; 3046 : 		{
; 3047 : 			pDefender->setCapturingPlayer(kAttacker.getOwner());

	mov	edx, DWORD PTR _kAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T229036[ebp], eax
	mov	ecx, DWORD PTR $T229036[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pDefender$[ebp]
	call	?setCapturingPlayer@CvUnit@@QAEXW4PlayerTypes@@@Z ; CvUnit::setCapturingPlayer

; 3048 : 
; 3049 : 			if(kAttacker.isBarbarian())

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	edx, al
	test	edx, edx
	je	$LN13@Attack

; 3050 : 			{
; 3051 : 				strMessage = Localization::Lookup("TXT_KEY_UNIT_CAPTURED_BARBS_DETAILED");

	push	OFFSET ??_C@_0CF@MLNPEONP@TXT_KEY_UNIT_CAPTURED_BARBS_DETA@
	lea	eax, DWORD PTR $T228698[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv376[ebp], eax
	mov	ecx, DWORD PTR tv376[ebp]
	mov	DWORD PTR tv766[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR tv766[ebp]
	push	edx
	lea	ecx, DWORD PTR _strMessage$222442[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T228698[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3052 : 				strMessage << pDefender->getUnitInfo().GetTextKey() << GET_PLAYER(kAttacker.getOwner()).getNameKey();

	mov	eax, DWORD PTR _kAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T229048[ebp], ecx
	mov	edx, DWORD PTR $T229048[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T229052[ebp], edx
	mov	ecx, DWORD PTR $T229052[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T228699[ebp], eax
	mov	eax, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T229056[ebp], eax
	mov	ecx, DWORD PTR $T229056[ebp]
	call	?getUnitInfo@CvUnit@@QBEAAVCvUnitEntry@@XZ ; CvUnit::getUnitInfo
	mov	ecx, eax
	call	?GetTextKey@CvBaseInfo@@QBEPBDXZ	; CvBaseInfo::GetTextKey
	mov	DWORD PTR $T228700[ebp], eax
	lea	ecx, DWORD PTR $T228699[ebp]
	push	ecx
	lea	edx, DWORD PTR $T228700[ebp]
	push	edx
	lea	eax, DWORD PTR _strMessage$222442[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3053 : 				strSummary = Localization::Lookup("TXT_KEY_UNIT_CAPTURED_BARBS");

	push	OFFSET ??_C@_0BM@KPFEJBAO@TXT_KEY_UNIT_CAPTURED_BARBS?$AA@
	lea	ecx, DWORD PTR $T228701[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv373[ebp], eax
	mov	edx, DWORD PTR tv373[ebp]
	mov	DWORD PTR tv768[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	eax, DWORD PTR tv768[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$222443[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T228701[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3054 : 			}
; 3055 : 			else

	jmp	$LN12@Attack
$LN13@Attack:

; 3056 : 			{
; 3057 : 				strMessage = Localization::Lookup("TXT_KEY_UNIT_CAPTURED_DETAILED");

	push	OFFSET ??_C@_0BP@FAAJOHL@TXT_KEY_UNIT_CAPTURED_DETAILED?$AA@
	lea	ecx, DWORD PTR $T228702[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv934[ebp], eax
	mov	edx, DWORD PTR tv934[ebp]
	mov	DWORD PTR tv770[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	eax, DWORD PTR tv770[ebp]
	push	eax
	lea	ecx, DWORD PTR _strMessage$222442[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T228702[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3058 : 				strMessage << pDefender->getUnitInfo().GetTextKey();

	mov	ecx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T229060[ebp], ecx
	mov	ecx, DWORD PTR $T229060[ebp]
	call	?getUnitInfo@CvUnit@@QBEAAVCvUnitEntry@@XZ ; CvUnit::getUnitInfo
	mov	ecx, eax
	call	?GetTextKey@CvBaseInfo@@QBEPBDXZ	; CvBaseInfo::GetTextKey
	mov	DWORD PTR $T228703[ebp], eax
	lea	edx, DWORD PTR $T228703[ebp]
	push	edx
	lea	eax, DWORD PTR _strMessage$222442[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3059 : 				strSummary = Localization::Lookup("TXT_KEY_UNIT_CAPTURED");

	push	OFFSET ??_C@_0BG@FJJOPCKB@TXT_KEY_UNIT_CAPTURED?$AA@
	lea	ecx, DWORD PTR $T228704[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv937[ebp], eax
	mov	edx, DWORD PTR tv937[ebp]
	mov	DWORD PTR tv772[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	eax, DWORD PTR tv772[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$222443[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T228704[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN12@Attack:

; 3060 : 			}
; 3061 : 		}
; 3062 : 		// Unit was killed instead
; 3063 : 		else

	jmp	SHORT $LN11@Attack
$LN15@Attack:

; 3064 : 		{
; 3065 : 			strMessage = Localization::Lookup("TXT_KEY_UNIT_LOST");

	push	OFFSET ??_C@_0BC@DCAPLCAP@TXT_KEY_UNIT_LOST?$AA@
	lea	ecx, DWORD PTR $T228705[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv938[ebp], eax
	mov	edx, DWORD PTR tv938[ebp]
	mov	DWORD PTR tv774[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	eax, DWORD PTR tv774[ebp]
	push	eax
	lea	ecx, DWORD PTR _strMessage$222442[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T228705[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3066 : 			strSummary = strMessage;

	lea	ecx, DWORD PTR _strMessage$222442[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strSummary$222443[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
$LN11@Attack:

; 3067 : 		}
; 3068 : 
; 3069 : 		CvNotifications* pNotification = GET_PLAYER(pDefender->getOwner()).GetNotifications();

	mov	edx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T229064[ebp], edx
	mov	eax, DWORD PTR $T229064[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T229073[ebp], ecx
	mov	edx, DWORD PTR $T229073[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T229077[ebp], edx
	mov	ecx, DWORD PTR $T229077[ebp]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotification$222461[ebp], eax

; 3070 : 		if(pNotification)

	cmp	DWORD PTR _pNotification$222461[ebp], 0
	je	$LN10@Attack

; 3071 : 			pNotification->Add(NOTIFICATION_UNIT_DIED, strMessage.toUTF8(), strSummary.toUTF8(), pDefender->getX(), pDefender->getY(), (int) pDefender->getUnitType(), pDefender->getOwner());

	mov	eax, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T229081[ebp], eax
	mov	ecx, DWORD PTR $T229081[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T229090[ebp], edx
	mov	eax, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T229094[ebp], eax
	mov	ecx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T229098[ebp], ecx
	mov	edx, DWORD PTR $T229098[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR $T229107[ebp], eax
	mov	ecx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T229111[ebp], ecx
	mov	edx, DWORD PTR $T229111[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR $T229120[ebp], eax
	mov	ecx, DWORD PTR $T229090[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T229094[ebp]
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	mov	edx, DWORD PTR $T229107[ebp]
	push	edx
	mov	eax, DWORD PTR $T229120[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$222443[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strMessage$222442[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	-16309126				; ff07247aH
	mov	ecx, DWORD PTR _pNotification$222461[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add
$LN10@Attack:

; 3072 : 
; 3073 : 		bool bAdvance;
; 3074 : 		bAdvance = kAttacker.canAdvance(targetPlot, ((pDefender->IsCanDefend()) ? 1 : 0));

	mov	ecx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T229124[ebp], ecx
	push	0
	mov	ecx, DWORD PTR $T229124[ebp]
	call	?IsCanDefend@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::IsCanDefend
	movzx	edx, al
	neg	edx
	sbb	edx, edx
	neg	edx
	push	edx
	mov	eax, DWORD PTR _targetPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?canAdvance@CvUnit@@IBE_NABVCvPlot@@H@Z	; CvUnit::canAdvance
	mov	BYTE PTR _bAdvance$222464[ebp], al

; 3075 : 
; 3076 : 		// Move forward
; 3077 : 		if(targetPlot.getNumVisibleEnemyDefenders(&kAttacker) == 0)

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _targetPlot$[ebp]
	call	?getNumVisibleEnemyDefenders@CvPlot@@QBEHPBVCvUnit@@@Z ; CvPlot::getNumVisibleEnemyDefenders
	test	eax, eax
	jne	SHORT $LN9@Attack

; 3078 : 		{
; 3079 : 			kAttacker.UnitMove(&targetPlot, true, ((bAdvance) ? &kAttacker : NULL));

	push	0
	movzx	edx, BYTE PTR _bAdvance$222464[ebp]
	neg	edx
	sbb	edx, edx
	and	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _targetPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?UnitMove@CvUnit@@QAE_NPAVCvPlot@@_NPAV1@1@Z ; CvUnit::UnitMove
$LN9@Attack:

; 3080 : 		}
; 3081 : 
; 3082 : 		// KWG: Should this be called? The defender is killed above and the unit.
; 3083 : 		//      If anything, the above code should be put in the ResolveCombat method.
; 3084 : 		ResolveCombat(kCombatInfo);

	push	0
	lea	ecx, DWORD PTR _kCombatInfo$[ebp]
	push	ecx
	call	?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveCombat
	add	esp, 8

; 3085 : 		eResult = ATTACK_COMPLETED;

	mov	DWORD PTR _eResult$[ebp], 1

; 3086 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _strSummary$222443[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strMessage$222442[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3087 : 	else

	jmp	$LN4@Attack
$LN18@Attack:

; 3088 : 	{
; 3089 : 		ATTACK_RESULT eSupportResult = ATTACK_ABORTED;

	mov	DWORD PTR _eSupportResult$222467[ebp], 0

; 3090 : 		if(eOption != ATTACK_OPTION_NO_DEFENSIVE_SUPPORT)

	cmp	DWORD PTR _eOption$[ebp], 1
	je	$LN5@Attack

; 3091 : 		{
; 3092 : 			// Ranged fire support from artillery units
; 3093 : 			CvUnit* pFireSupportUnit = GetFireSupportUnit(pDefender->getOwner(), pDefender->getX(), pDefender->getY(), kAttacker.getX(), kAttacker.getY());

	mov	edx, DWORD PTR _kAttacker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR $T229133[ebp], eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR $T229142[ebp], edx
	mov	eax, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T229146[ebp], eax
	mov	ecx, DWORD PTR $T229146[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR $T229155[ebp], edx
	mov	eax, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T229159[ebp], eax
	mov	ecx, DWORD PTR $T229159[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR $T229168[ebp], edx
	mov	eax, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T229172[ebp], eax
	mov	ecx, DWORD PTR $T229172[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T229181[ebp], edx
	mov	eax, DWORD PTR $T229133[ebp]
	push	eax
	mov	ecx, DWORD PTR $T229142[ebp]
	push	ecx
	mov	edx, DWORD PTR $T229155[ebp]
	push	edx
	mov	eax, DWORD PTR $T229168[ebp]
	push	eax
	mov	ecx, DWORD PTR $T229181[ebp]
	push	ecx
	call	?GetFireSupportUnit@CvUnitCombat@@SAPAVCvUnit@@W4PlayerTypes@@HHHH@Z ; CvUnitCombat::GetFireSupportUnit
	add	esp, 20					; 00000014H
	mov	DWORD PTR _pFireSupportUnit$222469[ebp], eax

; 3094 : 			if(pFireSupportUnit != NULL)

	cmp	DWORD PTR _pFireSupportUnit$222469[ebp], 0
	je	SHORT $LN6@Attack

; 3095 : 			{
; 3096 : 				CvAssertMsg(!pFireSupportUnit->isDelayedDeath(), "Supporting battle unit is already dead!");
; 3097 : 				eSupportResult = AttackRanged(*pFireSupportUnit, kAttacker.getX(), kAttacker.getY(), CvUnitCombat::ATTACK_OPTION_NO_DEFENSIVE_SUPPORT);

	mov	edx, DWORD PTR _kAttacker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR $T229190[ebp], eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR $T229199[ebp], edx
	push	1
	mov	eax, DWORD PTR $T229190[ebp]
	push	eax
	mov	ecx, DWORD PTR $T229199[ebp]
	push	ecx
	mov	edx, DWORD PTR _pFireSupportUnit$222469[ebp]
	push	edx
	call	?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z ; CvUnitCombat::AttackRanged
	add	esp, 16					; 00000010H
	mov	DWORD PTR _eSupportResult$222467[ebp], eax

; 3098 : 				// Turn off Fortify Turns, as this is the trigger for whether or not a ranged Unit can provide support fire (in addition to hasMadeAttack)
; 3099 : 				pFireSupportUnit->setFortifyTurns(0);

	push	0
	mov	ecx, DWORD PTR _pFireSupportUnit$222469[ebp]
	call	?setFortifyTurns@CvUnit@@QAEXH@Z	; CvUnit::setFortifyTurns
$LN6@Attack:

; 3100 : 			}
; 3101 : 
; 3102 : 			if(eSupportResult == ATTACK_QUEUED)

	cmp	DWORD PTR _eSupportResult$222467[ebp], 2
	jne	$LN5@Attack

; 3103 : 			{
; 3104 : 				// The supporting unit has queued their attack (against the attacker), we must have the attacker queue its attack.
; 3105 : 				// Also, flag the current mission that the next time through, the defender doesn't get any defensive support.
; 3106 : 				const_cast<MissionData*>(kAttacker.GetHeadMissionData())->iFlags |= MISSION_MODIFIER_NO_DEFENSIVE_SUPPORT;

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetHeadMissionData@CvUnit@@QAEPBUMissionData@@XZ ; CvUnit::GetHeadMissionData
	add	eax, 12					; 0000000cH
	mov	DWORD PTR tv604[ebp], eax
	mov	eax, DWORD PTR tv604[ebp]
	mov	ecx, DWORD PTR [eax]
	or	ecx, 256				; 00000100H
	mov	edx, DWORD PTR tv604[ebp]
	mov	DWORD PTR [edx], ecx

; 3107 : 				CvUnitMission::WaitFor(&kAttacker, pFireSupportUnit);

	sub	esp, 8
	mov	eax, esp
	mov	DWORD PTR $T228706[ebp], esp
	mov	DWORD PTR $T229209[ebp], eax
	mov	ecx, DWORD PTR $T229209[ebp]
	mov	edx, DWORD PTR _pFireSupportUnit$222469[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T229209[ebp]
	mov	BYTE PTR [eax+4], 0
	mov	ecx, DWORD PTR $T229209[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN289@Attack
	mov	edx, DWORD PTR $T229209[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN289@Attack:
	mov	eax, DWORD PTR $T229209[ebp]
	mov	DWORD PTR tv776[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR $T228707[ebp], esp
	mov	DWORD PTR $T229219[ebp], ecx
	mov	edx, DWORD PTR $T229219[ebp]
	mov	eax, DWORD PTR _kAttacker$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T229219[ebp]
	mov	BYTE PTR [ecx+4], 0
	mov	edx, DWORD PTR $T229219[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN294@Attack
	mov	eax, DWORD PTR $T229219[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN294@Attack:
	mov	ecx, DWORD PTR $T229219[ebp]
	mov	DWORD PTR tv779[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	?WaitFor@CvUnitMission@@SAXV?$FObjectHandle@VCvUnit@@@@0@Z ; CvUnitMission::WaitFor
	add	esp, 16					; 00000010H

; 3108 : 				eResult = ATTACK_QUEUED;

	mov	DWORD PTR _eResult$[ebp], 2
$LN5@Attack:

; 3109 : 			}
; 3110 : 		}
; 3111 : 
; 3112 : 		if(eResult != ATTACK_QUEUED)

	cmp	DWORD PTR _eResult$[ebp], 2
	je	$LN4@Attack

; 3113 : 		{
; 3114 : 			kAttacker.setMadeAttack(true);

	push	1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setMadeAttack@CvUnit@@QAEX_N@Z		; CvUnit::setMadeAttack

; 3115 : 
; 3116 : 			uint uiParentEventID = 0;

	mov	DWORD PTR _uiParentEventID$222476[ebp], 0

; 3117 : 			// Send the combat message if the target plot is visible.
; 3118 : 			bool isTargetVisibleToActivePlayer = targetPlot.isActiveVisible(false);

	push	0
	mov	ecx, DWORD PTR _targetPlot$[ebp]
	call	?isActiveVisible@CvPlot@@QBE_N_N@Z	; CvPlot::isActiveVisible
	mov	BYTE PTR _isTargetVisibleToActivePlayer$222477[ebp], al

; 3119 : 			bool quickCombat = CvPreGame::quickCombat();

	call	?quickCombat@CvPreGame@@YA_NXZ		; CvPreGame::quickCombat
	mov	BYTE PTR _quickCombat$222478[ebp], al

; 3120 : 			if(!quickCombat)

	movzx	edx, BYTE PTR _quickCombat$222478[ebp]
	test	edx, edx
	jne	$LN3@Attack

; 3121 : 			{
; 3122 : 				// Center camera here!
; 3123 : 				if(isTargetVisibleToActivePlayer)

	movzx	eax, BYTE PTR _isTargetVisibleToActivePlayer$222477[ebp]
	test	eax, eax
	je	$LN313@Attack

; 3124 : 				{
; 3125 : 					auto_ptr<ICvPlot1> pDefenderPlot = GC.WrapPlotPointer(pDefender->plot());

	mov	ecx, DWORD PTR _pDefender$[ebp]
	mov	DWORD PTR $T229223[ebp], ecx
	mov	ecx, DWORD PTR $T229223[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	push	eax
	lea	edx, DWORD PTR $T228708[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ; CvGlobals::WrapPlotPointer
	mov	DWORD PTR $T229234[ebp], eax
	mov	eax, DWORD PTR $T229234[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Cvtptr$229232[ebp], ecx
	mov	edx, DWORD PTR __Cvtptr$229232[ebp]
	mov	DWORD PTR __Ans$229233[ebp], edx
	mov	eax, DWORD PTR $T229234[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR __Ans$229233[ebp]
	mov	DWORD PTR $T228709[ebp], ecx
	mov	edx, DWORD PTR $T228709[ebp]
	mov	DWORD PTR $T229239[ebp], edx
	mov	eax, DWORD PTR $T229239[ebp]
	mov	DWORD PTR __Ptr$229237[ebp], eax
	mov	DWORD PTR $T229239[ebp], 0
	mov	ecx, DWORD PTR __Ptr$229237[ebp]
	mov	DWORD PTR _pDefenderPlot$222528[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	edx, DWORD PTR $T228708[ebp]
	mov	DWORD PTR $T229249[ebp], edx
	cmp	DWORD PTR $T229249[ebp], 0
	je	SHORT $LN306@Attack
	mov	eax, DWORD PTR $T229249[ebp]
	mov	DWORD PTR _inst$229252[ebp], eax
	mov	ecx, DWORD PTR _inst$229252[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inst$229252[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
$LN306@Attack:

; 3126 : 					GC.GetEngineUserInterface()->lookAt(pDefenderPlot.get(), CAMERALOOKAT_NORMAL);

	mov	edx, DWORD PTR $T229257[ebp]
	mov	DWORD PTR tv700[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv700[ebp], eax
	push	0
	mov	ecx, DWORD PTR _pDefenderPlot$222528[ebp]
	push	ecx
	mov	edx, DWORD PTR tv700[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv700[ebp]
	mov	edx, DWORD PTR [eax+272]
	call	edx

; 3127 : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _pDefenderPlot$222528[ebp]
	mov	DWORD PTR $T229270[ebp], eax
	cmp	DWORD PTR $T229270[ebp], 0
	je	SHORT $LN315@Attack
	mov	ecx, DWORD PTR $T229270[ebp]
	mov	DWORD PTR _inst$229273[ebp], ecx
	mov	edx, DWORD PTR _inst$229273[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$229273[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN315@Attack:
$LN313@Attack:

; 3128 : 				kCombatInfo.setVisualizeCombat(isTargetVisibleToActivePlayer);

	movzx	eax, BYTE PTR _isTargetVisibleToActivePlayer$222477[ebp]
	push	eax
	lea	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?setVisualizeCombat@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setVisualizeCombat

; 3129 : 
; 3130 : 				auto_ptr<ICvCombatInfo1> pDllCombatInfo(new CvDllCombatInfo(&kCombatInfo));

	push	12					; 0000000cH
	call	??2CvDllCombatInfo@@SAPAXI@Z		; CvDllCombatInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228711[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	cmp	DWORD PTR $T228711[ebp], 0
	je	SHORT $LN33@Attack
	lea	ecx, DWORD PTR _kCombatInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228711[ebp]
	call	??0CvDllCombatInfo@@QAE@PAVCvCombatInfo@@@Z ; CvDllCombatInfo::CvDllCombatInfo
	mov	DWORD PTR tv722[ebp], eax
	jmp	SHORT $LN34@Attack
$LN33@Attack:
	mov	DWORD PTR tv722[ebp], 0
$LN34@Attack:
	mov	edx, DWORD PTR tv722[ebp]
	mov	DWORD PTR $T228710[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR $T228710[ebp]
	mov	DWORD PTR _pDllCombatInfo$222600[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH

; 3131 : 				uiParentEventID = gDLL->GameplayUnitCombat(pDllCombatInfo.get());

	mov	ecx, DWORD PTR $T229281[ebp]
	mov	DWORD PTR tv732[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv732[ebp], edx
	mov	eax, DWORD PTR _pDllCombatInfo$222600[ebp]
	mov	DWORD PTR $T229285[ebp], eax
	mov	ecx, DWORD PTR $T229285[ebp]
	push	ecx
	mov	edx, DWORD PTR tv732[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv732[ebp]
	mov	edx, DWORD PTR [eax+644]
	call	edx
	mov	DWORD PTR _uiParentEventID$222476[ebp], eax

; 3132 : 
; 3133 : 				// Set the combat units so that other missions do not continue until combat is over.
; 3134 : 				kAttacker.setCombatUnit(pDefender.pointer(), true);

	push	1
	mov	eax, DWORD PTR _pDefender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 3135 : 				pDefender->setCombatUnit(&kAttacker, false);

	push	0
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pDefender$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 3136 : 
; 3137 : 				eResult = ATTACK_QUEUED;

	mov	DWORD PTR _eResult$[ebp], 2

; 3138 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _pDllCombatInfo$222600[ebp]
	mov	DWORD PTR $T229301[ebp], edx
	cmp	DWORD PTR $T229301[ebp], 0
	je	SHORT $LN330@Attack
	mov	eax, DWORD PTR $T229301[ebp]
	mov	DWORD PTR _inst$229304[ebp], eax
	mov	ecx, DWORD PTR _inst$229304[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inst$229304[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
$LN330@Attack:

; 3139 : 			else

	jmp	SHORT $LN1@Attack
$LN3@Attack:

; 3140 : 				eResult = ATTACK_COMPLETED;

	mov	DWORD PTR _eResult$[ebp], 1
$LN1@Attack:

; 3141 : 
; 3142 : 			// Resolve combat here.
; 3143 : 			ResolveCombat(kCombatInfo, uiParentEventID);

	mov	edx, DWORD PTR _uiParentEventID$222476[ebp]
	push	edx
	lea	eax, DWORD PTR _kCombatInfo$[ebp]
	push	eax
	call	?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveCombat
	add	esp, 8
$LN4@Attack:

; 3144 : 
; 3145 : 		}
; 3146 : 	}
; 3147 : 
; 3148 : 	return eResult;

	mov	ecx, DWORD PTR _eResult$[ebp]
	mov	DWORD PTR $T228714[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR _pDefender$[ebp], 0
	je	SHORT $LN336@Attack
	mov	ecx, DWORD PTR _pDefender$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN336@Attack:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T228714[ebp]
$LN31@Attack:

; 3149 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$0:
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$1:
	lea	ecx, DWORD PTR _pDefender$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$2:
	lea	ecx, DWORD PTR $T228693[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$3:
	lea	ecx, DWORD PTR $T228696[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$4:
	lea	ecx, DWORD PTR $T228697[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$5:
	lea	ecx, DWORD PTR _strMessage$222442[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$6:
	lea	ecx, DWORD PTR _strSummary$222443[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$7:
	lea	ecx, DWORD PTR $T228698[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$8:
	lea	ecx, DWORD PTR $T228701[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$9:
	lea	ecx, DWORD PTR $T228702[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$10:
	lea	ecx, DWORD PTR $T228704[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$11:
	lea	ecx, DWORD PTR $T228705[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$12:
	mov	ecx, DWORD PTR $T228706[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$15:
	lea	ecx, DWORD PTR _pDefenderPlot$222528[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$16:
	mov	eax, DWORD PTR $T228711[ebp]
	push	eax
	call	??3CvDllCombatInfo@@SAXPAX@Z		; CvDllCombatInfo::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$17:
	lea	ecx, DWORD PTR _pDllCombatInfo$222600[ebp]
	jmp	??1?$auto_ptr@VICvCombatInfo1@@@std@@QAE@XZ ; std::auto_ptr<ICvCombatInfo1>::~auto_ptr<ICvCombatInfo1>
__ehhandler$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2600]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Attack@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z ENDP ; CvUnitCombat::Attack
PUBLIC	?coordRange@@YAHHH_N@Z				; coordRange
PUBLIC	__$ArrayPad$
EXTRN	?setCombatCity@CvUnit@@QAEXPAVCvCity@@@Z:PROC	; CvUnit::setCombatCity
EXTRN	?airStrikeTarget@CvUnit@@IBEPAV1@AAVCvPlot@@_N@Z:PROC ; CvUnit::airStrikeTarget
EXTRN	?canRangeStrikeAt@CvUnit@@QBE_NHH_N0@Z:PROC	; CvUnit::canRangeStrikeAt
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
xdata$x	SEGMENT
__ehfuncinfo$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$7
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z
_TEXT	SEGMENT
tv312 = -3060						; size = 4
tv302 = -3056						; size = 4
tv280 = -3052						; size = 4
tv229 = -3048						; size = 4
tv219 = -3044						; size = 4
tv197 = -3040						; size = 4
tv147 = -3036						; size = 4
tv401 = -3032						; size = 4
tv410 = -3028						; size = 4
_inst$229599 = -3024					; size = 4
$T229595 = -3020					; size = 4
$T229581 = -3012					; size = 4
$T229577 = -3008					; size = 4
_inst$229569 = -3004					; size = 4
$T229565 = -3000					; size = 4
$T229553 = -2996					; size = 4
_inst$229548 = -2992					; size = 4
$T229544 = -2988					; size = 4
$T229535 = -2984					; size = 4
__Ptr$229534 = -2980					; size = 4
$T229530 = -2976					; size = 4
__Cvtptr$229528 = -2972					; size = 4
__Ans$229529 = -2968					; size = 4
_inst$229518 = -2964					; size = 4
$T229514 = -2960					; size = 4
$T229505 = -2956					; size = 4
$T229501 = -2952					; size = 4
_inst$229493 = -2948					; size = 4
$T229489 = -2944					; size = 4
$T229477 = -2940					; size = 4
_inst$229472 = -2936					; size = 4
$T229468 = -2932					; size = 4
$T229459 = -2928					; size = 4
__Ptr$229458 = -2924					; size = 4
$T229454 = -2920					; size = 4
__Cvtptr$229452 = -2916					; size = 4
__Ans$229453 = -2912					; size = 4
$T229438 = -2904					; size = 4
$T229434 = -2900					; size = 4
$T229430 = -2896					; size = 4
$T229394 = -2892					; size = 4
$T229381 = -2888					; size = 4
$T229377 = -2884					; size = 4
$T229370 = -2880					; size = 4
$T229366 = -2873					; size = 1
$T229362 = -2872					; size = 4
$T229358 = -2865					; size = 1
_iMapY$229415 = -2864					; size = 4
_iMapX$229414 = -2860					; size = 4
$T229351 = -2856					; size = 4
$T229337 = -2852					; size = 4
$T229336 = -2848					; size = 4
$T229335 = -2844					; size = 4
$T229334 = -2840					; size = 4
$T229331 = -2836					; size = 4
$T229330 = -2832					; size = 4
$T229329 = -2828					; size = 4
$T229328 = -2824					; size = 4
_pDllPlot$222653 = -2820				; size = 4
_isTargetVisibleToActivePlayer$222650 = -2813		; size = 1
_pkDefender$222662 = -2812				; size = 4
_pDllCombatInfo$222661 = -2808				; size = 4
_kCombatInfo$222647 = -2804				; size = 1372
_uiParentEventID$222648 = -1428				; size = 4
_pDllPlot$222635 = -1424				; size = 4
_isTargetVisibleToActivePlayer$222632 = -1417		; size = 1
_pDllCombatInfo$222643 = -1416				; size = 4
_kCombatInfo$222629 = -1412				; size = 1372
__$ArrayPad$ = -36					; size = 4
_pDefender$222627 = -32					; size = 4
_uiParentEventID$222630 = -28				; size = 4
_pPlot$ = -24						; size = 4
_eResult$ = -20						; size = 4
_bDoImmediate$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_kAttacker$ = 8						; size = 4
_iX$ = 12						; size = 4
_iY$ = 16						; size = 4
___formal$ = 20						; size = 4
?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z PROC ; CvUnitCombat::AttackRanged, COMDAT

; 3153 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 3048				; 00000be8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 3154 : 	//VALIDATE_OBJECT
; 3155 : 	CvPlot* pPlot = GC.getMap().plot(iX, iY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T229351[ebp], eax
	cmp	DWORD PTR _iX$[ebp], -2147483647	; 80000001H
	je	SHORT $LN33@AttackRang
	cmp	DWORD PTR _iY$[ebp], -2147483647	; 80000001H
	jne	SHORT $LN34@AttackRang
$LN33@AttackRang:
	mov	DWORD PTR _pPlot$[ebp], 0
	jmp	$LN35@AttackRang
$LN34@AttackRang:
	mov	ecx, DWORD PTR $T229351[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T229358[ebp], dl
	mov	eax, DWORD PTR $T229351[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T229362[ebp], ecx
	movzx	edx, BYTE PTR $T229358[ebp]
	push	edx
	mov	eax, DWORD PTR $T229362[ebp]
	push	eax
	mov	ecx, DWORD PTR _iX$[ebp]
	push	ecx
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapX$229414[ebp], eax
	mov	edx, DWORD PTR $T229351[ebp]
	mov	al, BYTE PTR [edx+4057]
	mov	BYTE PTR $T229366[ebp], al
	mov	ecx, DWORD PTR $T229351[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T229370[ebp], edx
	movzx	eax, BYTE PTR $T229366[ebp]
	push	eax
	mov	ecx, DWORD PTR $T229370[ebp]
	push	ecx
	mov	edx, DWORD PTR _iY$[ebp]
	push	edx
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapY$229415[ebp], eax
	cmp	DWORD PTR _iMapX$229414[ebp], 0
	jl	SHORT $LN49@AttackRang
	mov	eax, DWORD PTR $T229351[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T229377[ebp], ecx
	mov	edx, DWORD PTR _iMapX$229414[ebp]
	cmp	edx, DWORD PTR $T229377[ebp]
	jge	SHORT $LN49@AttackRang
	cmp	DWORD PTR _iMapY$229415[ebp], 0
	jl	SHORT $LN49@AttackRang
	mov	eax, DWORD PTR $T229351[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T229381[ebp], ecx
	mov	edx, DWORD PTR _iMapY$229415[ebp]
	cmp	edx, DWORD PTR $T229381[ebp]
	jge	SHORT $LN49@AttackRang
	mov	DWORD PTR tv410[ebp], 1
	jmp	SHORT $LN47@AttackRang
$LN49@AttackRang:
	mov	DWORD PTR tv410[ebp], 0
$LN47@AttackRang:
	cmp	DWORD PTR tv410[ebp], 0
	je	SHORT $LN37@AttackRang
	mov	eax, DWORD PTR $T229351[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T229394[ebp], ecx
	mov	edx, DWORD PTR _iMapY$229415[ebp]
	imul	edx, DWORD PTR $T229394[ebp]
	add	edx, DWORD PTR _iMapX$229414[ebp]
	imul	edx, 484				; 000001e4H
	mov	eax, DWORD PTR $T229351[ebp]
	add	edx, DWORD PTR [eax+4068]
	mov	DWORD PTR tv401[ebp], edx
	jmp	SHORT $LN38@AttackRang
$LN37@AttackRang:
	mov	DWORD PTR tv401[ebp], 0
$LN38@AttackRang:
	mov	ecx, DWORD PTR tv401[ebp]
	mov	DWORD PTR _pPlot$[ebp], ecx
$LN35@AttackRang:

; 3156 : 	ATTACK_RESULT eResult = ATTACK_ABORTED;

	mov	DWORD PTR _eResult$[ebp], 0

; 3157 : 
; 3158 : 	CvAssertMsg(kAttacker.getDomainType() != DOMAIN_AIR, "Air units should not use AttackRanged, they should just MoveTo the target");
; 3159 : 
; 3160 : 	if(NULL == pPlot)

	cmp	DWORD PTR _pPlot$[ebp], 0
	jne	SHORT $LN16@AttackRang

; 3161 : 	{
; 3162 : 		return eResult;

	mov	eax, DWORD PTR _eResult$[ebp]
	jmp	$LN17@AttackRang
$LN16@AttackRang:

; 3163 : 	}
; 3164 : 
; 3165 : 	if (!kAttacker.isRangedSupportFire())

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isRangedSupportFire@CvUnit@@QBE_NXZ	; CvUnit::isRangedSupportFire
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN15@AttackRang

; 3166 : 	{
; 3167 : 		if(!kAttacker.canRangeStrikeAt(iX, iY))

	push	1
	push	1
	mov	eax, DWORD PTR _iY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iX$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?canRangeStrikeAt@CvUnit@@QBE_NHH_N0@Z	; CvUnit::canRangeStrikeAt
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN14@AttackRang

; 3168 : 		{
; 3169 : 			return eResult;

	mov	eax, DWORD PTR _eResult$[ebp]
	jmp	$LN17@AttackRang
$LN14@AttackRang:

; 3170 : 		}
; 3171 : 
; 3172 : 		if(GC.getRANGED_ATTACKS_USE_MOVES() == 0)

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6900
	mov	DWORD PTR $T229430[ebp], eax
	cmp	DWORD PTR $T229430[ebp], 0
	jne	SHORT $LN13@AttackRang

; 3173 : 		{
; 3174 : 			kAttacker.setMadeAttack(true);

	push	1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setMadeAttack@CvUnit@@QAEX_N@Z		; CvUnit::setMadeAttack
$LN13@AttackRang:

; 3175 : 		}
; 3176 : 		kAttacker.changeMoves(-GC.getMOVE_DENOMINATOR());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6236
	mov	DWORD PTR $T229434[ebp], ecx
	mov	edx, DWORD PTR $T229434[ebp]
	neg	edx
	push	edx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?changeMoves@CvUnit@@QAEXH@Z		; CvUnit::changeMoves
$LN15@AttackRang:

; 3177 : 	}
; 3178 : 
; 3179 : 	// Unit that attacks loses his Fort bonus
; 3180 : 	kAttacker.setFortifyTurns(0);

	push	0
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setFortifyTurns@CvUnit@@QAEXH@Z	; CvUnit::setFortifyTurns

; 3181 : 
; 3182 : 	// New test feature - attacking/range striking uses up all moves for most Units
; 3183 : #ifdef NQ_UNIT_TURN_ENDS_ON_FINAL_ATTACK
; 3184 : 	if(!kAttacker.canMoveAfterAttacking() && !kAttacker.isRangedSupportFire() && kAttacker.isOutOfAttacks())

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?canMoveAfterAttacking@CvUnit@@QBE_NXZ	; CvUnit::canMoveAfterAttacking
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN12@AttackRang
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isRangedSupportFire@CvUnit@@QBE_NXZ	; CvUnit::isRangedSupportFire
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN12@AttackRang
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isOutOfAttacks@CvUnit@@QBE_NXZ		; CvUnit::isOutOfAttacks
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN12@AttackRang

; 3185 : #else
; 3186 : 	if(!kAttacker.canMoveAfterAttacking() && !kAttacker.isRangedSupportFire())
; 3187 : #endif
; 3188 : 	{
; 3189 : 		kAttacker.finishMoves();

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?finishMoves@CvUnit@@QAEXXZ		; CvUnit::finishMoves

; 3190 : 		GC.GetEngineUserInterface()->changeCycleSelectionCounter(1);

	mov	eax, DWORD PTR $T229438[ebp]
	mov	DWORD PTR tv147[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv147[ebp], ecx
	push	1
	mov	edx, DWORD PTR tv147[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv147[ebp]
	mov	edx, DWORD PTR [eax+224]
	call	edx
$LN12@AttackRang:

; 3191 : 	}
; 3192 : 
; 3193 : 	kAttacker.SetAutomateType(NO_AUTOMATE);

	push	-1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?SetAutomateType@CvUnit@@QAEXW4AutomateTypes@@@Z ; CvUnit::SetAutomateType

; 3194 : 
; 3195 : 	bool bDoImmediate = CvPreGame::quickCombat();

	call	?quickCombat@CvPreGame@@YA_NXZ		; CvPreGame::quickCombat
	mov	BYTE PTR _bDoImmediate$[ebp], al

; 3196 : 	// Range-striking a Unit
; 3197 : 	if(!pPlot->isCity())

	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	movzx	eax, al
	test	eax, eax
	jne	$LN11@AttackRang

; 3198 : 	{
; 3199 : 		CvUnit* pDefender = kAttacker.airStrikeTarget(*pPlot, true);

	push	1
	mov	ecx, DWORD PTR _pPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?airStrikeTarget@CvUnit@@IBEPAV1@AAVCvPlot@@_N@Z ; CvUnit::airStrikeTarget
	mov	DWORD PTR _pDefender$222627[ebp], eax

; 3200 : 		CvAssert(pDefender != NULL);
; 3201 : 		if(!pDefender) return ATTACK_ABORTED;

	cmp	DWORD PTR _pDefender$222627[ebp], 0
	jne	SHORT $LN10@AttackRang
	xor	eax, eax
	jmp	$LN17@AttackRang
$LN10@AttackRang:

; 3202 : 
; 3203 : 		pDefender->SetAutomateType(NO_AUTOMATE);

	push	-1
	mov	ecx, DWORD PTR _pDefender$222627[ebp]
	call	?SetAutomateType@CvUnit@@QAEXW4AutomateTypes@@@Z ; CvUnit::SetAutomateType

; 3204 : 
; 3205 : 		CvCombatInfo kCombatInfo;

	lea	ecx, DWORD PTR _kCombatInfo$222629[ebp]
	call	??0CvCombatInfo@@QAE@XZ			; CvCombatInfo::CvCombatInfo

; 3206 : 		CvUnitCombat::GenerateRangedCombatInfo(kAttacker, pDefender, *pPlot, &kCombatInfo);

	lea	edx, DWORD PTR _kCombatInfo$222629[ebp]
	push	edx
	mov	eax, DWORD PTR _pPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDefender$222627[ebp]
	push	ecx
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	call	?GenerateRangedCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z ; CvUnitCombat::GenerateRangedCombatInfo
	add	esp, 16					; 00000010H

; 3207 : 		CvAssertMsg(!kAttacker.isDelayedDeath() && !pDefender->isDelayedDeath(), "Trying to battle and one of the units is already dead!");
; 3208 : 
; 3209 : 		uint uiParentEventID = 0;

	mov	DWORD PTR _uiParentEventID$222630[ebp], 0

; 3210 : 		if(!bDoImmediate)

	movzx	eax, BYTE PTR _bDoImmediate$[ebp]
	test	eax, eax
	jne	$LN9@AttackRang

; 3211 : 		{
; 3212 : 			// Center camera here!
; 3213 : 			bool isTargetVisibleToActivePlayer = pPlot->isActiveVisible(false);

	push	0
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?isActiveVisible@CvPlot@@QBE_N_N@Z	; CvPlot::isActiveVisible
	mov	BYTE PTR _isTargetVisibleToActivePlayer$222632[ebp], al

; 3214 : 			if(isTargetVisibleToActivePlayer)

	movzx	ecx, BYTE PTR _isTargetVisibleToActivePlayer$222632[ebp]
	test	ecx, ecx
	je	$LN8@AttackRang

; 3215 : 			{
; 3216 : 				auto_ptr<ICvPlot1> pDllPlot = GC.WrapPlotPointer(pPlot);

	mov	edx, DWORD PTR _pPlot$[ebp]
	push	edx
	lea	eax, DWORD PTR $T229328[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ; CvGlobals::WrapPlotPointer
	mov	DWORD PTR $T229454[ebp], eax
	mov	ecx, DWORD PTR $T229454[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Cvtptr$229452[ebp], edx
	mov	eax, DWORD PTR __Cvtptr$229452[ebp]
	mov	DWORD PTR __Ans$229453[ebp], eax
	mov	ecx, DWORD PTR $T229454[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR __Ans$229453[ebp]
	mov	DWORD PTR $T229329[ebp], edx
	mov	eax, DWORD PTR $T229329[ebp]
	mov	DWORD PTR $T229459[ebp], eax
	mov	ecx, DWORD PTR $T229459[ebp]
	mov	DWORD PTR __Ptr$229458[ebp], ecx
	mov	DWORD PTR $T229459[ebp], 0
	mov	edx, DWORD PTR __Ptr$229458[ebp]
	mov	DWORD PTR _pDllPlot$222635[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T229328[ebp]
	mov	DWORD PTR $T229468[ebp], eax
	cmp	DWORD PTR $T229468[ebp], 0
	je	SHORT $LN76@AttackRang
	mov	ecx, DWORD PTR $T229468[ebp]
	mov	DWORD PTR _inst$229472[ebp], ecx
	mov	edx, DWORD PTR _inst$229472[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$229472[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN76@AttackRang:

; 3217 : 				GC.GetEngineUserInterface()->lookAt(pDllPlot.get(), CAMERALOOKAT_NORMAL);

	mov	eax, DWORD PTR $T229477[ebp]
	mov	DWORD PTR tv197[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv197[ebp], ecx
	push	0
	mov	edx, DWORD PTR _pDllPlot$222635[ebp]
	push	edx
	mov	eax, DWORD PTR tv197[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv197[ebp]
	mov	eax, DWORD PTR [edx+272]
	call	eax

; 3218 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pDllPlot$222635[ebp]
	mov	DWORD PTR $T229489[ebp], ecx
	cmp	DWORD PTR $T229489[ebp], 0
	je	SHORT $LN8@AttackRang
	mov	edx, DWORD PTR $T229489[ebp]
	mov	DWORD PTR _inst$229493[ebp], edx
	mov	eax, DWORD PTR _inst$229493[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$229493[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN8@AttackRang:

; 3219 : 			kCombatInfo.setVisualizeCombat(isTargetVisibleToActivePlayer);

	movzx	ecx, BYTE PTR _isTargetVisibleToActivePlayer$222632[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kCombatInfo$222629[ebp]
	call	?setVisualizeCombat@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setVisualizeCombat

; 3220 : 
; 3221 : 			auto_ptr<ICvCombatInfo1> pDllCombatInfo(new CvDllCombatInfo(&kCombatInfo));

	push	12					; 0000000cH
	call	??2CvDllCombatInfo@@SAPAXI@Z		; CvDllCombatInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T229331[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T229331[ebp], 0
	je	SHORT $LN19@AttackRang
	lea	edx, DWORD PTR _kCombatInfo$222629[ebp]
	push	edx
	mov	ecx, DWORD PTR $T229331[ebp]
	call	??0CvDllCombatInfo@@QAE@PAVCvCombatInfo@@@Z ; CvDllCombatInfo::CvDllCombatInfo
	mov	DWORD PTR tv219[ebp], eax
	jmp	SHORT $LN20@AttackRang
$LN19@AttackRang:
	mov	DWORD PTR tv219[ebp], 0
$LN20@AttackRang:
	mov	eax, DWORD PTR tv219[ebp]
	mov	DWORD PTR $T229330[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T229330[ebp]
	mov	DWORD PTR _pDllCombatInfo$222643[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 3222 : 			uiParentEventID = gDLL->GameplayUnitCombat(pDllCombatInfo.get());

	mov	edx, DWORD PTR $T229501[ebp]
	mov	DWORD PTR tv229[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv229[ebp], eax
	mov	ecx, DWORD PTR _pDllCombatInfo$222643[ebp]
	mov	DWORD PTR $T229505[ebp], ecx
	mov	edx, DWORD PTR $T229505[ebp]
	push	edx
	mov	eax, DWORD PTR tv229[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv229[ebp]
	mov	eax, DWORD PTR [edx+644]
	call	eax
	mov	DWORD PTR _uiParentEventID$222630[ebp], eax

; 3223 : 
; 3224 : 			// Set the combat units so that other missions do not continue until combat is over.
; 3225 : 			kAttacker.setCombatUnit(pDefender, true);

	push	1
	mov	ecx, DWORD PTR _pDefender$222627[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 3226 : 			pDefender->setCombatUnit(&kAttacker, false);

	push	0
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pDefender$222627[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 3227 : 			eResult = ATTACK_QUEUED;

	mov	DWORD PTR _eResult$[ebp], 2

; 3228 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _pDllCombatInfo$222643[ebp]
	mov	DWORD PTR $T229514[ebp], eax
	cmp	DWORD PTR $T229514[ebp], 0
	je	SHORT $LN96@AttackRang
	mov	ecx, DWORD PTR $T229514[ebp]
	mov	DWORD PTR _inst$229518[ebp], ecx
	mov	edx, DWORD PTR _inst$229518[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$229518[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN96@AttackRang:

; 3229 : 		else

	jmp	SHORT $LN7@AttackRang
$LN9@AttackRang:

; 3230 : 			eResult = ATTACK_COMPLETED;

	mov	DWORD PTR _eResult$[ebp], 1
$LN7@AttackRang:

; 3231 : 
; 3232 : 		ResolveCombat(kCombatInfo, uiParentEventID);

	mov	eax, DWORD PTR _uiParentEventID$222630[ebp]
	push	eax
	lea	ecx, DWORD PTR _kCombatInfo$222629[ebp]
	push	ecx
	call	?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveCombat
	add	esp, 8

; 3233 : 	}
; 3234 : 	// Range-striking a City
; 3235 : 	else

	jmp	$LN6@AttackRang
$LN11@AttackRang:

; 3236 : 	{
; 3237 : 		if (kAttacker.isRangedSupportFire())

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isRangedSupportFire@CvUnit@@QBE_NXZ	; CvUnit::isRangedSupportFire
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@AttackRang

; 3238 : 		{
; 3239 : 			return eResult;

	mov	eax, DWORD PTR _eResult$[ebp]
	jmp	$LN17@AttackRang
$LN5@AttackRang:

; 3240 : 		}
; 3241 : 
; 3242 : 		CvCombatInfo kCombatInfo;

	lea	ecx, DWORD PTR _kCombatInfo$222647[ebp]
	call	??0CvCombatInfo@@QAE@XZ			; CvCombatInfo::CvCombatInfo

; 3243 : 		GenerateRangedCombatInfo(kAttacker, NULL, *pPlot, &kCombatInfo);

	lea	eax, DWORD PTR _kCombatInfo$222647[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlot$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	call	?GenerateRangedCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z ; CvUnitCombat::GenerateRangedCombatInfo
	add	esp, 16					; 00000010H

; 3244 : 		CvAssertMsg(!kAttacker.isDelayedDeath(), "Trying to battle and the attacker is already dead!");
; 3245 : 
; 3246 : 		uint uiParentEventID = 0;

	mov	DWORD PTR _uiParentEventID$222648[ebp], 0

; 3247 : 		if(!bDoImmediate)

	movzx	eax, BYTE PTR _bDoImmediate$[ebp]
	test	eax, eax
	jne	$LN4@AttackRang

; 3248 : 		{
; 3249 : 			// Center camera here!
; 3250 : 			bool isTargetVisibleToActivePlayer = pPlot->isActiveVisible(false);

	push	0
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?isActiveVisible@CvPlot@@QBE_N_N@Z	; CvPlot::isActiveVisible
	mov	BYTE PTR _isTargetVisibleToActivePlayer$222650[ebp], al

; 3251 : 			if(isTargetVisibleToActivePlayer)

	movzx	ecx, BYTE PTR _isTargetVisibleToActivePlayer$222650[ebp]
	test	ecx, ecx
	je	$LN3@AttackRang

; 3252 : 			{
; 3253 : 				auto_ptr<ICvPlot1> pDllPlot = GC.WrapPlotPointer(pPlot);

	mov	edx, DWORD PTR _pPlot$[ebp]
	push	edx
	lea	eax, DWORD PTR $T229334[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ; CvGlobals::WrapPlotPointer
	mov	DWORD PTR $T229530[ebp], eax
	mov	ecx, DWORD PTR $T229530[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Cvtptr$229528[ebp], edx
	mov	eax, DWORD PTR __Cvtptr$229528[ebp]
	mov	DWORD PTR __Ans$229529[ebp], eax
	mov	ecx, DWORD PTR $T229530[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR __Ans$229529[ebp]
	mov	DWORD PTR $T229335[ebp], edx
	mov	eax, DWORD PTR $T229335[ebp]
	mov	DWORD PTR $T229535[ebp], eax
	mov	ecx, DWORD PTR $T229535[ebp]
	mov	DWORD PTR __Ptr$229534[ebp], ecx
	mov	DWORD PTR $T229535[ebp], 0
	mov	edx, DWORD PTR __Ptr$229534[ebp]
	mov	DWORD PTR _pDllPlot$222653[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR $T229334[ebp]
	mov	DWORD PTR $T229544[ebp], eax
	cmp	DWORD PTR $T229544[ebp], 0
	je	SHORT $LN107@AttackRang
	mov	ecx, DWORD PTR $T229544[ebp]
	mov	DWORD PTR _inst$229548[ebp], ecx
	mov	edx, DWORD PTR _inst$229548[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$229548[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN107@AttackRang:

; 3254 : 				GC.GetEngineUserInterface()->lookAt(pDllPlot.get(), CAMERALOOKAT_NORMAL);

	mov	eax, DWORD PTR $T229553[ebp]
	mov	DWORD PTR tv280[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv280[ebp], ecx
	push	0
	mov	edx, DWORD PTR _pDllPlot$222653[ebp]
	push	edx
	mov	eax, DWORD PTR tv280[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv280[ebp]
	mov	eax, DWORD PTR [edx+272]
	call	eax

; 3255 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pDllPlot$222653[ebp]
	mov	DWORD PTR $T229565[ebp], ecx
	cmp	DWORD PTR $T229565[ebp], 0
	je	SHORT $LN3@AttackRang
	mov	edx, DWORD PTR $T229565[ebp]
	mov	DWORD PTR _inst$229569[ebp], edx
	mov	eax, DWORD PTR _inst$229569[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$229569[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN3@AttackRang:

; 3256 : 
; 3257 : 			kCombatInfo.setVisualizeCombat(isTargetVisibleToActivePlayer);

	movzx	ecx, BYTE PTR _isTargetVisibleToActivePlayer$222650[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kCombatInfo$222647[ebp]
	call	?setVisualizeCombat@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setVisualizeCombat

; 3258 : 
; 3259 : 			auto_ptr<ICvCombatInfo1> pDllCombatInfo(new CvDllCombatInfo(&kCombatInfo));

	push	12					; 0000000cH
	call	??2CvDllCombatInfo@@SAPAXI@Z		; CvDllCombatInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T229337[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T229337[ebp], 0
	je	SHORT $LN21@AttackRang
	lea	edx, DWORD PTR _kCombatInfo$222647[ebp]
	push	edx
	mov	ecx, DWORD PTR $T229337[ebp]
	call	??0CvDllCombatInfo@@QAE@PAVCvCombatInfo@@@Z ; CvDllCombatInfo::CvDllCombatInfo
	mov	DWORD PTR tv302[ebp], eax
	jmp	SHORT $LN22@AttackRang
$LN21@AttackRang:
	mov	DWORD PTR tv302[ebp], 0
$LN22@AttackRang:
	mov	eax, DWORD PTR tv302[ebp]
	mov	DWORD PTR $T229336[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T229336[ebp]
	mov	DWORD PTR _pDllCombatInfo$222661[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 5

; 3260 : 			uiParentEventID = gDLL->GameplayCityCombat(pDllCombatInfo.get());

	mov	edx, DWORD PTR $T229577[ebp]
	mov	DWORD PTR tv312[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv312[ebp], eax
	mov	ecx, DWORD PTR _pDllCombatInfo$222661[ebp]
	mov	DWORD PTR $T229581[ebp], ecx
	mov	edx, DWORD PTR $T229581[ebp]
	push	edx
	mov	eax, DWORD PTR tv312[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv312[ebp]
	mov	eax, DWORD PTR [edx+668]
	call	eax
	mov	DWORD PTR _uiParentEventID$222648[ebp], eax

; 3261 : 
; 3262 : 			CvCity* pkDefender = pPlot->getPlotCity();

	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pkDefender$222662[ebp], eax

; 3263 : 			kAttacker.setCombatCity(pkDefender);

	mov	ecx, DWORD PTR _pkDefender$222662[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setCombatCity@CvUnit@@QAEXPAVCvCity@@@Z ; CvUnit::setCombatCity

; 3264 : 			if(pkDefender)

	cmp	DWORD PTR _pkDefender$222662[ebp], 0
	je	SHORT $LN2@AttackRang

; 3265 : 				pkDefender->setCombatUnit(&kAttacker);

	push	0
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkDefender$222662[ebp]
	call	?setCombatUnit@CvCity@@QAEXPAVCvUnit@@_N@Z ; CvCity::setCombatUnit
$LN2@AttackRang:

; 3266 : 			eResult = ATTACK_QUEUED;

	mov	DWORD PTR _eResult$[ebp], 2

; 3267 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _pDllCombatInfo$222661[ebp]
	mov	DWORD PTR $T229595[ebp], eax
	cmp	DWORD PTR $T229595[ebp], 0
	je	SHORT $LN132@AttackRang
	mov	ecx, DWORD PTR $T229595[ebp]
	mov	DWORD PTR _inst$229599[ebp], ecx
	mov	edx, DWORD PTR _inst$229599[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$229599[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN132@AttackRang:

; 3268 : 		else

	jmp	SHORT $LN1@AttackRang
$LN4@AttackRang:

; 3269 : 			eResult = ATTACK_COMPLETED;

	mov	DWORD PTR _eResult$[ebp], 1
$LN1@AttackRang:

; 3270 : 
; 3271 : 		ResolveCombat(kCombatInfo, uiParentEventID);

	mov	eax, DWORD PTR _uiParentEventID$222648[ebp]
	push	eax
	lea	ecx, DWORD PTR _kCombatInfo$222647[ebp]
	push	ecx
	call	?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveCombat
	add	esp, 8
$LN6@AttackRang:

; 3272 : 	}
; 3273 : 
; 3274 : 	return eResult;

	mov	eax, DWORD PTR _eResult$[ebp]
$LN17@AttackRang:

; 3275 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$1:
	lea	ecx, DWORD PTR _pDllPlot$222635[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
__unwindfunclet$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$2:
	mov	eax, DWORD PTR $T229331[ebp]
	push	eax
	call	??3CvDllCombatInfo@@SAXPAX@Z		; CvDllCombatInfo::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$3:
	lea	ecx, DWORD PTR _pDllCombatInfo$222643[ebp]
	jmp	??1?$auto_ptr@VICvCombatInfo1@@@std@@QAE@XZ ; std::auto_ptr<ICvCombatInfo1>::~auto_ptr<ICvCombatInfo1>
__unwindfunclet$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$5:
	lea	ecx, DWORD PTR _pDllPlot$222653[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
__unwindfunclet$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$6:
	mov	eax, DWORD PTR $T229337[ebp]
	push	eax
	call	??3CvDllCombatInfo@@SAXPAX@Z		; CvDllCombatInfo::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$7:
	lea	ecx, DWORD PTR _pDllCombatInfo$222661[ebp]
	jmp	??1?$auto_ptr@VICvCombatInfo1@@@std@@QAE@XZ ; std::auto_ptr<ICvCombatInfo1>::~auto_ptr<ICvCombatInfo1>
__ehhandler$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-3052]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z ENDP ; CvUnitCombat::AttackRanged
PUBLIC	__$ArrayPad$
PUBLIC	?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z ; CvUnitCombat::AttackAir
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
xdata$x	SEGMENT
__ehfuncinfo$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$7
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
_TEXT	SEGMENT
tv274 = -3016						; size = 4
tv264 = -3012						; size = 4
tv242 = -3008						; size = 4
tv188 = -3004						; size = 4
tv178 = -3000						; size = 4
tv156 = -2996						; size = 4
_inst$229798 = -2992					; size = 4
$T229794 = -2988					; size = 4
$T229780 = -2980					; size = 4
$T229776 = -2976					; size = 4
_inst$229768 = -2972					; size = 4
$T229764 = -2968					; size = 4
$T229752 = -2964					; size = 4
_inst$229747 = -2960					; size = 4
$T229743 = -2956					; size = 4
$T229734 = -2952					; size = 4
__Ptr$229733 = -2948					; size = 4
$T229729 = -2944					; size = 4
__Cvtptr$229727 = -2940					; size = 4
__Ans$229728 = -2936					; size = 4
_inst$229717 = -2932					; size = 4
$T229713 = -2928					; size = 4
$T229704 = -2924					; size = 4
$T229700 = -2920					; size = 4
_inst$229692 = -2916					; size = 4
$T229688 = -2912					; size = 4
$T229676 = -2908					; size = 4
_inst$229671 = -2904					; size = 4
$T229667 = -2900					; size = 4
$T229658 = -2896					; size = 4
__Ptr$229657 = -2892					; size = 4
$T229653 = -2888					; size = 4
__Cvtptr$229651 = -2884					; size = 4
__Ans$229652 = -2880					; size = 4
$T229637 = -2872					; size = 4
$T229633 = -2868					; size = 4
$T229619 = -2864					; size = 4
$T229618 = -2860					; size = 4
$T229617 = -2856					; size = 4
$T229616 = -2852					; size = 4
$T229613 = -2848					; size = 4
$T229612 = -2844					; size = 4
$T229611 = -2840					; size = 4
$T229610 = -2836					; size = 4
_pDllTargetPlot$222701 = -2832				; size = 4
_isTargetVisibleToActivePlayer$222698 = -2825		; size = 1
_pkDefender$222710 = -2824				; size = 4
_pDllCombatInfo$222709 = -2820				; size = 4
_pDefenderSupport$222712 = -2816			; size = 4
_kCombatInfo$222695 = -2812				; size = 1372
_uiParentEventID$222696 = -1432				; size = 4
_pDllTargetPlot$222682 = -1428				; size = 4
_isTargetVisibleToActivePlayer$222679 = -1421		; size = 1
_pDllCombatInfo$222690 = -1420				; size = 4
_pDefenderSupport$222691 = -1416			; size = 4
_kCombatInfo$222676 = -1412				; size = 1372
__$ArrayPad$ = -32					; size = 4
_pDefender$222674 = -28					; size = 4
_uiParentEventID$222677 = -24				; size = 4
_eResult$ = -20						; size = 4
_bDoImmediate$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_kAttacker$ = 8						; size = 4
_targetPlot$ = 12					; size = 4
___formal$ = 16						; size = 4
?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z PROC ; CvUnitCombat::AttackAir, COMDAT

; 3279 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 3004				; 00000bbcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 3280 : 	//VALIDATE_OBJECT
; 3281 : 	CvAssert(kAttacker.getCombatTimer() == 0);
; 3282 : 
; 3283 : 	CvUnitCombat::ATTACK_RESULT eResult = CvUnitCombat::ATTACK_ABORTED;

	mov	DWORD PTR _eResult$[ebp], 0

; 3284 : 
; 3285 : 	// Can we actually hit the target?
; 3286 : 	if(!kAttacker.canRangeStrikeAt(targetPlot.getX(), targetPlot.getY()))

	mov	eax, DWORD PTR _targetPlot$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR $T229633[ebp], ecx
	mov	edx, DWORD PTR _targetPlot$[ebp]
	movsx	eax, WORD PTR [edx]
	mov	DWORD PTR $T229637[ebp], eax
	push	1
	push	1
	mov	ecx, DWORD PTR $T229633[ebp]
	push	ecx
	mov	edx, DWORD PTR $T229637[ebp]
	push	edx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?canRangeStrikeAt@CvUnit@@QBE_NHH_N0@Z	; CvUnit::canRangeStrikeAt
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN13@AttackAir

; 3287 : 	{
; 3288 : 		return eResult;

	mov	eax, DWORD PTR _eResult$[ebp]
	jmp	$LN14@AttackAir
$LN13@AttackAir:

; 3289 : 	}
; 3290 : 
; 3291 : 	bool bDoImmediate = CvPreGame::quickCombat();

	call	?quickCombat@CvPreGame@@YA_NXZ		; CvPreGame::quickCombat
	mov	BYTE PTR _bDoImmediate$[ebp], al

; 3292 : 	kAttacker.SetAutomateType(NO_AUTOMATE);

	push	-1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?SetAutomateType@CvUnit@@QAEXW4AutomateTypes@@@Z ; CvUnit::SetAutomateType

; 3293 : 	kAttacker.setMadeAttack(true);

	push	1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setMadeAttack@CvUnit@@QAEX_N@Z		; CvUnit::setMadeAttack

; 3294 : 
; 3295 : 	// Bombing a Unit
; 3296 : 	if(!targetPlot.isCity())

	mov	ecx, DWORD PTR _targetPlot$[ebp]
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN12@AttackAir

; 3297 : 	{
; 3298 : 		CvUnit* pDefender = kAttacker.airStrikeTarget(targetPlot, true);

	push	1
	mov	edx, DWORD PTR _targetPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?airStrikeTarget@CvUnit@@IBEPAV1@AAVCvPlot@@_N@Z ; CvUnit::airStrikeTarget
	mov	DWORD PTR _pDefender$222674[ebp], eax

; 3299 : 		CvAssert(pDefender != NULL);
; 3300 : 		if(!pDefender) return CvUnitCombat::ATTACK_ABORTED;

	cmp	DWORD PTR _pDefender$222674[ebp], 0
	jne	SHORT $LN11@AttackAir
	xor	eax, eax
	jmp	$LN14@AttackAir
$LN11@AttackAir:

; 3301 : 
; 3302 : 		pDefender->SetAutomateType(NO_AUTOMATE);

	push	-1
	mov	ecx, DWORD PTR _pDefender$222674[ebp]
	call	?SetAutomateType@CvUnit@@QAEXW4AutomateTypes@@@Z ; CvUnit::SetAutomateType

; 3303 : 
; 3304 : 		CvCombatInfo kCombatInfo;

	lea	ecx, DWORD PTR _kCombatInfo$222676[ebp]
	call	??0CvCombatInfo@@QAE@XZ			; CvCombatInfo::CvCombatInfo

; 3305 : 		CvUnitCombat::GenerateAirCombatInfo(kAttacker, pDefender, targetPlot, &kCombatInfo);

	lea	eax, DWORD PTR _kCombatInfo$222676[ebp]
	push	eax
	mov	ecx, DWORD PTR _targetPlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDefender$222674[ebp]
	push	edx
	mov	eax, DWORD PTR _kAttacker$[ebp]
	push	eax
	call	?GenerateAirCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z ; CvUnitCombat::GenerateAirCombatInfo
	add	esp, 16					; 00000010H

; 3306 : 		CvAssertMsg(!kAttacker.isDelayedDeath() && !pDefender->isDelayedDeath(), "Trying to battle and one of the units is already dead!");
; 3307 : 
; 3308 : 		uint uiParentEventID = 0;

	mov	DWORD PTR _uiParentEventID$222677[ebp], 0

; 3309 : 		if(!bDoImmediate)

	movzx	ecx, BYTE PTR _bDoImmediate$[ebp]
	test	ecx, ecx
	jne	$LN10@AttackAir

; 3310 : 		{
; 3311 : 			// Center camera here!
; 3312 : 			bool isTargetVisibleToActivePlayer = targetPlot.isActiveVisible(false);

	push	0
	mov	ecx, DWORD PTR _targetPlot$[ebp]
	call	?isActiveVisible@CvPlot@@QBE_N_N@Z	; CvPlot::isActiveVisible
	mov	BYTE PTR _isTargetVisibleToActivePlayer$222679[ebp], al

; 3313 : 			if(isTargetVisibleToActivePlayer)

	movzx	edx, BYTE PTR _isTargetVisibleToActivePlayer$222679[ebp]
	test	edx, edx
	je	$LN9@AttackAir

; 3314 : 			{
; 3315 : 				auto_ptr<ICvPlot1> pDllTargetPlot = GC.WrapPlotPointer(&targetPlot);

	mov	eax, DWORD PTR _targetPlot$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T229610[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ; CvGlobals::WrapPlotPointer
	mov	DWORD PTR $T229653[ebp], eax
	mov	edx, DWORD PTR $T229653[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Cvtptr$229651[ebp], eax
	mov	ecx, DWORD PTR __Cvtptr$229651[ebp]
	mov	DWORD PTR __Ans$229652[ebp], ecx
	mov	edx, DWORD PTR $T229653[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR __Ans$229652[ebp]
	mov	DWORD PTR $T229611[ebp], eax
	mov	ecx, DWORD PTR $T229611[ebp]
	mov	DWORD PTR $T229658[ebp], ecx
	mov	edx, DWORD PTR $T229658[ebp]
	mov	DWORD PTR __Ptr$229657[ebp], edx
	mov	DWORD PTR $T229658[ebp], 0
	mov	eax, DWORD PTR __Ptr$229657[ebp]
	mov	DWORD PTR _pDllTargetPlot$222682[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T229610[ebp]
	mov	DWORD PTR $T229667[ebp], ecx
	cmp	DWORD PTR $T229667[ebp], 0
	je	SHORT $LN43@AttackAir
	mov	edx, DWORD PTR $T229667[ebp]
	mov	DWORD PTR _inst$229671[ebp], edx
	mov	eax, DWORD PTR _inst$229671[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$229671[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN43@AttackAir:

; 3316 : 				GC.GetEngineUserInterface()->lookAt(pDllTargetPlot.get(), CAMERALOOKAT_NORMAL);

	mov	ecx, DWORD PTR $T229676[ebp]
	mov	DWORD PTR tv156[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv156[ebp], edx
	push	0
	mov	eax, DWORD PTR _pDllTargetPlot$222682[ebp]
	push	eax
	mov	ecx, DWORD PTR tv156[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv156[ebp]
	mov	eax, DWORD PTR [edx+272]
	call	eax

; 3317 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pDllTargetPlot$222682[ebp]
	mov	DWORD PTR $T229688[ebp], ecx
	cmp	DWORD PTR $T229688[ebp], 0
	je	SHORT $LN9@AttackAir
	mov	edx, DWORD PTR $T229688[ebp]
	mov	DWORD PTR _inst$229692[ebp], edx
	mov	eax, DWORD PTR _inst$229692[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$229692[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN9@AttackAir:

; 3318 : 			kCombatInfo.setVisualizeCombat(isTargetVisibleToActivePlayer);

	movzx	ecx, BYTE PTR _isTargetVisibleToActivePlayer$222679[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kCombatInfo$222676[ebp]
	call	?setVisualizeCombat@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setVisualizeCombat

; 3319 : 
; 3320 : 			auto_ptr<ICvCombatInfo1> pDllCombatInfo(new CvDllCombatInfo(&kCombatInfo));

	push	12					; 0000000cH
	call	??2CvDllCombatInfo@@SAPAXI@Z		; CvDllCombatInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T229613[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T229613[ebp], 0
	je	SHORT $LN16@AttackAir
	lea	edx, DWORD PTR _kCombatInfo$222676[ebp]
	push	edx
	mov	ecx, DWORD PTR $T229613[ebp]
	call	??0CvDllCombatInfo@@QAE@PAVCvCombatInfo@@@Z ; CvDllCombatInfo::CvDllCombatInfo
	mov	DWORD PTR tv178[ebp], eax
	jmp	SHORT $LN17@AttackAir
$LN16@AttackAir:
	mov	DWORD PTR tv178[ebp], 0
$LN17@AttackAir:
	mov	eax, DWORD PTR tv178[ebp]
	mov	DWORD PTR $T229612[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T229612[ebp]
	mov	DWORD PTR _pDllCombatInfo$222690[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 3321 : 			uiParentEventID = gDLL->GameplayUnitCombat(pDllCombatInfo.get());

	mov	edx, DWORD PTR $T229700[ebp]
	mov	DWORD PTR tv188[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv188[ebp], eax
	mov	ecx, DWORD PTR _pDllCombatInfo$222690[ebp]
	mov	DWORD PTR $T229704[ebp], ecx
	mov	edx, DWORD PTR $T229704[ebp]
	push	edx
	mov	eax, DWORD PTR tv188[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv188[ebp]
	mov	eax, DWORD PTR [edx+644]
	call	eax
	mov	DWORD PTR _uiParentEventID$222677[ebp], eax

; 3322 : 
; 3323 : 			// Set the combat units so that other missions do not continue until combat is over.
; 3324 : 			kAttacker.setCombatUnit(pDefender, true);

	push	1
	mov	ecx, DWORD PTR _pDefender$222674[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 3325 : 			pDefender->setCombatUnit(&kAttacker, false);

	push	0
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pDefender$222674[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 3326 : 			CvUnit* pDefenderSupport = kCombatInfo.getUnit(BATTLE_UNIT_INTERCEPTOR);

	push	2
	lea	ecx, DWORD PTR _kCombatInfo$222676[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pDefenderSupport$222691[ebp], eax

; 3327 : 			if(pDefenderSupport)

	cmp	DWORD PTR _pDefenderSupport$222691[ebp], 0
	je	SHORT $LN8@AttackAir

; 3328 : 				pDefenderSupport->setCombatUnit(&kAttacker, false);

	push	0
	mov	eax, DWORD PTR _kAttacker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDefenderSupport$222691[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit
$LN8@AttackAir:

; 3329 : 
; 3330 : 			eResult = ATTACK_QUEUED;

	mov	DWORD PTR _eResult$[ebp], 2

; 3331 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pDllCombatInfo$222690[ebp]
	mov	DWORD PTR $T229713[ebp], ecx
	cmp	DWORD PTR $T229713[ebp], 0
	je	SHORT $LN63@AttackAir
	mov	edx, DWORD PTR $T229713[ebp]
	mov	DWORD PTR _inst$229717[ebp], edx
	mov	eax, DWORD PTR _inst$229717[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$229717[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN63@AttackAir:

; 3332 : 		else

	jmp	SHORT $LN7@AttackAir
$LN10@AttackAir:

; 3333 : 			eResult = ATTACK_COMPLETED;

	mov	DWORD PTR _eResult$[ebp], 1
$LN7@AttackAir:

; 3334 : 
; 3335 : 		ResolveCombat(kCombatInfo, uiParentEventID);

	mov	ecx, DWORD PTR _uiParentEventID$222677[ebp]
	push	ecx
	lea	edx, DWORD PTR _kCombatInfo$222676[ebp]
	push	edx
	call	?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveCombat
	add	esp, 8

; 3336 : 	}
; 3337 : 	// Bombing a City
; 3338 : 	else

	jmp	$LN6@AttackAir
$LN12@AttackAir:

; 3339 : 	{
; 3340 : 		CvCombatInfo kCombatInfo;

	lea	ecx, DWORD PTR _kCombatInfo$222695[ebp]
	call	??0CvCombatInfo@@QAE@XZ			; CvCombatInfo::CvCombatInfo

; 3341 : 		GenerateAirCombatInfo(kAttacker, NULL, targetPlot, &kCombatInfo);

	lea	eax, DWORD PTR _kCombatInfo$222695[ebp]
	push	eax
	mov	ecx, DWORD PTR _targetPlot$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	call	?GenerateAirCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z ; CvUnitCombat::GenerateAirCombatInfo
	add	esp, 16					; 00000010H

; 3342 : 		CvAssertMsg(!kAttacker.isDelayedDeath(), "Trying to battle and the attacker is already dead!");
; 3343 : 
; 3344 : 		uint uiParentEventID = 0;

	mov	DWORD PTR _uiParentEventID$222696[ebp], 0

; 3345 : 		if(!bDoImmediate)

	movzx	eax, BYTE PTR _bDoImmediate$[ebp]
	test	eax, eax
	jne	$LN5@AttackAir

; 3346 : 		{
; 3347 : 			// Center camera here!
; 3348 : 			bool isTargetVisibleToActivePlayer = targetPlot.isActiveVisible(false);

	push	0
	mov	ecx, DWORD PTR _targetPlot$[ebp]
	call	?isActiveVisible@CvPlot@@QBE_N_N@Z	; CvPlot::isActiveVisible
	mov	BYTE PTR _isTargetVisibleToActivePlayer$222698[ebp], al

; 3349 : 			if(isTargetVisibleToActivePlayer)

	movzx	ecx, BYTE PTR _isTargetVisibleToActivePlayer$222698[ebp]
	test	ecx, ecx
	je	$LN4@AttackAir

; 3350 : 			{
; 3351 : 				auto_ptr<ICvPlot1> pDllTargetPlot = GC.WrapPlotPointer(&targetPlot);

	mov	edx, DWORD PTR _targetPlot$[ebp]
	push	edx
	lea	eax, DWORD PTR $T229616[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ; CvGlobals::WrapPlotPointer
	mov	DWORD PTR $T229729[ebp], eax
	mov	ecx, DWORD PTR $T229729[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Cvtptr$229727[ebp], edx
	mov	eax, DWORD PTR __Cvtptr$229727[ebp]
	mov	DWORD PTR __Ans$229728[ebp], eax
	mov	ecx, DWORD PTR $T229729[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR __Ans$229728[ebp]
	mov	DWORD PTR $T229617[ebp], edx
	mov	eax, DWORD PTR $T229617[ebp]
	mov	DWORD PTR $T229734[ebp], eax
	mov	ecx, DWORD PTR $T229734[ebp]
	mov	DWORD PTR __Ptr$229733[ebp], ecx
	mov	DWORD PTR $T229734[ebp], 0
	mov	edx, DWORD PTR __Ptr$229733[ebp]
	mov	DWORD PTR _pDllTargetPlot$222701[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR $T229616[ebp]
	mov	DWORD PTR $T229743[ebp], eax
	cmp	DWORD PTR $T229743[ebp], 0
	je	SHORT $LN74@AttackAir
	mov	ecx, DWORD PTR $T229743[ebp]
	mov	DWORD PTR _inst$229747[ebp], ecx
	mov	edx, DWORD PTR _inst$229747[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$229747[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN74@AttackAir:

; 3352 : 				GC.GetEngineUserInterface()->lookAt(pDllTargetPlot.get(), CAMERALOOKAT_NORMAL);

	mov	eax, DWORD PTR $T229752[ebp]
	mov	DWORD PTR tv242[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv242[ebp], ecx
	push	0
	mov	edx, DWORD PTR _pDllTargetPlot$222701[ebp]
	push	edx
	mov	eax, DWORD PTR tv242[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv242[ebp]
	mov	eax, DWORD PTR [edx+272]
	call	eax

; 3353 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pDllTargetPlot$222701[ebp]
	mov	DWORD PTR $T229764[ebp], ecx
	cmp	DWORD PTR $T229764[ebp], 0
	je	SHORT $LN4@AttackAir
	mov	edx, DWORD PTR $T229764[ebp]
	mov	DWORD PTR _inst$229768[ebp], edx
	mov	eax, DWORD PTR _inst$229768[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$229768[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN4@AttackAir:

; 3354 : 
; 3355 : 			kCombatInfo.setVisualizeCombat(isTargetVisibleToActivePlayer);

	movzx	ecx, BYTE PTR _isTargetVisibleToActivePlayer$222698[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kCombatInfo$222695[ebp]
	call	?setVisualizeCombat@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setVisualizeCombat

; 3356 : 			auto_ptr<ICvCombatInfo1> pDllCombatInfo(new CvDllCombatInfo(&kCombatInfo));

	push	12					; 0000000cH
	call	??2CvDllCombatInfo@@SAPAXI@Z		; CvDllCombatInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T229619[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T229619[ebp], 0
	je	SHORT $LN18@AttackAir
	lea	edx, DWORD PTR _kCombatInfo$222695[ebp]
	push	edx
	mov	ecx, DWORD PTR $T229619[ebp]
	call	??0CvDllCombatInfo@@QAE@PAVCvCombatInfo@@@Z ; CvDllCombatInfo::CvDllCombatInfo
	mov	DWORD PTR tv264[ebp], eax
	jmp	SHORT $LN19@AttackAir
$LN18@AttackAir:
	mov	DWORD PTR tv264[ebp], 0
$LN19@AttackAir:
	mov	eax, DWORD PTR tv264[ebp]
	mov	DWORD PTR $T229618[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T229618[ebp]
	mov	DWORD PTR _pDllCombatInfo$222709[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 5

; 3357 : 			uiParentEventID = gDLL->GameplayCityCombat(pDllCombatInfo.get());

	mov	edx, DWORD PTR $T229776[ebp]
	mov	DWORD PTR tv274[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv274[ebp], eax
	mov	ecx, DWORD PTR _pDllCombatInfo$222709[ebp]
	mov	DWORD PTR $T229780[ebp], ecx
	mov	edx, DWORD PTR $T229780[ebp]
	push	edx
	mov	eax, DWORD PTR tv274[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv274[ebp]
	mov	eax, DWORD PTR [edx+668]
	call	eax
	mov	DWORD PTR _uiParentEventID$222696[ebp], eax

; 3358 : 
; 3359 : 			CvCity* pkDefender = targetPlot.getPlotCity();

	mov	ecx, DWORD PTR _targetPlot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pkDefender$222710[ebp], eax

; 3360 : 			kAttacker.setCombatCity(pkDefender);

	mov	ecx, DWORD PTR _pkDefender$222710[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setCombatCity@CvUnit@@QAEXPAVCvCity@@@Z ; CvUnit::setCombatCity

; 3361 : 			if(pkDefender)

	cmp	DWORD PTR _pkDefender$222710[ebp], 0
	je	SHORT $LN3@AttackAir

; 3362 : 				pkDefender->setCombatUnit(&kAttacker);

	push	0
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkDefender$222710[ebp]
	call	?setCombatUnit@CvCity@@QAEXPAVCvUnit@@_N@Z ; CvCity::setCombatUnit
$LN3@AttackAir:

; 3363 : 			CvUnit* pDefenderSupport = kCombatInfo.getUnit(BATTLE_UNIT_INTERCEPTOR);

	push	2
	lea	ecx, DWORD PTR _kCombatInfo$222695[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pDefenderSupport$222712[ebp], eax

; 3364 : 			if(pDefenderSupport)

	cmp	DWORD PTR _pDefenderSupport$222712[ebp], 0
	je	SHORT $LN2@AttackAir

; 3365 : 				pDefenderSupport->setCombatUnit(&kAttacker, false);

	push	0
	mov	eax, DWORD PTR _kAttacker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDefenderSupport$222712[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit
$LN2@AttackAir:

; 3366 : 			eResult = ATTACK_QUEUED;

	mov	DWORD PTR _eResult$[ebp], 2

; 3367 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pDllCombatInfo$222709[ebp]
	mov	DWORD PTR $T229794[ebp], ecx
	cmp	DWORD PTR $T229794[ebp], 0
	je	SHORT $LN99@AttackAir
	mov	edx, DWORD PTR $T229794[ebp]
	mov	DWORD PTR _inst$229798[ebp], edx
	mov	eax, DWORD PTR _inst$229798[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$229798[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN99@AttackAir:

; 3368 : 		else

	jmp	SHORT $LN1@AttackAir
$LN5@AttackAir:

; 3369 : 			eResult = ATTACK_COMPLETED;

	mov	DWORD PTR _eResult$[ebp], 1
$LN1@AttackAir:

; 3370 : 
; 3371 : 		ResolveCombat(kCombatInfo, uiParentEventID);

	mov	ecx, DWORD PTR _uiParentEventID$222696[ebp]
	push	ecx
	lea	edx, DWORD PTR _kCombatInfo$222695[ebp]
	push	edx
	call	?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveCombat
	add	esp, 8
$LN6@AttackAir:

; 3372 : 	}
; 3373 : 
; 3374 : 	return eResult;

	mov	eax, DWORD PTR _eResult$[ebp]
$LN14@AttackAir:

; 3375 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$1:
	lea	ecx, DWORD PTR _pDllTargetPlot$222682[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
__unwindfunclet$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$2:
	mov	eax, DWORD PTR $T229613[ebp]
	push	eax
	call	??3CvDllCombatInfo@@SAXPAX@Z		; CvDllCombatInfo::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$3:
	lea	ecx, DWORD PTR _pDllCombatInfo$222690[ebp]
	jmp	??1?$auto_ptr@VICvCombatInfo1@@@std@@QAE@XZ ; std::auto_ptr<ICvCombatInfo1>::~auto_ptr<ICvCombatInfo1>
__unwindfunclet$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$5:
	lea	ecx, DWORD PTR _pDllTargetPlot$222701[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
__unwindfunclet$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$6:
	mov	eax, DWORD PTR $T229619[ebp]
	push	eax
	call	??3CvDllCombatInfo@@SAXPAX@Z		; CvDllCombatInfo::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$7:
	lea	ecx, DWORD PTR _pDllCombatInfo$222709[ebp]
	jmp	??1?$auto_ptr@VICvCombatInfo1@@@std@@QAE@XZ ; std::auto_ptr<ICvCombatInfo1>::~auto_ptr<ICvCombatInfo1>
__ehhandler$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-3008]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AttackAir@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z ENDP ; CvUnitCombat::AttackAir
PUBLIC	??_C@_0CB@BBIBMAEL@TXT_KEY_AIR_PATROL_FOUND_NOTHING@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z ; CvUnitCombat::AttackAirSweep
EXTRN	?canAirSweepAt@CvUnit@@QBE_NHH@Z:PROC		; CvUnit::canAirSweepAt
;	COMDAT ??_C@_0CB@BBIBMAEL@TXT_KEY_AIR_PATROL_FOUND_NOTHING@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_0CB@BBIBMAEL@TXT_KEY_AIR_PATROL_FOUND_NOTHING@ DB 'TXT_KEY_AIR_PATR'
	DB	'OL_FOUND_NOTHING', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$4
__ehfuncinfo$?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
_TEXT	SEGMENT
tv230 = -1632						; size = 4
tv187 = -1628						; size = 4
tv177 = -1624						; size = 4
tv155 = -1620						; size = 4
$T229938 = -1616					; size = 4
$T229934 = -1612					; size = 4
$T229925 = -1608					; size = 4
$T229921 = -1604					; size = 4
$T229917 = -1600					; size = 4
$T229913 = -1596					; size = 4
_inst$229903 = -1592					; size = 4
$T229899 = -1588					; size = 4
$T229890 = -1584					; size = 4
$T229886 = -1580					; size = 4
_inst$229878 = -1576					; size = 4
$T229874 = -1572					; size = 4
$T229862 = -1568					; size = 4
_inst$229857 = -1564					; size = 4
$T229853 = -1560					; size = 4
$T229844 = -1556					; size = 4
__Ptr$229843 = -1552					; size = 4
$T229839 = -1548					; size = 4
__Cvtptr$229837 = -1544					; size = 4
__Ans$229838 = -1540					; size = 4
$T229828 = -1536					; size = 4
$T229824 = -1532					; size = 4
$T229815 = -1528					; size = 4
$T229812 = -1524					; size = 4
$T229811 = -1520					; size = 4
$T229810 = -1516					; size = 4
$T229809 = -1512					; size = 4
_localizedText$222744 = -1508				; size = 80
_pDllTargetPlot$222732 = -1424				; size = 4
_isTargetVisibleToActivePlayer$222729 = -1417		; size = 1
_pDllCombatInfo$222740 = -1416				; size = 4
_kCombatInfo$222724 = -1412				; size = 1372
__$ArrayPad$ = -36					; size = 4
_pkDefender$222725 = -32				; size = 4
_bDoImmediate$222727 = -25				; size = 1
_uiParentEventID$222726 = -24				; size = 4
_eResult$ = -20						; size = 4
_pInterceptor$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kAttacker$ = 8						; size = 4
_targetPlot$ = 12					; size = 4
___formal$ = 16						; size = 4
?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z PROC ; CvUnitCombat::AttackAirSweep, COMDAT

; 3379 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1620				; 00000654H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 3380 : 	//VALIDATE_OBJECT
; 3381 : 	CvAssert(kAttacker.getCombatTimer() == 0);
; 3382 : 
; 3383 : 	CvUnitCombat::ATTACK_RESULT eResult = CvUnitCombat::ATTACK_ABORTED;

	mov	DWORD PTR _eResult$[ebp], 0

; 3384 : 
; 3385 : 	// Can we actually hit the target?
; 3386 : 	if(!kAttacker.canAirSweepAt(targetPlot.getX(), targetPlot.getY()))

	mov	eax, DWORD PTR _targetPlot$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR $T229824[ebp], ecx
	mov	edx, DWORD PTR _targetPlot$[ebp]
	movsx	eax, WORD PTR [edx]
	mov	DWORD PTR $T229828[ebp], eax
	mov	ecx, DWORD PTR $T229824[ebp]
	push	ecx
	mov	edx, DWORD PTR $T229828[ebp]
	push	edx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?canAirSweepAt@CvUnit@@QBE_NHH@Z	; CvUnit::canAirSweepAt
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@AttackAirS

; 3387 : 	{
; 3388 : 		return eResult;

	mov	eax, DWORD PTR _eResult$[ebp]
	jmp	$LN9@AttackAirS
$LN8@AttackAirS:

; 3389 : 	}
; 3390 : 
; 3391 : 	CvUnit* pInterceptor = kAttacker.GetBestInterceptor(targetPlot);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _targetPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetBestInterceptor@CvUnit@@QBEPAV1@ABVCvPlot@@PAV1@_N2@Z ; CvUnit::GetBestInterceptor
	mov	DWORD PTR _pInterceptor$[ebp], eax

; 3392 : 	kAttacker.SetAutomateType(NO_AUTOMATE);

	push	-1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?SetAutomateType@CvUnit@@QAEXW4AutomateTypes@@@Z ; CvUnit::SetAutomateType

; 3393 : 
; 3394 : 	// Any interceptor to sweep for?
; 3395 : 	if(pInterceptor != NULL)

	cmp	DWORD PTR _pInterceptor$[ebp], 0
	je	$LN55@AttackAirS

; 3396 : 	{
; 3397 : 		kAttacker.setMadeAttack(true);

	push	1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setMadeAttack@CvUnit@@QAEX_N@Z		; CvUnit::setMadeAttack

; 3398 : 		CvCombatInfo kCombatInfo;

	lea	ecx, DWORD PTR _kCombatInfo$222724[ebp]
	call	??0CvCombatInfo@@QAE@XZ			; CvCombatInfo::CvCombatInfo

; 3399 : 		CvUnitCombat::GenerateAirSweepCombatInfo(kAttacker, pInterceptor, targetPlot, &kCombatInfo);

	lea	edx, DWORD PTR _kCombatInfo$222724[ebp]
	push	edx
	mov	eax, DWORD PTR _targetPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInterceptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	call	?GenerateAirSweepCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z ; CvUnitCombat::GenerateAirSweepCombatInfo
	add	esp, 16					; 00000010H

; 3400 : 		CvUnit* pkDefender = kCombatInfo.getUnit(BATTLE_UNIT_DEFENDER);

	push	1
	lea	ecx, DWORD PTR _kCombatInfo$222724[ebp]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pkDefender$222725[ebp], eax

; 3401 : 		pkDefender->SetAutomateType(NO_AUTOMATE);

	push	-1
	mov	ecx, DWORD PTR _pkDefender$222725[ebp]
	call	?SetAutomateType@CvUnit@@QAEXW4AutomateTypes@@@Z ; CvUnit::SetAutomateType

; 3402 : 		CvAssertMsg(!kAttacker.isDelayedDeath() && !pkDefender->isDelayedDeath(), "Trying to battle and one of the units is already dead!");
; 3403 : 
; 3404 : 		uint uiParentEventID = 0;

	mov	DWORD PTR _uiParentEventID$222726[ebp], 0

; 3405 : 		bool bDoImmediate = CvPreGame::quickCombat();

	call	?quickCombat@CvPreGame@@YA_NXZ		; CvPreGame::quickCombat
	mov	BYTE PTR _bDoImmediate$222727[ebp], al

; 3406 : 		if(!bDoImmediate)

	movzx	eax, BYTE PTR _bDoImmediate$222727[ebp]
	test	eax, eax
	jne	$LN6@AttackAirS

; 3407 : 		{
; 3408 : 			// Center camera here!
; 3409 : 			bool isTargetVisibleToActivePlayer = targetPlot.isActiveVisible(false);

	push	0
	mov	ecx, DWORD PTR _targetPlot$[ebp]
	call	?isActiveVisible@CvPlot@@QBE_N_N@Z	; CvPlot::isActiveVisible
	mov	BYTE PTR _isTargetVisibleToActivePlayer$222729[ebp], al

; 3410 : 			if(isTargetVisibleToActivePlayer)

	movzx	ecx, BYTE PTR _isTargetVisibleToActivePlayer$222729[ebp]
	test	ecx, ecx
	je	$LN5@AttackAirS

; 3411 : 			{
; 3412 : 				auto_ptr<ICvPlot1> pDllTargetPlot = GC.WrapPlotPointer(&targetPlot);

	mov	edx, DWORD PTR _targetPlot$[ebp]
	push	edx
	lea	eax, DWORD PTR $T229809[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ; CvGlobals::WrapPlotPointer
	mov	DWORD PTR $T229839[ebp], eax
	mov	ecx, DWORD PTR $T229839[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Cvtptr$229837[ebp], edx
	mov	eax, DWORD PTR __Cvtptr$229837[ebp]
	mov	DWORD PTR __Ans$229838[ebp], eax
	mov	ecx, DWORD PTR $T229839[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR __Ans$229838[ebp]
	mov	DWORD PTR $T229810[ebp], edx
	mov	eax, DWORD PTR $T229810[ebp]
	mov	DWORD PTR $T229844[ebp], eax
	mov	ecx, DWORD PTR $T229844[ebp]
	mov	DWORD PTR __Ptr$229843[ebp], ecx
	mov	DWORD PTR $T229844[ebp], 0
	mov	edx, DWORD PTR __Ptr$229843[ebp]
	mov	DWORD PTR _pDllTargetPlot$222732[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T229809[ebp]
	mov	DWORD PTR $T229853[ebp], eax
	cmp	DWORD PTR $T229853[ebp], 0
	je	SHORT $LN28@AttackAirS
	mov	ecx, DWORD PTR $T229853[ebp]
	mov	DWORD PTR _inst$229857[ebp], ecx
	mov	edx, DWORD PTR _inst$229857[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$229857[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN28@AttackAirS:

; 3413 : 				GC.GetEngineUserInterface()->lookAt(pDllTargetPlot.get(), CAMERALOOKAT_NORMAL);

	mov	eax, DWORD PTR $T229862[ebp]
	mov	DWORD PTR tv155[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv155[ebp], ecx
	push	0
	mov	edx, DWORD PTR _pDllTargetPlot$222732[ebp]
	push	edx
	mov	eax, DWORD PTR tv155[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv155[ebp]
	mov	eax, DWORD PTR [edx+272]
	call	eax

; 3414 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pDllTargetPlot$222732[ebp]
	mov	DWORD PTR $T229874[ebp], ecx
	cmp	DWORD PTR $T229874[ebp], 0
	je	SHORT $LN5@AttackAirS
	mov	edx, DWORD PTR $T229874[ebp]
	mov	DWORD PTR _inst$229878[ebp], edx
	mov	eax, DWORD PTR _inst$229878[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$229878[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN5@AttackAirS:

; 3415 : 			kCombatInfo.setVisualizeCombat(isTargetVisibleToActivePlayer);

	movzx	ecx, BYTE PTR _isTargetVisibleToActivePlayer$222729[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kCombatInfo$222724[ebp]
	call	?setVisualizeCombat@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setVisualizeCombat

; 3416 : 
; 3417 : 			auto_ptr<ICvCombatInfo1> pDllCombatInfo(new CvDllCombatInfo(&kCombatInfo));

	push	12					; 0000000cH
	call	??2CvDllCombatInfo@@SAPAXI@Z		; CvDllCombatInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T229812[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T229812[ebp], 0
	je	SHORT $LN11@AttackAirS
	lea	edx, DWORD PTR _kCombatInfo$222724[ebp]
	push	edx
	mov	ecx, DWORD PTR $T229812[ebp]
	call	??0CvDllCombatInfo@@QAE@PAVCvCombatInfo@@@Z ; CvDllCombatInfo::CvDllCombatInfo
	mov	DWORD PTR tv177[ebp], eax
	jmp	SHORT $LN12@AttackAirS
$LN11@AttackAirS:
	mov	DWORD PTR tv177[ebp], 0
$LN12@AttackAirS:
	mov	eax, DWORD PTR tv177[ebp]
	mov	DWORD PTR $T229811[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T229811[ebp]
	mov	DWORD PTR _pDllCombatInfo$222740[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 3418 : 			uiParentEventID = gDLL->GameplayUnitCombat(pDllCombatInfo.get());

	mov	edx, DWORD PTR $T229886[ebp]
	mov	DWORD PTR tv187[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv187[ebp], eax
	mov	ecx, DWORD PTR _pDllCombatInfo$222740[ebp]
	mov	DWORD PTR $T229890[ebp], ecx
	mov	edx, DWORD PTR $T229890[ebp]
	push	edx
	mov	eax, DWORD PTR tv187[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv187[ebp]
	mov	eax, DWORD PTR [edx+644]
	call	eax
	mov	DWORD PTR _uiParentEventID$222726[ebp], eax

; 3419 : 
; 3420 : 			// Set the combat units so that other missions do not continue until combat is over.
; 3421 : 			kAttacker.setCombatUnit(pInterceptor, true);

	push	1
	mov	ecx, DWORD PTR _pInterceptor$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 3422 : 			pInterceptor->setCombatUnit(&kAttacker, false);

	push	0
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pInterceptor$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 3423 : 			eResult = ATTACK_QUEUED;

	mov	DWORD PTR _eResult$[ebp], 2

; 3424 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _pDllCombatInfo$222740[ebp]
	mov	DWORD PTR $T229899[ebp], eax
	cmp	DWORD PTR $T229899[ebp], 0
	je	SHORT $LN48@AttackAirS
	mov	ecx, DWORD PTR $T229899[ebp]
	mov	DWORD PTR _inst$229903[ebp], ecx
	mov	edx, DWORD PTR _inst$229903[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$229903[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN48@AttackAirS:

; 3425 : 		else

	jmp	SHORT $LN4@AttackAirS
$LN6@AttackAirS:

; 3426 : 			eResult = ATTACK_COMPLETED;

	mov	DWORD PTR _eResult$[ebp], 1
$LN4@AttackAirS:

; 3427 : 
; 3428 : 		ResolveCombat(kCombatInfo, uiParentEventID);

	mov	eax, DWORD PTR _uiParentEventID$222726[ebp]
	push	eax
	lea	ecx, DWORD PTR _kCombatInfo$222724[ebp]
	push	ecx
	call	?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveCombat
	add	esp, 8

; 3429 : 	}
; 3430 : 	else

	jmp	$LN3@AttackAirS

; 3431 : 	{
; 3432 : 		// attempted to do a sweep in a plot that had no interceptors
; 3433 : 		// consume the movement and finish its moves
; 3434 : 		if(kAttacker.getOwner() == GC.getGame().getActivePlayer())

$LN55@AttackAirS:
	mov	edx, DWORD PTR _kAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T229913[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T229917[ebp], ecx
	mov	ecx, DWORD PTR $T229917[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T229913[ebp], eax
	jne	$LN2@AttackAirS

; 3435 : 		{
; 3436 : 			Localization::String localizedText = Localization::Lookup("TXT_KEY_AIR_PATROL_FOUND_NOTHING");

	push	OFFSET ??_C@_0CB@BBIBMAEL@TXT_KEY_AIR_PATROL_FOUND_NOTHING@
	lea	edx, DWORD PTR _localizedText$222744[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 3

; 3437 : 			localizedText << kAttacker.getUnitInfo().GetTextKey();

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getUnitInfo@CvUnit@@QBEAAVCvUnitEntry@@XZ ; CvUnit::getUnitInfo
	mov	ecx, eax
	call	?GetTextKey@CvBaseInfo@@QBEPBDXZ	; CvBaseInfo::GetTextKey
	mov	DWORD PTR $T229815[ebp], eax
	lea	eax, DWORD PTR $T229815[ebp]
	push	eax
	lea	ecx, DWORD PTR _localizedText$222744[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3438 : 			GC.GetEngineUserInterface()->AddMessage(0, kAttacker.getOwner(), false, GC.getEVENT_MESSAGE_TIME(), localizedText.toUTF8());

	mov	edx, DWORD PTR $T229921[ebp]
	mov	DWORD PTR tv230[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv230[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6176
	mov	DWORD PTR $T229925[ebp], ecx
	mov	edx, DWORD PTR _kAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T229934[ebp], eax
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _localizedText$222744[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	ecx, DWORD PTR $T229925[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR $T229934[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR tv230[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv230[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax

; 3439 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _localizedText$222744[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN2@AttackAirS:

; 3440 : 
; 3441 : 		// Spend a move for this attack
; 3442 : 		kAttacker.changeMoves(-GC.getMOVE_DENOMINATOR());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6236
	mov	DWORD PTR $T229938[ebp], ecx
	mov	edx, DWORD PTR $T229938[ebp]
	neg	edx
	push	edx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?changeMoves@CvUnit@@QAEXH@Z		; CvUnit::changeMoves

; 3443 : 
; 3444 : 		// Can't move or attack again
; 3445 : #ifdef NQ_UNIT_TURN_ENDS_ON_FINAL_ATTACK
; 3446 : 		if(!kAttacker.canMoveAfterAttacking() && kAttacker.isOutOfAttacks())

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?canMoveAfterAttacking@CvUnit@@QBE_NXZ	; CvUnit::canMoveAfterAttacking
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@AttackAirS
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isOutOfAttacks@CvUnit@@QBE_NXZ		; CvUnit::isOutOfAttacks
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@AttackAirS

; 3447 : #else
; 3448 : 		if(!kAttacker.canMoveAfterAttacking())
; 3449 : #endif
; 3450 : 		{
; 3451 : 			kAttacker.finishMoves();

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?finishMoves@CvUnit@@QAEXXZ		; CvUnit::finishMoves
$LN3@AttackAirS:

; 3452 : 		}
; 3453 : 	}
; 3454 : 
; 3455 : 	return eResult;

	mov	eax, DWORD PTR _eResult$[ebp]
$LN9@AttackAirS:

; 3456 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$1:
	lea	ecx, DWORD PTR _pDllTargetPlot$222732[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
__unwindfunclet$?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$2:
	mov	eax, DWORD PTR $T229812[ebp]
	push	eax
	call	??3CvDllCombatInfo@@SAXPAX@Z		; CvDllCombatInfo::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$3:
	lea	ecx, DWORD PTR _pDllCombatInfo$222740[ebp]
	jmp	??1?$auto_ptr@VICvCombatInfo1@@@std@@QAE@XZ ; std::auto_ptr<ICvCombatInfo1>::~auto_ptr<ICvCombatInfo1>
__unwindfunclet$?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$4:
	lea	ecx, DWORD PTR _localizedText$222744[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__ehhandler$?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1624]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AttackAirSweep@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z ENDP ; CvUnitCombat::AttackAirSweep
PUBLIC	__$ArrayPad$
PUBLIC	?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z ; CvUnitCombat::AttackCity
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
xdata$x	SEGMENT
__unwindtable$?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$5
__ehfuncinfo$?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
_TEXT	SEGMENT
tv231 = -1584						; size = 4
tv221 = -1580						; size = 4
tv199 = -1576						; size = 4
tv252 = -1572						; size = 4
tv249 = -1568						; size = 4
tv134 = -1564						; size = 4
_inst$230129 = -1560					; size = 4
$T230125 = -1556					; size = 4
$T230111 = -1548					; size = 4
$T230107 = -1544					; size = 4
_inst$230099 = -1540					; size = 4
$T230095 = -1536					; size = 4
$T230083 = -1532					; size = 4
_inst$230078 = -1528					; size = 4
$T230074 = -1524					; size = 4
$T230065 = -1520					; size = 4
__Ptr$230064 = -1516					; size = 4
$T230060 = -1512					; size = 4
__Cvtptr$230058 = -1508					; size = 4
__Ans$230059 = -1504					; size = 4
$T230049 = -1500					; size = 4
$T230039 = -1496					; size = 4
$T230029 = -1492					; size = 4
$T230020 = -1488					; size = 4
$T230011 = -1484					; size = 4
$T230002 = -1480					; size = 4
$T229993 = -1476					; size = 4
$T229984 = -1472					; size = 4
$T229975 = -1468					; size = 4
$T229953 = -1460					; size = 4
$T229952 = -1456					; size = 4
$T229951 = -1452					; size = 4
$T229950 = -1448					; size = 4
$T229949 = -1444					; size = 4
$T229948 = -1440					; size = 4
_pDllPlot$222773 = -1436				; size = 4
_pkDefender$222782 = -1432				; size = 4
_pDllCombatInfo$222781 = -1428				; size = 4
_isTargetVisibleToActivePlayer$222767 = -1421		; size = 1
_kCombatInfo$222766 = -1420				; size = 1372
__$ArrayPad$ = -40					; size = 4
_bDoImmediate$222769 = -33				; size = 1
_uiParentEventID$222768 = -32				; size = 4
_eSupportResult$222759 = -28				; size = 4
_pFireSupportUnit$222758 = -24				; size = 4
_eResult$ = -20						; size = 4
_pCity$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_kAttacker$ = 8						; size = 4
_plot$ = 12						; size = 4
_eOption$ = 16						; size = 4
?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z PROC ; CvUnitCombat::AttackCity, COMDAT

; 3460 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1572				; 00000624H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 3461 : 	//VALIDATE_OBJECT
; 3462 : 
; 3463 : 	ATTACK_RESULT eResult = ATTACK_ABORTED;

	mov	DWORD PTR _eResult$[ebp], 0

; 3464 : 	CvCity* pCity = plot.getPlotCity();

	mov	ecx, DWORD PTR _plot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$[ebp], eax

; 3465 : 	CvAssertMsg(pCity != NULL, "If this unit is attacking a NULL city then something funky is goin' down");
; 3466 : 	if(!pCity) return eResult;

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN9@AttackCity
	mov	eax, DWORD PTR _eResult$[ebp]
	jmp	$LN10@AttackCity
$LN9@AttackCity:

; 3467 : 
; 3468 : 	kAttacker.SetAutomateType(NO_AUTOMATE);

	push	-1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?SetAutomateType@CvUnit@@QAEXW4AutomateTypes@@@Z ; CvUnit::SetAutomateType

; 3469 : 
; 3470 : 	if(eOption != ATTACK_OPTION_NO_DEFENSIVE_SUPPORT)

	cmp	DWORD PTR _eOption$[ebp], 1
	je	$LN8@AttackCity

; 3471 : 	{
; 3472 : 		// See if the city has some supporting fire to fend off the attacker
; 3473 : 		CvUnit* pFireSupportUnit = GetFireSupportUnit(pCity->getOwner(), pCity->getX(), pCity->getY(), kAttacker.getX(), kAttacker.getY());

	mov	eax, DWORD PTR _kAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR $T229975[ebp], ecx
	mov	edx, DWORD PTR _kAttacker$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR $T229984[ebp], eax
	mov	ecx, DWORD PTR _pCity$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR $T229993[ebp], edx
	mov	eax, DWORD PTR _pCity$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR $T230002[ebp], ecx
	mov	edx, DWORD PTR _pCity$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T230011[ebp], eax
	mov	ecx, DWORD PTR $T229975[ebp]
	push	ecx
	mov	edx, DWORD PTR $T229984[ebp]
	push	edx
	mov	eax, DWORD PTR $T229993[ebp]
	push	eax
	mov	ecx, DWORD PTR $T230002[ebp]
	push	ecx
	mov	edx, DWORD PTR $T230011[ebp]
	push	edx
	call	?GetFireSupportUnit@CvUnitCombat@@SAPAVCvUnit@@W4PlayerTypes@@HHHH@Z ; CvUnitCombat::GetFireSupportUnit
	add	esp, 20					; 00000014H
	mov	DWORD PTR _pFireSupportUnit$222758[ebp], eax

; 3474 : 
; 3475 : 		ATTACK_RESULT eSupportResult = ATTACK_ABORTED;

	mov	DWORD PTR _eSupportResult$222759[ebp], 0

; 3476 : 		if(pFireSupportUnit)

	cmp	DWORD PTR _pFireSupportUnit$222758[ebp], 0
	je	SHORT $LN7@AttackCity

; 3477 : 		{
; 3478 : 			eSupportResult = AttackRanged(*pFireSupportUnit, kAttacker.getX(), kAttacker.getY(), CvUnitCombat::ATTACK_OPTION_NO_DEFENSIVE_SUPPORT);

	mov	eax, DWORD PTR _kAttacker$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR $T230020[ebp], ecx
	mov	edx, DWORD PTR _kAttacker$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR $T230029[ebp], eax
	push	1
	mov	ecx, DWORD PTR $T230020[ebp]
	push	ecx
	mov	edx, DWORD PTR $T230029[ebp]
	push	edx
	mov	eax, DWORD PTR _pFireSupportUnit$222758[ebp]
	push	eax
	call	?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z ; CvUnitCombat::AttackRanged
	add	esp, 16					; 00000010H
	mov	DWORD PTR _eSupportResult$222759[ebp], eax

; 3479 : 			// Turn off Fortify Turns, as this is the trigger for whether or not a ranged Unit can provide support fire (in addition to hasMadeAttack)
; 3480 : 			pFireSupportUnit->setFortifyTurns(0);

	push	0
	mov	ecx, DWORD PTR _pFireSupportUnit$222758[ebp]
	call	?setFortifyTurns@CvUnit@@QAEXH@Z	; CvUnit::setFortifyTurns
$LN7@AttackCity:

; 3481 : 		}
; 3482 : 
; 3483 : 		if(eSupportResult == ATTACK_QUEUED)

	cmp	DWORD PTR _eSupportResult$222759[ebp], 2
	jne	$LN8@AttackCity

; 3484 : 		{
; 3485 : 			// The supporting unit has queued their attack (against the attacker), we must have the attacker queue its attack.
; 3486 : 			// Also, flag the current mission that the next time through, the defender doesn't get any defensive support.
; 3487 : 			const_cast<MissionData*>(kAttacker.GetHeadMissionData())->iFlags |= MISSION_MODIFIER_NO_DEFENSIVE_SUPPORT;

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?GetHeadMissionData@CvUnit@@QAEPBUMissionData@@XZ ; CvUnit::GetHeadMissionData
	add	eax, 12					; 0000000cH
	mov	DWORD PTR tv134[ebp], eax
	mov	ecx, DWORD PTR tv134[ebp]
	mov	edx, DWORD PTR [ecx]
	or	edx, 256				; 00000100H
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR [eax], edx

; 3488 : 			CvUnitMission::WaitFor(&kAttacker, pFireSupportUnit);

	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR $T229948[ebp], esp
	mov	DWORD PTR $T230039[ebp], ecx
	mov	edx, DWORD PTR $T230039[ebp]
	mov	eax, DWORD PTR _pFireSupportUnit$222758[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T230039[ebp]
	mov	BYTE PTR [ecx+4], 0
	mov	edx, DWORD PTR $T230039[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN54@AttackCity
	mov	eax, DWORD PTR $T230039[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN54@AttackCity:
	mov	ecx, DWORD PTR $T230039[ebp]
	mov	DWORD PTR tv249[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	sub	esp, 8
	mov	edx, esp
	mov	DWORD PTR $T229949[ebp], esp
	mov	DWORD PTR $T230049[ebp], edx
	mov	eax, DWORD PTR $T230049[ebp]
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T230049[ebp]
	mov	BYTE PTR [edx+4], 0
	mov	eax, DWORD PTR $T230049[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN59@AttackCity
	mov	ecx, DWORD PTR $T230049[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN59@AttackCity:
	mov	edx, DWORD PTR $T230049[ebp]
	mov	DWORD PTR tv252[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	?WaitFor@CvUnitMission@@SAXV?$FObjectHandle@VCvUnit@@@@0@Z ; CvUnitMission::WaitFor
	add	esp, 16					; 00000010H

; 3489 : 			eResult = ATTACK_QUEUED;

	mov	DWORD PTR _eResult$[ebp], 2
$LN8@AttackCity:

; 3490 : 		}
; 3491 : 	}
; 3492 : 
; 3493 : 	if(eResult != ATTACK_QUEUED)

	cmp	DWORD PTR _eResult$[ebp], 2
	je	$LN5@AttackCity

; 3494 : 	{
; 3495 : 		kAttacker.setMadeAttack(true);

	push	1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setMadeAttack@CvUnit@@QAEX_N@Z		; CvUnit::setMadeAttack

; 3496 : 
; 3497 : 		// We are doing a non-ranged attack on a city
; 3498 : 		CvCombatInfo kCombatInfo;

	lea	ecx, DWORD PTR _kCombatInfo$222766[ebp]
	call	??0CvCombatInfo@@QAE@XZ			; CvCombatInfo::CvCombatInfo

; 3499 : 		GenerateMeleeCombatInfo(kAttacker, NULL, plot, &kCombatInfo);

	lea	eax, DWORD PTR _kCombatInfo$222766[ebp]
	push	eax
	mov	ecx, DWORD PTR _plot$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	call	?GenerateMeleeCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@PAV2@AAVCvPlot@@PAVCvCombatInfo@@@Z ; CvUnitCombat::GenerateMeleeCombatInfo
	add	esp, 16					; 00000010H

; 3500 : 		CvAssertMsg(!kAttacker.isDelayedDeath(), "Trying to battle and the attacker is already dead!");
; 3501 : 
; 3502 : 		// Send the combat message if the target plot is visible.
; 3503 : 		bool isTargetVisibleToActivePlayer = plot.isActiveVisible(false);

	push	0
	mov	ecx, DWORD PTR _plot$[ebp]
	call	?isActiveVisible@CvPlot@@QBE_N_N@Z	; CvPlot::isActiveVisible
	mov	BYTE PTR _isTargetVisibleToActivePlayer$222767[ebp], al

; 3504 : 
; 3505 : 		uint uiParentEventID = 0;

	mov	DWORD PTR _uiParentEventID$222768[ebp], 0

; 3506 : 		bool bDoImmediate = CvPreGame::quickCombat();

	call	?quickCombat@CvPreGame@@YA_NXZ		; CvPreGame::quickCombat
	mov	BYTE PTR _bDoImmediate$222769[ebp], al

; 3507 : 		if(!bDoImmediate)

	movzx	eax, BYTE PTR _bDoImmediate$222769[ebp]
	test	eax, eax
	jne	$LN4@AttackCity

; 3508 : 		{
; 3509 : 			// Center camera here!
; 3510 : 			if(isTargetVisibleToActivePlayer)

	movzx	ecx, BYTE PTR _isTargetVisibleToActivePlayer$222767[ebp]
	test	ecx, ecx
	je	$LN3@AttackCity

; 3511 : 			{
; 3512 : 				auto_ptr<ICvPlot1> pDllPlot = GC.WrapPlotPointer(&plot);

	mov	edx, DWORD PTR _plot$[ebp]
	push	edx
	lea	eax, DWORD PTR $T229950[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ; CvGlobals::WrapPlotPointer
	mov	DWORD PTR $T230060[ebp], eax
	mov	ecx, DWORD PTR $T230060[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Cvtptr$230058[ebp], edx
	mov	eax, DWORD PTR __Cvtptr$230058[ebp]
	mov	DWORD PTR __Ans$230059[ebp], eax
	mov	ecx, DWORD PTR $T230060[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR __Ans$230059[ebp]
	mov	DWORD PTR $T229951[ebp], edx
	mov	eax, DWORD PTR $T229951[ebp]
	mov	DWORD PTR $T230065[ebp], eax
	mov	ecx, DWORD PTR $T230065[ebp]
	mov	DWORD PTR __Ptr$230064[ebp], ecx
	mov	DWORD PTR $T230065[ebp], 0
	mov	edx, DWORD PTR __Ptr$230064[ebp]
	mov	DWORD PTR _pDllPlot$222773[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR $T229950[ebp]
	mov	DWORD PTR $T230074[ebp], eax
	cmp	DWORD PTR $T230074[ebp], 0
	je	SHORT $LN69@AttackCity
	mov	ecx, DWORD PTR $T230074[ebp]
	mov	DWORD PTR _inst$230078[ebp], ecx
	mov	edx, DWORD PTR _inst$230078[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$230078[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN69@AttackCity:

; 3513 : 				GC.GetEngineUserInterface()->lookAt(pDllPlot.get(), CAMERALOOKAT_NORMAL);

	mov	eax, DWORD PTR $T230083[ebp]
	mov	DWORD PTR tv199[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv199[ebp], ecx
	push	0
	mov	edx, DWORD PTR _pDllPlot$222773[ebp]
	push	edx
	mov	eax, DWORD PTR tv199[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv199[ebp]
	mov	eax, DWORD PTR [edx+272]
	call	eax

; 3514 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pDllPlot$222773[ebp]
	mov	DWORD PTR $T230095[ebp], ecx
	cmp	DWORD PTR $T230095[ebp], 0
	je	SHORT $LN3@AttackCity
	mov	edx, DWORD PTR $T230095[ebp]
	mov	DWORD PTR _inst$230099[ebp], edx
	mov	eax, DWORD PTR _inst$230099[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$230099[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN3@AttackCity:

; 3515 : 			kCombatInfo.setVisualizeCombat(isTargetVisibleToActivePlayer);

	movzx	ecx, BYTE PTR _isTargetVisibleToActivePlayer$222767[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kCombatInfo$222766[ebp]
	call	?setVisualizeCombat@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setVisualizeCombat

; 3516 : 
; 3517 : 			auto_ptr<ICvCombatInfo1> pDllCombatInfo(new CvDllCombatInfo(&kCombatInfo));

	push	12					; 0000000cH
	call	??2CvDllCombatInfo@@SAPAXI@Z		; CvDllCombatInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T229953[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T229953[ebp], 0
	je	SHORT $LN12@AttackCity
	lea	edx, DWORD PTR _kCombatInfo$222766[ebp]
	push	edx
	mov	ecx, DWORD PTR $T229953[ebp]
	call	??0CvDllCombatInfo@@QAE@PAVCvCombatInfo@@@Z ; CvDllCombatInfo::CvDllCombatInfo
	mov	DWORD PTR tv221[ebp], eax
	jmp	SHORT $LN13@AttackCity
$LN12@AttackCity:
	mov	DWORD PTR tv221[ebp], 0
$LN13@AttackCity:
	mov	eax, DWORD PTR tv221[ebp]
	mov	DWORD PTR $T229952[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T229952[ebp]
	mov	DWORD PTR _pDllCombatInfo$222781[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3

; 3518 : 			uiParentEventID = gDLL->GameplayCityCombat(pDllCombatInfo.get());

	mov	edx, DWORD PTR $T230107[ebp]
	mov	DWORD PTR tv231[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv231[ebp], eax
	mov	ecx, DWORD PTR _pDllCombatInfo$222781[ebp]
	mov	DWORD PTR $T230111[ebp], ecx
	mov	edx, DWORD PTR $T230111[ebp]
	push	edx
	mov	eax, DWORD PTR tv231[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv231[ebp]
	mov	eax, DWORD PTR [edx+668]
	call	eax
	mov	DWORD PTR _uiParentEventID$222768[ebp], eax

; 3519 : 
; 3520 : 			CvCity* pkDefender = plot.getPlotCity();

	mov	ecx, DWORD PTR _plot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pkDefender$222782[ebp], eax

; 3521 : 			kAttacker.setCombatCity(pkDefender);

	mov	ecx, DWORD PTR _pkDefender$222782[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setCombatCity@CvUnit@@QAEXPAVCvCity@@@Z ; CvUnit::setCombatCity

; 3522 : 			if(pkDefender)

	cmp	DWORD PTR _pkDefender$222782[ebp], 0
	je	SHORT $LN2@AttackCity

; 3523 : 				pkDefender->setCombatUnit(&kAttacker);

	push	0
	mov	edx, DWORD PTR _kAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkDefender$222782[ebp]
	call	?setCombatUnit@CvCity@@QAEXPAVCvUnit@@_N@Z ; CvCity::setCombatUnit
$LN2@AttackCity:

; 3524 : 			eResult = ATTACK_QUEUED;

	mov	DWORD PTR _eResult$[ebp], 2

; 3525 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _pDllCombatInfo$222781[ebp]
	mov	DWORD PTR $T230125[ebp], eax
	cmp	DWORD PTR $T230125[ebp], 0
	je	SHORT $LN94@AttackCity
	mov	ecx, DWORD PTR $T230125[ebp]
	mov	DWORD PTR _inst$230129[ebp], ecx
	mov	edx, DWORD PTR _inst$230129[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$230129[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN94@AttackCity:

; 3526 : 		else

	jmp	SHORT $LN1@AttackCity
$LN4@AttackCity:

; 3527 : 			eResult = ATTACK_COMPLETED;

	mov	DWORD PTR _eResult$[ebp], 1
$LN1@AttackCity:

; 3528 : 
; 3529 : 		ResolveCombat(kCombatInfo, uiParentEventID);

	mov	eax, DWORD PTR _uiParentEventID$222768[ebp]
	push	eax
	lea	ecx, DWORD PTR _kCombatInfo$222766[ebp]
	push	ecx
	call	?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveCombat
	add	esp, 8
$LN5@AttackCity:

; 3530 : 	}
; 3531 : 	return eResult;

	mov	eax, DWORD PTR _eResult$[ebp]
$LN10@AttackCity:

; 3532 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$0:
	mov	ecx, DWORD PTR $T229948[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$3:
	lea	ecx, DWORD PTR _pDllPlot$222773[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
__unwindfunclet$?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$4:
	mov	eax, DWORD PTR $T229953[ebp]
	push	eax
	call	??3CvDllCombatInfo@@SAXPAX@Z		; CvDllCombatInfo::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z$5:
	lea	ecx, DWORD PTR _pDllCombatInfo$222781[ebp]
	jmp	??1?$auto_ptr@VICvCombatInfo1@@@std@@QAE@XZ ; std::auto_ptr<ICvCombatInfo1>::~auto_ptr<ICvCombatInfo1>
__ehhandler$?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1576]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AttackCity@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@AAVCvPlot@@W4ATTACK_OPTION@1@@Z ENDP ; CvUnitCombat::AttackCity
PUBLIC	?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z ; plotDirection
EXTRN	?getUnitByIndex@CvPlot@@QBEPAVCvUnit@@H@Z:PROC	; CvPlot::getUnitByIndex
EXTRN	?getNumUnits@CvPlot@@QBEHXZ:PROC		; CvPlot::getNumUnits
; Function compile flags: /Odtp
;	COMDAT ?GetFireSupportUnit@CvUnitCombat@@SAPAVCvUnit@@W4PlayerTypes@@HHHH@Z
_TEXT	SEGMENT
tv164 = -172						; size = 4
tv179 = -168						; size = 4
$T230471 = -164						; size = 4
$T230255 = -72						; size = 4
$T230251 = -68						; size = 4
$T230203 = -64						; size = 4
$T230190 = -60						; size = 4
$T230186 = -56						; size = 4
$T230172 = -52						; size = 4
$T230168 = -45						; size = 1
$T230157 = -44						; size = 4
$T230153 = -37						; size = 1
_iMapY$230212 = -36					; size = 4
_iMapX$230211 = -32					; size = 4
$T230146 = -28						; size = 4
$T230142 = -24						; size = 4
_pLoopUnit$222805 = -20					; size = 4
_iUnitLoop$222801 = -16					; size = 4
_iI$222795 = -12					; size = 4
_pPlot$ = -8						; size = 4
_pAdjacentPlot$ = -4					; size = 4
_eDefender$ = 8						; size = 4
_iDefendX$ = 12						; size = 4
_iDefendY$ = 16						; size = 4
_iAttackX$ = 20						; size = 4
_iAttackY$ = 24						; size = 4
?GetFireSupportUnit@CvUnitCombat@@SAPAVCvUnit@@W4PlayerTypes@@HHHH@Z PROC ; CvUnitCombat::GetFireSupportUnit, COMDAT

; 3537 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH

; 3538 : 	VALIDATE_OBJECT
; 3539 : 
; 3540 : 	if(GC.getFIRE_SUPPORT_DISABLED() == 1)

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7364
	mov	DWORD PTR $T230142[ebp], eax
	cmp	DWORD PTR $T230142[ebp], 1
	jne	SHORT $LN10@GetFireSup

; 3541 : 		return NULL;

	xor	eax, eax
	jmp	$LN11@GetFireSup
$LN10@GetFireSup:

; 3542 : 
; 3543 : 	CvPlot* pAdjacentPlot = NULL;

	mov	DWORD PTR _pAdjacentPlot$[ebp], 0

; 3544 : 	CvPlot* pPlot = GC.getMap().plot(iDefendX, iDefendY);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T230146[ebp], ecx
	cmp	DWORD PTR _iDefendX$[ebp], -2147483647	; 80000001H
	je	SHORT $LN17@GetFireSup
	cmp	DWORD PTR _iDefendY$[ebp], -2147483647	; 80000001H
	jne	SHORT $LN18@GetFireSup
$LN17@GetFireSup:
	mov	DWORD PTR _pPlot$[ebp], 0
	jmp	$LN19@GetFireSup
$LN18@GetFireSup:
	mov	edx, DWORD PTR $T230146[ebp]
	mov	al, BYTE PTR [edx+4056]
	mov	BYTE PTR $T230153[ebp], al
	mov	ecx, DWORD PTR $T230146[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T230157[ebp], edx
	movzx	eax, BYTE PTR $T230153[ebp]
	test	eax, eax
	je	SHORT $LN30@GetFireSup
	cmp	DWORD PTR _iDefendX$[ebp], 0
	jge	SHORT $LN29@GetFireSup
	mov	eax, DWORD PTR _iDefendX$[ebp]
	cdq
	idiv	DWORD PTR $T230157[ebp]
	add	edx, DWORD PTR $T230157[ebp]
	mov	DWORD PTR _iMapX$230211[ebp], edx
	jmp	SHORT $LN31@GetFireSup
	jmp	SHORT $LN30@GetFireSup
$LN29@GetFireSup:
	mov	ecx, DWORD PTR _iDefendX$[ebp]
	cmp	ecx, DWORD PTR $T230157[ebp]
	jl	SHORT $LN30@GetFireSup
	mov	eax, DWORD PTR _iDefendX$[ebp]
	cdq
	idiv	DWORD PTR $T230157[ebp]
	mov	DWORD PTR _iMapX$230211[ebp], edx
	jmp	SHORT $LN31@GetFireSup
$LN30@GetFireSup:
	mov	edx, DWORD PTR _iDefendX$[ebp]
	mov	DWORD PTR _iMapX$230211[ebp], edx
$LN31@GetFireSup:
	mov	eax, DWORD PTR $T230146[ebp]
	mov	cl, BYTE PTR [eax+4057]
	mov	BYTE PTR $T230168[ebp], cl
	mov	edx, DWORD PTR $T230146[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T230172[ebp], eax
	movzx	ecx, BYTE PTR $T230168[ebp]
	test	ecx, ecx
	je	SHORT $LN40@GetFireSup
	cmp	DWORD PTR _iDefendY$[ebp], 0
	jge	SHORT $LN39@GetFireSup
	mov	eax, DWORD PTR _iDefendY$[ebp]
	cdq
	idiv	DWORD PTR $T230172[ebp]
	add	edx, DWORD PTR $T230172[ebp]
	mov	DWORD PTR _iMapY$230212[ebp], edx
	jmp	SHORT $LN41@GetFireSup
	jmp	SHORT $LN40@GetFireSup
$LN39@GetFireSup:
	mov	edx, DWORD PTR _iDefendY$[ebp]
	cmp	edx, DWORD PTR $T230172[ebp]
	jl	SHORT $LN40@GetFireSup
	mov	eax, DWORD PTR _iDefendY$[ebp]
	cdq
	idiv	DWORD PTR $T230172[ebp]
	mov	DWORD PTR _iMapY$230212[ebp], edx
	jmp	SHORT $LN41@GetFireSup
$LN40@GetFireSup:
	mov	eax, DWORD PTR _iDefendY$[ebp]
	mov	DWORD PTR _iMapY$230212[ebp], eax
$LN41@GetFireSup:
	cmp	DWORD PTR _iMapX$230211[ebp], 0
	jl	SHORT $LN45@GetFireSup
	mov	ecx, DWORD PTR $T230146[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T230186[ebp], edx
	mov	eax, DWORD PTR _iMapX$230211[ebp]
	cmp	eax, DWORD PTR $T230186[ebp]
	jge	SHORT $LN45@GetFireSup
	cmp	DWORD PTR _iMapY$230212[ebp], 0
	jl	SHORT $LN45@GetFireSup
	mov	ecx, DWORD PTR $T230146[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T230190[ebp], edx
	mov	eax, DWORD PTR _iMapY$230212[ebp]
	cmp	eax, DWORD PTR $T230190[ebp]
	jge	SHORT $LN45@GetFireSup
	mov	DWORD PTR tv179[ebp], 1
	jmp	SHORT $LN43@GetFireSup
$LN45@GetFireSup:
	mov	DWORD PTR tv179[ebp], 0
$LN43@GetFireSup:
	cmp	DWORD PTR tv179[ebp], 0
	je	SHORT $LN21@GetFireSup
	mov	ecx, DWORD PTR $T230146[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T230203[ebp], edx
	mov	eax, DWORD PTR _iMapY$230212[ebp]
	imul	eax, DWORD PTR $T230203[ebp]
	add	eax, DWORD PTR _iMapX$230211[ebp]
	imul	eax, 484				; 000001e4H
	mov	ecx, DWORD PTR $T230146[ebp]
	add	eax, DWORD PTR [ecx+4068]
	mov	DWORD PTR tv164[ebp], eax
	jmp	SHORT $LN22@GetFireSup
$LN21@GetFireSup:
	mov	DWORD PTR tv164[ebp], 0
$LN22@GetFireSup:
	mov	edx, DWORD PTR tv164[ebp]
	mov	DWORD PTR _pPlot$[ebp], edx
$LN19@GetFireSup:

; 3545 : 
; 3546 : 	for(int iI = 0; iI < NUM_DIRECTION_TYPES; iI++)

	mov	DWORD PTR _iI$222795[ebp], 0
	jmp	SHORT $LN9@GetFireSup
$LN8@GetFireSup:
	mov	eax, DWORD PTR _iI$222795[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$222795[ebp], eax
$LN9@GetFireSup:
	cmp	DWORD PTR _iI$222795[ebp], 6
	jge	$LN7@GetFireSup

; 3547 : 	{
; 3548 : 		pAdjacentPlot = plotDirection(pPlot->getX(), pPlot->getY(), ((DirectionTypes)iI));

	mov	ecx, DWORD PTR _pPlot$[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR $T230251[ebp], edx
	mov	eax, DWORD PTR _pPlot$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR $T230255[ebp], ecx
	mov	edx, DWORD PTR _iI$222795[ebp]
	push	edx
	mov	eax, DWORD PTR $T230251[ebp]
	push	eax
	mov	ecx, DWORD PTR $T230255[ebp]
	push	ecx
	call	?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z ; plotDirection
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pAdjacentPlot$[ebp], eax

; 3549 : 
; 3550 : 		if(pAdjacentPlot != NULL)

	cmp	DWORD PTR _pAdjacentPlot$[ebp], 0
	je	SHORT $LN6@GetFireSup

; 3551 : 		{
; 3552 : #ifdef AUI_WARNING_FIXES
; 3553 : 			for (uint iUnitLoop = 0; iUnitLoop < pAdjacentPlot->getNumUnits(); iUnitLoop++)
; 3554 : #else
; 3555 : 			for(int iUnitLoop = 0; iUnitLoop < pAdjacentPlot->getNumUnits(); iUnitLoop++)

	mov	DWORD PTR _iUnitLoop$222801[ebp], 0
	jmp	SHORT $LN5@GetFireSup
$LN4@GetFireSup:
	mov	edx, DWORD PTR _iUnitLoop$222801[ebp]
	add	edx, 1
	mov	DWORD PTR _iUnitLoop$222801[ebp], edx
$LN5@GetFireSup:
	mov	ecx, DWORD PTR _pAdjacentPlot$[ebp]
	call	?getNumUnits@CvPlot@@QBEHXZ		; CvPlot::getNumUnits
	cmp	DWORD PTR _iUnitLoop$222801[ebp], eax
	jge	SHORT $LN6@GetFireSup

; 3556 : #endif
; 3557 : 			{
; 3558 : 				CvUnit* pLoopUnit = pAdjacentPlot->getUnitByIndex(iUnitLoop);

	mov	eax, DWORD PTR _iUnitLoop$222801[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAdjacentPlot$[ebp]
	call	?getUnitByIndex@CvPlot@@QBEPAVCvUnit@@H@Z ; CvPlot::getUnitByIndex
	mov	DWORD PTR _pLoopUnit$222805[ebp], eax

; 3559 : 
; 3560 : 				// Unit owned by same player?
; 3561 : 				if(pLoopUnit->getOwner() == eDefender)

	mov	ecx, DWORD PTR _pLoopUnit$222805[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T230471[ebp], edx
	mov	eax, DWORD PTR $T230471[ebp]
	cmp	eax, DWORD PTR _eDefender$[ebp]
	jne	SHORT $LN2@GetFireSup

; 3562 : 				{
; 3563 : 					// Can this unit perform a ranged strike on the attacker's plot?
; 3564 : 					if(pLoopUnit->canRangeStrikeAt(iAttackX, iAttackY))

	push	1
	push	1
	mov	ecx, DWORD PTR _iAttackY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iAttackX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pLoopUnit$222805[ebp]
	call	?canRangeStrikeAt@CvUnit@@QBE_NHH_N0@Z	; CvUnit::canRangeStrikeAt
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@GetFireSup

; 3565 : 					{
; 3566 : 						// Range strike would be calculated here, so get the estimated damage
; 3567 : 						return pLoopUnit;

	mov	eax, DWORD PTR _pLoopUnit$222805[ebp]
	jmp	SHORT $LN11@GetFireSup
$LN2@GetFireSup:

; 3568 : 					}
; 3569 : 				}
; 3570 : 			}

	jmp	SHORT $LN4@GetFireSup
$LN6@GetFireSup:

; 3571 : 		}
; 3572 : 	}

	jmp	$LN8@GetFireSup
$LN7@GetFireSup:

; 3573 : 
; 3574 : 	return NULL;

	xor	eax, eax
$LN11@GetFireSup:

; 3575 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFireSupportUnit@CvUnitCombat@@SAPAVCvUnit@@W4PlayerTypes@@HHHH@Z ENDP ; CvUnitCombat::GetFireSupportUnit
_TEXT	ENDS
PUBLIC	?isPlot@CvMap@@QBEHHH@Z				; CvMap::isPlot
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
;	COMDAT ?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z
_TEXT	SEGMENT
tv198 = -100						; size = 4
tv213 = -96						; size = 4
tv168 = -92						; size = 4
tv151 = -88						; size = 4
tv155 = -84						; size = 4
$T230678 = -80						; size = 4
$T230633 = -76						; size = 4
$T230620 = -72						; size = 4
$T230616 = -68						; size = 4
$T230602 = -64						; size = 4
$T230598 = -57						; size = 1
$T230587 = -56						; size = 4
$T230583 = -49						; size = 1
_iMapY$230677 = -48					; size = 4
_iMapX$230676 = -44					; size = 4
$T230576 = -40						; size = 4
$T230552 = -36						; size = 4
$T230515 = -32						; size = 4
$T230503 = -28						; size = 4
$T230499 = -21						; size = 1
$T230488 = -20						; size = 4
$T230484 = -13						; size = 1
_iMapY$230551 = -12					; size = 4
_iMapX$230550 = -8					; size = 4
$T230477 = -4						; size = 4
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
_eDirection$ = 16					; size = 4
?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z PROC ; plotDirection, COMDAT

; 193  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H

; 194  : 	if(eDirection == NO_DIRECTION)

	cmp	DWORD PTR _eDirection$[ebp], -1
	jne	$LN2@plotDirect

; 195  : 	{
; 196  : 		return GC.getMap().plot(iX, iY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T230477[ebp], eax
	cmp	DWORD PTR _iX$[ebp], -2147483647	; 80000001H
	je	SHORT $LN7@plotDirect
	cmp	DWORD PTR _iY$[ebp], -2147483647	; 80000001H
	jne	SHORT $LN8@plotDirect
$LN7@plotDirect:
	mov	DWORD PTR $T230552[ebp], 0
	jmp	$LN9@plotDirect
$LN8@plotDirect:
	mov	ecx, DWORD PTR $T230477[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T230484[ebp], dl
	mov	eax, DWORD PTR $T230477[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T230488[ebp], ecx
	movzx	edx, BYTE PTR $T230484[ebp]
	test	edx, edx
	je	SHORT $LN20@plotDirect
	cmp	DWORD PTR _iX$[ebp], 0
	jge	SHORT $LN19@plotDirect
	mov	eax, DWORD PTR _iX$[ebp]
	cdq
	idiv	DWORD PTR $T230488[ebp]
	add	edx, DWORD PTR $T230488[ebp]
	mov	DWORD PTR _iMapX$230550[ebp], edx
	jmp	SHORT $LN21@plotDirect
	jmp	SHORT $LN20@plotDirect
$LN19@plotDirect:
	mov	eax, DWORD PTR _iX$[ebp]
	cmp	eax, DWORD PTR $T230488[ebp]
	jl	SHORT $LN20@plotDirect
	mov	eax, DWORD PTR _iX$[ebp]
	cdq
	idiv	DWORD PTR $T230488[ebp]
	mov	DWORD PTR _iMapX$230550[ebp], edx
	jmp	SHORT $LN21@plotDirect
$LN20@plotDirect:
	mov	ecx, DWORD PTR _iX$[ebp]
	mov	DWORD PTR _iMapX$230550[ebp], ecx
$LN21@plotDirect:
	mov	edx, DWORD PTR $T230477[ebp]
	mov	al, BYTE PTR [edx+4057]
	mov	BYTE PTR $T230499[ebp], al
	mov	ecx, DWORD PTR $T230477[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T230503[ebp], edx
	movzx	eax, BYTE PTR $T230499[ebp]
	test	eax, eax
	je	SHORT $LN30@plotDirect
	cmp	DWORD PTR _iY$[ebp], 0
	jge	SHORT $LN29@plotDirect
	mov	eax, DWORD PTR _iY$[ebp]
	cdq
	idiv	DWORD PTR $T230503[ebp]
	add	edx, DWORD PTR $T230503[ebp]
	mov	DWORD PTR _iMapY$230551[ebp], edx
	jmp	SHORT $LN31@plotDirect
	jmp	SHORT $LN30@plotDirect
$LN29@plotDirect:
	mov	ecx, DWORD PTR _iY$[ebp]
	cmp	ecx, DWORD PTR $T230503[ebp]
	jl	SHORT $LN30@plotDirect
	mov	eax, DWORD PTR _iY$[ebp]
	cdq
	idiv	DWORD PTR $T230503[ebp]
	mov	DWORD PTR _iMapY$230551[ebp], edx
	jmp	SHORT $LN31@plotDirect
$LN30@plotDirect:
	mov	edx, DWORD PTR _iY$[ebp]
	mov	DWORD PTR _iMapY$230551[ebp], edx
$LN31@plotDirect:
	mov	eax, DWORD PTR _iMapY$230551[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMapX$230550[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T230477[ebp]
	call	?isPlot@CvMap@@QBEHHH@Z			; CvMap::isPlot
	test	eax, eax
	je	SHORT $LN11@plotDirect
	mov	edx, DWORD PTR $T230477[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T230515[ebp], eax
	mov	ecx, DWORD PTR _iMapY$230551[ebp]
	imul	ecx, DWORD PTR $T230515[ebp]
	add	ecx, DWORD PTR _iMapX$230550[ebp]
	imul	ecx, 484				; 000001e4H
	mov	edx, DWORD PTR $T230477[ebp]
	add	ecx, DWORD PTR [edx+4068]
	mov	DWORD PTR tv155[ebp], ecx
	jmp	SHORT $LN12@plotDirect
$LN11@plotDirect:
	mov	DWORD PTR tv155[ebp], 0
$LN12@plotDirect:
	mov	eax, DWORD PTR tv155[ebp]
	mov	DWORD PTR $T230552[ebp], eax
$LN9@plotDirect:
	mov	eax, DWORD PTR $T230552[ebp]
	jmp	$LN3@plotDirect

; 197  : 	}
; 198  : 	else

	jmp	$LN3@plotDirect
$LN2@plotDirect:

; 199  : 	{
; 200  : 		// convert to hex-space coordinates - the coordinate system axes are E and NE (not orthogonal)
; 201  : 		iX = xToHexspaceX(iX , iY);

	cmp	DWORD PTR _iY$[ebp], 0
	jl	SHORT $LN39@plotDirect
	mov	ecx, DWORD PTR _iY$[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv151[ebp], ecx
	jmp	SHORT $LN37@plotDirect
$LN39@plotDirect:
	mov	eax, DWORD PTR _iY$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv151[ebp], eax
$LN37@plotDirect:
	mov	edx, DWORD PTR _iX$[ebp]
	sub	edx, DWORD PTR tv151[ebp]
	mov	DWORD PTR _iX$[ebp], edx

; 202  : 		iX += GC.getPlotDirectionX()[eDirection];

	mov	eax, DWORD PTR _eDirection$[ebp]
	mov	ecx, DWORD PTR _iX$[ebp]
	add	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A[eax*4+112]
	mov	DWORD PTR _iX$[ebp], ecx

; 203  : 		iY += GC.getPlotDirectionY()[eDirection];

	mov	edx, DWORD PTR _eDirection$[ebp]
	mov	eax, DWORD PTR _iY$[ebp]
	add	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A[edx*4+136]
	mov	DWORD PTR _iY$[ebp], eax

; 204  : 
; 205  : 		// convert from hex-space coordinates to the storage array
; 206  : 		iX = hexspaceXToX(iX, iY);

	js	SHORT $LN47@plotDirect
	mov	ecx, DWORD PTR _iY$[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv168[ebp], ecx
	jmp	SHORT $LN45@plotDirect
$LN47@plotDirect:
	mov	eax, DWORD PTR _iY$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv168[ebp], eax
$LN45@plotDirect:
	mov	edx, DWORD PTR _iX$[ebp]
	add	edx, DWORD PTR tv168[ebp]
	mov	DWORD PTR _iX$[ebp], edx

; 207  : 
; 208  : 		return GC.getMap().plot(iX, iY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T230576[ebp], eax
	cmp	DWORD PTR _iX$[ebp], -2147483647	; 80000001H
	je	SHORT $LN51@plotDirect
	cmp	DWORD PTR _iY$[ebp], -2147483647	; 80000001H
	jne	SHORT $LN52@plotDirect
$LN51@plotDirect:
	mov	DWORD PTR $T230678[ebp], 0
	jmp	$LN53@plotDirect
$LN52@plotDirect:
	mov	ecx, DWORD PTR $T230576[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T230583[ebp], dl
	mov	eax, DWORD PTR $T230576[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T230587[ebp], ecx
	movzx	edx, BYTE PTR $T230583[ebp]
	test	edx, edx
	je	SHORT $LN64@plotDirect
	cmp	DWORD PTR _iX$[ebp], 0
	jge	SHORT $LN63@plotDirect
	mov	eax, DWORD PTR _iX$[ebp]
	cdq
	idiv	DWORD PTR $T230587[ebp]
	add	edx, DWORD PTR $T230587[ebp]
	mov	DWORD PTR _iMapX$230676[ebp], edx
	jmp	SHORT $LN65@plotDirect
	jmp	SHORT $LN64@plotDirect
$LN63@plotDirect:
	mov	eax, DWORD PTR _iX$[ebp]
	cmp	eax, DWORD PTR $T230587[ebp]
	jl	SHORT $LN64@plotDirect
	mov	eax, DWORD PTR _iX$[ebp]
	cdq
	idiv	DWORD PTR $T230587[ebp]
	mov	DWORD PTR _iMapX$230676[ebp], edx
	jmp	SHORT $LN65@plotDirect
$LN64@plotDirect:
	mov	ecx, DWORD PTR _iX$[ebp]
	mov	DWORD PTR _iMapX$230676[ebp], ecx
$LN65@plotDirect:
	mov	edx, DWORD PTR $T230576[ebp]
	mov	al, BYTE PTR [edx+4057]
	mov	BYTE PTR $T230598[ebp], al
	mov	ecx, DWORD PTR $T230576[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T230602[ebp], edx
	movzx	eax, BYTE PTR $T230598[ebp]
	test	eax, eax
	je	SHORT $LN74@plotDirect
	cmp	DWORD PTR _iY$[ebp], 0
	jge	SHORT $LN73@plotDirect
	mov	eax, DWORD PTR _iY$[ebp]
	cdq
	idiv	DWORD PTR $T230602[ebp]
	add	edx, DWORD PTR $T230602[ebp]
	mov	DWORD PTR _iMapY$230677[ebp], edx
	jmp	SHORT $LN75@plotDirect
	jmp	SHORT $LN74@plotDirect
$LN73@plotDirect:
	mov	ecx, DWORD PTR _iY$[ebp]
	cmp	ecx, DWORD PTR $T230602[ebp]
	jl	SHORT $LN74@plotDirect
	mov	eax, DWORD PTR _iY$[ebp]
	cdq
	idiv	DWORD PTR $T230602[ebp]
	mov	DWORD PTR _iMapY$230677[ebp], edx
	jmp	SHORT $LN75@plotDirect
$LN74@plotDirect:
	mov	edx, DWORD PTR _iY$[ebp]
	mov	DWORD PTR _iMapY$230677[ebp], edx
$LN75@plotDirect:
	cmp	DWORD PTR _iMapX$230676[ebp], 0
	jl	SHORT $LN79@plotDirect
	mov	eax, DWORD PTR $T230576[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T230616[ebp], ecx
	mov	edx, DWORD PTR _iMapX$230676[ebp]
	cmp	edx, DWORD PTR $T230616[ebp]
	jge	SHORT $LN79@plotDirect
	cmp	DWORD PTR _iMapY$230677[ebp], 0
	jl	SHORT $LN79@plotDirect
	mov	eax, DWORD PTR $T230576[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T230620[ebp], ecx
	mov	edx, DWORD PTR _iMapY$230677[ebp]
	cmp	edx, DWORD PTR $T230620[ebp]
	jge	SHORT $LN79@plotDirect
	mov	DWORD PTR tv213[ebp], 1
	jmp	SHORT $LN77@plotDirect
$LN79@plotDirect:
	mov	DWORD PTR tv213[ebp], 0
$LN77@plotDirect:
	cmp	DWORD PTR tv213[ebp], 0
	je	SHORT $LN55@plotDirect
	mov	eax, DWORD PTR $T230576[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T230633[ebp], ecx
	mov	edx, DWORD PTR _iMapY$230677[ebp]
	imul	edx, DWORD PTR $T230633[ebp]
	add	edx, DWORD PTR _iMapX$230676[ebp]
	imul	edx, 484				; 000001e4H
	mov	eax, DWORD PTR $T230576[ebp]
	add	edx, DWORD PTR [eax+4068]
	mov	DWORD PTR tv198[ebp], edx
	jmp	SHORT $LN56@plotDirect
$LN55@plotDirect:
	mov	DWORD PTR tv198[ebp], 0
$LN56@plotDirect:
	mov	ecx, DWORD PTR tv198[ebp]
	mov	DWORD PTR $T230678[ebp], ecx
$LN53@plotDirect:
	mov	eax, DWORD PTR $T230678[ebp]
$LN3@plotDirect:

; 209  : 	}
; 210  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z ENDP ; plotDirection
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z ; CvUnitCombat::AttackNuclear
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
xdata$x	SEGMENT
__unwindtable$?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$3
__ehfuncinfo$?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z
_TEXT	SEGMENT
tv217 = -1568						; size = 4
tv207 = -1564						; size = 4
tv166 = -1560						; size = 4
tv95 = -1556						; size = 4
tv264 = -1552						; size = 4
_inst$230847 = -1548					; size = 4
$T230843 = -1544					; size = 4
$T230834 = -1540					; size = 4
$T230830 = -1536					; size = 4
_inst$230812 = -1524					; size = 4
$T230808 = -1520					; size = 4
$T230796 = -1516					; size = 4
_inst$230791 = -1512					; size = 4
$T230787 = -1508					; size = 4
$T230778 = -1504					; size = 4
__Ptr$230777 = -1500					; size = 4
$T230773 = -1496					; size = 4
__Cvtptr$230771 = -1492					; size = 4
__Ans$230772 = -1488					; size = 4
$T230762 = -1484					; size = 4
$T230728 = -1480					; size = 4
$T230723 = -1476					; size = 4
$T230719 = -1469					; size = 1
$T230708 = -1468					; size = 4
$T230704 = -1461					; size = 1
_iMapY$230758 = -1460					; size = 4
_iMapX$230757 = -1456					; size = 4
$T230697 = -1452					; size = 4
$T230687 = -1448					; size = 4
$T230686 = -1444					; size = 4
$T230685 = -1440					; size = 4
$T230684 = -1436					; size = 4
_pDllPlot$222834 = -1432				; size = 4
_i$222825 = -1428					; size = 4
_isTargetVisibleToActivePlayer$222822 = -1421		; size = 1
_eActiveTeam$222821 = -1420				; size = 4
_pDllCombatInfo$222846 = -1416				; size = 4
_kCombatInfo$ = -1412					; size = 1372
__$ArrayPad$ = -32					; size = 4
_pPlot$ = -28						; size = 4
_eResult$ = -24						; size = 4
_bDoImmediate$ = -17					; size = 1
_uiParentEventID$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kAttacker$ = 8						; size = 4
_iX$ = 12						; size = 4
_iY$ = 16						; size = 4
___formal$ = 20						; size = 4
?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z PROC ; CvUnitCombat::AttackNuclear, COMDAT

; 3579 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1556				; 00000614H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 3580 : 	ATTACK_RESULT eResult = ATTACK_ABORTED;

	mov	DWORD PTR _eResult$[ebp], 0

; 3581 : 
; 3582 : 	CvPlot* pPlot = GC.getMap().plot(iX, iY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T230697[ebp], eax
	cmp	DWORD PTR _iX$[ebp], -2147483647	; 80000001H
	je	SHORT $LN27@AttackNucl
	cmp	DWORD PTR _iY$[ebp], -2147483647	; 80000001H
	jne	SHORT $LN28@AttackNucl
$LN27@AttackNucl:
	mov	DWORD PTR _pPlot$[ebp], 0
	jmp	$LN29@AttackNucl
$LN28@AttackNucl:
	mov	ecx, DWORD PTR $T230697[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T230704[ebp], dl
	mov	eax, DWORD PTR $T230697[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T230708[ebp], ecx
	movzx	edx, BYTE PTR $T230704[ebp]
	test	edx, edx
	je	SHORT $LN40@AttackNucl
	cmp	DWORD PTR _iX$[ebp], 0
	jge	SHORT $LN39@AttackNucl
	mov	eax, DWORD PTR _iX$[ebp]
	cdq
	idiv	DWORD PTR $T230708[ebp]
	add	edx, DWORD PTR $T230708[ebp]
	mov	DWORD PTR _iMapX$230757[ebp], edx
	jmp	SHORT $LN41@AttackNucl
	jmp	SHORT $LN40@AttackNucl
$LN39@AttackNucl:
	mov	eax, DWORD PTR _iX$[ebp]
	cmp	eax, DWORD PTR $T230708[ebp]
	jl	SHORT $LN40@AttackNucl
	mov	eax, DWORD PTR _iX$[ebp]
	cdq
	idiv	DWORD PTR $T230708[ebp]
	mov	DWORD PTR _iMapX$230757[ebp], edx
	jmp	SHORT $LN41@AttackNucl
$LN40@AttackNucl:
	mov	ecx, DWORD PTR _iX$[ebp]
	mov	DWORD PTR _iMapX$230757[ebp], ecx
$LN41@AttackNucl:
	mov	edx, DWORD PTR $T230697[ebp]
	mov	al, BYTE PTR [edx+4057]
	mov	BYTE PTR $T230719[ebp], al
	mov	ecx, DWORD PTR $T230697[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T230723[ebp], edx
	movzx	eax, BYTE PTR $T230719[ebp]
	push	eax
	mov	ecx, DWORD PTR $T230723[ebp]
	push	ecx
	mov	edx, DWORD PTR _iY$[ebp]
	push	edx
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapY$230758[ebp], eax
	mov	eax, DWORD PTR _iMapY$230758[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMapX$230757[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T230697[ebp]
	call	?isPlot@CvMap@@QBEHHH@Z			; CvMap::isPlot
	test	eax, eax
	je	SHORT $LN31@AttackNucl
	mov	edx, DWORD PTR $T230697[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T230728[ebp], eax
	mov	ecx, DWORD PTR _iMapY$230758[ebp]
	imul	ecx, DWORD PTR $T230728[ebp]
	add	ecx, DWORD PTR _iMapX$230757[ebp]
	imul	ecx, 484				; 000001e4H
	mov	edx, DWORD PTR $T230697[ebp]
	add	ecx, DWORD PTR [edx+4068]
	mov	DWORD PTR tv264[ebp], ecx
	jmp	SHORT $LN32@AttackNucl
$LN31@AttackNucl:
	mov	DWORD PTR tv264[ebp], 0
$LN32@AttackNucl:
	mov	eax, DWORD PTR tv264[ebp]
	mov	DWORD PTR _pPlot$[ebp], eax
$LN29@AttackNucl:

; 3583 : 	if(NULL == pPlot)

	cmp	DWORD PTR _pPlot$[ebp], 0
	jne	SHORT $LN14@AttackNucl

; 3584 : 		return eResult;

	mov	eax, DWORD PTR _eResult$[ebp]
	jmp	$LN15@AttackNucl
$LN14@AttackNucl:

; 3585 : 
; 3586 : 	bool bDoImmediate = CvPreGame::quickCombat();

	call	?quickCombat@CvPreGame@@YA_NXZ		; CvPreGame::quickCombat
	mov	BYTE PTR _bDoImmediate$[ebp], al

; 3587 : 	CvCombatInfo kCombatInfo;

	lea	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	??0CvCombatInfo@@QAE@XZ			; CvCombatInfo::CvCombatInfo

; 3588 : 	CvUnitCombat::GenerateNuclearCombatInfo(kAttacker, *pPlot, &kCombatInfo);

	lea	ecx, DWORD PTR _kCombatInfo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pPlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _kAttacker$[ebp]
	push	eax
	call	?GenerateNuclearCombatInfo@CvUnitCombat@@SAXAAVCvUnit@@AAVCvPlot@@PAVCvCombatInfo@@@Z ; CvUnitCombat::GenerateNuclearCombatInfo
	add	esp, 12					; 0000000cH

; 3589 : 	CvAssertMsg(!kAttacker.isDelayedDeath(), "Trying to battle and the attacker is already dead!");
; 3590 : 	kAttacker.setMadeAttack(true);

	push	1
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setMadeAttack@CvUnit@@QAEX_N@Z		; CvUnit::setMadeAttack

; 3591 : 	uint uiParentEventID = 0;

	mov	DWORD PTR _uiParentEventID$[ebp], 0

; 3592 : 	if(!bDoImmediate)

	movzx	ecx, BYTE PTR _bDoImmediate$[ebp]
	test	ecx, ecx
	jne	$LN13@AttackNucl

; 3593 : 	{
; 3594 : 		// Nuclear attacks are different in that you can target a plot you can't see, so check to see if the active player
; 3595 : 		// is involved in the combat
; 3596 : 		TeamTypes eActiveTeam = GC.getGame().getActiveTeam();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T230762[ebp], edx
	mov	ecx, DWORD PTR $T230762[ebp]
	call	?getActiveTeam@CvGame@@QAE?AW4TeamTypes@@XZ ; CvGame::getActiveTeam
	mov	DWORD PTR _eActiveTeam$222821[ebp], eax

; 3597 : 
; 3598 : 		bool isTargetVisibleToActivePlayer = pPlot->isActiveVisible(false);

	push	0
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?isActiveVisible@CvPlot@@QBE_N_N@Z	; CvPlot::isActiveVisible
	mov	BYTE PTR _isTargetVisibleToActivePlayer$222822[ebp], al

; 3599 : 		if(!isTargetVisibleToActivePlayer)

	movzx	eax, BYTE PTR _isTargetVisibleToActivePlayer$222822[ebp]
	test	eax, eax
	jne	$LN12@AttackNucl

; 3600 : 		{
; 3601 : 			// Is the attacker part of the local team?
; 3602 : 			isTargetVisibleToActivePlayer = (kAttacker.getTeam() != NO_TEAM && eActiveTeam == kAttacker.getTeam());

	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	cmp	eax, -1
	je	SHORT $LN17@AttackNucl
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	cmp	DWORD PTR _eActiveTeam$222821[ebp], eax
	jne	SHORT $LN17@AttackNucl
	mov	DWORD PTR tv95[ebp], 1
	jmp	SHORT $LN18@AttackNucl
$LN17@AttackNucl:
	mov	DWORD PTR tv95[ebp], 0
$LN18@AttackNucl:
	mov	cl, BYTE PTR tv95[ebp]
	mov	BYTE PTR _isTargetVisibleToActivePlayer$222822[ebp], cl

; 3603 : 
; 3604 : 			if(!isTargetVisibleToActivePlayer)

	movzx	edx, BYTE PTR _isTargetVisibleToActivePlayer$222822[ebp]
	test	edx, edx
	jne	SHORT $LN12@AttackNucl

; 3605 : 			{
; 3606 : 				// Are any of the teams effected by the blast in the local team?
; 3607 : 				for(int i = 0; i < MAX_TEAMS && !isTargetVisibleToActivePlayer; ++i)

	mov	DWORD PTR _i$222825[ebp], 0
	jmp	SHORT $LN10@AttackNucl
$LN9@AttackNucl:
	mov	eax, DWORD PTR _i$222825[ebp]
	add	eax, 1
	mov	DWORD PTR _i$222825[ebp], eax
$LN10@AttackNucl:
	cmp	DWORD PTR _i$222825[ebp], 64		; 00000040H
	jge	SHORT $LN12@AttackNucl
	movzx	ecx, BYTE PTR _isTargetVisibleToActivePlayer$222822[ebp]
	test	ecx, ecx
	jne	SHORT $LN12@AttackNucl

; 3608 : 				{
; 3609 : 					if(kAttacker.isNukeVictim(pPlot, ((TeamTypes)i)))

	mov	edx, DWORD PTR _i$222825[ebp]
	push	edx
	mov	eax, DWORD PTR _pPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?isNukeVictim@CvUnit@@QBE_NPBVCvPlot@@W4TeamTypes@@@Z ; CvUnit::isNukeVictim
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@AttackNucl

; 3610 : 					{
; 3611 : 						isTargetVisibleToActivePlayer = eActiveTeam == ((TeamTypes)i);

	mov	edx, DWORD PTR _eActiveTeam$222821[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR _i$222825[ebp]
	sete	al
	mov	BYTE PTR _isTargetVisibleToActivePlayer$222822[ebp], al
$LN7@AttackNucl:

; 3612 : 					}
; 3613 : 				}

	jmp	SHORT $LN9@AttackNucl
$LN12@AttackNucl:

; 3614 : 			}
; 3615 : 		}
; 3616 : 
; 3617 : 		if(isTargetVisibleToActivePlayer)

	movzx	ecx, BYTE PTR _isTargetVisibleToActivePlayer$222822[ebp]
	test	ecx, ecx
	je	$LN6@AttackNucl

; 3618 : 		{
; 3619 : 			auto_ptr<ICvPlot1> pDllPlot = GC.WrapPlotPointer(pPlot);

	mov	edx, DWORD PTR _pPlot$[ebp]
	push	edx
	lea	eax, DWORD PTR $T230684[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ; CvGlobals::WrapPlotPointer
	mov	DWORD PTR $T230773[ebp], eax
	mov	ecx, DWORD PTR $T230773[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Cvtptr$230771[ebp], edx
	mov	eax, DWORD PTR __Cvtptr$230771[ebp]
	mov	DWORD PTR __Ans$230772[ebp], eax
	mov	ecx, DWORD PTR $T230773[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR __Ans$230772[ebp]
	mov	DWORD PTR $T230685[ebp], edx
	mov	eax, DWORD PTR $T230685[ebp]
	mov	DWORD PTR $T230778[ebp], eax
	mov	ecx, DWORD PTR $T230778[ebp]
	mov	DWORD PTR __Ptr$230777[ebp], ecx
	mov	DWORD PTR $T230778[ebp], 0
	mov	edx, DWORD PTR __Ptr$230777[ebp]
	mov	DWORD PTR _pDllPlot$222834[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T230684[ebp]
	mov	DWORD PTR $T230787[ebp], eax
	cmp	DWORD PTR $T230787[ebp], 0
	je	SHORT $LN59@AttackNucl
	mov	ecx, DWORD PTR $T230787[ebp]
	mov	DWORD PTR _inst$230791[ebp], ecx
	mov	edx, DWORD PTR _inst$230791[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$230791[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN59@AttackNucl:

; 3620 : 			GC.GetEngineUserInterface()->lookAt(pDllPlot.get(), CAMERALOOKAT_NORMAL);

	mov	eax, DWORD PTR $T230796[ebp]
	mov	DWORD PTR tv166[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv166[ebp], ecx
	push	0
	mov	edx, DWORD PTR _pDllPlot$222834[ebp]
	push	edx
	mov	eax, DWORD PTR tv166[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv166[ebp]
	mov	eax, DWORD PTR [edx+272]
	call	eax

; 3621 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pDllPlot$222834[ebp]
	mov	DWORD PTR $T230808[ebp], ecx
	cmp	DWORD PTR $T230808[ebp], 0
	je	SHORT $LN6@AttackNucl
	mov	edx, DWORD PTR $T230808[ebp]
	mov	DWORD PTR _inst$230812[ebp], edx
	mov	eax, DWORD PTR _inst$230812[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$230812[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN6@AttackNucl:

; 3622 : 		kCombatInfo.setVisualizeCombat(isTargetVisibleToActivePlayer);

	movzx	ecx, BYTE PTR _isTargetVisibleToActivePlayer$222822[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kCombatInfo$[ebp]
	call	?setVisualizeCombat@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setVisualizeCombat

; 3623 : 
; 3624 : 		// Set a combat unit/city.  Not really needed for the combat since we are killing everyone, but it is currently the only way a unit is marked that it is 'in-combat'
; 3625 : 		if(pPlot->getPlotCity())

	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	test	eax, eax
	je	SHORT $LN5@AttackNucl

; 3626 : 			kAttacker.setCombatCity(pPlot->getPlotCity());

	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setCombatCity@CvUnit@@QAEXPAVCvCity@@@Z ; CvUnit::setCombatCity

; 3627 : 		else

	jmp	SHORT $LN4@AttackNucl
$LN5@AttackNucl:

; 3628 : 		{
; 3629 : 			if(pPlot->getNumUnits())

	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?getNumUnits@CvPlot@@QBEHXZ		; CvPlot::getNumUnits
	test	eax, eax
	je	SHORT $LN3@AttackNucl

; 3630 : 				kAttacker.setCombatUnit(pPlot->getUnitByIndex(0), true);

	push	1
	push	0
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?getUnitByIndex@CvPlot@@QBEPAVCvUnit@@H@Z ; CvPlot::getUnitByIndex
	push	eax
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setCombatUnit@CvUnit@@QAEXPAV1@_N@Z	; CvUnit::setCombatUnit

; 3631 : 			else

	jmp	SHORT $LN4@AttackNucl
$LN3@AttackNucl:

; 3632 : 				kAttacker.setAttackPlot(pPlot, false);

	push	0
	mov	edx, DWORD PTR _pPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setAttackPlot@CvUnit@@QAEXPBVCvPlot@@_N@Z ; CvUnit::setAttackPlot
$LN4@AttackNucl:

; 3633 : 		}
; 3634 : 
; 3635 : 		auto_ptr<ICvCombatInfo1> pDllCombatInfo(new CvDllCombatInfo(&kCombatInfo));

	push	12					; 0000000cH
	call	??2CvDllCombatInfo@@SAPAXI@Z		; CvDllCombatInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T230687[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T230687[ebp], 0
	je	SHORT $LN19@AttackNucl
	lea	eax, DWORD PTR _kCombatInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T230687[ebp]
	call	??0CvDllCombatInfo@@QAE@PAVCvCombatInfo@@@Z ; CvDllCombatInfo::CvDllCombatInfo
	mov	DWORD PTR tv207[ebp], eax
	jmp	SHORT $LN20@AttackNucl
$LN19@AttackNucl:
	mov	DWORD PTR tv207[ebp], 0
$LN20@AttackNucl:
	mov	ecx, DWORD PTR tv207[ebp]
	mov	DWORD PTR $T230686[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T230686[ebp]
	mov	DWORD PTR _pDllCombatInfo$222846[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 3636 : 		uiParentEventID = gDLL->GameplayUnitCombat(pDllCombatInfo.get());

	mov	eax, DWORD PTR $T230830[ebp]
	mov	DWORD PTR tv217[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv217[ebp], ecx
	mov	edx, DWORD PTR _pDllCombatInfo$222846[ebp]
	mov	DWORD PTR $T230834[ebp], edx
	mov	eax, DWORD PTR $T230834[ebp]
	push	eax
	mov	ecx, DWORD PTR tv217[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv217[ebp]
	mov	eax, DWORD PTR [edx+644]
	call	eax
	mov	DWORD PTR _uiParentEventID$[ebp], eax

; 3637 : 
; 3638 : 		eResult = ATTACK_QUEUED;

	mov	DWORD PTR _eResult$[ebp], 2

; 3639 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pDllCombatInfo$222846[ebp]
	mov	DWORD PTR $T230843[ebp], ecx
	cmp	DWORD PTR $T230843[ebp], 0
	je	SHORT $LN89@AttackNucl
	mov	edx, DWORD PTR $T230843[ebp]
	mov	DWORD PTR _inst$230847[ebp], edx
	mov	eax, DWORD PTR _inst$230847[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$230847[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN89@AttackNucl:

; 3640 : 	else

	jmp	SHORT $LN1@AttackNucl
$LN13@AttackNucl:

; 3641 : 	{
; 3642 : 		eResult = ATTACK_COMPLETED;

	mov	DWORD PTR _eResult$[ebp], 1

; 3643 : 		// Set the plot, just so the unit is marked as 'in-combat'
; 3644 : 		kAttacker.setAttackPlot(pPlot, false);

	push	0
	mov	ecx, DWORD PTR _pPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kAttacker$[ebp]
	call	?setAttackPlot@CvUnit@@QAEXPBVCvPlot@@_N@Z ; CvUnit::setAttackPlot
$LN1@AttackNucl:

; 3645 : 	}
; 3646 : 
; 3647 : 	ResolveCombat(kCombatInfo,  uiParentEventID);

	mov	edx, DWORD PTR _uiParentEventID$[ebp]
	push	edx
	lea	eax, DWORD PTR _kCombatInfo$[ebp]
	push	eax
	call	?ResolveCombat@CvUnitCombat@@SAXABVCvCombatInfo@@I@Z ; CvUnitCombat::ResolveCombat
	add	esp, 8

; 3648 : 
; 3649 : 	return eResult;

	mov	eax, DWORD PTR _eResult$[ebp]
$LN15@AttackNucl:

; 3650 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$1:
	lea	ecx, DWORD PTR _pDllPlot$222834[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
__unwindfunclet$?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$2:
	mov	eax, DWORD PTR $T230687[ebp]
	push	eax
	call	??3CvDllCombatInfo@@SAXPAX@Z		; CvDllCombatInfo::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z$3:
	lea	ecx, DWORD PTR _pDllCombatInfo$222846[ebp]
	jmp	??1?$auto_ptr@VICvCombatInfo1@@@std@@QAE@XZ ; std::auto_ptr<ICvCombatInfo1>::~auto_ptr<ICvCombatInfo1>
__ehhandler$?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1560]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AttackNuclear@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z ENDP ; CvUnitCombat::AttackNuclear
PUBLIC	??_C@_0BD@JKFMHBO@UNIT_KOREAN_HWACHA?$AA@	; `string'
PUBLIC	??_C@_0O@COMKMHFA@UNIT_IRONCLAD?$AA@		; `string'
PUBLIC	??_C@_0BI@GEDGJGI@UNIT_KOREAN_TURTLE_SHIP?$AA@	; `string'
PUBLIC	??_C@_0BG@FFHALEHG@UNIT_FRENCH_MUSKETEER?$AA@	; `string'
PUBLIC	??_C@_0BE@NKPHAHMJ@LEADER_ODA_NOBUNAGA?$AA@	; `string'
PUBLIC	??_C@_0BJ@JDLGIEHK@UNIT_SIAMESE_WARELEPHANT?$AA@ ; `string'
PUBLIC	??_C@_0BB@PCHCFFPL@LEADER_ELIZABETH?$AA@	; `string'
PUBLIC	??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ		; sprintf_s<256>
PUBLIC	__real@3fc00000
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0CM@NHJMMHEK@?$FLCOLOR_WHITE?$FN?$CL?$CFd?$FLENDCOLOR?$FN?$FLICON_@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	?GetNumSpecificEnemyUnitsAdjacent@CvUnit@@QBEHPBV1@0@Z:PROC ; CvUnit::GetNumSpecificEnemyUnitsAdjacent
EXTRN	?GetMaxHitPoints@CvUnit@@QBEHXZ:PROC		; CvUnit::GetMaxHitPoints
EXTRN	__imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z:PROC
EXTRN	?getLeaderTypeKey@CvPlayer@@QBEPBDXZ:PROC	; CvPlayer::getLeaderTypeKey
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	?ChangeGoldenAgeProgressMeter@CvPlayer@@QAEXH@Z:PROC ; CvPlayer::ChangeGoldenAgeProgressMeter
EXTRN	?GetCombat@CvUnitEntry@@QBEHXZ:PROC		; CvUnitEntry::GetCombat
EXTRN	?GetRangedCombat@CvUnitEntry@@QBEHXZ:PROC	; CvUnitEntry::GetRangedCombat
EXTRN	?GetGoldenAgeValueFromKills@CvUnit@@QBEHXZ:PROC	; CvUnit::GetGoldenAgeValueFromKills
EXTRN	?IsHealIfDefeatExcludeBarbarians@CvUnit@@QBE_NXZ:PROC ; CvUnit::IsHealIfDefeatExcludeBarbarians
EXTRN	?getHPHealedIfDefeatEnemy@CvUnit@@QBEHXZ:PROC	; CvUnit::getHPHealedIfDefeatEnemy
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BD@JKFMHBO@UNIT_KOREAN_HWACHA?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BD@JKFMHBO@UNIT_KOREAN_HWACHA?$AA@ DB 'UNIT_KOREAN_HWACHA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@COMKMHFA@UNIT_IRONCLAD?$AA@
CONST	SEGMENT
??_C@_0O@COMKMHFA@UNIT_IRONCLAD?$AA@ DB 'UNIT_IRONCLAD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GEDGJGI@UNIT_KOREAN_TURTLE_SHIP?$AA@
CONST	SEGMENT
??_C@_0BI@GEDGJGI@UNIT_KOREAN_TURTLE_SHIP?$AA@ DB 'UNIT_KOREAN_TURTLE_SHI'
	DB	'P', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FFHALEHG@UNIT_FRENCH_MUSKETEER?$AA@
CONST	SEGMENT
??_C@_0BG@FFHALEHG@UNIT_FRENCH_MUSKETEER?$AA@ DB 'UNIT_FRENCH_MUSKETEER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NKPHAHMJ@LEADER_ODA_NOBUNAGA?$AA@
CONST	SEGMENT
??_C@_0BE@NKPHAHMJ@LEADER_ODA_NOBUNAGA?$AA@ DB 'LEADER_ODA_NOBUNAGA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JDLGIEHK@UNIT_SIAMESE_WARELEPHANT?$AA@
CONST	SEGMENT
??_C@_0BJ@JDLGIEHK@UNIT_SIAMESE_WARELEPHANT?$AA@ DB 'UNIT_SIAMESE_WARELEP'
	DB	'HANT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PCHCFFPL@LEADER_ELIZABETH?$AA@
CONST	SEGMENT
??_C@_0BB@PCHCFFPL@LEADER_ELIZABETH?$AA@ DB 'LEADER_ELIZABETH', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@NHJMMHEK@?$FLCOLOR_WHITE?$FN?$CL?$CFd?$FLENDCOLOR?$FN?$FLICON_@
CONST	SEGMENT
??_C@_0CM@NHJMMHEK@?$FLCOLOR_WHITE?$FN?$CL?$CFd?$FLENDCOLOR?$FN?$FLICON_@ DB '['
	DB	'COLOR_WHITE]+%d[ENDCOLOR][ICON_GOLDEN_AGE]', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z$4
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z
_TEXT	SEGMENT
tv410 = -600						; size = 4
tv390 = -596						; size = 4
tv344 = -592						; size = 4
tv319 = -588						; size = 4
tv308 = -584						; size = 4
tv429 = -580						; size = 4
tv553 = -576						; size = 4
tv271 = -572						; size = 4
tv260 = -568						; size = 4
tv422 = -564						; size = 4
tv536 = -560						; size = 4
tv185 = -556						; size = 4
tv445 = -552						; size = 4
tv439 = -548						; size = 4
$T231059 = -544						; size = 4
$T231051 = -540						; size = 4
$T231047 = -536						; size = 4
$T231034 = -532						; size = 4
$T231030 = -528						; size = 4
$T231022 = -524						; size = 4
$T231013 = -520						; size = 4
$T231005 = -516						; size = 4
$T230996 = -512						; size = 4
$T230983 = -508						; size = 4
$T230979 = -504						; size = 4
$T230970 = -500						; size = 4
$T230957 = -496						; size = 4
$T230948 = -492						; size = 4
$T230939 = -488						; size = 4
$T230932 = -484						; size = 4
$T230928 = -480						; size = 4
$T230924 = -476						; size = 4
$T230904 = -472						; size = 4
$T230895 = -468						; size = 4
$T230886 = -464						; size = 4
$T230870 = -460						; size = 4
$T230865 = -456						; size = 28
$T230864 = -425						; size = 1
$T230861 = -424						; size = 28
$T230860 = -393						; size = 1
$T230859 = -392						; size = 4
$T230858 = -388						; size = 4
_szLoserUnitType$222896 = -384				; size = 28
_pkLoserUnitInfo$222897 = -356				; size = 4
_szUnitType$222876 = -352				; size = 28
_pkUnitInfo$222877 = -324				; size = 4
_fDelay$222869 = -320					; size = 4
_text$222868 = -316					; size = 256
_iValue$222864 = -60					; size = 4
_yieldString$222865 = -56				; size = 28
__$ArrayPad$ = -28					; size = 4
_iCombatStrength$222860 = -24				; size = 4
_iExistingDelay$ = -20					; size = 4
_kPlayer$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pkWinner$ = 8						; size = 4
_pkLoser$ = 12						; size = 4
?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z PROC ; CvUnitCombat::ApplyPostCombatTraitEffects, COMDAT

; 3654 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 588				; 0000024cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T230870[ebp], 0

; 3655 : 	int iExistingDelay = 0;

	mov	DWORD PTR _iExistingDelay$[ebp], 0

; 3656 : 
; 3657 : 	// "Heal if defeat enemy" promotion; doesn't apply if defeat a barbarian
; 3658 : 	if(pkWinner->getHPHealedIfDefeatEnemy() > 0 && (pkLoser->getOwner() != BARBARIAN_PLAYER || !(pkWinner->IsHealIfDefeatExcludeBarbarians())))

	mov	ecx, DWORD PTR _pkWinner$[ebp]
	call	?getHPHealedIfDefeatEnemy@CvUnit@@QBEHXZ ; CvUnit::getHPHealedIfDefeatEnemy
	test	eax, eax
	jle	SHORT $LN15@ApplyPostC
	mov	eax, DWORD PTR _pkLoser$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T230886[ebp], ecx
	cmp	DWORD PTR $T230886[ebp], 63		; 0000003fH
	jne	SHORT $LN17@ApplyPostC
	mov	ecx, DWORD PTR _pkWinner$[ebp]
	call	?IsHealIfDefeatExcludeBarbarians@CvUnit@@QBE_NXZ ; CvUnit::IsHealIfDefeatExcludeBarbarians
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN15@ApplyPostC
$LN17@ApplyPostC:

; 3659 : 	{
; 3660 : 		if(pkWinner->getHPHealedIfDefeatEnemy() > pkWinner->getDamage())

	mov	ecx, DWORD PTR _pkWinner$[ebp]
	call	?getHPHealedIfDefeatEnemy@CvUnit@@QBEHXZ ; CvUnit::getHPHealedIfDefeatEnemy
	mov	esi, eax
	mov	ecx, DWORD PTR _pkWinner$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	cmp	esi, eax
	jle	SHORT $LN16@ApplyPostC

; 3661 : 		{
; 3662 : 			pkWinner->changeDamage(-pkWinner->getDamage());

	push	0
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	-1
	mov	ecx, DWORD PTR _pkWinner$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _pkWinner$[ebp]
	call	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::changeDamage

; 3663 : 		}
; 3664 : 		else

	jmp	SHORT $LN15@ApplyPostC
$LN16@ApplyPostC:

; 3665 : 		{
; 3666 : 			pkWinner->changeDamage(-pkWinner->getHPHealedIfDefeatEnemy());

	push	0
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	-1
	mov	ecx, DWORD PTR _pkWinner$[ebp]
	call	?getHPHealedIfDefeatEnemy@CvUnit@@QBEHXZ ; CvUnit::getHPHealedIfDefeatEnemy
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _pkWinner$[ebp]
	call	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::changeDamage
$LN15@ApplyPostC:

; 3667 : 		}
; 3668 : 	}
; 3669 : 
; 3670 : 	CvPlayer& kPlayer = GET_PLAYER(pkWinner->getOwner());

	mov	eax, DWORD PTR _pkWinner$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T230895[ebp], ecx
	mov	edx, DWORD PTR $T230895[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$[ebp], edx

; 3671 : 	if (pkWinner->GetGoldenAgeValueFromKills() > 0)

	mov	ecx, DWORD PTR _pkWinner$[ebp]
	call	?GetGoldenAgeValueFromKills@CvUnit@@QBEHXZ ; CvUnit::GetGoldenAgeValueFromKills
	test	eax, eax
	jle	$LN13@ApplyPostC

; 3672 : 	{
; 3673 : 		int iCombatStrength = max(pkLoser->getUnitInfo().GetCombat(), pkLoser->getUnitInfo().GetRangedCombat());

	mov	ecx, DWORD PTR _pkLoser$[ebp]
	call	?getUnitInfo@CvUnit@@QBEAAVCvUnitEntry@@XZ ; CvUnit::getUnitInfo
	mov	ecx, eax
	call	?GetRangedCombat@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetRangedCombat
	mov	DWORD PTR $T230858[ebp], eax
	mov	ecx, DWORD PTR _pkLoser$[ebp]
	call	?getUnitInfo@CvUnit@@QBEAAVCvUnitEntry@@XZ ; CvUnit::getUnitInfo
	mov	ecx, eax
	call	?GetCombat@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetCombat
	mov	DWORD PTR $T230859[ebp], eax
	mov	eax, DWORD PTR $T230859[ebp]
	cmp	eax, DWORD PTR $T230858[ebp]
	jge	SHORT $LN46@ApplyPostC
	lea	ecx, DWORD PTR $T230858[ebp]
	mov	DWORD PTR tv439[ebp], ecx
	jmp	SHORT $LN47@ApplyPostC
$LN46@ApplyPostC:
	lea	edx, DWORD PTR $T230859[ebp]
	mov	DWORD PTR tv439[ebp], edx
$LN47@ApplyPostC:
	mov	eax, DWORD PTR tv439[ebp]
	mov	DWORD PTR $T230904[ebp], eax
	mov	ecx, DWORD PTR $T230904[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _iCombatStrength$222860[ebp], edx

; 3674 : 		if(iCombatStrength > 0)

	cmp	DWORD PTR _iCombatStrength$222860[ebp], 0
	jle	$LN13@ApplyPostC

; 3675 : 		{
; 3676 : 			int iValue = iCombatStrength * pkWinner->GetGoldenAgeValueFromKills() / 100;

	mov	ecx, DWORD PTR _pkWinner$[ebp]
	call	?GetGoldenAgeValueFromKills@CvUnit@@QBEHXZ ; CvUnit::GetGoldenAgeValueFromKills
	imul	eax, DWORD PTR _iCombatStrength$222860[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iValue$222864[ebp], eax

; 3677 : 			kPlayer.ChangeGoldenAgeProgressMeter(iValue);

	mov	edx, DWORD PTR _iValue$222864[ebp]
	push	edx
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?ChangeGoldenAgeProgressMeter@CvPlayer@@QAEXH@Z ; CvPlayer::ChangeGoldenAgeProgressMeter

; 3678 : 
; 3679 : 			CvString yieldString = "[COLOR_WHITE]+%d[ENDCOLOR][ICON_GOLDEN_AGE]";

	mov	eax, OFFSET ??_C@_0CM@NHJMMHEK@?$FLCOLOR_WHITE?$FN?$CL?$CFd?$FLENDCOLOR?$FN?$FLICON_@
	test	eax, eax
	je	SHORT $LN50@ApplyPostC
	mov	DWORD PTR tv445[ebp], OFFSET ??_C@_0CM@NHJMMHEK@?$FLCOLOR_WHITE?$FN?$CL?$CFd?$FLENDCOLOR?$FN?$FLICON_@
	jmp	SHORT $LN51@ApplyPostC
$LN50@ApplyPostC:
	mov	DWORD PTR tv445[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN51@ApplyPostC:
	mov	ecx, DWORD PTR tv445[ebp]
	push	ecx
	lea	ecx, DWORD PTR _yieldString$222865[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3680 : 
; 3681 : 			if(pkWinner->getOwner() == GC.getGame().getActivePlayer())

	mov	edx, DWORD PTR _pkWinner$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T230924[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T230928[ebp], ecx
	mov	ecx, DWORD PTR $T230928[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T230924[ebp], eax
	jne	$LN12@ApplyPostC

; 3682 : 			{
; 3683 : 				char text[256] = {0};

	mov	BYTE PTR _text$222868[ebp], 0
	push	255					; 000000ffH
	push	0
	lea	edx, DWORD PTR _text$222868[ebp+1]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 3684 : 				float fDelay = GC.getPOST_COMBAT_TEXT_DELAY() * 1.5f;

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8040
	movss	DWORD PTR $T230932[ebp], xmm0
	movss	xmm0, DWORD PTR $T230932[ebp]
	mulss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR _fDelay$222869[ebp], xmm0

; 3685 : 				sprintf_s(text, yieldString, iValue);

	mov	eax, DWORD PTR _iValue$222864[ebp]
	push	eax
	lea	ecx, DWORD PTR _yieldString$222865[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _text$222868[ebp]
	push	ecx
	call	??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ	; sprintf_s<256>
	add	esp, 12					; 0000000cH

; 3686 : 				GC.GetEngineUserInterface()->AddPopupText(pkLoser->getX(), pkLoser->getY(), text, fDelay);

	mov	edx, DWORD PTR $T230939[ebp]
	mov	DWORD PTR tv185[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv185[ebp], eax
	mov	ecx, DWORD PTR _pkLoser$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR $T230948[ebp], edx
	mov	eax, DWORD PTR _pkLoser$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T230957[ebp], ecx
	push	ecx
	fld	DWORD PTR _fDelay$222869[ebp]
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _text$222868[ebp]
	push	edx
	mov	eax, DWORD PTR $T230948[ebp]
	push	eax
	mov	ecx, DWORD PTR $T230957[ebp]
	push	ecx
	mov	edx, DWORD PTR tv185[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv185[ebp]
	mov	edx, DWORD PTR [eax+184]
	call	edx

; 3687 : 
; 3688 : 				iExistingDelay++;

	mov	eax, DWORD PTR _iExistingDelay$[ebp]
	add	eax, 1
	mov	DWORD PTR _iExistingDelay$[ebp], eax
$LN12@ApplyPostC:

; 3689 : 			}
; 3690 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _yieldString$222865[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN13@ApplyPostC:

; 3691 : 	}
; 3692 : 
; 3693 : 	// Earn bonuses for kills?
; 3694 : 	kPlayer.DoYieldsFromKill(pkWinner->getUnitType(), pkLoser->getUnitType(), pkLoser->getX(), pkLoser->getY(), pkLoser->isBarbarian(), iExistingDelay);

	mov	ecx, DWORD PTR _pkLoser$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR $T230970[ebp], edx
	mov	eax, DWORD PTR _pkLoser$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T230979[ebp], ecx
	mov	edx, DWORD PTR _iExistingDelay$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkLoser$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR $T230970[ebp]
	push	ecx
	mov	edx, DWORD PTR $T230979[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkLoser$[ebp]
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	mov	ecx, DWORD PTR _pkWinner$[ebp]
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?DoYieldsFromKill@CvPlayer@@QAEXW4UnitTypes@@0HH_NH@Z ; CvPlayer::DoYieldsFromKill

; 3695 : 
; 3696 : 	//Achievements and Stats
; 3697 : 	if(pkWinner->isHuman() && !GC.getGame().isGameMultiPlayer())

	mov	ecx, DWORD PTR _pkWinner$[ebp]
	call	?isHuman@CvUnit@@QBE_NXZ		; CvUnit::isHuman
	movzx	eax, al
	test	eax, eax
	je	$LN11@ApplyPostC
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T230983[ebp], ecx
	mov	ecx, DWORD PTR $T230983[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	jne	$LN11@ApplyPostC

; 3698 : 	{
; 3699 : 		CvString szUnitType;

	lea	ecx, DWORD PTR _szUnitType$222876[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 3700 : 		CvUnitEntry* pkUnitInfo = GC.getUnitInfo(pkWinner->getUnitType());

	mov	ecx, DWORD PTR _pkWinner$[ebp]
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo
	mov	DWORD PTR _pkUnitInfo$222877[ebp], eax

; 3701 : 		if(pkUnitInfo)

	cmp	DWORD PTR _pkUnitInfo$222877[ebp], 0
	je	SHORT $LN93@ApplyPostC

; 3702 : 			szUnitType = pkUnitInfo->GetType();

	mov	ecx, DWORD PTR _pkUnitInfo$222877[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T230996[ebp], eax
	cmp	DWORD PTR $T230996[ebp], 0
	je	SHORT $LN92@ApplyPostC
	mov	eax, DWORD PTR $T230996[ebp]
	push	eax
	lea	ecx, DWORD PTR _szUnitType$222876[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN91@ApplyPostC
$LN92@ApplyPostC:
	lea	ecx, DWORD PTR _szUnitType$222876[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN91@ApplyPostC:
$LN93@ApplyPostC:

; 3703 : 
; 3704 : 		//Elizabeth Special Achievement
; 3705 : 		if((CvString)kPlayer.getLeaderTypeKey() == "LEADER_ELIZABETH" && pkLoser->getDomainType() == DOMAIN_SEA)

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?getLeaderTypeKey@CvPlayer@@QBEPBDXZ	; CvPlayer::getLeaderTypeKey
	mov	DWORD PTR $T231005[ebp], eax
	cmp	DWORD PTR $T231005[ebp], 0
	je	SHORT $LN97@ApplyPostC
	mov	ecx, DWORD PTR $T231005[ebp]
	mov	DWORD PTR tv536[ebp], ecx
	jmp	SHORT $LN98@ApplyPostC
$LN97@ApplyPostC:
	mov	DWORD PTR tv536[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN98@ApplyPostC:
	mov	edx, DWORD PTR tv536[ebp]
	push	edx
	lea	ecx, DWORD PTR $T230861[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	eax, DWORD PTR $T230861[ebp]
	mov	DWORD PTR tv422[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR $T230870[ebp]
	or	ecx, 1
	mov	DWORD PTR $T230870[ebp], ecx
	push	OFFSET ??_C@_0BB@PCHCFFPL@LEADER_ELIZABETH?$AA@
	mov	edx, DWORD PTR tv422[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@ApplyPostC
	mov	ecx, DWORD PTR _pkLoser$[ebp]
	call	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ ; CvUnit::getDomainType
	test	eax, eax
	jne	SHORT $LN21@ApplyPostC
	mov	DWORD PTR tv260[ebp], 1
	jmp	SHORT $LN22@ApplyPostC
$LN21@ApplyPostC:
	mov	DWORD PTR tv260[ebp], 0
$LN22@ApplyPostC:
	mov	cl, BYTE PTR tv260[ebp]
	mov	BYTE PTR $T230860[ebp], cl
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T230870[ebp]
	and	edx, 1
	je	SHORT $LN29@ApplyPostC
	and	DWORD PTR $T230870[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T230861[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN29@ApplyPostC:
	movzx	eax, BYTE PTR $T230860[ebp]
	test	eax, eax
	je	SHORT $LN9@ApplyPostC

; 3706 : 		{
; 3707 : 			gDLL->IncrementSteamStatAndUnlock(ESTEAMSTAT_BRITISHNAVY, 357, ACHIEVEMENT_SPECIAL_ARMADA);

	mov	ecx, DWORD PTR $T231013[ebp]
	mov	DWORD PTR tv271[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv271[ebp], edx
	push	115					; 00000073H
	push	357					; 00000165H
	push	129					; 00000081H
	mov	eax, DWORD PTR tv271[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv271[ebp]
	mov	eax, DWORD PTR [edx+848]
	call	eax
$LN9@ApplyPostC:

; 3708 : 		}
; 3709 : 		//Ramkang's Special Achievement
; 3710 : 		if(szUnitType == "UNIT_SIAMESE_WARELEPHANT")

	push	OFFSET ??_C@_0BJ@JDLGIEHK@UNIT_SIAMESE_WARELEPHANT?$AA@
	lea	ecx, DWORD PTR _szUnitType$222876[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8

; 3711 : 		{
; 3712 : 			//CvString szUnitTypeLoser = (CvString) GC.getUnitInfo(pkLoser->getUnitType())->GetType();
; 3713 : 		}
; 3714 : 
; 3715 : 		//Oda's Special Achievement
; 3716 : 		if((CvString)kPlayer.getLeaderTypeKey() == "LEADER_ODA_NOBUNAGA" && (pkWinner->GetMaxHitPoints() - pkWinner->getDamage() == 1))

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?getLeaderTypeKey@CvPlayer@@QBEPBDXZ	; CvPlayer::getLeaderTypeKey
	mov	DWORD PTR $T231022[ebp], eax
	cmp	DWORD PTR $T231022[ebp], 0
	je	SHORT $LN107@ApplyPostC
	mov	eax, DWORD PTR $T231022[ebp]
	mov	DWORD PTR tv553[ebp], eax
	jmp	SHORT $LN108@ApplyPostC
$LN107@ApplyPostC:
	mov	DWORD PTR tv553[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN108@ApplyPostC:
	mov	ecx, DWORD PTR tv553[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T230865[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	edx, DWORD PTR $T230865[ebp]
	mov	DWORD PTR tv429[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR $T230870[ebp]
	or	eax, 2
	mov	DWORD PTR $T230870[ebp], eax
	push	OFFSET ??_C@_0BE@NKPHAHMJ@LEADER_ODA_NOBUNAGA?$AA@
	mov	ecx, DWORD PTR tv429[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN23@ApplyPostC
	mov	ecx, DWORD PTR _pkWinner$[ebp]
	call	?GetMaxHitPoints@CvUnit@@QBEHXZ		; CvUnit::GetMaxHitPoints
	mov	esi, eax
	mov	ecx, DWORD PTR _pkWinner$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	sub	esi, eax
	cmp	esi, 1
	jne	SHORT $LN23@ApplyPostC
	mov	DWORD PTR tv308[ebp], 1
	jmp	SHORT $LN24@ApplyPostC
$LN23@ApplyPostC:
	mov	DWORD PTR tv308[ebp], 0
$LN24@ApplyPostC:
	mov	al, BYTE PTR tv308[ebp]
	mov	BYTE PTR $T230864[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T230870[ebp]
	and	ecx, 2
	je	SHORT $LN32@ApplyPostC
	and	DWORD PTR $T230870[ebp], -3		; fffffffdH
	lea	ecx, DWORD PTR $T230865[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN32@ApplyPostC:
	movzx	edx, BYTE PTR $T230864[ebp]
	test	edx, edx
	je	SHORT $LN7@ApplyPostC

; 3717 : 		{
; 3718 : 			gDLL->UnlockAchievement(ACHIEVEMENT_SPECIAL_KAMIKAZE);

	mov	eax, DWORD PTR $T231030[ebp]
	mov	DWORD PTR tv319[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv319[ebp], ecx
	push	105					; 00000069H
	mov	edx, DWORD PTR tv319[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv319[ebp]
	mov	edx, DWORD PTR [eax+828]
	call	edx
$LN7@ApplyPostC:

; 3719 : 		}
; 3720 : 		//Napoleon's Special Achievement
; 3721 : 		if(szUnitType == "UNIT_FRENCH_MUSKETEER")

	push	OFFSET ??_C@_0BG@FFHALEHG@UNIT_FRENCH_MUSKETEER?$AA@
	lea	eax, DWORD PTR _szUnitType$222876[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@ApplyPostC

; 3722 : 		{
; 3723 : 			if(pkLoser->GetNumSpecificEnemyUnitsAdjacent(pkLoser, pkWinner) >=3)

	mov	edx, DWORD PTR _pkWinner$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkLoser$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkLoser$[ebp]
	call	?GetNumSpecificEnemyUnitsAdjacent@CvUnit@@QBEHPBV1@0@Z ; CvUnit::GetNumSpecificEnemyUnitsAdjacent
	cmp	eax, 3
	jl	SHORT $LN5@ApplyPostC

; 3724 : 			{
; 3725 : 				gDLL->UnlockAchievement(ACHIEVEMENT_SPECIAL_MUSKETEERS);

	mov	ecx, DWORD PTR $T231034[ebp]
	mov	DWORD PTR tv344[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv344[ebp], edx
	push	102					; 00000066H
	mov	eax, DWORD PTR tv344[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv344[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax
$LN5@ApplyPostC:

; 3726 : 			}
; 3727 : 		}
; 3728 : 
; 3729 : 		//DLC_05 Sejong's Turtle Boat Achievement
; 3730 : 		if(szUnitType == "UNIT_KOREAN_TURTLE_SHIP")

	push	OFFSET ??_C@_0BI@GEDGJGI@UNIT_KOREAN_TURTLE_SHIP?$AA@
	lea	ecx, DWORD PTR _szUnitType$222876[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	$LN4@ApplyPostC

; 3731 : 		{
; 3732 : 			CvString szLoserUnitType;

	lea	ecx, DWORD PTR _szLoserUnitType$222896[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 3733 : 			CvUnitEntry* pkLoserUnitInfo = GC.getUnitInfo(pkLoser->getUnitType());

	mov	ecx, DWORD PTR _pkLoser$[ebp]
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo
	mov	DWORD PTR _pkLoserUnitInfo$222897[ebp], eax

; 3734 : 			if(pkLoserUnitInfo)

	cmp	DWORD PTR _pkLoserUnitInfo$222897[ebp], 0
	je	SHORT $LN124@ApplyPostC

; 3735 : 			{
; 3736 : 				szLoserUnitType = pkLoserUnitInfo->GetType();

	mov	ecx, DWORD PTR _pkLoserUnitInfo$222897[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T231047[ebp], eax
	cmp	DWORD PTR $T231047[ebp], 0
	je	SHORT $LN123@ApplyPostC
	mov	eax, DWORD PTR $T231047[ebp]
	push	eax
	lea	ecx, DWORD PTR _szLoserUnitType$222896[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN122@ApplyPostC
$LN123@ApplyPostC:
	lea	ecx, DWORD PTR _szLoserUnitType$222896[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN122@ApplyPostC:
$LN124@ApplyPostC:

; 3737 : 			}
; 3738 : 			if(szLoserUnitType == "UNIT_IRONCLAD")

	push	OFFSET ??_C@_0O@COMKMHFA@UNIT_IRONCLAD?$AA@
	lea	ecx, DWORD PTR _szLoserUnitType$222896[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@ApplyPostC

; 3739 : 			{
; 3740 : 				gDLL->UnlockAchievement(ACHIEVEMENT_SPECIAL_IRONCLAD_TURTLE);

	mov	eax, DWORD PTR $T231051[ebp]
	mov	DWORD PTR tv390[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv390[ebp], ecx
	push	162					; 000000a2H
	mov	edx, DWORD PTR tv390[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv390[ebp]
	mov	edx, DWORD PTR [eax+828]
	call	edx
$LN2@ApplyPostC:

; 3741 : 			}
; 3742 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _szLoserUnitType$222896[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN4@ApplyPostC:

; 3743 : 
; 3744 : 		//DLC_05 Sejong's Hwacha Achievement
; 3745 : 		if(szUnitType == "UNIT_KOREAN_HWACHA")

	push	OFFSET ??_C@_0BD@JKFMHBO@UNIT_KOREAN_HWACHA?$AA@
	lea	eax, DWORD PTR _szUnitType$222876[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@ApplyPostC

; 3746 : 		{
; 3747 : 			gDLL->IncrementSteamStatAndUnlock(ESTEAMSTAT_HWACHAKILLS, 99, ACHIEVEMENT_SPECIAL_HWATCH_OUT);

	mov	edx, DWORD PTR $T231059[ebp]
	mov	DWORD PTR tv410[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv410[ebp], eax
	push	163					; 000000a3H
	push	99					; 00000063H
	push	131					; 00000083H
	mov	ecx, DWORD PTR tv410[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv410[ebp]
	mov	eax, DWORD PTR [edx+848]
	call	eax
$LN1@ApplyPostC:

; 3748 : 		}
; 3749 : 
; 3750 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _szUnitType$222876[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN11@ApplyPostC:

; 3751 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z$0:
	lea	ecx, DWORD PTR _yieldString$222865[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z$1:
	lea	ecx, DWORD PTR _szUnitType$222876[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z$2:
	mov	eax, DWORD PTR $T230870[ebp]
	and	eax, 1
	je	$LN28@ApplyPostC
	and	DWORD PTR $T230870[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T230861[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN28@ApplyPostC:
	ret	0
__unwindfunclet$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z$3:
	mov	eax, DWORD PTR $T230870[ebp]
	and	eax, 2
	je	$LN31@ApplyPostC
	and	DWORD PTR $T230870[ebp], -3		; fffffffdH
	lea	ecx, DWORD PTR $T230865[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN31@ApplyPostC:
	ret	0
__unwindfunclet$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z$4:
	lea	ecx, DWORD PTR _szLoserUnitType$222896[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-596]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ApplyPostCombatTraitEffects@CvUnitCombat@@KAXPAVCvUnit@@0@Z ENDP ; CvUnitCombat::ApplyPostCombatTraitEffects
PUBLIC	??_C@_0CH@NDAFPEL@?$FLCOLOR_YELLOW?$FN?$CL?$CFd?$FLENDCOLOR?$FN?$FLICON@ ; `string'
PUBLIC	__real@40400000
PUBLIC	__$ArrayPad$
EXTRN	?GetCityAttackPlunderModifier@CvUnit@@QBEHXZ:PROC ; CvUnit::GetCityAttackPlunderModifier
;	COMDAT ??_C@_0CH@NDAFPEL@?$FLCOLOR_YELLOW?$FN?$CL?$CFd?$FLENDCOLOR?$FN?$FLICON@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CH@NDAFPEL@?$FLCOLOR_YELLOW?$FN?$CL?$CFd?$FLENDCOLOR?$FN?$FLICON@ DB '['
	DB	'COLOR_YELLOW]+%d[ENDCOLOR][ICON_GOLD]', 00H	; `string'
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ApplyPostCityCombatEffects@CvUnitCombat@@KAXPAVCvUnit@@PAVCvCity@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplyPostCityCombatEffects@CvUnitCombat@@KAXPAVCvUnit@@PAVCvCity@@H@Z$0
__ehfuncinfo$?ApplyPostCityCombatEffects@CvUnitCombat@@KAXPAVCvUnit@@PAVCvCity@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ApplyPostCityCombatEffects@CvUnitCombat@@KAXPAVCvUnit@@PAVCvCity@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcombat.cpp
xdata$x	ENDS
;	COMDAT ?ApplyPostCityCombatEffects@CvUnitCombat@@KAXPAVCvUnit@@PAVCvCity@@H@Z
_TEXT	SEGMENT
tv164 = -380						; size = 4
tv194 = -376						; size = 4
$T231163 = -372						; size = 4
$T231154 = -368						; size = 4
$T231145 = -364						; size = 4
$T231141 = -360						; size = 4
$T231132 = -356						; size = 4
$T231128 = -352						; size = 4
$T231116 = -348						; size = 4
$T231107 = -344						; size = 4
$T231098 = -340						; size = 4
$T231094 = -336						; size = 4
$T231085 = -332						; size = 4
$T231076 = -328						; size = 4
_text$222918 = -324					; size = 256
_iDeduction$222915 = -64				; size = 4
_kCityPlayer$222914 = -60				; size = 4
_iGoldPlundered$222912 = -56				; size = 4
_fDelay$ = -52						; size = 4
_iPlunderModifier$ = -48				; size = 4
_colorString$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pkAttacker$ = 8					; size = 4
_pkDefender$ = 12					; size = 4
_iAttackerDamageInflicted$ = 16				; size = 4
?ApplyPostCityCombatEffects@CvUnitCombat@@KAXPAVCvUnit@@PAVCvCity@@H@Z PROC ; CvUnitCombat::ApplyPostCityCombatEffects, COMDAT

; 3754 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ApplyPostCityCombatEffects@CvUnitCombat@@KAXPAVCvUnit@@PAVCvCity@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 368				; 00000170H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 3755 : 	CvString colorString;

	lea	ecx, DWORD PTR _colorString$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3756 : 	int iPlunderModifier;
; 3757 : 	float fDelay = GC.getPOST_COMBAT_TEXT_DELAY() * 3;

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8040
	movss	DWORD PTR $T231085[ebp], xmm0
	movss	xmm0, DWORD PTR $T231085[ebp]
	mulss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _fDelay$[ebp], xmm0

; 3758 : 	iPlunderModifier = pkAttacker->GetCityAttackPlunderModifier();

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	call	?GetCityAttackPlunderModifier@CvUnit@@QBEHXZ ; CvUnit::GetCityAttackPlunderModifier
	mov	DWORD PTR _iPlunderModifier$[ebp], eax

; 3759 : 	if(iPlunderModifier > 0)

	cmp	DWORD PTR _iPlunderModifier$[ebp], 0
	jle	$LN1@ApplyPostC@2

; 3760 : 	{
; 3761 : 		int iGoldPlundered = iAttackerDamageInflicted * iPlunderModifier;

	mov	eax, DWORD PTR _iAttackerDamageInflicted$[ebp]
	imul	eax, DWORD PTR _iPlunderModifier$[ebp]
	mov	DWORD PTR _iGoldPlundered$222912[ebp], eax

; 3762 : 		iGoldPlundered /= 100;

	mov	eax, DWORD PTR _iGoldPlundered$222912[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iGoldPlundered$222912[ebp], eax

; 3763 : 
; 3764 : 		if(iGoldPlundered > 0)

	cmp	DWORD PTR _iGoldPlundered$222912[ebp], 0
	jle	$LN1@ApplyPostC@2

; 3765 : 		{
; 3766 : 			GET_PLAYER(pkAttacker->getOwner()).GetTreasury()->ChangeGold(iGoldPlundered);

	mov	edx, DWORD PTR _pkAttacker$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T231094[ebp], eax
	mov	ecx, DWORD PTR $T231094[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T231098[ebp], ecx
	mov	edx, DWORD PTR _iGoldPlundered$222912[ebp]
	push	edx
	mov	ecx, DWORD PTR $T231098[ebp]
	call	?GetTreasury@CvPlayer@@QBEPAVCvTreasury@@XZ ; CvPlayer::GetTreasury
	mov	ecx, eax
	call	?ChangeGold@CvTreasury@@QAEXH@Z		; CvTreasury::ChangeGold

; 3767 : 
; 3768 : 			CvPlayer& kCityPlayer = GET_PLAYER(pkDefender->getOwner());

	mov	eax, DWORD PTR _pkDefender$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T231107[ebp], ecx
	mov	edx, DWORD PTR $T231107[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kCityPlayer$222914[ebp], edx

; 3769 : 			int iDeduction = min(iGoldPlundered, kCityPlayer.GetTreasury()->GetGold());

	mov	ecx, DWORD PTR _kCityPlayer$222914[ebp]
	call	?GetTreasury@CvPlayer@@QBEPAVCvTreasury@@XZ ; CvPlayer::GetTreasury
	mov	ecx, eax
	call	?GetGold@CvTreasury@@QBEHXZ		; CvTreasury::GetGold
	mov	DWORD PTR $T231076[ebp], eax
	mov	eax, DWORD PTR $T231076[ebp]
	cmp	eax, DWORD PTR _iGoldPlundered$222912[ebp]
	jge	SHORT $LN26@ApplyPostC@2
	lea	ecx, DWORD PTR $T231076[ebp]
	mov	DWORD PTR tv194[ebp], ecx
	jmp	SHORT $LN27@ApplyPostC@2
$LN26@ApplyPostC@2:
	lea	edx, DWORD PTR _iGoldPlundered$222912[ebp]
	mov	DWORD PTR tv194[ebp], edx
$LN27@ApplyPostC@2:
	mov	eax, DWORD PTR tv194[ebp]
	mov	DWORD PTR $T231116[ebp], eax
	mov	ecx, DWORD PTR $T231116[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _iDeduction$222915[ebp], edx

; 3770 : 			kCityPlayer.GetTreasury()->ChangeGold(-iDeduction);

	mov	eax, DWORD PTR _iDeduction$222915[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _kCityPlayer$222914[ebp]
	call	?GetTreasury@CvPlayer@@QBEPAVCvTreasury@@XZ ; CvPlayer::GetTreasury
	mov	ecx, eax
	call	?ChangeGold@CvTreasury@@QAEXH@Z		; CvTreasury::ChangeGold

; 3771 : 
; 3772 : 			if(pkAttacker->getOwner() == GC.getGame().getActivePlayer())

	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T231128[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T231132[ebp], eax
	mov	ecx, DWORD PTR $T231132[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T231128[ebp], eax
	jne	$LN1@ApplyPostC@2

; 3773 : 			{
; 3774 : 				char text[256] = {0};

	mov	BYTE PTR _text$222918[ebp], 0
	push	255					; 000000ffH
	push	0
	lea	ecx, DWORD PTR _text$222918[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 3775 : 				colorString = "[COLOR_YELLOW]+%d[ENDCOLOR][ICON_GOLD]";

	mov	edx, OFFSET ??_C@_0CH@NDAFPEL@?$FLCOLOR_YELLOW?$FN?$CL?$CFd?$FLENDCOLOR?$FN?$FLICON@
	test	edx, edx
	je	SHORT $LN35@ApplyPostC@2
	push	OFFSET ??_C@_0CH@NDAFPEL@?$FLCOLOR_YELLOW?$FN?$CL?$CFd?$FLENDCOLOR?$FN?$FLICON@
	lea	ecx, DWORD PTR _colorString$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN34@ApplyPostC@2
$LN35@ApplyPostC@2:
	lea	ecx, DWORD PTR _colorString$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN34@ApplyPostC@2:

; 3776 : 				sprintf_s(text, colorString, iGoldPlundered);

	lea	ecx, DWORD PTR _colorString$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T231141[ebp], eax
	mov	eax, DWORD PTR _iGoldPlundered$222912[ebp]
	push	eax
	mov	ecx, DWORD PTR $T231141[ebp]
	push	ecx
	lea	edx, DWORD PTR _text$222918[ebp]
	push	edx
	call	??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ	; sprintf_s<256>
	add	esp, 12					; 0000000cH

; 3777 : 				GC.GetEngineUserInterface()->AddPopupText(pkAttacker->getX(), pkAttacker->getY(), text, fDelay);

	mov	eax, DWORD PTR $T231145[ebp]
	mov	DWORD PTR tv164[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv164[ebp], ecx
	mov	edx, DWORD PTR _pkAttacker$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR $T231154[ebp], eax
	mov	ecx, DWORD PTR _pkAttacker$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR $T231163[ebp], edx
	push	ecx
	fld	DWORD PTR _fDelay$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _text$222918[ebp]
	push	eax
	mov	ecx, DWORD PTR $T231154[ebp]
	push	ecx
	mov	edx, DWORD PTR $T231163[ebp]
	push	edx
	mov	eax, DWORD PTR tv164[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv164[ebp]
	mov	eax, DWORD PTR [edx+184]
	call	eax
$LN1@ApplyPostC@2:

; 3778 : 			}
; 3779 : 		}
; 3780 : 	}
; 3781 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _colorString$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ApplyPostCityCombatEffects@CvUnitCombat@@KAXPAVCvUnit@@PAVCvCity@@H@Z$0:
	lea	ecx, DWORD PTR _colorString$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?ApplyPostCityCombatEffects@CvUnitCombat@@KAXPAVCvUnit@@PAVCvCity@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-372]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ApplyPostCityCombatEffects@CvUnitCombat@@KAXPAVCvUnit@@PAVCvCity@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ApplyPostCityCombatEffects@CvUnitCombat@@KAXPAVCvUnit@@PAVCvCity@@H@Z ENDP ; CvUnitCombat::ApplyPostCityCombatEffects
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
;	COMDAT ??1?$FObjectHandle@VCvUnit@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ PROC		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		if(m_target) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@FObjectHan

; 148  : 		{
; 149  : 			m_target->getDestructionNotification().removeTarget(*this);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN2@FObjectHan:

; 150  : 		}
; 151  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ ENDP		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_inst$231188 = -8					; size = 4
$T231183 = -4						; size = 4
??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ PROC		; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>, COMDAT
; _this$ = ecx

; 720  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 721  : 		delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T231183[ebp], ecx
	cmp	DWORD PTR $T231183[ebp], 0
	je	SHORT $LN1@auto_ptr
	mov	edx, DWORD PTR $T231183[ebp]
	mov	DWORD PTR _inst$231188[ebp], edx
	mov	eax, DWORD PTR _inst$231188[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$231188[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN1@auto_ptr:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ ENDP		; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$auto_ptr@VICvCity1@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_inst$231196 = -8					; size = 4
$T231191 = -4						; size = 4
??1?$auto_ptr@VICvCity1@@@std@@QAE@XZ PROC		; std::auto_ptr<ICvCity1>::~auto_ptr<ICvCity1>, COMDAT
; _this$ = ecx

; 720  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 721  : 		delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T231191[ebp], ecx
	cmp	DWORD PTR $T231191[ebp], 0
	je	SHORT $LN1@auto_ptr@2
	mov	edx, DWORD PTR $T231191[ebp]
	mov	DWORD PTR _inst$231196[ebp], edx
	mov	eax, DWORD PTR _inst$231196[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$231196[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN1@auto_ptr@2:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@VICvCity1@@@std@@QAE@XZ ENDP		; std::auto_ptr<ICvCity1>::~auto_ptr<ICvCity1>
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UIDInfo@@$00@@QAE@XZ		; BaseVector<IDInfo,1>::~BaseVector<IDInfo,1>
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T231221 = -24						; size = 4
$T231220 = -20						; size = 4
_i$231212 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<IDInfo,25,1,297,0>::~FStaticVector<IDInfo,25,1,297,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T231221[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T231220[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN5@FStaticVec
	xor	edx, edx
	je	SHORT $LN5@FStaticVec
	mov	DWORD PTR _i$231212[ebp], 0
	jmp	SHORT $LN10@FStaticVec
$LN9@FStaticVec:
	mov	eax, DWORD PTR _i$231212[ebp]
	add	eax, 1
	mov	DWORD PTR _i$231212[ebp], eax
$LN10@FStaticVec:
	mov	ecx, DWORD PTR _i$231212[ebp]
	cmp	ecx, DWORD PTR $T231221[ebp]
	jae	SHORT $LN5@FStaticVec
	jmp	SHORT $LN9@FStaticVec
$LN5@FStaticVec:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T231220[ebp], edx
	je	SHORT $LN1@FStaticVec
	mov	eax, DWORD PTR $T231220[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UIDInfo@@$00@@QAE@XZ	; BaseVector<IDInfo,1>::~BaseVector<IDInfo,1>
__ehhandler$??1?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<IDInfo,25,1,297,0>::~FStaticVector<IDInfo,25,1,297,0>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_inst$231237 = -8					; size = 4
$T231233 = -4						; size = 4
??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ PROC		; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>, COMDAT
; _this$ = ecx

; 720  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 721  : 		delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T231233[ebp], ecx
	cmp	DWORD PTR $T231233[ebp], 0
	je	SHORT $LN1@auto_ptr@3
	mov	edx, DWORD PTR $T231233[ebp]
	mov	DWORD PTR _inst$231237[ebp], edx
	mov	eax, DWORD PTR _inst$231237[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$231237[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN1@auto_ptr@3:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ ENDP		; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$auto_ptr@VICvCombatInfo1@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_inst$231245 = -8					; size = 4
$T231241 = -4						; size = 4
??1?$auto_ptr@VICvCombatInfo1@@@std@@QAE@XZ PROC	; std::auto_ptr<ICvCombatInfo1>::~auto_ptr<ICvCombatInfo1>, COMDAT
; _this$ = ecx

; 720  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 721  : 		delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T231241[ebp], ecx
	cmp	DWORD PTR $T231241[ebp], 0
	je	SHORT $LN1@auto_ptr@4
	mov	edx, DWORD PTR $T231241[ebp]
	mov	DWORD PTR _inst$231245[ebp], edx
	mov	eax, DWORD PTR _inst$231245[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$231245[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN1@auto_ptr@4:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@VICvCombatInfo1@@@std@@QAE@XZ ENDP	; std::auto_ptr<ICvCombatInfo1>::~auto_ptr<ICvCombatInfo1>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
_TEXT	ENDS
;	COMDAT ?getAt@?$FFastSmallFixedList@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAEPAUIDInfo@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T231252 = -4						; size = 4
_iIndex$ = 8						; size = 4
?getAt@?$FFastSmallFixedList@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAEPAUIDInfo@@H@Z PROC ; FFastSmallFixedList<IDInfo,25,1,297,0>::getAt, COMDAT
; _this$ = ecx

; 880  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 881  :         if ( (UINT)iIndex < mVec.size() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T231252[ebp], ecx
	mov	edx, DWORD PTR _iIndex$[ebp]
	cmp	edx, DWORD PTR $T231252[ebp]
	jae	SHORT $LN2@getAt

; 882  : #endif
; 883  : 	    {
; 884  : 		    return &mVec[ iIndex ];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _iIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	jmp	SHORT $LN3@getAt

; 885  : 	    }
; 886  : 	    else

	jmp	SHORT $LN3@getAt
$LN2@getAt:

; 887  : 	    {
; 888  : 		    return NULL;

	xor	eax, eax
$LN3@getAt:

; 889  : 	    }
; 890  :     };

	mov	esp, ebp
	pop	ebp
	ret	4
?getAt@?$FFastSmallFixedList@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAEPAUIDInfo@@H@Z ENDP ; FFastSmallFixedList<IDInfo,25,1,297,0>::getAt
_TEXT	ENDS
PUBLIC	??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ ; `string'
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
CONST	SEGMENT
??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ DB 'd:\sources\'
	DB	'lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\FF'
	DB	'astVector.h', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T231268 = -20						; size = 4
_pRet$231264 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<IDInfo,25,1,297,0>::FStaticVector<IDInfo,25,1,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 25			; 00000019H

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T231268[ebp], edx
	cmp	DWORD PTR $T231268[ebp], 25		; 00000019H
	jbe	SHORT $LN7@FStaticVec@2
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T231268[ebp]
	shl	eax, 3
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$231264[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T231268[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec@2
$LN7@FStaticVec@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$231264[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 25			; 00000019H
$LN8@FStaticVec@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$231264[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UIDInfo@@$00@@QAE@XZ	; BaseVector<IDInfo,1>::~BaseVector<IDInfo,1>
__ehhandler$??0?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<IDInfo,25,1,297,0>::FStaticVector<IDInfo,25,1,297,0>
PUBLIC	?GrowSize@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<IDInfo,25,1,297,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAEIABUIDInfo@@@Z
_TEXT	SEGMENT
tv141 = -52						; size = 4
tv132 = -48						; size = 4
_this$ = -44						; size = 4
$T231277 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAEIABUIDInfo@@@Z PROC ; FStaticVector<IDInfo,25,1,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+212], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN35@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<IDInfo,25,1,297,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN35@push_back:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T231277[ebp], ecx
	cmp	DWORD PTR $T231277[ebp], 0
	je	SHORT $LN4@push_back
	mov	edx, DWORD PTR _element$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T231277[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T231277[ebp]
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN5@push_back
$LN4@push_back:
	mov	DWORD PTR tv132[ebp], 0
$LN5@push_back:

; 681  : 		return m_uiCurrSize++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv141[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR tv141[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAEIABUIDInfo@@@Z ENDP ; FStaticVector<IDInfo,25,1,297,0>::push_back
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?resize@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
_uiNewSize$ = 8						; size = 4
?resize@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAEXI@Z PROC ; FStaticVector<IDInfo,25,1,297,0>::resize, COMDAT
; _this$ = ecx

; 666  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 667  : 		if( m_uiCurrMaxSize < uiNewSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _uiNewSize$[ebp]
	jae	SHORT $LN1@resize

; 668  : 			GrowSize(uiNewSize);

	mov	edx, DWORD PTR _uiNewSize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<IDInfo,25,1,297,0>::GrowSize
$LN1@resize:

; 669  : 		}
; 670  : 		m_uiCurrSize = uiNewSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 671  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@QAEXI@Z ENDP ; FStaticVector<IDInfo,25,1,297,0>::resize
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
;	COMDAT ?GrowSize@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv179 = -44						; size = 4
_this$ = -40						; size = 4
$T231393 = -36						; size = 4
$T231392 = -32						; size = 4
_i$231387 = -28						; size = 4
$T231368 = -24						; size = 4
_pRet$231364 = -20					; size = 4
$T231359 = -16						; size = 4
_i$223036 = -12						; size = 4
_uiNewSize$223028 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<IDInfo,25,1,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$223028[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$223028[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize
$LN6@GrowSize:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$223028[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize
$LN7@GrowSize:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T231368[ebp], ecx
	cmp	DWORD PTR $T231368[ebp], 25		; 00000019H
	jbe	SHORT $LN15@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T231368[ebp]
	shl	edx, 3
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$231364[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T231368[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN16@GrowSize
$LN15@GrowSize:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$231364[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 25			; 00000019H
$LN16@GrowSize:
	mov	ecx, DWORD PTR _pRet$231364[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@GrowSize

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize
$LN5@GrowSize:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$223036[ebp], 0
	jmp	SHORT $LN3@GrowSize
$LN2@GrowSize:
	mov	edx, DWORD PTR _i$223036[ebp]
	add	edx, 1
	mov	DWORD PTR _i$223036[ebp], edx
$LN3@GrowSize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$223036[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$223036[ebp]
	mov	eax, DWORD PTR _pTemp$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T231359[ebp], ecx
	cmp	DWORD PTR $T231359[ebp], 0
	je	SHORT $LN12@GrowSize
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$223036[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	ecx, DWORD PTR $T231359[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T231359[ebp]
	mov	DWORD PTR tv179[ebp], edx
	jmp	SHORT $LN13@GrowSize
$LN12@GrowSize:
	mov	DWORD PTR tv179[ebp], 0
$LN13@GrowSize:
	jmp	SHORT $LN2@GrowSize
$LN4@GrowSize:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T231393[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T231392[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN21@GrowSize
	xor	edx, edx
	je	SHORT $LN21@GrowSize
	mov	DWORD PTR _i$231387[ebp], 0
	jmp	SHORT $LN26@GrowSize
$LN25@GrowSize:
	mov	eax, DWORD PTR _i$231387[ebp]
	add	eax, 1
	mov	DWORD PTR _i$231387[ebp], eax
$LN26@GrowSize:
	mov	ecx, DWORD PTR _i$231387[ebp]
	cmp	ecx, DWORD PTR $T231393[ebp]
	jae	SHORT $LN21@GrowSize
	jmp	SHORT $LN25@GrowSize
$LN21@GrowSize:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T231392[ebp], edx
	je	SHORT $LN22@GrowSize
	mov	eax, DWORD PTR $T231392[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN22@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [ecx], edx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+212], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@UIDInfo@@$0BJ@$00$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<IDInfo,25,1,297,0>::GrowSize
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z:PROC
EXTRN	__imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z$1
__ehfuncinfo$??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z
_TEXT	SEGMENT
$T231401 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_arg3$ = 24						; size = 4
_arg4$ = 28						; size = 4
??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z PROC ; GetLocalizedText<char const *,char const *,int,int>, COMDAT

; 540  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T231401[ebp], 0

; 541  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 542  : 	text << arg1 << arg2 << arg3 << arg4;

	mov	edx, DWORD PTR _arg4$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 543  : 
; 544  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 545  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 546  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 547  : 	str.assign(szComposedString, bytes);

	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _szComposedString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 548  : 	return str;

	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T231401[ebp]
	or	edx, 1
	mov	DWORD PTR $T231401[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 549  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z$2:
	mov	eax, DWORD PTR $T231401[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz
	and	DWORD PTR $T231401[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz:
	ret	0
__ehhandler$??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDPBDHH@@YA?AVCvString@@PBDABQBD1ABH2@Z ENDP ; GetLocalizedText<char const *,char const *,int,int>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z$1
__ehfuncinfo$??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z
_TEXT	SEGMENT
$T231427 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_arg3$ = 24						; size = 4
_arg4$ = 28						; size = 4
_arg5$ = 32						; size = 4
??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z PROC ; GetLocalizedText<char const *,int,int,char const *,char const *>, COMDAT

; 553  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T231427[ebp], 0

; 554  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 555  : 	text << arg1 << arg2 << arg3 << arg4 << arg5;

	mov	edx, DWORD PTR _arg5$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg4$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg3$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 556  : 
; 557  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 558  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 559  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 560  : 	str.assign(szComposedString, bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szComposedString$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 561  : 	return str;

	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T231427[ebp]
	or	eax, 1
	mov	DWORD PTR $T231427[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 562  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z$2:
	mov	eax, DWORD PTR $T231427[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@2
	and	DWORD PTR $T231427[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@2:
	ret	0
__ehhandler$??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDHHPBDPBD@@YA?AVCvString@@PBDABQBDABH211@Z ENDP ; GetLocalizedText<char const *,int,int,char const *,char const *>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z$1
__ehfuncinfo$??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z
_TEXT	SEGMENT
$T231453 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_arg3$ = 24						; size = 4
??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z PROC ; GetLocalizedText<char const *,int,char const *>, COMDAT

; 527  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T231453[ebp], 0

; 528  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 529  : 	text << arg1 << arg2 << arg3;

	mov	edx, DWORD PTR _arg3$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 530  : 
; 531  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 532  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	eax, DWORD PTR _bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 533  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 534  : 	str.assign(szComposedString, bytes);

	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szComposedString$[ebp]
	push	edx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 535  : 	return str;

	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T231453[ebp]
	or	ecx, 1
	mov	DWORD PTR $T231453[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 536  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z$2:
	mov	eax, DWORD PTR $T231453[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@3
	and	DWORD PTR $T231453[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@3:
	ret	0
__ehhandler$??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDHPBD@@YA?AVCvString@@PBDABQBDABH1@Z ENDP ; GetLocalizedText<char const *,int,char const *>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z$1
__ehfuncinfo$??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z
_TEXT	SEGMENT
$T231479 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_arg3$ = 24						; size = 4
??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z PROC ; GetLocalizedText<char const *,char const *,int>, COMDAT

; 527  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T231479[ebp], 0

; 528  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 529  : 	text << arg1 << arg2 << arg3;

	mov	edx, DWORD PTR _arg3$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 530  : 
; 531  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 532  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	eax, DWORD PTR _bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 533  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 534  : 	str.assign(szComposedString, bytes);

	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szComposedString$[ebp]
	push	edx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 535  : 	return str;

	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T231479[ebp]
	or	ecx, 1
	mov	DWORD PTR $T231479[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 536  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z$2:
	mov	eax, DWORD PTR $T231479[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@4
	and	DWORD PTR $T231479[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@4:
	ret	0
__ehhandler$??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDPBDH@@YA?AVCvString@@PBDABQBD1ABH@Z ENDP ; GetLocalizedText<char const *,char const *,int>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z$1
__ehfuncinfo$??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z
_TEXT	SEGMENT
$T231505 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_arg3$ = 24						; size = 4
_arg4$ = 28						; size = 4
??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z PROC ; GetLocalizedText<char const *,char const *,char const *,int>, COMDAT

; 540  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T231505[ebp], 0

; 541  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 542  : 	text << arg1 << arg2 << arg3 << arg4;

	mov	edx, DWORD PTR _arg4$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 543  : 
; 544  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 545  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 546  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 547  : 	str.assign(szComposedString, bytes);

	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _szComposedString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 548  : 	return str;

	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T231505[ebp]
	or	edx, 1
	mov	DWORD PTR $T231505[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 549  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z$2:
	mov	eax, DWORD PTR $T231505[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@5
	and	DWORD PTR $T231505[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@5:
	ret	0
__ehhandler$??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDPBDPBDH@@YA?AVCvString@@PBDABQBD11ABH@Z ENDP ; GetLocalizedText<char const *,char const *,char const *,int>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z$1
__ehfuncinfo$??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z
_TEXT	SEGMENT
$T231531 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_arg3$ = 24						; size = 4
_arg4$ = 28						; size = 4
??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z PROC ; GetLocalizedText<char const *,int,char const *,int>, COMDAT

; 540  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T231531[ebp], 0

; 541  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 542  : 	text << arg1 << arg2 << arg3 << arg4;

	mov	edx, DWORD PTR _arg4$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 543  : 
; 544  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 545  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 546  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 547  : 	str.assign(szComposedString, bytes);

	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _szComposedString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 548  : 	return str;

	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T231531[ebp]
	or	edx, 1
	mov	DWORD PTR $T231531[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 549  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z$2:
	mov	eax, DWORD PTR $T231531[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@6
	and	DWORD PTR $T231531[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@6:
	ret	0
__ehhandler$??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDHPBDH@@YA?AVCvString@@PBDABQBDABH12@Z ENDP ; GetLocalizedText<char const *,int,char const *,int>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$1
__ehfuncinfo$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z
_TEXT	SEGMENT
$T231557 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z PROC ; GetLocalizedText<char const *,char const *>, COMDAT

; 514  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T231557[ebp], 0

; 515  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 516  : 	text << arg1 << arg2;

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 517  : 
; 518  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 519  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 520  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 521  : 	str.assign(szComposedString, bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szComposedString$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 522  : 	return str;

	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T231557[ebp]
	or	eax, 1
	mov	DWORD PTR $T231557[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 523  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$2:
	mov	eax, DWORD PTR $T231557[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@7
	and	DWORD PTR $T231557[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@7:
	ret	0
__ehhandler$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z ENDP ; GetLocalizedText<char const *,char const *>
EXTRN	__imp_?PushArgument@String@Localization@@QAE_NPBD@Z:PROC
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvlocalization\include\cvlocalization.h
;	COMDAT ??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_val$ = 12						; size = 4
??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z PROC	; operator<<<char const *>, COMDAT

; 490  : {

	push	ebp
	mov	ebp, esp

; 491  : 	s.PushArgument(val);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 492  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 493  : }

	pop	ebp
	ret	0
??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ENDP	; operator<<<char const *>
_TEXT	ENDS
EXTRN	__imp_?PushArgument@String@Localization@@QAE_NH@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_val$ = 12						; size = 4
??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z PROC	; operator<<<int>, COMDAT

; 490  : {

	push	ebp
	mov	ebp, esp

; 491  : 	s.PushArgument(val);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NH@Z

; 492  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 493  : }

	pop	ebp
	ret	0
??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ENDP	; operator<<<int>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z$1
__ehfuncinfo$??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z
_TEXT	SEGMENT
$T231587 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z PROC ; GetLocalizedText<char const *,int>, COMDAT

; 514  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T231587[ebp], 0

; 515  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 516  : 	text << arg1 << arg2;

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 517  : 
; 518  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 519  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 520  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 521  : 	str.assign(szComposedString, bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szComposedString$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 522  : 	return str;

	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T231587[ebp]
	or	eax, 1
	mov	DWORD PTR $T231587[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 523  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z$2:
	mov	eax, DWORD PTR $T231587[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@8
	and	DWORD PTR $T231587[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@8:
	ret	0
__ehhandler$??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDH@@YA?AVCvString@@PBDABQBDABH@Z ENDP ; GetLocalizedText<char const *,int>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z$1
__ehfuncinfo$??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z
_TEXT	SEGMENT
$T231613 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_arg3$ = 24						; size = 4
_arg4$ = 28						; size = 4
??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z PROC ; GetLocalizedText<char const *,int,char const *,char const *>, COMDAT

; 540  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T231613[ebp], 0

; 541  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 542  : 	text << arg1 << arg2 << arg3 << arg4;

	mov	edx, DWORD PTR _arg4$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 543  : 
; 544  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 545  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 546  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 547  : 	str.assign(szComposedString, bytes);

	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _szComposedString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 548  : 	return str;

	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T231613[ebp]
	or	edx, 1
	mov	DWORD PTR $T231613[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 549  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z$2:
	mov	eax, DWORD PTR $T231613[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@9
	and	DWORD PTR $T231613[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@9:
	ret	0
__ehhandler$??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDHPBDPBD@@YA?AVCvString@@PBDABQBDABH11@Z ENDP ; GetLocalizedText<char const *,int,char const *,char const *>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z$1
__ehfuncinfo$??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z
_TEXT	SEGMENT
$T231639 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_arg3$ = 24						; size = 4
_arg4$ = 28						; size = 4
??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z PROC ; GetLocalizedText<char const *,char const *,char const *,char const *>, COMDAT

; 540  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T231639[ebp], 0

; 541  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 542  : 	text << arg1 << arg2 << arg3 << arg4;

	mov	edx, DWORD PTR _arg4$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 543  : 
; 544  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 545  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 546  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 547  : 	str.assign(szComposedString, bytes);

	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _szComposedString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 548  : 	return str;

	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T231639[ebp]
	or	edx, 1
	mov	DWORD PTR $T231639[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 549  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z$2:
	mov	eax, DWORD PTR $T231639[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@10
	and	DWORD PTR $T231639[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@10:
	ret	0
__ehhandler$??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDPBDPBDPBD@@YA?AVCvString@@PBDABQBD111@Z ENDP ; GetLocalizedText<char const *,char const *,char const *,char const *>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z$1
__ehfuncinfo$??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z
_TEXT	SEGMENT
$T231665 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_arg3$ = 24						; size = 4
_arg4$ = 28						; size = 4
_arg5$ = 32						; size = 4
??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z PROC ; GetLocalizedText<char const *,char const *,char const *,int,char const *>, COMDAT

; 553  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T231665[ebp], 0

; 554  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 555  : 	text << arg1 << arg2 << arg3 << arg4 << arg5;

	mov	edx, DWORD PTR _arg5$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg4$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg3$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 556  : 
; 557  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 558  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 559  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 560  : 	str.assign(szComposedString, bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szComposedString$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 561  : 	return str;

	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T231665[ebp]
	or	eax, 1
	mov	DWORD PTR $T231665[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 562  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z$2:
	mov	eax, DWORD PTR $T231665[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@11
	and	DWORD PTR $T231665[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@11:
	ret	0
__ehhandler$??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDPBDPBDHPBD@@YA?AVCvString@@PBDABQBD11ABH1@Z ENDP ; GetLocalizedText<char const *,char const *,char const *,int,char const *>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$1
__ehfuncinfo$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z
_TEXT	SEGMENT
$T231691 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z PROC	; GetLocalizedText<char const *>, COMDAT

; 501  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T231691[ebp], 0

; 502  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 503  : 	text << arg1;

	lea	edx, DWORD PTR _arg1$[ebp]
	push	edx
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 504  : 
; 505  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 506  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 507  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 508  : 	str.assign(szComposedString, bytes);

	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _szComposedString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 509  : 	return str;

	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T231691[ebp]
	or	edx, 1
	mov	DWORD PTR $T231691[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 510  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$2:
	mov	eax, DWORD PTR $T231691[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@12
	and	DWORD PTR $T231691[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@12:
	ret	0
__ehhandler$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z ENDP	; GetLocalizedText<char const *>
EXTRN	__imp__vsprintf_s:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdio.h
;	COMDAT ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Format$ = 12						; size = 4
??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ PROC		; sprintf_s<256>, COMDAT

; 322  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(int, sprintf_s, vsprintf_s, char, _Dest, _In_z_ _Printf_format_string_ const char *, _Format)

	push	ebp
	mov	ebp, esp
	push	ecx
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	256					; 00000100H
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	DWORD PTR __imp__vsprintf_s
	add	esp, 16					; 00000010H
	mov	esp, ebp
	pop	ebp
	ret	0
??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ENDP		; sprintf_s<256>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
_TEXT	ENDS
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstructs.h
_TEXT	ENDS
;	COMDAT ??0CvCombatMemberEntry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvCombatMemberEntry@@QAE@XZ PROC			; CvCombatMemberEntry::CvCombatMemberEntry, COMDAT
; _this$ = ecx

; 101  : 	CvCombatMemberEntry() : m_ePlayer(NO_PLAYER), m_iID(-1), m_bfFlags(0), m_iDamage(0), m_iFinalDamage(0), m_iMaxHitPoints(0), m_eCombatType(NO_UNITCOMBAT), m_eEra(NO_ERA), m_iX(0), m_iY(0), m_uiWeaponType(0), m_fWeaponOption(0.f) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], -1
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+8], dx
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+10], cx
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+12], ax
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+14], dx
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+16], cx
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+18], ax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvCombatMemberEntry@@QAE@XZ ENDP			; CvCombatMemberEntry::CvCombatMemberEntry
_TEXT	ENDS
EXTRN	?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B:DWORD ; CvPreGame::sr_TeamTypes
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvpregame.h
;	COMDAT ?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPreGame::teamType, COMDAT

; 298  : {

	push	ebp
	mov	ebp, esp

; 299  : 	if(p >= 0 && p < MAX_PLAYERS)

	cmp	DWORD PTR _p$[ebp], 0
	jl	SHORT $LN1@teamType
	cmp	DWORD PTR _p$[ebp], 64			; 00000040H
	jge	SHORT $LN1@teamType

; 300  : 		return sr_TeamTypes[p];

	mov	eax, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN2@teamType
$LN1@teamType:

; 301  : 	return NO_TEAM;

	or	eax, -1
$LN2@teamType:

; 302  : }

	pop	ebp
	ret	0
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPreGame::teamType
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvplot.h
_TEXT	ENDS
;	COMDAT ?isCity@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T231728 = -4						; size = 4
?isCity@CvPlot@@QBE_NXZ PROC				; CvPlot::isCity, COMDAT
; _this$ = ecx

; 244  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 245  : 		if((m_plotCity.eOwner >= 0) && m_plotCity.eOwner < MAX_PLAYERS)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jl	SHORT $LN1@isCity
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 64			; 00000040H
	jge	SHORT $LN1@isCity

; 246  : 			return (GET_PLAYER((PlayerTypes)m_plotCity.eOwner).getCity(m_plotCity.iID)) != NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T231728[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	ecx, DWORD PTR $T231728[ebp]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	neg	eax
	sbb	eax, eax
	neg	eax
	jmp	SHORT $LN2@isCity
$LN1@isCity:

; 247  : 
; 248  : 		return false;

	xor	al, al
$LN2@isCity:

; 249  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?isCity@CvPlot@@QBE_NXZ ENDP				; CvPlot::isCity
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T231734 = -4						; size = 4
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ PROC		; CvPlot::getPlotCity, COMDAT
; _this$ = ecx

; 532  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 		if((m_plotCity.eOwner >= 0) && m_plotCity.eOwner < MAX_PLAYERS)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jl	SHORT $LN1@getPlotCit
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 64			; 00000040H
	jge	SHORT $LN1@getPlotCit

; 534  : 			return (GET_PLAYER((PlayerTypes)m_plotCity.eOwner).getCity(m_plotCity.iID));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T231734[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	ecx, DWORD PTR $T231734[ebp]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	jmp	SHORT $LN2@getPlotCit
$LN1@getPlotCit:

; 535  : 
; 536  : 		return NULL;

	xor	eax, eax
$LN2@getPlotCit:

; 537  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ ENDP		; CvPlot::getPlotCity
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
_TEXT	ENDS
;	COMDAT ?coordRange@@YAHHH_N@Z
_TEXT	SEGMENT
_iCoord$ = 8						; size = 4
_iRange$ = 12						; size = 4
_bWrap$ = 16						; size = 1
?coordRange@@YAHHH_N@Z PROC				; coordRange, COMDAT

; 87   : {

	push	ebp
	mov	ebp, esp

; 88   : 	if(bWrap)

	movzx	eax, BYTE PTR _bWrap$[ebp]
	test	eax, eax
	je	SHORT $LN4@coordRange

; 89   : 	{
; 90   : 		if(iCoord < 0)

	cmp	DWORD PTR _iCoord$[ebp], 0
	jge	SHORT $LN3@coordRange

; 91   : 		{
; 92   : 			return (iRange + (iCoord % iRange));

	mov	eax, DWORD PTR _iCoord$[ebp]
	cdq
	idiv	DWORD PTR _iRange$[ebp]
	add	edx, DWORD PTR _iRange$[ebp]
	mov	eax, edx
	jmp	SHORT $LN5@coordRange
	jmp	SHORT $LN4@coordRange
$LN3@coordRange:

; 93   : 		}
; 94   : 		else if(iCoord >= iRange)

	mov	ecx, DWORD PTR _iCoord$[ebp]
	cmp	ecx, DWORD PTR _iRange$[ebp]
	jl	SHORT $LN4@coordRange

; 95   : 		{
; 96   : 			return (iCoord % iRange);

	mov	eax, DWORD PTR _iCoord$[ebp]
	cdq
	idiv	DWORD PTR _iRange$[ebp]
	mov	eax, edx
	jmp	SHORT $LN5@coordRange
$LN4@coordRange:

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return iCoord;

	mov	eax, DWORD PTR _iCoord$[ebp]
$LN5@coordRange:

; 101  : }

	pop	ebp
	ret	0
?coordRange@@YAHHH_N@Z ENDP				; coordRange
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?isPlot@CvMap@@QBEHHH@Z
_TEXT	SEGMENT
tv72 = -16						; size = 4
_this$ = -12						; size = 4
$T231748 = -8						; size = 4
$T231744 = -4						; size = 4
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?isPlot@CvMap@@QBEHHH@Z PROC				; CvMap::isPlot, COMDAT
; _this$ = ecx

; 156  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 157  : #ifdef AUI_WARNING_FIXES
; 158  : 		return ((iX >= 0) && (uint(iX) < getGridWidth()) && (iY >= 0) && (uint(iY) < getGridHeight()));
; 159  : #else
; 160  : 		return ((iX >= 0) && (iX < getGridWidth()) && (iY >= 0) && (iY < getGridHeight()));

	cmp	DWORD PTR _iX$[ebp], 0
	jl	SHORT $LN3@isPlot
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T231744[ebp], ecx
	mov	edx, DWORD PTR _iX$[ebp]
	cmp	edx, DWORD PTR $T231744[ebp]
	jge	SHORT $LN3@isPlot
	cmp	DWORD PTR _iY$[ebp], 0
	jl	SHORT $LN3@isPlot
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T231748[ebp], ecx
	mov	edx, DWORD PTR _iY$[ebp]
	cmp	edx, DWORD PTR $T231748[ebp]
	jge	SHORT $LN3@isPlot
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@isPlot
$LN3@isPlot:
	mov	DWORD PTR tv72[ebp], 0
$LN4@isPlot:
	mov	eax, DWORD PTR tv72[ebp]

; 161  : #endif
; 162  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?isPlot@CvMap@@QBEHHH@Z ENDP				; CvMap::isPlot
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@UIDInfo@@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@UIDInfo@@$00@@QAE@XZ PROC		; BaseVector<IDInfo,1>::~BaseVector<IDInfo,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@UIDInfo@@$00@@QAE@XZ ENDP		; BaseVector<IDInfo,1>::~BaseVector<IDInfo,1>
_TEXT	ENDS
END
