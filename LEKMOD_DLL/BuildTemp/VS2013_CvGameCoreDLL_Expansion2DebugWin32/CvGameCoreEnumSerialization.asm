; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvGameCoreEnumSerialization.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??6@YAAAVFDataStream@@AAV0@ABW4YieldTypes@@@Z	; operator<<
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreenumserialization.cpp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABW4YieldTypes@@@Z
_TEXT	SEGMENT
$T216807 = -4						; size = 4
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABW4YieldTypes@@@Z PROC	; operator<<, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 13   : 	saveTo << static_cast<int>(readFrom);

	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T216807[ebp], ecx
	lea	edx, DWORD PTR $T216807[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 14   : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 15   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABW4YieldTypes@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAW4YieldTypes@@@Z	; operator>>
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAW4YieldTypes@@@Z
_TEXT	SEGMENT
_v$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAW4YieldTypes@@@Z PROC	; operator>>, COMDAT

; 18   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 19   : 	int v;
; 20   : 	loadFrom >> v;

	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 21   : 	writeTo = static_cast<YieldTypes>(v);

	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	DWORD PTR [ecx], edx

; 22   : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 23   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAW4YieldTypes@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	??_C@_0BD@JGLOLBCB@INVALID?5ENUM?5VALUE?$AA@	; `string'
PUBLIC	??_C@_0M@LJBJNLIH@YIELD_FAITH?$AA@		; `string'
PUBLIC	??_C@_0O@KODKFFBP@YIELD_CULTURE?$AA@		; `string'
PUBLIC	??_C@_0O@EBDOPLJI@YIELD_SCIENCE?$AA@		; `string'
PUBLIC	??_C@_0L@JGLOMJON@YIELD_GOLD?$AA@		; `string'
PUBLIC	??_C@_0BB@OAGOPANA@YIELD_PRODUCTION?$AA@	; `string'
PUBLIC	??_C@_0L@KJJIFOAE@YIELD_FOOD?$AA@		; `string'
PUBLIC	??_C@_08BFLLEPHG@NO_YIELD?$AA@			; `string'
PUBLIC	?toString@FSerialization@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABW4YieldTypes@@@Z ; FSerialization::toString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
;	COMDAT ??_C@_0BD@JGLOLBCB@INVALID?5ENUM?5VALUE?$AA@
CONST	SEGMENT
??_C@_0BD@JGLOLBCB@INVALID?5ENUM?5VALUE?$AA@ DB 'INVALID ENUM VALUE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LJBJNLIH@YIELD_FAITH?$AA@
CONST	SEGMENT
??_C@_0M@LJBJNLIH@YIELD_FAITH?$AA@ DB 'YIELD_FAITH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KODKFFBP@YIELD_CULTURE?$AA@
CONST	SEGMENT
??_C@_0O@KODKFFBP@YIELD_CULTURE?$AA@ DB 'YIELD_CULTURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EBDOPLJI@YIELD_SCIENCE?$AA@
CONST	SEGMENT
??_C@_0O@EBDOPLJI@YIELD_SCIENCE?$AA@ DB 'YIELD_SCIENCE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JGLOMJON@YIELD_GOLD?$AA@
CONST	SEGMENT
??_C@_0L@JGLOMJON@YIELD_GOLD?$AA@ DB 'YIELD_GOLD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OAGOPANA@YIELD_PRODUCTION?$AA@
CONST	SEGMENT
??_C@_0BB@OAGOPANA@YIELD_PRODUCTION?$AA@ DB 'YIELD_PRODUCTION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KJJIFOAE@YIELD_FOOD?$AA@
CONST	SEGMENT
??_C@_0L@KJJIFOAE@YIELD_FOOD?$AA@ DB 'YIELD_FOOD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BFLLEPHG@NO_YIELD?$AA@
CONST	SEGMENT
??_C@_08BFLLEPHG@NO_YIELD?$AA@ DB 'NO_YIELD', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?toString@FSerialization@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABW4YieldTypes@@@Z
_TEXT	SEGMENT
tv64 = -8						; size = 4
$T216819 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?toString@FSerialization@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABW4YieldTypes@@@Z PROC ; FSerialization::toString, COMDAT

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR $T216819[ebp], 0

; 29   : 	switch(v)

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	mov	edx, DWORD PTR tv64[ebp]
	add	edx, 1
	mov	DWORD PTR tv64[ebp], edx
	cmp	DWORD PTR tv64[ebp], 6
	ja	$LN1@toString
	mov	eax, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN15@toString[eax*4]
$LN8@toString:

; 30   : 	{
; 31   : 	case NO_YIELD:
; 32   : 		return std::string("NO_YIELD");

	push	OFFSET ??_C@_08BFLLEPHG@NO_YIELD?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	ecx, DWORD PTR $T216819[ebp]
	or	ecx, 1
	mov	DWORD PTR $T216819[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN11@toString

; 33   : 		break;

	jmp	$LN9@toString
$LN7@toString:

; 34   : 	case YIELD_FOOD:
; 35   : 		return std::string("YIELD_FOOD");

	push	OFFSET ??_C@_0L@KJJIFOAE@YIELD_FOOD?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	edx, DWORD PTR $T216819[ebp]
	or	edx, 1
	mov	DWORD PTR $T216819[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN11@toString

; 36   : 		break;

	jmp	$LN9@toString
$LN6@toString:

; 37   : 	case YIELD_PRODUCTION:
; 38   : 		return std::string("YIELD_PRODUCTION");

	push	OFFSET ??_C@_0BB@OAGOPANA@YIELD_PRODUCTION?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR $T216819[ebp]
	or	eax, 1
	mov	DWORD PTR $T216819[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN11@toString

; 39   : 		break;

	jmp	$LN9@toString
$LN5@toString:

; 40   : 	case YIELD_GOLD:
; 41   : 		return std::string("YIELD_GOLD");

	push	OFFSET ??_C@_0L@JGLOMJON@YIELD_GOLD?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	ecx, DWORD PTR $T216819[ebp]
	or	ecx, 1
	mov	DWORD PTR $T216819[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN11@toString

; 42   : 		break;

	jmp	SHORT $LN9@toString
$LN4@toString:

; 43   : 	case YIELD_SCIENCE:
; 44   : 		return std::string("YIELD_SCIENCE");

	push	OFFSET ??_C@_0O@EBDOPLJI@YIELD_SCIENCE?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	edx, DWORD PTR $T216819[ebp]
	or	edx, 1
	mov	DWORD PTR $T216819[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN11@toString

; 45   : 		break;

	jmp	SHORT $LN9@toString
$LN3@toString:

; 46   : 	case YIELD_CULTURE:
; 47   : 		return std::string("YIELD_CULTURE");

	push	OFFSET ??_C@_0O@KODKFFBP@YIELD_CULTURE?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR $T216819[ebp]
	or	eax, 1
	mov	DWORD PTR $T216819[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN11@toString

; 48   : 		break;

	jmp	SHORT $LN9@toString
$LN2@toString:

; 49   : 	case YIELD_FAITH:
; 50   : 		return std::string("YIELD_FAITH");

	push	OFFSET ??_C@_0M@LJBJNLIH@YIELD_FAITH?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	ecx, DWORD PTR $T216819[ebp]
	or	ecx, 1
	mov	DWORD PTR $T216819[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN11@toString

; 51   : 		break;

	jmp	SHORT $LN9@toString
$LN1@toString:

; 52   : 	default:
; 53   : 		return std::string("INVALID ENUM VALUE");

	push	OFFSET ??_C@_0BD@JGLOLBCB@INVALID?5ENUM?5VALUE?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	edx, DWORD PTR $T216819[ebp]
	or	edx, 1
	mov	DWORD PTR $T216819[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN11@toString
$LN9@toString:

; 54   : 		break;
; 55   : 	}
; 56   : #ifndef AUI_WARNING_FIXES
; 57   : 	return std::string("INVALID ENUM VALUE");

	push	OFFSET ??_C@_0BD@JGLOLBCB@INVALID?5ENUM?5VALUE?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR $T216819[ebp]
	or	eax, 1
	mov	DWORD PTR $T216819[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN11@toString:

; 58   : #endif
; 59   : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@toString:
	DD	$LN8@toString
	DD	$LN7@toString
	DD	$LN6@toString
	DD	$LN5@toString
	DD	$LN4@toString
	DD	$LN3@toString
	DD	$LN2@toString
?toString@FSerialization@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABW4YieldTypes@@@Z ENDP ; FSerialization::toString
_TEXT	ENDS
END
