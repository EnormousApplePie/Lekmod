; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvEmphasisClasses.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7CvEmphasisEntry@@6B@			; CvEmphasisEntry::`vftable'
PUBLIC	??0CvEmphasisEntry@@QAE@XZ			; CvEmphasisEntry::CvEmphasisEntry
PUBLIC	?CacheResults@CvEmphasisEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvEmphasisEntry::CacheResults
EXTRN	??0CvBaseInfo@@QAE@XZ:PROC			; CvBaseInfo::CvBaseInfo
EXTRN	??8CvBaseInfo@@UBE_NABV0@@Z:PROC		; CvBaseInfo::operator==
EXTRN	?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z:PROC ; CvBaseInfo::readFrom
EXTRN	?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z:PROC ; CvBaseInfo::writeTo
;	COMDAT ??_7CvEmphasisEntry@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvemphasisclasses.cpp
CONST	SEGMENT
??_7CvEmphasisEntry@@6B@ DD FLAT:?CacheResults@CvEmphasisEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvEmphasisEntry::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvEmphasisEntry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvEmphasisEntry@@QAE@XZ PROC				; CvEmphasisEntry::CvEmphasisEntry, COMDAT
; _this$ = ecx

; 21   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvEmphasisEntry@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+261], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+264], 0

; 22   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvEmphasisEntry@@QAE@XZ ENDP				; CvEmphasisEntry::CvEmphasisEntry
_TEXT	ENDS
PUBLIC	??1CvBaseInfo@@QAE@XZ				; CvBaseInfo::~CvBaseInfo
PUBLIC	??1CvEmphasisEntry@@QAE@XZ			; CvEmphasisEntry::~CvEmphasisEntry
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp
;	COMDAT ??1CvEmphasisEntry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T217878 = -8						; size = 4
$T217877 = -4						; size = 4
??1CvEmphasisEntry@@QAE@XZ PROC				; CvEmphasisEntry::~CvEmphasisEntry, COMDAT
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvEmphasisEntry@@6B@

; 27   : 	SAFE_DELETE_ARRAY(m_piYieldModifiers);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	mov	DWORD PTR $T217878[ebp], ecx
	mov	edx, DWORD PTR $T217878[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T217877[ebp], eax
	mov	ecx, DWORD PTR $T217877[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T217878[ebp]
	mov	DWORD PTR [edx], 0

; 28   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvEmphasisEntry@@QAE@XZ ENDP				; CvEmphasisEntry::~CvEmphasisEntry
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CvBaseInfo@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1CvBaseInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvBaseInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1CvBaseInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T217989 = -48						; size = 4
$T217984 = -44						; size = 4
$T217979 = -40						; size = 4
$T217974 = -36						; size = 4
$T217969 = -32						; size = 4
$T217964 = -28						; size = 4
$T217959 = -24						; size = 4
$T217954 = -20						; size = 4
$T217949 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvBaseInfo@@QAE@XZ PROC				; CvBaseInfo::~CvBaseInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvBaseInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 232				; 000000e8H
	mov	DWORD PTR $T217949[ebp], eax
	mov	ecx, DWORD PTR $T217949[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	mov	DWORD PTR $T217954[ebp], ecx
	mov	ecx, DWORD PTR $T217954[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	mov	DWORD PTR $T217959[ebp], edx
	mov	ecx, DWORD PTR $T217959[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 148				; 00000094H
	mov	DWORD PTR $T217964[ebp], eax
	mov	ecx, DWORD PTR $T217964[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	mov	DWORD PTR $T217969[ebp], ecx
	mov	ecx, DWORD PTR $T217969[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR $T217974[ebp], edx
	mov	ecx, DWORD PTR $T217974[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR $T217979[ebp], eax
	mov	ecx, DWORD PTR $T217979[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR $T217984[ebp], ecx
	mov	ecx, DWORD PTR $T217984[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	mov	DWORD PTR $T217989[ebp], edx
	mov	ecx, DWORD PTR $T217989[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvBaseInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvBaseInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvBaseInfo@@QAE@XZ ENDP				; CvBaseInfo::~CvBaseInfo
PUBLIC	??_C@_0BF@EFAIOIAN@EmphasizeInfo_Yields?$AA@	; `string'
PUBLIC	??_C@_0O@NDINBIOA@EmphasizeType?$AA@		; `string'
PUBLIC	??_C@_0M@GAKFNDJM@GreatPeople?$AA@		; `string'
PUBLIC	??_C@_0M@GJOGCCFL@AvoidGrowth?$AA@		; `string'
EXTRN	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z:PROC ; CvDatabaseUtility::SetYields
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	__imp_?GetBool@Results@Database@@QAE_NPBD@Z:PROC
EXTRN	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:PROC ; CvBaseInfo::CacheResults
;	COMDAT ??_C@_0BF@EFAIOIAN@EmphasizeInfo_Yields?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
CONST	SEGMENT
??_C@_0BF@EFAIOIAN@EmphasizeInfo_Yields?$AA@ DB 'EmphasizeInfo_Yields', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NDINBIOA@EmphasizeType?$AA@
CONST	SEGMENT
??_C@_0O@NDINBIOA@EmphasizeType?$AA@ DB 'EmphasizeType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GAKFNDJM@GreatPeople?$AA@
CONST	SEGMENT
??_C@_0M@GAKFNDJM@GreatPeople?$AA@ DB 'GreatPeople', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GJOGCCFL@AvoidGrowth?$AA@
CONST	SEGMENT
??_C@_0M@GJOGCCFL@AvoidGrowth?$AA@ DB 'AvoidGrowth', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvemphasisclasses.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvEmphasisEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szEmphasizeType$ = -4					; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvEmphasisEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvEmphasisEntry::CacheResults, COMDAT
; _this$ = ecx

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 33   : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul

; 34   : 		return false;

	xor	al, al
	jmp	SHORT $LN2@CacheResul
$LN1@CacheResul:

; 35   : 
; 36   : 	m_bAvoidGrowth = kResults.GetBool("AvoidGrowth");

	push	OFFSET ??_C@_0M@GJOGCCFL@AvoidGrowth?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+260], al

; 37   : 	m_bGreatPeople = kResults.GetBool("GreatPeople");

	push	OFFSET ??_C@_0M@GAKFNDJM@GreatPeople?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+261], al

; 38   : 
; 39   : 	const char* szEmphasizeType = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szEmphasizeType$[ebp], eax

; 40   : 	kUtility.SetYields(m_piYieldModifiers, "EmphasizeInfo_Yields", "EmphasizeType", szEmphasizeType);

	mov	eax, DWORD PTR _szEmphasizeType$[ebp]
	push	eax
	push	OFFSET ??_C@_0O@NDINBIOA@EmphasizeType?$AA@
	push	OFFSET ??_C@_0BF@EFAIOIAN@EmphasizeInfo_Yields?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z ; CvDatabaseUtility::SetYields

; 41   : 
; 42   : 	return true;

	mov	al, 1
$LN2@CacheResul:

; 43   : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvEmphasisEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvEmphasisEntry::CacheResults
_TEXT	ENDS
PUBLIC	?IsAvoidGrowth@CvEmphasisEntry@@QBE_NXZ		; CvEmphasisEntry::IsAvoidGrowth
; Function compile flags: /Odtp
;	COMDAT ?IsAvoidGrowth@CvEmphasisEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAvoidGrowth@CvEmphasisEntry@@QBE_NXZ PROC		; CvEmphasisEntry::IsAvoidGrowth, COMDAT
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 	return m_bAvoidGrowth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+260]

; 49   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsAvoidGrowth@CvEmphasisEntry@@QBE_NXZ ENDP		; CvEmphasisEntry::IsAvoidGrowth
_TEXT	ENDS
PUBLIC	?IsGreatPeople@CvEmphasisEntry@@QBE_NXZ		; CvEmphasisEntry::IsGreatPeople
; Function compile flags: /Odtp
;	COMDAT ?IsGreatPeople@CvEmphasisEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGreatPeople@CvEmphasisEntry@@QBE_NXZ PROC		; CvEmphasisEntry::IsGreatPeople, COMDAT
; _this$ = ecx

; 52   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 	return m_bGreatPeople;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+261]

; 54   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsGreatPeople@CvEmphasisEntry@@QBE_NXZ ENDP		; CvEmphasisEntry::IsGreatPeople
_TEXT	ENDS
PUBLIC	?GetYieldChange@CvEmphasisEntry@@QBEHH@Z	; CvEmphasisEntry::GetYieldChange
; Function compile flags: /Odtp
;	COMDAT ?GetYieldChange@CvEmphasisEntry@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetYieldChange@CvEmphasisEntry@@QBEHH@Z PROC		; CvEmphasisEntry::GetYieldChange, COMDAT
; _this$ = ecx

; 57   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 	CvAssertMsg(i < NUM_YIELD_TYPES, "Index out of bounds");
; 59   : 	CvAssertMsg(i > -1, "Index out of bounds");
; 60   : 	return m_piYieldModifiers ? m_piYieldModifiers[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+264], 0
	je	SHORT $LN3@GetYieldCh
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@GetYieldCh
$LN3@GetYieldCh:
	mov	DWORD PTR tv69[ebp], -1
$LN4@GetYieldCh:
	mov	eax, DWORD PTR tv69[ebp]

; 61   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetYieldChange@CvEmphasisEntry@@QBEHH@Z ENDP		; CvEmphasisEntry::GetYieldChange
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::~_Vector_val<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >
PUBLIC	?_Buy@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@IAE_NI@Z ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::_Buy
PUBLIC	??0CvEmphasisXMLEntries@@QAE@XZ			; CvEmphasisXMLEntries::CvEmphasisXMLEntries
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0CvEmphasisXMLEntries@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvEmphasisXMLEntries@@QAE@XZ$1
__ehfuncinfo$??0CvEmphasisXMLEntries@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvEmphasisXMLEntries@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvemphasisclasses.cpp
xdata$x	ENDS
;	COMDAT ??0CvEmphasisXMLEntries@@QAE@XZ
_TEXT	SEGMENT
tv92 = -132						; size = 4
tv149 = -128						; size = 4
_this$ = -124						; size = 4
$T218047 = -30						; size = 1
$T218034 = -29						; size = 1
$T218030 = -28						; size = 4
$T218023 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CvEmphasisXMLEntries@@QAE@XZ PROC			; CvEmphasisXMLEntries::CvEmphasisXMLEntries, COMDAT
; _this$ = ecx

; 68   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvEmphasisXMLEntries@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T218047[ebp]
	mov	DWORD PTR $T218023[ebp], eax
	lea	ecx, DWORD PTR $T218034[ebp]
	mov	DWORD PTR $T218030[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv149[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv92[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@IAE_NI@Z ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::_Buy
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 69   : 
; 70   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvEmphasisXMLEntries@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ
__ehhandler$??0CvEmphasisXMLEntries@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvEmphasisXMLEntries@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvEmphasisXMLEntries@@QAE@XZ ENDP			; CvEmphasisXMLEntries::CvEmphasisXMLEntries
PUBLIC	??1?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::~vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >
PUBLIC	?_Tidy@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@IAEXXZ ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::_Tidy
PUBLIC	?DeleteArray@CvEmphasisXMLEntries@@QAEXXZ	; CvEmphasisXMLEntries::DeleteArray
PUBLIC	??1CvEmphasisXMLEntries@@QAE@XZ			; CvEmphasisXMLEntries::~CvEmphasisXMLEntries
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1CvEmphasisXMLEntries@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvEmphasisXMLEntries@@QAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvEmphasisXMLEntries@@QAE@XZ$1
__ehfuncinfo$??1CvEmphasisXMLEntries@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CvEmphasisXMLEntries@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvemphasisclasses.cpp
xdata$x	ENDS
;	COMDAT ??1CvEmphasisXMLEntries@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1CvEmphasisXMLEntries@@QAE@XZ PROC			; CvEmphasisXMLEntries::~CvEmphasisXMLEntries, COMDAT
; _this$ = ecx

; 74   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvEmphasisXMLEntries@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 75   : 	DeleteArray();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteArray@CvEmphasisXMLEntries@@QAEXXZ ; CvEmphasisXMLEntries::DeleteArray

; 76   : }

	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@IAEXXZ ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvEmphasisXMLEntries@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::~vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >
__unwindfunclet$??1CvEmphasisXMLEntries@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ
__ehhandler$??1CvEmphasisXMLEntries@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvEmphasisXMLEntries@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvEmphasisXMLEntries@@QAE@XZ ENDP			; CvEmphasisXMLEntries::~CvEmphasisXMLEntries
PUBLIC	?GetEmphasisEntries@CvEmphasisXMLEntries@@QAEAAV?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@XZ ; CvEmphasisXMLEntries::GetEmphasisEntries
; Function compile flags: /Odtp
;	COMDAT ?GetEmphasisEntries@CvEmphasisXMLEntries@@QAEAAV?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEmphasisEntries@CvEmphasisXMLEntries@@QAEAAV?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@XZ PROC ; CvEmphasisXMLEntries::GetEmphasisEntries, COMDAT
; _this$ = ecx

; 80   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 	return m_paEmphasisEntries;

	mov	eax, DWORD PTR _this$[ebp]

; 82   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEmphasisEntries@CvEmphasisXMLEntries@@QAEAAV?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@XZ ENDP ; CvEmphasisXMLEntries::GetEmphasisEntries
_TEXT	ENDS
PUBLIC	?GetNumEmphases@CvEmphasisXMLEntries@@QAEHXZ	; CvEmphasisXMLEntries::GetNumEmphases
; Function compile flags: /Odtp
;	COMDAT ?GetNumEmphases@CvEmphasisXMLEntries@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumEmphases@CvEmphasisXMLEntries@@QAEHXZ PROC	; CvEmphasisXMLEntries::GetNumEmphases, COMDAT
; _this$ = ecx

; 90   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 91   : 	return m_paEmphasisEntries.size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 92   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumEmphases@CvEmphasisXMLEntries@@QAEHXZ ENDP	; CvEmphasisXMLEntries::GetNumEmphases
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@2@0@Z ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::erase
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ?DeleteArray@CvEmphasisXMLEntries@@QAEXXZ
_TEXT	SEGMENT
tv143 = -116						; size = 4
_this$ = -112						; size = 4
$T218290 = -56						; size = 4
$T218274 = -52						; size = 4
$T218394 = -48						; size = 4
$T218393 = -44						; size = 4
$T218392 = -40						; size = 4
$T218391 = -36						; size = 4
$T218390 = -32						; size = 4
$T218258 = -28						; size = 4
$T218251 = -24						; size = 4
$T218250 = -20						; size = 4
$T218217 = -16						; size = 4
$T218193 = -12						; size = 4
$T218183 = -8						; size = 4
_it$217268 = -4						; size = 4
?DeleteArray@CvEmphasisXMLEntries@@QAEXXZ PROC		; CvEmphasisXMLEntries::DeleteArray, COMDAT
; _this$ = ecx

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 	for(std::vector<CvEmphasisEntry*>::iterator it = m_paEmphasisEntries.begin(); it != m_paEmphasisEntries.end(); ++it)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T218193[ebp], ecx
	mov	edx, DWORD PTR $T218193[ebp]
	mov	DWORD PTR _it$217268[ebp], edx
	jmp	SHORT $LN3@DeleteArra
$LN2@DeleteArra:
	mov	eax, DWORD PTR _it$217268[ebp]
	add	eax, 4
	mov	DWORD PTR _it$217268[ebp], eax
$LN3@DeleteArra:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T218217[ebp], edx
	mov	eax, DWORD PTR $T218217[ebp]
	mov	DWORD PTR $T218183[ebp], eax
	mov	ecx, DWORD PTR _it$217268[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T218183[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@DeleteArra

; 98   : 	{
; 99   : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$217268[ebp]
	mov	DWORD PTR $T218258[ebp], edx
	mov	eax, DWORD PTR $T218258[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T218251[ebp], ecx
	mov	edx, DWORD PTR $T218251[ebp]
	mov	DWORD PTR $T218250[ebp], edx
	cmp	DWORD PTR $T218250[ebp], 0
	je	SHORT $LN32@DeleteArra
	mov	ecx, DWORD PTR $T218250[ebp]
	call	??1CvEmphasisEntry@@QAE@XZ		; CvEmphasisEntry::~CvEmphasisEntry
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@DeleteArra
	mov	ecx, DWORD PTR $T218250[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@DeleteArra:
	mov	edx, DWORD PTR $T218250[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@DeleteArra
$LN32@DeleteArra:
	mov	DWORD PTR tv143[ebp], 0
$LN33@DeleteArra:
	mov	eax, DWORD PTR $T218258[ebp]
	mov	DWORD PTR [eax], 0

; 100  : 	}

	jmp	$LN2@DeleteArra
$LN1@DeleteArra:

; 101  : 
; 102  : 	m_paEmphasisEntries.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T218274[ebp], edx
	mov	eax, DWORD PTR $T218274[ebp]
	mov	DWORD PTR $T218391[ebp], eax
	mov	ecx, DWORD PTR $T218391[ebp]
	mov	DWORD PTR $T218390[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T218290[ebp], eax
	mov	ecx, DWORD PTR $T218290[ebp]
	mov	DWORD PTR $T218393[ebp], ecx
	mov	edx, DWORD PTR $T218393[ebp]
	mov	DWORD PTR $T218392[ebp], edx
	mov	eax, DWORD PTR $T218390[ebp]
	push	eax
	mov	ecx, DWORD PTR $T218392[ebp]
	push	ecx
	lea	edx, DWORD PTR $T218394[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@2@0@Z ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::erase

; 103  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteArray@CvEmphasisXMLEntries@@QAEXXZ ENDP		; CvEmphasisXMLEntries::DeleteArray
_TEXT	ENDS
PUBLIC	?GetEntry@CvEmphasisXMLEntries@@QAEPAVCvEmphasisEntry@@H@Z ; CvEmphasisXMLEntries::GetEntry
; Function compile flags: /Odtp
;	COMDAT ?GetEntry@CvEmphasisXMLEntries@@QAEPAVCvEmphasisEntry@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?GetEntry@CvEmphasisXMLEntries@@QAEPAVCvEmphasisEntry@@H@Z PROC ; CvEmphasisXMLEntries::GetEntry, COMDAT
; _this$ = ecx

; 111  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 	return m_paEmphasisEntries[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 113  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetEntry@CvEmphasisXMLEntries@@QAEPAVCvEmphasisEntry@@H@Z ENDP ; CvEmphasisXMLEntries::GetEntry
_TEXT	ENDS
PUBLIC	??0CvCityEmphases@@QAE@XZ			; CvCityEmphases::CvCityEmphases
; Function compile flags: /Odtp
;	COMDAT ??0CvCityEmphases@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvCityEmphases@@QAE@XZ PROC				; CvCityEmphases::CvCityEmphases, COMDAT
; _this$ = ecx

; 128  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 	m_pbEmphasize = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 130  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvCityEmphases@@QAE@XZ ENDP				; CvCityEmphases::CvCityEmphases
_TEXT	ENDS
PUBLIC	??1CvCityEmphases@@QAE@XZ			; CvCityEmphases::~CvCityEmphases
; Function compile flags: /Odtp
;	COMDAT ??1CvCityEmphases@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvCityEmphases@@QAE@XZ PROC				; CvCityEmphases::~CvCityEmphases, COMDAT
; _this$ = ecx

; 134  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 135  : 
; 136  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CvCityEmphases@@QAE@XZ ENDP				; CvCityEmphases::~CvCityEmphases
_TEXT	ENDS
PUBLIC	?Reset@CvCityEmphases@@QAEXXZ			; CvCityEmphases::Reset
PUBLIC	?Init@CvCityEmphases@@QAEXPAVCvEmphasisXMLEntries@@PAVCvCity@@@Z ; CvCityEmphases::Init
; Function compile flags: /Odtp
;	COMDAT ?Init@CvCityEmphases@@QAEXPAVCvEmphasisXMLEntries@@PAVCvCity@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pEmphases$ = 8						; size = 4
_pCity$ = 12						; size = 4
?Init@CvCityEmphases@@QAEXPAVCvEmphasisXMLEntries@@PAVCvCity@@@Z PROC ; CvCityEmphases::Init, COMDAT
; _this$ = ecx

; 140  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 	// Store off the pointers to objects we'll need later
; 142  : 	m_pEmphases = pEmphases;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pEmphases$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 143  : 	m_pCity = pCity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pCity$[ebp]
	mov	DWORD PTR [edx+40], eax

; 144  : 
; 145  : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvCityEmphases@@QAEXXZ		; CvCityEmphases::Reset

; 146  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CvCityEmphases@@QAEXPAVCvEmphasisXMLEntries@@PAVCvCity@@@Z ENDP ; CvCityEmphases::Init
_TEXT	ENDS
PUBLIC	?Uninit@CvCityEmphases@@QAEXXZ			; CvCityEmphases::Uninit
; Function compile flags: /Odtp
;	COMDAT ?Uninit@CvCityEmphases@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T218426 = -8						; size = 4
$T218424 = -4						; size = 4
?Uninit@CvCityEmphases@@QAEXXZ PROC			; CvCityEmphases::Uninit, COMDAT
; _this$ = ecx

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 	SAFE_DELETE_ARRAY(m_pbEmphasize);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR $T218426[ebp], eax
	mov	ecx, DWORD PTR $T218426[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T218424[ebp], edx
	mov	eax, DWORD PTR $T218424[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T218426[ebp]
	mov	DWORD PTR [ecx], 0

; 152  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Uninit@CvCityEmphases@@QAEXXZ ENDP			; CvCityEmphases::Uninit
_TEXT	ENDS
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?getNumEmphasisInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumEmphasisInfos
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
; Function compile flags: /Odtp
;	COMDAT ?Reset@CvCityEmphases@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T218429 = -12						; size = 4
_iI$217310 = -8						; size = 4
_iI$217304 = -4						; size = 4
?Reset@CvCityEmphases@@QAEXXZ PROC			; CvCityEmphases::Reset, COMDAT
; _this$ = ecx

; 156  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 157  : 	Uninit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninit@CvCityEmphases@@QAEXXZ		; CvCityEmphases::Uninit

; 158  : 
; 159  : 	m_iEmphasizeAvoidGrowthCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 160  : 	m_iEmphasizeGreatPeopleCount = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 161  : 
; 162  : 	for(int iI = 0; iI < NUM_YIELD_TYPES; iI++)

	mov	DWORD PTR _iI$217304[ebp], 0
	jmp	SHORT $LN6@Reset
$LN5@Reset:
	mov	edx, DWORD PTR _iI$217304[ebp]
	add	edx, 1
	mov	DWORD PTR _iI$217304[ebp], edx
$LN6@Reset:
	cmp	DWORD PTR _iI$217304[ebp], 6
	jge	SHORT $LN4@Reset

; 163  : 	{
; 164  : 		m_aiEmphasizeYieldCount[iI] = 0;

	mov	eax, DWORD PTR _iI$217304[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+8], 0

; 165  : 	}

	jmp	SHORT $LN5@Reset
$LN4@Reset:

; 166  : 
; 167  : 	CvAssertMsg(m_pbEmphasize == NULL, "m_pbEmphasize not NULL!!!");
; 168  : 	CvAssertMsg(GC.getNumEmphasisInfos() > 0,  "GC.getNumEmphasizeInfos() is not greater than zero but an array is being allocated in CvCityEmphases::Reset");
; 169  : #ifdef AUI_WARNING_FIXES
; 170  : 	SAFE_DELETE_ARRAY(m_pbEmphasize);
; 171  : #endif
; 172  : 	m_pbEmphasize = FNEW(bool[GC.getNumEmphasisInfos()], c_eCiv5GameplayDLL, 0);

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumEmphasisInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumEmphasisInfos
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T218429[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T218429[ebp]
	mov	DWORD PTR [edx+32], eax

; 173  : #ifdef AUI_WARNING_FIXES
; 174  : 	for (uint iI = 0; iI < GC.getNumEmphasisInfos(); iI++)
; 175  : #else
; 176  : 	for(int iI = 0; iI < GC.getNumEmphasisInfos(); iI++)

	mov	DWORD PTR _iI$217310[ebp], 0
	jmp	SHORT $LN3@Reset
$LN2@Reset:
	mov	ecx, DWORD PTR _iI$217310[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$217310[ebp], ecx
$LN3@Reset:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumEmphasisInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumEmphasisInfos
	cmp	DWORD PTR _iI$217310[ebp], eax
	jge	SHORT $LN7@Reset

; 177  : #endif
; 178  : 	{
; 179  : 		m_pbEmphasize[iI] = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _iI$217310[ebp]
	mov	BYTE PTR [eax+ecx], 0
	jmp	SHORT $LN2@Reset
$LN7@Reset:

; 180  : 	}
; 181  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CvCityEmphases@@QAEXXZ ENDP			; CvCityEmphases::Reset
_TEXT	ENDS
PUBLIC	?GetEmphasizeAvoidGrowthCount@CvCityEmphases@@QAEHXZ ; CvCityEmphases::GetEmphasizeAvoidGrowthCount
; Function compile flags: /Odtp
;	COMDAT ?GetEmphasizeAvoidGrowthCount@CvCityEmphases@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEmphasizeAvoidGrowthCount@CvCityEmphases@@QAEHXZ PROC ; CvCityEmphases::GetEmphasizeAvoidGrowthCount, COMDAT
; _this$ = ecx

; 185  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 186  : 	return m_iEmphasizeAvoidGrowthCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 187  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEmphasizeAvoidGrowthCount@CvCityEmphases@@QAEHXZ ENDP ; CvCityEmphases::GetEmphasizeAvoidGrowthCount
_TEXT	ENDS
PUBLIC	?IsEmphasizeAvoidGrowth@CvCityEmphases@@QAE_NXZ	; CvCityEmphases::IsEmphasizeAvoidGrowth
; Function compile flags: /Odtp
;	COMDAT ?IsEmphasizeAvoidGrowth@CvCityEmphases@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmphasizeAvoidGrowth@CvCityEmphases@@QAE_NXZ PROC	; CvCityEmphases::IsEmphasizeAvoidGrowth, COMDAT
; _this$ = ecx

; 191  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 	return (GetEmphasizeAvoidGrowthCount() > 0);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEmphasizeAvoidGrowthCount@CvCityEmphases@@QAEHXZ ; CvCityEmphases::GetEmphasizeAvoidGrowthCount
	xor	ecx, ecx
	test	eax, eax
	setg	cl
	mov	al, cl

; 193  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmphasizeAvoidGrowth@CvCityEmphases@@QAE_NXZ ENDP	; CvCityEmphases::IsEmphasizeAvoidGrowth
_TEXT	ENDS
PUBLIC	?GetEmphasizeYieldCount@CvCityEmphases@@QAEHW4YieldTypes@@@Z ; CvCityEmphases::GetEmphasizeYieldCount
; Function compile flags: /Odtp
;	COMDAT ?GetEmphasizeYieldCount@CvCityEmphases@@QAEHW4YieldTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eIndex$ = 8						; size = 4
?GetEmphasizeYieldCount@CvCityEmphases@@QAEHW4YieldTypes@@@Z PROC ; CvCityEmphases::GetEmphasizeYieldCount, COMDAT
; _this$ = ecx

; 197  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 198  : 	CvAssertMsg(eIndex >= 0, "eIndex is expected to be non-negative (invalid Index)");
; 199  : 	CvAssertMsg(eIndex < NUM_YIELD_TYPES, "eIndex is expected to be within maximum bounds (invalid Index)");
; 200  : 	if(eIndex >= 0 && eIndex < NUM_YIELD_TYPES)

	cmp	DWORD PTR _eIndex$[ebp], 0
	jl	SHORT $LN1@GetEmphasi
	cmp	DWORD PTR _eIndex$[ebp], 6
	jge	SHORT $LN1@GetEmphasi

; 201  : 		return m_aiEmphasizeYieldCount[eIndex];

	mov	eax, DWORD PTR _eIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+8]
	jmp	SHORT $LN2@GetEmphasi
$LN1@GetEmphasi:

; 202  : 	return 0; // default set during "reset"

	xor	eax, eax
$LN2@GetEmphasi:

; 203  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetEmphasizeYieldCount@CvCityEmphases@@QAEHW4YieldTypes@@@Z ENDP ; CvCityEmphases::GetEmphasizeYieldCount
_TEXT	ENDS
PUBLIC	?IsEmphasizeYield@CvCityEmphases@@QAE_NW4YieldTypes@@@Z ; CvCityEmphases::IsEmphasizeYield
; Function compile flags: /Odtp
;	COMDAT ?IsEmphasizeYield@CvCityEmphases@@QAE_NW4YieldTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eIndex$ = 8						; size = 4
?IsEmphasizeYield@CvCityEmphases@@QAE_NW4YieldTypes@@@Z PROC ; CvCityEmphases::IsEmphasizeYield, COMDAT
; _this$ = ecx

; 207  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 208  : 	return (GetEmphasizeYieldCount(eIndex) > 0);

	mov	eax, DWORD PTR _eIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEmphasizeYieldCount@CvCityEmphases@@QAEHW4YieldTypes@@@Z ; CvCityEmphases::GetEmphasizeYieldCount
	xor	ecx, ecx
	test	eax, eax
	setg	cl
	mov	al, cl

; 209  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsEmphasizeYield@CvCityEmphases@@QAE_NW4YieldTypes@@@Z ENDP ; CvCityEmphases::IsEmphasizeYield
_TEXT	ENDS
PUBLIC	?IsEmphasize@CvCityEmphases@@QAE_NW4EmphasizeTypes@@@Z ; CvCityEmphases::IsEmphasize
; Function compile flags: /Odtp
;	COMDAT ?IsEmphasize@CvCityEmphases@@QAE_NW4EmphasizeTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eIndex$ = 8						; size = 4
?IsEmphasize@CvCityEmphases@@QAE_NW4EmphasizeTypes@@@Z PROC ; CvCityEmphases::IsEmphasize, COMDAT
; _this$ = ecx

; 213  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 214  : 	CvAssertMsg(eIndex >= 0, "eIndex is expected to be non-negative (invalid Index)");
; 215  : 	CvAssertMsg(eIndex < GC.getNumEmphasisInfos(), "eIndex is expected to be within maximum bounds (invalid Index)");
; 216  : 	CvAssertMsg(m_pbEmphasize != NULL, "m_pbEmphasize is not expected to be equal with NULL");
; 217  : 
; 218  : 	if(!m_pbEmphasize) return false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN1@IsEmphasiz
	xor	al, al
	jmp	SHORT $LN2@IsEmphasiz
$LN1@IsEmphasiz:

; 219  : 
; 220  : 	return m_pbEmphasize[eIndex];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _eIndex$[ebp]
	mov	al, BYTE PTR [edx+eax]
$LN2@IsEmphasiz:

; 221  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsEmphasize@CvCityEmphases@@QAE_NW4EmphasizeTypes@@@Z ENDP ; CvCityEmphases::IsEmphasize
_TEXT	ENDS
PUBLIC	?SetEmphasize@CvCityEmphases@@QAEXW4EmphasizeTypes@@_N@Z ; CvCityEmphases::SetEmphasize
EXTRN	?isCitySelected@CvCity@@QAE_NXZ:PROC		; CvCity::isCitySelected
EXTRN	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ:PROC ; CvGame::getActivePlayer
EXTRN	?getEmphasisInfo@CvGlobals@@QAEPAVCvEmphasisEntry@@W4EmphasizeTypes@@@Z:PROC ; CvGlobals::getEmphasisInfo
; Function compile flags: /Odtp
;	COMDAT ?SetEmphasize@CvCityEmphases@@QAEXW4EmphasizeTypes@@_N@Z
_TEXT	SEGMENT
tv170 = -28						; size = 4
_this$ = -24						; size = 4
$T218458 = -20						; size = 4
$T218454 = -16						; size = 4
$T218450 = -12						; size = 4
_iI$217343 = -8						; size = 4
_pkEmphasis$217340 = -4					; size = 4
_eIndex$ = 8						; size = 4
_bNewValue$ = 12					; size = 1
?SetEmphasize@CvCityEmphases@@QAEXW4EmphasizeTypes@@_N@Z PROC ; CvCityEmphases::SetEmphasize, COMDAT
; _this$ = ecx

; 225  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 226  : 	CvAssertMsg(eIndex >= 0, "eIndex is expected to be non-negative (invalid Index)");
; 227  : 	CvAssertMsg(eIndex < GC.getNumEmphasisInfos(), "eIndex is expected to be within maximum bounds (invalid Index)");
; 228  : 
; 229  : 	if(IsEmphasize(eIndex) != bNewValue)

	mov	eax, DWORD PTR _eIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmphasize@CvCityEmphases@@QAE_NW4EmphasizeTypes@@@Z ; CvCityEmphases::IsEmphasize
	movzx	ecx, al
	movzx	edx, BYTE PTR _bNewValue$[ebp]
	cmp	ecx, edx
	je	$LN9@SetEmphasi

; 230  : 	{
; 231  : 		m_pbEmphasize[eIndex] = bNewValue;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _eIndex$[ebp]
	mov	al, BYTE PTR _bNewValue$[ebp]
	mov	BYTE PTR [ecx+edx], al

; 232  : 
; 233  : 		CvEmphasisEntry* pkEmphasis = GC.getEmphasisInfo(eIndex);

	mov	ecx, DWORD PTR _eIndex$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getEmphasisInfo@CvGlobals@@QAEPAVCvEmphasisEntry@@W4EmphasizeTypes@@@Z ; CvGlobals::getEmphasisInfo
	mov	DWORD PTR _pkEmphasis$217340[ebp], eax

; 234  : 
; 235  : #ifdef AUI_WARNING_FIXES
; 236  : 		if (!pkEmphasis)
; 237  : 			return;
; 238  : #endif
; 239  : 
; 240  : 		if(pkEmphasis->IsAvoidGrowth())

	mov	ecx, DWORD PTR _pkEmphasis$217340[ebp]
	call	?IsAvoidGrowth@CvEmphasisEntry@@QBE_NXZ	; CvEmphasisEntry::IsAvoidGrowth
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@SetEmphasi

; 241  : 		{
; 242  : 			m_iEmphasizeAvoidGrowthCount += ((IsEmphasize(eIndex)) ? 1 : -1);

	mov	eax, DWORD PTR _eIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmphasize@CvCityEmphases@@QAE_NW4EmphasizeTypes@@@Z ; CvCityEmphases::IsEmphasize
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 2
	add	ecx, -1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
$LN7@SetEmphasi:

; 243  : 			CvAssert(GetEmphasizeAvoidGrowthCount() >= 0);
; 244  : 		}
; 245  : 
; 246  : 		if(pkEmphasis->IsGreatPeople())

	mov	ecx, DWORD PTR _pkEmphasis$217340[ebp]
	call	?IsGreatPeople@CvEmphasisEntry@@QBE_NXZ	; CvEmphasisEntry::IsGreatPeople
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@SetEmphasi

; 247  : 		{
; 248  : 			m_iEmphasizeGreatPeopleCount += ((IsEmphasize(eIndex)) ? 1 : -1);

	mov	edx, DWORD PTR _eIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmphasize@CvCityEmphases@@QAE_NW4EmphasizeTypes@@@Z ; CvCityEmphases::IsEmphasize
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	and	eax, 2
	add	eax, -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN6@SetEmphasi:

; 249  : 		}
; 250  : 
; 251  : 		for(int iI = 0; iI < NUM_YIELD_TYPES; iI++)

	mov	DWORD PTR _iI$217343[ebp], 0
	jmp	SHORT $LN5@SetEmphasi
$LN4@SetEmphasi:
	mov	eax, DWORD PTR _iI$217343[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$217343[ebp], eax
$LN5@SetEmphasi:
	cmp	DWORD PTR _iI$217343[ebp], 6
	jge	SHORT $LN13@SetEmphasi

; 252  : 		{
; 253  : 			if(pkEmphasis->GetYieldChange(iI))

	mov	ecx, DWORD PTR _iI$217343[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkEmphasis$217340[ebp]
	call	?GetYieldChange@CvEmphasisEntry@@QBEHH@Z ; CvEmphasisEntry::GetYieldChange
	test	eax, eax
	je	SHORT $LN2@SetEmphasi

; 254  : 			{
; 255  : 				m_aiEmphasizeYieldCount[iI] += ((IsEmphasize(eIndex)) ? 1 : -1);

	mov	edx, DWORD PTR _eIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmphasize@CvCityEmphases@@QAE_NW4EmphasizeTypes@@@Z ; CvCityEmphases::IsEmphasize
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	and	eax, 2
	add	eax, -1
	mov	ecx, DWORD PTR _iI$217343[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+ecx*4+8]
	mov	ecx, DWORD PTR _iI$217343[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+8], eax
$LN2@SetEmphasi:

; 256  : 				CvAssert(GetEmphasizeYieldCount((YieldTypes)iI) >= 0);
; 257  : 			}
; 258  : 		}

	jmp	SHORT $LN4@SetEmphasi

; 259  : 
; 260  : 		if((m_pCity->getOwner() == GC.getGame().getActivePlayer()) && m_pCity->isCitySelected())

$LN13@SetEmphasi:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T218450[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T218454[ebp], eax
	mov	ecx, DWORD PTR $T218454[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T218450[ebp], eax
	jne	SHORT $LN9@SetEmphasi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	call	?isCitySelected@CvCity@@QAE_NXZ		; CvCity::isCitySelected
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN9@SetEmphasi

; 261  : 		{
; 262  : 			GC.GetEngineUserInterface()->setDirty(SelectionButtons_DIRTY_BIT, true);

	mov	eax, DWORD PTR $T218458[ebp]
	mov	DWORD PTR tv170[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv170[ebp], ecx
	push	1
	push	6
	mov	edx, DWORD PTR tv170[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv170[ebp]
	mov	edx, DWORD PTR [eax+260]
	call	edx
$LN9@SetEmphasi:

; 263  : 		}
; 264  : 	}
; 265  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetEmphasize@CvCityEmphases@@QAEXW4EmphasizeTypes@@_N@Z ENDP ; CvCityEmphases::SetEmphasize
_TEXT	ENDS
PUBLIC	??$ReadHashedDataArray@_N@CvInfosSerializationHelper@@YAXAAVFDataStream@@PA_NH@Z ; CvInfosSerializationHelper::ReadHashedDataArray<bool>
PUBLIC	??$?5H$05@@YAAAVFDataStream@@AAV0@AAY05H@Z	; operator>><int,6>
PUBLIC	?Read@CvCityEmphases@@QAEXAAVFDataStream@@@Z	; CvCityEmphases::Read
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
;	COMDAT ?Read@CvCityEmphases@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Read@CvCityEmphases@@QAEXAAVFDataStream@@@Z PROC	; CvCityEmphases::Read, COMDAT
; _this$ = ecx

; 269  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 270  : 	// Version number to maintain backwards compatibility
; 271  : 	uint uiVersion;
; 272  : 	kStream >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 273  : 
; 274  : 	kStream >> m_iEmphasizeAvoidGrowthCount;

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 275  : 	kStream >> m_iEmphasizeGreatPeopleCount;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 276  : 
; 277  : 	kStream >> m_aiEmphasizeYieldCount;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??$?5H$05@@YAAAVFDataStream@@AAV0@AAY05H@Z ; operator>><int,6>
	add	esp, 8

; 278  : 
; 279  : 	CvInfosSerializationHelper::ReadHashedDataArray(kStream, m_pbEmphasize, GC.getNumEmphasisInfos());

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumEmphasisInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumEmphasisInfos
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??$ReadHashedDataArray@_N@CvInfosSerializationHelper@@YAXAAVFDataStream@@PA_NH@Z ; CvInfosSerializationHelper::ReadHashedDataArray<bool>
	add	esp, 12					; 0000000cH

; 280  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Read@CvCityEmphases@@QAEXAAVFDataStream@@@Z ENDP	; CvCityEmphases::Read
_TEXT	ENDS
PUBLIC	??$WriteHashedDataArray@W4EmphasizeTypes@@_N@CvInfosSerializationHelper@@YAXAAVFDataStream@@PA_NI@Z ; CvInfosSerializationHelper::WriteHashedDataArray<enum EmphasizeTypes,bool>
PUBLIC	??$?6H$05@@YAAAVFDataStream@@AAV0@AAY05$$CBH@Z	; operator<<<int,6>
PUBLIC	?Write@CvCityEmphases@@QAEXAAVFDataStream@@@Z	; CvCityEmphases::Write
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@CvCityEmphases@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Write@CvCityEmphases@@QAEXAAVFDataStream@@@Z PROC	; CvCityEmphases::Write, COMDAT
; _this$ = ecx

; 284  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 	// Current version number
; 286  : 	uint uiVersion = 1;

	mov	DWORD PTR _uiVersion$[ebp], 1

; 287  : 	kStream << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 288  : 
; 289  : 	kStream << m_iEmphasizeAvoidGrowthCount;

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 290  : 	kStream << m_iEmphasizeGreatPeopleCount;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 291  : 
; 292  : 	kStream << m_aiEmphasizeYieldCount;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??$?6H$05@@YAAAVFDataStream@@AAV0@AAY05$$CBH@Z ; operator<<<int,6>
	add	esp, 8

; 293  : 
; 294  : 	CvInfosSerializationHelper::WriteHashedDataArray<EmphasizeTypes, bool>(kStream, m_pbEmphasize, GC.getNumEmphasisInfos());

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumEmphasisInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumEmphasisInfos
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??$WriteHashedDataArray@W4EmphasizeTypes@@_N@CvInfosSerializationHelper@@YAXAAVFDataStream@@PA_NI@Z ; CvInfosSerializationHelper::WriteHashedDataArray<enum EmphasizeTypes,bool>
	add	esp, 12					; 0000000cH

; 295  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Write@CvCityEmphases@@QAEXAAVFDataStream@@@Z ENDP	; CvCityEmphases::Write
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ PROC ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::~vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@IAEXXZ ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::~vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::~_Vector_val<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::~_Vector_val<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvEmphasisEntry@@PAPAV1@@stdext@@YAPAPAVCvEmphasisEntry@@PAPAV1@00@Z ; stdext::unchecked_copy<CvEmphasisEntry * *,CvEmphasisEntry * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T218635 = -52						; size = 4
$T218624 = -48						; size = 4
$T218623 = -44						; size = 4
__Cat$218631 = -40					; size = 1
$T218628 = -39						; size = 1
__Ptr$217447 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@2@0@Z PROC ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvEmphasisEntry@@PAPAV1@@stdext@@YAPAPAVCvEmphasisEntry@@PAPAV1@00@Z ; stdext::unchecked_copy<CvEmphasisEntry * *,CvEmphasisEntry * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$217447[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T218635[ebp], edx
	mov	eax, DWORD PTR $T218635[ebp]
	mov	DWORD PTR $T218624[ebp], eax
	mov	ecx, DWORD PTR __Ptr$217447[ebp]
	mov	DWORD PTR $T218623[ebp], ecx
	mov	dl, BYTE PTR __Cat$218631[ebp]
	mov	BYTE PTR $T218628[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$217447[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@2@0@Z ENDP ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvEmphasisEntry@@@std@@YAPAPAVCvEmphasisEntry@@IPAPAV1@@Z ; std::_Allocate<CvEmphasisEntry *>
PUBLIC	?_Xlen@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@KAXXZ ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$218650 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$218650[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$218650[ebp], 0
	jbe	SHORT $LN11@Buy
	mov	eax, DWORD PTR __Count$218650[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy
$LN11@Buy:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@KAXXZ ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvEmphasisEntry@@@std@@YAPAPAVCvEmphasisEntry@@IPAPAV1@@Z ; std::_Allocate<CvEmphasisEntry *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T218716 = -28						; size = 4
$T218715 = -24						; size = 4
$T218711 = -20						; size = 4
$T218710 = -16						; size = 4
$T218699 = -12						; size = 4
$T218698 = -8						; size = 4
__Cat$218707 = -2					; size = 1
$T218704 = -1						; size = 1
?_Tidy@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@IAEXXZ PROC ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T218711[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T218710[ebp], ecx
	mov	edx, DWORD PTR $T218711[ebp]
	mov	DWORD PTR $T218699[ebp], edx
	mov	eax, DWORD PTR $T218710[ebp]
	mov	DWORD PTR $T218698[ebp], eax
	mov	cl, BYTE PTR __Cat$218707[ebp]
	mov	BYTE PTR $T218704[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T218716[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T218715[ebp], eax
	mov	ecx, DWORD PTR $T218715[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::_Tidy
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T218720 = -80						; size = 28
$T218719 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@KAXXZ PROC ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T218720[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T218719[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T218719[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T218720[ebp]
	push	eax
	lea	ecx, DWORD PTR $T218719[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T218719[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T218719[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T218720[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T218720[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T218719[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvEmphasisEntry@@V?$allocator@PAVCvEmphasisEntry@@@std@@@std@@KAXXZ ENDP ; std::vector<CvEmphasisEntry *,std::allocator<CvEmphasisEntry *> >::_Xlen
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?5H$05@@YAAAVFDataStream@@AAV0@AAY05H@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??$?5H$05@@YAAAVFDataStream@@AAV0@AAY05H@Z PROC		; operator>><int,6>, COMDAT

; 234  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 235  : 	size_t i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 236  : 	for(i = 0; i < count; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@operator:
	cmp	DWORD PTR _i$[ebp], 6
	jae	SHORT $LN1@operator

; 237  : 	{
; 238  : 		loadFrom >> writeTo[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _writeTo$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 239  : 	}

	jmp	SHORT $LN2@operator
$LN1@operator:

; 240  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 241  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$?5H$05@@YAAAVFDataStream@@AAV0@AAY05H@Z ENDP		; operator>><int,6>
_TEXT	ENDS
EXTRN	?Read@FDataStream@@IAEXAA_N@Z:PROC		; FDataStream::Read
EXTRN	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z:PROC ; CvInfosSerializationHelper::ReadHashed
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfosserializationhelper.h
;	COMDAT ??$ReadHashedDataArray@_N@CvInfosSerializationHelper@@YAXAAVFDataStream@@PA_NH@Z
_TEXT	SEGMENT
_tValue$217545 = -18					; size = 1
_tValue$217540 = -17					; size = 1
_iType$217538 = -16					; size = 4
_bValid$217537 = -9					; size = 1
_iI$217533 = -8						; size = 4
_uiNumEntries$ = -4					; size = 4
_kStream$ = 8						; size = 4
_paArray$ = 12						; size = 4
_iArraySize$ = 16					; size = 4
??$ReadHashedDataArray@_N@CvInfosSerializationHelper@@YAXAAVFDataStream@@PA_NH@Z PROC ; CvInfosSerializationHelper::ReadHashedDataArray<bool>, COMDAT

; 248  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 249  : 	uint uiNumEntries;
; 250  : 
; 251  : 	kStream >> uiNumEntries;

	lea	eax, DWORD PTR _uiNumEntries$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 252  : 
; 253  : 	for(uint iI = 0; iI < uiNumEntries; iI++)

	mov	DWORD PTR _iI$217533[ebp], 0
	jmp	SHORT $LN7@ReadHashed
$LN6@ReadHashed:
	mov	ecx, DWORD PTR _iI$217533[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$217533[ebp], ecx
$LN7@ReadHashed:
	mov	edx, DWORD PTR _iI$217533[ebp]
	cmp	edx, DWORD PTR _uiNumEntries$[ebp]
	jae	SHORT $LN8@ReadHashed

; 254  : 	{
; 255  : 		bool bValid;
; 256  : 		int iType = ReadHashed(kStream, &bValid);

	lea	eax, DWORD PTR _bValid$217537[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z ; CvInfosSerializationHelper::ReadHashed
	add	esp, 8
	mov	DWORD PTR _iType$217538[ebp], eax

; 257  : 		if(iType != -1)

	cmp	DWORD PTR _iType$217538[ebp], -1
	je	SHORT $LN4@ReadHashed

; 258  : 		{
; 259  : 			TData tValue;
; 260  : 			kStream >> tValue;

	lea	edx, DWORD PTR _tValue$217540[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 261  : 			if((int)iType < iArraySize)

	mov	eax, DWORD PTR _iType$217538[ebp]
	cmp	eax, DWORD PTR _iArraySize$[ebp]
	jge	SHORT $LN3@ReadHashed

; 262  : 				paArray[iType] = tValue;

	mov	ecx, DWORD PTR _paArray$[ebp]
	add	ecx, DWORD PTR _iType$217538[ebp]
	mov	dl, BYTE PTR _tValue$217540[ebp]
	mov	BYTE PTR [ecx], dl
$LN3@ReadHashed:

; 263  : 		}

	jmp	SHORT $LN2@ReadHashed
$LN4@ReadHashed:

; 264  : 		else if(!bValid)

	movzx	eax, BYTE PTR _bValid$217537[ebp]
	test	eax, eax
	jne	SHORT $LN2@ReadHashed

; 265  : 		{
; 266  : 			TData tValue;
; 267  : 			kStream >> tValue;

	lea	ecx, DWORD PTR _tValue$217545[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read
$LN2@ReadHashed:

; 268  : 		}
; 269  : 	}

	jmp	SHORT $LN6@ReadHashed
$LN8@ReadHashed:

; 270  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$ReadHashedDataArray@_N@CvInfosSerializationHelper@@YAXAAVFDataStream@@PA_NH@Z ENDP ; CvInfosSerializationHelper::ReadHashedDataArray<bool>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fdatastream.h
_TEXT	ENDS
;	COMDAT ??$?6H$05@@YAAAVFDataStream@@AAV0@AAY05$$CBH@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??$?6H$05@@YAAAVFDataStream@@AAV0@AAY05$$CBH@Z PROC	; operator<<<int,6>, COMDAT

; 223  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 224  : 	size_t i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 225  : 	for(i = 0; i < count; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@operator@2
$LN2@operator@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@operator@2:
	cmp	DWORD PTR _i$[ebp], 6
	jae	SHORT $LN1@operator@2

; 226  : 	{
; 227  : 		saveTo << readFrom[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _readFrom$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 228  : 	}

	jmp	SHORT $LN2@operator@2
$LN1@operator@2:

; 229  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 230  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$?6H$05@@YAAAVFDataStream@@AAV0@AAY05$$CBH@Z ENDP	; operator<<<int,6>
_TEXT	ENDS
EXTRN	?Write@FDataStream@@IAEXAB_N@Z:PROC		; FDataStream::Write
EXTRN	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@W4EmphasizeTypes@@@Z:PROC ; CvInfosSerializationHelper::WriteHashed
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfosserializationhelper.h
;	COMDAT ??$WriteHashedDataArray@W4EmphasizeTypes@@_N@CvInfosSerializationHelper@@YAXAAVFDataStream@@PA_NI@Z
_TEXT	SEGMENT
_eType$217556 = -8					; size = 4
_iI$217552 = -4						; size = 4
_kStream$ = 8						; size = 4
_paArray$ = 12						; size = 4
_uiArraySize$ = 16					; size = 4
??$WriteHashedDataArray@W4EmphasizeTypes@@_N@CvInfosSerializationHelper@@YAXAAVFDataStream@@PA_NI@Z PROC ; CvInfosSerializationHelper::WriteHashedDataArray<enum EmphasizeTypes,bool>, COMDAT

; 559  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 560  : 	kStream << uiArraySize;

	lea	eax, DWORD PTR _uiArraySize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 561  : 
; 562  : 	for(uint iI = 0; iI < uiArraySize; iI++)

	mov	DWORD PTR _iI$217552[ebp], 0
	jmp	SHORT $LN4@WriteHashe
$LN3@WriteHashe:
	mov	ecx, DWORD PTR _iI$217552[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$217552[ebp], ecx
$LN4@WriteHashe:
	mov	edx, DWORD PTR _iI$217552[ebp]
	cmp	edx, DWORD PTR _uiArraySize$[ebp]
	jae	SHORT $LN5@WriteHashe

; 563  : 	{
; 564  : 		const TType eType = static_cast<TType>(iI);

	mov	eax, DWORD PTR _iI$217552[ebp]
	mov	DWORD PTR _eType$217556[ebp], eax

; 565  : 		if(WriteHashed(kStream, eType))

	mov	ecx, DWORD PTR _eType$217556[ebp]
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@W4EmphasizeTypes@@@Z ; CvInfosSerializationHelper::WriteHashed
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@WriteHashe

; 566  : 		{
; 567  : 			kStream << paArray[iI];

	mov	ecx, DWORD PTR _paArray$[ebp]
	add	ecx, DWORD PTR _iI$217552[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write
$LN1@WriteHashe:

; 568  : 		}
; 569  : 	}

	jmp	SHORT $LN3@WriteHashe
$LN5@WriteHashe:

; 570  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$WriteHashedDataArray@W4EmphasizeTypes@@_N@CvInfosSerializationHelper@@YAXAAVFDataStream@@PA_NI@Z ENDP ; CvInfosSerializationHelper::WriteHashedDataArray<enum EmphasizeTypes,bool>
_TEXT	ENDS
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVCvEmphasisEntry@@PAPAV1@@stdext@@YAPAPAVCvEmphasisEntry@@PAPAV1@00@Z
_TEXT	SEGMENT
$T218790 = -26						; size = 1
$T218789 = -25						; size = 1
$T218788 = -24						; size = 4
$T218787 = -20						; size = 4
__Off$218783 = -16					; size = 4
__Result$218784 = -12					; size = 4
__Cat$218775 = -4					; size = 1
$T218772 = -3						; size = 1
$T218771 = -2						; size = 1
$T218770 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvEmphasisEntry@@PAPAV1@@stdext@@YAPAPAVCvEmphasisEntry@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvEmphasisEntry * *,CvEmphasisEntry * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T218770[ebp], al
	mov	cl, BYTE PTR __Cat$218775[ebp]
	mov	BYTE PTR $T218771[ebp], cl
	mov	dl, BYTE PTR $T218770[ebp]
	mov	BYTE PTR $T218790[ebp], dl
	mov	al, BYTE PTR $T218772[ebp]
	mov	BYTE PTR $T218789[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T218788[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T218787[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T218787[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$218783[ebp], eax
	mov	ecx, DWORD PTR __Off$218783[ebp]
	mov	edx, DWORD PTR $T218788[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$218784[ebp], eax
	cmp	DWORD PTR __Off$218783[ebp], 0
	jle	SHORT $LN8@unchecked_
	mov	ecx, DWORD PTR __Off$218783[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T218787[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$218783[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T218788[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_:
	mov	eax, DWORD PTR __Result$218784[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvEmphasisEntry@@PAPAV1@@stdext@@YAPAPAVCvEmphasisEntry@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvEmphasisEntry * *,CvEmphasisEntry * *>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R0?AVbad_alloc@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
xdata$x	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_Ebad_alloc@std@@UAEPAXI@Z ; std::bad_alloc::`vftable'
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	ENDS
;	COMDAT ??$_Allocate@PAVCvEmphasisEntry@@@std@@YAPAPAVCvEmphasisEntry@@IPAPAV1@@Z
_TEXT	SEGMENT
$T218797 = -16						; size = 4
$T218793 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvEmphasisEntry@@@std@@YAPAPAVCvEmphasisEntry@@IPAPAV1@@Z PROC ; std::_Allocate<CvEmphasisEntry *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T218797[ebp], 0
	lea	eax, DWORD PTR $T218797[ebp]
	push	eax
	lea	ecx, DWORD PTR $T218793[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T218793[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T218793[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvEmphasisEntry@@@std@@YAPAPAVCvEmphasisEntry@@IPAPAV1@@Z ENDP ; std::_Allocate<CvEmphasisEntry *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Odtp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
END
