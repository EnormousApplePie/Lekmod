; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvPromotionClasses.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1CvHotKeyInfo@@QAE@XZ				; CvHotKeyInfo::~CvHotKeyInfo
PUBLIC	??_7CvPromotionEntry@@6B@			; CvPromotionEntry::`vftable'
PUBLIC	??0CvPromotionEntry@@QAE@XZ			; CvPromotionEntry::CvPromotionEntry
PUBLIC	?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvPromotionEntry::CacheResults
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	??0CvHotKeyInfo@@QAE@XZ:PROC			; CvHotKeyInfo::CvHotKeyInfo
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??8CvBaseInfo@@UBE_NABV0@@Z:PROC		; CvBaseInfo::operator==
EXTRN	?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z:PROC ; CvBaseInfo::readFrom
EXTRN	?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z:PROC ; CvBaseInfo::writeTo
;	COMDAT ??_7CvPromotionEntry@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_7CvPromotionEntry@@6B@ DD FLAT:?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvPromotionEntry::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvPromotionEntry@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvPromotionEntry@@QAE@XZ$0
__ehfuncinfo$??0CvPromotionEntry@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvPromotionEntry@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvpromotionclasses.cpp
xdata$x	ENDS
;	COMDAT ??0CvPromotionEntry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T219293 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvPromotionEntry@@QAE@XZ PROC			; CvPromotionEntry::CvPromotionEntry, COMDAT
; _this$ = ecx

; 182  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvPromotionEntry@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvHotKeyInfo@@QAE@XZ			; CvHotKeyInfo::CvHotKeyInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvPromotionEntry@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+460], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+464], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+468], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+472], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+476], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+480], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+484], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+488], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+492], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+496], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+500], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+504], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+508], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+512], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+516], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+520], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+524], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+528], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+532], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+536], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+540], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+544], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+548], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+552], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+556], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+560], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+564], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+568], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+572], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+576], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+580], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+584], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+588], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+592], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+596], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+600], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+604], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+608], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+612], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+616], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+620], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+624], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+628], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+632], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+640], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+644], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+648], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+652], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+656], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+660], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+664], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+668], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+672], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+676], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+677], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+680], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+684], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+685], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+688], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+692], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+696], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+700], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+704], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+708], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+712], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+716], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+720], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+724], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+728], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+732], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+736], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+740], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+744], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+748], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+752], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+756], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+760], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+764], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+768], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+772], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+776], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+780], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+784], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+788], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+792], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+793], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+794], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+795], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+796], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+797], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+798], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+799], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+800], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+801], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+802], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+803], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+804], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+805], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+806], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+807], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+808], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+809], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+810], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+811], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+812], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+813], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+814], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+815], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+816], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+817], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+818], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+819], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+820], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+821], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+822], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+823], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+824], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+825], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+826], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+827], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+828], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+829], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+830], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+831], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+832], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+833], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+834], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+835], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+836], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+840], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+844], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+848], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+852], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 856				; 00000358H
	mov	DWORD PTR $T219293[ebp], eax
	mov	ecx, DWORD PTR $T219293[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+884], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+888], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+892], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+896], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+900], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+904], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+908], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+912], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+916], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+920], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+924], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+928], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+932], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+936], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+940], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+944], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+948], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+952], 0

; 183  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvPromotionEntry@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvHotKeyInfo@@QAE@XZ
__ehhandler$??0CvPromotionEntry@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvPromotionEntry@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvPromotionEntry@@QAE@XZ ENDP			; CvPromotionEntry::CvPromotionEntry
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	??1CvBaseInfo@@QAE@XZ				; CvBaseInfo::~CvBaseInfo
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CvHotKeyInfo@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1CvHotKeyInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvHotKeyInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1CvHotKeyInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -76						; size = 4
$T219343 = -36						; size = 4
$T219338 = -32						; size = 4
$T219333 = -28						; size = 4
$T219328 = -24						; size = 4
$T219323 = -20						; size = 4
$T219318 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvHotKeyInfo@@QAE@XZ PROC				; CvHotKeyInfo::~CvHotKeyInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvHotKeyInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 432				; 000001b0H
	mov	DWORD PTR $T219318[ebp], eax
	mov	ecx, DWORD PTR $T219318[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 404				; 00000194H
	mov	DWORD PTR $T219323[ebp], ecx
	mov	ecx, DWORD PTR $T219323[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 376				; 00000178H
	mov	DWORD PTR $T219328[ebp], edx
	mov	ecx, DWORD PTR $T219328[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 348				; 0000015cH
	mov	DWORD PTR $T219333[ebp], eax
	mov	ecx, DWORD PTR $T219333[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	mov	DWORD PTR $T219338[ebp], ecx
	mov	ecx, DWORD PTR $T219338[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 292				; 00000124H
	mov	DWORD PTR $T219343[ebp], edx
	mov	ecx, DWORD PTR $T219343[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 292				; 00000124H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 348				; 0000015cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 404				; 00000194H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvHotKeyInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvHotKeyInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvHotKeyInfo@@QAE@XZ ENDP				; CvHotKeyInfo::~CvHotKeyInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CvBaseInfo@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1CvBaseInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvBaseInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1CvBaseInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T219460 = -48						; size = 4
$T219455 = -44						; size = 4
$T219450 = -40						; size = 4
$T219445 = -36						; size = 4
$T219440 = -32						; size = 4
$T219435 = -28						; size = 4
$T219430 = -24						; size = 4
$T219425 = -20						; size = 4
$T219420 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvBaseInfo@@QAE@XZ PROC				; CvBaseInfo::~CvBaseInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvBaseInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 232				; 000000e8H
	mov	DWORD PTR $T219420[ebp], eax
	mov	ecx, DWORD PTR $T219420[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	mov	DWORD PTR $T219425[ebp], ecx
	mov	ecx, DWORD PTR $T219425[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	mov	DWORD PTR $T219430[ebp], edx
	mov	ecx, DWORD PTR $T219430[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 148				; 00000094H
	mov	DWORD PTR $T219435[ebp], eax
	mov	ecx, DWORD PTR $T219435[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	mov	DWORD PTR $T219440[ebp], ecx
	mov	ecx, DWORD PTR $T219440[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR $T219445[ebp], edx
	mov	ecx, DWORD PTR $T219445[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR $T219450[ebp], eax
	mov	ecx, DWORD PTR $T219450[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR $T219455[ebp], ecx
	mov	ecx, DWORD PTR $T219455[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	mov	DWORD PTR $T219460[ebp], edx
	mov	ecx, DWORD PTR $T219460[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvBaseInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvBaseInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvBaseInfo@@QAE@XZ ENDP				; CvBaseInfo::~CvBaseInfo
PUBLIC	??1CvPromotionEntry@@QAE@XZ			; CvPromotionEntry::~CvPromotionEntry
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??1CvPromotionEntry@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvPromotionEntry@@QAE@XZ$0
__ehfuncinfo$??1CvPromotionEntry@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvPromotionEntry@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvpromotionclasses.cpp
xdata$x	ENDS
;	COMDAT ??1CvPromotionEntry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -224						; size = 4
$T219583 = -160						; size = 4
$T219578 = -156						; size = 4
$T219577 = -152						; size = 4
$T219572 = -148						; size = 4
$T219571 = -144						; size = 4
$T219566 = -140						; size = 4
$T219565 = -136						; size = 4
$T219560 = -132						; size = 4
$T219559 = -128						; size = 4
$T219554 = -124						; size = 4
$T219553 = -120						; size = 4
$T219548 = -116						; size = 4
$T219547 = -112						; size = 4
$T219542 = -108						; size = 4
$T219541 = -104						; size = 4
$T219536 = -100						; size = 4
$T219535 = -96						; size = 4
$T219530 = -92						; size = 4
$T219529 = -88						; size = 4
$T219524 = -84						; size = 4
$T219523 = -80						; size = 4
$T219518 = -76						; size = 4
$T219516 = -72						; size = 4
$T219512 = -68						; size = 4
$T219510 = -64						; size = 4
$T219506 = -60						; size = 4
$T219504 = -56						; size = 4
$T219500 = -52						; size = 4
$T219498 = -48						; size = 4
$T219494 = -44						; size = 4
$T219492 = -40						; size = 4
$T219488 = -36						; size = 4
$T219486 = -32						; size = 4
$T219482 = -28						; size = 4
$T219480 = -24						; size = 4
$T219476 = -20						; size = 4
$T219474 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvPromotionEntry@@QAE@XZ PROC			; CvPromotionEntry::~CvPromotionEntry, COMDAT
; _this$ = ecx

; 187  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvPromotionEntry@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 212				; 000000d4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvPromotionEntry@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 188  : 	SAFE_DELETE_ARRAY(m_piTerrainAttackPercent);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 884				; 00000374H
	mov	DWORD PTR $T219476[ebp], ecx
	mov	edx, DWORD PTR $T219476[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T219474[ebp], eax
	mov	ecx, DWORD PTR $T219474[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T219476[ebp]
	mov	DWORD PTR [edx], 0

; 189  : 	SAFE_DELETE_ARRAY(m_piTerrainDefensePercent);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 888				; 00000378H
	mov	DWORD PTR $T219482[ebp], eax
	mov	ecx, DWORD PTR $T219482[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T219480[ebp], edx
	mov	eax, DWORD PTR $T219480[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T219482[ebp]
	mov	DWORD PTR [ecx], 0

; 190  : 	SAFE_DELETE_ARRAY(m_piFeatureAttackPercent);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 892				; 0000037cH
	mov	DWORD PTR $T219488[ebp], edx
	mov	eax, DWORD PTR $T219488[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T219486[ebp], ecx
	mov	edx, DWORD PTR $T219486[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T219488[ebp]
	mov	DWORD PTR [eax], 0

; 191  : 	SAFE_DELETE_ARRAY(m_piFeatureDefensePercent);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 896				; 00000380H
	mov	DWORD PTR $T219494[ebp], ecx
	mov	edx, DWORD PTR $T219494[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T219492[ebp], eax
	mov	ecx, DWORD PTR $T219492[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T219494[ebp]
	mov	DWORD PTR [edx], 0

; 192  : 	SAFE_DELETE_ARRAY(m_piUnitCombatModifierPercent);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 900				; 00000384H
	mov	DWORD PTR $T219500[ebp], eax
	mov	ecx, DWORD PTR $T219500[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T219498[ebp], edx
	mov	eax, DWORD PTR $T219498[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T219500[ebp]
	mov	DWORD PTR [ecx], 0

; 193  : 	SAFE_DELETE_ARRAY(m_piUnitClassModifierPercent);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 904				; 00000388H
	mov	DWORD PTR $T219506[ebp], edx
	mov	eax, DWORD PTR $T219506[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T219504[ebp], ecx
	mov	edx, DWORD PTR $T219504[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T219506[ebp]
	mov	DWORD PTR [eax], 0

; 194  : 	SAFE_DELETE_ARRAY(m_piDomainModifierPercent);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 908				; 0000038cH
	mov	DWORD PTR $T219512[ebp], ecx
	mov	edx, DWORD PTR $T219512[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T219510[ebp], eax
	mov	ecx, DWORD PTR $T219510[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T219512[ebp]
	mov	DWORD PTR [edx], 0

; 195  : 	SAFE_DELETE_ARRAY(m_piFeaturePassableTech);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 924				; 0000039cH
	mov	DWORD PTR $T219518[ebp], eax
	mov	ecx, DWORD PTR $T219518[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T219516[ebp], edx
	mov	eax, DWORD PTR $T219516[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T219518[ebp]
	mov	DWORD PTR [ecx], 0

; 196  : 	SAFE_DELETE_ARRAY(m_piUnitClassAttackModifier);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 912				; 00000390H
	mov	DWORD PTR $T219524[ebp], edx
	mov	eax, DWORD PTR $T219524[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T219523[ebp], ecx
	mov	edx, DWORD PTR $T219523[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T219524[ebp]
	mov	DWORD PTR [eax], 0

; 197  : 	SAFE_DELETE_ARRAY(m_piUnitClassDefenseModifier);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	mov	DWORD PTR $T219530[ebp], ecx
	mov	edx, DWORD PTR $T219530[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T219529[ebp], eax
	mov	ecx, DWORD PTR $T219529[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T219530[ebp]
	mov	DWORD PTR [edx], 0

; 198  : 	SAFE_DELETE_ARRAY(m_pbTerrainDoubleMove);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 928				; 000003a0H
	mov	DWORD PTR $T219536[ebp], eax
	mov	ecx, DWORD PTR $T219536[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T219535[ebp], edx
	mov	eax, DWORD PTR $T219535[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T219536[ebp]
	mov	DWORD PTR [ecx], 0

; 199  : 	SAFE_DELETE_ARRAY(m_pbFeatureDoubleMove);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 932				; 000003a4H
	mov	DWORD PTR $T219542[ebp], edx
	mov	eax, DWORD PTR $T219542[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T219541[ebp], ecx
	mov	edx, DWORD PTR $T219541[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T219542[ebp]
	mov	DWORD PTR [eax], 0

; 200  : 	SAFE_DELETE_ARRAY(m_pbTerrainImpassable);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 936				; 000003a8H
	mov	DWORD PTR $T219548[ebp], ecx
	mov	edx, DWORD PTR $T219548[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T219547[ebp], eax
	mov	ecx, DWORD PTR $T219547[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T219548[ebp]
	mov	DWORD PTR [edx], 0

; 201  : 	SAFE_DELETE_ARRAY(m_piTerrainPassableTech);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 920				; 00000398H
	mov	DWORD PTR $T219554[ebp], eax
	mov	ecx, DWORD PTR $T219554[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T219553[ebp], edx
	mov	eax, DWORD PTR $T219553[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T219554[ebp]
	mov	DWORD PTR [ecx], 0

; 202  : 	SAFE_DELETE_ARRAY(m_pbFeatureImpassable);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 940				; 000003acH
	mov	DWORD PTR $T219560[ebp], edx
	mov	eax, DWORD PTR $T219560[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T219559[ebp], ecx
	mov	edx, DWORD PTR $T219559[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T219560[ebp]
	mov	DWORD PTR [eax], 0

; 203  : 	SAFE_DELETE_ARRAY(m_pbUnitCombat);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 944				; 000003b0H
	mov	DWORD PTR $T219566[ebp], ecx
	mov	edx, DWORD PTR $T219566[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T219565[ebp], eax
	mov	ecx, DWORD PTR $T219565[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T219566[ebp]
	mov	DWORD PTR [edx], 0

; 204  : 	SAFE_DELETE_ARRAY(m_pbCivilianUnitType);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 948				; 000003b4H
	mov	DWORD PTR $T219572[ebp], eax
	mov	ecx, DWORD PTR $T219572[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T219571[ebp], edx
	mov	eax, DWORD PTR $T219571[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T219572[ebp]
	mov	DWORD PTR [ecx], 0

; 205  : 	SAFE_DELETE_ARRAY(m_pbPostCombatRandomPromotion);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 952				; 000003b8H
	mov	DWORD PTR $T219578[ebp], edx
	mov	eax, DWORD PTR $T219578[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T219577[ebp], ecx
	mov	edx, DWORD PTR $T219577[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T219578[ebp]
	mov	DWORD PTR [eax], 0

; 206  : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 856				; 00000358H
	mov	DWORD PTR $T219583[ebp], ecx
	mov	ecx, DWORD PTR $T219583[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvHotKeyInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvPromotionEntry@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvHotKeyInfo@@QAE@XZ
__ehhandler$??1CvPromotionEntry@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-216]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvPromotionEntry@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvPromotionEntry@@QAE@XZ ENDP			; CvPromotionEntry::~CvPromotionEntry
PUBLIC	??_C@_0P@GCBJCIAG@UnitPromotions?$AA@		; `string'
PUBLIC	??_C@_0CJ@MBBLMIHA@UnitPromotions_PostCombatRandomP@ ; `string'
PUBLIC	??_C@_0N@FPMIADBK@NewPromotion?$AA@		; `string'
PUBLIC	??_C@_0O@IILJPJBB@PromotionType?$AA@		; `string'
PUBLIC	??_C@_0HH@DEKPGJFI@select?5Units?4ID?5from?5UnitPromoti@ ; `string'
PUBLIC	??_C@_0BF@DBJIKPBO@m_pbCivilianUnitType?$AA@	; `string'
PUBLIC	??_C@_0JG@HINGKGDL@select?5UnitCombatInfos?4ID?5from?5U@ ; `string'
PUBLIC	??_C@_0P@PJIJJEEF@m_pbUnitCombat?$AA@		; `string'
PUBLIC	??_C@_0KE@HFFDPDLJ@select?5UnitCombatInfos?4ID?0?5Modif@ ; `string'
PUBLIC	??_C@_0BO@LDBGFCAB@m_piUnitCombatModifierPercent?$AA@ ; `string'
PUBLIC	??_C@_0IB@HILEMOCB@select?5Domains?4ID?0?5Modifier?5from@ ; `string'
PUBLIC	??_C@_0BK@DBHCJAOK@m_piDomainModifierPercent?$AA@ ; `string'
PUBLIC	??_C@_08GMKLKDKJ@Modifier?$AA@			; `string'
PUBLIC	??_C@_0KE@EBCBLBJP@select?5UnitClasses?4ID?0?5Modifier?0@ ; `string'
PUBLIC	??_C@_0BL@NHCLIOIE@UnitPromotions_UnitClasses?$AA@ ; `string'
PUBLIC	??_C@_09KCBIGEDK@FeatureID?$AA@			; `string'
PUBLIC	??_C@_0BAP@FLBEKAPJ@select?5Features?4ID?5as?5FeatureID?0@ ; `string'
PUBLIC	??_C@_0BI@JEBHFCGC@UnitPromotions_Features?$AA@	; `string'
PUBLIC	??_C@_0P@MBGEMJJD@PassableTechID?$AA@		; `string'
PUBLIC	??_C@_0L@MNIKPMED@Impassable?$AA@		; `string'
PUBLIC	??_C@_0L@GFAABCAK@DoubleMove?$AA@		; `string'
PUBLIC	??_C@_07PEDPFCGC@Defense?$AA@			; `string'
PUBLIC	??_C@_06FDAMAAOH@Attack?$AA@			; `string'
PUBLIC	??_C@_09EINBFHAC@TerrainID?$AA@			; `string'
PUBLIC	??_C@_0BAP@GGCJCBCM@select?5Terrains?4ID?5as?5TerrainID?0@ ; `string'
PUBLIC	??_C@_0BI@IIGDFDOG@UnitPromotions_Terrains?$AA@	; `string'
PUBLIC	__real@00000000
PUBLIC	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray
PUBLIC	??_C@_05CFLIFMAE@Units?$AA@			; `string'
PUBLIC	??_C@_0BA@NHHFHDEL@UnitCombatInfos?$AA@		; `string'
PUBLIC	??_C@_07FKLJOGGC@Domains?$AA@			; `string'
PUBLIC	??_C@_0M@HLHJNCC@UnitClasses?$AA@		; `string'
PUBLIC	??_C@_0BD@IEKKLNBC@PromotionPrereqOr9?$AA@	; `string'
PUBLIC	??_C@_0BD@JNLBIMFD@PromotionPrereqOr8?$AA@	; `string'
PUBLIC	??_C@_0BD@BKCJJAJM@PromotionPrereqOr7?$AA@	; `string'
PUBLIC	??_C@_0BD@DDCKBNN@PromotionPrereqOr6?$AA@	; `string'
PUBLIC	??_C@_0BD@CIBPPCBO@PromotionPrereqOr5?$AA@	; `string'
PUBLIC	??_C@_0BD@DBAEMDFP@PromotionPrereqOr4?$AA@	; `string'
PUBLIC	??_C@_0BD@HOEFFFJI@PromotionPrereqOr3?$AA@	; `string'
PUBLIC	??_C@_0BD@GHFOGENJ@PromotionPrereqOr2?$AA@	; `string'
PUBLIC	??_C@_0BD@EMHDDHBK@PromotionPrereqOr1?$AA@	; `string'
PUBLIC	??_C@_0BA@BEMGADGJ@PromotionPrereq?$AA@		; `string'
PUBLIC	??_C@_0N@IGFKNMKA@SeeInvisible?$AA@		; `string'
PUBLIC	??_C@_09EPJGIIIJ@Invisible?$AA@			; `string'
PUBLIC	??_C@_0L@IANCLNMF@TechPrereq?$AA@		; `string'
PUBLIC	??_C@_0BD@DIOMOCAM@LayerAnimationPath?$AA@	; `string'
PUBLIC	??_C@_0BJ@OGAAKMBL@TradeMissionGoldModifier?$AA@ ; `string'
PUBLIC	??_C@_0BO@JKAGNMLN@TradeMissionInfluenceModifier?$AA@ ; `string'
PUBLIC	??_C@_0CE@BJMPMIKG@ReligiousStrengthLossRivalTerrit@ ; `string'
PUBLIC	??_C@_0BK@HOKBFIJO@CityAttackPlunderModifier?$AA@ ; `string'
PUBLIC	??_C@_0BG@CILHBFIF@CapitalDefenseFalloff?$AA@	; `string'
PUBLIC	??_C@_0BH@CDDLEEIL@CapitalDefenseModifier?$AA@	; `string'
PUBLIC	??_C@_0BG@EGJLLMKH@EmbarkDefenseModifier?$AA@	; `string'
PUBLIC	??_C@_0BG@HGLIOLIM@EmbarkExtraVisibility?$AA@	; `string'
PUBLIC	??_C@_0BA@CNOIBFAJ@ExtraWithdrawal?$AA@		; `string'
PUBLIC	??_C@_0BI@INKCACCN@GoldenAgeValueFromKills?$AA@	; `string'
PUBLIC	??_C@_0BH@OLKNAHBI@HPHealedIfDestroyEnemy?$AA@	; `string'
PUBLIC	??_C@_0BD@GBJFGHJJ@ExtraNavalMovement?$AA@	; `string'
PUBLIC	??_C@_09NLCNIMEK@DropRange?$AA@			; `string'
PUBLIC	??_C@_0L@FONMKPAP@DefenseMod?$AA@		; `string'
PUBLIC	??_C@_09IOHPCIAD@AttackMod?$AA@			; `string'
PUBLIC	??_C@_0M@NABOGIIK@AdjacentMod?$AA@		; `string'
PUBLIC	??_C@_0BC@OHMKPOHD@ExperiencePercent?$AA@	; `string'
PUBLIC	??_C@_0BA@KBDHCJII@UpgradeDiscount?$AA@		; `string'
PUBLIC	??_C@_0CA@NCPBFGAA@CombatStrengthNearFriendlyMinor?$AA@ ; `string'
PUBLIC	??_C@_0BM@JMHDEKOL@GoldenAgeForeignAttackBonus?$AA@ ; `string'
PUBLIC	??_C@_0BN@BDINMCNK@OutsideFriendlyLandsModifier?$AA@ ; `string'
PUBLIC	??_C@_0BM@CAOLBPLI@FriendlyLandsAttackModifier?$AA@ ; `string'
PUBLIC	??_C@_0BG@EAPMDGND@FriendlyLandsModifier?$AA@	; `string'
PUBLIC	??_C@_0BL@HINIPOCF@GreatGeneralCombatModifier?$AA@ ; `string'
PUBLIC	??_C@_0CI@KNAJAFGK@GreatGeneralOnOrAdjacentConfersM@ ; `string'
PUBLIC	??_C@_0BN@IFMFNPAD@EmbarkedUnitReceivesMovement?$AA@ ; `string'
PUBLIC	??_C@_0BN@OFHMHAHA@GreatGeneralReceivesMovement?$AA@ ; `string'
PUBLIC	??_C@_0BF@HNNLOAHE@GreatGeneralModifier?$AA@	; `string'
PUBLIC	??_C@_0N@LBAALIJO@GreatAdmiral?$AA@		; `string'
PUBLIC	??_C@_0N@JCHMCFAC@GreatGeneral?$AA@		; `string'
PUBLIC	??_C@_0N@CFMCPMIE@ExtraAttacks?$AA@		; `string'
PUBLIC	??_C@_0N@PGIMHIMO@RoughDefense?$AA@		; `string'
PUBLIC	??_C@_0M@PFHCKEBE@OpenDefense?$AA@		; `string'
PUBLIC	??_C@_0BH@MBACKDCN@NearbyEnemyCombatRange?$AA@	; `string'
PUBLIC	??_C@_0BF@JDDHJBMK@NearbyEnemyCombatMod?$AA@	; `string'
PUBLIC	??_C@_0BE@EPGDEJAB@FlankAttackModifier?$AA@	; `string'
PUBLIC	??_C@_0BB@POIGNGOI@AttackWoundedMod?$AA@	; `string'
PUBLIC	??_C@_0BD@JECJHOEK@AttackFortifiedMod?$AA@	; `string'
PUBLIC	??_C@_0BF@CBPJCGIL@RoughRangedAttackMod?$AA@	; `string'
PUBLIC	??_C@_0M@INLFKGCE@RoughAttack?$AA@		; `string'
PUBLIC	??_C@_0BE@LCHPCHNH@OpenRangedAttackMod?$AA@	; `string'
PUBLIC	??_C@_0L@MFILHAKG@OpenAttack?$AA@		; `string'
PUBLIC	??_C@_0N@JECHMAMH@HillsDefense?$AA@		; `string'
PUBLIC	??_C@_0M@PLBAHAHI@HillsAttack?$AA@		; `string'
PUBLIC	??_C@_0BB@ILGDNJED@RangedDefenseMod?$AA@	; `string'
PUBLIC	??_C@_0M@CFAONGLF@CityDefense?$AA@		; `string'
PUBLIC	??_C@_0L@NJOPCGED@CityAttack?$AA@		; `string'
PUBLIC	??_C@_0O@GACIIML@CombatPercent?$AA@		; `string'
PUBLIC	??_C@_0O@LPIOADGP@NeutralDamage?$AA@		; `string'
PUBLIC	??_C@_0M@MDHDILHK@EnemyDamage?$AA@		; `string'
PUBLIC	??_C@_0BE@MBHCGJPP@NeutralDamageChance?$AA@	; `string'
PUBLIC	??_C@_0BC@DKBIFOMK@EnemyDamageChance?$AA@	; `string'
PUBLIC	??_C@_0BH@DJKFKEFH@AdjacentTileHealChange?$AA@	; `string'
PUBLIC	??_C@_0BD@NMADFNHG@SameTileHealChange?$AA@	; `string'
PUBLIC	??_C@_0BD@FDKGEBJC@FriendlyHealChange?$AA@	; `string'
PUBLIC	??_C@_0BC@EMMIAEHH@NeutralHealChange?$AA@	; `string'
PUBLIC	??_C@_0BA@DMIIELAF@EnemyHealChange?$AA@		; `string'
PUBLIC	??_C@_0M@CKAFGAOO@CargoChange?$AA@		; `string'
PUBLIC	??_C@_0O@PFMMAFHH@EvasionChange?$AA@		; `string'
PUBLIC	??_C@_0BG@KECHKNBB@NumInterceptionChange?$AA@	; `string'
PUBLIC	??_C@_0BG@DLANFOAL@InterceptChanceChange?$AA@	; `string'
PUBLIC	??_C@_0BH@LHPCCLAF@AirSweepCombatModifier?$AA@	; `string'
PUBLIC	??_C@_0CC@GCFBADFM@InterceptionDefenseDamageModifie@ ; `string'
PUBLIC	??_C@_0BL@FGOMGGGH@InterceptionCombatModifier?$AA@ ; `string'
PUBLIC	??_C@_0BF@OAGDHGKL@RangedAttackModifier?$AA@	; `string'
PUBLIC	??_C@_0M@BBOKLMND@RangeChange?$AA@		; `string'
PUBLIC	??_C@_0BD@CAAMFILH@MoveDiscountChange?$AA@	; `string'
PUBLIC	??_C@_0M@JNELDEGO@MovesChange?$AA@		; `string'
PUBLIC	??_C@_0BB@DGGHCNE@VisibilityChange?$AA@		; `string'
PUBLIC	??_C@_0BE@DFBJNAA@HeavyChargeDownhill?$AA@	; `string'
PUBLIC	??_C@_0M@DMHHALDA@HeavyCharge?$AA@		; `string'
PUBLIC	??_C@_0O@DLMMLOCL@ConvertDomain?$AA@		; `string'
PUBLIC	??_C@_0BC@EJOIAGJF@ConvertDomainUnit?$AA@	; `string'
PUBLIC	??_C@_0L@EKONAALM@GiveDomain?$AA@		; `string'
PUBLIC	??_C@_06HCPOFNLI@Sapper?$AA@			; `string'
PUBLIC	??_C@_0BO@EFNCPIGJ@PostCombatPromotionsExclusive?$AA@ ; `string'
PUBLIC	??_C@_0BI@JDLBMOJI@HasPostCombatPromotions?$AA@	; `string'
PUBLIC	??_C@_09ONFNLEAB@IgnoreZOC?$AA@			; `string'
PUBLIC	??_C@_0BK@NLHKOMPI@IgnoreGreatGeneralBenefit?$AA@ ; `string'
PUBLIC	??_C@_0BF@GKCMIFCN@CaptureDefeatedEnemy?$AA@	; `string'
PUBLIC	??_C@_0P@CNOCPHIB@CityAttackOnly?$AA@		; `string'
PUBLIC	??_C@_0BB@COFEIKJH@EmbarkedAllWater?$AA@	; `string'
PUBLIC	??_C@_0CA@LIOCFLBJ@HealIfDestroyExcludesBarbarians?$AA@ ; `string'
PUBLIC	??_C@_0O@ODCFFJIN@HealOnPillage?$AA@		; `string'
PUBLIC	??_C@_0BB@CEEBKLJG@FreePillageMoves?$AA@	; `string'
PUBLIC	??_C@_0BF@BPDHCLGM@RangeAttackIgnoreLOS?$AA@	; `string'
PUBLIC	??_C@_0BC@NAOACEFI@AllowsEmbarkation?$AA@	; `string'
PUBLIC	??_C@_0BA@EDKILALH@AirSweepCapable?$AA@		; `string'
PUBLIC	??_C@_0BG@HJLIJFLF@CanMoveAfterAttacking?$AA@	; `string'
PUBLIC	??_C@_0BC@PHIBAHKE@CanMoveAllTerrain?$AA@	; `string'
PUBLIC	??_C@_05MPMPJNEE@Recon?$AA@			; `string'
PUBLIC	??_C@_0M@BGMOEIPJ@NoRevealMap?$AA@		; `string'
PUBLIC	??_C@_0O@HNEKEKMA@AlwaysHostile?$AA@		; `string'
PUBLIC	??_C@_0BC@BPFLKNIK@HiddenNationality?$AA@	; `string'
PUBLIC	??_C@_0L@EEGCDFDE@NukeImmune?$AA@		; `string'
PUBLIC	??_C@_0BB@EDEJJMBG@NoDefensiveBonus?$AA@	; `string'
PUBLIC	??_C@_0O@KJLADANN@OnlyDefensive?$AA@		; `string'
PUBLIC	??_C@_09IBGBFEAM@NoCapture?$AA@			; `string'
PUBLIC	??_C@_0BC@DKMBECGO@CanMoveImpassable?$AA@	; `string'
PUBLIC	??_C@_0BB@MENGGKPI@FlatMovementCost?$AA@	; `string'
PUBLIC	??_C@_0N@JEEMILAJ@HoveringUnit?$AA@		; `string'
PUBLIC	??_C@_0BF@BGJPEPFP@RoughTerrainEndsTurn?$AA@	; `string'
PUBLIC	??_C@_0BC@PNMBBNHM@IgnoreTerrainCost?$AA@	; `string'
PUBLIC	??_C@_0BA@OKKIPNCP@HillsDoubleMove?$AA@		; `string'
PUBLIC	??_C@_0BE@MIHNMDGG@HealOutsideFriendly?$AA@	; `string'
PUBLIC	??_C@_0L@NAIGBJGJ@AlwaysHeal?$AA@		; `string'
PUBLIC	??_C@_0BC@FACLBCD@RangedSupportFire?$AA@	; `string'
PUBLIC	??_C@_0BI@PPIELJHB@MustSetUpToRangedAttack?$AA@	; `string'
PUBLIC	??_C@_0P@FHNGKGM@RivalTerritory?$AA@		; `string'
PUBLIC	??_C@_0L@JFBEGNKE@EnemyRoute?$AA@		; `string'
PUBLIC	??_C@_05IGBIAPGD@River?$AA@			; `string'
PUBLIC	??_C@_06CDAIIEGB@Amphib?$AA@			; `string'
PUBLIC	??_C@_05JAGJIGAO@Blitz?$AA@			; `string'
PUBLIC	??_C@_06PKACINHD@Leader?$AA@			; `string'
PUBLIC	??_C@_09PHANMOGE@InstaHeal?$AA@			; `string'
PUBLIC	??_C@_0P@GHEAGCAB@NotWithUpgrade?$AA@		; `string'
PUBLIC	??_C@_0BA@KIANEHLG@LostWithUpgrade?$AA@		; `string'
PUBLIC	??_C@_0P@MFCBGKCG@CannotBeChosen?$AA@		; `string'
PUBLIC	?SetSound@CvPromotionEntry@@QAEXPBD@Z		; CvPromotionEntry::SetSound
PUBLIC	??_C@_05MAHMNMLO@Sound?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z:PROC ; CvDatabaseUtility::PopulateArrayByExistence
EXTRN	__imp_?Reset@Results@Database@@QAE_NXZ:PROC
EXTRN	__imp_?GetInt@Results@Database@@QAEHH@Z:PROC
EXTRN	__imp_?Step@Results@Database@@QAE_NXZ:PROC
EXTRN	__imp_?Bind@Results@Database@@QAE_NHPBD_N@Z:PROC
EXTRN	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:PROC ; CvDatabaseUtility::PrepareResults
EXTRN	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CvDatabaseUtility::GetResults
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	?getNumFeatureInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumFeatureInfos
EXTRN	?getNumTerrainInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumTerrainInfos
EXTRN	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z:PROC	; CvDatabaseUtility::MaxRows
EXTRN	__imp_?GetInt@Results@Database@@QAEHPBD@Z:PROC
EXTRN	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z:PROC ; CvGlobals::getInfoTypeForString
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	__imp_?GetBool@Results@Database@@QAE_NPBD@Z:PROC
EXTRN	__imp_?GetText@Results@Database@@QAEPBDPBD@Z:PROC
EXTRN	?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:PROC ; CvHotKeyInfo::CacheResults
EXTRN	__fltused:DWORD
EXTRN	_memset:PROC
;	COMDAT ??_C@_0P@GCBJCIAG@UnitPromotions?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdatabaseutility.h
CONST	SEGMENT
??_C@_0P@GCBJCIAG@UnitPromotions?$AA@ DB 'UnitPromotions', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@MBBLMIHA@UnitPromotions_PostCombatRandomP@
CONST	SEGMENT
??_C@_0CJ@MBBLMIHA@UnitPromotions_PostCombatRandomP@ DB 'UnitPromotions_P'
	DB	'ostCombatRandomPromotion', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FPMIADBK@NewPromotion?$AA@
CONST	SEGMENT
??_C@_0N@FPMIADBK@NewPromotion?$AA@ DB 'NewPromotion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IILJPJBB@PromotionType?$AA@
CONST	SEGMENT
??_C@_0O@IILJPJBB@PromotionType?$AA@ DB 'PromotionType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HH@DEKPGJFI@select?5Units?4ID?5from?5UnitPromoti@
CONST	SEGMENT
??_C@_0HH@DEKPGJFI@select?5Units?4ID?5from?5UnitPromoti@ DB 'select Units'
	DB	'.ID from UnitPromotions_CivilianUnitType inner join Units On '
	DB	'Units.Type = UnitType where PromotionType = ?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DBJIKPBO@m_pbCivilianUnitType?$AA@
CONST	SEGMENT
??_C@_0BF@DBJIKPBO@m_pbCivilianUnitType?$AA@ DB 'm_pbCivilianUnitType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JG@HINGKGDL@select?5UnitCombatInfos?4ID?5from?5U@
CONST	SEGMENT
??_C@_0JG@HINGKGDL@select?5UnitCombatInfos?4ID?5from?5U@ DB 'select UnitC'
	DB	'ombatInfos.ID from UnitPromotions_UnitCombats inner join Unit'
	DB	'CombatInfos On UnitCombatInfos.Type = UnitCombatType where Pr'
	DB	'omotionType = ?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PJIJJEEF@m_pbUnitCombat?$AA@
CONST	SEGMENT
??_C@_0P@PJIJJEEF@m_pbUnitCombat?$AA@ DB 'm_pbUnitCombat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0KE@HFFDPDLJ@select?5UnitCombatInfos?4ID?0?5Modif@
CONST	SEGMENT
??_C@_0KE@HFFDPDLJ@select?5UnitCombatInfos?4ID?0?5Modif@ DB 'select UnitC'
	DB	'ombatInfos.ID, Modifier from UnitPromotions_UnitCombatMods in'
	DB	'ner join UnitCombatInfos on UnitCombatInfos.Type = UnitCombat'
	DB	'Type where PromotionType = ?;', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LDBGFCAB@m_piUnitCombatModifierPercent?$AA@
CONST	SEGMENT
??_C@_0BO@LDBGFCAB@m_piUnitCombatModifierPercent?$AA@ DB 'm_piUnitCombatM'
	DB	'odifierPercent', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0IB@HILEMOCB@select?5Domains?4ID?0?5Modifier?5from@
CONST	SEGMENT
??_C@_0IB@HILEMOCB@select?5Domains?4ID?0?5Modifier?5from@ DB 'select Doma'
	DB	'ins.ID, Modifier from UnitPromotions_Domains inner join Domai'
	DB	'ns on DomainType = Domains.Type where PromotionType = ?;', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DBHCJAOK@m_piDomainModifierPercent?$AA@
CONST	SEGMENT
??_C@_0BK@DBHCJAOK@m_piDomainModifierPercent?$AA@ DB 'm_piDomainModifierP'
	DB	'ercent', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08GMKLKDKJ@Modifier?$AA@
CONST	SEGMENT
??_C@_08GMKLKDKJ@Modifier?$AA@ DB 'Modifier', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0KE@EBCBLBJP@select?5UnitClasses?4ID?0?5Modifier?0@
CONST	SEGMENT
??_C@_0KE@EBCBLBJP@select?5UnitClasses?4ID?0?5Modifier?0@ DB 'select Unit'
	DB	'Classes.ID, Modifier, Attack, Defense from UnitPromotions_Uni'
	DB	'tClasses inner join UnitClasses on UnitClassType = UnitClasse'
	DB	's.Type where PromotionType = ?', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NHCLIOIE@UnitPromotions_UnitClasses?$AA@
CONST	SEGMENT
??_C@_0BL@NHCLIOIE@UnitPromotions_UnitClasses?$AA@ DB 'UnitPromotions_Uni'
	DB	'tClasses', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09KCBIGEDK@FeatureID?$AA@
CONST	SEGMENT
??_C@_09KCBIGEDK@FeatureID?$AA@ DB 'FeatureID', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BAP@FLBEKAPJ@select?5Features?4ID?5as?5FeatureID?0@
CONST	SEGMENT
??_C@_0BAP@FLBEKAPJ@select?5Features?4ID?5as?5FeatureID?0@ DB 'select Fea'
	DB	'tures.ID as FeatureID, coalesce(Technologies.ID, -1) as Passa'
	DB	'bleTechID, UnitPromotions_Features.* from UnitPromotions_Feat'
	DB	'ures inner join Features on FeatureType = Features.Type left '
	DB	'join Technologies on PassableTech = Technologies.Type where P'
	DB	'romotionType = ?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JEBHFCGC@UnitPromotions_Features?$AA@
CONST	SEGMENT
??_C@_0BI@JEBHFCGC@UnitPromotions_Features?$AA@ DB 'UnitPromotions_Featur'
	DB	'es', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MBGEMJJD@PassableTechID?$AA@
CONST	SEGMENT
??_C@_0P@MBGEMJJD@PassableTechID?$AA@ DB 'PassableTechID', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MNIKPMED@Impassable?$AA@
CONST	SEGMENT
??_C@_0L@MNIKPMED@Impassable?$AA@ DB 'Impassable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GFAABCAK@DoubleMove?$AA@
CONST	SEGMENT
??_C@_0L@GFAABCAK@DoubleMove?$AA@ DB 'DoubleMove', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PEDPFCGC@Defense?$AA@
CONST	SEGMENT
??_C@_07PEDPFCGC@Defense?$AA@ DB 'Defense', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDAMAAOH@Attack?$AA@
CONST	SEGMENT
??_C@_06FDAMAAOH@Attack?$AA@ DB 'Attack', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EINBFHAC@TerrainID?$AA@
CONST	SEGMENT
??_C@_09EINBFHAC@TerrainID?$AA@ DB 'TerrainID', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BAP@GGCJCBCM@select?5Terrains?4ID?5as?5TerrainID?0@
CONST	SEGMENT
??_C@_0BAP@GGCJCBCM@select?5Terrains?4ID?5as?5TerrainID?0@ DB 'select Ter'
	DB	'rains.ID as TerrainID, coalesce(Technologies.ID, -1) as Passa'
	DB	'bleTechID, UnitPromotions_Terrains.* from UnitPromotions_Terr'
	DB	'ains inner join Terrains on TerrainType = Terrains.Type left '
	DB	'join Technologies on PassableTech = Technologies.Type where P'
	DB	'romotionType = ?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IIGDFDOG@UnitPromotions_Terrains?$AA@
CONST	SEGMENT
??_C@_0BI@IIGDFDOG@UnitPromotions_Terrains?$AA@ DB 'UnitPromotions_Terrai'
	DB	'ns', 00H					; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_05CFLIFMAE@Units?$AA@
CONST	SEGMENT
??_C@_05CFLIFMAE@Units?$AA@ DB 'Units', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NHHFHDEL@UnitCombatInfos?$AA@
CONST	SEGMENT
??_C@_0BA@NHHFHDEL@UnitCombatInfos?$AA@ DB 'UnitCombatInfos', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07FKLJOGGC@Domains?$AA@
CONST	SEGMENT
??_C@_07FKLJOGGC@Domains?$AA@ DB 'Domains', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HLHJNCC@UnitClasses?$AA@
CONST	SEGMENT
??_C@_0M@HLHJNCC@UnitClasses?$AA@ DB 'UnitClasses', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IEKKLNBC@PromotionPrereqOr9?$AA@
CONST	SEGMENT
??_C@_0BD@IEKKLNBC@PromotionPrereqOr9?$AA@ DB 'PromotionPrereqOr9', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JNLBIMFD@PromotionPrereqOr8?$AA@
CONST	SEGMENT
??_C@_0BD@JNLBIMFD@PromotionPrereqOr8?$AA@ DB 'PromotionPrereqOr8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BKCJJAJM@PromotionPrereqOr7?$AA@
CONST	SEGMENT
??_C@_0BD@BKCJJAJM@PromotionPrereqOr7?$AA@ DB 'PromotionPrereqOr7', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DDCKBNN@PromotionPrereqOr6?$AA@
CONST	SEGMENT
??_C@_0BD@DDCKBNN@PromotionPrereqOr6?$AA@ DB 'PromotionPrereqOr6', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CIBPPCBO@PromotionPrereqOr5?$AA@
CONST	SEGMENT
??_C@_0BD@CIBPPCBO@PromotionPrereqOr5?$AA@ DB 'PromotionPrereqOr5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DBAEMDFP@PromotionPrereqOr4?$AA@
CONST	SEGMENT
??_C@_0BD@DBAEMDFP@PromotionPrereqOr4?$AA@ DB 'PromotionPrereqOr4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HOEFFFJI@PromotionPrereqOr3?$AA@
CONST	SEGMENT
??_C@_0BD@HOEFFFJI@PromotionPrereqOr3?$AA@ DB 'PromotionPrereqOr3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GHFOGENJ@PromotionPrereqOr2?$AA@
CONST	SEGMENT
??_C@_0BD@GHFOGENJ@PromotionPrereqOr2?$AA@ DB 'PromotionPrereqOr2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EMHDDHBK@PromotionPrereqOr1?$AA@
CONST	SEGMENT
??_C@_0BD@EMHDDHBK@PromotionPrereqOr1?$AA@ DB 'PromotionPrereqOr1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BEMGADGJ@PromotionPrereq?$AA@
CONST	SEGMENT
??_C@_0BA@BEMGADGJ@PromotionPrereq?$AA@ DB 'PromotionPrereq', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IGFKNMKA@SeeInvisible?$AA@
CONST	SEGMENT
??_C@_0N@IGFKNMKA@SeeInvisible?$AA@ DB 'SeeInvisible', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EPJGIIIJ@Invisible?$AA@
CONST	SEGMENT
??_C@_09EPJGIIIJ@Invisible?$AA@ DB 'Invisible', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IANCLNMF@TechPrereq?$AA@
CONST	SEGMENT
??_C@_0L@IANCLNMF@TechPrereq?$AA@ DB 'TechPrereq', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DIOMOCAM@LayerAnimationPath?$AA@
CONST	SEGMENT
??_C@_0BD@DIOMOCAM@LayerAnimationPath?$AA@ DB 'LayerAnimationPath', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OGAAKMBL@TradeMissionGoldModifier?$AA@
CONST	SEGMENT
??_C@_0BJ@OGAAKMBL@TradeMissionGoldModifier?$AA@ DB 'TradeMissionGoldModi'
	DB	'fier', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JKAGNMLN@TradeMissionInfluenceModifier?$AA@
CONST	SEGMENT
??_C@_0BO@JKAGNMLN@TradeMissionInfluenceModifier?$AA@ DB 'TradeMissionInf'
	DB	'luenceModifier', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BJMPMIKG@ReligiousStrengthLossRivalTerrit@
CONST	SEGMENT
??_C@_0CE@BJMPMIKG@ReligiousStrengthLossRivalTerrit@ DB 'ReligiousStrengt'
	DB	'hLossRivalTerritory', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HOKBFIJO@CityAttackPlunderModifier?$AA@
CONST	SEGMENT
??_C@_0BK@HOKBFIJO@CityAttackPlunderModifier?$AA@ DB 'CityAttackPlunderMo'
	DB	'difier', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CILHBFIF@CapitalDefenseFalloff?$AA@
CONST	SEGMENT
??_C@_0BG@CILHBFIF@CapitalDefenseFalloff?$AA@ DB 'CapitalDefenseFalloff', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CDDLEEIL@CapitalDefenseModifier?$AA@
CONST	SEGMENT
??_C@_0BH@CDDLEEIL@CapitalDefenseModifier?$AA@ DB 'CapitalDefenseModifier'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EGJLLMKH@EmbarkDefenseModifier?$AA@
CONST	SEGMENT
??_C@_0BG@EGJLLMKH@EmbarkDefenseModifier?$AA@ DB 'EmbarkDefenseModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HGLIOLIM@EmbarkExtraVisibility?$AA@
CONST	SEGMENT
??_C@_0BG@HGLIOLIM@EmbarkExtraVisibility?$AA@ DB 'EmbarkExtraVisibility', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CNOIBFAJ@ExtraWithdrawal?$AA@
CONST	SEGMENT
??_C@_0BA@CNOIBFAJ@ExtraWithdrawal?$AA@ DB 'ExtraWithdrawal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@INKCACCN@GoldenAgeValueFromKills?$AA@
CONST	SEGMENT
??_C@_0BI@INKCACCN@GoldenAgeValueFromKills?$AA@ DB 'GoldenAgeValueFromKil'
	DB	'ls', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OLKNAHBI@HPHealedIfDestroyEnemy?$AA@
CONST	SEGMENT
??_C@_0BH@OLKNAHBI@HPHealedIfDestroyEnemy?$AA@ DB 'HPHealedIfDestroyEnemy'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GBJFGHJJ@ExtraNavalMovement?$AA@
CONST	SEGMENT
??_C@_0BD@GBJFGHJJ@ExtraNavalMovement?$AA@ DB 'ExtraNavalMovement', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NLCNIMEK@DropRange?$AA@
CONST	SEGMENT
??_C@_09NLCNIMEK@DropRange?$AA@ DB 'DropRange', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FONMKPAP@DefenseMod?$AA@
CONST	SEGMENT
??_C@_0L@FONMKPAP@DefenseMod?$AA@ DB 'DefenseMod', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IOHPCIAD@AttackMod?$AA@
CONST	SEGMENT
??_C@_09IOHPCIAD@AttackMod?$AA@ DB 'AttackMod', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NABOGIIK@AdjacentMod?$AA@
CONST	SEGMENT
??_C@_0M@NABOGIIK@AdjacentMod?$AA@ DB 'AdjacentMod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OHMKPOHD@ExperiencePercent?$AA@
CONST	SEGMENT
??_C@_0BC@OHMKPOHD@ExperiencePercent?$AA@ DB 'ExperiencePercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KBDHCJII@UpgradeDiscount?$AA@
CONST	SEGMENT
??_C@_0BA@KBDHCJII@UpgradeDiscount?$AA@ DB 'UpgradeDiscount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NCPBFGAA@CombatStrengthNearFriendlyMinor?$AA@
CONST	SEGMENT
??_C@_0CA@NCPBFGAA@CombatStrengthNearFriendlyMinor?$AA@ DB 'CombatStrengt'
	DB	'hNearFriendlyMinor', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JMHDEKOL@GoldenAgeForeignAttackBonus?$AA@
CONST	SEGMENT
??_C@_0BM@JMHDEKOL@GoldenAgeForeignAttackBonus?$AA@ DB 'GoldenAgeForeignA'
	DB	'ttackBonus', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BDINMCNK@OutsideFriendlyLandsModifier?$AA@
CONST	SEGMENT
??_C@_0BN@BDINMCNK@OutsideFriendlyLandsModifier?$AA@ DB 'OutsideFriendlyL'
	DB	'andsModifier', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CAOLBPLI@FriendlyLandsAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BM@CAOLBPLI@FriendlyLandsAttackModifier?$AA@ DB 'FriendlyLandsAtta'
	DB	'ckModifier', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EAPMDGND@FriendlyLandsModifier?$AA@
CONST	SEGMENT
??_C@_0BG@EAPMDGND@FriendlyLandsModifier?$AA@ DB 'FriendlyLandsModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HINIPOCF@GreatGeneralCombatModifier?$AA@
CONST	SEGMENT
??_C@_0BL@HINIPOCF@GreatGeneralCombatModifier?$AA@ DB 'GreatGeneralCombat'
	DB	'Modifier', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KNAJAFGK@GreatGeneralOnOrAdjacentConfersM@
CONST	SEGMENT
??_C@_0CI@KNAJAFGK@GreatGeneralOnOrAdjacentConfersM@ DB 'GreatGeneralOnOr'
	DB	'AdjacentConfersMovement', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IFMFNPAD@EmbarkedUnitReceivesMovement?$AA@
CONST	SEGMENT
??_C@_0BN@IFMFNPAD@EmbarkedUnitReceivesMovement?$AA@ DB 'EmbarkedUnitRece'
	DB	'ivesMovement', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OFHMHAHA@GreatGeneralReceivesMovement?$AA@
CONST	SEGMENT
??_C@_0BN@OFHMHAHA@GreatGeneralReceivesMovement?$AA@ DB 'GreatGeneralRece'
	DB	'ivesMovement', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HNNLOAHE@GreatGeneralModifier?$AA@
CONST	SEGMENT
??_C@_0BF@HNNLOAHE@GreatGeneralModifier?$AA@ DB 'GreatGeneralModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LBAALIJO@GreatAdmiral?$AA@
CONST	SEGMENT
??_C@_0N@LBAALIJO@GreatAdmiral?$AA@ DB 'GreatAdmiral', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JCHMCFAC@GreatGeneral?$AA@
CONST	SEGMENT
??_C@_0N@JCHMCFAC@GreatGeneral?$AA@ DB 'GreatGeneral', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CFMCPMIE@ExtraAttacks?$AA@
CONST	SEGMENT
??_C@_0N@CFMCPMIE@ExtraAttacks?$AA@ DB 'ExtraAttacks', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PGIMHIMO@RoughDefense?$AA@
CONST	SEGMENT
??_C@_0N@PGIMHIMO@RoughDefense?$AA@ DB 'RoughDefense', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PFHCKEBE@OpenDefense?$AA@
CONST	SEGMENT
??_C@_0M@PFHCKEBE@OpenDefense?$AA@ DB 'OpenDefense', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MBACKDCN@NearbyEnemyCombatRange?$AA@
CONST	SEGMENT
??_C@_0BH@MBACKDCN@NearbyEnemyCombatRange?$AA@ DB 'NearbyEnemyCombatRange'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JDDHJBMK@NearbyEnemyCombatMod?$AA@
CONST	SEGMENT
??_C@_0BF@JDDHJBMK@NearbyEnemyCombatMod?$AA@ DB 'NearbyEnemyCombatMod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EPGDEJAB@FlankAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BE@EPGDEJAB@FlankAttackModifier?$AA@ DB 'FlankAttackModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@POIGNGOI@AttackWoundedMod?$AA@
CONST	SEGMENT
??_C@_0BB@POIGNGOI@AttackWoundedMod?$AA@ DB 'AttackWoundedMod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JECJHOEK@AttackFortifiedMod?$AA@
CONST	SEGMENT
??_C@_0BD@JECJHOEK@AttackFortifiedMod?$AA@ DB 'AttackFortifiedMod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CBPJCGIL@RoughRangedAttackMod?$AA@
CONST	SEGMENT
??_C@_0BF@CBPJCGIL@RoughRangedAttackMod?$AA@ DB 'RoughRangedAttackMod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@INLFKGCE@RoughAttack?$AA@
CONST	SEGMENT
??_C@_0M@INLFKGCE@RoughAttack?$AA@ DB 'RoughAttack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LCHPCHNH@OpenRangedAttackMod?$AA@
CONST	SEGMENT
??_C@_0BE@LCHPCHNH@OpenRangedAttackMod?$AA@ DB 'OpenRangedAttackMod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MFILHAKG@OpenAttack?$AA@
CONST	SEGMENT
??_C@_0L@MFILHAKG@OpenAttack?$AA@ DB 'OpenAttack', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JECHMAMH@HillsDefense?$AA@
CONST	SEGMENT
??_C@_0N@JECHMAMH@HillsDefense?$AA@ DB 'HillsDefense', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PLBAHAHI@HillsAttack?$AA@
CONST	SEGMENT
??_C@_0M@PLBAHAHI@HillsAttack?$AA@ DB 'HillsAttack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@ILGDNJED@RangedDefenseMod?$AA@
CONST	SEGMENT
??_C@_0BB@ILGDNJED@RangedDefenseMod?$AA@ DB 'RangedDefenseMod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CFAONGLF@CityDefense?$AA@
CONST	SEGMENT
??_C@_0M@CFAONGLF@CityDefense?$AA@ DB 'CityDefense', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NJOPCGED@CityAttack?$AA@
CONST	SEGMENT
??_C@_0L@NJOPCGED@CityAttack?$AA@ DB 'CityAttack', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GACIIML@CombatPercent?$AA@
CONST	SEGMENT
??_C@_0O@GACIIML@CombatPercent?$AA@ DB 'CombatPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LPIOADGP@NeutralDamage?$AA@
CONST	SEGMENT
??_C@_0O@LPIOADGP@NeutralDamage?$AA@ DB 'NeutralDamage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MDHDILHK@EnemyDamage?$AA@
CONST	SEGMENT
??_C@_0M@MDHDILHK@EnemyDamage?$AA@ DB 'EnemyDamage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MBHCGJPP@NeutralDamageChance?$AA@
CONST	SEGMENT
??_C@_0BE@MBHCGJPP@NeutralDamageChance?$AA@ DB 'NeutralDamageChance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DKBIFOMK@EnemyDamageChance?$AA@
CONST	SEGMENT
??_C@_0BC@DKBIFOMK@EnemyDamageChance?$AA@ DB 'EnemyDamageChance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DJKFKEFH@AdjacentTileHealChange?$AA@
CONST	SEGMENT
??_C@_0BH@DJKFKEFH@AdjacentTileHealChange?$AA@ DB 'AdjacentTileHealChange'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NMADFNHG@SameTileHealChange?$AA@
CONST	SEGMENT
??_C@_0BD@NMADFNHG@SameTileHealChange?$AA@ DB 'SameTileHealChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FDKGEBJC@FriendlyHealChange?$AA@
CONST	SEGMENT
??_C@_0BD@FDKGEBJC@FriendlyHealChange?$AA@ DB 'FriendlyHealChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EMMIAEHH@NeutralHealChange?$AA@
CONST	SEGMENT
??_C@_0BC@EMMIAEHH@NeutralHealChange?$AA@ DB 'NeutralHealChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DMIIELAF@EnemyHealChange?$AA@
CONST	SEGMENT
??_C@_0BA@DMIIELAF@EnemyHealChange?$AA@ DB 'EnemyHealChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CKAFGAOO@CargoChange?$AA@
CONST	SEGMENT
??_C@_0M@CKAFGAOO@CargoChange?$AA@ DB 'CargoChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PFMMAFHH@EvasionChange?$AA@
CONST	SEGMENT
??_C@_0O@PFMMAFHH@EvasionChange?$AA@ DB 'EvasionChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KECHKNBB@NumInterceptionChange?$AA@
CONST	SEGMENT
??_C@_0BG@KECHKNBB@NumInterceptionChange?$AA@ DB 'NumInterceptionChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DLANFOAL@InterceptChanceChange?$AA@
CONST	SEGMENT
??_C@_0BG@DLANFOAL@InterceptChanceChange?$AA@ DB 'InterceptChanceChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LHPCCLAF@AirSweepCombatModifier?$AA@
CONST	SEGMENT
??_C@_0BH@LHPCCLAF@AirSweepCombatModifier?$AA@ DB 'AirSweepCombatModifier'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GCFBADFM@InterceptionDefenseDamageModifie@
CONST	SEGMENT
??_C@_0CC@GCFBADFM@InterceptionDefenseDamageModifie@ DB 'InterceptionDefe'
	DB	'nseDamageModifier', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FGOMGGGH@InterceptionCombatModifier?$AA@
CONST	SEGMENT
??_C@_0BL@FGOMGGGH@InterceptionCombatModifier?$AA@ DB 'InterceptionCombat'
	DB	'Modifier', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OAGDHGKL@RangedAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BF@OAGDHGKL@RangedAttackModifier?$AA@ DB 'RangedAttackModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BBOKLMND@RangeChange?$AA@
CONST	SEGMENT
??_C@_0M@BBOKLMND@RangeChange?$AA@ DB 'RangeChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CAAMFILH@MoveDiscountChange?$AA@
CONST	SEGMENT
??_C@_0BD@CAAMFILH@MoveDiscountChange?$AA@ DB 'MoveDiscountChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JNELDEGO@MovesChange?$AA@
CONST	SEGMENT
??_C@_0M@JNELDEGO@MovesChange?$AA@ DB 'MovesChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DGGHCNE@VisibilityChange?$AA@
CONST	SEGMENT
??_C@_0BB@DGGHCNE@VisibilityChange?$AA@ DB 'VisibilityChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DFBJNAA@HeavyChargeDownhill?$AA@
CONST	SEGMENT
??_C@_0BE@DFBJNAA@HeavyChargeDownhill?$AA@ DB 'HeavyChargeDownhill', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DMHHALDA@HeavyCharge?$AA@
CONST	SEGMENT
??_C@_0M@DMHHALDA@HeavyCharge?$AA@ DB 'HeavyCharge', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DLMMLOCL@ConvertDomain?$AA@
CONST	SEGMENT
??_C@_0O@DLMMLOCL@ConvertDomain?$AA@ DB 'ConvertDomain', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EJOIAGJF@ConvertDomainUnit?$AA@
CONST	SEGMENT
??_C@_0BC@EJOIAGJF@ConvertDomainUnit?$AA@ DB 'ConvertDomainUnit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EKONAALM@GiveDomain?$AA@
CONST	SEGMENT
??_C@_0L@EKONAALM@GiveDomain?$AA@ DB 'GiveDomain', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCPOFNLI@Sapper?$AA@
CONST	SEGMENT
??_C@_06HCPOFNLI@Sapper?$AA@ DB 'Sapper', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EFNCPIGJ@PostCombatPromotionsExclusive?$AA@
CONST	SEGMENT
??_C@_0BO@EFNCPIGJ@PostCombatPromotionsExclusive?$AA@ DB 'PostCombatPromo'
	DB	'tionsExclusive', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JDLBMOJI@HasPostCombatPromotions?$AA@
CONST	SEGMENT
??_C@_0BI@JDLBMOJI@HasPostCombatPromotions?$AA@ DB 'HasPostCombatPromotio'
	DB	'ns', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09ONFNLEAB@IgnoreZOC?$AA@
CONST	SEGMENT
??_C@_09ONFNLEAB@IgnoreZOC?$AA@ DB 'IgnoreZOC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NLHKOMPI@IgnoreGreatGeneralBenefit?$AA@
CONST	SEGMENT
??_C@_0BK@NLHKOMPI@IgnoreGreatGeneralBenefit?$AA@ DB 'IgnoreGreatGeneralB'
	DB	'enefit', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GKCMIFCN@CaptureDefeatedEnemy?$AA@
CONST	SEGMENT
??_C@_0BF@GKCMIFCN@CaptureDefeatedEnemy?$AA@ DB 'CaptureDefeatedEnemy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CNOCPHIB@CityAttackOnly?$AA@
CONST	SEGMENT
??_C@_0P@CNOCPHIB@CityAttackOnly?$AA@ DB 'CityAttackOnly', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@COFEIKJH@EmbarkedAllWater?$AA@
CONST	SEGMENT
??_C@_0BB@COFEIKJH@EmbarkedAllWater?$AA@ DB 'EmbarkedAllWater', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LIOCFLBJ@HealIfDestroyExcludesBarbarians?$AA@
CONST	SEGMENT
??_C@_0CA@LIOCFLBJ@HealIfDestroyExcludesBarbarians?$AA@ DB 'HealIfDestroy'
	DB	'ExcludesBarbarians', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ODCFFJIN@HealOnPillage?$AA@
CONST	SEGMENT
??_C@_0O@ODCFFJIN@HealOnPillage?$AA@ DB 'HealOnPillage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CEEBKLJG@FreePillageMoves?$AA@
CONST	SEGMENT
??_C@_0BB@CEEBKLJG@FreePillageMoves?$AA@ DB 'FreePillageMoves', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BPDHCLGM@RangeAttackIgnoreLOS?$AA@
CONST	SEGMENT
??_C@_0BF@BPDHCLGM@RangeAttackIgnoreLOS?$AA@ DB 'RangeAttackIgnoreLOS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NAOACEFI@AllowsEmbarkation?$AA@
CONST	SEGMENT
??_C@_0BC@NAOACEFI@AllowsEmbarkation?$AA@ DB 'AllowsEmbarkation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EDKILALH@AirSweepCapable?$AA@
CONST	SEGMENT
??_C@_0BA@EDKILALH@AirSweepCapable?$AA@ DB 'AirSweepCapable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HJLIJFLF@CanMoveAfterAttacking?$AA@
CONST	SEGMENT
??_C@_0BG@HJLIJFLF@CanMoveAfterAttacking?$AA@ DB 'CanMoveAfterAttacking', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PHIBAHKE@CanMoveAllTerrain?$AA@
CONST	SEGMENT
??_C@_0BC@PHIBAHKE@CanMoveAllTerrain?$AA@ DB 'CanMoveAllTerrain', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MPMPJNEE@Recon?$AA@
CONST	SEGMENT
??_C@_05MPMPJNEE@Recon?$AA@ DB 'Recon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BGMOEIPJ@NoRevealMap?$AA@
CONST	SEGMENT
??_C@_0M@BGMOEIPJ@NoRevealMap?$AA@ DB 'NoRevealMap', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HNEKEKMA@AlwaysHostile?$AA@
CONST	SEGMENT
??_C@_0O@HNEKEKMA@AlwaysHostile?$AA@ DB 'AlwaysHostile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BPFLKNIK@HiddenNationality?$AA@
CONST	SEGMENT
??_C@_0BC@BPFLKNIK@HiddenNationality?$AA@ DB 'HiddenNationality', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EEGCDFDE@NukeImmune?$AA@
CONST	SEGMENT
??_C@_0L@EEGCDFDE@NukeImmune?$AA@ DB 'NukeImmune', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EDEJJMBG@NoDefensiveBonus?$AA@
CONST	SEGMENT
??_C@_0BB@EDEJJMBG@NoDefensiveBonus?$AA@ DB 'NoDefensiveBonus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KJLADANN@OnlyDefensive?$AA@
CONST	SEGMENT
??_C@_0O@KJLADANN@OnlyDefensive?$AA@ DB 'OnlyDefensive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IBGBFEAM@NoCapture?$AA@
CONST	SEGMENT
??_C@_09IBGBFEAM@NoCapture?$AA@ DB 'NoCapture', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DKMBECGO@CanMoveImpassable?$AA@
CONST	SEGMENT
??_C@_0BC@DKMBECGO@CanMoveImpassable?$AA@ DB 'CanMoveImpassable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MENGGKPI@FlatMovementCost?$AA@
CONST	SEGMENT
??_C@_0BB@MENGGKPI@FlatMovementCost?$AA@ DB 'FlatMovementCost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JEEMILAJ@HoveringUnit?$AA@
CONST	SEGMENT
??_C@_0N@JEEMILAJ@HoveringUnit?$AA@ DB 'HoveringUnit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BGJPEPFP@RoughTerrainEndsTurn?$AA@
CONST	SEGMENT
??_C@_0BF@BGJPEPFP@RoughTerrainEndsTurn?$AA@ DB 'RoughTerrainEndsTurn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PNMBBNHM@IgnoreTerrainCost?$AA@
CONST	SEGMENT
??_C@_0BC@PNMBBNHM@IgnoreTerrainCost?$AA@ DB 'IgnoreTerrainCost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OKKIPNCP@HillsDoubleMove?$AA@
CONST	SEGMENT
??_C@_0BA@OKKIPNCP@HillsDoubleMove?$AA@ DB 'HillsDoubleMove', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MIHNMDGG@HealOutsideFriendly?$AA@
CONST	SEGMENT
??_C@_0BE@MIHNMDGG@HealOutsideFriendly?$AA@ DB 'HealOutsideFriendly', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NAIGBJGJ@AlwaysHeal?$AA@
CONST	SEGMENT
??_C@_0L@NAIGBJGJ@AlwaysHeal?$AA@ DB 'AlwaysHeal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FACLBCD@RangedSupportFire?$AA@
CONST	SEGMENT
??_C@_0BC@FACLBCD@RangedSupportFire?$AA@ DB 'RangedSupportFire', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PPIELJHB@MustSetUpToRangedAttack?$AA@
CONST	SEGMENT
??_C@_0BI@PPIELJHB@MustSetUpToRangedAttack?$AA@ DB 'MustSetUpToRangedAtta'
	DB	'ck', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FHNGKGM@RivalTerritory?$AA@
CONST	SEGMENT
??_C@_0P@FHNGKGM@RivalTerritory?$AA@ DB 'RivalTerritory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JFBEGNKE@EnemyRoute?$AA@
CONST	SEGMENT
??_C@_0L@JFBEGNKE@EnemyRoute?$AA@ DB 'EnemyRoute', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IGBIAPGD@River?$AA@
CONST	SEGMENT
??_C@_05IGBIAPGD@River?$AA@ DB 'River', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CDAIIEGB@Amphib?$AA@
CONST	SEGMENT
??_C@_06CDAIIEGB@Amphib?$AA@ DB 'Amphib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JAGJIGAO@Blitz?$AA@
CONST	SEGMENT
??_C@_05JAGJIGAO@Blitz?$AA@ DB 'Blitz', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PKACINHD@Leader?$AA@
CONST	SEGMENT
??_C@_06PKACINHD@Leader?$AA@ DB 'Leader', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHANMOGE@InstaHeal?$AA@
CONST	SEGMENT
??_C@_09PHANMOGE@InstaHeal?$AA@ DB 'InstaHeal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GHEAGCAB@NotWithUpgrade?$AA@
CONST	SEGMENT
??_C@_0P@GHEAGCAB@NotWithUpgrade?$AA@ DB 'NotWithUpgrade', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KIANEHLG@LostWithUpgrade?$AA@
CONST	SEGMENT
??_C@_0BA@KIANEHLG@LostWithUpgrade?$AA@ DB 'LostWithUpgrade', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MFCBGKCG@CannotBeChosen?$AA@
CONST	SEGMENT
??_C@_0P@MFCBGKCG@CannotBeChosen?$AA@ DB 'CannotBeChosen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAHMNMLO@Sound?$AA@
CONST	SEGMENT
??_C@_05MAHMNMLO@Sound?$AA@ DB 'Sound', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$6
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvpromotionclasses.cpp
xdata$x	ENDS
;	COMDAT ?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -628						; size = 4
$T219796 = -624						; size = 4
$T219795 = -620						; size = 4
_i$219790 = -616					; size = 4
$T219784 = -612						; size = 4
$T219783 = -608						; size = 4
_i$219778 = -604					; size = 4
$T219762 = -560						; size = 4
$T219761 = -556						; size = 4
_i$219756 = -552					; size = 4
$T219750 = -548						; size = 4
$T219749 = -544						; size = 4
_i$219744 = -540					; size = 4
$T219732 = -512						; size = 4
$T219731 = -508						; size = 4
_i$219726 = -504					; size = 4
$T219720 = -500						; size = 4
$T219719 = -496						; size = 4
_i$219714 = -492					; size = 4
$T219692 = -463						; size = 1
$T219691 = -462						; size = 1
$T219690 = -461						; size = 1
$T219689 = -460						; size = 1
$T219688 = -459						; size = 1
$T219687 = -458						; size = 1
$T219686 = -457						; size = 1
_iUnit$217398 = -456					; size = 4
_szSQL$217391 = -452					; size = 4
_pResults$217389 = -448					; size = 4
_sqlKey$217387 = -444					; size = 28
_iUnitCombatInfoID$217386 = -416			; size = 4
_szSQL$217379 = -412					; size = 4
_pResults$217377 = -408					; size = 4
_sqlKey$217375 = -404					; size = 28
_iUnitCombatMod$217374 = -376				; size = 4
_iUnitCombatID$217373 = -372				; size = 4
_szSQL$217366 = -368					; size = 4
_pResults$217364 = -364					; size = 4
_sqlKey$217362 = -360					; size = 28
_iDomainMod$217360 = -332				; size = 4
_iDomainID$217359 = -328				; size = 4
_szSQL$217352 = -324					; size = 4
_pResults$217350 = -320					; size = 4
_sqlKey$217348 = -316					; size = 28
_iAttack$217346 = -288					; size = 4
_iUnitClassID$217343 = -284				; size = 4
_iModifier$217344 = -280				; size = 4
_iDefense$217347 = -276					; size = 4
_szSQL$217336 = -272					; size = 4
_pResults$217334 = -268					; size = 4
_sqlKey$217332 = -264					; size = 28
_iFeatureID$217325 = -236				; size = 4
_bDoubleMove$217329 = -229				; size = 1
_iPassableTech$217331 = -228				; size = 4
_iFeatureAttack$217327 = -224				; size = 4
_iFeatureDefense$217328 = -220				; size = 4
_bImpassable$217330 = -213				; size = 1
_szSQL$217318 = -212					; size = 4
_pResults$217316 = -208					; size = 4
_sqlKey$217314 = -204					; size = 28
_iTerrainAttack$217304 = -176				; size = 4
_iTerrainDefense$217306 = -172				; size = 4
_bDoubleMove$217308 = -165				; size = 1
_iTerrainID$217302 = -164				; size = 4
_iPassableTechID$217312 = -160				; size = 4
_bImpassable$217310 = -153				; size = 1
_szSQL$217295 = -152					; size = 4
_pResults$217293 = -148					; size = 4
_sqlKey$217291 = -144					; size = 28
__$ArrayPad$ = -116					; size = 4
_szTechPrereq$ = -112					; size = 4
_szPromotionPrereq$ = -108				; size = 4
_iNumUnitClasses$ = -104				; size = 4
_szLayerAnimationPath$ = -100				; size = 4
_szPromotionPrereqOr3$ = -96				; size = 4
_szPromotionPrereqOr7$ = -92				; size = 4
_szPromotionPrereqOr10$ = -88				; size = 4
_szPromotionPrereqOr4$ = -84				; size = 4
_szPromotionPrereqOr8$ = -80				; size = 4
_iNumTerrains$ = -76					; size = 4
_iNumDomains$ = -72					; size = 4
_szConvertDomain$ = -68					; size = 4
_iNumFeatures$ = -64					; size = 4
_szPromotionType$ = -60					; size = 4
_szPromotionPrereqOr1$ = -56				; size = 4
_szPromotionPrereqOr5$ = -52				; size = 4
_szPromotionPrereqOr9$ = -48				; size = 4
_iNumUnitCombatClasses$ = -44				; size = 4
_iNumUnitTypes$ = -40					; size = 4
_szGiveDomain$ = -36					; size = 4
_szInvisible$ = -32					; size = 4
_szSeeInvisible$ = -28					; size = 4
_szPromotionPrereqOr2$ = -24				; size = 4
_szPromotionPrereqOr6$ = -20				; size = 4
_szConvertDomainUnit$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvPromotionEntry::CacheResults, COMDAT
; _this$ = ecx

; 209  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 616				; 00000268H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 	if(!CvHotKeyInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvHotKeyInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN30@CacheResul

; 211  : 		return false;

	xor	al, al
	jmp	$LN31@CacheResul
$LN30@CacheResul:

; 212  : 
; 213  : 	SetSound(kResults.GetText("Sound"));

	push	OFFSET ??_C@_05MAHMNMLO@Sound?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSound@CvPromotionEntry@@QAEXPBD@Z	; CvPromotionEntry::SetSound

; 214  : 
; 215  : 	//Basic Properties
; 216  : 	m_bCannotBeChosen = kResults.GetBool("CannotBeChosen");

	push	OFFSET ??_C@_0P@MFCBGKCG@CannotBeChosen?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+792], al

; 217  : 	m_bLostWithUpgrade = kResults.GetBool("LostWithUpgrade");

	push	OFFSET ??_C@_0BA@KIANEHLG@LostWithUpgrade?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+793], al

; 218  : 	m_bNotWithUpgrade = kResults.GetBool("NotWithUpgrade");

	push	OFFSET ??_C@_0P@GHEAGCAB@NotWithUpgrade?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+794], al

; 219  : 	m_bInstaHeal = kResults.GetBool("InstaHeal");

	push	OFFSET ??_C@_09PHANMOGE@InstaHeal?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+795], al

; 220  : 	m_bLeader = kResults.GetBool("Leader");

	push	OFFSET ??_C@_06PKACINHD@Leader?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+796], al

; 221  : 	m_bBlitz = kResults.GetBool("Blitz");

	push	OFFSET ??_C@_05JAGJIGAO@Blitz?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+797], al

; 222  : 	m_bAmphib = kResults.GetBool("Amphib");

	push	OFFSET ??_C@_06CDAIIEGB@Amphib?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+798], al

; 223  : 	m_bRiver = kResults.GetBool("River");

	push	OFFSET ??_C@_05IGBIAPGD@River?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+799], al

; 224  : 	m_bEnemyRoute = kResults.GetBool("EnemyRoute");

	push	OFFSET ??_C@_0L@JFBEGNKE@EnemyRoute?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+800], al

; 225  : 	m_bRivalTerritory = kResults.GetBool("RivalTerritory");

	push	OFFSET ??_C@_0P@FHNGKGM@RivalTerritory?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+801], al

; 226  : 	m_bMustSetUpToRangedAttack = kResults.GetBool("MustSetUpToRangedAttack");

	push	OFFSET ??_C@_0BI@PPIELJHB@MustSetUpToRangedAttack?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+802], al

; 227  : 	m_bRangedSupportFire= kResults.GetBool("RangedSupportFire");

	push	OFFSET ??_C@_0BC@FACLBCD@RangedSupportFire?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+803], al

; 228  : 	m_bAlwaysHeal = kResults.GetBool("AlwaysHeal");

	push	OFFSET ??_C@_0L@NAIGBJGJ@AlwaysHeal?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+804], al

; 229  : 	m_bHealOutsideFriendly = kResults.GetBool("HealOutsideFriendly");

	push	OFFSET ??_C@_0BE@MIHNMDGG@HealOutsideFriendly?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+805], al

; 230  : 	m_bHillsDoubleMove = kResults.GetBool("HillsDoubleMove");

	push	OFFSET ??_C@_0BA@OKKIPNCP@HillsDoubleMove?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+806], al

; 231  : 	m_bIgnoreTerrainCost = kResults.GetBool("IgnoreTerrainCost");

	push	OFFSET ??_C@_0BC@PNMBBNHM@IgnoreTerrainCost?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+807], al

; 232  : 	m_bRoughTerrainEndsTurn = kResults.GetBool("RoughTerrainEndsTurn");

	push	OFFSET ??_C@_0BF@BGJPEPFP@RoughTerrainEndsTurn?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+808], al

; 233  : 	m_bHoveringUnit = kResults.GetBool("HoveringUnit");

	push	OFFSET ??_C@_0N@JEEMILAJ@HoveringUnit?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+809], al

; 234  : 	m_bFlatMovementCost = kResults.GetBool("FlatMovementCost");

	push	OFFSET ??_C@_0BB@MENGGKPI@FlatMovementCost?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+810], al

; 235  : 	m_bCanMoveImpassable = kResults.GetBool("CanMoveImpassable");

	push	OFFSET ??_C@_0BC@DKMBECGO@CanMoveImpassable?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+811], al

; 236  : 	m_bNoCapture = kResults.GetBool("NoCapture");

	push	OFFSET ??_C@_09IBGBFEAM@NoCapture?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+812], al

; 237  : 	m_bOnlyDefensive = kResults.GetBool("OnlyDefensive");

	push	OFFSET ??_C@_0O@KJLADANN@OnlyDefensive?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+813], al

; 238  : 	m_bNoDefensiveBonus = kResults.GetBool("NoDefensiveBonus");

	push	OFFSET ??_C@_0BB@EDEJJMBG@NoDefensiveBonus?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+814], al

; 239  : 	m_bNukeImmune = kResults.GetBool("NukeImmune");

	push	OFFSET ??_C@_0L@EEGCDFDE@NukeImmune?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+815], al

; 240  : 	m_bHiddenNationality = kResults.GetBool("HiddenNationality");

	push	OFFSET ??_C@_0BC@BPFLKNIK@HiddenNationality?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+816], al

; 241  : 	m_bAlwaysHostile = kResults.GetBool("AlwaysHostile");

	push	OFFSET ??_C@_0O@HNEKEKMA@AlwaysHostile?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+817], al

; 242  : 	m_bNoRevealMap = kResults.GetBool("NoRevealMap");

	push	OFFSET ??_C@_0M@BGMOEIPJ@NoRevealMap?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+818], al

; 243  : 	m_bRecon = kResults.GetBool("Recon");

	push	OFFSET ??_C@_05MPMPJNEE@Recon?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+819], al

; 244  : 	m_bCanMoveAllTerrain = kResults.GetBool("CanMoveAllTerrain");

	push	OFFSET ??_C@_0BC@PHIBAHKE@CanMoveAllTerrain?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+820], al

; 245  : 	m_bCanMoveAfterAttacking = kResults.GetBool("CanMoveAfterAttacking");

	push	OFFSET ??_C@_0BG@HJLIJFLF@CanMoveAfterAttacking?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+821], al

; 246  : 	m_bAirSweepCapable = kResults.GetBool("AirSweepCapable");

	push	OFFSET ??_C@_0BA@EDKILALH@AirSweepCapable?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+822], al

; 247  : 	m_bAllowsEmbarkation = kResults.GetBool("AllowsEmbarkation");

	push	OFFSET ??_C@_0BC@NAOACEFI@AllowsEmbarkation?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+823], al

; 248  : 	m_bRangeAttackIgnoreLOS = kResults.GetBool("RangeAttackIgnoreLOS");

	push	OFFSET ??_C@_0BF@BPDHCLGM@RangeAttackIgnoreLOS?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+824], al

; 249  : 	m_bFreePillageMoves = kResults.GetBool("FreePillageMoves");

	push	OFFSET ??_C@_0BB@CEEBKLJG@FreePillageMoves?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+825], al

; 250  : 	m_bHealOnPillage = kResults.GetBool("HealOnPillage");

	push	OFFSET ??_C@_0O@ODCFFJIN@HealOnPillage?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+826], al

; 251  : 	m_bHealIfDefeatExcludesBarbarians = kResults.GetBool("HealIfDestroyExcludesBarbarians");

	push	OFFSET ??_C@_0CA@LIOCFLBJ@HealIfDestroyExcludesBarbarians?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+827], al

; 252  : 	m_bEmbarkedAllWater = kResults.GetBool("EmbarkedAllWater");

	push	OFFSET ??_C@_0BB@COFEIKJH@EmbarkedAllWater?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+828], al

; 253  : 	m_bCityAttackOnly = kResults.GetBool("CityAttackOnly");

	push	OFFSET ??_C@_0P@CNOCPHIB@CityAttackOnly?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+829], al

; 254  : 	m_bCaptureDefeatedEnemy = kResults.GetBool("CaptureDefeatedEnemy");

	push	OFFSET ??_C@_0BF@GKCMIFCN@CaptureDefeatedEnemy?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+830], al

; 255  : 	m_bIgnoreGreatGeneralBenefit = kResults.GetBool("IgnoreGreatGeneralBenefit");

	push	OFFSET ??_C@_0BK@NLHKOMPI@IgnoreGreatGeneralBenefit?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+831], al

; 256  : 	m_bIgnoreZOC = kResults.GetBool("IgnoreZOC");

	push	OFFSET ??_C@_09ONFNLEAB@IgnoreZOC?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+832], al

; 257  : 	m_bHasPostCombatPromotions = kResults.GetBool("HasPostCombatPromotions");

	push	OFFSET ??_C@_0BI@JDLBMOJI@HasPostCombatPromotions?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+833], al

; 258  : 	m_bPostCombatPromotionsExclusive = kResults.GetBool("PostCombatPromotionsExclusive");

	push	OFFSET ??_C@_0BO@EFNCPIGJ@PostCombatPromotionsExclusive?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+834], al

; 259  : 	m_bSapper = kResults.GetBool("Sapper");

	push	OFFSET ??_C@_06HCPOFNLI@Sapper?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+835], al

; 260  : 
; 261  : 	// CMP
; 262  : 	const char* szGiveDomain = kResults.GetText("GiveDomain");

	push	OFFSET ??_C@_0L@EKONAALM@GiveDomain?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szGiveDomain$[ebp], eax

; 263  : 	m_iGiveDomain = (DomainTypes)GC.getInfoTypeForString(szGiveDomain, true);

	push	1
	mov	eax, DWORD PTR _szGiveDomain$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+836], eax

; 264  : 	const char* szConvertDomainUnit = kResults.GetText("ConvertDomainUnit");

	push	OFFSET ??_C@_0BC@EJOIAGJF@ConvertDomainUnit?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szConvertDomainUnit$[ebp], eax

; 265  : 	m_iConvertDomainUnit = (UnitTypes)GC.getInfoTypeForString(szConvertDomainUnit, true);

	push	1
	mov	edx, DWORD PTR _szConvertDomainUnit$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+840], eax

; 266  : 	const char* szConvertDomain = kResults.GetText("ConvertDomain");

	push	OFFSET ??_C@_0O@DLMMLOCL@ConvertDomain?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szConvertDomain$[ebp], eax

; 267  : 	m_iConvertDomain = (DomainTypes)GC.getInfoTypeForString(szConvertDomain, true);

	push	1
	mov	edx, DWORD PTR _szConvertDomain$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+844], eax

; 268  : 	//
; 269  : 
; 270  : 	m_bCanHeavyCharge = kResults.GetBool("HeavyCharge");

	push	OFFSET ??_C@_0M@DMHHALDA@HeavyCharge?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+848], al

; 271  : #ifdef NQ_HEAVY_CHARGE_DOWNHILL
; 272  : 	m_iHeavyChargeDownhill = kResults.GetInt("HeavyChargeDownhill");

	push	OFFSET ??_C@_0BE@DFBJNAA@HeavyChargeDownhill?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+852], eax

; 273  : #endif
; 274  : 
; 275  : 	m_iVisibilityChange = kResults.GetInt("VisibilityChange");

	push	OFFSET ??_C@_0BB@DGGHCNE@VisibilityChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+520], eax

; 276  : 	m_iMovesChange = kResults.GetInt("MovesChange");

	push	OFFSET ??_C@_0M@JNELDEGO@MovesChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+524], eax

; 277  : 	m_iMoveDiscountChange = kResults.GetInt("MoveDiscountChange");

	push	OFFSET ??_C@_0BD@CAAMFILH@MoveDiscountChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+528], eax

; 278  : 	m_iRangeChange = kResults.GetInt("RangeChange");

	push	OFFSET ??_C@_0M@BBOKLMND@RangeChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+532], eax

; 279  : 	m_iRangedAttackModifier = kResults.GetInt("RangedAttackModifier");

	push	OFFSET ??_C@_0BF@OAGDHGKL@RangedAttackModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+536], eax

; 280  : 	m_iInterceptionCombatModifier = kResults.GetInt("InterceptionCombatModifier");

	push	OFFSET ??_C@_0BL@FGOMGGGH@InterceptionCombatModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+540], eax

; 281  : 	m_iInterceptionDefenseDamageModifier = kResults.GetInt("InterceptionDefenseDamageModifier");

	push	OFFSET ??_C@_0CC@GCFBADFM@InterceptionDefenseDamageModifie@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+544], eax

; 282  : 	m_iAirSweepCombatModifier = kResults.GetInt("AirSweepCombatModifier");

	push	OFFSET ??_C@_0BH@LHPCCLAF@AirSweepCombatModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+548], eax

; 283  : 	m_iInterceptChanceChange = kResults.GetInt("InterceptChanceChange");

	push	OFFSET ??_C@_0BG@DLANFOAL@InterceptChanceChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+552], eax

; 284  : 	m_iNumInterceptionChange = kResults.GetInt("NumInterceptionChange");

	push	OFFSET ??_C@_0BG@KECHKNBB@NumInterceptionChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+556], eax

; 285  : 	m_iEvasionChange = kResults.GetInt("EvasionChange");

	push	OFFSET ??_C@_0O@PFMMAFHH@EvasionChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+560], eax

; 286  : 	m_iCargoChange = kResults.GetInt("CargoChange");

	push	OFFSET ??_C@_0M@CKAFGAOO@CargoChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+564], eax

; 287  : 	m_iEnemyHealChange = kResults.GetInt("EnemyHealChange");

	push	OFFSET ??_C@_0BA@DMIIELAF@EnemyHealChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+568], eax

; 288  : 	m_iNeutralHealChange = kResults.GetInt("NeutralHealChange");

	push	OFFSET ??_C@_0BC@EMMIAEHH@NeutralHealChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+572], eax

; 289  : 	m_iFriendlyHealChange = kResults.GetInt("FriendlyHealChange");

	push	OFFSET ??_C@_0BD@FDKGEBJC@FriendlyHealChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+576], eax

; 290  : 	m_iSameTileHealChange = kResults.GetInt("SameTileHealChange");

	push	OFFSET ??_C@_0BD@NMADFNHG@SameTileHealChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+580], eax

; 291  : 	m_iAdjacentTileHealChange = kResults.GetInt("AdjacentTileHealChange");

	push	OFFSET ??_C@_0BH@DJKFKEFH@AdjacentTileHealChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+584], eax

; 292  : 	m_iEnemyDamageChance = kResults.GetInt("EnemyDamageChance");

	push	OFFSET ??_C@_0BC@DKBIFOMK@EnemyDamageChance?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+588], eax

; 293  : 	m_iNeutralDamageChance = kResults.GetInt("NeutralDamageChance");

	push	OFFSET ??_C@_0BE@MBHCGJPP@NeutralDamageChance?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+592], eax

; 294  : 	m_iEnemyDamage = kResults.GetInt("EnemyDamage");

	push	OFFSET ??_C@_0M@MDHDILHK@EnemyDamage?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+596], eax

; 295  : 	m_iNeutralDamage = kResults.GetInt("NeutralDamage");

	push	OFFSET ??_C@_0O@LPIOADGP@NeutralDamage?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+600], eax

; 296  : 	m_iCombatPercent = kResults.GetInt("CombatPercent");

	push	OFFSET ??_C@_0O@GACIIML@CombatPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+604], eax

; 297  : 	m_iCityAttackPercent = kResults.GetInt("CityAttack");

	push	OFFSET ??_C@_0L@NJOPCGED@CityAttack?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+608], eax

; 298  : 	m_iCityDefensePercent = kResults.GetInt("CityDefense");

	push	OFFSET ??_C@_0M@CFAONGLF@CityDefense?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+612], eax

; 299  : 	m_iRangedDefenseMod = kResults.GetInt("RangedDefenseMod");

	push	OFFSET ??_C@_0BB@ILGDNJED@RangedDefenseMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+616], eax

; 300  : 	m_iHillsAttackPercent = kResults.GetInt("HillsAttack");

	push	OFFSET ??_C@_0M@PLBAHAHI@HillsAttack?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+620], eax

; 301  : 	m_iHillsDefensePercent = kResults.GetInt("HillsDefense");

	push	OFFSET ??_C@_0N@JECHMAMH@HillsDefense?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+624], eax

; 302  : 	m_iOpenAttackPercent = kResults.GetInt("OpenAttack");

	push	OFFSET ??_C@_0L@MFILHAKG@OpenAttack?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+628], eax

; 303  : 	m_iOpenRangedAttackMod = kResults.GetInt("OpenRangedAttackMod");

	push	OFFSET ??_C@_0BE@LCHPCHNH@OpenRangedAttackMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+632], eax

; 304  : 	m_iRoughAttackPercent = kResults.GetInt("RoughAttack");

	push	OFFSET ??_C@_0M@INLFKGCE@RoughAttack?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+636], eax

; 305  : 	m_iRoughRangedAttackMod = kResults.GetInt("RoughRangedAttackMod");

	push	OFFSET ??_C@_0BF@CBPJCGIL@RoughRangedAttackMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+640], eax

; 306  : 	m_iAttackFortifiedMod = kResults.GetInt("AttackFortifiedMod");

	push	OFFSET ??_C@_0BD@JECJHOEK@AttackFortifiedMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+644], eax

; 307  : 	m_iAttackWoundedMod = kResults.GetInt("AttackWoundedMod");

	push	OFFSET ??_C@_0BB@POIGNGOI@AttackWoundedMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+648], eax

; 308  : 	m_iFlankAttackModifier = kResults.GetInt("FlankAttackModifier");

	push	OFFSET ??_C@_0BE@EPGDEJAB@FlankAttackModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+652], eax

; 309  : 	m_iNearbyEnemyCombatMod = kResults.GetInt("NearbyEnemyCombatMod");

	push	OFFSET ??_C@_0BF@JDDHJBMK@NearbyEnemyCombatMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+656], eax

; 310  : 	m_iNearbyEnemyCombatRange = kResults.GetInt("NearbyEnemyCombatRange");

	push	OFFSET ??_C@_0BH@MBACKDCN@NearbyEnemyCombatRange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+660], eax

; 311  : 	m_iOpenDefensePercent = kResults.GetInt("OpenDefense");

	push	OFFSET ??_C@_0M@PFHCKEBE@OpenDefense?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+664], eax

; 312  : 	m_iRoughDefensePercent = kResults.GetInt("RoughDefense");

	push	OFFSET ??_C@_0N@PGIMHIMO@RoughDefense?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+668], eax

; 313  : 	m_iExtraAttacks = kResults.GetInt("ExtraAttacks");

	push	OFFSET ??_C@_0N@CFMCPMIE@ExtraAttacks?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+672], eax

; 314  : 	m_bGreatGeneral = kResults.GetBool("GreatGeneral");

	push	OFFSET ??_C@_0N@JCHMCFAC@GreatGeneral?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+676], al

; 315  : 	m_bGreatAdmiral = kResults.GetBool("GreatAdmiral");

	push	OFFSET ??_C@_0N@LBAALIJO@GreatAdmiral?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+677], al

; 316  : 	m_iGreatGeneralModifier = kResults.GetInt("GreatGeneralModifier");

	push	OFFSET ??_C@_0BF@HNNLOAHE@GreatGeneralModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+680], eax

; 317  : 	m_bGreatGeneralReceivesMovement = kResults.GetBool("GreatGeneralReceivesMovement");

	push	OFFSET ??_C@_0BN@OFHMHAHA@GreatGeneralReceivesMovement?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+684], al

; 318  : 	m_bEmbarkedUnitReceivesMovement = kResults.GetBool("EmbarkedUnitReceivesMovement"); // NQMP GJS - Danish Longship

	push	OFFSET ??_C@_0BN@IFMFNPAD@EmbarkedUnitReceivesMovement?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+685], al

; 319  : #ifdef NQ_ART_OF_WAR_PROMOTION
; 320  : 	m_iGreatGeneralOnOrAdjacentConfersMovement = kResults.GetInt("GreatGeneralOnOrAdjacentConfersMovement");

	push	OFFSET ??_C@_0CI@KNAJAFGK@GreatGeneralOnOrAdjacentConfersM@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+688], eax

; 321  : #endif
; 322  : 	m_iGreatGeneralCombatModifier = kResults.GetInt("GreatGeneralCombatModifier");

	push	OFFSET ??_C@_0BL@HINIPOCF@GreatGeneralCombatModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+692], eax

; 323  : 	m_iFriendlyLandsModifier = kResults.GetInt("FriendlyLandsModifier");

	push	OFFSET ??_C@_0BG@EAPMDGND@FriendlyLandsModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+696], eax

; 324  : 	m_iFriendlyLandsAttackModifier = kResults.GetInt("FriendlyLandsAttackModifier");

	push	OFFSET ??_C@_0BM@CAOLBPLI@FriendlyLandsAttackModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+700], eax

; 325  : 	m_iOutsideFriendlyLandsModifier = kResults.GetInt("OutsideFriendlyLandsModifier");

	push	OFFSET ??_C@_0BN@BDINMCNK@OutsideFriendlyLandsModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+704], eax

; 326  : #ifdef NQ_GOLDEN_AGE_FOREIGN_ATTACK_BONUS
; 327  : 	m_iGoldenAgeForeignAttackBonus = kResults.GetInt("GoldenAgeForeignAttackBonus");

	push	OFFSET ??_C@_0BM@JMHDEKOL@GoldenAgeForeignAttackBonus?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+708], eax

; 328  : #endif
; 329  : #ifdef NQ_COMBAT_STRENGTH_NEAR_FRIENDLY_MINOR
; 330  : 	m_iCombatStrengthNearFriendlyMinor = kResults.GetInt("CombatStrengthNearFriendlyMinor");

	push	OFFSET ??_C@_0CA@NCPBFGAA@CombatStrengthNearFriendlyMinor?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+712], eax

; 331  : #endif
; 332  : 	m_iUpgradeDiscount = kResults.GetInt("UpgradeDiscount");

	push	OFFSET ??_C@_0BA@KBDHCJII@UpgradeDiscount?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+720], eax

; 333  : 	m_iExperiencePercent = kResults.GetInt("ExperiencePercent");

	push	OFFSET ??_C@_0BC@OHMKPOHD@ExperiencePercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+724], eax

; 334  : 	m_iAdjacentMod = kResults.GetInt("AdjacentMod");

	push	OFFSET ??_C@_0M@NABOGIIK@AdjacentMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+728], eax

; 335  : 	m_iAttackMod = kResults.GetInt("AttackMod");

	push	OFFSET ??_C@_09IOHPCIAD@AttackMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+732], eax

; 336  : 	m_iDefenseMod = kResults.GetInt("DefenseMod");

	push	OFFSET ??_C@_0L@FONMKPAP@DefenseMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+736], eax

; 337  : 	m_iDropRange = kResults.GetInt("DropRange");

	push	OFFSET ??_C@_09NLCNIMEK@DropRange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+740], eax

; 338  : 	m_iExtraNavalMoves = kResults.GetInt("ExtraNavalMovement");

	push	OFFSET ??_C@_0BD@GBJFGHJJ@ExtraNavalMovement?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+744], eax

; 339  : 	m_iHPHealedIfDefeatEnemy = kResults.GetInt("HPHealedIfDestroyEnemy");

	push	OFFSET ??_C@_0BH@OLKNAHBI@HPHealedIfDestroyEnemy?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+748], eax

; 340  : 	m_iGoldenAgeValueFromKills = kResults.GetInt("GoldenAgeValueFromKills");

	push	OFFSET ??_C@_0BI@INKCACCN@GoldenAgeValueFromKills?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+752], eax

; 341  : 	m_iExtraWithdrawal = kResults.GetInt("ExtraWithdrawal");

	push	OFFSET ??_C@_0BA@CNOIBFAJ@ExtraWithdrawal?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+756], eax

; 342  : 	m_iEmbarkExtraVisibility = kResults.GetInt("EmbarkExtraVisibility");

	push	OFFSET ??_C@_0BG@HGLIOLIM@EmbarkExtraVisibility?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+760], eax

; 343  : 	m_iEmbarkDefenseModifier = kResults.GetInt("EmbarkDefenseModifier");

	push	OFFSET ??_C@_0BG@EGJLLMKH@EmbarkDefenseModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+764], eax

; 344  : 	m_iCapitalDefenseModifier = kResults.GetInt("CapitalDefenseModifier");

	push	OFFSET ??_C@_0BH@CDDLEEIL@CapitalDefenseModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+768], eax

; 345  : 	m_iCapitalDefenseFalloff = kResults.GetInt("CapitalDefenseFalloff");

	push	OFFSET ??_C@_0BG@CILHBFIF@CapitalDefenseFalloff?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+772], eax

; 346  : 	m_iCityAttackPlunderModifier = kResults.GetInt("CityAttackPlunderModifier");

	push	OFFSET ??_C@_0BK@HOKBFIJO@CityAttackPlunderModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+776], eax

; 347  : 	m_iReligiousStrengthLossRivalTerritory = kResults.GetInt("ReligiousStrengthLossRivalTerritory");

	push	OFFSET ??_C@_0CE@BJMPMIKG@ReligiousStrengthLossRivalTerrit@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+780], eax

; 348  : 	m_iTradeMissionInfluenceModifier = kResults.GetInt("TradeMissionInfluenceModifier");

	push	OFFSET ??_C@_0BO@JKAGNMLN@TradeMissionInfluenceModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+784], eax

; 349  : 	m_iTradeMissionGoldModifier = kResults.GetInt("TradeMissionGoldModifier");

	push	OFFSET ??_C@_0BJ@OGAAKMBL@TradeMissionGoldModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+788], eax

; 350  : 
; 351  : 	//References
; 352  : 	const char* szLayerAnimationPath = kResults.GetText("LayerAnimationPath");

	push	OFFSET ??_C@_0BD@DIOMOCAM@LayerAnimationPath?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szLayerAnimationPath$[ebp], eax

; 353  : 	m_iLayerAnimationPath = GC.getInfoTypeForString(szLayerAnimationPath, true);

	push	1
	mov	eax, DWORD PTR _szLayerAnimationPath$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+460], eax

; 354  : 
; 355  : 	const char* szTechPrereq = kResults.GetText("TechPrereq");

	push	OFFSET ??_C@_0L@IANCLNMF@TechPrereq?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTechPrereq$[ebp], eax

; 356  : 	m_iTechPrereq = GC.getInfoTypeForString(szTechPrereq, true);

	push	1
	mov	edx, DWORD PTR _szTechPrereq$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+508], eax

; 357  : 
; 358  : 	const char* szInvisible = kResults.GetText("Invisible");

	push	OFFSET ??_C@_09EPJGIIIJ@Invisible?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szInvisible$[ebp], eax

; 359  : 	m_iInvisibleType = GC.getInfoTypeForString(szInvisible, true);

	push	1
	mov	edx, DWORD PTR _szInvisible$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+512], eax

; 360  : 
; 361  : 	const char* szSeeInvisible = kResults.GetText("SeeInvisible");

	push	OFFSET ??_C@_0N@IGFKNMKA@SeeInvisible?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szSeeInvisible$[ebp], eax

; 362  : 	m_iSeeInvisibleType = GC.getInfoTypeForString(szSeeInvisible, true);

	push	1
	mov	edx, DWORD PTR _szSeeInvisible$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+516], eax

; 363  : 
; 364  : 	const char* szPromotionPrereq = kResults.GetText("PromotionPrereq");

	push	OFFSET ??_C@_0BA@BEMGADGJ@PromotionPrereq?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szPromotionPrereq$[ebp], eax

; 365  : 	m_iPrereqPromotion = GC.getInfoTypeForString(szPromotionPrereq, true);

	push	1
	mov	edx, DWORD PTR _szPromotionPrereq$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+464], eax

; 366  : 
; 367  : 	const char* szPromotionPrereqOr1 = kResults.GetText("PromotionPrereqOr1");

	push	OFFSET ??_C@_0BD@EMHDDHBK@PromotionPrereqOr1?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szPromotionPrereqOr1$[ebp], eax

; 368  : 	m_iPrereqOrPromotion1 = GC.getInfoTypeForString(szPromotionPrereqOr1, true);

	push	1
	mov	edx, DWORD PTR _szPromotionPrereqOr1$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+468], eax

; 369  : 
; 370  : 	const char* szPromotionPrereqOr2 = kResults.GetText("PromotionPrereqOr2");

	push	OFFSET ??_C@_0BD@GHFOGENJ@PromotionPrereqOr2?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szPromotionPrereqOr2$[ebp], eax

; 371  : 	m_iPrereqOrPromotion2 = GC.getInfoTypeForString(szPromotionPrereqOr2, true);

	push	1
	mov	edx, DWORD PTR _szPromotionPrereqOr2$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+472], eax

; 372  : 
; 373  : 	const char* szPromotionPrereqOr3 = kResults.GetText("PromotionPrereqOr3");

	push	OFFSET ??_C@_0BD@HOEFFFJI@PromotionPrereqOr3?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szPromotionPrereqOr3$[ebp], eax

; 374  : 	m_iPrereqOrPromotion3 = GC.getInfoTypeForString(szPromotionPrereqOr3, true);

	push	1
	mov	edx, DWORD PTR _szPromotionPrereqOr3$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+476], eax

; 375  : 
; 376  : 	const char* szPromotionPrereqOr4 = kResults.GetText("PromotionPrereqOr4");

	push	OFFSET ??_C@_0BD@DBAEMDFP@PromotionPrereqOr4?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szPromotionPrereqOr4$[ebp], eax

; 377  : 	m_iPrereqOrPromotion4 = GC.getInfoTypeForString(szPromotionPrereqOr4, true);

	push	1
	mov	edx, DWORD PTR _szPromotionPrereqOr4$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+480], eax

; 378  : 
; 379  : 	const char* szPromotionPrereqOr5 = kResults.GetText("PromotionPrereqOr5");

	push	OFFSET ??_C@_0BD@CIBPPCBO@PromotionPrereqOr5?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szPromotionPrereqOr5$[ebp], eax

; 380  : 	m_iPrereqOrPromotion5 = GC.getInfoTypeForString(szPromotionPrereqOr5, true);

	push	1
	mov	edx, DWORD PTR _szPromotionPrereqOr5$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+484], eax

; 381  : 
; 382  : 	const char* szPromotionPrereqOr6 = kResults.GetText("PromotionPrereqOr6");

	push	OFFSET ??_C@_0BD@DDCKBNN@PromotionPrereqOr6?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szPromotionPrereqOr6$[ebp], eax

; 383  : 	m_iPrereqOrPromotion6 = GC.getInfoTypeForString(szPromotionPrereqOr6, true);

	push	1
	mov	edx, DWORD PTR _szPromotionPrereqOr6$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+488], eax

; 384  : 
; 385  : 	const char* szPromotionPrereqOr7 = kResults.GetText("PromotionPrereqOr7");

	push	OFFSET ??_C@_0BD@BKCJJAJM@PromotionPrereqOr7?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szPromotionPrereqOr7$[ebp], eax

; 386  : 	m_iPrereqOrPromotion7 = GC.getInfoTypeForString(szPromotionPrereqOr7, true);

	push	1
	mov	edx, DWORD PTR _szPromotionPrereqOr7$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+492], eax

; 387  : 
; 388  : 	const char* szPromotionPrereqOr8 = kResults.GetText("PromotionPrereqOr8");

	push	OFFSET ??_C@_0BD@JNLBIMFD@PromotionPrereqOr8?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szPromotionPrereqOr8$[ebp], eax

; 389  : 	m_iPrereqOrPromotion8 = GC.getInfoTypeForString(szPromotionPrereqOr8, true);

	push	1
	mov	edx, DWORD PTR _szPromotionPrereqOr8$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+496], eax

; 390  : 
; 391  : 	const char* szPromotionPrereqOr9 = kResults.GetText("PromotionPrereqOr9");

	push	OFFSET ??_C@_0BD@IEKKLNBC@PromotionPrereqOr9?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szPromotionPrereqOr9$[ebp], eax

; 392  : 	m_iPrereqOrPromotion9 = GC.getInfoTypeForString(szPromotionPrereqOr9, true);

	push	1
	mov	edx, DWORD PTR _szPromotionPrereqOr9$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+500], eax

; 393  : 
; 394  : 	const char* szPromotionPrereqOr10 = kResults.GetText("PromotionPrereqOr9");

	push	OFFSET ??_C@_0BD@IEKKLNBC@PromotionPrereqOr9?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szPromotionPrereqOr10$[ebp], eax

; 395  : 	m_iPrereqOrPromotion10 = GC.getInfoTypeForString(szPromotionPrereqOr10, true);

	push	1
	mov	edx, DWORD PTR _szPromotionPrereqOr10$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+504], eax

; 396  : 
; 397  : 	//Arrays
; 398  : 	const int iNumUnitClasses = kUtility.MaxRows("UnitClasses");

	push	OFFSET ??_C@_0M@HLHJNCC@UnitClasses?$AA@
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z	; CvDatabaseUtility::MaxRows
	mov	DWORD PTR _iNumUnitClasses$[ebp], eax

; 399  : 	const int iNumTerrains = GC.getNumTerrainInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumTerrainInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumTerrainInfos
	mov	DWORD PTR _iNumTerrains$[ebp], eax

; 400  : 	const int iNumFeatures = GC.getNumFeatureInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumFeatureInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumFeatureInfos
	mov	DWORD PTR _iNumFeatures$[ebp], eax

; 401  : 	const int iNumDomains = kUtility.MaxRows("Domains");

	push	OFFSET ??_C@_07FKLJOGGC@Domains?$AA@
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z	; CvDatabaseUtility::MaxRows
	mov	DWORD PTR _iNumDomains$[ebp], eax

; 402  : 	DEBUG_VARIABLE(iNumDomains);
; 403  : 	const int iNumUnitCombatClasses = kUtility.MaxRows("UnitCombatInfos");

	push	OFFSET ??_C@_0BA@NHHFHDEL@UnitCombatInfos?$AA@
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z	; CvDatabaseUtility::MaxRows
	mov	DWORD PTR _iNumUnitCombatClasses$[ebp], eax

; 404  : 	const int iNumUnitTypes = kUtility.MaxRows("Units");

	push	OFFSET ??_C@_05CFLIFMAE@Units?$AA@
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z	; CvDatabaseUtility::MaxRows
	mov	DWORD PTR _iNumUnitTypes$[ebp], eax

; 405  : 
; 406  : 	const char* szPromotionType = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szPromotionType$[ebp], eax

; 407  : 
; 408  : 	//UnitPromotions_Terrains
; 409  : 	{
; 410  : 		kUtility.InitializeArray(m_piTerrainAttackPercent, iNumTerrains, 0);

	push	0
	mov	edx, DWORD PTR _iNumTerrains$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 884				; 00000374H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 411  : 		kUtility.InitializeArray(m_piTerrainDefensePercent, iNumTerrains, 0);

	push	0
	mov	ecx, DWORD PTR _iNumTerrains$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 888				; 00000378H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 412  : 		kUtility.InitializeArray(m_piTerrainPassableTech, iNumTerrains, NO_TECH);

	push	-1
	mov	eax, DWORD PTR _iNumTerrains$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 920				; 00000398H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 413  : 		kUtility.InitializeArray(m_pbTerrainDoubleMove, iNumTerrains, false);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 928				; 000003a0H
	mov	DWORD PTR $T219720[ebp], edx
	mov	eax, DWORD PTR _iNumTerrains$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T219719[ebp], eax
	mov	ecx, DWORD PTR $T219720[ebp]
	mov	edx, DWORD PTR $T219719[ebp]
	mov	DWORD PTR [ecx], edx
	xor	eax, eax
	cvtsi2ss xmm0, eax
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN67@CacheResul
	mov	ecx, DWORD PTR _iNumTerrains$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR $T219720[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN63@CacheResul
$LN67@CacheResul:
	mov	DWORD PTR _i$219714[ebp], 0
	jmp	SHORT $LN65@CacheResul
$LN64@CacheResul:
	mov	ecx, DWORD PTR _i$219714[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$219714[ebp], ecx
$LN65@CacheResul:
	mov	edx, DWORD PTR _i$219714[ebp]
	cmp	edx, DWORD PTR _iNumTerrains$[ebp]
	jae	SHORT $LN63@CacheResul
	mov	eax, DWORD PTR $T219720[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$219714[ebp]
	mov	BYTE PTR [ecx+edx], 0
	jmp	SHORT $LN64@CacheResul
$LN63@CacheResul:

; 414  : 		kUtility.InitializeArray(m_pbTerrainImpassable, iNumTerrains, false);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 936				; 000003a8H
	mov	DWORD PTR $T219732[ebp], eax
	mov	ecx, DWORD PTR _iNumTerrains$[ebp]
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T219731[ebp], eax
	mov	edx, DWORD PTR $T219732[ebp]
	mov	eax, DWORD PTR $T219731[ebp]
	mov	DWORD PTR [edx], eax
	xor	ecx, ecx
	cvtsi2ss xmm0, ecx
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN74@CacheResul
	mov	edx, DWORD PTR _iNumTerrains$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR $T219732[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN70@CacheResul
$LN74@CacheResul:
	mov	DWORD PTR _i$219726[ebp], 0
	jmp	SHORT $LN72@CacheResul
$LN71@CacheResul:
	mov	edx, DWORD PTR _i$219726[ebp]
	add	edx, 1
	mov	DWORD PTR _i$219726[ebp], edx
$LN72@CacheResul:
	mov	eax, DWORD PTR _i$219726[ebp]
	cmp	eax, DWORD PTR _iNumTerrains$[ebp]
	jae	SHORT $LN70@CacheResul
	mov	ecx, DWORD PTR $T219732[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$219726[ebp]
	mov	BYTE PTR [edx+eax], 0
	jmp	SHORT $LN71@CacheResul
$LN70@CacheResul:

; 415  : 
; 416  : 		std::string sqlKey = "UnitPromotions_Terrains";

	push	OFFSET ??_C@_0BI@IIGDFDOG@UnitPromotions_Terrains?$AA@
	lea	ecx, DWORD PTR _sqlKey$217291[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 417  : 		Database::Results* pResults = kUtility.GetResults(sqlKey);

	lea	ecx, DWORD PTR _sqlKey$217291[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$217293[ebp], eax

; 418  : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$217293[ebp], 0
	jne	SHORT $LN29@CacheResul

; 419  : 		{
; 420  : 			const char* szSQL = "select Terrains.ID as TerrainID, coalesce(Technologies.ID, -1) as PassableTechID, UnitPromotions_Terrains.* from UnitPromotions_Terrains inner join Terrains on TerrainType = Terrains.Type left join Technologies on PassableTech = Technologies.Type where PromotionType = ?";

	mov	DWORD PTR _szSQL$217295[ebp], OFFSET ??_C@_0BAP@GGCJCBCM@select?5Terrains?4ID?5as?5TerrainID?0@

; 421  : 			pResults = kUtility.PrepareResults(sqlKey, szSQL);

	mov	edx, DWORD PTR _szSQL$217295[ebp]
	push	edx
	lea	eax, DWORD PTR _sqlKey$217291[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$217293[ebp], eax
$LN29@CacheResul:

; 422  : 		}
; 423  : 
; 424  : 		CvAssert(pResults);
; 425  : 		if(!pResults) return false;

	cmp	DWORD PTR _pResults$217293[ebp], 0
	jne	SHORT $LN28@CacheResul
	mov	BYTE PTR $T219686[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$217291[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T219686[ebp]
	jmp	$LN31@CacheResul
$LN28@CacheResul:

; 426  : 
; 427  : 		pResults->Bind(1, szPromotionType);

	push	1
	mov	ecx, DWORD PTR _szPromotionType$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pResults$217293[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBD_N@Z
$LN27@CacheResul:

; 428  : 
; 429  : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$217293[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	$LN26@CacheResul

; 430  : 		{
; 431  : 			const int iTerrainID = pResults->GetInt("TerrainID");

	push	OFFSET ??_C@_09EINBFHAC@TerrainID?$AA@
	mov	ecx, DWORD PTR _pResults$217293[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	DWORD PTR _iTerrainID$217302[ebp], eax

; 432  : 			CvAssert(iTerrainID > -1 && iTerrainID < iNumTerrains);
; 433  : 
; 434  : 			const int iTerrainAttack = pResults->GetInt("Attack");

	push	OFFSET ??_C@_06FDAMAAOH@Attack?$AA@
	mov	ecx, DWORD PTR _pResults$217293[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	DWORD PTR _iTerrainAttack$217304[ebp], eax

; 435  : 			m_piTerrainAttackPercent[iTerrainID] = iTerrainAttack;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+884]
	mov	edx, DWORD PTR _iTerrainID$217302[ebp]
	mov	eax, DWORD PTR _iTerrainAttack$217304[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 436  : 
; 437  : 			const int iTerrainDefense = pResults->GetInt("Defense");

	push	OFFSET ??_C@_07PEDPFCGC@Defense?$AA@
	mov	ecx, DWORD PTR _pResults$217293[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	DWORD PTR _iTerrainDefense$217306[ebp], eax

; 438  : 			m_piTerrainDefensePercent[iTerrainID] = iTerrainDefense;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+888]
	mov	eax, DWORD PTR _iTerrainID$217302[ebp]
	mov	ecx, DWORD PTR _iTerrainDefense$217306[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 439  : 
; 440  : 			const bool bDoubleMove = pResults->GetBool("DoubleMove");

	push	OFFSET ??_C@_0L@GFAABCAK@DoubleMove?$AA@
	mov	ecx, DWORD PTR _pResults$217293[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	BYTE PTR _bDoubleMove$217308[ebp], al

; 441  : 			m_pbTerrainDoubleMove[iTerrainID] = bDoubleMove;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+928]
	mov	ecx, DWORD PTR _iTerrainID$217302[ebp]
	mov	dl, BYTE PTR _bDoubleMove$217308[ebp]
	mov	BYTE PTR [eax+ecx], dl

; 442  : 
; 443  : 			const bool bImpassable = pResults->GetBool("Impassable");

	push	OFFSET ??_C@_0L@MNIKPMED@Impassable?$AA@
	mov	ecx, DWORD PTR _pResults$217293[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	BYTE PTR _bImpassable$217310[ebp], al

; 444  : 			m_pbTerrainImpassable[iTerrainID] = bImpassable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	mov	edx, DWORD PTR _iTerrainID$217302[ebp]
	mov	al, BYTE PTR _bImpassable$217310[ebp]
	mov	BYTE PTR [ecx+edx], al

; 445  : 
; 446  : 			const int iPassableTechID = pResults->GetInt("PassableTechID");

	push	OFFSET ??_C@_0P@MBGEMJJD@PassableTechID?$AA@
	mov	ecx, DWORD PTR _pResults$217293[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	DWORD PTR _iPassableTechID$217312[ebp], eax

; 447  : 			m_piTerrainPassableTech[iTerrainID] = iPassableTechID;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+920]
	mov	eax, DWORD PTR _iTerrainID$217302[ebp]
	mov	ecx, DWORD PTR _iPassableTechID$217312[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 448  : 		}

	jmp	$LN27@CacheResul
$LN26@CacheResul:

; 449  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$217291[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 450  : 
; 451  : 	//UnitPromotions_Features
; 452  : 	{
; 453  : 		kUtility.InitializeArray(m_piFeatureAttackPercent, iNumFeatures, 0);

	push	0
	mov	edx, DWORD PTR _iNumFeatures$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 892				; 0000037cH
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 454  : 		kUtility.InitializeArray(m_piFeatureDefensePercent, iNumFeatures, 0);

	push	0
	mov	ecx, DWORD PTR _iNumFeatures$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 896				; 00000380H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 455  : 		kUtility.InitializeArray(m_piFeaturePassableTech, iNumFeatures, NO_TECH);

	push	-1
	mov	eax, DWORD PTR _iNumFeatures$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 924				; 0000039cH
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 456  : 		kUtility.InitializeArray(m_pbFeatureDoubleMove, iNumFeatures, false);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 932				; 000003a4H
	mov	DWORD PTR $T219750[ebp], edx
	mov	eax, DWORD PTR _iNumFeatures$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T219749[ebp], eax
	mov	ecx, DWORD PTR $T219750[ebp]
	mov	edx, DWORD PTR $T219749[ebp]
	mov	DWORD PTR [ecx], edx
	xor	eax, eax
	cvtsi2ss xmm0, eax
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN102@CacheResul
	mov	ecx, DWORD PTR _iNumFeatures$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR $T219750[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN98@CacheResul
$LN102@CacheResul:
	mov	DWORD PTR _i$219744[ebp], 0
	jmp	SHORT $LN100@CacheResul
$LN99@CacheResul:
	mov	ecx, DWORD PTR _i$219744[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$219744[ebp], ecx
$LN100@CacheResul:
	mov	edx, DWORD PTR _i$219744[ebp]
	cmp	edx, DWORD PTR _iNumFeatures$[ebp]
	jae	SHORT $LN98@CacheResul
	mov	eax, DWORD PTR $T219750[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$219744[ebp]
	mov	BYTE PTR [ecx+edx], 0
	jmp	SHORT $LN99@CacheResul
$LN98@CacheResul:

; 457  : 		kUtility.InitializeArray(m_pbFeatureImpassable, iNumFeatures, false);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 940				; 000003acH
	mov	DWORD PTR $T219762[ebp], eax
	mov	ecx, DWORD PTR _iNumFeatures$[ebp]
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T219761[ebp], eax
	mov	edx, DWORD PTR $T219762[ebp]
	mov	eax, DWORD PTR $T219761[ebp]
	mov	DWORD PTR [edx], eax
	xor	ecx, ecx
	cvtsi2ss xmm0, ecx
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN109@CacheResul
	mov	edx, DWORD PTR _iNumFeatures$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR $T219762[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN105@CacheResul
$LN109@CacheResul:
	mov	DWORD PTR _i$219756[ebp], 0
	jmp	SHORT $LN107@CacheResul
$LN106@CacheResul:
	mov	edx, DWORD PTR _i$219756[ebp]
	add	edx, 1
	mov	DWORD PTR _i$219756[ebp], edx
$LN107@CacheResul:
	mov	eax, DWORD PTR _i$219756[ebp]
	cmp	eax, DWORD PTR _iNumFeatures$[ebp]
	jae	SHORT $LN105@CacheResul
	mov	ecx, DWORD PTR $T219762[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$219756[ebp]
	mov	BYTE PTR [edx+eax], 0
	jmp	SHORT $LN106@CacheResul
$LN105@CacheResul:

; 458  : 
; 459  : 		std::string sqlKey = "UnitPromotions_Features";

	push	OFFSET ??_C@_0BI@JEBHFCGC@UnitPromotions_Features?$AA@
	lea	ecx, DWORD PTR _sqlKey$217314[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 460  : 		Database::Results* pResults = kUtility.GetResults(sqlKey);

	lea	ecx, DWORD PTR _sqlKey$217314[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$217316[ebp], eax

; 461  : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$217316[ebp], 0
	jne	SHORT $LN25@CacheResul

; 462  : 		{
; 463  : 			const char* szSQL = "select Features.ID as FeatureID, coalesce(Technologies.ID, -1) as PassableTechID, UnitPromotions_Features.* from UnitPromotions_Features inner join Features on FeatureType = Features.Type left join Technologies on PassableTech = Technologies.Type where PromotionType = ?";

	mov	DWORD PTR _szSQL$217318[ebp], OFFSET ??_C@_0BAP@FLBEKAPJ@select?5Features?4ID?5as?5FeatureID?0@

; 464  : 			pResults = kUtility.PrepareResults(sqlKey, szSQL);

	mov	edx, DWORD PTR _szSQL$217318[ebp]
	push	edx
	lea	eax, DWORD PTR _sqlKey$217314[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$217316[ebp], eax
$LN25@CacheResul:

; 465  : 		}
; 466  : 
; 467  : 		CvAssert(pResults);
; 468  : 		if(!pResults) return false;

	cmp	DWORD PTR _pResults$217316[ebp], 0
	jne	SHORT $LN24@CacheResul
	mov	BYTE PTR $T219687[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$217314[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T219687[ebp]
	jmp	$LN31@CacheResul
$LN24@CacheResul:

; 469  : 
; 470  : 		pResults->Bind(1, szPromotionType);

	push	1
	mov	ecx, DWORD PTR _szPromotionType$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pResults$217316[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBD_N@Z
$LN23@CacheResul:

; 471  : 
; 472  : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$217316[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	$LN22@CacheResul

; 473  : 		{
; 474  : 			const int iFeatureID = pResults->GetInt("FeatureID");

	push	OFFSET ??_C@_09KCBIGEDK@FeatureID?$AA@
	mov	ecx, DWORD PTR _pResults$217316[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	DWORD PTR _iFeatureID$217325[ebp], eax

; 475  : 			CvAssert(iFeatureID > -1 && iFeatureID < iNumFeatures);
; 476  : 
; 477  : 			const int iFeatureAttack = pResults->GetInt("Attack");

	push	OFFSET ??_C@_06FDAMAAOH@Attack?$AA@
	mov	ecx, DWORD PTR _pResults$217316[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	DWORD PTR _iFeatureAttack$217327[ebp], eax

; 478  : 			m_piFeatureAttackPercent[iFeatureID] = iFeatureAttack;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+892]
	mov	edx, DWORD PTR _iFeatureID$217325[ebp]
	mov	eax, DWORD PTR _iFeatureAttack$217327[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 479  : 
; 480  : 			const int iFeatureDefense = pResults->GetInt("Defense");

	push	OFFSET ??_C@_07PEDPFCGC@Defense?$AA@
	mov	ecx, DWORD PTR _pResults$217316[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	DWORD PTR _iFeatureDefense$217328[ebp], eax

; 481  : 			m_piFeatureDefensePercent[iFeatureID] = iFeatureDefense;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+896]
	mov	eax, DWORD PTR _iFeatureID$217325[ebp]
	mov	ecx, DWORD PTR _iFeatureDefense$217328[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 482  : 
; 483  : 			const bool bDoubleMove = pResults->GetBool("DoubleMove");

	push	OFFSET ??_C@_0L@GFAABCAK@DoubleMove?$AA@
	mov	ecx, DWORD PTR _pResults$217316[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	BYTE PTR _bDoubleMove$217329[ebp], al

; 484  : 			m_pbFeatureDoubleMove[iFeatureID] = bDoubleMove;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	mov	ecx, DWORD PTR _iFeatureID$217325[ebp]
	mov	dl, BYTE PTR _bDoubleMove$217329[ebp]
	mov	BYTE PTR [eax+ecx], dl

; 485  : 
; 486  : 			const bool bImpassable = pResults->GetBool("Impassable");

	push	OFFSET ??_C@_0L@MNIKPMED@Impassable?$AA@
	mov	ecx, DWORD PTR _pResults$217316[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	BYTE PTR _bImpassable$217330[ebp], al

; 487  : 			m_pbFeatureImpassable[iFeatureID] = bImpassable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR _iFeatureID$217325[ebp]
	mov	al, BYTE PTR _bImpassable$217330[ebp]
	mov	BYTE PTR [ecx+edx], al

; 488  : 
; 489  : 			const int iPassableTech = pResults->GetInt("PassableTechID");

	push	OFFSET ??_C@_0P@MBGEMJJD@PassableTechID?$AA@
	mov	ecx, DWORD PTR _pResults$217316[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	DWORD PTR _iPassableTech$217331[ebp], eax

; 490  : 			m_piFeaturePassableTech[iFeatureID] = iPassableTech;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+924]
	mov	eax, DWORD PTR _iFeatureID$217325[ebp]
	mov	ecx, DWORD PTR _iPassableTech$217331[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 491  : 		}

	jmp	$LN23@CacheResul
$LN22@CacheResul:

; 492  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$217314[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 493  : 
; 494  : 	//UnitPromotions_UnitClasses
; 495  : 	{
; 496  : 		kUtility.InitializeArray(m_piUnitClassModifierPercent, iNumUnitClasses, 0);

	push	0
	mov	edx, DWORD PTR _iNumUnitClasses$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 904				; 00000388H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 497  : 		kUtility.InitializeArray(m_piUnitClassAttackModifier, iNumUnitClasses, 0);

	push	0
	mov	ecx, DWORD PTR _iNumUnitClasses$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 912				; 00000390H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 498  : 		kUtility.InitializeArray(m_piUnitClassDefenseModifier, iNumUnitClasses, 0);

	push	0
	mov	eax, DWORD PTR _iNumUnitClasses$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 916				; 00000394H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 499  : 
; 500  : 		std::string sqlKey = "UnitPromotions_UnitClasses";

	push	OFFSET ??_C@_0BL@NHCLIOIE@UnitPromotions_UnitClasses?$AA@
	lea	ecx, DWORD PTR _sqlKey$217332[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 501  : 		Database::Results* pResults = kUtility.GetResults(sqlKey);

	lea	edx, DWORD PTR _sqlKey$217332[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$217334[ebp], eax

; 502  : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$217334[ebp], 0
	jne	SHORT $LN21@CacheResul

; 503  : 		{
; 504  : 			const char* szSQL = "select UnitClasses.ID, Modifier, Attack, Defense from UnitPromotions_UnitClasses inner join UnitClasses on UnitClassType = UnitClasses.Type where PromotionType = ?";

	mov	DWORD PTR _szSQL$217336[ebp], OFFSET ??_C@_0KE@EBCBLBJP@select?5UnitClasses?4ID?0?5Modifier?0@

; 505  : 			pResults = kUtility.PrepareResults(sqlKey, szSQL);

	mov	eax, DWORD PTR _szSQL$217336[ebp]
	push	eax
	lea	ecx, DWORD PTR _sqlKey$217332[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$217334[ebp], eax
$LN21@CacheResul:

; 506  : 		}
; 507  : 
; 508  : 		CvAssert(pResults);
; 509  : 		if(!pResults) return false;

	cmp	DWORD PTR _pResults$217334[ebp], 0
	jne	SHORT $LN20@CacheResul
	mov	BYTE PTR $T219688[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$217332[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T219688[ebp]
	jmp	$LN31@CacheResul
$LN20@CacheResul:

; 510  : 
; 511  : 		pResults->Bind(1, szPromotionType);

	push	1
	mov	edx, DWORD PTR _szPromotionType$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pResults$217334[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBD_N@Z
$LN19@CacheResul:

; 512  : 
; 513  : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$217334[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	eax, al
	test	eax, eax
	je	$LN18@CacheResul

; 514  : 		{
; 515  : 			const int iUnitClassID = pResults->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pResults$217334[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _iUnitClassID$217343[ebp], eax

; 516  : 			CvAssert(iUnitClassID > -1 && iUnitClassID  < iNumUnitClasses);
; 517  : 
; 518  : 			const int iModifier = pResults->GetInt("Modifier");

	push	OFFSET ??_C@_08GMKLKDKJ@Modifier?$AA@
	mov	ecx, DWORD PTR _pResults$217334[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	DWORD PTR _iModifier$217344[ebp], eax

; 519  : 			m_piUnitClassModifierPercent[iUnitClassID] = iModifier;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+904]
	mov	eax, DWORD PTR _iUnitClassID$217343[ebp]
	mov	ecx, DWORD PTR _iModifier$217344[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 520  : 
; 521  : 			const int iAttack = pResults->GetInt("Attack");

	push	OFFSET ??_C@_06FDAMAAOH@Attack?$AA@
	mov	ecx, DWORD PTR _pResults$217334[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	DWORD PTR _iAttack$217346[ebp], eax

; 522  : 			m_piUnitClassAttackModifier[iUnitClassID] = iAttack;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+912]
	mov	ecx, DWORD PTR _iUnitClassID$217343[ebp]
	mov	edx, DWORD PTR _iAttack$217346[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 523  : 
; 524  : 			const int iDefense = pResults->GetInt("Defense");

	push	OFFSET ??_C@_07PEDPFCGC@Defense?$AA@
	mov	ecx, DWORD PTR _pResults$217334[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	DWORD PTR _iDefense$217347[ebp], eax

; 525  : 			m_piUnitClassDefenseModifier[iUnitClassID] = iDefense;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+916]
	mov	edx, DWORD PTR _iUnitClassID$217343[ebp]
	mov	eax, DWORD PTR _iDefense$217347[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 526  : 		}

	jmp	$LN19@CacheResul
$LN18@CacheResul:

; 527  : 
; 528  : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$217334[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 529  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$217332[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 530  : 
; 531  : 	//UnitPromotions_Domains
; 532  : 	{
; 533  : 		kUtility.InitializeArray(m_piDomainModifierPercent, NUM_DOMAIN_TYPES, 0);

	push	0
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 908				; 0000038cH
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 534  : 
; 535  : 		std::string sqlKey = "m_piDomainModifierPercent";

	push	OFFSET ??_C@_0BK@DBHCJAOK@m_piDomainModifierPercent?$AA@
	lea	ecx, DWORD PTR _sqlKey$217348[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 3

; 536  : 		Database::Results* pResults = kUtility.GetResults(sqlKey);

	lea	edx, DWORD PTR _sqlKey$217348[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$217350[ebp], eax

; 537  : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$217350[ebp], 0
	jne	SHORT $LN17@CacheResul

; 538  : 		{
; 539  : 			const char* szSQL = "select Domains.ID, Modifier from UnitPromotions_Domains inner join Domains on DomainType = Domains.Type where PromotionType = ?;";

	mov	DWORD PTR _szSQL$217352[ebp], OFFSET ??_C@_0IB@HILEMOCB@select?5Domains?4ID?0?5Modifier?5from@

; 540  : 			pResults = kUtility.PrepareResults(sqlKey, szSQL);

	mov	eax, DWORD PTR _szSQL$217352[ebp]
	push	eax
	lea	ecx, DWORD PTR _sqlKey$217348[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$217350[ebp], eax
$LN17@CacheResul:

; 541  : 		}
; 542  : 
; 543  : 		CvAssert(pResults);
; 544  : 		if(!pResults) return false;

	cmp	DWORD PTR _pResults$217350[ebp], 0
	jne	SHORT $LN16@CacheResul
	mov	BYTE PTR $T219689[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$217348[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T219689[ebp]
	jmp	$LN31@CacheResul
$LN16@CacheResul:

; 545  : 
; 546  : 		pResults->Bind(1, szPromotionType);

	push	1
	mov	edx, DWORD PTR _szPromotionType$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pResults$217350[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBD_N@Z
$LN15@CacheResul:

; 547  : 
; 548  : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$217350[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN14@CacheResul

; 549  : 		{
; 550  : 			const int iDomainID = pResults->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pResults$217350[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _iDomainID$217359[ebp], eax

; 551  : 			CvAssert(iDomainID > -1 && iDomainID < iNumDomains);
; 552  : 
; 553  : 			const int iDomainMod = pResults->GetInt(1);

	push	1
	mov	ecx, DWORD PTR _pResults$217350[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _iDomainMod$217360[ebp], eax

; 554  : 			if (iDomainID > -1 && iDomainID < NUM_DOMAIN_TYPES)

	cmp	DWORD PTR _iDomainID$217359[ebp], -1
	jle	SHORT $LN13@CacheResul
	cmp	DWORD PTR _iDomainID$217359[ebp], 5
	jge	SHORT $LN13@CacheResul

; 555  : 				m_piDomainModifierPercent[iDomainID] = iDomainMod;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+908]
	mov	eax, DWORD PTR _iDomainID$217359[ebp]
	mov	ecx, DWORD PTR _iDomainMod$217360[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
$LN13@CacheResul:

; 556  : 		}

	jmp	SHORT $LN15@CacheResul
$LN14@CacheResul:

; 557  : 
; 558  : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$217350[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 559  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$217348[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 560  : 
; 561  : 	//UnitPromotions_UnitCombatMods
; 562  : 	{
; 563  : 		kUtility.InitializeArray(m_piUnitCombatModifierPercent, iNumUnitCombatClasses, 0);

	push	0
	mov	edx, DWORD PTR _iNumUnitCombatClasses$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 900				; 00000384H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 564  : 
; 565  : 		std::string sqlKey = "m_piUnitCombatModifierPercent";

	push	OFFSET ??_C@_0BO@LDBGFCAB@m_piUnitCombatModifierPercent?$AA@
	lea	ecx, DWORD PTR _sqlKey$217362[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 4

; 566  : 		Database::Results* pResults = kUtility.GetResults(sqlKey);

	lea	ecx, DWORD PTR _sqlKey$217362[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$217364[ebp], eax

; 567  : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$217364[ebp], 0
	jne	SHORT $LN12@CacheResul

; 568  : 		{
; 569  : 			const char* szSQL = "select UnitCombatInfos.ID, Modifier from UnitPromotions_UnitCombatMods inner join UnitCombatInfos on UnitCombatInfos.Type = UnitCombatType where PromotionType = ?;";

	mov	DWORD PTR _szSQL$217366[ebp], OFFSET ??_C@_0KE@HFFDPDLJ@select?5UnitCombatInfos?4ID?0?5Modif@

; 570  : 			pResults = kUtility.PrepareResults(sqlKey, szSQL);

	mov	edx, DWORD PTR _szSQL$217366[ebp]
	push	edx
	lea	eax, DWORD PTR _sqlKey$217362[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$217364[ebp], eax
$LN12@CacheResul:

; 571  : 		}
; 572  : 
; 573  : 		CvAssert(pResults);
; 574  : 		if(!pResults) return false;

	cmp	DWORD PTR _pResults$217364[ebp], 0
	jne	SHORT $LN11@CacheResul
	mov	BYTE PTR $T219690[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$217362[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T219690[ebp]
	jmp	$LN31@CacheResul
$LN11@CacheResul:

; 575  : 
; 576  : 		pResults->Bind(1, szPromotionType);

	push	1
	mov	ecx, DWORD PTR _szPromotionType$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pResults$217364[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBD_N@Z
$LN10@CacheResul:

; 577  : 
; 578  : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$217364[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN9@CacheResul

; 579  : 		{
; 580  : 			const int iUnitCombatID = pResults->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pResults$217364[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _iUnitCombatID$217373[ebp], eax

; 581  : 			CvAssert(iUnitCombatID > -1 && iUnitCombatID < iNumUnitCombatClasses);
; 582  : 
; 583  : 			const int iUnitCombatMod = pResults->GetInt(1);

	push	1
	mov	ecx, DWORD PTR _pResults$217364[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _iUnitCombatMod$217374[ebp], eax

; 584  : 			m_piUnitCombatModifierPercent[iUnitCombatID] = iUnitCombatMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+900]
	mov	edx, DWORD PTR _iUnitCombatID$217373[ebp]
	mov	eax, DWORD PTR _iUnitCombatMod$217374[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 585  : 		}

	jmp	SHORT $LN10@CacheResul
$LN9@CacheResul:

; 586  : 
; 587  : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$217364[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 588  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$217362[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 589  : 
; 590  : 	//UnitPromotions_UnitCombats
; 591  : 	{
; 592  : 		kUtility.InitializeArray(m_pbUnitCombat, iNumUnitCombatClasses, false);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 944				; 000003b0H
	mov	DWORD PTR $T219784[ebp], ecx
	mov	edx, DWORD PTR _iNumUnitCombatClasses$[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T219783[ebp], eax
	mov	eax, DWORD PTR $T219784[ebp]
	mov	ecx, DWORD PTR $T219783[ebp]
	mov	DWORD PTR [eax], ecx
	xor	edx, edx
	cvtsi2ss xmm0, edx
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN151@CacheResul
	mov	eax, DWORD PTR _iNumUnitCombatClasses$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR $T219784[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN147@CacheResul
$LN151@CacheResul:
	mov	DWORD PTR _i$219778[ebp], 0
	jmp	SHORT $LN149@CacheResul
$LN148@CacheResul:
	mov	eax, DWORD PTR _i$219778[ebp]
	add	eax, 1
	mov	DWORD PTR _i$219778[ebp], eax
$LN149@CacheResul:
	mov	ecx, DWORD PTR _i$219778[ebp]
	cmp	ecx, DWORD PTR _iNumUnitCombatClasses$[ebp]
	jae	SHORT $LN147@CacheResul
	mov	edx, DWORD PTR $T219784[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$219778[ebp]
	mov	BYTE PTR [eax+ecx], 0
	jmp	SHORT $LN148@CacheResul
$LN147@CacheResul:

; 593  : 
; 594  : 		std::string sqlKey = "m_pbUnitCombat";

	push	OFFSET ??_C@_0P@PJIJJEEF@m_pbUnitCombat?$AA@
	lea	ecx, DWORD PTR _sqlKey$217375[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 5

; 595  : 		Database::Results* pResults = kUtility.GetResults(sqlKey);

	lea	edx, DWORD PTR _sqlKey$217375[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$217377[ebp], eax

; 596  : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$217377[ebp], 0
	jne	SHORT $LN8@CacheResul

; 597  : 		{
; 598  : 			const char* szSQL = "select UnitCombatInfos.ID from UnitPromotions_UnitCombats inner join UnitCombatInfos On UnitCombatInfos.Type = UnitCombatType where PromotionType = ?";

	mov	DWORD PTR _szSQL$217379[ebp], OFFSET ??_C@_0JG@HINGKGDL@select?5UnitCombatInfos?4ID?5from?5U@

; 599  : 			pResults = kUtility.PrepareResults(sqlKey, szSQL);

	mov	eax, DWORD PTR _szSQL$217379[ebp]
	push	eax
	lea	ecx, DWORD PTR _sqlKey$217375[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$217377[ebp], eax
$LN8@CacheResul:

; 600  : 		}
; 601  : 
; 602  : 		CvAssert(pResults);
; 603  : 		if(!pResults) return false;

	cmp	DWORD PTR _pResults$217377[ebp], 0
	jne	SHORT $LN7@CacheResul
	mov	BYTE PTR $T219691[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$217375[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T219691[ebp]
	jmp	$LN31@CacheResul
$LN7@CacheResul:

; 604  : 
; 605  : 		pResults->Bind(1, szPromotionType);

	push	1
	mov	edx, DWORD PTR _szPromotionType$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pResults$217377[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBD_N@Z
$LN6@CacheResul:

; 606  : 
; 607  : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$217377[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@CacheResul

; 608  : 		{
; 609  : 			const int iUnitCombatInfoID = pResults->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pResults$217377[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _iUnitCombatInfoID$217386[ebp], eax

; 610  : 			CvAssert(iUnitCombatInfoID < iNumUnitCombatClasses);
; 611  : 
; 612  : 			m_pbUnitCombat[iUnitCombatInfoID] = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+944]
	mov	eax, DWORD PTR _iUnitCombatInfoID$217386[ebp]
	mov	BYTE PTR [edx+eax], 1

; 613  : 		}

	jmp	SHORT $LN6@CacheResul
$LN5@CacheResul:

; 614  : 
; 615  : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$217377[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 616  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$217375[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 617  : 
; 618  : 	//UnitPromotions_CivilianUnitType
; 619  : 	{
; 620  : 		kUtility.InitializeArray(m_pbCivilianUnitType, iNumUnitTypes, false);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 948				; 000003b4H
	mov	DWORD PTR $T219796[ebp], ecx
	mov	edx, DWORD PTR _iNumUnitTypes$[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T219795[ebp], eax
	mov	eax, DWORD PTR $T219796[ebp]
	mov	ecx, DWORD PTR $T219795[ebp]
	mov	DWORD PTR [eax], ecx
	xor	edx, edx
	cvtsi2ss xmm0, edx
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN158@CacheResul
	mov	eax, DWORD PTR _iNumUnitTypes$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR $T219796[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN154@CacheResul
$LN158@CacheResul:
	mov	DWORD PTR _i$219790[ebp], 0
	jmp	SHORT $LN156@CacheResul
$LN155@CacheResul:
	mov	eax, DWORD PTR _i$219790[ebp]
	add	eax, 1
	mov	DWORD PTR _i$219790[ebp], eax
$LN156@CacheResul:
	mov	ecx, DWORD PTR _i$219790[ebp]
	cmp	ecx, DWORD PTR _iNumUnitTypes$[ebp]
	jae	SHORT $LN154@CacheResul
	mov	edx, DWORD PTR $T219796[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$219790[ebp]
	mov	BYTE PTR [eax+ecx], 0
	jmp	SHORT $LN155@CacheResul
$LN154@CacheResul:

; 621  : 
; 622  : 		std::string sqlKey = "m_pbCivilianUnitType";

	push	OFFSET ??_C@_0BF@DBJIKPBO@m_pbCivilianUnitType?$AA@
	lea	ecx, DWORD PTR _sqlKey$217387[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 6

; 623  : 		Database::Results* pResults = kUtility.GetResults(sqlKey);

	lea	edx, DWORD PTR _sqlKey$217387[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$217389[ebp], eax

; 624  : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$217389[ebp], 0
	jne	SHORT $LN4@CacheResul

; 625  : 		{
; 626  : 			const char* szSQL = "select Units.ID from UnitPromotions_CivilianUnitType inner join Units On Units.Type = UnitType where PromotionType = ?";

	mov	DWORD PTR _szSQL$217391[ebp], OFFSET ??_C@_0HH@DEKPGJFI@select?5Units?4ID?5from?5UnitPromoti@

; 627  : 			pResults = kUtility.PrepareResults(sqlKey, szSQL);

	mov	eax, DWORD PTR _szSQL$217391[ebp]
	push	eax
	lea	ecx, DWORD PTR _sqlKey$217387[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$217389[ebp], eax
$LN4@CacheResul:

; 628  : 		}
; 629  : 
; 630  : 		CvAssert(pResults);
; 631  : 		if(!pResults) return false;

	cmp	DWORD PTR _pResults$217389[ebp], 0
	jne	SHORT $LN3@CacheResul
	mov	BYTE PTR $T219692[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$217387[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T219692[ebp]
	jmp	$LN31@CacheResul
$LN3@CacheResul:

; 632  : 
; 633  : 		pResults->Bind(1, szPromotionType);

	push	1
	mov	edx, DWORD PTR _szPromotionType$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pResults$217389[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBD_N@Z
$LN2@CacheResul:

; 634  : 
; 635  : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$217389[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@CacheResul

; 636  : 		{
; 637  : 			const int iUnit = (UnitTypes)pResults->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pResults$217389[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _iUnit$217398[ebp], eax

; 638  : 			CvAssert(iUnit < iNumUnitTypes);
; 639  : 
; 640  : 			m_pbCivilianUnitType[iUnit] = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+948]
	mov	eax, DWORD PTR _iUnit$217398[ebp]
	mov	BYTE PTR [edx+eax], 1

; 641  : 		}

	jmp	SHORT $LN2@CacheResul
$LN1@CacheResul:

; 642  : 
; 643  : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$217389[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 644  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$217387[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 645  : 
; 646  : 	kUtility.PopulateArrayByExistence(m_pbPostCombatRandomPromotion,
; 647  : 		"UnitPromotions",
; 648  : 		"UnitPromotions_PostCombatRandomPromotion",
; 649  : 		"NewPromotion",
; 650  : 		"PromotionType",
; 651  : 		szPromotionType);

	mov	ecx, DWORD PTR _szPromotionType$[ebp]
	push	ecx
	push	OFFSET ??_C@_0O@IILJPJBB@PromotionType?$AA@
	push	OFFSET ??_C@_0N@FPMIADBK@NewPromotion?$AA@
	push	OFFSET ??_C@_0CJ@MBBLMIHA@UnitPromotions_PostCombatRandomP@
	push	OFFSET ??_C@_0P@GCBJCIAG@UnitPromotions?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 952				; 000003b8H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 652  : 
; 653  : 	return true;

	mov	al, 1
$LN31@CacheResul:

; 654  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR _sqlKey$217291[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1:
	lea	ecx, DWORD PTR _sqlKey$217314[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$2:
	lea	ecx, DWORD PTR _sqlKey$217332[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$3:
	lea	ecx, DWORD PTR _sqlKey$217348[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$4:
	lea	ecx, DWORD PTR _sqlKey$217362[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$5:
	lea	ecx, DWORD PTR _sqlKey$217375[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$6:
	lea	ecx, DWORD PTR _sqlKey$217387[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-620]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResults@CvPromotionEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvPromotionEntry::CacheResults
PUBLIC	?GetLayerAnimationPath@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetLayerAnimationPath
; Function compile flags: /Odtp
;	COMDAT ?GetLayerAnimationPath@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLayerAnimationPath@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetLayerAnimationPath, COMDAT
; _this$ = ecx

; 658  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 659  : 	return m_iLayerAnimationPath;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+460]

; 660  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetLayerAnimationPath@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetLayerAnimationPath
_TEXT	ENDS
PUBLIC	?GetPrereqPromotion@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetPrereqPromotion
; Function compile flags: /Odtp
;	COMDAT ?GetPrereqPromotion@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrereqPromotion@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetPrereqPromotion, COMDAT
; _this$ = ecx

; 664  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 665  : 	return m_iPrereqPromotion;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+464]

; 666  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrereqPromotion@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetPrereqPromotion
_TEXT	ENDS
PUBLIC	?SetPrereqPromotion@CvPromotionEntry@@QAEXH@Z	; CvPromotionEntry::SetPrereqPromotion
; Function compile flags: /Odtp
;	COMDAT ?SetPrereqPromotion@CvPromotionEntry@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?SetPrereqPromotion@CvPromotionEntry@@QAEXH@Z PROC	; CvPromotionEntry::SetPrereqPromotion, COMDAT
; _this$ = ecx

; 670  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  : 	m_iPrereqPromotion = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+464], ecx

; 672  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPrereqPromotion@CvPromotionEntry@@QAEXH@Z ENDP	; CvPromotionEntry::SetPrereqPromotion
_TEXT	ENDS
PUBLIC	?GetPrereqOrPromotion1@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetPrereqOrPromotion1
; Function compile flags: /Odtp
;	COMDAT ?GetPrereqOrPromotion1@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrereqOrPromotion1@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetPrereqOrPromotion1, COMDAT
; _this$ = ecx

; 676  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 	return m_iPrereqOrPromotion1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+468]

; 678  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrereqOrPromotion1@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetPrereqOrPromotion1
_TEXT	ENDS
PUBLIC	?SetPrereqOrPromotion1@CvPromotionEntry@@QAEXH@Z ; CvPromotionEntry::SetPrereqOrPromotion1
; Function compile flags: /Odtp
;	COMDAT ?SetPrereqOrPromotion1@CvPromotionEntry@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?SetPrereqOrPromotion1@CvPromotionEntry@@QAEXH@Z PROC	; CvPromotionEntry::SetPrereqOrPromotion1, COMDAT
; _this$ = ecx

; 682  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 683  : 	m_iPrereqOrPromotion1 = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+468], ecx

; 684  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPrereqOrPromotion1@CvPromotionEntry@@QAEXH@Z ENDP	; CvPromotionEntry::SetPrereqOrPromotion1
_TEXT	ENDS
PUBLIC	?GetPrereqOrPromotion2@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetPrereqOrPromotion2
; Function compile flags: /Odtp
;	COMDAT ?GetPrereqOrPromotion2@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrereqOrPromotion2@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetPrereqOrPromotion2, COMDAT
; _this$ = ecx

; 688  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 	return m_iPrereqOrPromotion2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+472]

; 690  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrereqOrPromotion2@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetPrereqOrPromotion2
_TEXT	ENDS
PUBLIC	?SetPrereqOrPromotion2@CvPromotionEntry@@QAEXH@Z ; CvPromotionEntry::SetPrereqOrPromotion2
; Function compile flags: /Odtp
;	COMDAT ?SetPrereqOrPromotion2@CvPromotionEntry@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?SetPrereqOrPromotion2@CvPromotionEntry@@QAEXH@Z PROC	; CvPromotionEntry::SetPrereqOrPromotion2, COMDAT
; _this$ = ecx

; 694  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 695  : 	m_iPrereqOrPromotion2 = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+472], ecx

; 696  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPrereqOrPromotion2@CvPromotionEntry@@QAEXH@Z ENDP	; CvPromotionEntry::SetPrereqOrPromotion2
_TEXT	ENDS
PUBLIC	?GetPrereqOrPromotion3@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetPrereqOrPromotion3
; Function compile flags: /Odtp
;	COMDAT ?GetPrereqOrPromotion3@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrereqOrPromotion3@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetPrereqOrPromotion3, COMDAT
; _this$ = ecx

; 700  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 701  : 	return m_iPrereqOrPromotion3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+476]

; 702  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrereqOrPromotion3@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetPrereqOrPromotion3
_TEXT	ENDS
PUBLIC	?SetPrereqOrPromotion3@CvPromotionEntry@@QAEXH@Z ; CvPromotionEntry::SetPrereqOrPromotion3
; Function compile flags: /Odtp
;	COMDAT ?SetPrereqOrPromotion3@CvPromotionEntry@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?SetPrereqOrPromotion3@CvPromotionEntry@@QAEXH@Z PROC	; CvPromotionEntry::SetPrereqOrPromotion3, COMDAT
; _this$ = ecx

; 706  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 707  : 	m_iPrereqOrPromotion3 = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+476], ecx

; 708  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPrereqOrPromotion3@CvPromotionEntry@@QAEXH@Z ENDP	; CvPromotionEntry::SetPrereqOrPromotion3
_TEXT	ENDS
PUBLIC	?GetPrereqOrPromotion4@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetPrereqOrPromotion4
; Function compile flags: /Odtp
;	COMDAT ?GetPrereqOrPromotion4@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrereqOrPromotion4@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetPrereqOrPromotion4, COMDAT
; _this$ = ecx

; 712  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 	return m_iPrereqOrPromotion4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+480]

; 714  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrereqOrPromotion4@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetPrereqOrPromotion4
_TEXT	ENDS
PUBLIC	?SetPrereqOrPromotion4@CvPromotionEntry@@QAEXH@Z ; CvPromotionEntry::SetPrereqOrPromotion4
; Function compile flags: /Odtp
;	COMDAT ?SetPrereqOrPromotion4@CvPromotionEntry@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?SetPrereqOrPromotion4@CvPromotionEntry@@QAEXH@Z PROC	; CvPromotionEntry::SetPrereqOrPromotion4, COMDAT
; _this$ = ecx

; 718  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 719  : 	m_iPrereqOrPromotion4 = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+480], ecx

; 720  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPrereqOrPromotion4@CvPromotionEntry@@QAEXH@Z ENDP	; CvPromotionEntry::SetPrereqOrPromotion4
_TEXT	ENDS
PUBLIC	?GetPrereqOrPromotion5@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetPrereqOrPromotion5
; Function compile flags: /Odtp
;	COMDAT ?GetPrereqOrPromotion5@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrereqOrPromotion5@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetPrereqOrPromotion5, COMDAT
; _this$ = ecx

; 724  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 725  : 	return m_iPrereqOrPromotion5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+484]

; 726  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrereqOrPromotion5@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetPrereqOrPromotion5
_TEXT	ENDS
PUBLIC	?SetPrereqOrPromotion5@CvPromotionEntry@@QAEXH@Z ; CvPromotionEntry::SetPrereqOrPromotion5
; Function compile flags: /Odtp
;	COMDAT ?SetPrereqOrPromotion5@CvPromotionEntry@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?SetPrereqOrPromotion5@CvPromotionEntry@@QAEXH@Z PROC	; CvPromotionEntry::SetPrereqOrPromotion5, COMDAT
; _this$ = ecx

; 730  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 	m_iPrereqOrPromotion5 = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+484], ecx

; 732  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPrereqOrPromotion5@CvPromotionEntry@@QAEXH@Z ENDP	; CvPromotionEntry::SetPrereqOrPromotion5
_TEXT	ENDS
PUBLIC	?GetPrereqOrPromotion6@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetPrereqOrPromotion6
; Function compile flags: /Odtp
;	COMDAT ?GetPrereqOrPromotion6@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrereqOrPromotion6@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetPrereqOrPromotion6, COMDAT
; _this$ = ecx

; 736  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 737  : 	return m_iPrereqOrPromotion6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+488]

; 738  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrereqOrPromotion6@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetPrereqOrPromotion6
_TEXT	ENDS
PUBLIC	?SetPrereqOrPromotion6@CvPromotionEntry@@QAEXH@Z ; CvPromotionEntry::SetPrereqOrPromotion6
; Function compile flags: /Odtp
;	COMDAT ?SetPrereqOrPromotion6@CvPromotionEntry@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?SetPrereqOrPromotion6@CvPromotionEntry@@QAEXH@Z PROC	; CvPromotionEntry::SetPrereqOrPromotion6, COMDAT
; _this$ = ecx

; 742  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 743  : 	m_iPrereqOrPromotion6 = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+488], ecx

; 744  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPrereqOrPromotion6@CvPromotionEntry@@QAEXH@Z ENDP	; CvPromotionEntry::SetPrereqOrPromotion6
_TEXT	ENDS
PUBLIC	?GetPrereqOrPromotion7@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetPrereqOrPromotion7
; Function compile flags: /Odtp
;	COMDAT ?GetPrereqOrPromotion7@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrereqOrPromotion7@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetPrereqOrPromotion7, COMDAT
; _this$ = ecx

; 748  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 749  : 	return m_iPrereqOrPromotion7;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+492]

; 750  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrereqOrPromotion7@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetPrereqOrPromotion7
_TEXT	ENDS
PUBLIC	?SetPrereqOrPromotion7@CvPromotionEntry@@QAEXH@Z ; CvPromotionEntry::SetPrereqOrPromotion7
; Function compile flags: /Odtp
;	COMDAT ?SetPrereqOrPromotion7@CvPromotionEntry@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?SetPrereqOrPromotion7@CvPromotionEntry@@QAEXH@Z PROC	; CvPromotionEntry::SetPrereqOrPromotion7, COMDAT
; _this$ = ecx

; 754  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 755  : 	m_iPrereqOrPromotion7 = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+492], ecx

; 756  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPrereqOrPromotion7@CvPromotionEntry@@QAEXH@Z ENDP	; CvPromotionEntry::SetPrereqOrPromotion7
_TEXT	ENDS
PUBLIC	?GetPrereqOrPromotion8@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetPrereqOrPromotion8
; Function compile flags: /Odtp
;	COMDAT ?GetPrereqOrPromotion8@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrereqOrPromotion8@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetPrereqOrPromotion8, COMDAT
; _this$ = ecx

; 760  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 761  : 	return m_iPrereqOrPromotion8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+496]

; 762  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrereqOrPromotion8@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetPrereqOrPromotion8
_TEXT	ENDS
PUBLIC	?SetPrereqOrPromotion8@CvPromotionEntry@@QAEXH@Z ; CvPromotionEntry::SetPrereqOrPromotion8
; Function compile flags: /Odtp
;	COMDAT ?SetPrereqOrPromotion8@CvPromotionEntry@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?SetPrereqOrPromotion8@CvPromotionEntry@@QAEXH@Z PROC	; CvPromotionEntry::SetPrereqOrPromotion8, COMDAT
; _this$ = ecx

; 766  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 767  : 	m_iPrereqOrPromotion8 = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+496], ecx

; 768  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPrereqOrPromotion8@CvPromotionEntry@@QAEXH@Z ENDP	; CvPromotionEntry::SetPrereqOrPromotion8
_TEXT	ENDS
PUBLIC	?GetPrereqOrPromotion9@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetPrereqOrPromotion9
; Function compile flags: /Odtp
;	COMDAT ?GetPrereqOrPromotion9@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrereqOrPromotion9@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetPrereqOrPromotion9, COMDAT
; _this$ = ecx

; 772  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 773  : 	return m_iPrereqOrPromotion9;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+500]

; 774  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrereqOrPromotion9@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetPrereqOrPromotion9
_TEXT	ENDS
PUBLIC	?SetPrereqOrPromotion9@CvPromotionEntry@@QAEXH@Z ; CvPromotionEntry::SetPrereqOrPromotion9
; Function compile flags: /Odtp
;	COMDAT ?SetPrereqOrPromotion9@CvPromotionEntry@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?SetPrereqOrPromotion9@CvPromotionEntry@@QAEXH@Z PROC	; CvPromotionEntry::SetPrereqOrPromotion9, COMDAT
; _this$ = ecx

; 778  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 779  : 	m_iPrereqOrPromotion9 = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+500], ecx

; 780  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPrereqOrPromotion9@CvPromotionEntry@@QAEXH@Z ENDP	; CvPromotionEntry::SetPrereqOrPromotion9
_TEXT	ENDS
PUBLIC	?GetPrereqOrPromotion10@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetPrereqOrPromotion10
; Function compile flags: /Odtp
;	COMDAT ?GetPrereqOrPromotion10@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrereqOrPromotion10@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetPrereqOrPromotion10, COMDAT
; _this$ = ecx

; 786  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 787  : 	return m_iPrereqOrPromotion10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+504]

; 788  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrereqOrPromotion10@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetPrereqOrPromotion10
_TEXT	ENDS
PUBLIC	?SetPrereqOrPromotion10@CvPromotionEntry@@QAEXH@Z ; CvPromotionEntry::SetPrereqOrPromotion10
; Function compile flags: /Odtp
;	COMDAT ?SetPrereqOrPromotion10@CvPromotionEntry@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?SetPrereqOrPromotion10@CvPromotionEntry@@QAEXH@Z PROC	; CvPromotionEntry::SetPrereqOrPromotion10, COMDAT
; _this$ = ecx

; 792  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 793  : 	m_iPrereqOrPromotion10 = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+504], ecx

; 794  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPrereqOrPromotion10@CvPromotionEntry@@QAEXH@Z ENDP	; CvPromotionEntry::SetPrereqOrPromotion10
_TEXT	ENDS
PUBLIC	?GetTechPrereq@CvPromotionEntry@@QBEHXZ		; CvPromotionEntry::GetTechPrereq
; Function compile flags: /Odtp
;	COMDAT ?GetTechPrereq@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTechPrereq@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetTechPrereq, COMDAT
; _this$ = ecx

; 800  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 801  : 	return m_iTechPrereq;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+508]

; 802  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTechPrereq@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetTechPrereq
_TEXT	ENDS
PUBLIC	?GetInvisibleType@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetInvisibleType
; Function compile flags: /Odtp
;	COMDAT ?GetInvisibleType@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInvisibleType@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetInvisibleType, COMDAT
; _this$ = ecx

; 806  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 807  : 	return m_iInvisibleType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+512]

; 808  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInvisibleType@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetInvisibleType
_TEXT	ENDS
PUBLIC	?GetSeeInvisibleType@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetSeeInvisibleType
; Function compile flags: /Odtp
;	COMDAT ?GetSeeInvisibleType@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSeeInvisibleType@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetSeeInvisibleType, COMDAT
; _this$ = ecx

; 812  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 813  : 	return m_iSeeInvisibleType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+516]

; 814  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSeeInvisibleType@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetSeeInvisibleType
_TEXT	ENDS
PUBLIC	?GetVisibilityChange@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetVisibilityChange
; Function compile flags: /Odtp
;	COMDAT ?GetVisibilityChange@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetVisibilityChange@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetVisibilityChange, COMDAT
; _this$ = ecx

; 818  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 819  : 	return m_iVisibilityChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+520]

; 820  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetVisibilityChange@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetVisibilityChange
_TEXT	ENDS
PUBLIC	?GetMovesChange@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetMovesChange
; Function compile flags: /Odtp
;	COMDAT ?GetMovesChange@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMovesChange@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetMovesChange, COMDAT
; _this$ = ecx

; 824  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 825  : 	return m_iMovesChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+524]

; 826  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMovesChange@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetMovesChange
_TEXT	ENDS
PUBLIC	?GetMoveDiscountChange@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetMoveDiscountChange
; Function compile flags: /Odtp
;	COMDAT ?GetMoveDiscountChange@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMoveDiscountChange@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetMoveDiscountChange, COMDAT
; _this$ = ecx

; 830  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 831  : 	return m_iMoveDiscountChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+528]

; 832  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMoveDiscountChange@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetMoveDiscountChange
_TEXT	ENDS
PUBLIC	?GetRangeChange@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetRangeChange
; Function compile flags: /Odtp
;	COMDAT ?GetRangeChange@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRangeChange@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetRangeChange, COMDAT
; _this$ = ecx

; 836  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 837  : 	return m_iRangeChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+532]

; 838  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRangeChange@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetRangeChange
_TEXT	ENDS
PUBLIC	?GetRangedAttackModifier@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetRangedAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?GetRangedAttackModifier@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRangedAttackModifier@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetRangedAttackModifier, COMDAT
; _this$ = ecx

; 842  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 843  : 	return m_iRangedAttackModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+536]

; 844  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRangedAttackModifier@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetRangedAttackModifier
_TEXT	ENDS
PUBLIC	?GetInterceptionCombatModifier@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetInterceptionCombatModifier
; Function compile flags: /Odtp
;	COMDAT ?GetInterceptionCombatModifier@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInterceptionCombatModifier@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetInterceptionCombatModifier, COMDAT
; _this$ = ecx

; 848  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 849  : 	return m_iInterceptionCombatModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+540]

; 850  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInterceptionCombatModifier@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetInterceptionCombatModifier
_TEXT	ENDS
PUBLIC	?GetInterceptionDefenseDamageModifier@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetInterceptionDefenseDamageModifier
; Function compile flags: /Odtp
;	COMDAT ?GetInterceptionDefenseDamageModifier@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInterceptionDefenseDamageModifier@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetInterceptionDefenseDamageModifier, COMDAT
; _this$ = ecx

; 854  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 855  : 	return m_iInterceptionDefenseDamageModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+544]

; 856  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInterceptionDefenseDamageModifier@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetInterceptionDefenseDamageModifier
_TEXT	ENDS
PUBLIC	?GetAirSweepCombatModifier@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetAirSweepCombatModifier
; Function compile flags: /Odtp
;	COMDAT ?GetAirSweepCombatModifier@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAirSweepCombatModifier@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetAirSweepCombatModifier, COMDAT
; _this$ = ecx

; 860  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 861  : 	return m_iAirSweepCombatModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+548]

; 862  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAirSweepCombatModifier@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetAirSweepCombatModifier
_TEXT	ENDS
PUBLIC	?GetInterceptChanceChange@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetInterceptChanceChange
; Function compile flags: /Odtp
;	COMDAT ?GetInterceptChanceChange@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInterceptChanceChange@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetInterceptChanceChange, COMDAT
; _this$ = ecx

; 866  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 867  : 	return m_iInterceptChanceChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+552]

; 868  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInterceptChanceChange@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetInterceptChanceChange
_TEXT	ENDS
PUBLIC	?GetNumInterceptionChange@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetNumInterceptionChange
; Function compile flags: /Odtp
;	COMDAT ?GetNumInterceptionChange@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumInterceptionChange@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetNumInterceptionChange, COMDAT
; _this$ = ecx

; 872  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 873  : 	return m_iNumInterceptionChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+556]

; 874  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumInterceptionChange@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetNumInterceptionChange
_TEXT	ENDS
PUBLIC	?GetEvasionChange@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetEvasionChange
; Function compile flags: /Odtp
;	COMDAT ?GetEvasionChange@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEvasionChange@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetEvasionChange, COMDAT
; _this$ = ecx

; 878  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 879  : 	return m_iEvasionChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+560]

; 880  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEvasionChange@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetEvasionChange
_TEXT	ENDS
PUBLIC	?GetCargoChange@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetCargoChange
; Function compile flags: /Odtp
;	COMDAT ?GetCargoChange@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCargoChange@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetCargoChange, COMDAT
; _this$ = ecx

; 884  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 885  : 	return m_iCargoChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+564]

; 886  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCargoChange@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetCargoChange
_TEXT	ENDS
PUBLIC	?GetEnemyHealChange@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetEnemyHealChange
; Function compile flags: /Odtp
;	COMDAT ?GetEnemyHealChange@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEnemyHealChange@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetEnemyHealChange, COMDAT
; _this$ = ecx

; 890  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 891  : 	return m_iEnemyHealChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+568]

; 892  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEnemyHealChange@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetEnemyHealChange
_TEXT	ENDS
PUBLIC	?GetNeutralHealChange@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetNeutralHealChange
; Function compile flags: /Odtp
;	COMDAT ?GetNeutralHealChange@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNeutralHealChange@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetNeutralHealChange, COMDAT
; _this$ = ecx

; 896  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 897  : 	return m_iNeutralHealChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+572]

; 898  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNeutralHealChange@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetNeutralHealChange
_TEXT	ENDS
PUBLIC	?GetFriendlyHealChange@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetFriendlyHealChange
; Function compile flags: /Odtp
;	COMDAT ?GetFriendlyHealChange@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFriendlyHealChange@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetFriendlyHealChange, COMDAT
; _this$ = ecx

; 902  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 903  : 	return m_iFriendlyHealChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+576]

; 904  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFriendlyHealChange@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetFriendlyHealChange
_TEXT	ENDS
PUBLIC	?GetSameTileHealChange@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetSameTileHealChange
; Function compile flags: /Odtp
;	COMDAT ?GetSameTileHealChange@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSameTileHealChange@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetSameTileHealChange, COMDAT
; _this$ = ecx

; 908  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 909  : 	return m_iSameTileHealChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+580]

; 910  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSameTileHealChange@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetSameTileHealChange
_TEXT	ENDS
PUBLIC	?GetAdjacentTileHealChange@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetAdjacentTileHealChange
; Function compile flags: /Odtp
;	COMDAT ?GetAdjacentTileHealChange@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAdjacentTileHealChange@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetAdjacentTileHealChange, COMDAT
; _this$ = ecx

; 914  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 915  : 	return m_iAdjacentTileHealChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+584]

; 916  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAdjacentTileHealChange@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetAdjacentTileHealChange
_TEXT	ENDS
PUBLIC	?GetEnemyDamageChance@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetEnemyDamageChance
; Function compile flags: /Odtp
;	COMDAT ?GetEnemyDamageChance@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEnemyDamageChance@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetEnemyDamageChance, COMDAT
; _this$ = ecx

; 920  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 921  : 	return m_iEnemyDamageChance;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+588]

; 922  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEnemyDamageChance@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetEnemyDamageChance
_TEXT	ENDS
PUBLIC	?GetNeutralDamageChance@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetNeutralDamageChance
; Function compile flags: /Odtp
;	COMDAT ?GetNeutralDamageChance@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNeutralDamageChance@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetNeutralDamageChance, COMDAT
; _this$ = ecx

; 926  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 927  : 	return m_iNeutralDamageChance;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+592]

; 928  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNeutralDamageChance@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetNeutralDamageChance
_TEXT	ENDS
PUBLIC	?GetEnemyDamage@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetEnemyDamage
; Function compile flags: /Odtp
;	COMDAT ?GetEnemyDamage@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEnemyDamage@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetEnemyDamage, COMDAT
; _this$ = ecx

; 932  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 933  : 	return m_iEnemyDamage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+596]

; 934  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEnemyDamage@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetEnemyDamage
_TEXT	ENDS
PUBLIC	?GetNeutralDamage@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetNeutralDamage
; Function compile flags: /Odtp
;	COMDAT ?GetNeutralDamage@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNeutralDamage@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetNeutralDamage, COMDAT
; _this$ = ecx

; 938  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 939  : 	return m_iNeutralDamage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+600]

; 940  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNeutralDamage@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetNeutralDamage
_TEXT	ENDS
PUBLIC	?GetCombatPercent@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetCombatPercent
; Function compile flags: /Odtp
;	COMDAT ?GetCombatPercent@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCombatPercent@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetCombatPercent, COMDAT
; _this$ = ecx

; 944  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 945  : 	return m_iCombatPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+604]

; 946  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCombatPercent@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetCombatPercent
_TEXT	ENDS
PUBLIC	?GetCityAttackPercent@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetCityAttackPercent
; Function compile flags: /Odtp
;	COMDAT ?GetCityAttackPercent@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCityAttackPercent@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetCityAttackPercent, COMDAT
; _this$ = ecx

; 950  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 951  : 	return m_iCityAttackPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+608]

; 952  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCityAttackPercent@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetCityAttackPercent
_TEXT	ENDS
PUBLIC	?GetCityDefensePercent@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetCityDefensePercent
; Function compile flags: /Odtp
;	COMDAT ?GetCityDefensePercent@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCityDefensePercent@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetCityDefensePercent, COMDAT
; _this$ = ecx

; 956  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 957  : 	return m_iCityDefensePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+612]

; 958  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCityDefensePercent@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetCityDefensePercent
_TEXT	ENDS
PUBLIC	?GetRangedDefenseMod@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetRangedDefenseMod
; Function compile flags: /Odtp
;	COMDAT ?GetRangedDefenseMod@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRangedDefenseMod@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetRangedDefenseMod, COMDAT
; _this$ = ecx

; 962  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 963  : 	return m_iRangedDefenseMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+616]

; 964  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRangedDefenseMod@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetRangedDefenseMod
_TEXT	ENDS
PUBLIC	?GetHillsAttackPercent@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetHillsAttackPercent
; Function compile flags: /Odtp
;	COMDAT ?GetHillsAttackPercent@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHillsAttackPercent@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetHillsAttackPercent, COMDAT
; _this$ = ecx

; 968  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 969  : 	return m_iHillsAttackPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+620]

; 970  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetHillsAttackPercent@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetHillsAttackPercent
_TEXT	ENDS
PUBLIC	?GetHillsDefensePercent@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetHillsDefensePercent
; Function compile flags: /Odtp
;	COMDAT ?GetHillsDefensePercent@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHillsDefensePercent@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetHillsDefensePercent, COMDAT
; _this$ = ecx

; 974  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 975  : 	return m_iHillsDefensePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+624]

; 976  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetHillsDefensePercent@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetHillsDefensePercent
_TEXT	ENDS
PUBLIC	?GetOpenAttackPercent@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetOpenAttackPercent
; Function compile flags: /Odtp
;	COMDAT ?GetOpenAttackPercent@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOpenAttackPercent@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetOpenAttackPercent, COMDAT
; _this$ = ecx

; 980  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 981  : 	return m_iOpenAttackPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+628]

; 982  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetOpenAttackPercent@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetOpenAttackPercent
_TEXT	ENDS
PUBLIC	?GetOpenRangedAttackMod@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetOpenRangedAttackMod
; Function compile flags: /Odtp
;	COMDAT ?GetOpenRangedAttackMod@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOpenRangedAttackMod@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetOpenRangedAttackMod, COMDAT
; _this$ = ecx

; 986  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 987  : 	return m_iOpenRangedAttackMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+632]

; 988  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetOpenRangedAttackMod@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetOpenRangedAttackMod
_TEXT	ENDS
PUBLIC	?GetRoughAttackPercent@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetRoughAttackPercent
; Function compile flags: /Odtp
;	COMDAT ?GetRoughAttackPercent@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRoughAttackPercent@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetRoughAttackPercent, COMDAT
; _this$ = ecx

; 992  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 993  : 	return m_iRoughAttackPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+636]

; 994  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRoughAttackPercent@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetRoughAttackPercent
_TEXT	ENDS
PUBLIC	?GetRoughRangedAttackMod@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetRoughRangedAttackMod
; Function compile flags: /Odtp
;	COMDAT ?GetRoughRangedAttackMod@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRoughRangedAttackMod@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetRoughRangedAttackMod, COMDAT
; _this$ = ecx

; 998  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 999  : 	return m_iRoughRangedAttackMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+640]

; 1000 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRoughRangedAttackMod@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetRoughRangedAttackMod
_TEXT	ENDS
PUBLIC	?GetAttackFortifiedMod@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetAttackFortifiedMod
; Function compile flags: /Odtp
;	COMDAT ?GetAttackFortifiedMod@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAttackFortifiedMod@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetAttackFortifiedMod, COMDAT
; _this$ = ecx

; 1004 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1005 : 	return m_iAttackFortifiedMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+644]

; 1006 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAttackFortifiedMod@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetAttackFortifiedMod
_TEXT	ENDS
PUBLIC	?GetAttackWoundedMod@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetAttackWoundedMod
; Function compile flags: /Odtp
;	COMDAT ?GetAttackWoundedMod@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAttackWoundedMod@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetAttackWoundedMod, COMDAT
; _this$ = ecx

; 1010 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1011 : 	return m_iAttackWoundedMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+648]

; 1012 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAttackWoundedMod@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetAttackWoundedMod
_TEXT	ENDS
PUBLIC	?GetFlankAttackModifier@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetFlankAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?GetFlankAttackModifier@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlankAttackModifier@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetFlankAttackModifier, COMDAT
; _this$ = ecx

; 1016 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1017 : 	return m_iFlankAttackModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+652]

; 1018 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlankAttackModifier@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetFlankAttackModifier
_TEXT	ENDS
PUBLIC	?GetNearbyEnemyCombatMod@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetNearbyEnemyCombatMod
; Function compile flags: /Odtp
;	COMDAT ?GetNearbyEnemyCombatMod@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNearbyEnemyCombatMod@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetNearbyEnemyCombatMod, COMDAT
; _this$ = ecx

; 1022 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1023 : 	return m_iNearbyEnemyCombatMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+656]

; 1024 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNearbyEnemyCombatMod@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetNearbyEnemyCombatMod
_TEXT	ENDS
PUBLIC	?GetNearbyEnemyCombatRange@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetNearbyEnemyCombatRange
; Function compile flags: /Odtp
;	COMDAT ?GetNearbyEnemyCombatRange@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNearbyEnemyCombatRange@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetNearbyEnemyCombatRange, COMDAT
; _this$ = ecx

; 1028 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 	return m_iNearbyEnemyCombatRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+660]

; 1030 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNearbyEnemyCombatRange@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetNearbyEnemyCombatRange
_TEXT	ENDS
PUBLIC	?GetOpenDefensePercent@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetOpenDefensePercent
; Function compile flags: /Odtp
;	COMDAT ?GetOpenDefensePercent@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOpenDefensePercent@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetOpenDefensePercent, COMDAT
; _this$ = ecx

; 1034 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1035 : 	return m_iOpenDefensePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+664]

; 1036 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetOpenDefensePercent@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetOpenDefensePercent
_TEXT	ENDS
PUBLIC	?GetRoughDefensePercent@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetRoughDefensePercent
; Function compile flags: /Odtp
;	COMDAT ?GetRoughDefensePercent@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRoughDefensePercent@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetRoughDefensePercent, COMDAT
; _this$ = ecx

; 1040 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1041 : 	return m_iRoughDefensePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+668]

; 1042 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRoughDefensePercent@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetRoughDefensePercent
_TEXT	ENDS
PUBLIC	?GetExtraAttacks@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetExtraAttacks
; Function compile flags: /Odtp
;	COMDAT ?GetExtraAttacks@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetExtraAttacks@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetExtraAttacks, COMDAT
; _this$ = ecx

; 1046 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1047 : 	return m_iExtraAttacks;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+672]

; 1048 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetExtraAttacks@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetExtraAttacks
_TEXT	ENDS
PUBLIC	?IsGreatGeneral@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsGreatGeneral
; Function compile flags: /Odtp
;	COMDAT ?IsGreatGeneral@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGreatGeneral@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsGreatGeneral, COMDAT
; _this$ = ecx

; 1052 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1053 : 	return m_bGreatGeneral;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+676]

; 1054 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsGreatGeneral@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsGreatGeneral
_TEXT	ENDS
PUBLIC	?IsGreatAdmiral@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsGreatAdmiral
; Function compile flags: /Odtp
;	COMDAT ?IsGreatAdmiral@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGreatAdmiral@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsGreatAdmiral, COMDAT
; _this$ = ecx

; 1058 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1059 : 	return m_bGreatAdmiral;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+677]

; 1060 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsGreatAdmiral@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsGreatAdmiral
_TEXT	ENDS
PUBLIC	?GetGreatGeneralModifier@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetGreatGeneralModifier
; Function compile flags: /Odtp
;	COMDAT ?GetGreatGeneralModifier@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGreatGeneralModifier@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetGreatGeneralModifier, COMDAT
; _this$ = ecx

; 1064 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1065 : 	return m_iGreatGeneralModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+680]

; 1066 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGreatGeneralModifier@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetGreatGeneralModifier
_TEXT	ENDS
PUBLIC	?IsGreatGeneralReceivesMovement@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::IsGreatGeneralReceivesMovement
; Function compile flags: /Odtp
;	COMDAT ?IsGreatGeneralReceivesMovement@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGreatGeneralReceivesMovement@CvPromotionEntry@@QBE_NXZ PROC ; CvPromotionEntry::IsGreatGeneralReceivesMovement, COMDAT
; _this$ = ecx

; 1070 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1071 : 	return m_bGreatGeneralReceivesMovement;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+684]

; 1072 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsGreatGeneralReceivesMovement@CvPromotionEntry@@QBE_NXZ ENDP ; CvPromotionEntry::IsGreatGeneralReceivesMovement
_TEXT	ENDS
PUBLIC	?IsEmbarkedUnitReceivesMovement@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::IsEmbarkedUnitReceivesMovement
; Function compile flags: /Odtp
;	COMDAT ?IsEmbarkedUnitReceivesMovement@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmbarkedUnitReceivesMovement@CvPromotionEntry@@QBE_NXZ PROC ; CvPromotionEntry::IsEmbarkedUnitReceivesMovement, COMDAT
; _this$ = ecx

; 1077 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1078 : 	return m_bEmbarkedUnitReceivesMovement;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+685]

; 1079 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmbarkedUnitReceivesMovement@CvPromotionEntry@@QBE_NXZ ENDP ; CvPromotionEntry::IsEmbarkedUnitReceivesMovement
_TEXT	ENDS
PUBLIC	?GetGreatGeneralOnOrAdjacentConfersMovement@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetGreatGeneralOnOrAdjacentConfersMovement
; Function compile flags: /Odtp
;	COMDAT ?GetGreatGeneralOnOrAdjacentConfersMovement@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGreatGeneralOnOrAdjacentConfersMovement@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetGreatGeneralOnOrAdjacentConfersMovement, COMDAT
; _this$ = ecx

; 1085 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1086 : 	return m_iGreatGeneralOnOrAdjacentConfersMovement;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+688]

; 1087 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGreatGeneralOnOrAdjacentConfersMovement@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetGreatGeneralOnOrAdjacentConfersMovement
_TEXT	ENDS
PUBLIC	?GetGreatGeneralCombatModifier@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetGreatGeneralCombatModifier
; Function compile flags: /Odtp
;	COMDAT ?GetGreatGeneralCombatModifier@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGreatGeneralCombatModifier@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetGreatGeneralCombatModifier, COMDAT
; _this$ = ecx

; 1093 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1094 : 	return m_iGreatGeneralCombatModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+692]

; 1095 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGreatGeneralCombatModifier@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetGreatGeneralCombatModifier
_TEXT	ENDS
PUBLIC	?GetFriendlyLandsModifier@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetFriendlyLandsModifier
; Function compile flags: /Odtp
;	COMDAT ?GetFriendlyLandsModifier@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFriendlyLandsModifier@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetFriendlyLandsModifier, COMDAT
; _this$ = ecx

; 1099 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1100 : 	return m_iFriendlyLandsModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+696]

; 1101 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFriendlyLandsModifier@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetFriendlyLandsModifier
_TEXT	ENDS
PUBLIC	?GetFriendlyLandsAttackModifier@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetFriendlyLandsAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?GetFriendlyLandsAttackModifier@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFriendlyLandsAttackModifier@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetFriendlyLandsAttackModifier, COMDAT
; _this$ = ecx

; 1105 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1106 : 	return m_iFriendlyLandsAttackModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+700]

; 1107 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFriendlyLandsAttackModifier@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetFriendlyLandsAttackModifier
_TEXT	ENDS
PUBLIC	?GetOutsideFriendlyLandsModifier@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetOutsideFriendlyLandsModifier
; Function compile flags: /Odtp
;	COMDAT ?GetOutsideFriendlyLandsModifier@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOutsideFriendlyLandsModifier@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetOutsideFriendlyLandsModifier, COMDAT
; _this$ = ecx

; 1111 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1112 : 	return m_iOutsideFriendlyLandsModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+704]

; 1113 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetOutsideFriendlyLandsModifier@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetOutsideFriendlyLandsModifier
_TEXT	ENDS
PUBLIC	?GetGoldenAgeForeignAttackBonus@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetGoldenAgeForeignAttackBonus
; Function compile flags: /Odtp
;	COMDAT ?GetGoldenAgeForeignAttackBonus@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGoldenAgeForeignAttackBonus@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetGoldenAgeForeignAttackBonus, COMDAT
; _this$ = ecx

; 1118 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 	return m_iGoldenAgeForeignAttackBonus;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+708]

; 1120 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGoldenAgeForeignAttackBonus@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetGoldenAgeForeignAttackBonus
_TEXT	ENDS
PUBLIC	?GetCombatStrengthNearFriendlyMinor@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetCombatStrengthNearFriendlyMinor
; Function compile flags: /Odtp
;	COMDAT ?GetCombatStrengthNearFriendlyMinor@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCombatStrengthNearFriendlyMinor@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetCombatStrengthNearFriendlyMinor, COMDAT
; _this$ = ecx

; 1126 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1127 : 	return m_iCombatStrengthNearFriendlyMinor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+712]

; 1128 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCombatStrengthNearFriendlyMinor@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetCombatStrengthNearFriendlyMinor
_TEXT	ENDS
PUBLIC	?GetCommandType@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetCommandType
; Function compile flags: /Odtp
;	COMDAT ?GetCommandType@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCommandType@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetCommandType, COMDAT
; _this$ = ecx

; 1133 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1134 : 	return m_iCommandType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+716]

; 1135 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCommandType@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetCommandType
_TEXT	ENDS
PUBLIC	?SetCommandType@CvPromotionEntry@@QAEXH@Z	; CvPromotionEntry::SetCommandType
; Function compile flags: /Odtp
;	COMDAT ?SetCommandType@CvPromotionEntry@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iNewType$ = 8						; size = 4
?SetCommandType@CvPromotionEntry@@QAEXH@Z PROC		; CvPromotionEntry::SetCommandType, COMDAT
; _this$ = ecx

; 1139 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1140 : 	m_iCommandType = iNewType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iNewType$[ebp]
	mov	DWORD PTR [eax+716], ecx

; 1141 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetCommandType@CvPromotionEntry@@QAEXH@Z ENDP		; CvPromotionEntry::SetCommandType
_TEXT	ENDS
PUBLIC	?GetUpgradeDiscount@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetUpgradeDiscount
; Function compile flags: /Odtp
;	COMDAT ?GetUpgradeDiscount@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUpgradeDiscount@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetUpgradeDiscount, COMDAT
; _this$ = ecx

; 1145 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 	return m_iUpgradeDiscount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+720]

; 1147 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUpgradeDiscount@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetUpgradeDiscount
_TEXT	ENDS
PUBLIC	?GetExperiencePercent@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetExperiencePercent
; Function compile flags: /Odtp
;	COMDAT ?GetExperiencePercent@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetExperiencePercent@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetExperiencePercent, COMDAT
; _this$ = ecx

; 1151 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1152 : 	return m_iExperiencePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+724]

; 1153 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetExperiencePercent@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetExperiencePercent
_TEXT	ENDS
PUBLIC	?GetAdjacentMod@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetAdjacentMod
; Function compile flags: /Odtp
;	COMDAT ?GetAdjacentMod@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAdjacentMod@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetAdjacentMod, COMDAT
; _this$ = ecx

; 1157 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1158 : 	return m_iAdjacentMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+728]

; 1159 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAdjacentMod@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetAdjacentMod
_TEXT	ENDS
PUBLIC	?GetAttackMod@CvPromotionEntry@@QBEHXZ		; CvPromotionEntry::GetAttackMod
; Function compile flags: /Odtp
;	COMDAT ?GetAttackMod@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAttackMod@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetAttackMod, COMDAT
; _this$ = ecx

; 1163 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1164 : 	return m_iAttackMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+732]

; 1165 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAttackMod@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetAttackMod
_TEXT	ENDS
PUBLIC	?GetDefenseMod@CvPromotionEntry@@QBEHXZ		; CvPromotionEntry::GetDefenseMod
; Function compile flags: /Odtp
;	COMDAT ?GetDefenseMod@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDefenseMod@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetDefenseMod, COMDAT
; _this$ = ecx

; 1169 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1170 : 	return m_iDefenseMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+736]

; 1171 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDefenseMod@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetDefenseMod
_TEXT	ENDS
PUBLIC	?GetDropRange@CvPromotionEntry@@QBEHXZ		; CvPromotionEntry::GetDropRange
; Function compile flags: /Odtp
;	COMDAT ?GetDropRange@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDropRange@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetDropRange, COMDAT
; _this$ = ecx

; 1175 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1176 : 	return m_iDropRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+740]

; 1177 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDropRange@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetDropRange
_TEXT	ENDS
PUBLIC	?GetExtraNavalMoves@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetExtraNavalMoves
; Function compile flags: /Odtp
;	COMDAT ?GetExtraNavalMoves@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetExtraNavalMoves@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetExtraNavalMoves, COMDAT
; _this$ = ecx

; 1181 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1182 : 	return m_iExtraNavalMoves;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+744]

; 1183 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetExtraNavalMoves@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetExtraNavalMoves
_TEXT	ENDS
PUBLIC	?GetHPHealedIfDefeatEnemy@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetHPHealedIfDefeatEnemy
; Function compile flags: /Odtp
;	COMDAT ?GetHPHealedIfDefeatEnemy@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHPHealedIfDefeatEnemy@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetHPHealedIfDefeatEnemy, COMDAT
; _this$ = ecx

; 1187 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1188 : 	return m_iHPHealedIfDefeatEnemy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+748]

; 1189 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetHPHealedIfDefeatEnemy@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetHPHealedIfDefeatEnemy
_TEXT	ENDS
PUBLIC	?GetGoldenAgeValueFromKills@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetGoldenAgeValueFromKills
; Function compile flags: /Odtp
;	COMDAT ?GetGoldenAgeValueFromKills@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGoldenAgeValueFromKills@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetGoldenAgeValueFromKills, COMDAT
; _this$ = ecx

; 1193 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1194 : 	return m_iGoldenAgeValueFromKills;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+752]

; 1195 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGoldenAgeValueFromKills@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetGoldenAgeValueFromKills
_TEXT	ENDS
PUBLIC	?GetExtraWithdrawal@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetExtraWithdrawal
; Function compile flags: /Odtp
;	COMDAT ?GetExtraWithdrawal@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetExtraWithdrawal@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetExtraWithdrawal, COMDAT
; _this$ = ecx

; 1199 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1200 : 	return m_iExtraWithdrawal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+756]

; 1201 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetExtraWithdrawal@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetExtraWithdrawal
_TEXT	ENDS
PUBLIC	?GetEmbarkExtraVisibility@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetEmbarkExtraVisibility
; Function compile flags: /Odtp
;	COMDAT ?GetEmbarkExtraVisibility@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEmbarkExtraVisibility@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetEmbarkExtraVisibility, COMDAT
; _this$ = ecx

; 1205 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1206 : 	return m_iEmbarkExtraVisibility;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+760]

; 1207 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEmbarkExtraVisibility@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetEmbarkExtraVisibility
_TEXT	ENDS
PUBLIC	?GetEmbarkDefenseModifier@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetEmbarkDefenseModifier
; Function compile flags: /Odtp
;	COMDAT ?GetEmbarkDefenseModifier@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEmbarkDefenseModifier@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetEmbarkDefenseModifier, COMDAT
; _this$ = ecx

; 1211 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1212 : 	return m_iEmbarkDefenseModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+764]

; 1213 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEmbarkDefenseModifier@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetEmbarkDefenseModifier
_TEXT	ENDS
PUBLIC	?GetCapitalDefenseModifier@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetCapitalDefenseModifier
; Function compile flags: /Odtp
;	COMDAT ?GetCapitalDefenseModifier@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCapitalDefenseModifier@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetCapitalDefenseModifier, COMDAT
; _this$ = ecx

; 1217 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1218 : 	return m_iCapitalDefenseModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+768]

; 1219 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCapitalDefenseModifier@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetCapitalDefenseModifier
_TEXT	ENDS
PUBLIC	?GetCapitalDefenseFalloff@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetCapitalDefenseFalloff
; Function compile flags: /Odtp
;	COMDAT ?GetCapitalDefenseFalloff@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCapitalDefenseFalloff@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetCapitalDefenseFalloff, COMDAT
; _this$ = ecx

; 1223 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1224 : 	return m_iCapitalDefenseFalloff;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+772]

; 1225 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCapitalDefenseFalloff@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetCapitalDefenseFalloff
_TEXT	ENDS
PUBLIC	?GetCityAttackPlunderModifier@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetCityAttackPlunderModifier
; Function compile flags: /Odtp
;	COMDAT ?GetCityAttackPlunderModifier@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCityAttackPlunderModifier@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetCityAttackPlunderModifier, COMDAT
; _this$ = ecx

; 1229 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1230 : 	return m_iCityAttackPlunderModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+776]

; 1231 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCityAttackPlunderModifier@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetCityAttackPlunderModifier
_TEXT	ENDS
PUBLIC	?GetReligiousStrengthLossRivalTerritory@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetReligiousStrengthLossRivalTerritory
; Function compile flags: /Odtp
;	COMDAT ?GetReligiousStrengthLossRivalTerritory@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReligiousStrengthLossRivalTerritory@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetReligiousStrengthLossRivalTerritory, COMDAT
; _this$ = ecx

; 1235 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1236 : 	return m_iReligiousStrengthLossRivalTerritory;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+780]

; 1237 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetReligiousStrengthLossRivalTerritory@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetReligiousStrengthLossRivalTerritory
_TEXT	ENDS
PUBLIC	?GetTradeMissionInfluenceModifier@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetTradeMissionInfluenceModifier
; Function compile flags: /Odtp
;	COMDAT ?GetTradeMissionInfluenceModifier@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTradeMissionInfluenceModifier@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetTradeMissionInfluenceModifier, COMDAT
; _this$ = ecx

; 1241 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1242 : 	return m_iTradeMissionInfluenceModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+784]

; 1243 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTradeMissionInfluenceModifier@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetTradeMissionInfluenceModifier
_TEXT	ENDS
PUBLIC	?GetTradeMissionGoldModifier@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetTradeMissionGoldModifier
; Function compile flags: /Odtp
;	COMDAT ?GetTradeMissionGoldModifier@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTradeMissionGoldModifier@CvPromotionEntry@@QBEHXZ PROC ; CvPromotionEntry::GetTradeMissionGoldModifier, COMDAT
; _this$ = ecx

; 1247 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1248 : 	return m_iTradeMissionGoldModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+788]

; 1249 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTradeMissionGoldModifier@CvPromotionEntry@@QBEHXZ ENDP ; CvPromotionEntry::GetTradeMissionGoldModifier
_TEXT	ENDS
PUBLIC	?IsCannotBeChosen@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsCannotBeChosen
; Function compile flags: /Odtp
;	COMDAT ?IsCannotBeChosen@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCannotBeChosen@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsCannotBeChosen, COMDAT
; _this$ = ecx

; 1253 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 	return m_bCannotBeChosen;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+792]

; 1255 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsCannotBeChosen@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsCannotBeChosen
_TEXT	ENDS
PUBLIC	?IsLostWithUpgrade@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsLostWithUpgrade
; Function compile flags: /Odtp
;	COMDAT ?IsLostWithUpgrade@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLostWithUpgrade@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsLostWithUpgrade, COMDAT
; _this$ = ecx

; 1259 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1260 : 	return m_bLostWithUpgrade;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+793]

; 1261 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsLostWithUpgrade@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsLostWithUpgrade
_TEXT	ENDS
PUBLIC	?IsNotWithUpgrade@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsNotWithUpgrade
; Function compile flags: /Odtp
;	COMDAT ?IsNotWithUpgrade@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsNotWithUpgrade@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsNotWithUpgrade, COMDAT
; _this$ = ecx

; 1265 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1266 : 	return m_bNotWithUpgrade;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+794]

; 1267 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsNotWithUpgrade@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsNotWithUpgrade
_TEXT	ENDS
PUBLIC	?IsInstaHeal@CvPromotionEntry@@QBE_NXZ		; CvPromotionEntry::IsInstaHeal
; Function compile flags: /Odtp
;	COMDAT ?IsInstaHeal@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsInstaHeal@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsInstaHeal, COMDAT
; _this$ = ecx

; 1271 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1272 : 	return m_bInstaHeal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+795]

; 1273 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsInstaHeal@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsInstaHeal
_TEXT	ENDS
PUBLIC	?IsLeader@CvPromotionEntry@@QBE_NXZ		; CvPromotionEntry::IsLeader
; Function compile flags: /Odtp
;	COMDAT ?IsLeader@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLeader@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsLeader, COMDAT
; _this$ = ecx

; 1277 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1278 : 	return m_bLeader;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+796]

; 1279 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsLeader@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsLeader
_TEXT	ENDS
PUBLIC	?IsBlitz@CvPromotionEntry@@QBE_NXZ		; CvPromotionEntry::IsBlitz
; Function compile flags: /Odtp
;	COMDAT ?IsBlitz@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBlitz@CvPromotionEntry@@QBE_NXZ PROC			; CvPromotionEntry::IsBlitz, COMDAT
; _this$ = ecx

; 1283 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1284 : 	return m_bBlitz;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+797]

; 1285 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsBlitz@CvPromotionEntry@@QBE_NXZ ENDP			; CvPromotionEntry::IsBlitz
_TEXT	ENDS
PUBLIC	?IsAmphib@CvPromotionEntry@@QBE_NXZ		; CvPromotionEntry::IsAmphib
; Function compile flags: /Odtp
;	COMDAT ?IsAmphib@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAmphib@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsAmphib, COMDAT
; _this$ = ecx

; 1289 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1290 : 	return m_bAmphib;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+798]

; 1291 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsAmphib@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsAmphib
_TEXT	ENDS
PUBLIC	?IsRiver@CvPromotionEntry@@QBE_NXZ		; CvPromotionEntry::IsRiver
; Function compile flags: /Odtp
;	COMDAT ?IsRiver@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRiver@CvPromotionEntry@@QBE_NXZ PROC			; CvPromotionEntry::IsRiver, COMDAT
; _this$ = ecx

; 1295 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1296 : 	return m_bRiver;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+799]

; 1297 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRiver@CvPromotionEntry@@QBE_NXZ ENDP			; CvPromotionEntry::IsRiver
_TEXT	ENDS
PUBLIC	?IsEnemyRoute@CvPromotionEntry@@QBE_NXZ		; CvPromotionEntry::IsEnemyRoute
; Function compile flags: /Odtp
;	COMDAT ?IsEnemyRoute@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEnemyRoute@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsEnemyRoute, COMDAT
; _this$ = ecx

; 1301 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1302 : 	return m_bEnemyRoute;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+800]

; 1303 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsEnemyRoute@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsEnemyRoute
_TEXT	ENDS
PUBLIC	?IsRivalTerritory@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsRivalTerritory
; Function compile flags: /Odtp
;	COMDAT ?IsRivalTerritory@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRivalTerritory@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsRivalTerritory, COMDAT
; _this$ = ecx

; 1307 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1308 : 	return m_bRivalTerritory;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+801]

; 1309 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRivalTerritory@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsRivalTerritory
_TEXT	ENDS
PUBLIC	?IsMustSetUpToRangedAttack@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::IsMustSetUpToRangedAttack
; Function compile flags: /Odtp
;	COMDAT ?IsMustSetUpToRangedAttack@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMustSetUpToRangedAttack@CvPromotionEntry@@QBE_NXZ PROC ; CvPromotionEntry::IsMustSetUpToRangedAttack, COMDAT
; _this$ = ecx

; 1313 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1314 : 	return m_bMustSetUpToRangedAttack;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+802]

; 1315 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsMustSetUpToRangedAttack@CvPromotionEntry@@QBE_NXZ ENDP ; CvPromotionEntry::IsMustSetUpToRangedAttack
_TEXT	ENDS
PUBLIC	?IsRangedSupportFire@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsRangedSupportFire
; Function compile flags: /Odtp
;	COMDAT ?IsRangedSupportFire@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRangedSupportFire@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsRangedSupportFire, COMDAT
; _this$ = ecx

; 1319 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1320 : 	return m_bRangedSupportFire;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+803]

; 1321 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRangedSupportFire@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsRangedSupportFire
_TEXT	ENDS
PUBLIC	?IsAlwaysHeal@CvPromotionEntry@@QBE_NXZ		; CvPromotionEntry::IsAlwaysHeal
; Function compile flags: /Odtp
;	COMDAT ?IsAlwaysHeal@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAlwaysHeal@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsAlwaysHeal, COMDAT
; _this$ = ecx

; 1325 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1326 : 	return m_bAlwaysHeal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+804]

; 1327 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsAlwaysHeal@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsAlwaysHeal
_TEXT	ENDS
PUBLIC	?IsHealOutsideFriendly@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::IsHealOutsideFriendly
; Function compile flags: /Odtp
;	COMDAT ?IsHealOutsideFriendly@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHealOutsideFriendly@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsHealOutsideFriendly, COMDAT
; _this$ = ecx

; 1331 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1332 : 	return m_bHealOutsideFriendly;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+805]

; 1333 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsHealOutsideFriendly@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsHealOutsideFriendly
_TEXT	ENDS
PUBLIC	?IsHillsDoubleMove@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsHillsDoubleMove
; Function compile flags: /Odtp
;	COMDAT ?IsHillsDoubleMove@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHillsDoubleMove@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsHillsDoubleMove, COMDAT
; _this$ = ecx

; 1337 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1338 : 	return m_bHillsDoubleMove;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+806]

; 1339 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsHillsDoubleMove@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsHillsDoubleMove
_TEXT	ENDS
PUBLIC	?IsIgnoreTerrainCost@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsIgnoreTerrainCost
; Function compile flags: /Odtp
;	COMDAT ?IsIgnoreTerrainCost@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsIgnoreTerrainCost@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsIgnoreTerrainCost, COMDAT
; _this$ = ecx

; 1343 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1344 : 	return m_bIgnoreTerrainCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+807]

; 1345 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsIgnoreTerrainCost@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsIgnoreTerrainCost
_TEXT	ENDS
PUBLIC	?IsRoughTerrainEndsTurn@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::IsRoughTerrainEndsTurn
; Function compile flags: /Odtp
;	COMDAT ?IsRoughTerrainEndsTurn@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRoughTerrainEndsTurn@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsRoughTerrainEndsTurn, COMDAT
; _this$ = ecx

; 1349 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1350 : 	return m_bRoughTerrainEndsTurn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+808]

; 1351 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRoughTerrainEndsTurn@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsRoughTerrainEndsTurn
_TEXT	ENDS
PUBLIC	?IsHoveringUnit@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsHoveringUnit
; Function compile flags: /Odtp
;	COMDAT ?IsHoveringUnit@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHoveringUnit@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsHoveringUnit, COMDAT
; _this$ = ecx

; 1355 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1356 : 	return m_bHoveringUnit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+809]

; 1357 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsHoveringUnit@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsHoveringUnit
_TEXT	ENDS
PUBLIC	?IsFlatMovementCost@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsFlatMovementCost
; Function compile flags: /Odtp
;	COMDAT ?IsFlatMovementCost@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFlatMovementCost@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsFlatMovementCost, COMDAT
; _this$ = ecx

; 1361 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1362 : 	return m_bFlatMovementCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+810]

; 1363 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsFlatMovementCost@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsFlatMovementCost
_TEXT	ENDS
PUBLIC	?IsCanMoveImpassable@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsCanMoveImpassable
; Function compile flags: /Odtp
;	COMDAT ?IsCanMoveImpassable@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCanMoveImpassable@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsCanMoveImpassable, COMDAT
; _this$ = ecx

; 1367 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1368 : 	return m_bCanMoveImpassable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+811]

; 1369 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsCanMoveImpassable@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsCanMoveImpassable
_TEXT	ENDS
PUBLIC	?IsNoCapture@CvPromotionEntry@@QBE_NXZ		; CvPromotionEntry::IsNoCapture
; Function compile flags: /Odtp
;	COMDAT ?IsNoCapture@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsNoCapture@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsNoCapture, COMDAT
; _this$ = ecx

; 1373 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1374 : 	return m_bNoCapture;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+812]

; 1375 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsNoCapture@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsNoCapture
_TEXT	ENDS
PUBLIC	?IsOnlyDefensive@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsOnlyDefensive
; Function compile flags: /Odtp
;	COMDAT ?IsOnlyDefensive@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOnlyDefensive@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsOnlyDefensive, COMDAT
; _this$ = ecx

; 1379 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1380 : 	return m_bOnlyDefensive;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+813]

; 1381 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsOnlyDefensive@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsOnlyDefensive
_TEXT	ENDS
PUBLIC	?IsNoDefensiveBonus@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsNoDefensiveBonus
; Function compile flags: /Odtp
;	COMDAT ?IsNoDefensiveBonus@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsNoDefensiveBonus@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsNoDefensiveBonus, COMDAT
; _this$ = ecx

; 1385 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1386 : 	return m_bNoDefensiveBonus;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+814]

; 1387 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsNoDefensiveBonus@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsNoDefensiveBonus
_TEXT	ENDS
PUBLIC	?IsNukeImmune@CvPromotionEntry@@QBE_NXZ		; CvPromotionEntry::IsNukeImmune
; Function compile flags: /Odtp
;	COMDAT ?IsNukeImmune@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsNukeImmune@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsNukeImmune, COMDAT
; _this$ = ecx

; 1391 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1392 : 	return m_bNukeImmune;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+815]

; 1393 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsNukeImmune@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsNukeImmune
_TEXT	ENDS
PUBLIC	?IsHiddenNationality@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsHiddenNationality
; Function compile flags: /Odtp
;	COMDAT ?IsHiddenNationality@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHiddenNationality@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsHiddenNationality, COMDAT
; _this$ = ecx

; 1397 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1398 : 	return m_bHiddenNationality;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+816]

; 1399 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsHiddenNationality@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsHiddenNationality
_TEXT	ENDS
PUBLIC	?IsAlwaysHostile@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsAlwaysHostile
; Function compile flags: /Odtp
;	COMDAT ?IsAlwaysHostile@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAlwaysHostile@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsAlwaysHostile, COMDAT
; _this$ = ecx

; 1403 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1404 : 	return m_bAlwaysHostile;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+817]

; 1405 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsAlwaysHostile@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsAlwaysHostile
_TEXT	ENDS
PUBLIC	?IsNoRevealMap@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsNoRevealMap
; Function compile flags: /Odtp
;	COMDAT ?IsNoRevealMap@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsNoRevealMap@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsNoRevealMap, COMDAT
; _this$ = ecx

; 1409 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1410 : 	return m_bNoRevealMap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+818]

; 1411 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsNoRevealMap@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsNoRevealMap
_TEXT	ENDS
PUBLIC	?IsRecon@CvPromotionEntry@@QBE_NXZ		; CvPromotionEntry::IsRecon
; Function compile flags: /Odtp
;	COMDAT ?IsRecon@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRecon@CvPromotionEntry@@QBE_NXZ PROC			; CvPromotionEntry::IsRecon, COMDAT
; _this$ = ecx

; 1415 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1416 : 	return m_bRecon;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+819]

; 1417 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRecon@CvPromotionEntry@@QBE_NXZ ENDP			; CvPromotionEntry::IsRecon
_TEXT	ENDS
PUBLIC	?CanMoveAllTerrain@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::CanMoveAllTerrain
; Function compile flags: /Odtp
;	COMDAT ?CanMoveAllTerrain@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CanMoveAllTerrain@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::CanMoveAllTerrain, COMDAT
; _this$ = ecx

; 1421 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1422 : 	return m_bCanMoveAllTerrain;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+820]

; 1423 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CanMoveAllTerrain@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::CanMoveAllTerrain
_TEXT	ENDS
PUBLIC	?IsCanMoveAfterAttacking@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::IsCanMoveAfterAttacking
; Function compile flags: /Odtp
;	COMDAT ?IsCanMoveAfterAttacking@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCanMoveAfterAttacking@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsCanMoveAfterAttacking, COMDAT
; _this$ = ecx

; 1427 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1428 : 	return m_bCanMoveAfterAttacking;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+821]

; 1429 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsCanMoveAfterAttacking@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsCanMoveAfterAttacking
_TEXT	ENDS
PUBLIC	?IsAirSweepCapable@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsAirSweepCapable
; Function compile flags: /Odtp
;	COMDAT ?IsAirSweepCapable@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAirSweepCapable@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsAirSweepCapable, COMDAT
; _this$ = ecx

; 1433 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1434 : 	return m_bAirSweepCapable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+822]

; 1435 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsAirSweepCapable@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsAirSweepCapable
_TEXT	ENDS
PUBLIC	?IsAllowsEmbarkation@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsAllowsEmbarkation
; Function compile flags: /Odtp
;	COMDAT ?IsAllowsEmbarkation@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAllowsEmbarkation@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsAllowsEmbarkation, COMDAT
; _this$ = ecx

; 1439 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1440 : 	return m_bAllowsEmbarkation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+823]

; 1441 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsAllowsEmbarkation@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsAllowsEmbarkation
_TEXT	ENDS
PUBLIC	?IsRangeAttackIgnoreLOS@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::IsRangeAttackIgnoreLOS
; Function compile flags: /Odtp
;	COMDAT ?IsRangeAttackIgnoreLOS@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRangeAttackIgnoreLOS@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsRangeAttackIgnoreLOS, COMDAT
; _this$ = ecx

; 1445 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1446 : 	return m_bRangeAttackIgnoreLOS;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+824]

; 1447 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRangeAttackIgnoreLOS@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsRangeAttackIgnoreLOS
_TEXT	ENDS
PUBLIC	?IsFreePillageMoves@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsFreePillageMoves
; Function compile flags: /Odtp
;	COMDAT ?IsFreePillageMoves@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFreePillageMoves@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsFreePillageMoves, COMDAT
; _this$ = ecx

; 1451 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1452 : 	return m_bFreePillageMoves;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+825]

; 1453 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsFreePillageMoves@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsFreePillageMoves
_TEXT	ENDS
PUBLIC	?IsHealOnPillage@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsHealOnPillage
; Function compile flags: /Odtp
;	COMDAT ?IsHealOnPillage@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHealOnPillage@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsHealOnPillage, COMDAT
; _this$ = ecx

; 1457 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1458 : 	return m_bHealOnPillage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+826]

; 1459 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsHealOnPillage@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsHealOnPillage
_TEXT	ENDS
PUBLIC	?IsHealIfDefeatExcludeBarbarians@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::IsHealIfDefeatExcludeBarbarians
; Function compile flags: /Odtp
;	COMDAT ?IsHealIfDefeatExcludeBarbarians@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHealIfDefeatExcludeBarbarians@CvPromotionEntry@@QBE_NXZ PROC ; CvPromotionEntry::IsHealIfDefeatExcludeBarbarians, COMDAT
; _this$ = ecx

; 1463 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1464 : 	return m_bHealIfDefeatExcludesBarbarians;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+827]

; 1465 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsHealIfDefeatExcludeBarbarians@CvPromotionEntry@@QBE_NXZ ENDP ; CvPromotionEntry::IsHealIfDefeatExcludeBarbarians
_TEXT	ENDS
PUBLIC	?IsEmbarkedAllWater@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsEmbarkedAllWater
; Function compile flags: /Odtp
;	COMDAT ?IsEmbarkedAllWater@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmbarkedAllWater@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsEmbarkedAllWater, COMDAT
; _this$ = ecx

; 1469 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1470 : 	return m_bEmbarkedAllWater;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+828]

; 1471 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmbarkedAllWater@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsEmbarkedAllWater
_TEXT	ENDS
PUBLIC	?IsCityAttackOnly@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsCityAttackOnly
; Function compile flags: /Odtp
;	COMDAT ?IsCityAttackOnly@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCityAttackOnly@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsCityAttackOnly, COMDAT
; _this$ = ecx

; 1475 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1476 : 	return m_bCityAttackOnly;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+829]

; 1477 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsCityAttackOnly@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsCityAttackOnly
_TEXT	ENDS
PUBLIC	?IsCaptureDefeatedEnemy@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::IsCaptureDefeatedEnemy
; Function compile flags: /Odtp
;	COMDAT ?IsCaptureDefeatedEnemy@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCaptureDefeatedEnemy@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsCaptureDefeatedEnemy, COMDAT
; _this$ = ecx

; 1481 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1482 : 	return m_bCaptureDefeatedEnemy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+830]

; 1483 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsCaptureDefeatedEnemy@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsCaptureDefeatedEnemy
_TEXT	ENDS
PUBLIC	?IsIgnoreGreatGeneralBenefit@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::IsIgnoreGreatGeneralBenefit
; Function compile flags: /Odtp
;	COMDAT ?IsIgnoreGreatGeneralBenefit@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsIgnoreGreatGeneralBenefit@CvPromotionEntry@@QBE_NXZ PROC ; CvPromotionEntry::IsIgnoreGreatGeneralBenefit, COMDAT
; _this$ = ecx

; 1487 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1488 : 	return m_bIgnoreGreatGeneralBenefit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+831]

; 1489 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsIgnoreGreatGeneralBenefit@CvPromotionEntry@@QBE_NXZ ENDP ; CvPromotionEntry::IsIgnoreGreatGeneralBenefit
_TEXT	ENDS
PUBLIC	?IsIgnoreZOC@CvPromotionEntry@@QBE_NXZ		; CvPromotionEntry::IsIgnoreZOC
; Function compile flags: /Odtp
;	COMDAT ?IsIgnoreZOC@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsIgnoreZOC@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsIgnoreZOC, COMDAT
; _this$ = ecx

; 1493 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1494 : 	return m_bIgnoreZOC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+832]

; 1495 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsIgnoreZOC@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsIgnoreZOC
_TEXT	ENDS
PUBLIC	?IsSapper@CvPromotionEntry@@QBE_NXZ		; CvPromotionEntry::IsSapper
; Function compile flags: /Odtp
;	COMDAT ?IsSapper@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSapper@CvPromotionEntry@@QBE_NXZ PROC		; CvPromotionEntry::IsSapper, COMDAT
; _this$ = ecx

; 1499 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1500 : 	return m_bSapper;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+835]

; 1501 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsSapper@CvPromotionEntry@@QBE_NXZ ENDP		; CvPromotionEntry::IsSapper
_TEXT	ENDS
PUBLIC	?GetConvertDomainUnit@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetConvertDomainUnit
; Function compile flags: /Odtp
;	COMDAT ?GetConvertDomainUnit@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetConvertDomainUnit@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetConvertDomainUnit, COMDAT
; _this$ = ecx

; 1506 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1507 : 	return m_iConvertDomainUnit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+840]

; 1508 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetConvertDomainUnit@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetConvertDomainUnit
_TEXT	ENDS
PUBLIC	?GetConvertDomain@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetConvertDomain
; Function compile flags: /Odtp
;	COMDAT ?GetConvertDomain@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetConvertDomain@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetConvertDomain, COMDAT
; _this$ = ecx

; 1512 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1513 : 	return m_iConvertDomain;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+844]

; 1514 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetConvertDomain@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetConvertDomain
_TEXT	ENDS
PUBLIC	?GetGiveDomain@CvPromotionEntry@@QBEHXZ		; CvPromotionEntry::GetGiveDomain
; Function compile flags: /Odtp
;	COMDAT ?GetGiveDomain@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGiveDomain@CvPromotionEntry@@QBEHXZ PROC		; CvPromotionEntry::GetGiveDomain, COMDAT
; _this$ = ecx

; 1518 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1519 : 	return m_iGiveDomain;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+836]

; 1520 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGiveDomain@CvPromotionEntry@@QBEHXZ ENDP		; CvPromotionEntry::GetGiveDomain
_TEXT	ENDS
PUBLIC	?IsCanHeavyCharge@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsCanHeavyCharge
; Function compile flags: /Odtp
;	COMDAT ?IsCanHeavyCharge@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCanHeavyCharge@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::IsCanHeavyCharge, COMDAT
; _this$ = ecx

; 1524 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1525 : 	return m_bCanHeavyCharge;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+848]

; 1526 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsCanHeavyCharge@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::IsCanHeavyCharge
_TEXT	ENDS
PUBLIC	?GetHeavyChargeDownhill@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetHeavyChargeDownhill
; Function compile flags: /Odtp
;	COMDAT ?GetHeavyChargeDownhill@CvPromotionEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHeavyChargeDownhill@CvPromotionEntry@@QBEHXZ PROC	; CvPromotionEntry::GetHeavyChargeDownhill, COMDAT
; _this$ = ecx

; 1531 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1532 : 	return m_iHeavyChargeDownhill;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+852]

; 1533 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetHeavyChargeDownhill@CvPromotionEntry@@QBEHXZ ENDP	; CvPromotionEntry::GetHeavyChargeDownhill
_TEXT	ENDS
PUBLIC	?HasPostCombatPromotions@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::HasPostCombatPromotions
; Function compile flags: /Odtp
;	COMDAT ?HasPostCombatPromotions@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasPostCombatPromotions@CvPromotionEntry@@QBE_NXZ PROC	; CvPromotionEntry::HasPostCombatPromotions, COMDAT
; _this$ = ecx

; 1538 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1539 : 	return m_bHasPostCombatPromotions;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+833]

; 1540 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HasPostCombatPromotions@CvPromotionEntry@@QBE_NXZ ENDP	; CvPromotionEntry::HasPostCombatPromotions
_TEXT	ENDS
PUBLIC	?ArePostCombatPromotionsExclusive@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::ArePostCombatPromotionsExclusive
; Function compile flags: /Odtp
;	COMDAT ?ArePostCombatPromotionsExclusive@CvPromotionEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ArePostCombatPromotionsExclusive@CvPromotionEntry@@QBE_NXZ PROC ; CvPromotionEntry::ArePostCombatPromotionsExclusive, COMDAT
; _this$ = ecx

; 1544 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1545 : 	return m_bPostCombatPromotionsExclusive;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+834]

; 1546 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ArePostCombatPromotionsExclusive@CvPromotionEntry@@QBE_NXZ ENDP ; CvPromotionEntry::ArePostCombatPromotionsExclusive
_TEXT	ENDS
PUBLIC	?GetSound@CvPromotionEntry@@QBEPBDXZ		; CvPromotionEntry::GetSound
; Function compile flags: /Odtp
;	COMDAT ?GetSound@CvPromotionEntry@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSound@CvPromotionEntry@@QBEPBDXZ PROC		; CvPromotionEntry::GetSound, COMDAT
; _this$ = ecx

; 1550 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1551 : 	return m_strSound;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 856				; 00000358H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 1552 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSound@CvPromotionEntry@@QBEPBDXZ ENDP		; CvPromotionEntry::GetSound
_TEXT	ENDS
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ?SetSound@CvPromotionEntry@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T220111 = -4						; size = 4
_szVal$ = 8						; size = 4
?SetSound@CvPromotionEntry@@QAEXPBD@Z PROC		; CvPromotionEntry::SetSound, COMDAT
; _this$ = ecx

; 1556 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1557 : 	m_strSound = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 856				; 00000358H
	mov	DWORD PTR $T220111[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN4@SetSound
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T220111[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@SetSound
$LN4@SetSound:
	mov	ecx, DWORD PTR $T220111[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@SetSound:

; 1558 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetSound@CvPromotionEntry@@QAEXPBD@Z ENDP		; CvPromotionEntry::SetSound
_TEXT	ENDS
PUBLIC	?GetTerrainAttackPercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetTerrainAttackPercent
; Function compile flags: /Odtp
;	COMDAT ?GetTerrainAttackPercent@CvPromotionEntry@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetTerrainAttackPercent@CvPromotionEntry@@QBEHH@Z PROC	; CvPromotionEntry::GetTerrainAttackPercent, COMDAT
; _this$ = ecx

; 1571 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1572 : 	CvAssertMsg(i < GC.getNumTerrainInfos(), "Index out of bounds");
; 1573 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1574 : 
; 1575 : 	if(i > -1 && i < GC.getNumTerrainInfos() && m_piTerrainAttackPercent)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetTerrain
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumTerrainInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumTerrainInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetTerrain
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+884], 0
	je	SHORT $LN1@GetTerrain

; 1576 : #endif
; 1577 : 	{
; 1578 : 		return m_piTerrainAttackPercent[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+884]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN2@GetTerrain
$LN1@GetTerrain:

; 1579 : 	}
; 1580 : 
; 1581 : 	return -1;

	or	eax, -1
$LN2@GetTerrain:

; 1582 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTerrainAttackPercent@CvPromotionEntry@@QBEHH@Z ENDP	; CvPromotionEntry::GetTerrainAttackPercent
_TEXT	ENDS
PUBLIC	?GetTerrainDefensePercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetTerrainDefensePercent
; Function compile flags: /Odtp
;	COMDAT ?GetTerrainDefensePercent@CvPromotionEntry@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetTerrainDefensePercent@CvPromotionEntry@@QBEHH@Z PROC ; CvPromotionEntry::GetTerrainDefensePercent, COMDAT
; _this$ = ecx

; 1593 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1594 : 	CvAssertMsg(i < GC.getNumTerrainInfos(), "Index out of bounds");
; 1595 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1596 : 
; 1597 : 	if(i > -1 && i < GC.getNumTerrainInfos() && m_piTerrainDefensePercent)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetTerrain@2
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumTerrainInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumTerrainInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetTerrain@2
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+888], 0
	je	SHORT $LN1@GetTerrain@2

; 1598 : #endif
; 1599 : 	{
; 1600 : 		return m_piTerrainDefensePercent[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+888]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN2@GetTerrain@2
$LN1@GetTerrain@2:

; 1601 : 	}
; 1602 : 
; 1603 : 	return-1;

	or	eax, -1
$LN2@GetTerrain@2:

; 1604 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTerrainDefensePercent@CvPromotionEntry@@QBEHH@Z ENDP ; CvPromotionEntry::GetTerrainDefensePercent
_TEXT	ENDS
PUBLIC	?GetFeatureAttackPercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetFeatureAttackPercent
; Function compile flags: /Odtp
;	COMDAT ?GetFeatureAttackPercent@CvPromotionEntry@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetFeatureAttackPercent@CvPromotionEntry@@QBEHH@Z PROC	; CvPromotionEntry::GetFeatureAttackPercent, COMDAT
; _this$ = ecx

; 1615 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1616 : 	CvAssertMsg(i < GC.getNumFeatureInfos(), "Index out of bounds");
; 1617 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1618 : 
; 1619 : 	if(i > -1 && i < GC.getNumFeatureInfos() && m_piFeatureAttackPercent)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetFeature
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumFeatureInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumFeatureInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetFeature
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+892], 0
	je	SHORT $LN1@GetFeature

; 1620 : #endif
; 1621 : 	{
; 1622 : 		return m_piFeatureAttackPercent[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+892]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN2@GetFeature
$LN1@GetFeature:

; 1623 : 	}
; 1624 : 
; 1625 : 	return -1;

	or	eax, -1
$LN2@GetFeature:

; 1626 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFeatureAttackPercent@CvPromotionEntry@@QBEHH@Z ENDP	; CvPromotionEntry::GetFeatureAttackPercent
_TEXT	ENDS
PUBLIC	?GetFeatureDefensePercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetFeatureDefensePercent
; Function compile flags: /Odtp
;	COMDAT ?GetFeatureDefensePercent@CvPromotionEntry@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetFeatureDefensePercent@CvPromotionEntry@@QBEHH@Z PROC ; CvPromotionEntry::GetFeatureDefensePercent, COMDAT
; _this$ = ecx

; 1637 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1638 : 	CvAssertMsg(i < GC.getNumFeatureInfos(), "Index out of bounds");
; 1639 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1640 : 
; 1641 : 	if(i > -1 && i < GC.getNumFeatureInfos() && m_piFeatureDefensePercent)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetFeature@2
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumFeatureInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumFeatureInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetFeature@2
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+896], 0
	je	SHORT $LN1@GetFeature@2

; 1642 : #endif
; 1643 : 	{
; 1644 : 		return m_piFeatureDefensePercent[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+896]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN2@GetFeature@2
$LN1@GetFeature@2:

; 1645 : 	}
; 1646 : 
; 1647 : 	return -1;

	or	eax, -1
$LN2@GetFeature@2:

; 1648 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFeatureDefensePercent@CvPromotionEntry@@QBEHH@Z ENDP ; CvPromotionEntry::GetFeatureDefensePercent
_TEXT	ENDS
PUBLIC	?GetUnitCombatModifierPercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetUnitCombatModifierPercent
EXTRN	?getNumUnitCombatClassInfos@CvGlobals@@QAEHXZ:PROC ; CvGlobals::getNumUnitCombatClassInfos
; Function compile flags: /Odtp
;	COMDAT ?GetUnitCombatModifierPercent@CvPromotionEntry@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetUnitCombatModifierPercent@CvPromotionEntry@@QBEHH@Z PROC ; CvPromotionEntry::GetUnitCombatModifierPercent, COMDAT
; _this$ = ecx

; 1659 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1660 : 	CvAssertMsg(i < GC.getNumUnitCombatClassInfos(), "Index out of bounds");
; 1661 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1662 : 
; 1663 : 	if(i > -1 && i < GC.getNumUnitCombatClassInfos() && m_piUnitCombatModifierPercent)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetUnitCom
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumUnitCombatClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumUnitCombatClassInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetUnitCom
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+900], 0
	je	SHORT $LN1@GetUnitCom

; 1664 : #endif
; 1665 : 	{
; 1666 : 		return m_piUnitCombatModifierPercent[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+900]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN2@GetUnitCom
$LN1@GetUnitCom:

; 1667 : 	}
; 1668 : 
; 1669 : 	return -1;

	or	eax, -1
$LN2@GetUnitCom:

; 1670 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitCombatModifierPercent@CvPromotionEntry@@QBEHH@Z ENDP ; CvPromotionEntry::GetUnitCombatModifierPercent
_TEXT	ENDS
PUBLIC	?GetUnitClassModifierPercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetUnitClassModifierPercent
EXTRN	?getNumUnitClassInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumUnitClassInfos
; Function compile flags: /Odtp
;	COMDAT ?GetUnitClassModifierPercent@CvPromotionEntry@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetUnitClassModifierPercent@CvPromotionEntry@@QBEHH@Z PROC ; CvPromotionEntry::GetUnitClassModifierPercent, COMDAT
; _this$ = ecx

; 1681 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1682 : 	CvAssertMsg(i < GC.getNumUnitClassInfos(), "Index out of bounds");
; 1683 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1684 : 
; 1685 : 	if(i > -1 && i < GC.getNumUnitClassInfos() && m_piUnitClassModifierPercent)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetUnitCla
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumUnitClassInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumUnitClassInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetUnitCla
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+904], 0
	je	SHORT $LN1@GetUnitCla

; 1686 : #endif
; 1687 : 	{
; 1688 : 		return m_piUnitClassModifierPercent[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+904]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN2@GetUnitCla
$LN1@GetUnitCla:

; 1689 : 	}
; 1690 : 
; 1691 : 	return -1;

	or	eax, -1
$LN2@GetUnitCla:

; 1692 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitClassModifierPercent@CvPromotionEntry@@QBEHH@Z ENDP ; CvPromotionEntry::GetUnitClassModifierPercent
_TEXT	ENDS
PUBLIC	?GetDomainModifierPercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetDomainModifierPercent
; Function compile flags: /Odtp
;	COMDAT ?GetDomainModifierPercent@CvPromotionEntry@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetDomainModifierPercent@CvPromotionEntry@@QBEHH@Z PROC ; CvPromotionEntry::GetDomainModifierPercent, COMDAT
; _this$ = ecx

; 1703 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1704 : 	CvAssertMsg(i < NUM_DOMAIN_TYPES, "Index out of bounds");
; 1705 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1706 : 
; 1707 : 	if(i > -1 && i < NUM_DOMAIN_TYPES && m_piDomainModifierPercent)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetDomainM
	cmp	DWORD PTR _i$[ebp], 5
	jge	SHORT $LN1@GetDomainM
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+908], 0
	je	SHORT $LN1@GetDomainM

; 1708 : #endif
; 1709 : 	{
; 1710 : 		return m_piDomainModifierPercent[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+908]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN2@GetDomainM
$LN1@GetDomainM:

; 1711 : 	}
; 1712 : 
; 1713 : 	return -1;

	or	eax, -1
$LN2@GetDomainM:

; 1714 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDomainModifierPercent@CvPromotionEntry@@QBEHH@Z ENDP ; CvPromotionEntry::GetDomainModifierPercent
_TEXT	ENDS
PUBLIC	?GetUnitClassAttackModifier@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetUnitClassAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?GetUnitClassAttackModifier@CvPromotionEntry@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetUnitClassAttackModifier@CvPromotionEntry@@QBEHH@Z PROC ; CvPromotionEntry::GetUnitClassAttackModifier, COMDAT
; _this$ = ecx

; 1725 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1726 : 	CvAssertMsg(i < GC.getNumUnitClassInfos(), "Index out of bounds");
; 1727 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1728 : 
; 1729 : 	if(i > -1 && i < GC.getNumUnitClassInfos() && m_piUnitClassAttackModifier)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetUnitCla@2
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumUnitClassInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumUnitClassInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetUnitCla@2
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+912], 0
	je	SHORT $LN1@GetUnitCla@2

; 1730 : #endif
; 1731 : 	{
; 1732 : 		return m_piUnitClassAttackModifier[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+912]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN2@GetUnitCla@2
$LN1@GetUnitCla@2:

; 1733 : 	}
; 1734 : 
; 1735 : 	return -1;

	or	eax, -1
$LN2@GetUnitCla@2:

; 1736 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitClassAttackModifier@CvPromotionEntry@@QBEHH@Z ENDP ; CvPromotionEntry::GetUnitClassAttackModifier
_TEXT	ENDS
PUBLIC	?GetUnitClassDefenseModifier@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetUnitClassDefenseModifier
; Function compile flags: /Odtp
;	COMDAT ?GetUnitClassDefenseModifier@CvPromotionEntry@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetUnitClassDefenseModifier@CvPromotionEntry@@QBEHH@Z PROC ; CvPromotionEntry::GetUnitClassDefenseModifier, COMDAT
; _this$ = ecx

; 1747 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1748 : 	CvAssertMsg(i < GC.getNumUnitClassInfos(), "Index out of bounds");
; 1749 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1750 : 
; 1751 : 	if(i > -1 && i < GC.getNumUnitClassInfos() && m_piUnitClassDefenseModifier)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetUnitCla@3
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumUnitClassInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumUnitClassInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetUnitCla@3
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+916], 0
	je	SHORT $LN1@GetUnitCla@3

; 1752 : #endif
; 1753 : 	{
; 1754 : 		return m_piUnitClassDefenseModifier[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+916]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN2@GetUnitCla@3
$LN1@GetUnitCla@3:

; 1755 : 	}
; 1756 : 
; 1757 : 	return -1;

	or	eax, -1
$LN2@GetUnitCla@3:

; 1758 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitClassDefenseModifier@CvPromotionEntry@@QBEHH@Z ENDP ; CvPromotionEntry::GetUnitClassDefenseModifier
_TEXT	ENDS
PUBLIC	?GetFeaturePassableTech@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetFeaturePassableTech
; Function compile flags: /Odtp
;	COMDAT ?GetFeaturePassableTech@CvPromotionEntry@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetFeaturePassableTech@CvPromotionEntry@@QBEHH@Z PROC	; CvPromotionEntry::GetFeaturePassableTech, COMDAT
; _this$ = ecx

; 1769 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1770 : 	CvAssertMsg(i < GC.getNumFeatureInfos(), "Index out of bounds");
; 1771 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1772 : 
; 1773 : 	if(i > -1 && i < GC.getNumFeatureInfos() && m_piFeaturePassableTech)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetFeature@3
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumFeatureInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumFeatureInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetFeature@3
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+924], 0
	je	SHORT $LN1@GetFeature@3

; 1774 : #endif
; 1775 : 	{
; 1776 : 		return m_piFeaturePassableTech[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+924]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN2@GetFeature@3
$LN1@GetFeature@3:

; 1777 : 	}
; 1778 : 
; 1779 : 	return -1;

	or	eax, -1
$LN2@GetFeature@3:

; 1780 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFeaturePassableTech@CvPromotionEntry@@QBEHH@Z ENDP	; CvPromotionEntry::GetFeaturePassableTech
_TEXT	ENDS
PUBLIC	?GetTerrainDoubleMove@CvPromotionEntry@@QBE_NH@Z ; CvPromotionEntry::GetTerrainDoubleMove
; Function compile flags: /Odtp
;	COMDAT ?GetTerrainDoubleMove@CvPromotionEntry@@QBE_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetTerrainDoubleMove@CvPromotionEntry@@QBE_NH@Z PROC	; CvPromotionEntry::GetTerrainDoubleMove, COMDAT
; _this$ = ecx

; 1791 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1792 : 	CvAssertMsg(i < GC.getNumTerrainInfos(), "Index out of bounds");
; 1793 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1794 : 
; 1795 : 	if(i > -1 && i < GC.getNumTerrainInfos() && m_pbTerrainDoubleMove)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetTerrain@3
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumTerrainInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumTerrainInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetTerrain@3
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+928], 0
	je	SHORT $LN1@GetTerrain@3

; 1796 : #endif
; 1797 : 	{
; 1798 : 		return m_pbTerrainDoubleMove[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+928]
	mov	eax, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR [edx+eax]
	jmp	SHORT $LN2@GetTerrain@3
$LN1@GetTerrain@3:

; 1799 : 	}
; 1800 : 
; 1801 : 	return false;

	xor	al, al
$LN2@GetTerrain@3:

; 1802 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTerrainDoubleMove@CvPromotionEntry@@QBE_NH@Z ENDP	; CvPromotionEntry::GetTerrainDoubleMove
_TEXT	ENDS
PUBLIC	?GetFeatureDoubleMove@CvPromotionEntry@@QBE_NH@Z ; CvPromotionEntry::GetFeatureDoubleMove
; Function compile flags: /Odtp
;	COMDAT ?GetFeatureDoubleMove@CvPromotionEntry@@QBE_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetFeatureDoubleMove@CvPromotionEntry@@QBE_NH@Z PROC	; CvPromotionEntry::GetFeatureDoubleMove, COMDAT
; _this$ = ecx

; 1813 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1814 : 	CvAssertMsg(i < GC.getNumFeatureInfos(), "Index out of bounds");
; 1815 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1816 : 
; 1817 : 	if(i > -1 && i < GC.getNumFeatureInfos() && m_pbFeatureDoubleMove)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetFeature@4
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumFeatureInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumFeatureInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetFeature@4
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+932], 0
	je	SHORT $LN1@GetFeature@4

; 1818 : #endif
; 1819 : 	{
; 1820 : 		return m_pbFeatureDoubleMove[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	mov	eax, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR [edx+eax]
	jmp	SHORT $LN2@GetFeature@4
$LN1@GetFeature@4:

; 1821 : 	}
; 1822 : 
; 1823 : 	return false;

	xor	al, al
$LN2@GetFeature@4:

; 1824 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFeatureDoubleMove@CvPromotionEntry@@QBE_NH@Z ENDP	; CvPromotionEntry::GetFeatureDoubleMove
_TEXT	ENDS
PUBLIC	?GetTerrainImpassable@CvPromotionEntry@@QBE_NH@Z ; CvPromotionEntry::GetTerrainImpassable
; Function compile flags: /Odtp
;	COMDAT ?GetTerrainImpassable@CvPromotionEntry@@QBE_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetTerrainImpassable@CvPromotionEntry@@QBE_NH@Z PROC	; CvPromotionEntry::GetTerrainImpassable, COMDAT
; _this$ = ecx

; 1835 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1836 : 	CvAssertMsg(i < GC.getNumTerrainInfos(), "Index out of bounds");
; 1837 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1838 : 
; 1839 : 	if(i > -1 && i < GC.getNumTerrainInfos() && m_pbTerrainImpassable)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetTerrain@4
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumTerrainInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumTerrainInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetTerrain@4
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+936], 0
	je	SHORT $LN1@GetTerrain@4

; 1840 : #endif
; 1841 : 	{
; 1842 : 		return m_pbTerrainImpassable[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+936]
	mov	eax, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR [edx+eax]
	jmp	SHORT $LN2@GetTerrain@4
$LN1@GetTerrain@4:

; 1843 : 	}
; 1844 : 
; 1845 : 	return false;

	xor	al, al
$LN2@GetTerrain@4:

; 1846 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTerrainImpassable@CvPromotionEntry@@QBE_NH@Z ENDP	; CvPromotionEntry::GetTerrainImpassable
_TEXT	ENDS
PUBLIC	?GetTerrainPassableTech@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetTerrainPassableTech
; Function compile flags: /Odtp
;	COMDAT ?GetTerrainPassableTech@CvPromotionEntry@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetTerrainPassableTech@CvPromotionEntry@@QBEHH@Z PROC	; CvPromotionEntry::GetTerrainPassableTech, COMDAT
; _this$ = ecx

; 1857 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1858 : 	CvAssertMsg(i < GC.getNumTerrainInfos(), "Index out of bounds");
; 1859 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1860 : 
; 1861 : 	if(i > -1 && i < GC.getNumTerrainInfos() && m_piTerrainPassableTech)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetTerrain@5
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumTerrainInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumTerrainInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetTerrain@5
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+920], 0
	je	SHORT $LN1@GetTerrain@5

; 1862 : #endif
; 1863 : 	{
; 1864 : 		return m_piTerrainPassableTech[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+920]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN2@GetTerrain@5
$LN1@GetTerrain@5:

; 1865 : 	}
; 1866 : 
; 1867 : 	return -1;

	or	eax, -1
$LN2@GetTerrain@5:

; 1868 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTerrainPassableTech@CvPromotionEntry@@QBEHH@Z ENDP	; CvPromotionEntry::GetTerrainPassableTech
_TEXT	ENDS
PUBLIC	?GetFeatureImpassable@CvPromotionEntry@@QBE_NH@Z ; CvPromotionEntry::GetFeatureImpassable
; Function compile flags: /Odtp
;	COMDAT ?GetFeatureImpassable@CvPromotionEntry@@QBE_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetFeatureImpassable@CvPromotionEntry@@QBE_NH@Z PROC	; CvPromotionEntry::GetFeatureImpassable, COMDAT
; _this$ = ecx

; 1879 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1880 : 	CvAssertMsg(i < GC.getNumFeatureInfos(), "Index out of bounds");
; 1881 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1882 : 
; 1883 : 	if(i > -1 && i < GC.getNumFeatureInfos() && m_pbFeatureImpassable)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetFeature@5
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumFeatureInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumFeatureInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetFeature@5
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+940], 0
	je	SHORT $LN1@GetFeature@5

; 1884 : #endif
; 1885 : 	{
; 1886 : 		return m_pbFeatureImpassable[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+940]
	mov	eax, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR [edx+eax]
	jmp	SHORT $LN2@GetFeature@5
$LN1@GetFeature@5:

; 1887 : 	}
; 1888 : 
; 1889 : 	return false;

	xor	al, al
$LN2@GetFeature@5:

; 1890 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFeatureImpassable@CvPromotionEntry@@QBE_NH@Z ENDP	; CvPromotionEntry::GetFeatureImpassable
_TEXT	ENDS
PUBLIC	?GetUnitCombatClass@CvPromotionEntry@@QBE_NH@Z	; CvPromotionEntry::GetUnitCombatClass
; Function compile flags: /Odtp
;	COMDAT ?GetUnitCombatClass@CvPromotionEntry@@QBE_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetUnitCombatClass@CvPromotionEntry@@QBE_NH@Z PROC	; CvPromotionEntry::GetUnitCombatClass, COMDAT
; _this$ = ecx

; 1901 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1902 : 	CvAssertMsg(i < GC.getNumUnitCombatClassInfos(), "Index out of bounds");
; 1903 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1904 : 
; 1905 : 	if(i > -1 && i < GC.getNumUnitCombatClassInfos() && m_pbUnitCombat)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetUnitCom@2
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumUnitCombatClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumUnitCombatClassInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetUnitCom@2
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+944], 0
	je	SHORT $LN1@GetUnitCom@2

; 1906 : #endif
; 1907 : 	{
; 1908 : 		return m_pbUnitCombat[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+944]
	mov	eax, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR [edx+eax]
	jmp	SHORT $LN2@GetUnitCom@2
$LN1@GetUnitCom@2:

; 1909 : 	}
; 1910 : 
; 1911 : 	return false;

	xor	al, al
$LN2@GetUnitCom@2:

; 1912 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitCombatClass@CvPromotionEntry@@QBE_NH@Z ENDP	; CvPromotionEntry::GetUnitCombatClass
_TEXT	ENDS
PUBLIC	?GetCivilianUnitType@CvPromotionEntry@@QBE_NH@Z	; CvPromotionEntry::GetCivilianUnitType
EXTRN	?getNumUnitInfos@CvGlobals@@QAEHXZ:PROC		; CvGlobals::getNumUnitInfos
; Function compile flags: /Odtp
;	COMDAT ?GetCivilianUnitType@CvPromotionEntry@@QBE_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetCivilianUnitType@CvPromotionEntry@@QBE_NH@Z PROC	; CvPromotionEntry::GetCivilianUnitType, COMDAT
; _this$ = ecx

; 1923 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1924 : 	CvAssertMsg(i < GC.getNumUnitInfos(), "Index out of bounds");
; 1925 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1926 : 
; 1927 : 	if(i > -1 && i < GC.getNumUnitInfos() && m_pbCivilianUnitType)

	cmp	DWORD PTR _i$[ebp], -1
	jle	SHORT $LN1@GetCivilia
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumUnitInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumUnitInfos
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@GetCivilia
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+948], 0
	je	SHORT $LN1@GetCivilia

; 1928 : #endif
; 1929 : 	{
; 1930 : 		return m_pbCivilianUnitType[i];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+948]
	mov	eax, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR [edx+eax]
	jmp	SHORT $LN2@GetCivilia
$LN1@GetCivilia:

; 1931 : 	}
; 1932 : 
; 1933 : 	return false;

	xor	al, al
$LN2@GetCivilia:

; 1934 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetCivilianUnitType@CvPromotionEntry@@QBE_NH@Z ENDP	; CvPromotionEntry::GetCivilianUnitType
_TEXT	ENDS
PUBLIC	?IsPostCombatRandomPromotion@CvPromotionEntry@@QBE_NH@Z ; CvPromotionEntry::IsPostCombatRandomPromotion
; Function compile flags: /Odtp
;	COMDAT ?IsPostCombatRandomPromotion@CvPromotionEntry@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?IsPostCombatRandomPromotion@CvPromotionEntry@@QBE_NH@Z PROC ; CvPromotionEntry::IsPostCombatRandomPromotion, COMDAT
; _this$ = ecx

; 1948 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1949 : 	CvAssertMsg(i < GC.getNumPromotionInfos(), "Index out of bounds");
; 1950 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1951 : 	return m_pbPostCombatRandomPromotion ? m_pbPostCombatRandomPromotion[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+952], 0
	je	SHORT $LN3@IsPostComb
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@IsPostComb
$LN3@IsPostComb:
	mov	BYTE PTR tv68[ebp], 0
$LN4@IsPostComb:
	mov	al, BYTE PTR tv68[ebp]

; 1952 : #endif
; 1953 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsPostCombatRandomPromotion@CvPromotionEntry@@QBE_NH@Z ENDP ; CvPromotionEntry::IsPostCombatRandomPromotion
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::~_Vector_val<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >
PUBLIC	?_Buy@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@IAE_NI@Z ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::_Buy
PUBLIC	??0CvPromotionXMLEntries@@QAE@XZ		; CvPromotionXMLEntries::CvPromotionXMLEntries
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0CvPromotionXMLEntries@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvPromotionXMLEntries@@QAE@XZ$1
__ehfuncinfo$??0CvPromotionXMLEntries@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvPromotionXMLEntries@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvpromotionclasses.cpp
xdata$x	ENDS
;	COMDAT ??0CvPromotionXMLEntries@@QAE@XZ
_TEXT	SEGMENT
tv92 = -132						; size = 4
tv149 = -128						; size = 4
_this$ = -124						; size = 4
$T220183 = -30						; size = 1
$T220170 = -29						; size = 1
$T220166 = -28						; size = 4
$T220159 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CvPromotionXMLEntries@@QAE@XZ PROC			; CvPromotionXMLEntries::CvPromotionXMLEntries, COMDAT
; _this$ = ecx

; 1960 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvPromotionXMLEntries@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T220183[ebp]
	mov	DWORD PTR $T220159[ebp], eax
	lea	ecx, DWORD PTR $T220170[ebp]
	mov	DWORD PTR $T220166[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv149[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv92[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@IAE_NI@Z ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::_Buy
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 1961 : 
; 1962 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvPromotionXMLEntries@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ
__ehhandler$??0CvPromotionXMLEntries@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvPromotionXMLEntries@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvPromotionXMLEntries@@QAE@XZ ENDP			; CvPromotionXMLEntries::CvPromotionXMLEntries
PUBLIC	??1?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::~vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >
PUBLIC	?_Tidy@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@IAEXXZ ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::_Tidy
PUBLIC	?DeleteArray@CvPromotionXMLEntries@@QAEXXZ	; CvPromotionXMLEntries::DeleteArray
PUBLIC	??1CvPromotionXMLEntries@@QAE@XZ		; CvPromotionXMLEntries::~CvPromotionXMLEntries
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1CvPromotionXMLEntries@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvPromotionXMLEntries@@QAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvPromotionXMLEntries@@QAE@XZ$1
__ehfuncinfo$??1CvPromotionXMLEntries@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CvPromotionXMLEntries@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvpromotionclasses.cpp
xdata$x	ENDS
;	COMDAT ??1CvPromotionXMLEntries@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1CvPromotionXMLEntries@@QAE@XZ PROC			; CvPromotionXMLEntries::~CvPromotionXMLEntries, COMDAT
; _this$ = ecx

; 1966 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvPromotionXMLEntries@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1967 : 	DeleteArray();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteArray@CvPromotionXMLEntries@@QAEXXZ ; CvPromotionXMLEntries::DeleteArray

; 1968 : }

	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@IAEXXZ ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvPromotionXMLEntries@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::~vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >
__unwindfunclet$??1CvPromotionXMLEntries@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ
__ehhandler$??1CvPromotionXMLEntries@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvPromotionXMLEntries@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvPromotionXMLEntries@@QAE@XZ ENDP			; CvPromotionXMLEntries::~CvPromotionXMLEntries
PUBLIC	?GetPromotionEntries@CvPromotionXMLEntries@@QAEAAV?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@XZ ; CvPromotionXMLEntries::GetPromotionEntries
; Function compile flags: /Odtp
;	COMDAT ?GetPromotionEntries@CvPromotionXMLEntries@@QAEAAV?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPromotionEntries@CvPromotionXMLEntries@@QAEAAV?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@XZ PROC ; CvPromotionXMLEntries::GetPromotionEntries, COMDAT
; _this$ = ecx

; 1972 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1973 : 	return m_paPromotionEntries;

	mov	eax, DWORD PTR _this$[ebp]

; 1974 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPromotionEntries@CvPromotionXMLEntries@@QAEAAV?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@XZ ENDP ; CvPromotionXMLEntries::GetPromotionEntries
_TEXT	ENDS
PUBLIC	?GetNumPromotions@CvPromotionXMLEntries@@QAEHXZ	; CvPromotionXMLEntries::GetNumPromotions
; Function compile flags: /Odtp
;	COMDAT ?GetNumPromotions@CvPromotionXMLEntries@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumPromotions@CvPromotionXMLEntries@@QAEHXZ PROC	; CvPromotionXMLEntries::GetNumPromotions, COMDAT
; _this$ = ecx

; 1982 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1983 : 	return m_paPromotionEntries.size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 1984 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumPromotions@CvPromotionXMLEntries@@QAEHXZ ENDP	; CvPromotionXMLEntries::GetNumPromotions
_TEXT	ENDS
PUBLIC	?GetEntry@CvPromotionXMLEntries@@QAEPAVCvPromotionEntry@@H@Z ; CvPromotionXMLEntries::GetEntry
; Function compile flags: /Odtp
;	COMDAT ?GetEntry@CvPromotionXMLEntries@@QAEPAVCvPromotionEntry@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?GetEntry@CvPromotionXMLEntries@@QAEPAVCvPromotionEntry@@H@Z PROC ; CvPromotionXMLEntries::GetEntry, COMDAT
; _this$ = ecx

; 1992 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1993 : 	return m_paPromotionEntries[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 1994 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetEntry@CvPromotionXMLEntries@@QAEPAVCvPromotionEntry@@H@Z ENDP ; CvPromotionXMLEntries::GetEntry
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@2@0@Z ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::erase
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ?DeleteArray@CvPromotionXMLEntries@@QAEXXZ
_TEXT	SEGMENT
tv143 = -116						; size = 4
_this$ = -112						; size = 4
$T220431 = -56						; size = 4
$T220415 = -52						; size = 4
$T220535 = -48						; size = 4
$T220534 = -44						; size = 4
$T220533 = -40						; size = 4
$T220532 = -36						; size = 4
$T220531 = -32						; size = 4
$T220399 = -28						; size = 4
$T220392 = -24						; size = 4
$T220391 = -20						; size = 4
$T220358 = -16						; size = 4
$T220334 = -12						; size = 4
$T220324 = -8						; size = 4
_it$218126 = -4						; size = 4
?DeleteArray@CvPromotionXMLEntries@@QAEXXZ PROC		; CvPromotionXMLEntries::DeleteArray, COMDAT
; _this$ = ecx

; 1998 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	DWORD PTR _this$[ebp], ecx

; 1999 : 	for(std::vector<CvPromotionEntry*>::iterator it = m_paPromotionEntries.begin(); it != m_paPromotionEntries.end(); ++it)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T220334[ebp], ecx
	mov	edx, DWORD PTR $T220334[ebp]
	mov	DWORD PTR _it$218126[ebp], edx
	jmp	SHORT $LN3@DeleteArra
$LN2@DeleteArra:
	mov	eax, DWORD PTR _it$218126[ebp]
	add	eax, 4
	mov	DWORD PTR _it$218126[ebp], eax
$LN3@DeleteArra:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T220358[ebp], edx
	mov	eax, DWORD PTR $T220358[ebp]
	mov	DWORD PTR $T220324[ebp], eax
	mov	ecx, DWORD PTR _it$218126[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T220324[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@DeleteArra

; 2000 : 	{
; 2001 : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$218126[ebp]
	mov	DWORD PTR $T220399[ebp], edx
	mov	eax, DWORD PTR $T220399[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T220392[ebp], ecx
	mov	edx, DWORD PTR $T220392[ebp]
	mov	DWORD PTR $T220391[ebp], edx
	cmp	DWORD PTR $T220391[ebp], 0
	je	SHORT $LN32@DeleteArra
	mov	ecx, DWORD PTR $T220391[ebp]
	call	??1CvPromotionEntry@@QAE@XZ		; CvPromotionEntry::~CvPromotionEntry
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@DeleteArra
	mov	ecx, DWORD PTR $T220391[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@DeleteArra:
	mov	edx, DWORD PTR $T220391[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@DeleteArra
$LN32@DeleteArra:
	mov	DWORD PTR tv143[ebp], 0
$LN33@DeleteArra:
	mov	eax, DWORD PTR $T220399[ebp]
	mov	DWORD PTR [eax], 0

; 2002 : 	}

	jmp	$LN2@DeleteArra
$LN1@DeleteArra:

; 2003 : 
; 2004 : 	m_paPromotionEntries.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T220415[ebp], edx
	mov	eax, DWORD PTR $T220415[ebp]
	mov	DWORD PTR $T220532[ebp], eax
	mov	ecx, DWORD PTR $T220532[ebp]
	mov	DWORD PTR $T220531[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T220431[ebp], eax
	mov	ecx, DWORD PTR $T220431[ebp]
	mov	DWORD PTR $T220534[ebp], ecx
	mov	edx, DWORD PTR $T220534[ebp]
	mov	DWORD PTR $T220533[ebp], edx
	mov	eax, DWORD PTR $T220531[ebp]
	push	eax
	mov	ecx, DWORD PTR $T220533[ebp]
	push	ecx
	lea	edx, DWORD PTR $T220535[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@2@0@Z ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::erase

; 2005 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteArray@CvPromotionXMLEntries@@QAEXXZ ENDP		; CvPromotionXMLEntries::DeleteArray
_TEXT	ENDS
PUBLIC	??0CvUnitPromotions@@QAE@XZ			; CvUnitPromotions::CvUnitPromotions
; Function compile flags: /Odtp
;	COMDAT ??0CvUnitPromotions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvUnitPromotions@@QAE@XZ PROC			; CvUnitPromotions::CvUnitPromotions, COMDAT
; _this$ = ecx

; 2014 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 2015 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvUnitPromotions@@QAE@XZ ENDP			; CvUnitPromotions::CvUnitPromotions
_TEXT	ENDS
PUBLIC	?SetSize@CvBitfield@@QAEXI@Z			; CvBitfield::SetSize
PUBLIC	??1CvUnitPromotions@@QAE@XZ			; CvUnitPromotions::~CvUnitPromotions
; Function compile flags: /Odtp
;	COMDAT ??1CvUnitPromotions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
??1CvUnitPromotions@@QAE@XZ PROC			; CvUnitPromotions::~CvUnitPromotions, COMDAT
; _this$ = ecx

; 2019 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 2020 : }

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@CvBitfield@@QAEXI@Z		; CvBitfield::SetSize
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvUnitPromotions@@QAE@XZ ENDP			; CvUnitPromotions::~CvUnitPromotions
_TEXT	ENDS
PUBLIC	?Reset@CvUnitPromotions@@QAEXXZ			; CvUnitPromotions::Reset
PUBLIC	?Init@CvUnitPromotions@@QAEXPAVCvPromotionXMLEntries@@PAVCvUnit@@@Z ; CvUnitPromotions::Init
; Function compile flags: /Odtp
;	COMDAT ?Init@CvUnitPromotions@@QAEXPAVCvPromotionXMLEntries@@PAVCvUnit@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pPromotions$ = 8					; size = 4
_pUnit$ = 12						; size = 4
?Init@CvUnitPromotions@@QAEXPAVCvPromotionXMLEntries@@PAVCvUnit@@@Z PROC ; CvUnitPromotions::Init, COMDAT
; _this$ = ecx

; 2024 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2025 : 	CvAssert(pPromotions);
; 2026 : 	if(!pPromotions)

	cmp	DWORD PTR _pPromotions$[ebp], 0
	jne	SHORT $LN2@Init

; 2027 : 		return;

	jmp	SHORT $LN3@Init
$LN2@Init:

; 2028 : 
; 2029 : 	CvAssert(pUnit);
; 2030 : 	if(!pUnit)

	cmp	DWORD PTR _pUnit$[ebp], 0
	jne	SHORT $LN1@Init

; 2031 : 		return;

	jmp	SHORT $LN3@Init
$LN1@Init:

; 2032 : 
; 2033 : 	m_pPromotions = pPromotions;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPromotions$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2034 : 	m_pUnit = pUnit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pUnit$[ebp]
	mov	DWORD PTR [edx+12], eax

; 2035 : 
; 2036 : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvUnitPromotions@@QAEXXZ		; CvUnitPromotions::Reset
$LN3@Init:

; 2037 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CvUnitPromotions@@QAEXPAVCvPromotionXMLEntries@@PAVCvUnit@@@Z ENDP ; CvUnitPromotions::Init
_TEXT	ENDS
PUBLIC	?Uninit@CvUnitPromotions@@QAEXXZ		; CvUnitPromotions::Uninit
; Function compile flags: /Odtp
;	COMDAT ?Uninit@CvUnitPromotions@@QAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
?Uninit@CvUnitPromotions@@QAEXXZ PROC			; CvUnitPromotions::Uninit, COMDAT
; _this$ = ecx

; 2041 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 2042 : 	m_kHasPromotion.SetSize(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@CvBitfield@@QAEXI@Z		; CvBitfield::SetSize

; 2043 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Uninit@CvUnitPromotions@@QAEXXZ ENDP			; CvUnitPromotions::Uninit
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Reset@CvUnitPromotions@@QAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
?Reset@CvUnitPromotions@@QAEXXZ PROC			; CvUnitPromotions::Reset, COMDAT
; _this$ = ecx

; 2047 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 2048 : 	m_kHasPromotion.SetSize(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@CvBitfield@@QAEXI@Z		; CvBitfield::SetSize

; 2049 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CvUnitPromotions@@QAEXXZ ENDP			; CvUnitPromotions::Reset
_TEXT	ENDS
PUBLIC	?Read@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z ; PromotionArrayHelpers::Read
PUBLIC	?Read@CvUnitPromotions@@QAEXAAVFDataStream@@@Z	; CvUnitPromotions::Read
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
;	COMDAT ?Read@CvUnitPromotions@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_uiVersion$ = -8					; size = 4
_iNumPromotions$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Read@CvUnitPromotions@@QAEXAAVFDataStream@@@Z PROC	; CvUnitPromotions::Read, COMDAT
; _this$ = ecx

; 2053 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2054 : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvUnitPromotions@@QAEXXZ		; CvUnitPromotions::Reset

; 2055 : 
; 2056 : 	// Version number to maintain backwards compatibility
; 2057 : 	uint uiVersion;
; 2058 : 	kStream >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 2059 : 
; 2060 : 	// Read number of promotions
; 2061 : 	int iNumPromotions;
; 2062 : 	kStream >> iNumPromotions;

	lea	ecx, DWORD PTR _iNumPromotions$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 2063 : 	CvAssertMsg(m_pPromotions != NULL && m_pPromotions->GetNumPromotions() > 0, "Number of promotions to serialize is expected to greater than 0");
; 2064 : 
; 2065 : 	PromotionArrayHelpers::Read(kStream, m_kHasPromotion);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	?Read@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z ; PromotionArrayHelpers::Read
	add	esp, 8

; 2066 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Read@CvUnitPromotions@@QAEXAAVFDataStream@@@Z ENDP	; CvUnitPromotions::Read
_TEXT	ENDS
PUBLIC	?Write@PromotionArrayHelpers@@YAXAAVFDataStream@@ABVCvBitfield@@H@Z ; PromotionArrayHelpers::Write
PUBLIC	?Write@CvUnitPromotions@@QBEXAAVFDataStream@@@Z	; CvUnitPromotions::Write
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@CvUnitPromotions@@QBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_uiVersion$ = -8					; size = 4
_iNumPromotions$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Write@CvUnitPromotions@@QBEXAAVFDataStream@@@Z PROC	; CvUnitPromotions::Write, COMDAT
; _this$ = ecx

; 2070 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2071 : 	// Current version number
; 2072 : 	uint uiVersion = 1;

	mov	DWORD PTR _uiVersion$[ebp], 1

; 2073 : 	kStream << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 2074 : 
; 2075 : 	// Write out number of promotions to save
; 2076 : 	int iNumPromotions = m_pPromotions->GetNumPromotions();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?GetNumPromotions@CvPromotionXMLEntries@@QAEHXZ ; CvPromotionXMLEntries::GetNumPromotions
	mov	DWORD PTR _iNumPromotions$[ebp], eax

; 2077 : 	kStream << iNumPromotions;

	lea	edx, DWORD PTR _iNumPromotions$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 2078 : 	CvAssertMsg(iNumPromotions > 0, "Number of promotions to serialize is expected to greater than 0");
; 2079 : 
; 2080 : 	PromotionArrayHelpers::Write(kStream, m_kHasPromotion, iNumPromotions);

	mov	eax, DWORD PTR _iNumPromotions$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	?Write@PromotionArrayHelpers@@YAXAAVFDataStream@@ABVCvBitfield@@H@Z ; PromotionArrayHelpers::Write
	add	esp, 12					; 0000000cH

; 2081 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Write@CvUnitPromotions@@QBEXAAVFDataStream@@@Z ENDP	; CvUnitPromotions::Write
_TEXT	ENDS
PUBLIC	?GetUnit@CvUnitPromotions@@QAEPAVCvUnit@@XZ	; CvUnitPromotions::GetUnit
; Function compile flags: /Odtp
;	COMDAT ?GetUnit@CvUnitPromotions@@QAEPAVCvUnit@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnit@CvUnitPromotions@@QAEPAVCvUnit@@XZ PROC	; CvUnitPromotions::GetUnit, COMDAT
; _this$ = ecx

; 2085 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2086 : 	return m_pUnit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 2087 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnit@CvUnitPromotions@@QAEPAVCvUnit@@XZ ENDP	; CvUnitPromotions::GetUnit
_TEXT	ENDS
PUBLIC	?HasPromotion@CvUnitPromotions@@QBE_NW4PromotionTypes@@@Z ; CvUnitPromotions::HasPromotion
EXTRN	?getNumPromotionInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumPromotionInfos
; Function compile flags: /Odtp
;	COMDAT ?HasPromotion@CvUnitPromotions@@QBE_NW4PromotionTypes@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T220610 = -5						; size = 1
_uiByteIndex$220608 = -4				; size = 4
_eIndex$ = 8						; size = 4
?HasPromotion@CvUnitPromotions@@QBE_NW4PromotionTypes@@@Z PROC ; CvUnitPromotions::HasPromotion, COMDAT
; _this$ = ecx

; 2091 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2092 : 	CvAssertMsg(eIndex >= 0, "eIndex is expected to be non-negative (invalid Index)");
; 2093 : 	CvAssertMsg(eIndex < GC.getNumPromotionInfos(), "eIndex is expected to be within maximum bounds (invalid Index)");
; 2094 : 
; 2095 : #ifdef AUI_WARNING_FIXES
; 2096 : 	if (uint(eIndex) < GC.getNumPromotionInfos())
; 2097 : #else
; 2098 : 	if(eIndex >= 0 && eIndex < GC.getNumPromotionInfos())

	cmp	DWORD PTR _eIndex$[ebp], 0
	jl	SHORT $LN1@HasPromoti
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumPromotionInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumPromotionInfos
	cmp	DWORD PTR _eIndex$[ebp], eax
	jge	SHORT $LN1@HasPromoti

; 2099 : #endif
; 2100 : 	{
; 2101 : 		return m_kHasPromotion.GetBit(eIndex);

	mov	eax, DWORD PTR _eIndex$[ebp]
	shr	eax, 3
	mov	DWORD PTR _uiByteIndex$220608[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiByteIndex$220608[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN4@HasPromoti
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _uiByteIndex$220608[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _eIndex$[ebp]
	and	ecx, 7
	mov	edx, 1
	shl	edx, cl
	and	eax, edx
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	BYTE PTR $T220610[ebp], al
	jmp	SHORT $LN5@HasPromoti
$LN4@HasPromoti:
	mov	BYTE PTR $T220610[ebp], 0
$LN5@HasPromoti:
	mov	al, BYTE PTR $T220610[ebp]
	jmp	SHORT $LN2@HasPromoti
$LN1@HasPromoti:

; 2102 : 	}
; 2103 : 
; 2104 : 	return false;

	xor	al, al
$LN2@HasPromoti:

; 2105 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?HasPromotion@CvUnitPromotions@@QBE_NW4PromotionTypes@@@Z ENDP ; CvUnitPromotions::HasPromotion
_TEXT	ENDS
PUBLIC	?SetBit@CvBitfield@@QAEXI_N@Z			; CvBitfield::SetBit
PUBLIC	?SetPromotion@CvUnitPromotions@@QAEXW4PromotionTypes@@_N@Z ; CvUnitPromotions::SetPromotion
; Function compile flags: /Odtp
;	COMDAT ?SetPromotion@CvUnitPromotions@@QAEXW4PromotionTypes@@_N@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
_eIndex$ = 8						; size = 4
_bValue$ = 12						; size = 1
?SetPromotion@CvUnitPromotions@@QAEXW4PromotionTypes@@_N@Z PROC ; CvUnitPromotions::SetPromotion, COMDAT
; _this$ = ecx

; 2109 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 2110 : 	CvAssertMsg(eIndex >= 0, "eIndex is expected to be non-negative (invalid Index)");
; 2111 : 	CvAssertMsg(eIndex < GC.getNumPromotionInfos(), "eIndex is expected to be within maximum bounds (invalid Index)");
; 2112 : 
; 2113 : #ifdef AUI_WARNING_FIXES
; 2114 : 	if (uint(eIndex) < GC.getNumPromotionInfos())
; 2115 : #else
; 2116 : 	if(eIndex >= 0 && eIndex < GC.getNumPromotionInfos())

	cmp	DWORD PTR _eIndex$[ebp], 0
	jl	SHORT $LN2@SetPromoti
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumPromotionInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumPromotionInfos
	cmp	DWORD PTR _eIndex$[ebp], eax
	jge	SHORT $LN2@SetPromoti

; 2117 : #endif
; 2118 : 	{
; 2119 : 		m_kHasPromotion.SetBit(eIndex, bValue);

	movzx	eax, BYTE PTR _bValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetBit@CvBitfield@@QAEXI_N@Z		; CvBitfield::SetBit
$LN2@SetPromoti:

; 2120 : 	}
; 2121 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetPromotion@CvUnitPromotions@@QAEXW4PromotionTypes@@_N@Z ENDP ; CvUnitPromotions::SetPromotion
_TEXT	ENDS
PUBLIC	?GetAllowFeaturePassable@CvUnitPromotions@@QBE_NW4FeatureTypes@@@Z ; CvUnitPromotions::GetAllowFeaturePassable
EXTRN	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z:PROC	; CvTeamTechs::HasTech
EXTRN	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z:PROC ; CvGlobals::getPromotionInfo
EXTRN	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ:PROC ; CvTeam::GetTeamTechs
EXTRN	?m_aTeams@CvTeam@@1PAV1@A:DWORD			; CvTeam::m_aTeams
EXTRN	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ:PROC	; CvUnit::getTeam
; Function compile flags: /Odtp
;	COMDAT ?GetAllowFeaturePassable@CvUnitPromotions@@QBE_NW4FeatureTypes@@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T220632 = -37						; size = 1
_uiByteIndex$220630 = -36				; size = 4
$T220626 = -32						; size = 4
$T220625 = -28						; size = 4
_eTech$218198 = -24					; size = 4
_promotion$218196 = -20					; size = 4
_ePromotion$218193 = -16				; size = 4
_iLoop$218189 = -12					; size = 4
_iNumPromos$ = -8					; size = 4
_teamTechs$ = -4					; size = 4
_eFeatureType$ = 8					; size = 4
?GetAllowFeaturePassable@CvUnitPromotions@@QBE_NW4FeatureTypes@@@Z PROC ; CvUnitPromotions::GetAllowFeaturePassable, COMDAT
; _this$ = ecx

; 2125 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 2126 : 	CvTeamTechs* teamTechs = GET_TEAM(m_pUnit->getTeam()).GetTeamTechs();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	mov	DWORD PTR $T220625[ebp], eax
	mov	ecx, DWORD PTR $T220625[ebp]
	imul	ecx, 2984				; 00000ba8H
	add	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T220626[ebp], ecx
	mov	ecx, DWORD PTR $T220626[ebp]
	call	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ ; CvTeam::GetTeamTechs
	mov	DWORD PTR _teamTechs$[ebp], eax

; 2127 : 	CvAssert(teamTechs);
; 2128 : 	if(!teamTechs) return false;

	cmp	DWORD PTR _teamTechs$[ebp], 0
	jne	SHORT $LN7@GetAllowFe
	xor	al, al
	jmp	$LN8@GetAllowFe
$LN7@GetAllowFe:

; 2129 : 
; 2130 : #ifdef AUI_WARNING_FIXES
; 2131 : 	for (uint iLoop = 0; iLoop < GC.getNumPromotionInfos(); iLoop++)
; 2132 : #else
; 2133 : 	int iNumPromos = GC.getNumPromotionInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumPromotionInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumPromotionInfos
	mov	DWORD PTR _iNumPromos$[ebp], eax

; 2134 : 	for(int iLoop = 0; iLoop < iNumPromos; iLoop++)

	mov	DWORD PTR _iLoop$218189[ebp], 0
	jmp	SHORT $LN6@GetAllowFe
$LN5@GetAllowFe:
	mov	edx, DWORD PTR _iLoop$218189[ebp]
	add	edx, 1
	mov	DWORD PTR _iLoop$218189[ebp], edx
$LN6@GetAllowFe:
	mov	eax, DWORD PTR _iLoop$218189[ebp]
	cmp	eax, DWORD PTR _iNumPromos$[ebp]
	jge	$LN4@GetAllowFe

; 2135 : #endif
; 2136 : 	{
; 2137 : 		PromotionTypes ePromotion = (PromotionTypes) iLoop;

	mov	ecx, DWORD PTR _iLoop$218189[ebp]
	mov	DWORD PTR _ePromotion$218193[ebp], ecx

; 2138 : 		if(m_kHasPromotion.GetBit(ePromotion))

	mov	edx, DWORD PTR _ePromotion$218193[ebp]
	shr	edx, 3
	mov	DWORD PTR _uiByteIndex$220630[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiByteIndex$220630[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN12@GetAllowFe
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _uiByteIndex$220630[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	ecx, DWORD PTR _ePromotion$218193[ebp]
	and	ecx, 7
	mov	eax, 1
	shl	eax, cl
	and	edx, eax
	neg	edx
	sbb	edx, edx
	neg	edx
	mov	BYTE PTR $T220632[ebp], dl
	jmp	SHORT $LN13@GetAllowFe
$LN12@GetAllowFe:
	mov	BYTE PTR $T220632[ebp], 0
$LN13@GetAllowFe:
	movzx	ecx, BYTE PTR $T220632[ebp]
	test	ecx, ecx
	je	SHORT $LN3@GetAllowFe

; 2139 : 		{
; 2140 : 			CvPromotionEntry* promotion = GC.getPromotionInfo(ePromotion);

	mov	edx, DWORD PTR _ePromotion$218193[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z ; CvGlobals::getPromotionInfo
	mov	DWORD PTR _promotion$218196[ebp], eax

; 2141 : 			if(promotion)

	cmp	DWORD PTR _promotion$218196[ebp], 0
	je	SHORT $LN3@GetAllowFe

; 2142 : 			{
; 2143 : 				TechTypes eTech = (TechTypes) promotion->GetFeaturePassableTech(eFeatureType);

	mov	eax, DWORD PTR _eFeatureType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _promotion$218196[ebp]
	call	?GetFeaturePassableTech@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetFeaturePassableTech
	mov	DWORD PTR _eTech$218198[ebp], eax

; 2144 : 				if(eTech != NO_TECH && teamTechs->HasTech(eTech))

	cmp	DWORD PTR _eTech$218198[ebp], -1
	je	SHORT $LN3@GetAllowFe
	mov	ecx, DWORD PTR _eTech$218198[ebp]
	push	ecx
	mov	ecx, DWORD PTR _teamTechs$[ebp]
	call	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z ; CvTeamTechs::HasTech
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@GetAllowFe

; 2145 : 				{
; 2146 : 					return true;

	mov	al, 1
	jmp	SHORT $LN8@GetAllowFe
$LN3@GetAllowFe:

; 2147 : 				}
; 2148 : 			}
; 2149 : 		}
; 2150 : 	}

	jmp	$LN5@GetAllowFe
$LN4@GetAllowFe:

; 2151 : 
; 2152 : 	return false;

	xor	al, al
$LN8@GetAllowFe:

; 2153 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetAllowFeaturePassable@CvUnitPromotions@@QBE_NW4FeatureTypes@@@Z ENDP ; CvUnitPromotions::GetAllowFeaturePassable
_TEXT	ENDS
PUBLIC	?GetAllowTerrainPassable@CvUnitPromotions@@QBE_NW4TerrainTypes@@@Z ; CvUnitPromotions::GetAllowTerrainPassable
; Function compile flags: /Odtp
;	COMDAT ?GetAllowTerrainPassable@CvUnitPromotions@@QBE_NW4TerrainTypes@@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T220645 = -37						; size = 1
_uiByteIndex$220643 = -36				; size = 4
$T220639 = -32						; size = 4
$T220638 = -28						; size = 4
_eTech$218217 = -24					; size = 4
_promotion$218215 = -20					; size = 4
_ePromotion$218212 = -16				; size = 4
_iLoop$218208 = -12					; size = 4
_iNumPromos$ = -8					; size = 4
_teamTechs$ = -4					; size = 4
_eTerrainType$ = 8					; size = 4
?GetAllowTerrainPassable@CvUnitPromotions@@QBE_NW4TerrainTypes@@@Z PROC ; CvUnitPromotions::GetAllowTerrainPassable, COMDAT
; _this$ = ecx

; 2157 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 2158 : 	CvTeamTechs* teamTechs = GET_TEAM(m_pUnit->getTeam()).GetTeamTechs();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	mov	DWORD PTR $T220638[ebp], eax
	mov	ecx, DWORD PTR $T220638[ebp]
	imul	ecx, 2984				; 00000ba8H
	add	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T220639[ebp], ecx
	mov	ecx, DWORD PTR $T220639[ebp]
	call	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ ; CvTeam::GetTeamTechs
	mov	DWORD PTR _teamTechs$[ebp], eax

; 2159 : 	CvAssert(teamTechs);
; 2160 : 	if(!teamTechs) return false;

	cmp	DWORD PTR _teamTechs$[ebp], 0
	jne	SHORT $LN7@GetAllowTe
	xor	al, al
	jmp	$LN8@GetAllowTe
$LN7@GetAllowTe:

; 2161 : 
; 2162 : #ifdef AUI_WARNING_FIXES
; 2163 : 	for (uint iLoop = 0; iLoop < GC.getNumPromotionInfos(); iLoop++)
; 2164 : #else
; 2165 : 	int iNumPromos = GC.getNumPromotionInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumPromotionInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumPromotionInfos
	mov	DWORD PTR _iNumPromos$[ebp], eax

; 2166 : 	for(int iLoop = 0; iLoop < iNumPromos; iLoop++)

	mov	DWORD PTR _iLoop$218208[ebp], 0
	jmp	SHORT $LN6@GetAllowTe
$LN5@GetAllowTe:
	mov	edx, DWORD PTR _iLoop$218208[ebp]
	add	edx, 1
	mov	DWORD PTR _iLoop$218208[ebp], edx
$LN6@GetAllowTe:
	mov	eax, DWORD PTR _iLoop$218208[ebp]
	cmp	eax, DWORD PTR _iNumPromos$[ebp]
	jge	$LN4@GetAllowTe

; 2167 : #endif
; 2168 : 	{
; 2169 : 		PromotionTypes ePromotion = (PromotionTypes) iLoop;

	mov	ecx, DWORD PTR _iLoop$218208[ebp]
	mov	DWORD PTR _ePromotion$218212[ebp], ecx

; 2170 : 		if(m_kHasPromotion.GetBit(ePromotion))

	mov	edx, DWORD PTR _ePromotion$218212[ebp]
	shr	edx, 3
	mov	DWORD PTR _uiByteIndex$220643[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiByteIndex$220643[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN12@GetAllowTe
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _uiByteIndex$220643[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	ecx, DWORD PTR _ePromotion$218212[ebp]
	and	ecx, 7
	mov	eax, 1
	shl	eax, cl
	and	edx, eax
	neg	edx
	sbb	edx, edx
	neg	edx
	mov	BYTE PTR $T220645[ebp], dl
	jmp	SHORT $LN13@GetAllowTe
$LN12@GetAllowTe:
	mov	BYTE PTR $T220645[ebp], 0
$LN13@GetAllowTe:
	movzx	ecx, BYTE PTR $T220645[ebp]
	test	ecx, ecx
	je	SHORT $LN3@GetAllowTe

; 2171 : 		{
; 2172 : 			CvPromotionEntry* promotion = GC.getPromotionInfo(ePromotion);

	mov	edx, DWORD PTR _ePromotion$218212[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z ; CvGlobals::getPromotionInfo
	mov	DWORD PTR _promotion$218215[ebp], eax

; 2173 : 
; 2174 : 			if(promotion)

	cmp	DWORD PTR _promotion$218215[ebp], 0
	je	SHORT $LN3@GetAllowTe

; 2175 : 			{
; 2176 : 				TechTypes eTech = (TechTypes) promotion->GetTerrainPassableTech(eTerrainType);

	mov	eax, DWORD PTR _eTerrainType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _promotion$218215[ebp]
	call	?GetTerrainPassableTech@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetTerrainPassableTech
	mov	DWORD PTR _eTech$218217[ebp], eax

; 2177 : 				if(eTech != NO_TECH && teamTechs->HasTech(eTech))

	cmp	DWORD PTR _eTech$218217[ebp], -1
	je	SHORT $LN3@GetAllowTe
	mov	ecx, DWORD PTR _eTech$218217[ebp]
	push	ecx
	mov	ecx, DWORD PTR _teamTechs$[ebp]
	call	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z ; CvTeamTechs::HasTech
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@GetAllowTe

; 2178 : 				{
; 2179 : 					return true;

	mov	al, 1
	jmp	SHORT $LN8@GetAllowTe
$LN3@GetAllowTe:

; 2180 : 				}
; 2181 : 			}
; 2182 : 		}
; 2183 : 	}

	jmp	$LN5@GetAllowTe
$LN4@GetAllowTe:

; 2184 : 	return false;

	xor	al, al
$LN8@GetAllowTe:

; 2185 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetAllowTerrainPassable@CvUnitPromotions@@QBE_NW4TerrainTypes@@@Z ENDP ; CvUnitPromotions::GetAllowTerrainPassable
_TEXT	ENDS
PUBLIC	?GetUnitClassAttackMod@CvUnitPromotions@@QBEHW4UnitClassTypes@@@Z ; CvUnitPromotions::GetUnitClassAttackMod
; Function compile flags: /Odtp
;	COMDAT ?GetUnitClassAttackMod@CvUnitPromotions@@QBEHW4UnitClassTypes@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_ePromotion$218229 = -16				; size = 4
_promotion$218231 = -12					; size = 4
_iLoop$218225 = -8					; size = 4
_iSum$ = -4						; size = 4
_eUnitClass$ = 8					; size = 4
?GetUnitClassAttackMod@CvUnitPromotions@@QBEHW4UnitClassTypes@@@Z PROC ; CvUnitPromotions::GetUnitClassAttackMod, COMDAT
; _this$ = ecx

; 2189 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2190 : 	int iSum = 0;

	mov	DWORD PTR _iSum$[ebp], 0

; 2191 : #ifdef AUI_WARNING_FIXES
; 2192 : 	for (uint iLoop = 0; iLoop < GC.getNumPromotionInfos(); iLoop++)
; 2193 : #else
; 2194 : 	for(int iLoop = 0; iLoop < GC.getNumPromotionInfos(); iLoop++)

	mov	DWORD PTR _iLoop$218225[ebp], 0
	jmp	SHORT $LN4@GetUnitCla@4
$LN3@GetUnitCla@4:
	mov	eax, DWORD PTR _iLoop$218225[ebp]
	add	eax, 1
	mov	DWORD PTR _iLoop$218225[ebp], eax
$LN4@GetUnitCla@4:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumPromotionInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumPromotionInfos
	cmp	DWORD PTR _iLoop$218225[ebp], eax
	jge	SHORT $LN2@GetUnitCla@4

; 2195 : #endif
; 2196 : 	{
; 2197 : 		PromotionTypes ePromotion = (PromotionTypes)iLoop;

	mov	ecx, DWORD PTR _iLoop$218225[ebp]
	mov	DWORD PTR _ePromotion$218229[ebp], ecx

; 2198 : 		CvPromotionEntry* promotion = GC.getPromotionInfo(ePromotion);

	mov	edx, DWORD PTR _ePromotion$218229[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z ; CvGlobals::getPromotionInfo
	mov	DWORD PTR _promotion$218231[ebp], eax

; 2199 : 		if(promotion && HasPromotion(ePromotion))

	cmp	DWORD PTR _promotion$218231[ebp], 0
	je	SHORT $LN1@GetUnitCla@4
	mov	eax, DWORD PTR _ePromotion$218229[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasPromotion@CvUnitPromotions@@QBE_NW4PromotionTypes@@@Z ; CvUnitPromotions::HasPromotion
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@GetUnitCla@4

; 2200 : 		{
; 2201 : 			iSum += promotion->GetUnitClassAttackModifier(eUnitClass);

	mov	edx, DWORD PTR _eUnitClass$[ebp]
	push	edx
	mov	ecx, DWORD PTR _promotion$218231[ebp]
	call	?GetUnitClassAttackModifier@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetUnitClassAttackModifier
	add	eax, DWORD PTR _iSum$[ebp]
	mov	DWORD PTR _iSum$[ebp], eax
$LN1@GetUnitCla@4:

; 2202 : 		}
; 2203 : 	}

	jmp	SHORT $LN3@GetUnitCla@4
$LN2@GetUnitCla@4:

; 2204 : 	return iSum;

	mov	eax, DWORD PTR _iSum$[ebp]

; 2205 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitClassAttackMod@CvUnitPromotions@@QBEHW4UnitClassTypes@@@Z ENDP ; CvUnitPromotions::GetUnitClassAttackMod
_TEXT	ENDS
PUBLIC	?GetUnitClassDefenseMod@CvUnitPromotions@@QBEHW4UnitClassTypes@@@Z ; CvUnitPromotions::GetUnitClassDefenseMod
; Function compile flags: /Odtp
;	COMDAT ?GetUnitClassDefenseMod@CvUnitPromotions@@QBEHW4UnitClassTypes@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_ePromotion$218242 = -16				; size = 4
_promotion$218244 = -12					; size = 4
_iLoop$218238 = -8					; size = 4
_iSum$ = -4						; size = 4
_eUnitClass$ = 8					; size = 4
?GetUnitClassDefenseMod@CvUnitPromotions@@QBEHW4UnitClassTypes@@@Z PROC ; CvUnitPromotions::GetUnitClassDefenseMod, COMDAT
; _this$ = ecx

; 2209 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2210 : 	int iSum = 0;

	mov	DWORD PTR _iSum$[ebp], 0

; 2211 : #ifdef AUI_WARNING_FIXES
; 2212 : 	for (uint iLoop = 0; iLoop < GC.getNumPromotionInfos(); iLoop++)
; 2213 : #else
; 2214 : 	for(int iLoop = 0; iLoop < GC.getNumPromotionInfos(); iLoop++)

	mov	DWORD PTR _iLoop$218238[ebp], 0
	jmp	SHORT $LN4@GetUnitCla@5
$LN3@GetUnitCla@5:
	mov	eax, DWORD PTR _iLoop$218238[ebp]
	add	eax, 1
	mov	DWORD PTR _iLoop$218238[ebp], eax
$LN4@GetUnitCla@5:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumPromotionInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumPromotionInfos
	cmp	DWORD PTR _iLoop$218238[ebp], eax
	jge	SHORT $LN2@GetUnitCla@5

; 2215 : #endif
; 2216 : 	{
; 2217 : 		PromotionTypes ePromotion = (PromotionTypes)iLoop;

	mov	ecx, DWORD PTR _iLoop$218238[ebp]
	mov	DWORD PTR _ePromotion$218242[ebp], ecx

; 2218 : 		CvPromotionEntry* promotion = GC.getPromotionInfo(ePromotion);

	mov	edx, DWORD PTR _ePromotion$218242[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z ; CvGlobals::getPromotionInfo
	mov	DWORD PTR _promotion$218244[ebp], eax

; 2219 : 		if(promotion && HasPromotion(ePromotion))

	cmp	DWORD PTR _promotion$218244[ebp], 0
	je	SHORT $LN1@GetUnitCla@5
	mov	eax, DWORD PTR _ePromotion$218242[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasPromotion@CvUnitPromotions@@QBE_NW4PromotionTypes@@@Z ; CvUnitPromotions::HasPromotion
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@GetUnitCla@5

; 2220 : 		{
; 2221 : 			iSum += promotion->GetUnitClassDefenseModifier(eUnitClass);

	mov	edx, DWORD PTR _eUnitClass$[ebp]
	push	edx
	mov	ecx, DWORD PTR _promotion$218244[ebp]
	call	?GetUnitClassDefenseModifier@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetUnitClassDefenseModifier
	add	eax, DWORD PTR _iSum$[ebp]
	mov	DWORD PTR _iSum$[ebp], eax
$LN1@GetUnitCla@5:

; 2222 : 		}
; 2223 : 	}

	jmp	SHORT $LN3@GetUnitCla@5
$LN2@GetUnitCla@5:

; 2224 : 	return iSum;

	mov	eax, DWORD PTR _iSum$[ebp]

; 2225 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitClassDefenseMod@CvUnitPromotions@@QBEHW4UnitClassTypes@@@Z ENDP ; CvUnitPromotions::GetUnitClassDefenseMod
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
PUBLIC	??_C@_0BG@IEOHHLCJ@Random?5Promotion?5Pick?$AA@	; `string'
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?IsInUseByPlayer@CvUnitPromotions@@AAE_NW4PromotionTypes@@W4PlayerTypes@@@Z ; CvUnitPromotions::IsInUseByPlayer
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z ; CvUnitPromotions::ChangePromotionAfterCombat
EXTRN	?getJonRandNum@CvGame@@QAEHHPBD@Z:PROC		; CvGame::getJonRandNum
;	COMDAT ??_C@_0BG@IEOHHLCJ@Random?5Promotion?5Pick?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
CONST	SEGMENT
??_C@_0BG@IEOHHLCJ@Random?5Promotion?5Pick?$AA@ DB 'Random Promotion Pick'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z$5
__ehfuncinfo$?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvpromotionclasses.cpp
xdata$x	ENDS
;	COMDAT ?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z
_TEXT	SEGMENT
_this$ = -188						; size = 4
$T220795 = -128						; size = 4
$T220694 = -76						; size = 4
$T220653 = -52						; size = 4
$T220652 = -48						; size = 4
_iChoice$218266 = -44					; size = 4
_pkEntry$218259 = -40					; size = 4
_iI$218255 = -36					; size = 4
_aPossiblePromotions$ = -32				; size = 16
_iNumChoices$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_eIndex$ = 8						; size = 4
?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z PROC ; CvUnitPromotions::ChangePromotionAfterCombat, COMDAT
; _this$ = ecx

; 2229 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 176				; 000000b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2230 : 	std::vector<int> aPossiblePromotions;

	lea	ecx, DWORD PTR _aPossiblePromotions$[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2231 : 
; 2232 : #ifdef AUI_WARNING_FIXES
; 2233 : 	for (uint iI = 0; iI < m_pPromotions->GetNumPromotions(); iI++)
; 2234 : #else
; 2235 : 	for (int iI = 0; iI < m_pPromotions->GetNumPromotions(); iI++)

	mov	DWORD PTR _iI$218255[ebp], 0
	jmp	SHORT $LN7@ChangeProm
$LN6@ChangeProm:
	mov	eax, DWORD PTR _iI$218255[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$218255[ebp], eax
$LN7@ChangeProm:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?GetNumPromotions@CvPromotionXMLEntries@@QAEHXZ ; CvPromotionXMLEntries::GetNumPromotions
	cmp	DWORD PTR _iI$218255[ebp], eax
	jge	SHORT $LN73@ChangeProm

; 2236 : #endif
; 2237 : 	{
; 2238 : 		CvPromotionEntry *pkEntry = m_pPromotions->GetEntry(eIndex);

	mov	edx, DWORD PTR _eIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetEntry@CvPromotionXMLEntries@@QAEPAVCvPromotionEntry@@H@Z ; CvPromotionXMLEntries::GetEntry
	mov	DWORD PTR _pkEntry$218259[ebp], eax

; 2239 : 		if (pkEntry && pkEntry->IsPostCombatRandomPromotion(iI))

	cmp	DWORD PTR _pkEntry$218259[ebp], 0
	je	SHORT $LN4@ChangeProm
	mov	ecx, DWORD PTR _iI$218255[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkEntry$218259[ebp]
	call	?IsPostCombatRandomPromotion@CvPromotionEntry@@QBE_NH@Z ; CvPromotionEntry::IsPostCombatRandomPromotion
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@ChangeProm

; 2240 : 		{
; 2241 : 			if (!pkEntry->ArePostCombatPromotionsExclusive() || !IsInUseByPlayer((PromotionTypes)iI, m_pUnit->getOwner()))

	mov	ecx, DWORD PTR _pkEntry$218259[ebp]
	call	?ArePostCombatPromotionsExclusive@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::ArePostCombatPromotionsExclusive
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@ChangeProm
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T220694[ebp], eax
	mov	ecx, DWORD PTR $T220694[ebp]
	push	ecx
	mov	edx, DWORD PTR _iI$218255[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInUseByPlayer@CvUnitPromotions@@AAE_NW4PromotionTypes@@W4PlayerTypes@@@Z ; CvUnitPromotions::IsInUseByPlayer
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@ChangeProm
$LN2@ChangeProm:

; 2242 : 			{
; 2243 : 				aPossiblePromotions.push_back(iI);

	lea	ecx, DWORD PTR _iI$218255[ebp]
	push	ecx
	lea	ecx, DWORD PTR _aPossiblePromotions$[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
$LN4@ChangeProm:

; 2244 : 			}
; 2245 : 		}
; 2246 : 	}

	jmp	$LN6@ChangeProm

; 2247 : 
; 2248 : 	int iNumChoices = aPossiblePromotions.size();

$LN73@ChangeProm:
	mov	edx, DWORD PTR _aPossiblePromotions$[ebp+8]
	sub	edx, DWORD PTR _aPossiblePromotions$[ebp+4]
	sar	edx, 2
	mov	DWORD PTR _iNumChoices$[ebp], edx

; 2249 : 	if (iNumChoices > 0)

	cmp	DWORD PTR _iNumChoices$[ebp], 0
	jle	SHORT $LN1@ChangeProm

; 2250 : 	{
; 2251 : 		int iChoice = GC.getGame().getJonRandNum(iNumChoices, "Random Promotion Pick");

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T220795[ebp], eax
	push	OFFSET ??_C@_0BG@IEOHHLCJ@Random?5Promotion?5Pick?$AA@
	mov	ecx, DWORD PTR _iNumChoices$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T220795[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	DWORD PTR _iChoice$218266[ebp], eax

; 2252 : 		return (PromotionTypes)aPossiblePromotions[iChoice];

	mov	edx, DWORD PTR _aPossiblePromotions$[ebp+4]
	mov	eax, DWORD PTR _iChoice$218266[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T220652[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _aPossiblePromotions$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T220652[ebp]
	jmp	SHORT $LN8@ChangeProm
$LN1@ChangeProm:

; 2253 : 	}
; 2254 : 
; 2255 : 	return NO_PROMOTION;

	mov	DWORD PTR $T220653[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _aPossiblePromotions$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T220653[ebp]
$LN8@ChangeProm:

; 2256 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z$0:
	lea	ecx, DWORD PTR _aPossiblePromotions$[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z$3:
	lea	ecx, DWORD PTR _aPossiblePromotions$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z$5:
	lea	ecx, DWORD PTR _aPossiblePromotions$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-180]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ChangePromotionAfterCombat@CvUnitPromotions@@QAE?AW4PromotionTypes@@W42@@Z ENDP ; CvUnitPromotions::ChangePromotionAfterCombat
EXTRN	?isHasPromotion@CvUnit@@QBE_NW4PromotionTypes@@@Z:PROC ; CvUnit::isHasPromotion
EXTRN	?nextUnit@CvPlayer@@QAEPAVCvUnit@@PAH_N@Z:PROC	; CvPlayer::nextUnit
EXTRN	?firstUnit@CvPlayer@@QAEPAVCvUnit@@PAH_N@Z:PROC	; CvPlayer::firstUnit
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Odtp
;	COMDAT ?IsInUseByPlayer@CvUnitPromotions@@AAE_NW4PromotionTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_iValueLoop$ = -16					; size = 4
_bRtnValue$ = -9					; size = 1
_pLoopUnit$ = -8					; size = 4
_kPlayer$ = -4						; size = 4
_eIndex$ = 8						; size = 4
_ePlayer$ = 12						; size = 4
?IsInUseByPlayer@CvUnitPromotions@@AAE_NW4PromotionTypes@@W4PlayerTypes@@@Z PROC ; CvUnitPromotions::IsInUseByPlayer, COMDAT
; _this$ = ecx

; 2262 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2263 : 	bool bRtnValue = false;

	mov	BYTE PTR _bRtnValue$[ebp], 0

; 2264 : 	CvPlayer &kPlayer = GET_PLAYER(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$[ebp], eax

; 2265 : 
; 2266 : 	CvUnit *pLoopUnit;
; 2267 : 	int iValueLoop;
; 2268 : 	for(pLoopUnit = kPlayer.firstUnit(&iValueLoop); pLoopUnit != NULL; pLoopUnit = kPlayer.nextUnit(&iValueLoop))

	push	0
	lea	ecx, DWORD PTR _iValueLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?firstUnit@CvPlayer@@QAEPAVCvUnit@@PAH_N@Z ; CvPlayer::firstUnit
	mov	DWORD PTR _pLoopUnit$[ebp], eax
	jmp	SHORT $LN4@IsInUseByP
$LN3@IsInUseByP:
	push	0
	lea	edx, DWORD PTR _iValueLoop$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?nextUnit@CvPlayer@@QAEPAVCvUnit@@PAH_N@Z ; CvPlayer::nextUnit
	mov	DWORD PTR _pLoopUnit$[ebp], eax
$LN4@IsInUseByP:
	cmp	DWORD PTR _pLoopUnit$[ebp], 0
	je	SHORT $LN2@IsInUseByP

; 2269 : 	{
; 2270 : 		if (pLoopUnit->isHasPromotion(eIndex))

	mov	eax, DWORD PTR _eIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLoopUnit$[ebp]
	call	?isHasPromotion@CvUnit@@QBE_NW4PromotionTypes@@@Z ; CvUnit::isHasPromotion
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@IsInUseByP

; 2271 : 		{
; 2272 : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@IsInUseByP
$LN1@IsInUseByP:

; 2273 : 		}
; 2274 : 	}

	jmp	SHORT $LN3@IsInUseByP
$LN2@IsInUseByP:

; 2275 : 
; 2276 : 	return bRtnValue;

	mov	al, BYTE PTR _bRtnValue$[ebp]
$LN5@IsInUseByP:

; 2277 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?IsInUseByPlayer@CvUnitPromotions@@AAE_NW4PromotionTypes@@W4PlayerTypes@@@Z ENDP ; CvUnitPromotions::IsInUseByPlayer
_TEXT	ENDS
PUBLIC	??1FStringA@@QAE@XZ				; FStringA::~FStringA
PUBLIC	?Release@FStringA@@QAEXXZ			; FStringA::Release
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
PUBLIC	??_C@_0CJ@FKGOLKOH@LOAD?5ERROR?3?5Promotion?5Type?5not?5f@ ; `string'
PUBLIC	??_C@_0BE@BFHIALBF@PROMOTION_OLIGARCHY?$AA@	; `string'
PUBLIC	??0?$FStringAFixedBuffer@$0EA@@FStringA@@QAE@AAV1@@Z ; FStringA::FStringAFixedBuffer<64>::FStringAFixedBuffer<64>
PUBLIC	__$ArrayPad$
PUBLIC	?ReadV3@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z ; PromotionArrayHelpers::ReadV3
EXTRN	?LogMessage@CvGlobals@@QAEXPBD@Z:PROC		; CvGlobals::LogMessage
EXTRN	?Read@FDataStream@@IAEXAA_N@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAVFStringA@@@Z:PROC	; FDataStream::Read
EXTRN	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ:PROC ; FStringA_GetStringInitData
;	COMDAT ??_C@_0CJ@FKGOLKOH@LOAD?5ERROR?3?5Promotion?5Type?5not?5f@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fstringa.inl
CONST	SEGMENT
??_C@_0CJ@FKGOLKOH@LOAD?5ERROR?3?5Promotion?5Type?5not?5f@ DB 'LOAD ERROR'
	DB	': Promotion Type not found: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BFHIALBF@PROMOTION_OLIGARCHY?$AA@
CONST	SEGMENT
??_C@_0BE@BFHIALBF@PROMOTION_OLIGARCHY?$AA@ DB 'PROMOTION_OLIGARCHY', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReadV3@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadV3@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ReadV3@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z$1
__ehfuncinfo$?ReadV3@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ReadV3@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvpromotionclasses.cpp
xdata$x	ENDS
;	COMDAT ?ReadV3@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z
_TEXT	SEGMENT
tv176 = -224						; size = 4
tv201 = -220						; size = 4
tv196 = -214						; size = 1
tv165 = -213						; size = 1
tv171 = -212						; size = 4
tv166 = -208						; size = 4
$T220995 = -188						; size = 4
$T220930 = -148						; size = 4
_szError$218319 = -144					; size = 28
_bDummy$218321 = -115					; size = 1
_bValue$218317 = -114					; size = 1
_bTemp$218314 = -113					; size = 1
_iI$218305 = -112					; size = 4
_iType$ = -108						; size = 4
_sTemp$ = -104						; size = 4
_FStringFixedBuffer_sTemp$ = -100			; size = 76
__$ArrayPad$ = -20					; size = 4
_iNumEntries$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kStream$ = 8						; size = 4
_kPromotions$ = 12					; size = 4
?ReadV3@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z PROC ; PromotionArrayHelpers::ReadV3, COMDAT

; 2281 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadV3@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 212				; 000000d4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2282 : 	int iNumEntries;
; 2283 : 	FStringFixedBuffer(sTemp, 64);

	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	mov	DWORD PTR $T220930[ebp], eax
	mov	eax, DWORD PTR $T220930[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _sTemp$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sTemp$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _FStringFixedBuffer_sTemp$[ebp]
	call	??0?$FStringAFixedBuffer@$0EA@@FStringA@@QAE@AAV1@@Z ; FStringA::FStringAFixedBuffer<64>::FStringAFixedBuffer<64>

; 2284 : 	int iType;
; 2285 : 
; 2286 : 	kStream >> iNumEntries;

	lea	edx, DWORD PTR _iNumEntries$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 2287 : 
; 2288 : 	kPromotions.SetSize( iNumEntries );

	mov	eax, DWORD PTR _iNumEntries$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kPromotions$[ebp]
	call	?SetSize@CvBitfield@@QAEXI@Z		; CvBitfield::SetSize

; 2289 : 
; 2290 : 	for(int iI = 0; iI < iNumEntries; iI++)

	mov	DWORD PTR _iI$218305[ebp], 0
	jmp	SHORT $LN7@ReadV3
$LN6@ReadV3:
	mov	ecx, DWORD PTR _iI$218305[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$218305[ebp], ecx
$LN7@ReadV3:
	mov	edx, DWORD PTR _iI$218305[ebp]
	cmp	edx, DWORD PTR _iNumEntries$[ebp]
	jge	$LN5@ReadV3

; 2291 : 	{
; 2292 : 		kStream >> sTemp;

	lea	eax, DWORD PTR _sTemp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAVFStringA@@@Z	; FDataStream::Read

; 2293 : 		if(sTemp == "PROMOTION_OLIGARCHY")

	mov	DWORD PTR tv166[ebp], OFFSET ??_C@_0BE@BFHIALBF@PROMOTION_OLIGARCHY?$AA@
	mov	ecx, DWORD PTR _sTemp$[ebp]
	mov	DWORD PTR tv171[ebp], ecx
$LL88@ReadV3:
	mov	edx, DWORD PTR tv171[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv165[ebp], al
	mov	ecx, DWORD PTR tv166[ebp]
	cmp	al, BYTE PTR [ecx]
	jne	SHORT $LN89@ReadV3
	cmp	BYTE PTR tv165[ebp], 0
	je	SHORT $LN90@ReadV3
	mov	edx, DWORD PTR tv171[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv196[ebp], al
	mov	ecx, DWORD PTR tv166[ebp]
	cmp	al, BYTE PTR [ecx+1]
	jne	SHORT $LN89@ReadV3
	add	DWORD PTR tv171[ebp], 2
	add	DWORD PTR tv166[ebp], 2
	cmp	BYTE PTR tv196[ebp], 0
	jne	SHORT $LL88@ReadV3
$LN90@ReadV3:
	mov	DWORD PTR tv201[ebp], 0
	jmp	SHORT $LN91@ReadV3
$LN89@ReadV3:
	sbb	edx, edx
	sbb	edx, -1
	mov	DWORD PTR tv201[ebp], edx
$LN91@ReadV3:
	mov	eax, DWORD PTR tv201[ebp]
	mov	DWORD PTR tv176[ebp], eax
	xor	ecx, ecx
	cmp	DWORD PTR tv176[ebp], 0
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN54@ReadV3

; 2294 : 		{
; 2295 : 			bool bTemp;
; 2296 : 			kStream >> bTemp;

	lea	eax, DWORD PTR _bTemp$218314[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 2297 : 		}
; 2298 : 		else

	jmp	$LN3@ReadV3

; 2299 : 		{
; 2300 : 			iType = GC.getInfoTypeForString(sTemp);

$LN54@ReadV3:
	mov	ecx, DWORD PTR _sTemp$[ebp]
	mov	DWORD PTR $T220995[ebp], ecx
	push	0
	mov	edx, DWORD PTR $T220995[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _iType$[ebp], eax

; 2301 : 			if(iType != -1)

	cmp	DWORD PTR _iType$[ebp], -1
	je	SHORT $LN2@ReadV3

; 2302 : 			{
; 2303 : 				bool bValue;
; 2304 : 				kStream >> bValue;

	lea	eax, DWORD PTR _bValue$218317[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 2305 : 				kPromotions.SetBit(iType, bValue);

	movzx	ecx, BYTE PTR _bValue$218317[ebp]
	push	ecx
	mov	edx, DWORD PTR _iType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kPromotions$[ebp]
	call	?SetBit@CvBitfield@@QAEXI_N@Z		; CvBitfield::SetBit

; 2306 : 			}
; 2307 : 			else

	jmp	SHORT $LN3@ReadV3
$LN2@ReadV3:

; 2308 : 			{
; 2309 : 				CvString szError;

	lea	ecx, DWORD PTR _szError$218319[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 2310 : #ifdef AUI_WARNING_FIXES
; 2311 : 				szError.Format("LOAD ERROR:  Promotion Type not found: %s", sTemp.GetCString());
; 2312 : #else
; 2313 : 				szError.Format("LOAD ERROR: Promotion Type not found: %s", sTemp);

	mov	eax, DWORD PTR _sTemp$[ebp]
	push	eax
	push	OFFSET ??_C@_0CJ@FKGOLKOH@LOAD?5ERROR?3?5Promotion?5Type?5not?5f@
	lea	ecx, DWORD PTR _szError$218319[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 2314 : #endif
; 2315 : 				GC.LogMessage(szError.GetCString());

	lea	ecx, DWORD PTR _szError$218319[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?LogMessage@CvGlobals@@QAEXPBD@Z	; CvGlobals::LogMessage

; 2316 : 				CvAssertMsg(false, szError);
; 2317 : 				bool bDummy;
; 2318 : 				kStream >> bDummy;

	lea	edx, DWORD PTR _bDummy$218321[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 2319 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _szError$218319[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN3@ReadV3:

; 2320 : 		}
; 2321 : 	}

	jmp	$LN6@ReadV3
$LN5@ReadV3:

; 2322 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sTemp$[ebp]
	call	?Release@FStringA@@QAEXXZ		; FStringA::Release
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReadV3@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z$0:
	lea	ecx, DWORD PTR _sTemp$[ebp]
	jmp	??1FStringA@@QAE@XZ			; FStringA::~FStringA
__unwindfunclet$?ReadV3@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z$1:
	lea	ecx, DWORD PTR _szError$218319[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?ReadV3@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-216]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadV3@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadV3@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z ENDP ; PromotionArrayHelpers::ReadV3
PUBLIC	??_C@_0DC@HHCHNDNN@LOAD?5ERROR?3?5Promotion?5Type?5not?5f@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	?getInfoTypeForHash@CvGlobals@@QBEHI_N@Z:PROC	; CvGlobals::getInfoTypeForHash
EXTRN	?Calc@FCRC@@QBEKPBXHK@Z:PROC			; FCRC::Calc
EXTRN	?g_CRC32@@3VFCRC@@A:BYTE			; g_CRC32
;	COMDAT ??_C@_0DC@HHCHNDNN@LOAD?5ERROR?3?5Promotion?5Type?5not?5f@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0DC@HHCHNDNN@LOAD?5ERROR?3?5Promotion?5Type?5not?5f@ DB 'LOAD ERROR'
	DB	': Promotion Type not found for hash: %u', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Read@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Read@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z$0
__ehfuncinfo$?Read@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Read@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvpromotionclasses.cpp
xdata$x	ENDS
;	COMDAT ?Read@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z
_TEXT	SEGMENT
tv156 = -124						; size = 4
tv160 = -120						; size = 4
tv148 = -113						; size = 1
tv144 = -112						; size = 4
tv150 = -108						; size = 4
_szError$218340 = -68					; size = 28
__$ArrayPad$ = -40					; size = 4
_bDummy$218342 = -35					; size = 1
_bValue$218338 = -34					; size = 1
_bTemp$218335 = -33					; size = 1
_iI$218330 = -32					; size = 4
_iType$ = -28						; size = 4
_uiOligarchyHash$ = -24					; size = 4
_iNumEntries$ = -20					; size = 4
_uiHashTemp$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kStream$ = 8						; size = 4
_kPromotions$ = 12					; size = 4
?Read@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z PROC ; PromotionArrayHelpers::Read, COMDAT

; 2326 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Read@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2327 : 	int iNumEntries;
; 2328 : 	int iType;
; 2329 : 
; 2330 : 	kStream >> iNumEntries;

	lea	eax, DWORD PTR _iNumEntries$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 2331 : 
; 2332 : 	kPromotions.SetSize( iNumEntries );

	mov	ecx, DWORD PTR _iNumEntries$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPromotions$[ebp]
	call	?SetSize@CvBitfield@@QAEXI@Z		; CvBitfield::SetSize

; 2333 : 
; 2334 : 	uint uiHashTemp;
; 2335 : 	uint uiOligarchyHash = FString::Hash("PROMOTION_OLIGARCHY");

	mov	edx, OFFSET ??_C@_0BE@BFHIALBF@PROMOTION_OLIGARCHY?$AA@
	test	edx, edx
	je	SHORT $LN26@Read
	mov	DWORD PTR tv150[ebp], OFFSET ??_C@_0BE@BFHIALBF@PROMOTION_OLIGARCHY?$AA@
	mov	eax, DWORD PTR tv150[ebp]
	add	eax, 1
	mov	DWORD PTR tv144[ebp], eax
$LL51@Read:
	mov	ecx, DWORD PTR tv150[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv148[ebp], dl
	add	DWORD PTR tv150[ebp], 1
	cmp	BYTE PTR tv148[ebp], 0
	jne	SHORT $LL51@Read
	mov	eax, DWORD PTR tv150[ebp]
	sub	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR tv160[ebp], eax
	mov	ecx, DWORD PTR tv160[ebp]
	mov	DWORD PTR tv156[ebp], ecx
	jmp	SHORT $LN22@Read
$LN26@Read:
	mov	DWORD PTR tv156[ebp], 0
$LN22@Read:
	push	-1
	mov	edx, DWORD PTR tv156[ebp]
	push	edx
	push	OFFSET ??_C@_0BE@BFHIALBF@PROMOTION_OLIGARCHY?$AA@
	mov	ecx, OFFSET ?g_CRC32@@3VFCRC@@A		; g_CRC32
	call	?Calc@FCRC@@QBEKPBXHK@Z			; FCRC::Calc
	mov	DWORD PTR _uiOligarchyHash$[ebp], eax

; 2336 : 	for(int iI = 0; iI < iNumEntries; iI++)

	mov	DWORD PTR _iI$218330[ebp], 0
	jmp	SHORT $LN7@Read
$LN6@Read:
	mov	eax, DWORD PTR _iI$218330[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$218330[ebp], eax
$LN7@Read:
	mov	ecx, DWORD PTR _iI$218330[ebp]
	cmp	ecx, DWORD PTR _iNumEntries$[ebp]
	jge	$LN8@Read

; 2337 : 	{
; 2338 : 		kStream >> uiHashTemp;

	lea	edx, DWORD PTR _uiHashTemp$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 2339 : 		if(uiHashTemp == uiOligarchyHash)

	mov	eax, DWORD PTR _uiHashTemp$[ebp]
	cmp	eax, DWORD PTR _uiOligarchyHash$[ebp]
	jne	SHORT $LN4@Read

; 2340 : 		{
; 2341 : 			bool bTemp;
; 2342 : 			kStream >> bTemp;

	lea	ecx, DWORD PTR _bTemp$218335[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 2343 : 		}
; 2344 : 		else

	jmp	$LN3@Read
$LN4@Read:

; 2345 : 		{
; 2346 : 			iType = GC.getInfoTypeForHash(uiHashTemp);

	push	0
	mov	edx, DWORD PTR _uiHashTemp$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForHash@CvGlobals@@QBEHI_N@Z ; CvGlobals::getInfoTypeForHash
	mov	DWORD PTR _iType$[ebp], eax

; 2347 : 			if(iType != -1)

	cmp	DWORD PTR _iType$[ebp], -1
	je	SHORT $LN2@Read

; 2348 : 			{
; 2349 : 				bool bValue;
; 2350 : 				kStream >> bValue;

	lea	eax, DWORD PTR _bValue$218338[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 2351 : 				kPromotions.SetBit(iType, bValue);

	movzx	ecx, BYTE PTR _bValue$218338[ebp]
	push	ecx
	mov	edx, DWORD PTR _iType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kPromotions$[ebp]
	call	?SetBit@CvBitfield@@QAEXI_N@Z		; CvBitfield::SetBit

; 2352 : 			}
; 2353 : 			else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 2354 : 			{
; 2355 : 				CvString szError;

	lea	ecx, DWORD PTR _szError$218340[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2356 : 				szError.Format("LOAD ERROR: Promotion Type not found for hash: %u", uiHashTemp);

	mov	eax, DWORD PTR _uiHashTemp$[ebp]
	push	eax
	push	OFFSET ??_C@_0DC@HHCHNDNN@LOAD?5ERROR?3?5Promotion?5Type?5not?5f@
	lea	ecx, DWORD PTR _szError$218340[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 2357 : 				GC.LogMessage(szError.GetCString());

	lea	ecx, DWORD PTR _szError$218340[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?LogMessage@CvGlobals@@QAEXPBD@Z	; CvGlobals::LogMessage

; 2358 : 				CvAssertMsg(false, szError);
; 2359 : 				bool bDummy;
; 2360 : 				kStream >> bDummy;

	lea	edx, DWORD PTR _bDummy$218342[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 2361 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _szError$218340[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN3@Read:

; 2362 : 		}

	jmp	$LN6@Read
$LN8@Read:

; 2363 : 	}
; 2364 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Read@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z$0:
	lea	ecx, DWORD PTR _szError$218340[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?Read@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Read@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Read@PromotionArrayHelpers@@YAXAAVFDataStream@@AAVCvBitfield@@@Z ENDP ; PromotionArrayHelpers::Read
EXTRN	?Write@FDataStream@@IAEXAB_N@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@PromotionArrayHelpers@@YAXAAVFDataStream@@ABVCvBitfield@@H@Z
_TEXT	SEGMENT
tv168 = -72						; size = 4
tv166 = -68						; size = 4
tv213 = -61						; size = 1
tv210 = -60						; size = 4
tv207 = -56						; size = 4
$T221125 = -52						; size = 4
$T221121 = -45						; size = 1
_uiByteIndex$221118 = -44				; size = 4
$T221112 = -37						; size = 1
_uiByteIndex$221109 = -36				; size = 4
_uiHash$218366 = -32					; size = 4
_pkPromotionInfo$218364 = -28				; size = 4
_bValue$218362 = -21					; size = 1
_ePromotion$218360 = -20				; size = 4
_iI$218356 = -16					; size = 4
_ePromotion$218353 = -12				; size = 4
_iI$218349 = -8						; size = 4
_iCount$ = -4						; size = 4
_kStream$ = 8						; size = 4
_kPromotions$ = 12					; size = 4
_iArraySize$ = 16					; size = 4
?Write@PromotionArrayHelpers@@YAXAAVFDataStream@@ABVCvBitfield@@H@Z PROC ; PromotionArrayHelpers::Write, COMDAT

; 2368 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H

; 2369 : 	// We are only going to save the 'on' bit, so we have to count them
; 2370 : 	int iCount = 0;

	mov	DWORD PTR _iCount$[ebp], 0

; 2371 : 
; 2372 : 	for(int iI = 0; iI < iArraySize; iI++)

	mov	DWORD PTR _iI$218349[ebp], 0
	jmp	SHORT $LN9@Write
$LN8@Write:
	mov	eax, DWORD PTR _iI$218349[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$218349[ebp], eax
$LN9@Write:
	mov	ecx, DWORD PTR _iI$218349[ebp]
	cmp	ecx, DWORD PTR _iArraySize$[ebp]
	jge	SHORT $LN7@Write

; 2373 : 	{
; 2374 : 		const PromotionTypes ePromotion = static_cast<PromotionTypes>(iI);

	mov	edx, DWORD PTR _iI$218349[ebp]
	mov	DWORD PTR _ePromotion$218353[ebp], edx

; 2375 : 		if (kPromotions.GetBit(ePromotion) && GC.getPromotionInfo(ePromotion) != NULL)

	mov	eax, DWORD PTR _ePromotion$218353[ebp]
	shr	eax, 3
	mov	DWORD PTR _uiByteIndex$221109[ebp], eax
	mov	ecx, DWORD PTR _kPromotions$[ebp]
	mov	edx, DWORD PTR _uiByteIndex$221109[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN12@Write
	mov	eax, DWORD PTR _kPromotions$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _uiByteIndex$221109[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _ePromotion$218353[ebp]
	and	ecx, 7
	mov	edx, 1
	shl	edx, cl
	and	eax, edx
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	BYTE PTR $T221112[ebp], al
	jmp	SHORT $LN13@Write
$LN12@Write:
	mov	BYTE PTR $T221112[ebp], 0
$LN13@Write:
	movzx	eax, BYTE PTR $T221112[ebp]
	test	eax, eax
	je	SHORT $LN6@Write
	mov	ecx, DWORD PTR _ePromotion$218353[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z ; CvGlobals::getPromotionInfo
	test	eax, eax
	je	SHORT $LN6@Write

; 2376 : 			++iCount;

	mov	edx, DWORD PTR _iCount$[ebp]
	add	edx, 1
	mov	DWORD PTR _iCount$[ebp], edx
$LN6@Write:

; 2377 : 	}

	jmp	SHORT $LN8@Write
$LN7@Write:

; 2378 : 
; 2379 : 	kStream << iCount;

	lea	eax, DWORD PTR _iCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 2380 : 
; 2381 : 	for(int iI = 0; iI < iArraySize; iI++)

	mov	DWORD PTR _iI$218356[ebp], 0
	jmp	SHORT $LN5@Write
$LN4@Write:
	mov	ecx, DWORD PTR _iI$218356[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$218356[ebp], ecx
$LN5@Write:
	mov	edx, DWORD PTR _iI$218356[ebp]
	cmp	edx, DWORD PTR _iArraySize$[ebp]
	jge	$LN10@Write

; 2382 : 	{
; 2383 : 		const PromotionTypes ePromotion = static_cast<PromotionTypes>(iI);

	mov	eax, DWORD PTR _iI$218356[ebp]
	mov	DWORD PTR _ePromotion$218360[ebp], eax

; 2384 : 		bool bValue = kPromotions.GetBit(ePromotion);

	mov	ecx, DWORD PTR _ePromotion$218360[ebp]
	shr	ecx, 3
	mov	DWORD PTR _uiByteIndex$221118[ebp], ecx
	mov	edx, DWORD PTR _kPromotions$[ebp]
	mov	eax, DWORD PTR _uiByteIndex$221118[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	SHORT $LN17@Write
	mov	ecx, DWORD PTR _kPromotions$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _uiByteIndex$221118[ebp]
	movzx	edx, BYTE PTR [edx+eax]
	mov	ecx, DWORD PTR _ePromotion$218360[ebp]
	and	ecx, 7
	mov	eax, 1
	shl	eax, cl
	and	edx, eax
	neg	edx
	sbb	edx, edx
	neg	edx
	mov	BYTE PTR $T221121[ebp], dl
	jmp	SHORT $LN18@Write
$LN17@Write:
	mov	BYTE PTR $T221121[ebp], 0
$LN18@Write:
	mov	cl, BYTE PTR $T221121[ebp]
	mov	BYTE PTR _bValue$218362[ebp], cl

; 2385 : 		if (bValue)

	movzx	edx, BYTE PTR _bValue$218362[ebp]
	test	edx, edx
	je	$LN2@Write

; 2386 : 		{
; 2387 : 			CvPromotionEntry* pkPromotionInfo = GC.getPromotionInfo(ePromotion);

	mov	eax, DWORD PTR _ePromotion$218360[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z ; CvGlobals::getPromotionInfo
	mov	DWORD PTR _pkPromotionInfo$218364[ebp], eax

; 2388 : 			if(pkPromotionInfo)

	cmp	DWORD PTR _pkPromotionInfo$218364[ebp], 0
	je	$LN2@Write

; 2389 : 			{
; 2390 : 				uint uiHash = FString::Hash( pkPromotionInfo->GetType() );		// Save just the hash

	mov	ecx, DWORD PTR _pkPromotionInfo$218364[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T221125[ebp], eax
	cmp	DWORD PTR $T221125[ebp], 0
	je	SHORT $LN26@Write
	mov	ecx, DWORD PTR $T221125[ebp]
	mov	DWORD PTR tv207[ebp], ecx
	mov	edx, DWORD PTR tv207[ebp]
	add	edx, 1
	mov	DWORD PTR tv210[ebp], edx
$LL32@Write:
	mov	eax, DWORD PTR tv207[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv213[ebp], cl
	add	DWORD PTR tv207[ebp], 1
	cmp	BYTE PTR tv213[ebp], 0
	jne	SHORT $LL32@Write
	mov	edx, DWORD PTR tv207[ebp]
	sub	edx, DWORD PTR tv210[ebp]
	mov	DWORD PTR tv166[ebp], edx
	mov	eax, DWORD PTR tv166[ebp]
	mov	DWORD PTR tv168[ebp], eax
	jmp	SHORT $LN22@Write
$LN26@Write:
	mov	DWORD PTR tv168[ebp], 0
$LN22@Write:
	push	-1
	mov	ecx, DWORD PTR tv168[ebp]
	push	ecx
	mov	edx, DWORD PTR $T221125[ebp]
	push	edx
	mov	ecx, OFFSET ?g_CRC32@@3VFCRC@@A		; g_CRC32
	call	?Calc@FCRC@@QBEKPBXHK@Z			; FCRC::Calc
	mov	DWORD PTR _uiHash$218366[ebp], eax

; 2391 : 				kStream << uiHash;

	lea	eax, DWORD PTR _uiHash$218366[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 2392 : 				kStream << bValue;

	lea	ecx, DWORD PTR _bValue$218362[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write
$LN2@Write:

; 2393 : 			}
; 2394 : 		}

	jmp	$LN4@Write
$LN10@Write:

; 2395 : 	}
; 2396 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Write@PromotionArrayHelpers@@YAXAAVFDataStream@@ABVCvBitfield@@H@Z ENDP ; PromotionArrayHelpers::Write
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ PROC ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::~vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@IAEXXZ ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::~vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::~_Vector_val<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::~_Vector_val<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvPromotionEntry@@PAPAV1@@stdext@@YAPAPAVCvPromotionEntry@@PAPAV1@00@Z ; stdext::unchecked_copy<CvPromotionEntry * *,CvPromotionEntry * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T221301 = -52						; size = 4
$T221290 = -48						; size = 4
$T221289 = -44						; size = 4
__Cat$221296 = -40					; size = 1
$T221293 = -39						; size = 1
__Ptr$218419 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@2@0@Z PROC ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvPromotionEntry@@PAPAV1@@stdext@@YAPAPAVCvPromotionEntry@@PAPAV1@00@Z ; stdext::unchecked_copy<CvPromotionEntry * *,CvPromotionEntry * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$218419[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T221301[ebp], edx
	mov	eax, DWORD PTR $T221301[ebp]
	mov	DWORD PTR $T221290[ebp], eax
	mov	ecx, DWORD PTR __Ptr$218419[ebp]
	mov	DWORD PTR $T221289[ebp], ecx
	mov	dl, BYTE PTR __Cat$221296[ebp]
	mov	BYTE PTR $T221293[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$218419[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@2@0@Z ENDP ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvPromotionEntry@@@std@@YAPAPAVCvPromotionEntry@@IPAPAV1@@Z ; std::_Allocate<CvPromotionEntry *>
PUBLIC	?_Xlen@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@KAXXZ ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$221318 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$221318[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$221318[ebp], 0
	jbe	SHORT $LN11@Buy
	mov	eax, DWORD PTR __Count$221318[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy
$LN11@Buy:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@KAXXZ ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvPromotionEntry@@@std@@YAPAPAVCvPromotionEntry@@IPAPAV1@@Z ; std::_Allocate<CvPromotionEntry *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T221382 = -28						; size = 4
$T221381 = -24						; size = 4
$T221377 = -20						; size = 4
$T221376 = -16						; size = 4
$T221365 = -12						; size = 4
$T221364 = -8						; size = 4
__Cat$221371 = -2					; size = 1
$T221368 = -1						; size = 1
?_Tidy@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@IAEXXZ PROC ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T221377[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T221376[ebp], ecx
	mov	edx, DWORD PTR $T221377[ebp]
	mov	DWORD PTR $T221365[ebp], edx
	mov	eax, DWORD PTR $T221376[ebp]
	mov	DWORD PTR $T221364[ebp], eax
	mov	cl, BYTE PTR __Cat$221371[ebp]
	mov	BYTE PTR $T221368[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T221382[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T221381[ebp], eax
	mov	ecx, DWORD PTR $T221381[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::_Tidy
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T221386 = -80						; size = 28
$T221385 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@KAXXZ PROC ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T221386[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T221385[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T221385[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T221386[ebp]
	push	eax
	lea	ecx, DWORD PTR $T221385[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T221385[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T221385[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T221386[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T221386[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T221385[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvPromotionEntry@@V?$allocator@PAVCvPromotionEntry@@@std@@@std@@KAXXZ ENDP ; std::vector<CvPromotionEntry *,std::allocator<CvPromotionEntry *> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fstringa.inl
_TEXT	ENDS
;	COMDAT ??0?$FStringAFixedBuffer@$0EA@@FStringA@@QAE@AAV1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_str$ = 8						; size = 4
??0?$FStringAFixedBuffer@$0EA@@FStringA@@QAE@AAV1@@Z PROC ; FStringA::FStringAFixedBuffer<64>::FStringAFixedBuffer<64>, COMDAT
; _this$ = ecx

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	assert( nLENGTH > 0 );
; 60   : 	m_kStringData.m_bLocked = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+8], ax

; 61   : 	m_kStringData.m_bFixed = 1;

	mov	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+10], dx

; 62   : 	m_kStringData.m_iAllocLength = nLENGTH;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 64			; 00000040H

; 63   : 	m_kStringData.m_iDataLength = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 64   : 	m_szStringBuffer[ 0 ] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 65   : 	str.SetFixedBuffer( &m_kStringData );

	cmp	DWORD PTR _this$[ebp], 0
	jne	SHORT $LN3@FStringAFi
	jmp	SHORT $LN1@FStringAFi
$LN3@FStringAFi:
	mov	ecx, DWORD PTR _str$[ebp]
	call	?Release@FStringA@@QAEXXZ		; FStringA::Release
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _str$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@FStringAFi:

; 66   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$FStringAFixedBuffer@$0EA@@FStringA@@QAE@AAV1@@Z ENDP ; FStringA::FStringAFixedBuffer<64>::FStringAFixedBuffer<64>
_TEXT	ENDS
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVCvPromotionEntry@@PAPAV1@@stdext@@YAPAPAVCvPromotionEntry@@PAPAV1@00@Z
_TEXT	SEGMENT
$T221480 = -26						; size = 1
$T221479 = -25						; size = 1
$T221478 = -24						; size = 4
$T221477 = -20						; size = 4
__Off$221474 = -16					; size = 4
__Result$221475 = -12					; size = 4
__Cat$221466 = -4					; size = 1
$T221462 = -3						; size = 1
$T221461 = -2						; size = 1
$T221460 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvPromotionEntry@@PAPAV1@@stdext@@YAPAPAVCvPromotionEntry@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvPromotionEntry * *,CvPromotionEntry * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T221460[ebp], al
	mov	cl, BYTE PTR __Cat$221466[ebp]
	mov	BYTE PTR $T221461[ebp], cl
	mov	dl, BYTE PTR $T221460[ebp]
	mov	BYTE PTR $T221480[ebp], dl
	mov	al, BYTE PTR $T221462[ebp]
	mov	BYTE PTR $T221479[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T221478[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T221477[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T221477[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$221474[ebp], eax
	mov	ecx, DWORD PTR __Off$221474[ebp]
	mov	edx, DWORD PTR $T221478[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$221475[ebp], eax
	cmp	DWORD PTR __Off$221474[ebp], 0
	jle	SHORT $LN8@unchecked_
	mov	ecx, DWORD PTR __Off$221474[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T221477[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$221474[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T221478[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_:
	mov	eax, DWORD PTR __Result$221475[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvPromotionEntry@@PAPAV1@@stdext@@YAPAPAVCvPromotionEntry@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvPromotionEntry * *,CvPromotionEntry * *>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R0?AVbad_alloc@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
xdata$x	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_Ebad_alloc@std@@UAEPAXI@Z ; std::bad_alloc::`vftable'
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	ENDS
;	COMDAT ??$_Allocate@PAVCvPromotionEntry@@@std@@YAPAPAVCvPromotionEntry@@IPAPAV1@@Z
_TEXT	SEGMENT
$T221487 = -16						; size = 4
$T221483 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvPromotionEntry@@@std@@YAPAPAVCvPromotionEntry@@IPAPAV1@@Z PROC ; std::_Allocate<CvPromotionEntry *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T221487[ebp], 0
	lea	eax, DWORD PTR $T221487[ebp]
	push	eax
	lea	ecx, DWORD PTR $T221483[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T221483[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T221483[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvPromotionEntry@@@std@@YAPAPAVCvPromotionEntry@@IPAPAV1@@Z ENDP ; std::_Allocate<CvPromotionEntry *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@3
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fstringa.inl
_TEXT	ENDS
;	COMDAT ??1FStringA@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
??1FStringA@@QAE@XZ PROC				; FStringA::~FStringA, COMDAT
; _this$ = ecx

; 151  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 	Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Release@FStringA@@QAEXXZ		; FStringA::Release

; 153  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1FStringA@@QAE@XZ ENDP				; FStringA::~FStringA
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Release@FStringA@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T221533 = -12						; size = 4
$T221528 = -8						; size = 4
$T221525 = -4						; size = 4
?Release@FStringA@@QAEXXZ PROC				; FStringA::Release, COMDAT
; _this$ = ecx

; 1096 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1097 : 	Release( GetData() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 12					; 0000000cH
	mov	DWORD PTR $T221528[ebp], ecx
	je	SHORT $LN6@Release
	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	cmp	DWORD PTR $T221528[ebp], eax
	je	SHORT $LN6@Release
	mov	edx, DWORD PTR $T221528[ebp]
	movzx	eax, WORD PTR [edx+10]
	test	eax, eax
	jne	SHORT $LN6@Release
	mov	ecx, DWORD PTR $T221528[ebp]
	mov	DWORD PTR $T221525[ebp], ecx
	mov	edx, DWORD PTR $T221525[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@Release:

; 1098 : 	m_pszString = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1099 : 	Init();

	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	mov	DWORD PTR $T221533[ebp], eax
	mov	ecx, DWORD PTR $T221533[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 1100 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Release@FStringA@@QAEXXZ ENDP				; FStringA::Release
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_args$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2124				; 0000084cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);

	lea	eax, DWORD PTR _lpszFormat$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpszFormat$[ebp]
	push	edx
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp___vsnprintf:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
tv74 = -2096						; size = 4
$T221578 = -2092					; size = 4
$T221577 = -2088					; size = 4
$T221576 = -2084					; size = 4
_maxlen$95294 = -2080					; size = 4
_kMaxAttempts$ = -2076					; size = 4
_buf$ = -2072						; size = 2048
__$ArrayPad$ = -20					; size = 4
_len$ = -16						; size = 4
_attempts$ = -12					; size = 4
_success$ = -5						; size = 1
_pbuf$ = -4						; size = 4
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2096				; 00000830H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax

; 194  : 	int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 195  : 	int attempts = 0;

	mov	DWORD PTR _attempts$[ebp], 0

; 196  : 	bool success = false;

	mov	BYTE PTR _success$[ebp], 0

; 197  : 	const int kMaxAttempts = 40;

	mov	DWORD PTR _kMaxAttempts$[ebp], 40	; 00000028H
$LN10@formatv:

; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;

	mov	ecx, DWORD PTR _attempts$[ebp]
	shl	ecx, 11					; 0000000bH
	add	ecx, 2047				; 000007ffH
	mov	DWORD PTR _maxlen$95294[ebp], ecx

; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxlen$95294[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax

; 203  : 		attempts++;

	mov	eax, DWORD PTR _attempts$[ebp]
	add	eax, 1
	mov	DWORD PTR _attempts$[ebp], eax

; 204  : 		success = (len>=0 && len<=maxlen);

	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN13@formatv
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _maxlen$95294[ebp]
	jg	SHORT $LN13@formatv
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN14@formatv
$LN13@formatv:
	mov	DWORD PTR tv74[ebp], 0
$LN14@formatv:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _success$[ebp], dl

; 205  : 		if (!success)

	movzx	eax, BYTE PTR _success$[ebp]
	test	eax, eax
	jne	SHORT $LN9@formatv

; 206  : 		{
; 207  : 			if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T221576[ebp], eax
	mov	ecx, DWORD PTR $T221576[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	mov	edx, DWORD PTR _attempts$[ebp]
	shl	edx, 11					; 0000000bH
	add	edx, 2048				; 00000800H
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T221577[ebp], eax
	mov	eax, DWORD PTR $T221577[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax
$LN9@formatv:

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	movzx	ecx, BYTE PTR _success$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@formatv
	cmp	DWORD PTR _attempts$[ebp], 40		; 00000028H
	jl	$LN10@formatv
$LN4@formatv:

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)

	movzx	edx, BYTE PTR _success$[ebp]
	test	edx, edx
	je	SHORT $LN3@formatv

; 220  : 		out = pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 221  : 	else

	jmp	SHORT $LN2@formatv
$LN3@formatv:

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN2@formatv:

; 223  : 
; 224  : 	if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@formatv

; 225  : 		delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T221578[ebp], eax
	mov	ecx, DWORD PTR $T221578[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@formatv:

; 226  : 
; 227  : 	return success;

	mov	al, BYTE PTR _success$[ebp]

; 228  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvbitfield.h
_TEXT	ENDS
;	COMDAT ?SetBit@CvBitfield@@QAEXI_N@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
_uiByteIndex$ = -4					; size = 4
_uiIndex$ = 8						; size = 4
_bValue$ = 12						; size = 1
?SetBit@CvBitfield@@QAEXI_N@Z PROC			; CvBitfield::SetBit, COMDAT
; _this$ = ecx

; 35   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 		uint uiByteIndex = uiIndex >> 3;

	mov	eax, DWORD PTR _uiIndex$[ebp]
	shr	eax, 3
	mov	DWORD PTR _uiByteIndex$[ebp], eax

; 37   : 		if (uiByteIndex < m_uiByteSize)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiByteIndex$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN5@SetBit

; 38   : 		{
; 39   : 			if (bValue)

	movzx	eax, BYTE PTR _bValue$[ebp]
	test	eax, eax
	je	SHORT $LN4@SetBit

; 40   : 				m_pBits[uiByteIndex] |= (1 << (uiIndex&0x7));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _uiIndex$[ebp]
	and	ecx, 7
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _uiByteIndex$[ebp]
	movzx	edx, BYTE PTR [edx+ecx]
	or	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _uiByteIndex$[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 41   : 			else

	jmp	SHORT $LN3@SetBit
$LN4@SetBit:

; 42   : 				m_pBits[uiByteIndex] &= ~(1 << (uiIndex&0x7));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _uiIndex$[ebp]
	and	ecx, 7
	mov	eax, 1
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _uiByteIndex$[ebp]
	movzx	edx, BYTE PTR [edx+ecx]
	and	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _uiByteIndex$[ebp]
	mov	BYTE PTR [ecx+eax], dl
$LN3@SetBit:

; 43   : 		}
; 44   : 		else

	jmp	SHORT $LN6@SetBit
$LN5@SetBit:

; 45   : 			if (bValue)		// Only resize if setting the value

	movzx	ecx, BYTE PTR _bValue$[ebp]
	test	ecx, ecx
	je	SHORT $LN6@SetBit

; 46   : 			{
; 47   : 				SetSize(uiIndex + 1);

	mov	edx, DWORD PTR _uiIndex$[ebp]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@CvBitfield@@QAEXI@Z		; CvBitfield::SetSize

; 48   : 				m_pBits[uiByteIndex] |= (1 << (uiIndex&0x7));

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _uiIndex$[ebp]
	and	ecx, 7
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _uiByteIndex$[ebp]
	movzx	edx, BYTE PTR [edx+ecx]
	or	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _uiByteIndex$[ebp]
	mov	BYTE PTR [ecx+eax], dl
$LN6@SetBit:

; 49   : 			}
; 50   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?SetBit@CvBitfield@@QAEXI_N@Z ENDP			; CvBitfield::SetBit
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
;	COMDAT ?SetSize@CvBitfield@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T221593 = -32						; size = 4
$T221592 = -28						; size = 4
$T221591 = -24						; size = 4
$T221590 = -20						; size = 4
$T221589 = -16						; size = 4
_pNewBits$112533 = -12					; size = 4
_pNewBits$112526 = -8					; size = 4
_uiByteSize$ = -4					; size = 4
_uiSize$ = 8						; size = 4
?SetSize@CvBitfield@@QAEXI@Z PROC			; CvBitfield::SetSize, COMDAT
; _this$ = ecx

; 64   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 		uint uiByteSize = (uiSize >> 3) + ((uiSize&0x07)?1:0);

	mov	eax, DWORD PTR _uiSize$[ebp]
	shr	eax, 3
	mov	ecx, DWORD PTR _uiSize$[ebp]
	and	ecx, 7
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx
	mov	DWORD PTR _uiByteSize$[ebp], eax

; 66   : 		if (uiByteSize == 0)

	jne	SHORT $LN7@SetSize

; 67   : 		{
; 68   : 			delete []m_pBits;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T221589[ebp], eax
	mov	ecx, DWORD PTR $T221589[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 69   : 			m_uiByteSize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 70   : 			m_pBits = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 71   : 		}
; 72   : 		else

	jmp	$LN8@SetSize
$LN7@SetSize:

; 73   : 			if (uiByteSize > m_uiByteSize)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiByteSize$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jbe	SHORT $LN5@SetSize

; 74   : 			{
; 75   : 				byte* pNewBits = new byte[uiByteSize];

	mov	eax, DWORD PTR _uiByteSize$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T221590[ebp], eax
	mov	ecx, DWORD PTR $T221590[ebp]
	mov	DWORD PTR _pNewBits$112526[ebp], ecx

; 76   : 				memset(pNewBits, 0, uiByteSize);

	mov	edx, DWORD PTR _uiByteSize$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _pNewBits$112526[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 77   : 				if (m_uiByteSize)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@SetSize

; 78   : 				{
; 79   : 					memcpy(pNewBits, m_pBits, m_uiByteSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _pNewBits$112526[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 80   : 					delete []m_pBits;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T221591[ebp], edx
	mov	eax, DWORD PTR $T221591[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN4@SetSize:

; 81   : 				}
; 82   : 				m_pBits = pNewBits;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pNewBits$112526[ebp]
	mov	DWORD PTR [ecx+4], edx

; 83   : 				m_uiByteSize = uiByteSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiByteSize$[ebp]
	mov	DWORD PTR [eax], ecx

; 84   : 			}
; 85   : 			else

	jmp	SHORT $LN8@SetSize
$LN5@SetSize:

; 86   : 				if (uiByteSize < m_uiByteSize)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiByteSize$[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	SHORT $LN8@SetSize

; 87   : 				{
; 88   : 					byte* pNewBits = new byte[uiByteSize];

	mov	ecx, DWORD PTR _uiByteSize$[ebp]
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T221592[ebp], eax
	mov	edx, DWORD PTR $T221592[ebp]
	mov	DWORD PTR _pNewBits$112533[ebp], edx

; 89   : 					memset(pNewBits, 0, uiByteSize);

	mov	eax, DWORD PTR _uiByteSize$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pNewBits$112533[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 90   : 					if (m_uiByteSize)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN1@SetSize

; 91   : 					{
; 92   : 						memcpy(pNewBits, m_pBits, uiByteSize);

	mov	eax, DWORD PTR _uiByteSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _pNewBits$112533[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 93   : 						delete []m_pBits;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T221593[ebp], edx
	mov	eax, DWORD PTR $T221593[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@SetSize:

; 94   : 					}
; 95   : 					m_pBits = pNewBits;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pNewBits$112533[ebp]
	mov	DWORD PTR [ecx+4], edx

; 96   : 					m_uiByteSize = uiByteSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiByteSize$[ebp]
	mov	DWORD PTR [eax], ecx
$LN8@SetSize:

; 97   : 				}
; 98   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@CvBitfield@@QAEXI@Z ENDP			; CvBitfield::SetSize
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdatabaseutility.h
_TEXT	ENDS
;	COMDAT ?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T221597 = -8						; size = 4
_i$172577 = -4						; size = 4
_pArray$ = 8						; size = 4
_count$ = 12						; size = 4
_iDefault$ = 16						; size = 4
?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z PROC	; CvDatabaseUtility::InitializeArray, COMDAT
; _this$ = ecx

; 120  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 	CvAssertMsg(count > 0, "Initializing array to 0 or less items.");
; 122  : #ifdef AUI_WARNING_FIXES
; 123  : 	delete[] pArray;
; 124  : #endif
; 125  : 	pArray = FNEW(int[count], c_eCiv5GameplayDLL, 0);

	xor	ecx, ecx
	mov	eax, DWORD PTR _count$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T221597[ebp], eax
	mov	eax, DWORD PTR _pArray$[ebp]
	mov	ecx, DWORD PTR $T221597[ebp]
	mov	DWORD PTR [eax], ecx

; 126  : 	if(iDefault == 0)

	cmp	DWORD PTR _iDefault$[ebp], 0
	jne	SHORT $LN5@Initialize

; 127  : 	{
; 128  : 		ZeroMemory(pArray, sizeof(int) * count);

	mov	edx, DWORD PTR _count$[ebp]
	shl	edx, 2
	push	edx
	push	0
	mov	eax, DWORD PTR _pArray$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 129  : 	}
; 130  : 	else

	jmp	SHORT $LN6@Initialize
$LN5@Initialize:

; 131  : 	{
; 132  : 		for(size_t i = 0; i < count; ++i)

	mov	DWORD PTR _i$172577[ebp], 0
	jmp	SHORT $LN3@Initialize
$LN2@Initialize:
	mov	edx, DWORD PTR _i$172577[ebp]
	add	edx, 1
	mov	DWORD PTR _i$172577[ebp], edx
$LN3@Initialize:
	mov	eax, DWORD PTR _i$172577[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN6@Initialize

; 133  : 			pArray[i] = iDefault;

	mov	ecx, DWORD PTR _pArray$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$172577[ebp]
	mov	ecx, DWORD PTR _iDefault$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	jmp	SHORT $LN2@Initialize
$LN6@Initialize:

; 134  : 	}
; 135  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ENDP	; CvDatabaseUtility::InitializeArray
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T221629 = -30						; size = 1
$T221616 = -29						; size = 1
$T221612 = -28						; size = 4
$T221605 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T221629[ebp]
	mov	DWORD PTR $T221605[ebp], eax
	lea	ecx, DWORD PTR $T221616[ebp]
	mov	DWORD PTR $T221612[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$221753 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z PROC	; std::vector<int,std::allocator<int> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@2

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@2
	jmp	SHORT $LN3@Buy@2
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$221753[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$221753[ebp], 0
	jbe	SHORT $LN11@Buy@2
	mov	eax, DWORD PTR __Count$221753[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@2
$LN11@Buy@2:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@2:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@2

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@2

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@2:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@2:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@2:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ENDP	; std::vector<int,std::allocator<int> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T221819 = -28						; size = 4
$T221818 = -24						; size = 4
$T221814 = -20						; size = 4
$T221813 = -16						; size = 4
$T221802 = -12						; size = 4
$T221801 = -8						; size = 4
__Cat$221808 = -2					; size = 1
$T221806 = -1						; size = 1
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@2

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T221814[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T221813[ebp], ecx
	mov	edx, DWORD PTR $T221814[ebp]
	mov	DWORD PTR $T221802[ebp], edx
	mov	eax, DWORD PTR $T221813[ebp]
	mov	DWORD PTR $T221801[ebp], eax
	mov	cl, BYTE PTR __Cat$221808[ebp]
	mov	BYTE PTR $T221806[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T221819[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T221818[ebp], eax
	mov	ecx, DWORD PTR $T221818[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@2:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T221837 = -80						; size = 28
$T221836 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T221837[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T221836[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T221836[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T221837[ebp]
	push	eax
	lea	ecx, DWORD PTR $T221836[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T221836[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T221836[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T221837[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T221837[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T221836[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
$T221862 = -16						; size = 4
$T221858 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T221862[ebp], 0
	lea	eax, DWORD PTR $T221862[ebp]
	push	eax
	lea	ecx, DWORD PTR $T221858[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T221858[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T221858[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ; std::vector<int,std::allocator<int> >::insert
PUBLIC	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z	; stdext::unchecked_fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
tv129 = -96						; size = 4
_this$ = -92						; size = 4
$T221955 = -64						; size = 4
$T221945 = -60						; size = 4
$T221933 = -56						; size = 4
$T221923 = -49						; size = 1
$T221922 = -48						; size = 4
__Cat$221941 = -19					; size = 1
$T221939 = -18						; size = 1
$T221938 = -17						; size = 1
$T221874 = -16						; size = 4
$T221870 = -12						; size = 4
$T221869 = -8						; size = 4
$T221868 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T221874[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@push_back
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back
$LN9@push_back:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back:
	mov	ecx, DWORD PTR $T221874[ebp]
	cmp	ecx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T221945[ebp], eax
	mov	ecx, DWORD PTR $T221945[ebp]
	mov	DWORD PTR $T221933[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T221938[ebp], dl
	mov	al, BYTE PTR __Cat$221941[ebp]
	mov	BYTE PTR $T221939[ebp], al
	mov	cl, BYTE PTR $T221938[ebp]
	mov	BYTE PTR $T221923[ebp], cl
	mov	edx, DWORD PTR $T221933[ebp]
	mov	DWORD PTR $T221922[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR $T221922[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ; stdext::unchecked_fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH
	mov	edx, 1
	shl	edx, 2
	add	edx, DWORD PTR $T221945[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back
$LN2@push_back:

; 823  : 			insert(end(), _Val);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T221955[ebp], edx
	mov	eax, DWORD PTR $T221955[ebp]
	mov	DWORD PTR $T221869[ebp], eax
	mov	ecx, DWORD PTR $T221869[ebp]
	mov	DWORD PTR $T221868[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR $T221868[ebp]
	push	eax
	lea	ecx, DWORD PTR $T221870[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ; std::vector<int,std::allocator<int> >::insert
$LN3@push_back:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$222080 = -24					; size = 4
$T222058 = -20						; size = 4
$T222039 = -16						; size = 4
$T222026 = -12						; size = 4
$T222023 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z PROC ; std::vector<int,std::allocator<int> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	test	edx, edx
	jne	SHORT $LN3@insert
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert
$LN3@insert:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T222039[ebp], ecx
	mov	edx, DWORD PTR $T222039[ebp]
	mov	DWORD PTR $T222023[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T222023[ebp]
	sar	eax, 2
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T222058[ebp], edx
	mov	eax, DWORD PTR $T222058[ebp]
	mov	DWORD PTR $T222026[ebp], eax
	mov	ecx, DWORD PTR $T222026[ebp]
	mov	DWORD PTR __Tmp$222080[ebp], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR __Tmp$222080[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Tmp$222080[ebp], ecx
	mov	edx, DWORD PTR __Tmp$222080[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ENDP ; std::vector<int,std::allocator<int> >::insert
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>
PUBLIC	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill
PUBLIC	??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int *,int *,std::allocator<int> >
PUBLIC	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$2
__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$0
__unwindtable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
_TEXT	SEGMENT
tv84 = -432						; size = 4
tv302 = -428						; size = 4
tv288 = -424						; size = 4
tv280 = -420						; size = 4
_this$ = -416						; size = 4
$T222634 = -412						; size = 4
$T222582 = -368						; size = 4
$T222570 = -364						; size = 4
$T222560 = -357						; size = 1
$T222559 = -356						; size = 4
__Cat$222577 = -327					; size = 1
$T222574 = -326						; size = 1
$T222573 = -325						; size = 1
$T222531 = -324						; size = 4
$T222523 = -320						; size = 4
$T222515 = -316						; size = 4
$T222504 = -312						; size = 4
$T222503 = -308						; size = 4
__Cat$222510 = -302					; size = 1
$T222508 = -301						; size = 1
$T222432 = -276						; size = 4
$T222413 = -272						; size = 4
$T222396 = -265						; size = 1
$T222395 = -264						; size = 4
$T222385 = -260						; size = 4
$T222384 = -256						; size = 4
__Cat$222426 = -250					; size = 1
$T222424 = -249						; size = 1
$T222423 = -248						; size = 1
__Cat$222420 = -247					; size = 1
$T222417 = -246						; size = 1
$T222416 = -245						; size = 1
$T222360 = -244						; size = 4
$T222359 = -240						; size = 4
$T222355 = -236						; size = 4
$T222354 = -232						; size = 4
$T222343 = -228						; size = 4
$T222342 = -224						; size = 4
__Cat$222349 = -218					; size = 1
$T222346 = -217						; size = 1
$T222307 = -216						; size = 4
$T222306 = -212						; size = 4
__Cat$222313 = -206					; size = 1
$T222310 = -205						; size = 1
$T222277 = -204						; size = 4
$T222276 = -200						; size = 4
__Cat$222283 = -194					; size = 1
$T222280 = -193						; size = 1
$T222257 = -192						; size = 4
$T222245 = -188						; size = 4
$T222235 = -181						; size = 1
$T222234 = -180						; size = 4
__Cat$222252 = -175					; size = 1
$T222249 = -174						; size = 1
$T222248 = -173						; size = 1
$T222222 = -172						; size = 4
$T222210 = -168						; size = 4
$T222200 = -161						; size = 1
$T222199 = -160						; size = 4
__Cat$222220 = -155					; size = 1
$T222218 = -154						; size = 1
$T222217 = -153						; size = 1
$T222187 = -152						; size = 4
$T222175 = -148						; size = 4
$T222165 = -141						; size = 1
$T222164 = -140						; size = 4
__Cat$222183 = -135					; size = 1
$T222181 = -134						; size = 1
$T222180 = -133						; size = 1
__Count$222138 = -120					; size = 4
__Count$222112 = -48					; size = 4
__Tmp$214818 = -44					; size = 4
__Oldend$214819 = -40					; size = 4
__Tmp$214808 = -36					; size = 4
__Ncopied$214795 = -32					; size = 4
__Newvec$214793 = -28					; size = 4
__Whereoff$214794 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z PROC ; std::vector<int,std::allocator<int> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n
	mov	DWORD PTR tv280[ebp], 0
	jmp	SHORT $LN27@Insert_n
$LN29@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv280[ebp], eax
$LN27@Insert_n:
	mov	ecx, DWORD PTR tv280[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n
	jmp	$LN16@Insert_n
$LN14@Insert_n:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$222112[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$222112[ebp], 0
	jbe	SHORT $LN35@Insert_n
	mov	edx, DWORD PTR __Count$222112[ebp]
	mov	DWORD PTR tv288[ebp], edx
	jmp	SHORT $LN37@Insert_n
$LN35@Insert_n:
	mov	DWORD PTR tv288[ebp], 1
$LN37@Insert_n:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR tv288[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
	jmp	$LN16@Insert_n

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$222138[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$222138[ebp], 0
	jbe	SHORT $LN48@Insert_n
	mov	ecx, DWORD PTR __Count$222138[ebp]
	mov	DWORD PTR tv302[ebp], ecx
	jmp	SHORT $LN44@Insert_n
$LN48@Insert_n:
	mov	DWORD PTR tv302[ebp], 1
$LN44@Insert_n:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv302[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	add	esp, 8
	mov	DWORD PTR __Newvec$214793[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR __Whereoff$214794[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$214795[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$214794[ebp]
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T222187[ebp], edx
	mov	eax, DWORD PTR $T222187[ebp]
	mov	DWORD PTR $T222175[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T222180[ebp], cl
	mov	dl, BYTE PTR __Cat$222183[ebp]
	mov	BYTE PTR $T222181[ebp], dl
	mov	al, BYTE PTR $T222180[ebp]
	mov	BYTE PTR $T222165[ebp], al
	mov	ecx, DWORD PTR $T222175[ebp]
	mov	DWORD PTR $T222164[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T222164[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ; stdext::unchecked_fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH

; 1179 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$214795[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$214795[ebp], edx

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T222222[ebp], ecx
	mov	edx, DWORD PTR __Newvec$214793[ebp]
	mov	DWORD PTR $T222210[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T222217[ebp], al
	mov	cl, BYTE PTR __Cat$222220[ebp]
	mov	BYTE PTR $T222218[ebp], cl
	mov	dl, BYTE PTR $T222217[ebp]
	mov	BYTE PTR $T222200[ebp], dl
	mov	eax, DWORD PTR $T222210[ebp]
	mov	DWORD PTR $T222199[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T222199[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T222222[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$214795[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$214795[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T222257[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$214794[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$214793[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T222245[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T222248[ebp], dl
	mov	al, BYTE PTR __Cat$222252[ebp]
	mov	BYTE PTR $T222249[ebp], al
	mov	cl, BYTE PTR $T222248[ebp]
	mov	BYTE PTR $T222235[ebp], cl
	mov	edx, DWORD PTR $T222245[ebp]
	mov	DWORD PTR $T222234[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T222234[ebp]
	push	ecx
	mov	edx, DWORD PTR $T222257[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n
__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$214795[ebp], 1
	jle	SHORT $LN7@Insert_n

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	ecx, DWORD PTR __Whereoff$214794[ebp]
	mov	edx, DWORD PTR __Newvec$214793[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T222277[ebp], eax
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	mov	DWORD PTR $T222276[ebp], ecx
	mov	dl, BYTE PTR __Cat$222283[ebp]
	mov	BYTE PTR $T222280[ebp], dl
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$214795[ebp], 0
	jle	SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Whereoff$214794[ebp]
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T222307[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$214794[ebp]
	mov	eax, DWORD PTR __Newvec$214793[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T222306[ebp], ecx
	mov	dl, BYTE PTR __Cat$222313[ebp]
	mov	BYTE PTR $T222310[ebp], dl
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Newvec$214793[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN103@Insert_n
	ret	0
$LN19@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN103@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN5@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T222355[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T222354[ebp], edx
	mov	eax, DWORD PTR $T222355[ebp]
	mov	DWORD PTR $T222343[ebp], eax
	mov	ecx, DWORD PTR $T222354[ebp]
	mov	DWORD PTR $T222342[ebp], ecx
	mov	dl, BYTE PTR __Cat$222349[ebp]
	mov	BYTE PTR $T222346[ebp], dl

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T222360[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T222359[ebp], ecx
	mov	edx, DWORD PTR $T222359[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$214793[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$214793[ebp]
	mov	DWORD PTR [edx+4], eax
	jmp	$LN16@Insert_n
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$214808[ebp], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T222432[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T222413[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T222416[ebp], cl
	mov	dl, BYTE PTR __Cat$222420[ebp]
	mov	BYTE PTR $T222417[ebp], dl
	mov	al, BYTE PTR $T222416[ebp]
	mov	BYTE PTR $T222396[ebp], al
	mov	ecx, DWORD PTR $T222413[ebp]
	mov	DWORD PTR $T222395[ebp], ecx
	mov	edx, DWORD PTR $T222395[ebp]
	mov	DWORD PTR $T222385[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T222384[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T222423[ebp], cl
	mov	dl, BYTE PTR __Cat$222426[ebp]
	mov	BYTE PTR $T222424[ebp], dl
	movzx	eax, BYTE PTR $T222423[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T222424[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T222385[ebp]
	push	eax
	mov	ecx, DWORD PTR $T222432[ebp]
	push	ecx
	mov	edx, DWORD PTR $T222384[ebp]
	push	edx
	call	??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int *,int *,std::allocator<int> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$214808[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill
	jmp	SHORT $LN21@Insert_n
__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T222515[ebp], eax
	mov	ecx, DWORD PTR $T222515[ebp]
	mov	DWORD PTR $T222504[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T222503[ebp], ecx
	mov	dl, BYTE PTR __Cat$222510[ebp]
	mov	BYTE PTR $T222508[ebp], dl

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$3
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	mov	DWORD PTR $T222531[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T222523[ebp], edx
	jmp	SHORT $LN151@Insert_n
$LN150@Insert_n:
	mov	eax, DWORD PTR $T222523[ebp]
	add	eax, 4
	mov	DWORD PTR $T222523[ebp], eax
$LN151@Insert_n:
	mov	ecx, DWORD PTR $T222523[ebp]
	cmp	ecx, DWORD PTR $T222531[ebp]
	je	SHORT $LN147@Insert_n
	mov	edx, DWORD PTR $T222523[ebp]
	mov	eax, DWORD PTR __Tmp$214808[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN150@Insert_n
$LN147@Insert_n:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$214818[ebp], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$214819[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T222582[ebp], eax
	mov	ecx, DWORD PTR $T222582[ebp]
	mov	DWORD PTR $T222570[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T222573[ebp], dl
	mov	al, BYTE PTR __Cat$222577[ebp]
	mov	BYTE PTR $T222574[ebp], al
	mov	cl, BYTE PTR $T222573[ebp]
	mov	BYTE PTR $T222560[ebp], cl
	mov	edx, DWORD PTR $T222570[ebp]
	mov	DWORD PTR $T222559[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T222559[ebp]
	push	ecx
	mov	edx, DWORD PTR __Oldend$214819[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$214819[ebp]
	sub	ecx, eax
	push	ecx
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$214819[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Oldend$214819[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T222634[ebp], ecx
	jmp	SHORT $LN186@Insert_n
$LN185@Insert_n:
	mov	edx, DWORD PTR $T222634[ebp]
	add	edx, 4
	mov	DWORD PTR $T222634[ebp], edx
$LN186@Insert_n:
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	cmp	DWORD PTR $T222634[ebp], edx
	je	SHORT $LN16@Insert_n
	mov	eax, DWORD PTR $T222634[ebp]
	mov	ecx, DWORD PTR __Tmp$214818[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN185@Insert_n
$LN16@Insert_n:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-436]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T222705 = -40						; size = 4
$T222695 = -33						; size = 1
$T222694 = -32						; size = 4
__Cat$222701 = -3					; size = 1
$T222699 = -2						; size = 1
$T222698 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z PROC ; std::vector<int,std::allocator<int> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T222705[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T222698[ebp], cl
	mov	dl, BYTE PTR __Cat$222701[ebp]
	mov	BYTE PTR $T222699[ebp], dl
	mov	al, BYTE PTR $T222698[ebp]
	mov	BYTE PTR $T222695[ebp], al
	mov	ecx, DWORD PTR $T222705[ebp]
	mov	DWORD PTR $T222694[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T222694[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ; stdext::unchecked_fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH

; 1255 : 		return (_Ptr + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [eax+edx*4]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Ufill
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T222750 = -38						; size = 1
$T222749 = -37						; size = 1
$T222748 = -36						; size = 4
$T222747 = -32						; size = 4
$T222734 = -25						; size = 1
$T222733 = -24						; size = 4
$T222732 = -20						; size = 4
__Off$222742 = -16					; size = 4
__Result$222743 = -12					; size = 4
__Cat$222739 = -8					; size = 1
$T222737 = -7						; size = 1
$T222736 = -6						; size = 1
__Cat$222714 = -4					; size = 1
$T222710 = -3						; size = 1
$T222709 = -2						; size = 1
$T222708 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z PROC ; stdext::_Unchecked_move_backward<int *,int *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T222708[ebp], al
	mov	cl, BYTE PTR __Cat$222714[ebp]
	mov	BYTE PTR $T222709[ebp], cl
	mov	dl, BYTE PTR $T222708[ebp]
	mov	BYTE PTR $T222750[ebp], dl
	mov	al, BYTE PTR $T222710[ebp]
	mov	BYTE PTR $T222749[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T222748[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T222747[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T222736[ebp], al
	mov	cl, BYTE PTR __Cat$222739[ebp]
	mov	BYTE PTR $T222737[ebp], cl
	mov	dl, BYTE PTR $T222736[ebp]
	mov	BYTE PTR $T222734[ebp], dl
	mov	eax, DWORD PTR $T222748[ebp]
	mov	DWORD PTR $T222733[ebp], eax
	mov	ecx, DWORD PTR $T222747[ebp]
	mov	DWORD PTR $T222732[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR $T222732[ebp]
	sar	edx, 2
	mov	DWORD PTR __Off$222742[ebp], edx
	mov	eax, DWORD PTR __Off$222742[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR $T222733[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$222743[ebp], ecx
	cmp	DWORD PTR __Off$222742[ebp], 0
	jle	SHORT $LN7@Unchecked_
	mov	edx, DWORD PTR __Off$222742[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR $T222732[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$222742[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __Result$222743[ebp]
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN7@Unchecked_:
	mov	eax, DWORD PTR __Result$222743[ebp]

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ENDP ; stdext::_Unchecked_move_backward<int *,int *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z
_TEXT	SEGMENT
$T222780 = -22						; size = 1
$T222779 = -21						; size = 1
$T222778 = -20						; size = 4
$T222769 = -13						; size = 1
$T222768 = -12						; size = 4
$T222767 = -8						; size = 4
$T222772 = -4						; size = 1
$T222754 = -2						; size = 1
$T222753 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z PROC	; stdext::unchecked_fill_n<int *,unsigned int,int>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T222753[ebp], al
	mov	cl, BYTE PTR $T222753[ebp]
	mov	BYTE PTR $T222780[ebp], cl
	mov	dl, BYTE PTR $T222754[ebp]
	mov	BYTE PTR $T222779[ebp], dl
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T222778[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T222772[ebp], cl
	mov	dl, BYTE PTR $T222772[ebp]
	mov	BYTE PTR $T222769[ebp], dl
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR $T222768[ebp], eax
	mov	ecx, DWORD PTR $T222778[ebp]
	mov	DWORD PTR $T222767[ebp], ecx
	jmp	SHORT $LN9@unchecked_@2
$LN8@unchecked_@2:
	mov	edx, DWORD PTR $T222768[ebp]
	sub	edx, 1
	mov	DWORD PTR $T222768[ebp], edx
	mov	eax, DWORD PTR $T222767[ebp]
	add	eax, 4
	mov	DWORD PTR $T222767[ebp], eax
$LN9@unchecked_@2:
	cmp	DWORD PTR $T222768[ebp], 0
	jbe	SHORT $LN1@unchecked_@2
	mov	ecx, DWORD PTR $T222767[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN8@unchecked_@2
$LN1@unchecked_@2:

; 3722 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ENDP	; stdext::unchecked_fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
$T222797 = -21						; size = 1
$T222796 = -20						; size = 4
$T222795 = -16						; size = 4
__Result$222792 = -12					; size = 4
__Count$222791 = -8					; size = 4
__Cat$222787 = -3					; size = 1
$T222784 = -2						; size = 1
$T222783 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T222783[ebp], al
	mov	cl, BYTE PTR __Cat$222787[ebp]
	mov	BYTE PTR $T222784[ebp], cl
	mov	dl, BYTE PTR $T222783[ebp]
	mov	BYTE PTR $T222797[ebp], dl
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T222796[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T222795[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR $T222795[ebp]
	sar	edx, 2
	mov	DWORD PTR __Count$222791[ebp], edx
	mov	eax, DWORD PTR __Count$222791[ebp]
	mov	ecx, DWORD PTR $T222796[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Result$222792[ebp], edx
	cmp	DWORD PTR __Count$222791[ebp], 0
	jbe	SHORT $LN6@unchecked_@3
	mov	eax, DWORD PTR __Count$222791[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T222795[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$222791[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR $T222796[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN6@unchecked_@3:
	mov	eax, DWORD PTR __Result$222792[ebp]

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<int *,int *,std::allocator<int> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<int *,int *,std::allocator<int> >
_TEXT	ENDS
END
