; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvDllPromotionInfo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05OCFELOIJ@1?40?40?$AA@			; `string'
CONST	SEGMENT
_guidICvUnknown DD 0d89ba82fH
	DW	09fa3H
	DW	04696H
	DB	0b3H
	DB	0f4H
	DB	052H
	DB	0bdH
	DB	0b1H
	DB	01H
	DB	0cfH
	DB	0b2H
_guidICvPromotionInfo1 DD 0b1ac8c62H
	DW	011cfH
	DW	04ac9H
	DB	086H
	DB	033H
	DB	0b3H
	DB	087H
	DB	0ebH
	DB	0f9H
	DB	0e0H
	DB	0daH
CONST	ENDS
_DATA	SEGMENT
_CIV5_XP2_DLL_VERSION DD FLAT:??_C@_05OCFELOIJ@1?40?40?$AA@
_DATA	ENDS
;	COMDAT ??_C@_05OCFELOIJ@1?40?40?$AA@
CONST	SEGMENT
??_C@_05OCFELOIJ@1?40?40?$AA@ DB '1.0.0', 00H		; `string'
CONST	ENDS
PUBLIC	??_7CvDllPromotionInfo@@6B@			; CvDllPromotionInfo::`vftable'
PUBLIC	??_7ICvPromotionInfo1@@6B@			; ICvPromotionInfo1::`vftable'
PUBLIC	??_7ICvUnknown@@6B@				; ICvUnknown::`vftable'
PUBLIC	??0CvDllPromotionInfo@@QAE@PAVCvPromotionEntry@@@Z ; CvDllPromotionInfo::CvDllPromotionInfo
PUBLIC	?QueryInterface@CvDllPromotionInfo@@UAGPAXU_GUID@@@Z ; CvDllPromotionInfo::QueryInterface
PUBLIC	?Destroy@CvDllPromotionInfo@@EAGXXZ		; CvDllPromotionInfo::Destroy
PUBLIC	?GetType@CvDllPromotionInfo@@UAGPBDXZ		; CvDllPromotionInfo::GetType
PUBLIC	?GetDescription@CvDllPromotionInfo@@UAGPBDXZ	; CvDllPromotionInfo::GetDescription
EXTRN	__purecall:PROC
;	COMDAT ??_7CvDllPromotionInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllpromotioninfo.cpp
CONST	SEGMENT
??_7CvDllPromotionInfo@@6B@ DD FLAT:?QueryInterface@CvDllPromotionInfo@@UAGPAXU_GUID@@@Z ; CvDllPromotionInfo::`vftable'
	DD	FLAT:?Destroy@CvDllPromotionInfo@@EAGXXZ
	DD	FLAT:?GetType@CvDllPromotionInfo@@UAGPBDXZ
	DD	FLAT:?GetDescription@CvDllPromotionInfo@@UAGPBDXZ
CONST	ENDS
;	COMDAT ??_7ICvPromotionInfo1@@6B@
CONST	SEGMENT
??_7ICvPromotionInfo1@@6B@ DD FLAT:__purecall		; ICvPromotionInfo1::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ICvUnknown@@6B@
CONST	SEGMENT
??_7ICvUnknown@@6B@ DD FLAT:__purecall			; ICvUnknown::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvDllPromotionInfo@@QAE@PAVCvPromotionEntry@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pPromotionInfo$ = 8					; size = 4
??0CvDllPromotionInfo@@QAE@PAVCvPromotionEntry@@@Z PROC	; CvDllPromotionInfo::CvDllPromotionInfo, COMDAT
; _this$ = ecx

; 20   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICvUnknown@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ICvPromotionInfo1@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7CvDllPromotionInfo@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pPromotionInfo$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 21   : 	FAssertMsg(pPromotionInfo != NULL, "SHOULD NOT HAPPEN");
; 22   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CvDllPromotionInfo@@QAE@PAVCvPromotionEntry@@@Z ENDP	; CvDllPromotionInfo::CvDllPromotionInfo
_TEXT	ENDS
PUBLIC	??1CvDllPromotionInfo@@QAE@XZ			; CvDllPromotionInfo::~CvDllPromotionInfo
; Function compile flags: /Odtp
;	COMDAT ??1CvDllPromotionInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvDllPromotionInfo@@QAE@XZ PROC			; CvDllPromotionInfo::~CvDllPromotionInfo, COMDAT
; _this$ = ecx

; 25   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvDllPromotionInfo@@6B@

; 26   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CvDllPromotionInfo@@QAE@XZ ENDP			; CvDllPromotionInfo::~CvDllPromotionInfo
_TEXT	ENDS
PUBLIC	?IncrementReference@CvDllPromotionInfo@@QAEIXZ	; CvDllPromotionInfo::IncrementReference
; Function compile flags: /Odtp
;	COMDAT ?QueryInterface@CvDllPromotionInfo@@UAGPAXU_GUID@@@Z
_TEXT	SEGMENT
tv90 = -88						; size = 4
tv161 = -84						; size = 4
tv85 = -80						; size = 4
tv137 = -76						; size = 4
$T217962 = -72						; size = 16
$T217961 = -56						; size = 16
$T217960 = -40						; size = 16
$T217959 = -20						; size = 16
_this$ = 8						; size = 4
_guidInterface$ = 12					; size = 16
?QueryInterface@CvDllPromotionInfo@@UAGPAXU_GUID@@@Z PROC ; CvDllPromotionInfo::QueryInterface, COMDAT

; 29   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 30   : 	if(guidInterface == ICvUnknown::GetInterfaceId() ||
; 31   : 	        guidInterface == ICvPromotionInfo1::GetInterfaceId())

	mov	eax, DWORD PTR _guidICvUnknown
	mov	DWORD PTR $T217960[ebp], eax
	mov	ecx, DWORD PTR _guidICvUnknown+4
	mov	DWORD PTR $T217960[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvUnknown+8
	mov	DWORD PTR $T217960[ebp+8], edx
	mov	eax, DWORD PTR _guidICvUnknown+12
	mov	DWORD PTR $T217960[ebp+12], eax
	mov	ecx, DWORD PTR $T217960[ebp]
	mov	DWORD PTR $T217959[ebp], ecx
	mov	edx, DWORD PTR $T217960[ebp+4]
	mov	DWORD PTR $T217959[ebp+4], edx
	mov	eax, DWORD PTR $T217960[ebp+8]
	mov	DWORD PTR $T217959[ebp+8], eax
	mov	ecx, DWORD PTR $T217960[ebp+12]
	mov	DWORD PTR $T217959[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T217959[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv137[ebp], edx
	repe cmpsb
	je	SHORT $LN17@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv137[ebp], eax
$LN17@QueryInter:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv85[ebp], 0
	sete	dl
	test	edx, edx
	jne	SHORT $LN1@QueryInter
	mov	eax, DWORD PTR _guidICvPromotionInfo1
	mov	DWORD PTR $T217962[ebp], eax
	mov	ecx, DWORD PTR _guidICvPromotionInfo1+4
	mov	DWORD PTR $T217962[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvPromotionInfo1+8
	mov	DWORD PTR $T217962[ebp+8], edx
	mov	eax, DWORD PTR _guidICvPromotionInfo1+12
	mov	DWORD PTR $T217962[ebp+12], eax
	mov	ecx, DWORD PTR $T217962[ebp]
	mov	DWORD PTR $T217961[ebp], ecx
	mov	edx, DWORD PTR $T217962[ebp+4]
	mov	DWORD PTR $T217961[ebp+4], edx
	mov	eax, DWORD PTR $T217962[ebp+8]
	mov	DWORD PTR $T217961[ebp+8], eax
	mov	ecx, DWORD PTR $T217962[ebp+12]
	mov	DWORD PTR $T217961[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T217961[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv161[ebp], edx
	repe cmpsb
	je	SHORT $LN18@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv161[ebp], eax
$LN18@QueryInter:
	mov	ecx, DWORD PTR tv161[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv90[ebp], 0
	sete	dl
	test	edx, edx
	je	SHORT $LN2@QueryInter
$LN1@QueryInter:

; 32   : 	{
; 33   : 		IncrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncrementReference@CvDllPromotionInfo@@QAEIXZ ; CvDllPromotionInfo::IncrementReference

; 34   : 		return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN3@QueryInter
$LN2@QueryInter:

; 35   : 	}
; 36   : 
; 37   : 	return NULL;

	xor	eax, eax
$LN3@QueryInter:

; 38   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?QueryInterface@CvDllPromotionInfo@@UAGPAXU_GUID@@@Z ENDP ; CvDllPromotionInfo::QueryInterface
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IncrementReference@CvDllPromotionInfo@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IncrementReference@CvDllPromotionInfo@@QAEIXZ PROC	; CvDllPromotionInfo::IncrementReference, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 	++m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 43   : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 44   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IncrementReference@CvDllPromotionInfo@@QAEIXZ ENDP	; CvDllPromotionInfo::IncrementReference
_TEXT	ENDS
PUBLIC	??3CvDllPromotionInfo@@SAXPAX@Z			; CvDllPromotionInfo::operator delete
PUBLIC	?DecrementReference@CvDllPromotionInfo@@QAEIXZ	; CvDllPromotionInfo::DecrementReference
; Function compile flags: /Odtp
;	COMDAT ?DecrementReference@CvDllPromotionInfo@@QAEIXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T217994 = -8						; size = 4
$T217993 = -4						; size = 4
?DecrementReference@CvDllPromotionInfo@@QAEIXZ PROC	; CvDllPromotionInfo::DecrementReference, COMDAT
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 	if(m_uiRefCount == 1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN2@DecrementR

; 49   : 	{
; 50   : 		delete this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T217994[ebp], ecx
	mov	edx, DWORD PTR $T217994[ebp]
	mov	DWORD PTR $T217993[ebp], edx
	cmp	DWORD PTR $T217993[ebp], 0
	je	SHORT $LN5@DecrementR
	mov	ecx, DWORD PTR $T217993[ebp]
	call	??1CvDllPromotionInfo@@QAE@XZ		; CvDllPromotionInfo::~CvDllPromotionInfo
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN8@DecrementR
	mov	ecx, DWORD PTR $T217993[ebp]
	push	ecx
	call	??3CvDllPromotionInfo@@SAXPAX@Z		; CvDllPromotionInfo::operator delete
	add	esp, 4
$LN8@DecrementR:
	mov	edx, DWORD PTR $T217993[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN6@DecrementR
$LN5@DecrementR:
	mov	DWORD PTR tv70[ebp], 0
$LN6@DecrementR:

; 51   : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@DecrementR

; 52   : 	}
; 53   : 	else

	jmp	SHORT $LN3@DecrementR
$LN2@DecrementR:

; 54   : 	{
; 55   : 		--m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 56   : 		return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN3@DecrementR:

; 57   : 	}
; 58   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DecrementReference@CvDllPromotionInfo@@QAEIXZ ENDP	; CvDllPromotionInfo::DecrementReference
_TEXT	ENDS
PUBLIC	?GetReferenceCount@CvDllPromotionInfo@@QAEIXZ	; CvDllPromotionInfo::GetReferenceCount
; Function compile flags: /Odtp
;	COMDAT ?GetReferenceCount@CvDllPromotionInfo@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReferenceCount@CvDllPromotionInfo@@QAEIXZ PROC	; CvDllPromotionInfo::GetReferenceCount, COMDAT
; _this$ = ecx

; 61   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 63   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetReferenceCount@CvDllPromotionInfo@@QAEIXZ ENDP	; CvDllPromotionInfo::GetReferenceCount
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Destroy@CvDllPromotionInfo@@EAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Destroy@CvDllPromotionInfo@@EAGXXZ PROC		; CvDllPromotionInfo::Destroy, COMDAT

; 66   : {

	push	ebp
	mov	ebp, esp

; 67   : 	DecrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecrementReference@CvDllPromotionInfo@@QAEIXZ ; CvDllPromotionInfo::DecrementReference

; 68   : }

	pop	ebp
	ret	4
?Destroy@CvDllPromotionInfo@@EAGXXZ ENDP		; CvDllPromotionInfo::Destroy
_TEXT	ENDS
EXTRN	?Free@CvDllGameContext@@SAXPAX@Z:PROC		; CvDllGameContext::Free
; Function compile flags: /Odtp
;	COMDAT ??3CvDllPromotionInfo@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CvDllPromotionInfo@@SAXPAX@Z PROC			; CvDllPromotionInfo::operator delete, COMDAT

; 71   : {

	push	ebp
	mov	ebp, esp

; 72   : 	CvDllGameContext::Free(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
	add	esp, 4

; 73   : }

	pop	ebp
	ret	0
??3CvDllPromotionInfo@@SAXPAX@Z ENDP			; CvDllPromotionInfo::operator delete
_TEXT	ENDS
PUBLIC	??2CvDllPromotionInfo@@SAPAXI@Z			; CvDllPromotionInfo::operator new
EXTRN	?Allocate@CvDllGameContext@@SAPAXI@Z:PROC	; CvDllGameContext::Allocate
; Function compile flags: /Odtp
;	COMDAT ??2CvDllPromotionInfo@@SAPAXI@Z
_TEXT	SEGMENT
_bytes$ = 8						; size = 4
??2CvDllPromotionInfo@@SAPAXI@Z PROC			; CvDllPromotionInfo::operator new, COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp

; 77   : 	return CvDllGameContext::Allocate(bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	call	?Allocate@CvDllGameContext@@SAPAXI@Z	; CvDllGameContext::Allocate
	add	esp, 4

; 78   : }

	pop	ebp
	ret	0
??2CvDllPromotionInfo@@SAPAXI@Z ENDP			; CvDllPromotionInfo::operator new
_TEXT	ENDS
PUBLIC	?GetInstance@CvDllPromotionInfo@@QAEPAVCvPromotionEntry@@XZ ; CvDllPromotionInfo::GetInstance
; Function compile flags: /Odtp
;	COMDAT ?GetInstance@CvDllPromotionInfo@@QAEPAVCvPromotionEntry@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInstance@CvDllPromotionInfo@@QAEPAVCvPromotionEntry@@XZ PROC ; CvDllPromotionInfo::GetInstance, COMDAT
; _this$ = ecx

; 81   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 	return m_pPromotionInfo;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 83   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInstance@CvDllPromotionInfo@@QAEPAVCvPromotionEntry@@XZ ENDP ; CvDllPromotionInfo::GetInstance
_TEXT	ENDS
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Odtp
;	COMDAT ?GetType@CvDllPromotionInfo@@UAGPBDXZ
_TEXT	SEGMENT
$T218016 = -4						; size = 4
_this$ = 8						; size = 4
?GetType@CvDllPromotionInfo@@UAGPBDXZ PROC		; CvDllPromotionInfo::GetType, COMDAT

; 86   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 87   : 	return m_pPromotionInfo->GetType();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T218016[ebp], ecx
	mov	ecx, DWORD PTR $T218016[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 88   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetType@CvDllPromotionInfo@@UAGPBDXZ ENDP		; CvDllPromotionInfo::GetType
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetDescription@CvDllPromotionInfo@@UAGPBDXZ
_TEXT	SEGMENT
$T218022 = -4						; size = 4
_this$ = 8						; size = 4
?GetDescription@CvDllPromotionInfo@@UAGPBDXZ PROC	; CvDllPromotionInfo::GetDescription, COMDAT

; 91   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 92   : 	return m_pPromotionInfo->GetDescription();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T218022[ebp], ecx
	mov	ecx, DWORD PTR $T218022[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 93   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDescription@CvDllPromotionInfo@@UAGPBDXZ ENDP	; CvDllPromotionInfo::GetDescription
_TEXT	ENDS
END
