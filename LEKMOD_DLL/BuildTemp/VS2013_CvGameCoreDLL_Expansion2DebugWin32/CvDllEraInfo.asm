; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvDllEraInfo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05OCFELOIJ@1?40?40?$AA@			; `string'
CONST	SEGMENT
_guidICvUnknown DD 0d89ba82fH
	DW	09fa3H
	DW	04696H
	DB	0b3H
	DB	0f4H
	DB	052H
	DB	0bdH
	DB	0b1H
	DB	01H
	DB	0cfH
	DB	0b2H
_guidICvEraInfo1 DD 0fda260ceH
	DW	0a5d3H
	DW	04191H
	DB	083H
	DB	05fH
	DB	01bH
	DB	099H
	DB	0b3H
	DB	060H
	DB	029H
	DB	01dH
CONST	ENDS
_DATA	SEGMENT
_CIV5_XP2_DLL_VERSION DD FLAT:??_C@_05OCFELOIJ@1?40?40?$AA@
_DATA	ENDS
;	COMDAT ??_C@_05OCFELOIJ@1?40?40?$AA@
CONST	SEGMENT
??_C@_05OCFELOIJ@1?40?40?$AA@ DB '1.0.0', 00H		; `string'
CONST	ENDS
PUBLIC	??_7CvDllEraInfo@@6B@				; CvDllEraInfo::`vftable'
PUBLIC	??_7ICvEraInfo1@@6B@				; ICvEraInfo1::`vftable'
PUBLIC	??_7ICvUnknown@@6B@				; ICvUnknown::`vftable'
PUBLIC	??0CvDllEraInfo@@QAE@PAVCvEraInfo@@@Z		; CvDllEraInfo::CvDllEraInfo
PUBLIC	?QueryInterface@CvDllEraInfo@@UAGPAXU_GUID@@@Z	; CvDllEraInfo::QueryInterface
PUBLIC	?Destroy@CvDllEraInfo@@EAGXXZ			; CvDllEraInfo::Destroy
PUBLIC	?GetType@CvDllEraInfo@@UAGPBDXZ			; CvDllEraInfo::GetType
PUBLIC	?GetDescription@CvDllEraInfo@@UAGPBDXZ		; CvDllEraInfo::GetDescription
PUBLIC	?GetNumEraVOs@CvDllEraInfo@@UAGHXZ		; CvDllEraInfo::GetNumEraVOs
PUBLIC	?GetEraVO@CvDllEraInfo@@UAGPBDH@Z		; CvDllEraInfo::GetEraVO
PUBLIC	?GetArtPrefix@CvDllEraInfo@@UAGPBDXZ		; CvDllEraInfo::GetArtPrefix
EXTRN	__purecall:PROC
;	COMDAT ??_7CvDllEraInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllerainfo.cpp
CONST	SEGMENT
??_7CvDllEraInfo@@6B@ DD FLAT:?QueryInterface@CvDllEraInfo@@UAGPAXU_GUID@@@Z ; CvDllEraInfo::`vftable'
	DD	FLAT:?Destroy@CvDllEraInfo@@EAGXXZ
	DD	FLAT:?GetType@CvDllEraInfo@@UAGPBDXZ
	DD	FLAT:?GetDescription@CvDllEraInfo@@UAGPBDXZ
	DD	FLAT:?GetNumEraVOs@CvDllEraInfo@@UAGHXZ
	DD	FLAT:?GetEraVO@CvDllEraInfo@@UAGPBDH@Z
	DD	FLAT:?GetArtPrefix@CvDllEraInfo@@UAGPBDXZ
CONST	ENDS
;	COMDAT ??_7ICvEraInfo1@@6B@
CONST	SEGMENT
??_7ICvEraInfo1@@6B@ DD FLAT:__purecall			; ICvEraInfo1::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ICvUnknown@@6B@
CONST	SEGMENT
??_7ICvUnknown@@6B@ DD FLAT:__purecall			; ICvUnknown::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvDllEraInfo@@QAE@PAVCvEraInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pEraInfo$ = 8						; size = 4
??0CvDllEraInfo@@QAE@PAVCvEraInfo@@@Z PROC		; CvDllEraInfo::CvDllEraInfo, COMDAT
; _this$ = ecx

; 19   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICvUnknown@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ICvEraInfo1@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7CvDllEraInfo@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pEraInfo$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 20   : 	FAssertMsg(pEraInfo != NULL, "SHOULD NOT HAPPEN");
; 21   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CvDllEraInfo@@QAE@PAVCvEraInfo@@@Z ENDP		; CvDllEraInfo::CvDllEraInfo
_TEXT	ENDS
PUBLIC	??1CvDllEraInfo@@QAE@XZ				; CvDllEraInfo::~CvDllEraInfo
; Function compile flags: /Odtp
;	COMDAT ??1CvDllEraInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvDllEraInfo@@QAE@XZ PROC				; CvDllEraInfo::~CvDllEraInfo, COMDAT
; _this$ = ecx

; 24   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvDllEraInfo@@6B@

; 25   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CvDllEraInfo@@QAE@XZ ENDP				; CvDllEraInfo::~CvDllEraInfo
_TEXT	ENDS
PUBLIC	?IncrementReference@CvDllEraInfo@@QAEIXZ	; CvDllEraInfo::IncrementReference
; Function compile flags: /Odtp
;	COMDAT ?QueryInterface@CvDllEraInfo@@UAGPAXU_GUID@@@Z
_TEXT	SEGMENT
tv90 = -88						; size = 4
tv161 = -84						; size = 4
tv85 = -80						; size = 4
tv137 = -76						; size = 4
$T217979 = -72						; size = 16
$T217978 = -56						; size = 16
$T217977 = -40						; size = 16
$T217976 = -20						; size = 16
_this$ = 8						; size = 4
_guidInterface$ = 12					; size = 16
?QueryInterface@CvDllEraInfo@@UAGPAXU_GUID@@@Z PROC	; CvDllEraInfo::QueryInterface, COMDAT

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 29   : 	if(guidInterface == ICvUnknown::GetInterfaceId() ||
; 30   : 	        guidInterface == ICvEraInfo1::GetInterfaceId())

	mov	eax, DWORD PTR _guidICvUnknown
	mov	DWORD PTR $T217977[ebp], eax
	mov	ecx, DWORD PTR _guidICvUnknown+4
	mov	DWORD PTR $T217977[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvUnknown+8
	mov	DWORD PTR $T217977[ebp+8], edx
	mov	eax, DWORD PTR _guidICvUnknown+12
	mov	DWORD PTR $T217977[ebp+12], eax
	mov	ecx, DWORD PTR $T217977[ebp]
	mov	DWORD PTR $T217976[ebp], ecx
	mov	edx, DWORD PTR $T217977[ebp+4]
	mov	DWORD PTR $T217976[ebp+4], edx
	mov	eax, DWORD PTR $T217977[ebp+8]
	mov	DWORD PTR $T217976[ebp+8], eax
	mov	ecx, DWORD PTR $T217977[ebp+12]
	mov	DWORD PTR $T217976[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T217976[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv137[ebp], edx
	repe cmpsb
	je	SHORT $LN17@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv137[ebp], eax
$LN17@QueryInter:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv85[ebp], 0
	sete	dl
	test	edx, edx
	jne	SHORT $LN1@QueryInter
	mov	eax, DWORD PTR _guidICvEraInfo1
	mov	DWORD PTR $T217979[ebp], eax
	mov	ecx, DWORD PTR _guidICvEraInfo1+4
	mov	DWORD PTR $T217979[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvEraInfo1+8
	mov	DWORD PTR $T217979[ebp+8], edx
	mov	eax, DWORD PTR _guidICvEraInfo1+12
	mov	DWORD PTR $T217979[ebp+12], eax
	mov	ecx, DWORD PTR $T217979[ebp]
	mov	DWORD PTR $T217978[ebp], ecx
	mov	edx, DWORD PTR $T217979[ebp+4]
	mov	DWORD PTR $T217978[ebp+4], edx
	mov	eax, DWORD PTR $T217979[ebp+8]
	mov	DWORD PTR $T217978[ebp+8], eax
	mov	ecx, DWORD PTR $T217979[ebp+12]
	mov	DWORD PTR $T217978[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T217978[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv161[ebp], edx
	repe cmpsb
	je	SHORT $LN18@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv161[ebp], eax
$LN18@QueryInter:
	mov	ecx, DWORD PTR tv161[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv90[ebp], 0
	sete	dl
	test	edx, edx
	je	SHORT $LN2@QueryInter
$LN1@QueryInter:

; 31   : 	{
; 32   : 		IncrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncrementReference@CvDllEraInfo@@QAEIXZ ; CvDllEraInfo::IncrementReference

; 33   : 		return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN3@QueryInter
$LN2@QueryInter:

; 34   : 	}
; 35   : 
; 36   : 	return NULL;

	xor	eax, eax
$LN3@QueryInter:

; 37   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?QueryInterface@CvDllEraInfo@@UAGPAXU_GUID@@@Z ENDP	; CvDllEraInfo::QueryInterface
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IncrementReference@CvDllEraInfo@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IncrementReference@CvDllEraInfo@@QAEIXZ PROC		; CvDllEraInfo::IncrementReference, COMDAT
; _this$ = ecx

; 40   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 	++m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 42   : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 43   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IncrementReference@CvDllEraInfo@@QAEIXZ ENDP		; CvDllEraInfo::IncrementReference
_TEXT	ENDS
PUBLIC	??3CvDllEraInfo@@SAXPAX@Z			; CvDllEraInfo::operator delete
PUBLIC	?DecrementReference@CvDllEraInfo@@QAEIXZ	; CvDllEraInfo::DecrementReference
; Function compile flags: /Odtp
;	COMDAT ?DecrementReference@CvDllEraInfo@@QAEIXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T218011 = -8						; size = 4
$T218010 = -4						; size = 4
?DecrementReference@CvDllEraInfo@@QAEIXZ PROC		; CvDllEraInfo::DecrementReference, COMDAT
; _this$ = ecx

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 	if(m_uiRefCount == 1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN2@DecrementR

; 48   : 	{
; 49   : 		delete this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T218011[ebp], ecx
	mov	edx, DWORD PTR $T218011[ebp]
	mov	DWORD PTR $T218010[ebp], edx
	cmp	DWORD PTR $T218010[ebp], 0
	je	SHORT $LN5@DecrementR
	mov	ecx, DWORD PTR $T218010[ebp]
	call	??1CvDllEraInfo@@QAE@XZ			; CvDllEraInfo::~CvDllEraInfo
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN8@DecrementR
	mov	ecx, DWORD PTR $T218010[ebp]
	push	ecx
	call	??3CvDllEraInfo@@SAXPAX@Z		; CvDllEraInfo::operator delete
	add	esp, 4
$LN8@DecrementR:
	mov	edx, DWORD PTR $T218010[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN6@DecrementR
$LN5@DecrementR:
	mov	DWORD PTR tv70[ebp], 0
$LN6@DecrementR:

; 50   : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@DecrementR

; 51   : 	}
; 52   : 	else

	jmp	SHORT $LN3@DecrementR
$LN2@DecrementR:

; 53   : 	{
; 54   : 		--m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 55   : 		return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN3@DecrementR:

; 56   : 	}
; 57   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DecrementReference@CvDllEraInfo@@QAEIXZ ENDP		; CvDllEraInfo::DecrementReference
_TEXT	ENDS
PUBLIC	?GetReferenceCount@CvDllEraInfo@@QAEIXZ		; CvDllEraInfo::GetReferenceCount
; Function compile flags: /Odtp
;	COMDAT ?GetReferenceCount@CvDllEraInfo@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReferenceCount@CvDllEraInfo@@QAEIXZ PROC		; CvDllEraInfo::GetReferenceCount, COMDAT
; _this$ = ecx

; 60   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 61   : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 62   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetReferenceCount@CvDllEraInfo@@QAEIXZ ENDP		; CvDllEraInfo::GetReferenceCount
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Destroy@CvDllEraInfo@@EAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Destroy@CvDllEraInfo@@EAGXXZ PROC			; CvDllEraInfo::Destroy, COMDAT

; 65   : {

	push	ebp
	mov	ebp, esp

; 66   : 	DecrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecrementReference@CvDllEraInfo@@QAEIXZ ; CvDllEraInfo::DecrementReference

; 67   : }

	pop	ebp
	ret	4
?Destroy@CvDllEraInfo@@EAGXXZ ENDP			; CvDllEraInfo::Destroy
_TEXT	ENDS
EXTRN	?Free@CvDllGameContext@@SAXPAX@Z:PROC		; CvDllGameContext::Free
; Function compile flags: /Odtp
;	COMDAT ??3CvDllEraInfo@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CvDllEraInfo@@SAXPAX@Z PROC				; CvDllEraInfo::operator delete, COMDAT

; 70   : {

	push	ebp
	mov	ebp, esp

; 71   : 	CvDllGameContext::Free(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
	add	esp, 4

; 72   : }

	pop	ebp
	ret	0
??3CvDllEraInfo@@SAXPAX@Z ENDP				; CvDllEraInfo::operator delete
_TEXT	ENDS
PUBLIC	??2CvDllEraInfo@@SAPAXI@Z			; CvDllEraInfo::operator new
EXTRN	?Allocate@CvDllGameContext@@SAPAXI@Z:PROC	; CvDllGameContext::Allocate
; Function compile flags: /Odtp
;	COMDAT ??2CvDllEraInfo@@SAPAXI@Z
_TEXT	SEGMENT
_bytes$ = 8						; size = 4
??2CvDllEraInfo@@SAPAXI@Z PROC				; CvDllEraInfo::operator new, COMDAT

; 75   : {

	push	ebp
	mov	ebp, esp

; 76   : 	return CvDllGameContext::Allocate(bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	call	?Allocate@CvDllGameContext@@SAPAXI@Z	; CvDllGameContext::Allocate
	add	esp, 4

; 77   : }

	pop	ebp
	ret	0
??2CvDllEraInfo@@SAPAXI@Z ENDP				; CvDllEraInfo::operator new
_TEXT	ENDS
PUBLIC	?GetInstance@CvDllEraInfo@@QAEPAVCvEraInfo@@XZ	; CvDllEraInfo::GetInstance
; Function compile flags: /Odtp
;	COMDAT ?GetInstance@CvDllEraInfo@@QAEPAVCvEraInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInstance@CvDllEraInfo@@QAEPAVCvEraInfo@@XZ PROC	; CvDllEraInfo::GetInstance, COMDAT
; _this$ = ecx

; 80   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 	return m_pEraInfo;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 82   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInstance@CvDllEraInfo@@QAEPAVCvEraInfo@@XZ ENDP	; CvDllEraInfo::GetInstance
_TEXT	ENDS
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Odtp
;	COMDAT ?GetType@CvDllEraInfo@@UAGPBDXZ
_TEXT	SEGMENT
$T218033 = -4						; size = 4
_this$ = 8						; size = 4
?GetType@CvDllEraInfo@@UAGPBDXZ PROC			; CvDllEraInfo::GetType, COMDAT

; 85   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 86   : 	return m_pEraInfo->GetType();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T218033[ebp], ecx
	mov	ecx, DWORD PTR $T218033[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 87   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetType@CvDllEraInfo@@UAGPBDXZ ENDP			; CvDllEraInfo::GetType
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetDescription@CvDllEraInfo@@UAGPBDXZ
_TEXT	SEGMENT
$T218039 = -4						; size = 4
_this$ = 8						; size = 4
?GetDescription@CvDllEraInfo@@UAGPBDXZ PROC		; CvDllEraInfo::GetDescription, COMDAT

; 90   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 91   : 	return m_pEraInfo->GetDescription();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T218039[ebp], ecx
	mov	ecx, DWORD PTR $T218039[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 92   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDescription@CvDllEraInfo@@UAGPBDXZ ENDP		; CvDllEraInfo::GetDescription
_TEXT	ENDS
EXTRN	?GetNumEraVOs@CvEraInfo@@QBEHXZ:PROC		; CvEraInfo::GetNumEraVOs
; Function compile flags: /Odtp
;	COMDAT ?GetNumEraVOs@CvDllEraInfo@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumEraVOs@CvDllEraInfo@@UAGHXZ PROC			; CvDllEraInfo::GetNumEraVOs, COMDAT

; 95   : {

	push	ebp
	mov	ebp, esp

; 96   : 	return m_pEraInfo->GetNumEraVOs();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetNumEraVOs@CvEraInfo@@QBEHXZ		; CvEraInfo::GetNumEraVOs

; 97   : }

	pop	ebp
	ret	4
?GetNumEraVOs@CvDllEraInfo@@UAGHXZ ENDP			; CvDllEraInfo::GetNumEraVOs
_TEXT	ENDS
EXTRN	?GetEraVO@CvEraInfo@@QAEPBDH@Z:PROC		; CvEraInfo::GetEraVO
; Function compile flags: /Odtp
;	COMDAT ?GetEraVO@CvDllEraInfo@@UAGPBDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iIndex$ = 12						; size = 4
?GetEraVO@CvDllEraInfo@@UAGPBDH@Z PROC			; CvDllEraInfo::GetEraVO, COMDAT

; 100  : {

	push	ebp
	mov	ebp, esp

; 101  : 	return m_pEraInfo->GetEraVO(iIndex);

	mov	eax, DWORD PTR _iIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?GetEraVO@CvEraInfo@@QAEPBDH@Z		; CvEraInfo::GetEraVO

; 102  : }

	pop	ebp
	ret	8
?GetEraVO@CvDllEraInfo@@UAGPBDH@Z ENDP			; CvDllEraInfo::GetEraVO
_TEXT	ENDS
EXTRN	?getArtPrefix@CvEraInfo@@QBEPBDXZ:PROC		; CvEraInfo::getArtPrefix
; Function compile flags: /Odtp
;	COMDAT ?GetArtPrefix@CvDllEraInfo@@UAGPBDXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetArtPrefix@CvDllEraInfo@@UAGPBDXZ PROC		; CvDllEraInfo::GetArtPrefix, COMDAT

; 105  : {

	push	ebp
	mov	ebp, esp

; 106  : 	return m_pEraInfo->getArtPrefix();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getArtPrefix@CvEraInfo@@QBEPBDXZ	; CvEraInfo::getArtPrefix

; 107  : }

	pop	ebp
	ret	4
?GetArtPrefix@CvDllEraInfo@@UAGPBDXZ ENDP		; CvDllEraInfo::GetArtPrefix
_TEXT	ENDS
END
