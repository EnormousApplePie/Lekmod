; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvGoodyHuts.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA ; CvGoodyHuts::m_aaiPlayerGoodyHutResults
_BSS	SEGMENT
?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA DD 01H DUP (?) ; CvGoodyHuts::m_aaiPlayerGoodyHutResults
_BSS	ENDS
PUBLIC	?DoPlayerReceivedGoody@CvGoodyHuts@@SAXW4PlayerTypes@@W4GoodyTypes@@@Z ; CvGoodyHuts::DoPlayerReceivedGoody
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgoodyhuts.cpp
;	COMDAT ?DoPlayerReceivedGoody@CvGoodyHuts@@SAXW4PlayerTypes@@W4GoodyTypes@@@Z
_TEXT	SEGMENT
_iGoodySlotLoop$216685 = -4				; size = 4
_ePlayer$ = 8						; size = 4
_eGoody$ = 12						; size = 4
?DoPlayerReceivedGoody@CvGoodyHuts@@SAXW4PlayerTypes@@W4GoodyTypes@@@Z PROC ; CvGoodyHuts::DoPlayerReceivedGoody, COMDAT

; 18   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 19   : 	FAssert(ePlayer >= 0);
; 20   : 	FAssert(ePlayer < MAX_MAJOR_CIVS);
; 21   : 	FAssert(eGoody >= 0);
; 22   : 	//	FAssert(eGoody < DB.count("GoodyHuts"));
; 23   : 
; 24   : 	// Push elements up in the array so that we free up element 0
; 25   : 	for (int iGoodySlotLoop = 0; iGoodySlotLoop < NUM_GOODIES_REMEMBERED-1; iGoodySlotLoop++)

	mov	DWORD PTR _iGoodySlotLoop$216685[ebp], 0
	jmp	SHORT $LN3@DoPlayerRe
$LN2@DoPlayerRe:
	mov	eax, DWORD PTR _iGoodySlotLoop$216685[ebp]
	add	eax, 1
	mov	DWORD PTR _iGoodySlotLoop$216685[ebp], eax
$LN3@DoPlayerRe:
	cmp	DWORD PTR _iGoodySlotLoop$216685[ebp], 3
	jge	SHORT $LN1@DoPlayerRe

; 26   : 	{
; 27   : 		m_aaiPlayerGoodyHutResults[ePlayer][iGoodySlotLoop+1] = m_aaiPlayerGoodyHutResults[ePlayer][iGoodySlotLoop];

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	edx, DWORD PTR ?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA ; CvGoodyHuts::m_aaiPlayerGoodyHutResults
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	edx, DWORD PTR ?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA ; CvGoodyHuts::m_aaiPlayerGoodyHutResults
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _iGoodySlotLoop$216685[ebp]
	mov	esi, DWORD PTR _iGoodySlotLoop$216685[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [ecx+edx*4+4], eax

; 28   : 	}

	jmp	SHORT $LN2@DoPlayerRe
$LN1@DoPlayerRe:

; 29   : 
; 30   : 	// Most recent Goody gets slot 0
; 31   : 	m_aaiPlayerGoodyHutResults[ePlayer][0] = eGoody;

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	edx, DWORD PTR ?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA ; CvGoodyHuts::m_aaiPlayerGoodyHutResults
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _eGoody$[ebp]
	mov	DWORD PTR [eax], ecx

; 32   : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?DoPlayerReceivedGoody@CvGoodyHuts@@SAXW4PlayerTypes@@W4GoodyTypes@@@Z ENDP ; CvGoodyHuts::DoPlayerReceivedGoody
_TEXT	ENDS
PUBLIC	?IsHasPlayerReceivedGoodyLately@CvGoodyHuts@@SA_NW4PlayerTypes@@W4GoodyTypes@@@Z ; CvGoodyHuts::IsHasPlayerReceivedGoodyLately
PUBLIC	?IsCanPlayerReceiveGoody@CvGoodyHuts@@SA_NW4PlayerTypes@@W4GoodyTypes@@@Z ; CvGoodyHuts::IsCanPlayerReceiveGoody
; Function compile flags: /Odtp
;	COMDAT ?IsCanPlayerReceiveGoody@CvGoodyHuts@@SA_NW4PlayerTypes@@W4GoodyTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
_eGoody$ = 12						; size = 4
?IsCanPlayerReceiveGoody@CvGoodyHuts@@SA_NW4PlayerTypes@@W4GoodyTypes@@@Z PROC ; CvGoodyHuts::IsCanPlayerReceiveGoody, COMDAT

; 37   : {

	push	ebp
	mov	ebp, esp

; 38   : 	if (IsHasPlayerReceivedGoodyLately(ePlayer, eGoody))

	mov	eax, DWORD PTR _eGoody$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	call	?IsHasPlayerReceivedGoodyLately@CvGoodyHuts@@SA_NW4PlayerTypes@@W4GoodyTypes@@@Z ; CvGoodyHuts::IsHasPlayerReceivedGoodyLately
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@IsCanPlaye

; 39   : 	{
; 40   : 		return false;

	xor	al, al
	jmp	SHORT $LN2@IsCanPlaye
$LN1@IsCanPlaye:

; 41   : 	}
; 42   : 
; 43   : 	return true;

	mov	al, 1
$LN2@IsCanPlaye:

; 44   : }

	pop	ebp
	ret	0
?IsCanPlayerReceiveGoody@CvGoodyHuts@@SA_NW4PlayerTypes@@W4GoodyTypes@@@Z ENDP ; CvGoodyHuts::IsCanPlayerReceiveGoody
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IsHasPlayerReceivedGoodyLately@CvGoodyHuts@@SA_NW4PlayerTypes@@W4GoodyTypes@@@Z
_TEXT	SEGMENT
_iGoodySlotLoop$216698 = -4				; size = 4
_ePlayer$ = 8						; size = 4
_eGoody$ = 12						; size = 4
?IsHasPlayerReceivedGoodyLately@CvGoodyHuts@@SA_NW4PlayerTypes@@W4GoodyTypes@@@Z PROC ; CvGoodyHuts::IsHasPlayerReceivedGoodyLately, COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 50   : 	FAssert(ePlayer >= 0);
; 51   : 	FAssert(ePlayer < MAX_MAJOR_CIVS);
; 52   : 	FAssert(eGoody >= 0);
; 53   : 	//	FAssert(eGoody < DB.count("GoodyHuts"));
; 54   : 
; 55   : 	// Look at all of our Goody slots and see if the requested Goody matches anything
; 56   : 	for (int iGoodySlotLoop = 0; iGoodySlotLoop < NUM_GOODIES_REMEMBERED; iGoodySlotLoop++)

	mov	DWORD PTR _iGoodySlotLoop$216698[ebp], 0
	jmp	SHORT $LN4@IsHasPlaye
$LN3@IsHasPlaye:
	mov	eax, DWORD PTR _iGoodySlotLoop$216698[ebp]
	add	eax, 1
	mov	DWORD PTR _iGoodySlotLoop$216698[ebp], eax
$LN4@IsHasPlaye:
	cmp	DWORD PTR _iGoodySlotLoop$216698[ebp], 4
	jge	SHORT $LN2@IsHasPlaye

; 57   : 	{
; 58   : 		if (m_aaiPlayerGoodyHutResults[ePlayer][iGoodySlotLoop] == eGoody)

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	edx, DWORD PTR ?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA ; CvGoodyHuts::m_aaiPlayerGoodyHutResults
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _iGoodySlotLoop$216698[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	cmp	edx, DWORD PTR _eGoody$[ebp]
	jne	SHORT $LN1@IsHasPlaye

; 59   : 		{
; 60   : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@IsHasPlaye
$LN1@IsHasPlaye:

; 61   : 		}
; 62   : 	}

	jmp	SHORT $LN3@IsHasPlaye
$LN2@IsHasPlaye:

; 63   : 
; 64   : 	return false;

	xor	al, al
$LN5@IsHasPlaye:

; 65   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsHasPlayerReceivedGoodyLately@CvGoodyHuts@@SA_NW4PlayerTypes@@W4GoodyTypes@@@Z ENDP ; CvGoodyHuts::IsHasPlayerReceivedGoodyLately
_TEXT	ENDS
PUBLIC	?Reset@CvGoodyHuts@@SAXXZ			; CvGoodyHuts::Reset
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Odtp
;	COMDAT ?Reset@CvGoodyHuts@@SAXXZ
_TEXT	SEGMENT
$T216861 = -16						; size = 4
$T216860 = -12						; size = 4
_iJ$ = -8						; size = 4
_iI$ = -4						; size = 4
?Reset@CvGoodyHuts@@SAXXZ PROC				; CvGoodyHuts::Reset, COMDAT

; 70   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 71   : 	int iI, iJ;
; 72   : 
; 73   : 	// Allocate memory
; 74   : 	if (m_aaiPlayerGoodyHutResults == NULL)

	cmp	DWORD PTR ?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA, 0 ; CvGoodyHuts::m_aaiPlayerGoodyHutResults
	jne	SHORT $LN10@Reset

; 75   : 	{
; 76   : 		m_aaiPlayerGoodyHutResults = FNEW(int*[MAX_MAJOR_CIVS], c_eCiv5GameplayDLL, 0);

	push	88					; 00000058H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T216860[ebp], eax
	mov	eax, DWORD PTR $T216860[ebp]
	mov	DWORD PTR ?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA, eax ; CvGoodyHuts::m_aaiPlayerGoodyHutResults

; 77   : 		for (iI = 0; iI < MAX_MAJOR_CIVS; iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN9@Reset
$LN8@Reset:
	mov	ecx, DWORD PTR _iI$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$[ebp], ecx
$LN9@Reset:
	cmp	DWORD PTR _iI$[ebp], 22			; 00000016H
	jge	SHORT $LN10@Reset

; 78   : 		{
; 79   : 			m_aaiPlayerGoodyHutResults[iI] = FNEW(int[NUM_GOODIES_REMEMBERED], c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T216861[ebp], eax
	mov	edx, DWORD PTR _iI$[ebp]
	mov	eax, DWORD PTR ?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA ; CvGoodyHuts::m_aaiPlayerGoodyHutResults
	mov	ecx, DWORD PTR $T216861[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 80   : 		}

	jmp	SHORT $LN8@Reset
$LN10@Reset:

; 81   : 	}
; 82   : 
; 83   : 	// Default values
; 84   : 	for (iI = 0; iI < MAX_MAJOR_CIVS; iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN6@Reset
$LN5@Reset:
	mov	edx, DWORD PTR _iI$[ebp]
	add	edx, 1
	mov	DWORD PTR _iI$[ebp], edx
$LN6@Reset:
	cmp	DWORD PTR _iI$[ebp], 22			; 00000016H
	jge	SHORT $LN11@Reset

; 85   : 	{
; 86   : 		for (iJ = 0; iJ < NUM_GOODIES_REMEMBERED; iJ++)

	mov	DWORD PTR _iJ$[ebp], 0
	jmp	SHORT $LN3@Reset
$LN2@Reset:
	mov	eax, DWORD PTR _iJ$[ebp]
	add	eax, 1
	mov	DWORD PTR _iJ$[ebp], eax
$LN3@Reset:
	cmp	DWORD PTR _iJ$[ebp], 4
	jge	SHORT $LN1@Reset

; 87   : 		{
; 88   : 			m_aaiPlayerGoodyHutResults[iI][iJ] = -1;

	mov	ecx, DWORD PTR _iI$[ebp]
	mov	edx, DWORD PTR ?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA ; CvGoodyHuts::m_aaiPlayerGoodyHutResults
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _iJ$[ebp]
	mov	DWORD PTR [eax+ecx*4], -1

; 89   : 		}

	jmp	SHORT $LN2@Reset
$LN1@Reset:

; 90   : 	}

	jmp	SHORT $LN5@Reset
$LN11@Reset:

; 91   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CvGoodyHuts@@SAXXZ ENDP				; CvGoodyHuts::Reset
_TEXT	ENDS
PUBLIC	?Uninit@CvGoodyHuts@@SAXXZ			; CvGoodyHuts::Uninit
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp
;	COMDAT ?Uninit@CvGoodyHuts@@SAXXZ
_TEXT	SEGMENT
$T216874 = -16						; size = 4
$T216869 = -12						; size = 4
$T216868 = -8						; size = 4
_iI$216724 = -4						; size = 4
?Uninit@CvGoodyHuts@@SAXXZ PROC				; CvGoodyHuts::Uninit, COMDAT

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 97   : 	if (m_aaiPlayerGoodyHutResults != NULL)

	cmp	DWORD PTR ?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA, 0 ; CvGoodyHuts::m_aaiPlayerGoodyHutResults
	je	SHORT $LN5@Uninit

; 98   : 	{
; 99   : 		for (int iI = 0; iI < MAX_MAJOR_CIVS; iI++)

	mov	DWORD PTR _iI$216724[ebp], 0
	jmp	SHORT $LN3@Uninit
$LN2@Uninit:
	mov	eax, DWORD PTR _iI$216724[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$216724[ebp], eax
$LN3@Uninit:
	cmp	DWORD PTR _iI$216724[ebp], 22		; 00000016H
	jge	SHORT $LN1@Uninit

; 100  : 		{
; 101  : 			SAFE_DELETE_ARRAY(m_aaiPlayerGoodyHutResults[iI]);

	mov	ecx, DWORD PTR _iI$216724[ebp]
	mov	edx, DWORD PTR ?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA ; CvGoodyHuts::m_aaiPlayerGoodyHutResults
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T216869[ebp], eax
	mov	ecx, DWORD PTR $T216869[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T216868[ebp], edx
	mov	eax, DWORD PTR $T216868[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T216869[ebp]
	mov	DWORD PTR [ecx], 0

; 102  : 		}

	jmp	SHORT $LN2@Uninit
$LN1@Uninit:

; 103  : 		SAFE_DELETE_ARRAY(m_aaiPlayerGoodyHutResults);

	mov	edx, DWORD PTR ?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA ; CvGoodyHuts::m_aaiPlayerGoodyHutResults
	mov	DWORD PTR $T216874[ebp], edx
	mov	eax, DWORD PTR $T216874[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR ?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA, 0 ; CvGoodyHuts::m_aaiPlayerGoodyHutResults
$LN5@Uninit:

; 104  : 	}
; 105  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Uninit@CvGoodyHuts@@SAXXZ ENDP				; CvGoodyHuts::Uninit
_TEXT	ENDS
PUBLIC	??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z ; operator>><int>
PUBLIC	?Read@CvGoodyHuts@@SAXAAVFDataStream@@I@Z	; CvGoodyHuts::Read
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
;	COMDAT ?Read@CvGoodyHuts@@SAXAAVFDataStream@@I@Z
_TEXT	SEGMENT
$T216884 = -20						; size = 4
$T216877 = -16						; size = 8
_iI$216741 = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
_uiParentVersion$ = 12					; size = 4
?Read@CvGoodyHuts@@SAXAAVFDataStream@@I@Z PROC		; CvGoodyHuts::Read, COMDAT

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 114  : 	Reset();

	call	?Reset@CvGoodyHuts@@SAXXZ		; CvGoodyHuts::Reset

; 115  : 
; 116  : 	uint uiVersion;
; 117  : 	kStream >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 118  : 
; 119  : 	for (int iI = 0; iI < MAX_MAJOR_CIVS; iI++)

	mov	DWORD PTR _iI$216741[ebp], 0
	jmp	SHORT $LN3@Read
$LN2@Read:
	mov	ecx, DWORD PTR _iI$216741[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$216741[ebp], ecx
$LN3@Read:
	cmp	DWORD PTR _iI$216741[ebp], 22		; 00000016H
	jge	SHORT $LN4@Read

; 120  : 	{
; 121  : #ifdef AUI_WARNING_FIXES
; 122  : 		ArrayWrapper<int> kWrapper(NUM_GOODIES_REMEMBERED, m_aaiPlayerGoodyHutResults[iI]);
; 123  : 		kStream >> kWrapper;
; 124  : #else
; 125  : 		kStream >> ArrayWrapper<int>(NUM_GOODIES_REMEMBERED, m_aaiPlayerGoodyHutResults[iI]);

	mov	edx, DWORD PTR _iI$216741[ebp]
	mov	eax, DWORD PTR ?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA ; CvGoodyHuts::m_aaiPlayerGoodyHutResults
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T216884[ebp], ecx
	mov	edx, DWORD PTR $T216884[ebp]
	mov	DWORD PTR $T216877[ebp], edx
	mov	DWORD PTR $T216877[ebp+4], 4
	lea	eax, DWORD PTR $T216877[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z ; operator>><int>
	add	esp, 8
	jmp	SHORT $LN2@Read
$LN4@Read:

; 126  : #endif
; 127  : 	}
; 128  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Read@CvGoodyHuts@@SAXAAVFDataStream@@I@Z ENDP		; CvGoodyHuts::Read
_TEXT	ENDS
PUBLIC	??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z ; operator<<<int>
PUBLIC	?Write@CvGoodyHuts@@SAXAAVFDataStream@@@Z	; CvGoodyHuts::Write
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@CvGoodyHuts@@SAXAAVFDataStream@@@Z
_TEXT	SEGMENT
$T216894 = -20						; size = 4
$T216887 = -16						; size = 8
_iI$216782 = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Write@CvGoodyHuts@@SAXAAVFDataStream@@@Z PROC		; CvGoodyHuts::Write, COMDAT

; 132  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 133  : 	// Current version number
; 134  : 	uint uiVersion = 1;

	mov	DWORD PTR _uiVersion$[ebp], 1

; 135  : 	kStream << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 136  : 
; 137  : 	for (int iI = 0; iI < MAX_MAJOR_CIVS; iI++)

	mov	DWORD PTR _iI$216782[ebp], 0
	jmp	SHORT $LN3@Write
$LN2@Write:
	mov	ecx, DWORD PTR _iI$216782[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$216782[ebp], ecx
$LN3@Write:
	cmp	DWORD PTR _iI$216782[ebp], 22		; 00000016H
	jge	SHORT $LN4@Write

; 138  : 	{
; 139  : #ifdef AUI_WARNING_FIXES
; 140  : 		ArrayWrapper<int> kWrapper(NUM_GOODIES_REMEMBERED, m_aaiPlayerGoodyHutResults[iI]);
; 141  : 		kStream << kWrapper;
; 142  : #else
; 143  : 		kStream << ArrayWrapper<int>(NUM_GOODIES_REMEMBERED, m_aaiPlayerGoodyHutResults[iI]);

	mov	edx, DWORD PTR _iI$216782[ebp]
	mov	eax, DWORD PTR ?m_aaiPlayerGoodyHutResults@CvGoodyHuts@@0PAPAHA ; CvGoodyHuts::m_aaiPlayerGoodyHutResults
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T216894[ebp], ecx
	mov	edx, DWORD PTR $T216894[ebp]
	mov	DWORD PTR $T216887[ebp], edx
	mov	DWORD PTR $T216887[ebp+4], 4
	lea	eax, DWORD PTR $T216887[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z ; operator<<<int>
	add	esp, 8
	jmp	SHORT $LN2@Write
$LN4@Write:

; 144  : #endif
; 145  : 	}
; 146  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Write@CvGoodyHuts@@SAXAAVFDataStream@@@Z ENDP		; CvGoodyHuts::Write
_TEXT	ENDS
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z
_TEXT	SEGMENT
_i$ = -12						; size = 4
_values$ = -8						; size = 4
_count$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
_v$ = 12						; size = 4
??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z PROC ; operator>><int>, COMDAT

; 515  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 516  : 	int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 517  : 	int count = v.getCount();

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _count$[ebp], ecx

; 518  : 	ValueType * values = v.getArray();

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _values$[ebp], eax

; 519  : 	for(i = 0; i < count; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@operator:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jge	SHORT $LN1@operator

; 520  : 	{
; 521  : 		loadFrom >> values[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 522  : 	}

	jmp	SHORT $LN2@operator
$LN1@operator:

; 523  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 524  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z ENDP ; operator>><int>
_TEXT	ENDS
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z
_TEXT	SEGMENT
_i$ = -12						; size = 4
_values$ = -8						; size = 4
_count$ = -4						; size = 4
_saveTo$ = 8						; size = 4
_v$ = 12						; size = 4
??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z PROC ; operator<<<int>, COMDAT

; 502  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 503  : 	int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 504  : 	int count = v.getCount();

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _count$[ebp], ecx

; 505  : 	const ValueType * values = v.getArray();

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _values$[ebp], eax

; 506  : 	for(i = 0; i < count; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@operator@2
$LN2@operator@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@operator@2:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jge	SHORT $LN1@operator@2

; 507  : 	{
; 508  : 		saveTo << values[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 509  : 	}

	jmp	SHORT $LN2@operator@2
$LN1@operator@2:

; 510  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 511  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z ENDP ; operator<<<int>
_TEXT	ENDS
END
